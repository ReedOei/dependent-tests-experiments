org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : $r7 = <org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String)>("Unable to track blob ids locally")
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : interfaceinvoke $r7.<org.slf4j.Logger: void warn(java.lang.String)>("Unable to track blob ids locally") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : return
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : r8 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("blobiddownload", null) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : $r3 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : r8 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String)>("blobiddownload", null) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : $r6 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : $r3 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r3, r8)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : $r3 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.GarbageCollectorFileState: java.io.File getAvailableRefs()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : $r6 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r3, r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : $r4 = (org.apache.jackrabbit.oak.plugins.blob.BlobTrackingStore) r1
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : staticinvoke <org.apache.commons.io.FileUtils: void copyFile(java.io.File,java.io.File)>($r3, r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : $r6 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : $r4 = (org.apache.jackrabbit.oak.plugins.blob.BlobTrackingStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : $r5 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobTrackingStore: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobTracker getTracker()>()
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : $r4 = (org.apache.jackrabbit.oak.plugins.blob.BlobTrackingStore) r1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : $r6 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : $r5 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobTrackingStore: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobTracker getTracker()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : interfaceinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobTracker: void add(java.io.File)>(r8)
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : $r5 = interfaceinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.BlobTrackingStore: org.apache.jackrabbit.oak.plugins.blob.datastore.BlobTracker getTracker()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : $r6 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : interfaceinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobTracker: void add(java.io.File)>(r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : goto [?= return]
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : interfaceinvoke $r5.<org.apache.jackrabbit.oak.plugins.blob.datastore.BlobTracker: void add(java.io.File)>(r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : $r6 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : goto [?= return] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.MarkSweepGarbageCollector$BlobCollectionType$1.track : return
