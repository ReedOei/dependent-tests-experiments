org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : r2 = staticinvoke <org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId of(java.lang.String)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean encodeLengthInId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $z0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: boolean encodeLengthInId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $z1 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: boolean hasLengthInfo()>()
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r12 = r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r12 = r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r13 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.io.InputStream getStream(java.lang.String)>($r12)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r13 = virtualinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: java.io.InputStream getStream(java.lang.String)>($r12) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : return $r13
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $z1 = virtualinvoke r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: boolean hasLengthInfo()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : if $z1 == 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $l2 = r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: long length>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : if $z1 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r12 = r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $l2 = r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: long length> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $i0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: int maxCachedBinarySize>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $i0 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: int maxCachedBinarySize> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $l1 = (long) $i0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $l1 = (long) $i0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $b3 = $l2 cmp $l1
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $b3 = $l2 cmp $l1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : if $b3 > 0
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : if $b3 > 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: com.google.common.cache.LoadingCache cache>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : if $b3 > 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r12 = r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: com.google.common.cache.LoadingCache cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r5 = r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r5 = r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r3 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$2
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r3 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$2: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore,org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId)>(r0, r2)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r3 = new org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore: org.slf4j.Logger log> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : interfaceinvoke $r9.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Error occurred while loading bytes from steam while fetching for id {}", r1, $r8)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : interfaceinvoke $r9.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object,java.lang.Object)>("Error occurred while loading bytes from steam while fetching for id {}", r1, $r8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r12 = r2.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId: java.lang.String blobId>
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$2: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore,org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId)>(r0, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r6 = interfaceinvoke $r4.<com.google.common.cache.LoadingCache: java.lang.Object get(java.lang.Object,java.util.concurrent.Callable)>($r5, $r3)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : specialinvoke $r3.<org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$2: void <init>(org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore,org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore$BlobId)>(r0, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r6 = interfaceinvoke $r4.<com.google.common.cache.LoadingCache: java.lang.Object get(java.lang.Object,java.util.concurrent.Callable)>($r5, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : r10 = (byte[]) $r6
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r6 = interfaceinvoke $r4.<com.google.common.cache.LoadingCache: java.lang.Object get(java.lang.Object,java.util.concurrent.Callable)>($r5, $r3) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : r10 = (byte[]) $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r7 = new java.io.ByteArrayInputStream
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r7 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r10)
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r7 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r8 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : return $r7
org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : specialinvoke $r7.<java.io.ByteArrayInputStream: void <init>(byte[])>(r10) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.datastore.DataStoreBlobStore.getInputStream : $r8 := @caughtexception
