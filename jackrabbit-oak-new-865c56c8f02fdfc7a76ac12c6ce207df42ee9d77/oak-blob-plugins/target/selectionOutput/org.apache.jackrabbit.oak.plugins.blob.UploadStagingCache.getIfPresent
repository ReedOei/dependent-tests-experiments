org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r2 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void markLoad()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : virtualinvoke $r2.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void markLoad()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r3 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $z0 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $z0 = interfaceinvoke $r3.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : return null
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats cacheStats> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void markLoadSuccess()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : virtualinvoke $r4.<org.apache.jackrabbit.oak.plugins.blob.StagingCacheStats: void markLoadSuccess()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r5 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r7 = (java.io.File) $r6
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : $r7 = (java.io.File) $r6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.getIfPresent : return $r7
