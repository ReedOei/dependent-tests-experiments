org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r3 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>("Starting purge of uploaded files")
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r3.<org.slf4j.Logger: void info(java.lang.String)>("Starting purge of uploaded files") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r5 = interfaceinvoke $r4.<java.util.concurrent.ConcurrentMap: java.util.Set keySet()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : i0 = 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : i0 = 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : if $z0 == 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : if $z0 == 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r6 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r6 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r7 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Finished removal of [{}] files", $r7)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r6.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object)>("Finished removal of [{}] files", $r7) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : return
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : r2 = (java.lang.String) $r8
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : r2 = (java.lang.String) $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $z1 = interfaceinvoke $r9.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r9 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap map> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r15 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r15.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Error in removing entry for id [{}]", r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r15.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object)>("Error in removing entry for id [{}]", r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $z1 = interfaceinvoke $r9.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : if $z1 != 0
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $z1 = interfaceinvoke $r9.<java.util.concurrent.ConcurrentMap: boolean containsKey(java.lang.Object)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r10 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : if $z1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : goto [?= (branch)]
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : goto [?= (branch)] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r10 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("upload map contains id [{}]", r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r10 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("upload map contains id [{}]", r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r10.<org.slf4j.Logger: void trace(java.lang.String,java.lang.Object)>("upload map contains id [{}]", r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r12 = interfaceinvoke $r11.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r11 = r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: java.util.concurrent.ConcurrentMap attic> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r12 = interfaceinvoke $r11.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : r16 = (java.io.File) $r12
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r12 = interfaceinvoke $r11.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : r16 = (java.io.File) $r12 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void deleteInternal(java.lang.String,java.io.File)>(r2, r16)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : r16 = (java.io.File) $r12 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void deleteInternal(java.lang.String,java.io.File)>(r2, r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke r1.<java.util.Iterator: void remove()>()
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : specialinvoke r0.<org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: void deleteInternal(java.lang.String,java.io.File)>(r2, r16) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke r1.<java.util.Iterator: void remove()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r13 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke r1.<java.util.Iterator: void remove()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r13 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Cache [{}] file deleted for id [{}]", r16, r2)
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r13 = <org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Cache [{}] file deleted for id [{}]", r16, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : i0 = i0 + 1
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : interfaceinvoke $r13.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("Cache [{}] file deleted for id [{}]", r16, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : $r14 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : i0 = i0 + 1 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.UploadStagingCache.remove : goto [?= (branch)]
