org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r4 = r0.<org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore: org.jclouds.blobstore.BlobStoreContext context> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4)
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : staticinvoke <com.google.common.base.Preconditions: java.lang.Object checkNotNull(java.lang.Object)>($r4) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r6 = virtualinvoke r1.<org.apache.jackrabbit.oak.spi.blob.AbstractBlobStore$BlockId: byte[] getDigest()>()
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r6 = virtualinvoke r1.<org.apache.jackrabbit.oak.spi.blob.AbstractBlobStore$BlockId: byte[] getDigest()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : r2 = staticinvoke <org.apache.jackrabbit.oak.commons.StringUtils: java.lang.String convertBytesToHex(byte[])>($r6)
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : r2 = staticinvoke <org.apache.jackrabbit.oak.commons.StringUtils: java.lang.String convertBytesToHex(byte[])>($r6) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore: org.apache.jackrabbit.oak.cache.CacheLIRS cache>
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r7 = r0.<org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r8 = virtualinvoke $r7.<org.apache.jackrabbit.oak.cache.CacheLIRS: java.lang.Object get(java.lang.Object)>(r2)
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r8 = virtualinvoke $r7.<org.apache.jackrabbit.oak.cache.CacheLIRS: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : r21 = (byte[]) $r8
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : r21 = (byte[]) $r8 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : if r21 != null
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : if r21 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore: org.jclouds.blobstore.BlobStoreContext context>
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : if r21 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $l0 = virtualinvoke r1.<org.apache.jackrabbit.oak.spi.blob.AbstractBlobStore$BlockId: long getPos()>()
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $l0 = virtualinvoke r1.<org.apache.jackrabbit.oak.spi.blob.AbstractBlobStore$BlockId: long getPos()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $b1 = $l0 cmp 0L
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $b1 = $l0 cmp 0L >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : if $b1 != 0
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : if $b1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : return r21
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : if $b1 != 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $i2 = lengthof r21
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $i2 = lengthof r21 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $l3 = (long) $i2
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $l3 = (long) $i2 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $l4 = virtualinvoke r1.<org.apache.jackrabbit.oak.spi.blob.AbstractBlobStore$BlockId: long getPos()>()
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $l4 = virtualinvoke r1.<org.apache.jackrabbit.oak.spi.blob.AbstractBlobStore$BlockId: long getPos()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $l5 = $l3 - $l4
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $l5 = $l3 - $l4 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : i8 = (int) $l5
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : i8 = (int) $l5 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : if i8 >= 0
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : if i8 >= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r9 = newarray (byte)[0]
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : if i8 >= 0 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : r25 = newarray (byte)[i8]
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : r25 = newarray (byte)[i8] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $l6 = virtualinvoke r1.<org.apache.jackrabbit.oak.spi.blob.AbstractBlobStore$BlockId: long getPos()>()
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $l6 = virtualinvoke r1.<org.apache.jackrabbit.oak.spi.blob.AbstractBlobStore$BlockId: long getPos()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $i7 = (int) $l6
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $i7 = (int) $l6 >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r21, $i7, r25, 0, i8)
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r21, $i7, r25, 0, i8) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : return r25
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r9 = newarray (byte)[0] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : return $r9
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r10 = r0.<org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore: org.jclouds.blobstore.BlobStoreContext context> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r11 = interfaceinvoke $r10.<org.jclouds.blobstore.BlobStoreContext: org.jclouds.blobstore.BlobStore getBlobStore()>()
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r11 = interfaceinvoke $r10.<org.jclouds.blobstore.BlobStoreContext: org.jclouds.blobstore.BlobStore getBlobStore()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore: java.lang.String cloudContainer>
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r12 = r0.<org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore: java.lang.String cloudContainer> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : r22 = interfaceinvoke $r11.<org.jclouds.blobstore.BlobStore: org.jclouds.blobstore.domain.Blob getBlob(java.lang.String,java.lang.String)>($r12, r2)
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : r22 = interfaceinvoke $r11.<org.jclouds.blobstore.BlobStore: org.jclouds.blobstore.domain.Blob getBlob(java.lang.String,java.lang.String)>($r12, r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : if r22 != null
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : if r22 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r15 = new java.lang.StringBuilder
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : if r22 != null >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : r24 = interfaceinvoke r22.<org.jclouds.blobstore.domain.Blob: org.jclouds.io.Payload getPayload()>()
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : r24 = interfaceinvoke r22.<org.jclouds.blobstore.domain.Blob: org.jclouds.io.Payload getPayload()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r13 = interfaceinvoke r24.<org.jclouds.io.Payload: java.io.InputStream getInput()>()
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : r24 = interfaceinvoke r22.<org.jclouds.blobstore.domain.Blob: org.jclouds.io.Payload getPayload()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r20 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : interfaceinvoke r24.<org.jclouds.io.Payload: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : throw $r20
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r13 = interfaceinvoke r24.<org.jclouds.io.Payload: java.io.InputStream getInput()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : r21 = staticinvoke <com.google.common.io.ByteStreams: byte[] toByteArray(java.io.InputStream)>($r13)
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r13 = interfaceinvoke r24.<org.jclouds.io.Payload: java.io.InputStream getInput()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r20 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : r21 = staticinvoke <com.google.common.io.ByteStreams: byte[] toByteArray(java.io.InputStream)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore: org.apache.jackrabbit.oak.cache.CacheLIRS cache>
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : r21 = staticinvoke <com.google.common.io.ByteStreams: byte[] toByteArray(java.io.InputStream)>($r13) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r20 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : virtualinvoke $r14.<org.apache.jackrabbit.oak.cache.CacheLIRS: void put(java.lang.Object,java.lang.Object)>(r2, r21)
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r14 = r0.<org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore: org.apache.jackrabbit.oak.cache.CacheLIRS cache> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r20 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : virtualinvoke $r14.<org.apache.jackrabbit.oak.cache.CacheLIRS: void put(java.lang.Object,java.lang.Object)>(r2, r21) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : interfaceinvoke r24.<org.jclouds.io.Payload: void close()>()
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : virtualinvoke $r14.<org.apache.jackrabbit.oak.cache.CacheLIRS: void put(java.lang.Object,java.lang.Object)>(r2, r21) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r20 := @caughtexception
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : interfaceinvoke r24.<org.jclouds.io.Payload: void close()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : goto [?= $l0 = virtualinvoke r1.<org.apache.jackrabbit.oak.spi.blob.AbstractBlobStore$BlockId: long getPos()>()]
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : goto [?= $l0 = virtualinvoke r1.<org.apache.jackrabbit.oak.spi.blob.AbstractBlobStore$BlockId: long getPos()>()] >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $l0 = virtualinvoke r1.<org.apache.jackrabbit.oak.spi.blob.AbstractBlobStore$BlockId: long getPos()>()
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r15 = new java.lang.StringBuilder >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Did not find block ")
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Did not find block ") >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : r23 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : r23 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r18 = <org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore: org.slf4j.Logger LOG>
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r18 = <org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore: org.slf4j.Logger LOG> >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : interfaceinvoke $r18.<org.slf4j.Logger: void error(java.lang.String)>(r23)
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : interfaceinvoke $r18.<org.slf4j.Logger: void error(java.lang.String)>(r23) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r19 = new java.io.IOException
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : $r19 = new java.io.IOException >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>(r23)
org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>(r23) >>>>>>>> org.apache.jackrabbit.oak.plugins.blob.cloud.CloudBlobStore.readBlockFromBackend : throw $r19
