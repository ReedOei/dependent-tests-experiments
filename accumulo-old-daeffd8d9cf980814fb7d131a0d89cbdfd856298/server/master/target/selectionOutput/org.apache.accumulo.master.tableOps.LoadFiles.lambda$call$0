org.apache.accumulo.master.tableOps.LoadFiles.lambda$call$0 : $r3 = virtualinvoke r2.<org.apache.accumulo.server.master.state.TServerInstance: java.lang.String host()>() >>>>>>>> org.apache.accumulo.master.tableOps.LoadFiles.lambda$call$0 : $r4 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r3)
org.apache.accumulo.master.tableOps.LoadFiles.lambda$call$0 : $r4 = virtualinvoke r0.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>($r3) >>>>>>>> org.apache.accumulo.master.tableOps.LoadFiles.lambda$call$0 : $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>()
org.apache.accumulo.master.tableOps.LoadFiles.lambda$call$0 : $z0 = virtualinvoke $r4.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.accumulo.master.tableOps.LoadFiles.lambda$call$0 : if $z0 == 0
org.apache.accumulo.master.tableOps.LoadFiles.lambda$call$0 : if $z0 == 0 >>>>>>>> org.apache.accumulo.master.tableOps.LoadFiles.lambda$call$0 : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2)
org.apache.accumulo.master.tableOps.LoadFiles.lambda$call$0 : if $z0 == 0 >>>>>>>> org.apache.accumulo.master.tableOps.LoadFiles.lambda$call$0 : return
org.apache.accumulo.master.tableOps.LoadFiles.lambda$call$0 : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> org.apache.accumulo.master.tableOps.LoadFiles.lambda$call$0 : return
