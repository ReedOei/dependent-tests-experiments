org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r1 = r0.<org.apache.accumulo.master.replication.UnorderedWorkAssigner: java.util.Set queuedWork> >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : if null == $r1
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : if null == $r1 >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : return
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : if null == $r1 >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r2 = new java.util.HashSet
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r2 = new java.util.HashSet >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : specialinvoke $r2.<java.util.HashSet: void <init>()>()
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : specialinvoke $r2.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : r0.<org.apache.accumulo.master.replication.UnorderedWorkAssigner: java.util.Set queuedWork> = $r2
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : r0.<org.apache.accumulo.master.replication.UnorderedWorkAssigner: java.util.Set queuedWork> = $r2 >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r4 = r0.<org.apache.accumulo.master.replication.UnorderedWorkAssigner: java.util.Set queuedWork>
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r4 = r0.<org.apache.accumulo.master.replication.UnorderedWorkAssigner: java.util.Set queuedWork> >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r3 = r0.<org.apache.accumulo.master.replication.UnorderedWorkAssigner: org.apache.accumulo.server.zookeeper.DistributedWorkQueue workQueue>
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r3 = r0.<org.apache.accumulo.master.replication.UnorderedWorkAssigner: org.apache.accumulo.server.zookeeper.DistributedWorkQueue workQueue> >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r9 := @caughtexception
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r3 = r0.<org.apache.accumulo.master.replication.UnorderedWorkAssigner: org.apache.accumulo.server.zookeeper.DistributedWorkQueue workQueue> >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r6 := @caughtexception
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r3 = r0.<org.apache.accumulo.master.replication.UnorderedWorkAssigner: org.apache.accumulo.server.zookeeper.DistributedWorkQueue workQueue> >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r5 = virtualinvoke $r3.<org.apache.accumulo.server.zookeeper.DistributedWorkQueue: java.util.List getWorkQueued()>()
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r5 = virtualinvoke $r3.<org.apache.accumulo.server.zookeeper.DistributedWorkQueue: java.util.List getWorkQueued()>() >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r9 := @caughtexception
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r5 = virtualinvoke $r3.<org.apache.accumulo.server.zookeeper.DistributedWorkQueue: java.util.List getWorkQueued()>() >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r6 := @caughtexception
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r5 = virtualinvoke $r3.<org.apache.accumulo.server.zookeeper.DistributedWorkQueue: java.util.List getWorkQueued()>() >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : interfaceinvoke $r4.<java.util.Set: boolean addAll(java.util.Collection)>($r5)
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : interfaceinvoke $r4.<java.util.Set: boolean addAll(java.util.Collection)>($r5) >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r9 := @caughtexception
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : interfaceinvoke $r4.<java.util.Set: boolean addAll(java.util.Collection)>($r5) >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r6 := @caughtexception
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : interfaceinvoke $r4.<java.util.Set: boolean addAll(java.util.Collection)>($r5) >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : return
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r7 = <org.apache.accumulo.master.replication.UnorderedWorkAssigner: org.slf4j.Logger log> >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : interfaceinvoke $r7.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error reading existing queued replication work from ZooKeeper", $r6)
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : interfaceinvoke $r7.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error reading existing queued replication work from ZooKeeper", $r6) >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r8 = new java.lang.RuntimeException
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r8 = new java.lang.RuntimeException >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error reading existing queued replication work from ZooKeeper", $r6)
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : specialinvoke $r8.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error reading existing queued replication work from ZooKeeper", $r6) >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : throw $r8
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r10 = <org.apache.zookeeper.KeeperException$Code: org.apache.zookeeper.KeeperException$Code NONODE> >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r11 = virtualinvoke $r9.<org.apache.zookeeper.KeeperException: org.apache.zookeeper.KeeperException$Code code()>()
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r11 = virtualinvoke $r9.<org.apache.zookeeper.KeeperException: org.apache.zookeeper.KeeperException$Code code()>() >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $z1 = virtualinvoke $r10.<org.apache.zookeeper.KeeperException$Code: boolean equals(java.lang.Object)>($r11)
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $z1 = virtualinvoke $r10.<org.apache.zookeeper.KeeperException$Code: boolean equals(java.lang.Object)>($r11) >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : if $z1 == 0
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : if $z1 == 0 >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r14 = <org.apache.accumulo.master.replication.UnorderedWorkAssigner: org.slf4j.Logger log>
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : if $z1 == 0 >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r12 = <org.apache.accumulo.master.replication.UnorderedWorkAssigner: org.slf4j.Logger log>
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r12 = <org.apache.accumulo.master.replication.UnorderedWorkAssigner: org.slf4j.Logger log> >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : interfaceinvoke $r12.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error reading existing queued replication work from ZooKeeper", $r9)
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : interfaceinvoke $r12.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Error reading existing queued replication work from ZooKeeper", $r9) >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r13 = new java.lang.RuntimeException
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r13 = new java.lang.RuntimeException >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error reading existing queued replication work from ZooKeeper", $r9)
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : specialinvoke $r13.<java.lang.RuntimeException: void <init>(java.lang.String,java.lang.Throwable)>("Error reading existing queued replication work from ZooKeeper", $r9) >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : throw $r13
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r14 = <org.apache.accumulo.master.replication.UnorderedWorkAssigner: org.slf4j.Logger log> >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : interfaceinvoke $r14.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Could not find ZK root for replication work queue, will retry", $r9)
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : interfaceinvoke $r14.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Throwable)>("Could not find ZK root for replication work queue, will retry", $r9) >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r15 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS>
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r15 = <java.util.concurrent.TimeUnit: java.util.concurrent.TimeUnit MILLISECONDS> >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : staticinvoke <org.apache.accumulo.fate.util.UtilWaitThread: void sleepUninterruptibly(long,java.util.concurrent.TimeUnit)>(500L, $r15)
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : staticinvoke <org.apache.accumulo.fate.util.UtilWaitThread: void sleepUninterruptibly(long,java.util.concurrent.TimeUnit)>(500L, $r15) >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : goto [?= $r4 = r0.<org.apache.accumulo.master.replication.UnorderedWorkAssigner: java.util.Set queuedWork>]
org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : goto [?= $r4 = r0.<org.apache.accumulo.master.replication.UnorderedWorkAssigner: java.util.Set queuedWork>] >>>>>>>> org.apache.accumulo.master.replication.UnorderedWorkAssigner.initializeQueuedWork : $r4 = r0.<org.apache.accumulo.master.replication.UnorderedWorkAssigner: java.util.Set queuedWork>
