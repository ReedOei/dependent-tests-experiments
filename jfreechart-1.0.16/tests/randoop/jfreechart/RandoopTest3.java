package randoop.jfreechart;

import junit.framework.*;

public class RandoopTest3 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test1"); }


    org.jfree.data.xy.DefaultXYZDataset var0 = new org.jfree.data.xy.DefaultXYZDataset();
    org.jfree.chart.axis.CategoryLabelPositions var2 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var5 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var6 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var5);
    org.jfree.data.time.TimePeriodValue var8 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var5, (java.lang.Number)10);
    var3.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var10 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var12 = var10.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var15 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var16 = var15.getTickLabelPaint();
    var10.setFillPaint(var16, true);
    var3.setDomainCrosshairPaint(var16);
    boolean var20 = var2.equals((java.lang.Object)var3);
    org.jfree.ui.RectangleEdge var21 = var3.getRangeAxisEdge();
    org.jfree.chart.axis.SubCategoryAxis var23 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    int var24 = var3.getDomainAxisIndex((org.jfree.chart.axis.CategoryAxis)var23);
    boolean var25 = var3.isDomainCrosshairVisible();
    var0.addChangeListener((org.jfree.data.general.DatasetChangeListener)var3);
    org.jfree.data.DomainOrder var27 = var0.getDomainOrder();
    java.lang.String var28 = var27.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "DomainOrder.NONE"+ "'", var28.equals("DomainOrder.NONE"));

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test2"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    boolean var8 = var0.isDomainPannable();
    java.awt.Paint var9 = var0.getRangeMinorGridlinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test3"); }


    org.jfree.chart.plot.dial.StandardDialScale var0 = new org.jfree.chart.plot.dial.StandardDialScale();
    var0.setMajorTickIncrement(10.0d);
    double var4 = var0.valueToAngle(0.3d);
    org.jfree.chart.axis.CategoryLabelPositions var6 = org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(100.0d);
    org.jfree.chart.title.TextTitle var8 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var9 = var8.isVisible();
    java.lang.Object var10 = var8.clone();
    org.jfree.ui.RectangleEdge var11 = var8.getPosition();
    org.jfree.chart.axis.CategoryLabelPosition var12 = var6.getLabelPosition(var11);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var13 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    boolean var14 = var12.equals((java.lang.Object)var13);
    boolean var15 = var0.equals((java.lang.Object)var13);
    boolean var16 = var13.getBaseShapesVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 174.49d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test4"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    org.jfree.chart.axis.ValueAxis var1 = var0.getRangeAxis();
    java.awt.Paint var3 = var0.getSubrangePaint(52);
    org.jfree.chart.renderer.xy.XYShapeRenderer var4 = new org.jfree.chart.renderer.xy.XYShapeRenderer();
    org.jfree.chart.axis.CyclicNumberAxis var7 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var8 = var7.isAxisLineVisible();
    var7.setAxisLineVisible(true);
    var7.setMinorTickMarksVisible(true);
    org.jfree.ui.RectangleInsets var13 = var7.getTickLabelInsets();
    boolean var14 = var4.equals((java.lang.Object)var7);
    org.jfree.chart.axis.TickUnits var15 = new org.jfree.chart.axis.TickUnits();
    java.lang.Object var16 = var15.clone();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var19 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var22 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var23 = var22.getItemLabelFont();
    double var24 = var22.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var27 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var28 = var27.getItemLabelFont();
    java.awt.Shape var29 = var27.getBaseLegendShape();
    var22.setShape(var29);
    var19.setLegendBar(var29);
    org.jfree.data.general.DefaultKeyedValues2DDataset var34 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var37 = new org.jfree.chart.entity.CategoryItemEntity(var29, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var34, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    var37.setToolTipText("Combined Range XYPlot");
    boolean var40 = var15.equals((java.lang.Object)"Combined Range XYPlot");
    var7.setStandardTickUnits((org.jfree.chart.axis.TickUnitSource)var15);
    var0.setRangeAxis((org.jfree.chart.axis.ValueAxis)var7);
    int var43 = var0.getUnits();
    org.jfree.data.general.ValueDataset var44 = var0.getDataset();
    org.jfree.chart.needle.PinNeedle var46 = new org.jfree.chart.needle.PinNeedle();
    org.jfree.chart.plot.CategoryPlot var47 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var49 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var50 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var49);
    org.jfree.data.time.TimePeriodValue var52 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var49, (java.lang.Number)10);
    var47.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var54 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var56 = var54.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var59 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var60 = var59.getTickLabelPaint();
    var54.setFillPaint(var60, true);
    var47.setDomainCrosshairPaint(var60);
    var46.setOutlinePaint(var60);
    var0.setSubrangePaint(10, var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test5"); }


    org.jfree.chart.plot.ContourPlot var0 = new org.jfree.chart.plot.ContourPlot();
    var0.setOutlineVisible(false);
    var0.setRangeCrosshairValue(0.04d, false);
    org.jfree.data.time.Year var9 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var10 = new org.jfree.data.time.Month(1, var9);
    org.jfree.data.time.RegularTimePeriod var11 = var10.previous();
    long var12 = var10.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var13 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var15 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var16 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var15);
    var13.remove((org.jfree.data.time.TimePeriod)var15, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var20 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var10, (org.jfree.data.time.RegularTimePeriod)var15);
    var20.setMinorTickMarksVisible(false);
    java.awt.Stroke var23 = var20.getMinorTickMarkStroke();
    var0.setDomainCrosshairStroke(var23);
    var0.clearDomainMarkers();
    org.jfree.chart.plot.ThermometerPlot var26 = new org.jfree.chart.plot.ThermometerPlot();
    org.jfree.chart.axis.ValueAxis var27 = var26.getRangeAxis();
    org.jfree.chart.axis.ValueAxis var28 = var26.getRangeAxis();
    var0.setRangeAxis(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test6"); }


    org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var0);
    var1.setMaximumItemCount(0);
    boolean var4 = var1.getNotify();
    double var5 = var1.getMaxY();
    java.lang.Object var6 = var1.clone();
    var1.setRangeDescription("jfreechart-onetime-");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.delete(5, 51);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test7"); }


    java.lang.String[] var2 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
    org.jfree.chart.plot.CompassPlot var4 = new org.jfree.chart.plot.CompassPlot();
    boolean var5 = var3.equals((java.lang.Object)var4);
    java.lang.String var6 = var4.getPlotType();
    java.awt.Paint var7 = var4.getRoseCenterPaint();
    java.awt.Paint var8 = var4.getBackgroundPaint();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var10 = var9.getPreferredSize();
    java.awt.image.ColorModel var11 = var9.getColorModel();
    var9.updateUI();
    java.lang.String var13 = var9.toString();
    boolean var14 = var9.getInheritsPopupMenu();
    javax.swing.InputMap var15 = var9.getInputMap();
    var9.nextFocus();
    boolean var17 = var9.getInheritsPopupMenu();
    javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var19 = var18.getPreferredSize();
    java.awt.image.ColorModel var20 = var18.getColorModel();
    var18.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var25 = var18.getForeground();
    var9.setForeground(var25);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var28 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var8, (java.awt.Paint)var25, true);
    java.awt.Shape var30 = var28.lookupLegendShape((-1));
    org.jfree.chart.renderer.category.BarRenderer3D var33 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var34 = var33.getItemLabelFont();
    org.jfree.chart.labels.ItemLabelPosition var37 = var33.getPositiveItemLabelPosition(8, 100);
    var28.setNegativeItemLabelPosition(var37, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Compass Plot"+ "'", var6.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var13.equals("org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test8"); }


    double[] var2 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var3 = new org.jfree.chart.annotations.XYPolygonAnnotation(var2);
    double[] var6 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var7 = new org.jfree.chart.annotations.XYPolygonAnnotation(var6);
    org.jfree.chart.ClipPath var8 = new org.jfree.chart.ClipPath(var2, var6);
    boolean var9 = var8.isFillPath();
    var8.setClip(false);
    org.jfree.chart.plot.CategoryPlot var12 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var14 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var15 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var14);
    org.jfree.data.time.TimePeriodValue var17 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var14, (java.lang.Number)10);
    var12.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var19 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var21 = var19.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var24 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var25 = var24.getTickLabelPaint();
    var19.setFillPaint(var25, true);
    var12.setDomainCrosshairPaint(var25);
    var8.setFillPaint(var25);
    double[] var30 = var8.getYValue();
    var8.setClip(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test9"); }


    org.jfree.data.general.DefaultKeyedValues2DDataset var1 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var1.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var6 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.category.CategoryDataset)var1);
    org.jfree.data.Range var8 = org.jfree.data.Range.shift(var6, (-1.0d));
    org.jfree.data.Range var10 = org.jfree.data.Range.scale(var8, 100.0d);
    org.jfree.chart.plot.MeterInterval var11 = new org.jfree.chart.plot.MeterInterval("100", var10);
    java.awt.Paint var12 = var11.getBackgroundPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test10"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    java.awt.image.ColorModel var2 = var0.getColorModel();
    var0.updateUI();
    java.lang.String var4 = var0.toString();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    boolean var6 = var0.isFocusCycleRoot((java.awt.Container)var5);
    java.awt.Image var9 = var0.createImage(750, 20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var4.equals("org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test11"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    java.awt.Shape var12 = var10.getBaseLegendShape();
    var5.setShape(var12);
    var2.setLegendBar(var12);
    var2.setDrawBarOutline(true);
    org.jfree.chart.title.LegendTitle var17 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var2);
    org.jfree.ui.RectangleInsets var18 = var17.getItemLabelPadding();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test12"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    java.awt.Paint var17 = var0.getQuadrantPaint(1);
    org.jfree.chart.axis.CyclicNumberAxis var20 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var21 = var20.isAxisLineVisible();
    var20.setAxisLineVisible(true);
    var20.setMinorTickMarksVisible(true);
    org.jfree.chart.plot.CombinedRangeXYPlot var26 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var27 = var26.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CombinedRangeXYPlot var28 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var29 = var28.getRangeZeroBaselineStroke();
    var26.setRangeGridlineStroke(var29);
    var26.setDomainMinorGridlinesVisible(true);
    var26.setRangeZeroBaselineVisible(true);
    var20.setPlot((org.jfree.chart.plot.Plot)var26);
    var0.setDomainAxis((org.jfree.chart.axis.ValueAxis)var20);
    var0.mapDatasetToRangeAxis(2013, 2013);
    org.jfree.chart.axis.ValueAxis var40 = var0.getRangeAxis();
    org.jfree.chart.plot.Crosshair var41 = new org.jfree.chart.plot.Crosshair();
    java.awt.Paint var42 = var41.getLabelPaint();
    var0.setDomainCrosshairPaint(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test13"); }


    org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
    var1.setLinesVisible(true);
    java.lang.Boolean var5 = var1.getSeriesLinesVisible(10);
    java.lang.Object var6 = var1.clone();
    var1.setSeriesLinesVisible(8, (java.lang.Boolean)true);
    var1.setShapesVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test14"); }


    org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var0);
    org.jfree.data.time.Year var5 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var6 = new org.jfree.data.time.Month(1, var5);
    org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
    long var8 = var6.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var9 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var11 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var12 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var11);
    var9.remove((org.jfree.data.time.TimePeriod)var11, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var16 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var6, (org.jfree.data.time.RegularTimePeriod)var11);
    var16.setMinorTickMarksVisible(false);
    org.jfree.data.time.Year var20 = new org.jfree.data.time.Year(100);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var21 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    int var22 = var20.compareTo((java.lang.Object)var21);
    var16.setFirst((org.jfree.data.time.RegularTimePeriod)var20);
    java.lang.String var24 = var20.toString();
    var1.add((org.jfree.data.time.RegularTimePeriod)var20, (java.lang.Number)(short)(-1));
    org.jfree.data.time.TimeSeriesTableModel var28 = new org.jfree.data.time.TimeSeriesTableModel(var1, false);
    org.jfree.data.time.RegularTimePeriod var29 = var1.getNextTimePeriod();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "100"+ "'", var24.equals("100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test15"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    java.awt.Paint var17 = var0.getQuadrantPaint(1);
    org.jfree.chart.axis.CyclicNumberAxis var20 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var21 = var20.isAxisLineVisible();
    var20.setAxisLineVisible(true);
    var20.setMinorTickMarksVisible(true);
    org.jfree.chart.plot.CombinedRangeXYPlot var26 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var27 = var26.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CombinedRangeXYPlot var28 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var29 = var28.getRangeZeroBaselineStroke();
    var26.setRangeGridlineStroke(var29);
    var26.setDomainMinorGridlinesVisible(true);
    var26.setRangeZeroBaselineVisible(true);
    var20.setPlot((org.jfree.chart.plot.Plot)var26);
    var0.setDomainAxis((org.jfree.chart.axis.ValueAxis)var20);
    var0.mapDatasetToRangeAxis(2013, 2013);
    org.jfree.chart.axis.ValueAxis var40 = var0.getRangeAxis();
    java.awt.Paint var41 = var40.getTickMarkPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test16"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    java.awt.Paint var16 = var0.getRangeZeroBaselinePaint();
    boolean var17 = var0.isDomainMinorGridlinesVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test17"); }


    org.jfree.chart.needle.WindNeedle var0 = new org.jfree.chart.needle.WindNeedle();
    java.lang.Object var1 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test18"); }


    org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
    var1.clearSeriesPaints(false);
    boolean var4 = var1.getBaseLinesVisible();
    boolean var7 = var1.getItemShapeFilled((-2), 15);
    org.jfree.chart.plot.CombinedRangeXYPlot var8 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var9 = var8.getRangeZeroBaselineStroke();
    java.lang.String var10 = var8.getPlotType();
    boolean var11 = var8.isDomainZoomable();
    org.jfree.chart.plot.CombinedRangeXYPlot var12 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var13 = var12.getRangeZeroBaselineStroke();
    var8.setDomainCrosshairStroke(var13);
    var1.setOutlineStroke(var13, true);
    var1.setSeriesShapesVisible(15, true);
    java.lang.Boolean var21 = var1.getSeriesShapesFilled(5);
    boolean var22 = var1.getAutoPopulateSeriesOutlinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Combined Range XYPlot"+ "'", var10.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test19"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
    boolean var9 = var8.getZoomAroundAnchor();
    double var10 = var8.getScaleX();
    org.jfree.chart.ChartRenderingInfo var11 = var8.getChartRenderingInfo();
    var8.setMouseWheelEnabled(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test20"); }


    org.jfree.data.general.WaferMapDataset var3 = new org.jfree.data.general.WaferMapDataset(2, 15, (java.lang.Number)5.0d);
    org.jfree.chart.renderer.WaferMapRenderer var6 = new org.jfree.chart.renderer.WaferMapRenderer(100, 2);
    org.jfree.chart.plot.WaferMapPlot var7 = new org.jfree.chart.plot.WaferMapPlot(var3, var6);
    org.jfree.data.time.TimeTableXYDataset var8 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var10 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var11 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var10);
    var8.remove((org.jfree.data.time.TimePeriod)var10, (java.lang.Comparable)100, false);
    org.jfree.data.xy.XYBarDataset var16 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var8, Double.NaN);
    org.jfree.chart.event.RendererChangeEvent var17 = new org.jfree.chart.event.RendererChangeEvent((java.lang.Object)var16);
    var7.rendererChanged(var17);
    org.jfree.data.general.WaferMapDataset var19 = var7.getDataset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test21"); }


    org.jfree.data.time.TimeTableXYDataset var0 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    var0.remove((org.jfree.data.time.TimePeriod)var2, (java.lang.Comparable)100, false);
    org.jfree.data.xy.XYBarDataset var8 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var0, Double.NaN);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var11 = var8.getEndXValue(8, 252);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test22"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    double var4 = var2.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    var2.setShape(var9);
    var2.setAutoPopulateSeriesPaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test23"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
    java.awt.Paint var9 = var8.getZoomOutlinePaint();
    var8.list();
    org.jfree.chart.entity.ChartEntity var13 = var8.getEntityForPoint(1043495433, 8);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.doCopy();
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test24"); }


    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var0.setBaseSeriesVisible(true, true);
    boolean var4 = var0.getUseFillPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test25"); }


    org.jfree.chart.plot.RainbowPalette var0 = new org.jfree.chart.plot.RainbowPalette();
    var0.initialize();
    var0.invertPalette();

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test26"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var0 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.chart.plot.CombinedDomainCategoryPlot var9 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.util.List var10 = var9.getSubplots();
    org.jfree.data.statistics.BoxAndWhiskerItem var11 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)100.0d, (java.lang.Number)0.3d, (java.lang.Number)2.0d, (java.lang.Number)2, (java.lang.Number)(short)10, (java.lang.Number)10.0f, (java.lang.Number)15, (java.lang.Number)2.0d, var10);
    java.util.List var12 = var11.getOutliers();
    java.util.List var13 = var11.getOutliers();
    java.lang.Number var14 = var11.getQ1();
    java.lang.Number var15 = var11.getMinOutlier();
    var0.add(var11, (java.lang.Comparable)"hi!?hi!=10&amp;hi!=51", (java.lang.Comparable)"jfreechart-onetime-");
    org.jfree.chart.renderer.Outlier var22 = new org.jfree.chart.renderer.Outlier((-170.0d), (-1.0d), (-0.7853981633974483d));
    javax.swing.JPanel var23 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var24 = var23.getLocation();
    java.awt.Dimension var25 = var23.preferredSize();
    var23.paintImmediately(100, 100, 10, (-1));
    org.jfree.chart.plot.PolarPlot var31 = new org.jfree.chart.plot.PolarPlot();
    boolean var32 = var31.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var37 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var37.setUpperMargin(10.0d);
    var37.setAxisLineVisible(true);
    javax.swing.JPanel var42 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var43 = var42.getLocation();
    java.awt.Dimension var44 = var42.preferredSize();
    java.awt.Rectangle var45 = var42.bounds();
    java.awt.Point var46 = var31.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var37, (java.awt.geom.Rectangle2D)var45);
    boolean var47 = var23.contains(var46);
    var22.setPoint((java.awt.geom.Point2D)var46);
    java.lang.String var49 = var22.toString();
    java.lang.Number[][] var50 = new java.lang.Number[][] { };
    java.lang.Number[][] var51 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var52 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var50, var51);
    org.jfree.data.time.Week var54 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var55 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var54);
    int var56 = var52.getColumnIndex((java.lang.Comparable)var54);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var57 = var0.getMaxOutlier((java.lang.Comparable)var22, (java.lang.Comparable)var54);
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 2.0d+ "'", var14.equals(2.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 15+ "'", var15.equals(15));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var49 + "' != '" + "{0.0,0.0}"+ "'", var49.equals("{0.0,0.0}"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == (-1));

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test27"); }


    org.jfree.data.time.Year var3 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var4 = new org.jfree.data.time.Month(1, var3);
    org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
    long var6 = var4.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var7 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var9 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var10 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var9);
    var7.remove((org.jfree.data.time.TimePeriod)var9, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var14 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var4, (org.jfree.data.time.RegularTimePeriod)var9);
    java.util.Date var15 = var9.getEnd();
    org.jfree.data.time.Quarter var16 = new org.jfree.data.time.Quarter(var15);
    org.jfree.chart.plot.CombinedRangeXYPlot var17 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var17.clearDomainMarkers();
    java.awt.Paint var19 = var17.getRangeGridlinePaint();
    var17.clearRangeAxes();
    org.jfree.chart.title.TextTitle var22 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var23 = var22.isVisible();
    java.lang.Object var24 = var22.clone();
    org.jfree.ui.RectangleInsets var25 = var22.getMargin();
    var17.setInsets(var25, true);
    boolean var28 = var16.equals((java.lang.Object)var25);
    long var29 = var16.getLastMillisecond();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 1380610799999L);

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test28"); }


    org.jfree.chart.servlet.ServletUtilities.setTempFilePrefix("Combined Range XYPlot");

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test29"); }


    org.jfree.chart.renderer.xy.XYStepAreaRenderer var0 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer();

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test30"); }


    org.jfree.chart.renderer.DefaultPolarItemRenderer var0 = new org.jfree.chart.renderer.DefaultPolarItemRenderer();
    org.jfree.chart.labels.XYSeriesLabelGenerator var1 = var0.getLegendItemToolTipGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test31"); }


    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis("0x00000000");
    var1.setVerticalTickLabels(false);
    var1.setMinorTickMarksVisible(true);
    org.jfree.chart.util.RelativeDateFormat var8 = new org.jfree.chart.util.RelativeDateFormat();
    java.lang.Object var9 = var8.clone();
    org.jfree.chart.axis.DateTickUnit var10 = new org.jfree.chart.axis.DateTickUnit(1, 8, (java.text.DateFormat)var8);
    int var11 = var10.getUnit();
    java.util.Date var12 = var1.calculateLowestVisibleTickValue(var10);
    org.jfree.chart.renderer.category.BarRenderer3D var15 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var16 = var15.getItemLabelFont();
    org.jfree.chart.labels.ItemLabelPosition var19 = var15.getPositiveItemLabelPosition(8, 100);
    boolean var20 = var10.equals((java.lang.Object)var15);
    org.jfree.chart.labels.CategoryItemLabelGenerator var22 = var15.getSeriesItemLabelGenerator(51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test32"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var1 = var0.isDomainZoomable();
    int var2 = var0.getAxisLocation();
    org.jfree.data.general.ValueDataset var3 = var0.getDataset();
    org.jfree.chart.plot.CompassPlot var4 = new org.jfree.chart.plot.CompassPlot(var3);
    org.jfree.chart.plot.MeterPlot var5 = new org.jfree.chart.plot.MeterPlot(var3);
    org.jfree.chart.plot.CompassPlot var6 = new org.jfree.chart.plot.CompassPlot(var3);
    
    // Checks the contract:  equals-hashcode on var4 and var6
    assertTrue("Contract failed: equals-hashcode on var4 and var6", var4.equals(var6) ? var4.hashCode() == var6.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var6 and var4
    assertTrue("Contract failed: equals-hashcode on var6 and var4", var6.equals(var4) ? var6.hashCode() == var4.hashCode() : true);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test33"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    int var7 = var6.getDefaultCloseOperation();
    var6.transferFocusDownCycle();
    var6.setVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test34"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var1 = var0.isDomainZoomable();
    org.jfree.chart.plot.PlotOrientation var2 = var0.getOrientation();
    var0.setShowValueLines(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test35"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.plot.DatasetRenderingOrder var1 = var0.getDatasetRenderingOrder();
    org.jfree.chart.renderer.category.LevelRenderer var2 = new org.jfree.chart.renderer.category.LevelRenderer();
    double var3 = var2.getItemMargin();
    org.jfree.chart.StrokeMap var4 = new org.jfree.chart.StrokeMap();
    java.lang.Object var5 = var4.clone();
    boolean var6 = var2.equals((java.lang.Object)var4);
    var2.setItemLabelAnchorOffset(4.0d);
    org.jfree.data.KeyedObjects2D var10 = new org.jfree.data.KeyedObjects2D();
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var12 = var11.getPreferredSize();
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var11.setNextFocusableComponent((java.awt.Component)var13);
    java.util.Locale var15 = var13.getLocale();
    org.jfree.chart.axis.TickUnitSource var16 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var15);
    java.text.NumberFormat var17 = java.text.NumberFormat.getPercentInstance(var15);
    org.jfree.data.time.Year var19 = new org.jfree.data.time.Year();
    var10.addObject((java.lang.Object)var17, (java.lang.Comparable)0.04d, (java.lang.Comparable)var19);
    double[] var23 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var24 = new org.jfree.chart.annotations.XYPolygonAnnotation(var23);
    double[] var27 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var28 = new org.jfree.chart.annotations.XYPolygonAnnotation(var27);
    org.jfree.chart.ClipPath var29 = new org.jfree.chart.ClipPath(var23, var27);
    double[][] var30 = new double[][] { var23};
    double[] var35 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var36 = new org.jfree.chart.annotations.XYPolygonAnnotation(var35);
    double[] var39 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var40 = new org.jfree.chart.annotations.XYPolygonAnnotation(var39);
    org.jfree.chart.ClipPath var41 = new org.jfree.chart.ClipPath(var35, var39);
    double[][] var42 = new double[][] { var35};
    org.jfree.data.category.CategoryDataset var43 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var42);
    org.jfree.data.category.DefaultIntervalCategoryDataset var44 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var30, var42);
    org.jfree.chart.axis.SubCategoryAxis var46 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    var46.configure();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var48 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var50 = var48.getSeriesLinesVisible(10);
    javax.swing.JPanel var52 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var54 = var52.getIgnoreRepaint();
    boolean var55 = var52.isLightweight();
    javax.swing.JPanel var56 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var57 = var56.getPreferredSize();
    javax.swing.JPanel var58 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var56.setNextFocusableComponent((java.awt.Component)var58);
    var56.show();
    javax.swing.JPanel var61 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var62 = var61.getLocation();
    java.awt.Dimension var63 = var61.preferredSize();
    java.awt.Rectangle var64 = var61.bounds();
    var56.scrollRectToVisible(var64);
    var52.setBounds(var64);
    var48.setSeriesShape(15, (java.awt.Shape)var64);
    org.jfree.chart.axis.AxisState var68 = new org.jfree.chart.axis.AxisState();
    org.jfree.chart.title.TextTitle var71 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var72 = var71.isVisible();
    java.lang.Object var73 = var71.clone();
    org.jfree.ui.RectangleEdge var74 = var71.getPosition();
    var68.moveCursor(4.0d, var74);
    double var76 = var2.getItemMiddle((java.lang.Comparable)1201L, (java.lang.Comparable)0.04d, (org.jfree.data.category.CategoryDataset)var44, (org.jfree.chart.axis.CategoryAxis)var46, (java.awt.geom.Rectangle2D)var64, var74);
    java.awt.Paint var77 = var46.getTickLabelPaint();
    boolean var78 = var1.equals((java.lang.Object)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var72 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test36"); }


    org.jfree.chart.util.HexNumberFormat var2 = new org.jfree.chart.util.HexNumberFormat();
    org.jfree.chart.labels.StandardCrosshairLabelGenerator var3 = new org.jfree.chart.labels.StandardCrosshairLabelGenerator("", (java.text.NumberFormat)var2);
    boolean var4 = var2.isParseIntegerOnly();
    java.lang.Object var5 = var2.clone();
    org.jfree.chart.util.LogFormat var10 = new org.jfree.chart.util.LogFormat(0.0d, "hi!", true);
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var12 = var11.getPreferredSize();
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var11.setNextFocusableComponent((java.awt.Component)var13);
    java.util.Locale var15 = var13.getLocale();
    org.jfree.chart.axis.TickUnitSource var16 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var15);
    java.text.NumberFormat var17 = java.text.NumberFormat.getPercentInstance(var15);
    org.jfree.chart.labels.StandardXYItemLabelGenerator var18 = new org.jfree.chart.labels.StandardXYItemLabelGenerator("d", (java.text.NumberFormat)var10, var17);
    org.jfree.chart.util.HexNumberFormat var20 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var21 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var22 = var21.getPreferredSize();
    javax.swing.JPanel var23 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var21.setNextFocusableComponent((java.awt.Component)var23);
    java.util.Locale var25 = var23.getLocale();
    org.jfree.chart.axis.MonthDateFormat var26 = new org.jfree.chart.axis.MonthDateFormat(var25);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var27 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var20, (java.text.DateFormat)var26);
    boolean var28 = var20.isGroupingUsed();
    var10.setExponentFormat((java.text.NumberFormat)var20);
    org.jfree.chart.util.HexNumberFormat var31 = new org.jfree.chart.util.HexNumberFormat();
    org.jfree.chart.labels.StandardCrosshairLabelGenerator var32 = new org.jfree.chart.labels.StandardCrosshairLabelGenerator("", (java.text.NumberFormat)var31);
    boolean var33 = var31.isGroupingUsed();
    org.jfree.chart.labels.BubbleXYItemLabelGenerator var34 = new org.jfree.chart.labels.BubbleXYItemLabelGenerator("sun.swing.PrintColorUIResource[r=51,g=51,b=51]", (java.text.NumberFormat)var2, (java.text.NumberFormat)var10, (java.text.NumberFormat)var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test37"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    int var7 = var6.getDefaultCloseOperation();
    boolean var8 = var6.isActive();
    boolean var9 = var6.isFocusableWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test38"); }


    org.jfree.chart.urls.StandardXYURLGenerator var1 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!?hi!=15&amp;hi!=10");

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test39"); }


    java.awt.Shape[] var0 = org.jfree.chart.plot.DefaultDrawingSupplier.createStandardSeriesShapes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test40"); }


    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow((org.jfree.data.category.CategoryDataset)var0, 10);
    org.jfree.data.statistics.SimpleHistogramBin var5 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
    org.jfree.data.general.PieDataset var7 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(var2, (java.lang.Comparable)0.05d, 175.0d);
    org.jfree.chart.plot.RingPlot var8 = new org.jfree.chart.plot.RingPlot(var7);
    int var9 = var8.getPieIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test41"); }


    org.jfree.data.time.ohlc.OHLCSeriesCollection var0 = new org.jfree.data.time.ohlc.OHLCSeriesCollection();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var3 = var0.getHighValue(1024, 19);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test42"); }


    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    var0.clear();
    java.util.List var2 = var0.getRowKeys();
    java.lang.Object var3 = var0.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeRow((java.lang.Comparable)(-2208960000000L));
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test43"); }


    org.jfree.chart.util.RelativeDateFormat var1 = new org.jfree.chart.util.RelativeDateFormat();
    org.jfree.chart.util.RelativeDateFormat var4 = new org.jfree.chart.util.RelativeDateFormat();
    boolean var5 = var4.getShowZeroHours();
    org.jfree.chart.labels.StandardCategoryItemLabelGenerator var6 = new org.jfree.chart.labels.StandardCategoryItemLabelGenerator("0x00000000", (java.text.DateFormat)var4);
    org.jfree.chart.util.HexNumberFormat var8 = new org.jfree.chart.util.HexNumberFormat();
    org.jfree.chart.labels.StandardCrosshairLabelGenerator var9 = new org.jfree.chart.labels.StandardCrosshairLabelGenerator("", (java.text.NumberFormat)var8);
    boolean var10 = var8.isParseIntegerOnly();
    java.lang.Object var11 = var8.clone();
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var12 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("100", (java.text.DateFormat)var4, (java.text.NumberFormat)var8);
    org.jfree.chart.labels.StandardXYToolTipGenerator var13 = new org.jfree.chart.labels.StandardXYToolTipGenerator("0x00000001", (java.text.DateFormat)var1, (java.text.DateFormat)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test44"); }


    org.jfree.chart.plot.CombinedRangeCategoryPlot var0 = new org.jfree.chart.plot.CombinedRangeCategoryPlot();
    org.jfree.chart.annotations.CategoryPointerAnnotation var5 = new org.jfree.chart.annotations.CategoryPointerAnnotation("[size=0x00000000]", (java.lang.Comparable)1043495433, 0.25d, 100.0d);
    boolean var7 = var0.removeAnnotation((org.jfree.chart.annotations.CategoryAnnotation)var5, false);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var10 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var11 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var10);
    org.jfree.data.time.TimePeriodValue var13 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var10, (java.lang.Number)10);
    var8.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var15 = var8.getDrawSharedDomainAxis();
    boolean var16 = var8.getDrawSharedDomainAxis();
    var8.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var19 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var8.addChangeListener((org.jfree.chart.event.PlotChangeListener)var19);
    org.jfree.chart.event.PlotChangeEvent var21 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var19);
    org.jfree.chart.plot.Plot var22 = var21.getPlot();
    org.jfree.chart.plot.Plot var23 = var21.getPlot();
    var0.plotChanged(var21);
    org.jfree.chart.LegendItemCollection var25 = var0.getFixedLegendItems();
    var0.setRangeCrosshairValue(5.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test45"); }


    org.jfree.data.general.DefaultKeyedValues2DDataset var0 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var0.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var5 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var0);
    java.util.List var6 = var0.getColumnKeys();
    org.jfree.data.Range var8 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds((org.jfree.data.category.CategoryDataset)var0, 0.2d);
    org.jfree.data.Range var10 = org.jfree.data.Range.shift(var8, 0.25d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test46"); }


    org.jfree.chart.plot.ContourPlot var0 = new org.jfree.chart.plot.ContourPlot();
    double var1 = var0.getDomainCrosshairValue();
    java.lang.String[] var4 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var5 = new org.jfree.chart.axis.SymbolAxis("hi!", var4);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var6 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var8 = var6.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var11 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var12 = var11.getTickLabelPaint();
    var6.setFillPaint(var12, true);
    var5.setGridBandAlternatePaint(var12);
    var0.setDomainAxis((org.jfree.chart.axis.ValueAxis)var5);
    var0.setDomainCrosshairValue(175.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test47"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var7 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var9 = var7.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var12 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var13 = var12.getTickLabelPaint();
    var7.setFillPaint(var13, true);
    var0.setDomainCrosshairPaint(var13);
    boolean var17 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.util.ShadowGenerator var18 = var0.getShadowGenerator();
    var0.setDomainGridlinesVisible(true);
    var0.configureRangeAxes();
    org.jfree.chart.JFreeChart var22 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.PolarChartPanel var23 = new org.jfree.chart.PolarChartPanel(var22);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test48"); }


    org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var2.add((-1.0d), (-1.0d), false);
    org.jfree.data.xy.XYSeries var9 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var9.clear();
    double var11 = var9.getMinX();
    org.jfree.data.xy.XYSeriesCollection var12 = new org.jfree.data.xy.XYSeriesCollection(var9);
    var2.addVetoableChangeListener((java.beans.VetoableChangeListener)var12);
    double var14 = var2.getMinY();
    org.jfree.data.xy.XYDataItem var17 = var2.addOrUpdate(0.2d, 15.0d);
    java.util.List var18 = var2.getItems();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test49"); }


    org.jfree.chart.renderer.xy.DefaultXYItemRenderer var0 = new org.jfree.chart.renderer.xy.DefaultXYItemRenderer();
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var1 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var2 = var1.clone();
    var0.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var1);
    org.jfree.chart.labels.XYItemLabelGenerator var6 = var0.getItemLabelGenerator(1, 15);
    java.lang.Boolean var7 = var0.getShapesVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test50"); }


    org.jfree.data.statistics.MeanAndStandardDeviation var2 = new org.jfree.data.statistics.MeanAndStandardDeviation((java.lang.Number)1L, (java.lang.Number)0.0f);
    org.jfree.data.time.TimeTableXYDataset var3 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var5 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var6 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var5);
    var3.remove((org.jfree.data.time.TimePeriod)var5, (java.lang.Comparable)100, false);
    org.jfree.data.xy.XYBarDataset var11 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var3, Double.NaN);
    boolean var12 = var2.equals((java.lang.Object)var11);
    org.jfree.data.xy.XYDataset var16 = org.jfree.data.time.MovingAverage.createMovingAverage((org.jfree.data.xy.XYDataset)var11, "Range[0.0,0.0]", (-1L), (-2208960000000L));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var19 = var11.getEndXValue(52, 15);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test51"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var2 = var0.findDomainBounds((org.jfree.data.xy.XYDataset)var1);
    java.lang.Number var3 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset)var1);
    var1.add(100.0d, Double.NaN, "jfreechart-onetime-");
    var1.clear();
    int var10 = var1.getItemCount(8);
    boolean var11 = var1.isAutoWidth();
    var1.setIntervalWidth(100.0d);
    org.jfree.data.xy.IntervalXYDelegate var14 = new org.jfree.data.xy.IntervalXYDelegate((org.jfree.data.xy.XYDataset)var1);
    double var15 = var14.getFixedIntervalWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + Double.NaN+ "'", var3.equals(Double.NaN));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1.0d);

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test52"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    org.jfree.chart.plot.dial.DialValueIndicator var19 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var20 = var19.getInsets();
    java.awt.Stroke var21 = var19.getOutlineStroke();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var19.setOutlinePaint((java.awt.Paint)var36);
    java.awt.Color var39 = var36.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    double var45 = var42.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var46 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var47 = var46.getRangeZeroBaselineStroke();
    var42.setStroke(var47, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var50 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var51 = var50.isOutline();
    var50.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var56 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var57 = var56.getLegendItemPaint();
    var50.setShapePaint(var57);
    org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var16, (java.awt.Paint)var39, var47, var57);
    var59.setShapeVisible(false);
    var59.setURLText("0x00000001");
    java.awt.Font var64 = var59.getLabelFont();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var65 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    org.jfree.data.xy.VectorDataItem var70 = new org.jfree.data.xy.VectorDataItem((-1.0d), 10.0d, 2.0d, (-1.0d));
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var73 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    java.awt.Shape var74 = var73.getLegendBar();
    boolean var75 = var70.equals((java.lang.Object)var74);
    var65.setBaseShape(var74);
    var59.setShape(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == false);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test53"); }


    org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(100.0d);
    org.jfree.chart.title.TextTitle var3 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var4 = var3.isVisible();
    java.lang.Object var5 = var3.clone();
    org.jfree.ui.RectangleEdge var6 = var3.getPosition();
    org.jfree.chart.axis.CategoryLabelPosition var7 = var1.getLabelPosition(var6);
    org.jfree.chart.axis.CategoryLabelPositions var9 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var12 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var13 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var12);
    org.jfree.data.time.TimePeriodValue var15 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var12, (java.lang.Number)10);
    var10.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var17 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var19 = var17.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var22 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var23 = var22.getTickLabelPaint();
    var17.setFillPaint(var23, true);
    var10.setDomainCrosshairPaint(var23);
    boolean var27 = var9.equals((java.lang.Object)var10);
    org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var29 = var28.getDomainCrosshairColumnKey();
    var28.setCrosshairDatasetIndex(100);
    org.jfree.chart.plot.CombinedRangeXYPlot var32 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var33 = var32.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var35 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var36 = var35.getMargin();
    var32.setAxisOffset(var36);
    var28.setAxisOffset(var36);
    org.jfree.data.category.CategoryDataset var40 = var28.getDataset((-2));
    var28.clearRangeMarkers((-13421773));
    org.jfree.chart.plot.XYPlot var43 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.plot.DatasetRenderingOrder var44 = var43.getDatasetRenderingOrder();
    var28.setDatasetRenderingOrder(var44);
    var10.setDatasetRenderingOrder(var44);
    org.jfree.chart.plot.ContourPlot var47 = new org.jfree.chart.plot.ContourPlot();
    org.jfree.chart.plot.CategoryMarker var49 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    var47.addRangeMarker((org.jfree.chart.plot.Marker)var49);
    var10.addDomainMarker(var49);
    org.jfree.chart.event.ChartChangeEvent var52 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)var10);
    boolean var53 = var7.equals((java.lang.Object)var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test54"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var1 = var0.getDomainCrosshairColumnKey();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var2.setUseSeriesOffset(true);
    var2.setBaseSeriesVisible(true);
    var2.setAutoPopulateSeriesShape(false);
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var9 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var2};
    var0.setRenderers(var9);
    org.jfree.chart.ChartRenderingInfo var12 = new org.jfree.chart.ChartRenderingInfo();
    org.jfree.chart.entity.EntityCollection var13 = var12.getEntityCollection();
    org.jfree.chart.plot.PlotRenderingInfo var14 = new org.jfree.chart.plot.PlotRenderingInfo(var12);
    org.jfree.chart.plot.PolarPlot var15 = new org.jfree.chart.plot.PolarPlot();
    boolean var16 = var15.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var21 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var21.setUpperMargin(10.0d);
    var21.setAxisLineVisible(true);
    javax.swing.JPanel var26 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var27 = var26.getLocation();
    java.awt.Dimension var28 = var26.preferredSize();
    java.awt.Rectangle var29 = var26.bounds();
    java.awt.Point var30 = var15.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var21, (java.awt.geom.Rectangle2D)var29);
    var0.zoomDomainAxes(12.0d, var14, (java.awt.geom.Point2D)var30, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test55"); }


    org.jfree.chart.title.TextTitle var1 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.VerticalAlignment var2 = var1.getVerticalAlignment();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test56"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    var0.addCornerTextItem("0x00000001");
    var0.setAngleGridlinesVisible(false);
    org.jfree.chart.plot.PolarPlot var5 = new org.jfree.chart.plot.PolarPlot();
    boolean var6 = var5.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var11 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var11.setUpperMargin(10.0d);
    var11.setAxisLineVisible(true);
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var17 = var16.getLocation();
    java.awt.Dimension var18 = var16.preferredSize();
    java.awt.Rectangle var19 = var16.bounds();
    java.awt.Point var20 = var5.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var11, (java.awt.geom.Rectangle2D)var19);
    org.jfree.chart.renderer.DefaultPolarItemRenderer var22 = new org.jfree.chart.renderer.DefaultPolarItemRenderer();
    var5.setRenderer(10, (org.jfree.chart.renderer.PolarItemRenderer)var22, true);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var27 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var28 = var27.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var29 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var30 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var27, (org.jfree.chart.urls.XYURLGenerator)var29);
    org.jfree.chart.renderer.xy.StandardXYItemRenderer var31 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, (org.jfree.chart.labels.XYToolTipGenerator)var27);
    java.text.NumberFormat var32 = var27.getYFormat();
    var22.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var27);
    java.lang.String[] var36 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var37 = new org.jfree.chart.axis.SymbolAxis("hi!", var36);
    org.jfree.chart.plot.CompassPlot var38 = new org.jfree.chart.plot.CompassPlot();
    boolean var39 = var37.equals((java.lang.Object)var38);
    java.lang.String var40 = var38.getPlotType();
    java.awt.Paint var41 = var38.getRoseCenterPaint();
    java.awt.Paint var42 = var38.getBackgroundPaint();
    javax.swing.JPanel var43 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var44 = var43.getPreferredSize();
    java.awt.image.ColorModel var45 = var43.getColorModel();
    var43.updateUI();
    java.lang.String var47 = var43.toString();
    boolean var48 = var43.getInheritsPopupMenu();
    javax.swing.InputMap var49 = var43.getInputMap();
    var43.nextFocus();
    boolean var51 = var43.getInheritsPopupMenu();
    javax.swing.JPanel var52 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var53 = var52.getPreferredSize();
    java.awt.image.ColorModel var54 = var52.getColorModel();
    var52.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var59 = var52.getForeground();
    var43.setForeground(var59);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var62 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var42, (java.awt.Paint)var59, true);
    org.jfree.chart.labels.StandardXYSeriesLabelGenerator var63 = new org.jfree.chart.labels.StandardXYSeriesLabelGenerator();
    var62.setLegendItemLabelGenerator((org.jfree.chart.labels.XYSeriesLabelGenerator)var63);
    var22.setLegendItemURLGenerator((org.jfree.chart.labels.XYSeriesLabelGenerator)var63);
    boolean var66 = var22.getDrawOutlineWhenFilled();
    var0.setRenderer((org.jfree.chart.renderer.PolarItemRenderer)var22);
    boolean var69 = var22.isSeriesFilled(2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Compass Plot"+ "'", var40.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var47,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var47.equals("org.jfree.chart.ChartPanel[,0,0,0var47,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test57"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    boolean var7 = var6.isFocusableWindow();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test58"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    java.awt.image.ColorModel var2 = var0.getColorModel();
    var0.updateUI();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.getInheritsPopupMenu();
    javax.swing.InputMap var6 = var0.getInputMap();
    var0.nextFocus();
    boolean var8 = var0.getInheritsPopupMenu();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var10 = var9.getPreferredSize();
    java.awt.image.ColorModel var11 = var9.getColorModel();
    var9.updateUI();
    java.lang.String var13 = var9.toString();
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    boolean var15 = var9.isFocusCycleRoot((java.awt.Container)var14);
    var9.enableInputMethods(true);
    boolean var18 = var9.isPaintingForPrint();
    var0.setNextFocusableComponent((java.awt.Component)var9);
    boolean var20 = var0.isFocusOwner();
    var0.resetKeyboardActions();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var4.equals("org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var13.equals("org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test59"); }


    org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
    var1.setLinesVisible(true);
    boolean var4 = var1.getAutoPopulateSeriesShape();
    boolean var5 = var1.getBaseLinesVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test60"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryMarker var2 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var3 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var5 = var3.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var8 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var9 = var8.getTickLabelPaint();
    var3.setFillPaint(var9, true);
    var2.setLabelPaint(var9);
    var0.setDomainGridlinePaint(var9);
    var0.clearDomainMarkers();
    org.jfree.chart.axis.SubCategoryAxis var16 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    var16.configure();
    double var18 = var16.getLowerMargin();
    org.jfree.chart.axis.CategoryAxis[] var19 = new org.jfree.chart.axis.CategoryAxis[] { var16};
    var0.setDomainAxes(var19);
    org.jfree.chart.renderer.category.LevelRenderer var21 = new org.jfree.chart.renderer.category.LevelRenderer();
    double var22 = var21.getItemMargin();
    org.jfree.chart.StrokeMap var23 = new org.jfree.chart.StrokeMap();
    java.lang.Object var24 = var23.clone();
    boolean var25 = var21.equals((java.lang.Object)var23);
    var21.setItemLabelAnchorOffset(4.0d);
    org.jfree.data.KeyedObjects2D var29 = new org.jfree.data.KeyedObjects2D();
    javax.swing.JPanel var30 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var31 = var30.getPreferredSize();
    javax.swing.JPanel var32 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var30.setNextFocusableComponent((java.awt.Component)var32);
    java.util.Locale var34 = var32.getLocale();
    org.jfree.chart.axis.TickUnitSource var35 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var34);
    java.text.NumberFormat var36 = java.text.NumberFormat.getPercentInstance(var34);
    org.jfree.data.time.Year var38 = new org.jfree.data.time.Year();
    var29.addObject((java.lang.Object)var36, (java.lang.Comparable)0.04d, (java.lang.Comparable)var38);
    double[] var42 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var43 = new org.jfree.chart.annotations.XYPolygonAnnotation(var42);
    double[] var46 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var47 = new org.jfree.chart.annotations.XYPolygonAnnotation(var46);
    org.jfree.chart.ClipPath var48 = new org.jfree.chart.ClipPath(var42, var46);
    double[][] var49 = new double[][] { var42};
    double[] var54 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var55 = new org.jfree.chart.annotations.XYPolygonAnnotation(var54);
    double[] var58 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var59 = new org.jfree.chart.annotations.XYPolygonAnnotation(var58);
    org.jfree.chart.ClipPath var60 = new org.jfree.chart.ClipPath(var54, var58);
    double[][] var61 = new double[][] { var54};
    org.jfree.data.category.CategoryDataset var62 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var61);
    org.jfree.data.category.DefaultIntervalCategoryDataset var63 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var49, var61);
    org.jfree.chart.axis.SubCategoryAxis var65 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    var65.configure();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var67 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var69 = var67.getSeriesLinesVisible(10);
    javax.swing.JPanel var71 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var72 = var71.getPreferredSize();
    boolean var73 = var71.getIgnoreRepaint();
    boolean var74 = var71.isLightweight();
    javax.swing.JPanel var75 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var76 = var75.getPreferredSize();
    javax.swing.JPanel var77 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var75.setNextFocusableComponent((java.awt.Component)var77);
    var75.show();
    javax.swing.JPanel var80 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var81 = var80.getLocation();
    java.awt.Dimension var82 = var80.preferredSize();
    java.awt.Rectangle var83 = var80.bounds();
    var75.scrollRectToVisible(var83);
    var71.setBounds(var83);
    var67.setSeriesShape(15, (java.awt.Shape)var83);
    org.jfree.chart.axis.AxisState var87 = new org.jfree.chart.axis.AxisState();
    org.jfree.chart.title.TextTitle var90 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var91 = var90.isVisible();
    java.lang.Object var92 = var90.clone();
    org.jfree.ui.RectangleEdge var93 = var90.getPosition();
    var87.moveCursor(4.0d, var93);
    double var95 = var21.getItemMiddle((java.lang.Comparable)1201L, (java.lang.Comparable)0.04d, (org.jfree.data.category.CategoryDataset)var63, (org.jfree.chart.axis.CategoryAxis)var65, (java.awt.geom.Rectangle2D)var83, var93);
    java.util.List var96 = var0.getCategoriesForAxis((org.jfree.chart.axis.CategoryAxis)var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var95 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test61"); }


    org.jfree.data.time.DynamicTimeSeriesCollection var2 = new org.jfree.data.time.DynamicTimeSeriesCollection(2, (-1));
    int var4 = var2.offsetFromOldest(51);
    int var5 = var2.getNewestIndex();
    int var6 = var2.getSeriesCount();
    org.jfree.chart.plot.dial.DialValueIndicator var7 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var8 = var7.getInsets();
    java.awt.Stroke var9 = var7.getOutlineStroke();
    javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var11 = var10.getPreferredSize();
    javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var10.setNextFocusableComponent((java.awt.Component)var12);
    java.util.Locale var14 = var12.getLocale();
    javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var16 = var15.getPreferredSize();
    java.awt.Dimension var17 = var12.getSize(var16);
    java.awt.event.ContainerListener[] var18 = var12.getContainerListeners();
    javax.swing.JPanel var19 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var20 = var19.getPreferredSize();
    java.awt.image.ColorModel var21 = var19.getColorModel();
    var19.updateUI();
    java.lang.String var23 = var19.toString();
    java.awt.Color var24 = var19.getForeground();
    var12.setBackground(var24);
    var7.setOutlinePaint((java.awt.Paint)var24);
    java.awt.Color var27 = var24.brighter();
    float[] var31 = new float[] { 10.0f, 100.0f, 1.0f};
    float[] var32 = var24.getRGBColorComponents(var31);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.appendData(var32);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var23.equals("org.jfree.chart.ChartPanel[,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test62"); }


    org.jfree.data.xy.XYIntervalSeries var3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable)"org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", false, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var5 = var3.getYValue(20);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test63"); }


    org.jfree.chart.plot.GreyPalette var0 = new org.jfree.chart.plot.GreyPalette();
    double var1 = var0.getMaxZ();
    org.jfree.chart.editor.PaletteSample var2 = new org.jfree.chart.editor.PaletteSample((org.jfree.chart.plot.ColorPalette)var0);
    var2.setFocusTraversalKeysEnabled(false);
    org.jfree.chart.plot.GreyPalette var5 = new org.jfree.chart.plot.GreyPalette();
    double var6 = var5.getMaxZ();
    var2.setPalette((org.jfree.chart.plot.ColorPalette)var5);
    java.awt.Color var9 = var5.getColorLog(40.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test64"); }


    org.jfree.chart.plot.ThermometerPlot var1 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var2 = var1.isDomainZoomable();
    int var3 = var1.getAxisLocation();
    org.jfree.chart.StandardChartTheme var6 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    org.jfree.chart.plot.DrawingSupplier var7 = var6.getDrawingSupplier();
    org.jfree.chart.plot.dial.StandardDialScale var8 = new org.jfree.chart.plot.dial.StandardDialScale();
    var8.setMajorTickIncrement(10.0d);
    java.awt.Paint var11 = var8.getMinorTickPaint();
    var6.setTickLabelPaint(var11);
    java.awt.Font var13 = var6.getSmallFont();
    var1.setValueFont(var13);
    org.jfree.chart.block.LabelBlock var15 = new org.jfree.chart.block.LabelBlock("100", var13);
    org.jfree.data.time.Week var17 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var18 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var17);
    org.jfree.data.time.TimePeriodValue var20 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var17, (java.lang.Number)10);
    org.jfree.data.time.ohlc.OHLCItem var25 = new org.jfree.data.time.ohlc.OHLCItem((org.jfree.data.time.RegularTimePeriod)var17, 100.0d, 0.0d, 0.05d, 0.0d);
    org.jfree.chart.plot.XYPlot var26 = new org.jfree.chart.plot.XYPlot();
    java.lang.Object var27 = var26.clone();
    org.jfree.data.ComparableObjectItem var28 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable)var25, (java.lang.Object)var26);
    org.jfree.chart.StandardChartTheme var31 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var32 = var31.getLegendItemPaint();
    java.awt.Paint var33 = var31.getSubtitlePaint();
    java.awt.Paint var34 = var31.getTickLabelPaint();
    var26.setDomainGridlinePaint(var34);
    var15.setPaint(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test65"); }


    org.jfree.data.general.DefaultKeyedValues2DDataset var0 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var0.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.chart.axis.PeriodAxis var6 = new org.jfree.chart.axis.PeriodAxis("Compass Plot");
    org.jfree.chart.axis.PeriodAxisLabelInfo[] var7 = new org.jfree.chart.axis.PeriodAxisLabelInfo[] { };
    var6.setLabelInfo(var7);
    boolean var9 = var0.equals((java.lang.Object)var6);
    double var10 = var6.getFixedDimension();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.0d);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test66"); }


    java.lang.String[] var2 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
    org.jfree.chart.plot.CompassPlot var4 = new org.jfree.chart.plot.CompassPlot();
    boolean var5 = var3.equals((java.lang.Object)var4);
    java.lang.String var6 = var4.getPlotType();
    java.awt.Paint var7 = var4.getRoseCenterPaint();
    java.awt.Paint var8 = var4.getBackgroundPaint();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var10 = var9.getPreferredSize();
    java.awt.image.ColorModel var11 = var9.getColorModel();
    var9.updateUI();
    java.lang.String var13 = var9.toString();
    boolean var14 = var9.getInheritsPopupMenu();
    javax.swing.InputMap var15 = var9.getInputMap();
    var9.nextFocus();
    boolean var17 = var9.getInheritsPopupMenu();
    javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var19 = var18.getPreferredSize();
    java.awt.image.ColorModel var20 = var18.getColorModel();
    var18.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var25 = var18.getForeground();
    var9.setForeground(var25);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var28 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var8, (java.awt.Paint)var25, true);
    org.jfree.chart.labels.StandardXYSeriesLabelGenerator var29 = new org.jfree.chart.labels.StandardXYSeriesLabelGenerator();
    var28.setLegendItemLabelGenerator((org.jfree.chart.labels.XYSeriesLabelGenerator)var29);
    org.jfree.chart.LegendItem var33 = var28.getLegendItem(0, (-1));
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var36 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var39 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var40 = var39.getItemLabelFont();
    double var41 = var39.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var44 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var45 = var44.getItemLabelFont();
    java.awt.Shape var46 = var44.getBaseLegendShape();
    var39.setShape(var46);
    var36.setLegendBar(var46);
    var36.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var51 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var52 = var36.findDomainBounds((org.jfree.data.xy.XYDataset)var51);
    org.jfree.data.Range var54 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds((org.jfree.data.xy.TableXYDataset)var51, (-1.0d));
    boolean var55 = var28.equals((java.lang.Object)(-1.0d));
    javax.swing.JPanel var56 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var57 = var56.getLocation();
    org.jfree.chart.plot.PolarPlot var58 = new org.jfree.chart.plot.PolarPlot();
    boolean var59 = var58.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var64 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var64.setUpperMargin(10.0d);
    var64.setAxisLineVisible(true);
    javax.swing.JPanel var69 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var70 = var69.getLocation();
    java.awt.Dimension var71 = var69.preferredSize();
    java.awt.Rectangle var72 = var69.bounds();
    java.awt.Point var73 = var58.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var64, (java.awt.geom.Rectangle2D)var72);
    java.awt.Rectangle var74 = var56.getBounds(var72);
    var28.setLegendLine((java.awt.Shape)var72);
    java.awt.Shape var76 = var28.getLegendLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Compass Plot"+ "'", var6.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var13.equals("org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test67"); }


    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var2 = var0.getSeriesLinesVisible(10);
    java.awt.Stroke var3 = var0.getErrorIndicatorStroke();
    org.jfree.data.general.DefaultKeyedValues2DDataset var4 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var4.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    var4.setValue((java.lang.Number)0.04d, (java.lang.Comparable)(short)(-1), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var13 = var0.findRangeBounds((org.jfree.data.category.CategoryDataset)var4);
    var0.setShapesFilled((java.lang.Boolean)true);
    var0.setSeriesShapesVisible(2013, true);
    org.jfree.chart.labels.ItemLabelPosition var19 = var0.getBasePositiveItemLabelPosition();
    var0.setBaseLinesVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test68"); }


    org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var4);
    org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
    var2.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var15 = var14.getTickLabelPaint();
    var9.setFillPaint(var15, true);
    var2.setDomainCrosshairPaint(var15);
    boolean var19 = var1.equals((java.lang.Object)var2);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var21 = var20.getDomainCrosshairColumnKey();
    var20.setCrosshairDatasetIndex(100);
    org.jfree.chart.plot.CombinedRangeXYPlot var24 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var25 = var24.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var27 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var28 = var27.getMargin();
    var24.setAxisOffset(var28);
    var20.setAxisOffset(var28);
    org.jfree.data.category.CategoryDataset var32 = var20.getDataset((-2));
    var20.clearRangeMarkers((-13421773));
    org.jfree.chart.plot.XYPlot var35 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.plot.DatasetRenderingOrder var36 = var35.getDatasetRenderingOrder();
    var20.setDatasetRenderingOrder(var36);
    var2.setDatasetRenderingOrder(var36);
    org.jfree.chart.plot.ContourPlot var39 = new org.jfree.chart.plot.ContourPlot();
    org.jfree.chart.plot.CategoryMarker var41 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    var39.addRangeMarker((org.jfree.chart.plot.Marker)var41);
    var2.addDomainMarker(var41);
    var2.setRangeCrosshairValue(2.0d, false);
    org.jfree.chart.annotations.CategoryTextAnnotation var50 = new org.jfree.chart.annotations.CategoryTextAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (java.lang.Comparable)(short)1, 0.05d);
    var50.setValue((-170.0d));
    org.jfree.ui.TextAnchor var53 = var50.getRotationAnchor();
    var2.addAnnotation((org.jfree.chart.annotations.CategoryAnnotation)var50);
    org.jfree.ui.RectangleInsets var55 = var2.getAxisOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test69"); }


    org.jfree.data.time.Year var3 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var4 = new org.jfree.data.time.Month(1, var3);
    org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
    long var6 = var4.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var7 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var9 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var10 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var9);
    var7.remove((org.jfree.data.time.TimePeriod)var9, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var14 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var4, (org.jfree.data.time.RegularTimePeriod)var9);
    var14.setMinorTickMarksVisible(false);
    org.jfree.data.time.Year var18 = new org.jfree.data.time.Year(100);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var19 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    int var20 = var18.compareTo((java.lang.Object)var19);
    var14.setFirst((org.jfree.data.time.RegularTimePeriod)var18);
    org.jfree.chart.annotations.XYPointerAnnotation var26 = new org.jfree.chart.annotations.XYPointerAnnotation("-4,-4,4,4", (-0.7853981633974483d), (-90.0d), 0.05d);
    org.jfree.chart.plot.CombinedRangeXYPlot var27 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    org.jfree.chart.annotations.XYPointerAnnotation var32 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var33 = var32.getLabelOffset();
    org.jfree.ui.TextAnchor var34 = var32.getRotationAnchor();
    boolean var35 = var27.removeAnnotation((org.jfree.chart.annotations.XYAnnotation)var32);
    org.jfree.chart.StandardChartTheme var38 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var39 = var38.getLegendItemPaint();
    java.awt.Paint var40 = var38.getSubtitlePaint();
    java.awt.Font var41 = var38.getLargeFont();
    var32.setFont(var41);
    var26.setFont(var41);
    var14.setLabelFont(var41);
    org.jfree.data.time.RegularTimePeriod var45 = var14.getFirst();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test70"); }


    org.jfree.chart.util.RelativeDateFormat var1 = new org.jfree.chart.util.RelativeDateFormat();
    boolean var2 = var1.getShowZeroHours();
    java.text.NumberFormat var3 = var1.getNumberFormat();
    org.jfree.chart.util.HexNumberFormat var6 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var7.setNextFocusableComponent((java.awt.Component)var9);
    java.util.Locale var11 = var9.getLocale();
    org.jfree.chart.axis.MonthDateFormat var12 = new org.jfree.chart.axis.MonthDateFormat(var11);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var13 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var6, (java.text.DateFormat)var12);
    org.jfree.chart.util.HexNumberFormat var15 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var17 = var16.getPreferredSize();
    javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var16.setNextFocusableComponent((java.awt.Component)var18);
    java.util.Locale var20 = var18.getLocale();
    org.jfree.chart.axis.MonthDateFormat var21 = new org.jfree.chart.axis.MonthDateFormat(var20);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var22 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var15, (java.text.DateFormat)var21);
    org.jfree.chart.labels.StandardPieSectionLabelGenerator var23 = new org.jfree.chart.labels.StandardPieSectionLabelGenerator("Combined Range XYPlot", (java.text.NumberFormat)var6, (java.text.NumberFormat)var15);
    var1.setSecondFormatter((java.text.NumberFormat)var15);
    org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator var25 = new org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator("Range[1.0,1.0]", (java.text.NumberFormat)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test71"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    java.awt.Stroke var7 = var0.getRangeMinorGridlineStroke();
    boolean var8 = var0.isRangeMinorGridlinesVisible();
    double[] var11 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var12 = new org.jfree.chart.annotations.XYPolygonAnnotation(var11);
    double[] var15 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var16 = new org.jfree.chart.annotations.XYPolygonAnnotation(var15);
    org.jfree.chart.ClipPath var17 = new org.jfree.chart.ClipPath(var11, var15);
    double[][] var18 = new double[][] { var11};
    double[] var23 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var24 = new org.jfree.chart.annotations.XYPolygonAnnotation(var23);
    double[] var27 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var28 = new org.jfree.chart.annotations.XYPolygonAnnotation(var27);
    org.jfree.chart.ClipPath var29 = new org.jfree.chart.ClipPath(var23, var27);
    double[][] var30 = new double[][] { var23};
    org.jfree.data.category.CategoryDataset var31 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var30);
    org.jfree.data.category.DefaultIntervalCategoryDataset var32 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var18, var30);
    java.util.List var33 = var32.getColumnKeys();
    var0.setDataset((org.jfree.data.category.CategoryDataset)var32);
    org.jfree.data.general.DatasetGroup var36 = new org.jfree.data.general.DatasetGroup("Combined Range XYPlot");
    java.lang.String var37 = var36.getID();
    var32.setGroup(var36);
    int var40 = var32.indexOf((java.lang.Comparable)"hi!?hi!=100&amp;amp;hi!=1");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.general.PieDataset var42 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow((org.jfree.data.category.CategoryDataset)var32, (-13421773));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Combined Range XYPlot"+ "'", var37.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test72"); }


    org.jfree.chart.StandardChartTheme var2 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var3 = var2.getLegendItemPaint();
    java.awt.Paint var4 = var2.getSubtitlePaint();
    java.awt.Font var5 = var2.getLargeFont();
    var2.setShadowVisible(false);
    java.awt.Paint var8 = var2.getRangeGridlinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test73"); }


    org.jfree.data.time.Minute var0 = new org.jfree.data.time.Minute();
    int var1 = var0.getMinute();
    org.jfree.data.time.Hour var2 = var0.getHour();
    org.jfree.data.time.Minute var3 = new org.jfree.data.time.Minute();
    int var4 = var3.getMinute();
    org.jfree.data.time.Hour var5 = var3.getHour();
    org.jfree.data.time.Year var8 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var9 = new org.jfree.data.time.Month(1, var8);
    java.util.Locale var10 = javax.swing.JComponent.getDefaultLocale();
    org.jfree.chart.axis.MonthDateFormat var12 = new org.jfree.chart.axis.MonthDateFormat(var10, 2147483647);
    java.util.Calendar var13 = var12.getCalendar();
    long var14 = var9.getLastMillisecond(var13);
    long var15 = var5.getLastMillisecond(var13);
    var0.peg(var13);
    java.lang.String[] var19 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var20 = new org.jfree.chart.axis.SymbolAxis("hi!", var19);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var21 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var23 = var21.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var26 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var27 = var26.getTickLabelPaint();
    var21.setFillPaint(var27, true);
    var20.setGridBandAlternatePaint(var27);
    var20.setFixedDimension(100.0d);
    org.jfree.chart.plot.CompassPlot var33 = new org.jfree.chart.plot.CompassPlot();
    var33.setDrawBorder(true);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var36 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var37 = var36.getBaseItemLabelsVisible();
    var36.setSeriesShapesFilled(1, (java.lang.Boolean)false);
    var36.setDrawOutlines(true);
    org.jfree.chart.renderer.category.BarRenderer3D var45 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var46 = var45.getItemLabelFont();
    double var47 = var45.getItemLabelAnchorOffset();
    java.awt.Shape var49 = var45.getSeriesShape(1);
    org.jfree.chart.renderer.category.BarRenderer3D var53 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var54 = var53.getItemLabelFont();
    double var55 = var53.getItemLabelAnchorOffset();
    org.jfree.chart.axis.CyclicNumberAxis var59 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var60 = var59.getTickLabelPaint();
    var53.setLegendTextPaint(0, var60);
    var45.setSeriesFillPaint(100, var60, true);
    var36.setBaseOutlinePaint(var60, false);
    var33.setRoseHighlightPaint(var60);
    var20.setPlot((org.jfree.chart.plot.Plot)var33);
    org.jfree.data.general.DefaultKeyedValues2DDataset var68 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var68.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var73 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var68);
    org.jfree.data.Range var75 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds((org.jfree.data.category.CategoryDataset)var68, true);
    var20.setRangeWithMargins(var75);
    boolean var77 = var0.equals((java.lang.Object)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-59008924800001L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1378965599999L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + false+ "'", var37.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == false);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test74"); }


    org.jfree.chart.annotations.XYPointerAnnotation var4 = new org.jfree.chart.annotations.XYPointerAnnotation("", (-0.7853981633974483d), 1.0d, 0.2d);
    java.awt.Paint var5 = var4.getBackgroundPaint();
    double var6 = var4.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-0.7853981633974483d));

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test75"); }


    org.jfree.chart.plot.GreyPalette var0 = new org.jfree.chart.plot.GreyPalette();
    double var1 = var0.getMaxZ();
    org.jfree.chart.editor.PaletteSample var2 = new org.jfree.chart.editor.PaletteSample((org.jfree.chart.plot.ColorPalette)var0);
    var2.setFocusTraversalKeysEnabled(false);
    org.jfree.chart.plot.GreyPalette var5 = new org.jfree.chart.plot.GreyPalette();
    var2.setPalette((org.jfree.chart.plot.ColorPalette)var5);
    java.awt.Dimension var7 = var2.getPreferredSize();
    java.awt.im.InputMethodRequests var8 = var2.getInputMethodRequests();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test76"); }


    org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
    var0.addValue((java.lang.Comparable)100.0f, (java.lang.Number)2.0f);
    var0.addValue((java.lang.Comparable)(-90.0d), 0.02d);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test77"); }


    double[] var3 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var4 = new org.jfree.chart.annotations.XYPolygonAnnotation(var3);
    double[] var7 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var8 = new org.jfree.chart.annotations.XYPolygonAnnotation(var7);
    org.jfree.chart.ClipPath var9 = new org.jfree.chart.ClipPath(var3, var7);
    int var10 = org.jfree.chart.HashUtilities.hashCodeForDoubleArray(var3);
    double[][] var11 = new double[][] { var3};
    java.lang.Object[][] var12 = org.jfree.data.contour.DefaultContourDataset.formObjectArray(var11);
    java.awt.Paint[] var13 = org.jfree.chart.ChartColor.createDefaultPaintArray();
    org.jfree.chart.plot.CategoryPlot var14 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryMarker var16 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var17 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var19 = var17.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var22 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var23 = var22.getTickLabelPaint();
    var17.setFillPaint(var23, true);
    var16.setLabelPaint(var23);
    var14.setDomainGridlinePaint(var23);
    var14.clearDomainMarkers();
    org.jfree.chart.axis.SubCategoryAxis var30 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    var30.configure();
    double var32 = var30.getLowerMargin();
    org.jfree.chart.axis.CategoryAxis[] var33 = new org.jfree.chart.axis.CategoryAxis[] { var30};
    var14.setDomainAxes(var33);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.contour.NonGridContourDataset var35 = new org.jfree.data.contour.NonGridContourDataset("org.jfree.chart.renderer.NotOutlierException: hi!", (java.lang.Object[])var11, (java.lang.Object[])var13, (java.lang.Object[])var33);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1043495433);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test78"); }


    org.jfree.data.xy.XYIntervalSeriesCollection var0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
    org.jfree.data.xy.XYBarDataset var2 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var0, 10.0d);
    java.lang.Number var3 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset)var0);
    org.jfree.chart.plot.CombinedRangeXYPlot var4 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var5 = var4.getRangeZeroBaselineStroke();
    java.lang.String var6 = var4.getPlotType();
    org.jfree.chart.plot.CategoryMarker var8 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var15 = var14.getTickLabelPaint();
    var9.setFillPaint(var15, true);
    var8.setLabelPaint(var15);
    boolean var19 = var4.removeRangeMarker((org.jfree.chart.plot.Marker)var8);
    org.jfree.chart.axis.AxisLocation var20 = var4.getDomainAxisLocation();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var23 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var26 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var27 = var26.getItemLabelFont();
    double var28 = var26.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var31 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var32 = var31.getItemLabelFont();
    java.awt.Shape var33 = var31.getBaseLegendShape();
    var26.setShape(var33);
    var23.setLegendBar(var33);
    var23.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var38 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var39 = var23.findDomainBounds((org.jfree.data.xy.XYDataset)var38);
    int var40 = var4.getIndexOf((org.jfree.chart.renderer.xy.XYItemRenderer)var23);
    boolean var41 = var0.equals((java.lang.Object)var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var44 = var0.getEndY(255, 750);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Combined Range XYPlot"+ "'", var6.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test79"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.renderer.xy.XYBubbleRenderer var1 = new org.jfree.chart.renderer.xy.XYBubbleRenderer((-655360));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test80"); }


    org.jfree.chart.plot.dial.DialPlot var0 = new org.jfree.chart.plot.dial.DialPlot();
    double var1 = var0.getViewWidth();
    org.jfree.chart.plot.dial.DialScale var3 = var0.getScaleForDataset(1);
    org.jfree.chart.plot.dial.DialLayer var4 = var0.getBackground();
    org.jfree.chart.plot.dial.DialPlot var5 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var6 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var7 = var5.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var6);
    var6.setTickLabelsVisible(false);
    var6.setTickRadius(0.05d);
    var0.setCap((org.jfree.chart.plot.dial.DialLayer)var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test81"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    double var4 = var2.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    var2.setShape(var9);
    org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var12 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((java.lang.Comparable)(short)10);
    double var13 = var12.getOutlierCoefficient();
    org.jfree.chart.entity.XYItemEntity var18 = new org.jfree.chart.entity.XYItemEntity(var9, (org.jfree.data.xy.XYDataset)var12, 1, 4, "-4,-4,4,4", "100");
    int var19 = var18.getSeriesIndex();
    org.jfree.data.xy.XYDataset var20 = var18.getDataset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1.5d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test82"); }


    org.jfree.data.xy.CategoryTableXYDataset var0 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.general.DefaultKeyedValues2DDataset var1 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var1.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var6 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var1);
    java.util.List var7 = var1.getColumnKeys();
    org.jfree.data.Range var9 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset)var0, var7, true);
    double var11 = var0.getDomainLowerBound(true);
    double var13 = org.jfree.data.general.DatasetUtilities.calculateStackTotal((org.jfree.data.xy.TableXYDataset)var0, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.0d);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test83"); }


    org.jfree.data.time.Year var3 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var4 = new org.jfree.data.time.Month(1, var3);
    org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
    long var6 = var4.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var7 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var9 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var10 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var9);
    var7.remove((org.jfree.data.time.TimePeriod)var9, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var14 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var4, (org.jfree.data.time.RegularTimePeriod)var9);
    java.util.Date var15 = var9.getEnd();
    org.jfree.data.time.Quarter var16 = new org.jfree.data.time.Quarter(var15);
    org.jfree.chart.plot.CombinedRangeXYPlot var17 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var17.clearDomainMarkers();
    java.awt.Paint var19 = var17.getRangeGridlinePaint();
    var17.clearRangeAxes();
    org.jfree.chart.title.TextTitle var22 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var23 = var22.isVisible();
    java.lang.Object var24 = var22.clone();
    org.jfree.ui.RectangleInsets var25 = var22.getMargin();
    var17.setInsets(var25, true);
    boolean var28 = var16.equals((java.lang.Object)var25);
    org.jfree.data.time.Second var29 = new org.jfree.data.time.Second();
    org.jfree.data.time.Year var32 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var33 = new org.jfree.data.time.Month(1, var32);
    java.util.Locale var34 = javax.swing.JComponent.getDefaultLocale();
    org.jfree.chart.axis.MonthDateFormat var36 = new org.jfree.chart.axis.MonthDateFormat(var34, 2147483647);
    java.util.Calendar var37 = var36.getCalendar();
    var33.peg(var37);
    long var39 = var29.getFirstMillisecond(var37);
    var16.peg(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 1378963162000L);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test84"); }


    org.jfree.chart.needle.PinNeedle var0 = new org.jfree.chart.needle.PinNeedle();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var3 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var4 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var3);
    org.jfree.data.time.TimePeriodValue var6 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var3, (java.lang.Number)10);
    var1.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var8 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var10 = var8.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var13 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var14 = var13.getTickLabelPaint();
    var8.setFillPaint(var14, true);
    var1.setDomainCrosshairPaint(var14);
    var0.setOutlinePaint(var14);
    org.jfree.chart.renderer.category.BarRenderer3D var21 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var22 = var21.getItemLabelFont();
    java.awt.Shape var23 = var21.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var25 = new org.jfree.chart.entity.ContourEntity(var23, "hi!?hi!=100&amp;hi!=1");
    boolean var26 = var0.equals((java.lang.Object)var23);
    org.jfree.chart.plot.PolarPlot var27 = new org.jfree.chart.plot.PolarPlot();
    boolean var28 = var27.isCounterClockwise();
    var27.setRadiusGridlinesVisible(false);
    int var31 = var27.getDatasetCount();
    int var32 = var27.getAxisCount();
    java.awt.Paint var33 = var27.getAngleLabelPaint();
    var0.setHighlightPaint(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test85"); }


    org.jfree.chart.plot.dial.DialValueIndicator var0 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var1 = var0.getInsets();
    var0.setAngle((-1.0d));
    org.jfree.chart.plot.dial.DialPlot var4 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var5 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var6 = var4.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var5);
    org.jfree.chart.plot.dial.DialValueIndicator var7 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var8 = var7.getInsets();
    int var9 = var4.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var7);
    org.jfree.chart.plot.dial.DialValueIndicator var10 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var11 = var10.getInsets();
    java.awt.Stroke var12 = var10.getOutlineStroke();
    var4.setCap((org.jfree.chart.plot.dial.DialLayer)var10);
    var0.removeChangeListener((org.jfree.chart.plot.dial.DialLayerChangeListener)var4);
    java.awt.Paint var15 = var0.getPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test86"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis("0x00000000");
    boolean var7 = var5.isHiddenValue(0L);
    org.jfree.chart.title.TextTitle var10 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var11 = var10.isVisible();
    java.lang.Object var12 = var10.clone();
    var10.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
    double var18 = var10.getWidth();
    javax.swing.JPanel var19 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var20 = var19.getLocation();
    org.jfree.chart.plot.PolarPlot var21 = new org.jfree.chart.plot.PolarPlot();
    boolean var22 = var21.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var27 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var27.setUpperMargin(10.0d);
    var27.setAxisLineVisible(true);
    javax.swing.JPanel var32 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var33 = var32.getLocation();
    java.awt.Dimension var34 = var32.preferredSize();
    java.awt.Rectangle var35 = var32.bounds();
    java.awt.Point var36 = var21.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var27, (java.awt.geom.Rectangle2D)var35);
    java.awt.Rectangle var37 = var19.getBounds(var35);
    var10.setBounds((java.awt.geom.Rectangle2D)var37);
    org.jfree.chart.title.TextTitle var40 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var41 = var40.isVisible();
    java.lang.Object var42 = var40.clone();
    org.jfree.ui.RectangleEdge var43 = var40.getPosition();
    double var44 = var5.valueToJava2D(5.0d, (java.awt.geom.Rectangle2D)var37, var43);
    var5.setTickMarksVisible(true);
    org.jfree.chart.axis.DateTickUnit var47 = var5.getTickUnit();
    var0.setDomainAxis(10, (org.jfree.chart.axis.ValueAxis)var5);
    org.jfree.chart.plot.CombinedRangeXYPlot var50 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var51 = var50.getRangeZeroBaselineStroke();
    java.lang.String var52 = var50.getPlotType();
    org.jfree.chart.plot.CategoryMarker var54 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var55 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var57 = var55.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var60 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var61 = var60.getTickLabelPaint();
    var55.setFillPaint(var61, true);
    var54.setLabelPaint(var61);
    boolean var65 = var50.removeRangeMarker((org.jfree.chart.plot.Marker)var54);
    org.jfree.chart.axis.AxisLocation var66 = var50.getDomainAxisLocation();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRangeAxisLocation(1043495433, var66, true);
      fail("Expected exception of type java.lang.OutOfMemoryError");
    } catch (java.lang.OutOfMemoryError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "Combined Range XYPlot"+ "'", var52.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test87"); }


    org.jfree.chart.renderer.category.GanttRenderer var0 = new org.jfree.chart.renderer.category.GanttRenderer();
    java.lang.String[] var3 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var4 = new org.jfree.chart.axis.SymbolAxis("hi!", var3);
    org.jfree.chart.plot.CompassPlot var5 = new org.jfree.chart.plot.CompassPlot();
    boolean var6 = var4.equals((java.lang.Object)var5);
    java.lang.String var7 = var5.getPlotType();
    java.awt.Paint var8 = var5.getRoseCenterPaint();
    var0.setIncompletePaint(var8);
    var0.setStartPercent(1.05d);
    org.jfree.data.time.Year var14 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var15 = new org.jfree.data.time.Month(1, var14);
    org.jfree.data.time.ohlc.OHLCItem var20 = new org.jfree.data.time.ohlc.OHLCItem((org.jfree.data.time.RegularTimePeriod)var14, 175.0d, 360.0d, (-0.7853981633974483d), 0.75d);
    boolean var21 = var0.equals((java.lang.Object)var20);
    org.jfree.chart.StandardChartTheme var24 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var25 = var24.getLegendItemPaint();
    java.awt.Paint var26 = var24.getSubtitlePaint();
    var0.setItemLabelPaint(var26, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Compass Plot"+ "'", var7.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test88"); }


    org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
    org.jfree.data.general.DefaultPieDataset var1 = new org.jfree.data.general.DefaultPieDataset((org.jfree.data.KeyedValues)var0);
    org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var4);
    org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
    org.jfree.data.time.ohlc.OHLCItem var12 = new org.jfree.data.time.ohlc.OHLCItem((org.jfree.data.time.RegularTimePeriod)var4, 100.0d, 0.0d, 0.05d, 0.0d);
    org.jfree.chart.plot.XYPlot var13 = new org.jfree.chart.plot.XYPlot();
    java.lang.Object var14 = var13.clone();
    org.jfree.data.ComparableObjectItem var15 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable)var12, (java.lang.Object)var13);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.insertValue(2013, (java.lang.Comparable)var15, 1.0E-8d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test89"); }


    org.jfree.chart.block.EmptyBlock var2 = new org.jfree.chart.block.EmptyBlock(0.04d, Double.NaN);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test90"); }


    org.jfree.chart.renderer.Outlier var3 = new org.jfree.chart.renderer.Outlier((-170.0d), (-1.0d), (-0.7853981633974483d));
    double var4 = var3.getY();
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var5 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator();
    java.lang.Object var6 = var5.clone();
    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var7 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    var7.clear();
    java.util.List var9 = var7.getRowKeys();
    boolean var10 = var5.equals((java.lang.Object)var7);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var11 = var3.compareTo((java.lang.Object)var7);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-0.21460183660255172d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test91"); }


    java.lang.Number[][] var0 = new java.lang.Number[][] { };
    java.lang.Number[][] var1 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var2 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var0, var1);
    int var3 = var2.getRowCount();
    org.jfree.data.xy.OHLCDataItem[] var5 = new org.jfree.data.xy.OHLCDataItem[] { };
    org.jfree.data.xy.DefaultOHLCDataset var6 = new org.jfree.data.xy.DefaultOHLCDataset((java.lang.Comparable)0.05d, var5);
    var2.setSeriesKeys((java.lang.Comparable[])var5);
    java.lang.Object var8 = var2.clone();
    org.jfree.data.time.TimeTableXYDataset var9 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var11 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var12 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var11);
    var9.remove((org.jfree.data.time.TimePeriod)var11, (java.lang.Comparable)100, false);
    double var17 = var9.getDomainLowerBound(false);
    int var18 = var9.getItemCount();
    org.jfree.data.time.Year var21 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var22 = new org.jfree.data.time.Month(1, var21);
    var9.add((org.jfree.data.time.TimePeriod)var22, 0.3d, (java.lang.Comparable)"org.jfree.chart.renderer.NotOutlierException: hi!");
    int var26 = var2.getRowIndex((java.lang.Comparable)0.3d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test92"); }


    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var2 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.LegendItem var5 = var2.getLegendItem(1, 0);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var6 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    var2.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var6);
    org.jfree.chart.renderer.xy.CandlestickRenderer var8 = new org.jfree.chart.renderer.xy.CandlestickRenderer(0.75d, false, (org.jfree.chart.labels.XYToolTipGenerator)var6);
    boolean var9 = var8.getUseOutlinePaint();
    var8.setAutoWidthGap(100.0d);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var12 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var13 = var12.isOutline();
    var12.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var18 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var19 = var18.getLegendItemPaint();
    var12.setShapePaint(var19);
    double[] var23 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var24 = new org.jfree.chart.annotations.XYPolygonAnnotation(var23);
    java.lang.Object var25 = var24.clone();
    java.awt.Paint var26 = var24.getOutlinePaint();
    var12.setBasePaint(var26);
    var8.setDownPaint(var26);
    javax.swing.JPanel var29 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var30 = var29.getPreferredSize();
    boolean var31 = var29.getIgnoreRepaint();
    boolean var32 = var29.isLightweight();
    javax.swing.JPanel var33 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var34 = var33.getPreferredSize();
    javax.swing.JPanel var35 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var33.setNextFocusableComponent((java.awt.Component)var35);
    var33.show();
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var39 = var38.getLocation();
    java.awt.Dimension var40 = var38.preferredSize();
    java.awt.Rectangle var41 = var38.bounds();
    var33.scrollRectToVisible(var41);
    var29.setBounds(var41);
    org.jfree.chart.renderer.category.BarRenderer3D var46 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var47 = var46.getItemLabelFont();
    java.awt.Shape var48 = var46.getBaseLegendShape();
    double var49 = var46.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var50 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var51 = var50.getRangeZeroBaselineStroke();
    var46.setStroke(var51, false);
    org.jfree.chart.renderer.category.BarRenderer3D var56 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var57 = var56.getItemLabelFont();
    double var58 = var56.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var61 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var62 = var61.getItemLabelFont();
    java.awt.Shape var63 = var61.getBaseLegendShape();
    var56.setShape(var63);
    org.jfree.chart.StandardChartTheme var67 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var68 = var67.getLegendItemPaint();
    var56.setItemLabelPaint(var68);
    org.jfree.chart.annotations.XYShapeAnnotation var70 = new org.jfree.chart.annotations.XYShapeAnnotation((java.awt.Shape)var41, var51, var68);
    boolean var71 = var8.equals((java.lang.Object)var68);
    
    // Checks the contract:  equals-hashcode on var18 and var67
    assertTrue("Contract failed: equals-hashcode on var18 and var67", var18.equals(var67) ? var18.hashCode() == var67.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var67 and var18
    assertTrue("Contract failed: equals-hashcode on var67 and var18", var67.equals(var18) ? var67.hashCode() == var18.hashCode() : true);

  }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test93"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    java.awt.Shape var3 = var2.getLegendBar();
    org.jfree.chart.entity.XYAnnotationEntity var7 = new org.jfree.chart.entity.XYAnnotationEntity(var3, 8, "-4,-4,4,4", "hi!");
    var7.setRendererIndex(1043495433);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test94"); }


    org.jfree.chart.renderer.category.BarRenderer3D var6 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var7 = var6.getItemLabelFont();
    java.awt.Shape var8 = var6.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var10 = new org.jfree.chart.entity.ContourEntity(var8, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var12 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var13 = var12.isVisible();
    java.lang.Object var14 = var12.clone();
    java.lang.String var15 = var12.getURLText();
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var17 = var16.getPreferredSize();
    java.awt.image.ColorModel var18 = var16.getColorModel();
    var16.updateUI();
    java.lang.String var20 = var16.toString();
    java.awt.Color var21 = var16.getForeground();
    var12.setBackgroundPaint((java.awt.Paint)var21);
    int var23 = var21.getRGB();
    int var24 = var21.getBlue();
    org.jfree.chart.plot.dial.DialPlot var25 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var26 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var27 = var25.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var26);
    org.jfree.chart.plot.dial.DialValueIndicator var28 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var29 = var28.getInsets();
    int var30 = var25.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var28);
    java.awt.Stroke var31 = var28.getOutlineStroke();
    org.jfree.chart.title.TextTitle var33 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var34 = var33.isVisible();
    java.lang.Object var35 = var33.clone();
    java.lang.String var36 = var33.getURLText();
    javax.swing.JPanel var37 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var38 = var37.getPreferredSize();
    java.awt.image.ColorModel var39 = var37.getColorModel();
    var37.updateUI();
    java.lang.String var41 = var37.toString();
    java.awt.Color var42 = var37.getForeground();
    var33.setBackgroundPaint((java.awt.Paint)var42);
    org.jfree.chart.LegendItem var44 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var8, (java.awt.Paint)var21, var31, (java.awt.Paint)var42);
    var44.setLineVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var20.equals("org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var41,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var41.equals("org.jfree.chart.ChartPanel[,0,0,0var41,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test95"); }


    org.jfree.data.xy.DefaultXYZDataset var0 = new org.jfree.data.xy.DefaultXYZDataset();
    org.jfree.data.Range var2 = org.jfree.data.general.DatasetUtilities.iterateZBounds((org.jfree.data.xy.XYZDataset)var0, false);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var11 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.util.List var12 = var11.getSubplots();
    org.jfree.data.statistics.BoxAndWhiskerItem var13 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)(-2208960000000L), (java.lang.Number)Double.NaN, (java.lang.Number)51, (java.lang.Number)0.05d, (java.lang.Number)(byte)100, (java.lang.Number)2.0f, (java.lang.Number)15, (java.lang.Number)1.0f, var12);
    org.jfree.chart.axis.CyclicNumberAxis var16 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var17 = var16.isAxisLineVisible();
    var16.setAxisLineVisible(true);
    org.jfree.data.general.DefaultKeyedValues2DDataset var20 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var20.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var25 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.category.CategoryDataset)var20);
    var16.setDefaultAutoRange(var25);
    org.jfree.data.Range var27 = var16.getRange();
    org.jfree.data.Range var29 = org.jfree.data.general.DatasetUtilities.findZBounds((org.jfree.data.xy.XYZDataset)var0, var12, var27, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var32 = var0.getXValue((-1), 1043495433);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test96"); }


    org.jfree.chart.util.HexNumberFormat var3 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var5 = var4.getPreferredSize();
    javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var4.setNextFocusableComponent((java.awt.Component)var6);
    java.util.Locale var8 = var6.getLocale();
    org.jfree.chart.axis.MonthDateFormat var9 = new org.jfree.chart.axis.MonthDateFormat(var8);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var10 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var3, (java.text.DateFormat)var9);
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var12 = var11.getPreferredSize();
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var11.setNextFocusableComponent((java.awt.Component)var13);
    java.util.Locale var15 = var13.getLocale();
    org.jfree.chart.axis.MonthDateFormat var16 = new org.jfree.chart.axis.MonthDateFormat(var15);
    org.jfree.chart.labels.StandardXYToolTipGenerator var17 = new org.jfree.chart.labels.StandardXYToolTipGenerator("Combined Range XYPlot", (java.text.DateFormat)var9, (java.text.DateFormat)var16);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var18 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer(10, (org.jfree.chart.labels.XYToolTipGenerator)var17);
    org.jfree.chart.labels.XYItemLabelGenerator var21 = var18.getItemLabelGenerator((-1), 2147483647);
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var23 = var22.getLocation();
    java.awt.Dimension var24 = var22.preferredSize();
    java.awt.Rectangle var25 = var22.bounds();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var28 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var31 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var32 = var31.getItemLabelFont();
    double var33 = var31.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var36 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var37 = var36.getItemLabelFont();
    java.awt.Shape var38 = var36.getBaseLegendShape();
    var31.setShape(var38);
    var28.setLegendBar(var38);
    org.jfree.data.general.DefaultKeyedValues2DDataset var43 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var46 = new org.jfree.chart.entity.CategoryItemEntity(var38, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var43, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.chart.plot.CombinedRangeXYPlot var47 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var48 = var47.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CategoryMarker var50 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var51 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var53 = var51.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var56 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var57 = var56.getTickLabelPaint();
    var51.setFillPaint(var57, true);
    var50.setLabelPaint(var57);
    org.jfree.chart.annotations.XYShapeAnnotation var61 = new org.jfree.chart.annotations.XYShapeAnnotation(var38, var48, var57);
    java.lang.String[] var64 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var65 = new org.jfree.chart.axis.SymbolAxis("hi!", var64);
    org.jfree.chart.renderer.category.BarRenderer3D var68 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var69 = var68.getItemLabelFont();
    double var70 = var68.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var73 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var74 = var73.getItemLabelFont();
    java.awt.Shape var75 = var73.getBaseLegendShape();
    var68.setShape(var75);
    var65.setDownArrow(var75);
    javax.swing.JPanel var78 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var79 = var78.getPreferredSize();
    java.awt.image.ColorModel var80 = var78.getColorModel();
    var78.updateUI();
    java.lang.String var82 = var78.toString();
    boolean var83 = var78.getInheritsPopupMenu();
    javax.swing.InputMap var84 = var78.getInputMap();
    var78.nextFocus();
    boolean var86 = var78.getInheritsPopupMenu();
    javax.swing.JPanel var87 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var88 = var87.getPreferredSize();
    java.awt.image.ColorModel var89 = var87.getColorModel();
    var87.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var94 = var87.getForeground();
    var78.setForeground(var94);
    var65.setGridBandAlternatePaint((java.awt.Paint)var94);
    org.jfree.chart.annotations.XYShapeAnnotation var97 = new org.jfree.chart.annotations.XYShapeAnnotation((java.awt.Shape)var25, var48, (java.awt.Paint)var94);
    var18.setOutlineStroke(var48, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var82 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var82,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var82.equals("org.jfree.chart.ChartPanel[,0,0,0var82,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var83 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var88);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test97"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    java.awt.Shape var12 = var10.getBaseLegendShape();
    var5.setShape(var12);
    var2.setLegendBar(var12);
    org.jfree.data.general.DefaultKeyedValues2DDataset var17 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var20 = new org.jfree.chart.entity.CategoryItemEntity(var12, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var17, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    var20.setCategoryIndex(0);
    var20.setCategoryIndex(15);
    java.lang.Object var25 = var20.getCategory();
    java.lang.String var26 = var20.getShapeType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + true+ "'", var25.equals(true));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "rect"+ "'", var26.equals("rect"));

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test98"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setOpaque(true);
    boolean var3 = var0.isCursorSet();
    javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var5 = var4.getPreferredSize();
    java.awt.image.ColorModel var6 = var4.getColorModel();
    var4.updateUI();
    java.lang.String var8 = var4.toString();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    boolean var10 = var4.isFocusCycleRoot((java.awt.Container)var9);
    var9.setToolTipText("jfreechart-");
    java.awt.Dimension var13 = var9.getMaximumSize();
    var0.setPreferredSize(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var8,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var8.equals("org.jfree.chart.ChartPanel[,0,0,0var8,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test99"); }


    org.jfree.data.time.Month var2 = new org.jfree.data.time.Month(8, (-334));

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test100"); }


    org.jfree.chart.axis.SubCategoryAxis var1 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    var1.configure();
    double var3 = var1.getFixedDimension();
    var1.clearCategoryLabelToolTips();
    org.jfree.chart.plot.dial.DialTextAnnotation var6 = new org.jfree.chart.plot.dial.DialTextAnnotation("0x00000001");
    org.jfree.chart.StandardChartTheme var9 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    org.jfree.chart.plot.DrawingSupplier var10 = var9.getDrawingSupplier();
    org.jfree.chart.StandardChartTheme var13 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var14 = var13.getLegendItemPaint();
    java.awt.Paint var15 = var13.getSubtitlePaint();
    java.awt.Font var16 = var13.getLargeFont();
    var9.setSmallFont(var16);
    var6.setFont(var16);
    var1.setSubLabelFont(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test101"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var8 = var7.getDomainCrosshairColumnKey();
    var7.setCrosshairDatasetIndex(100);
    org.jfree.chart.axis.CategoryAnchor var11 = var7.getDomainGridlinePosition();
    var0.setDomainGridlinePosition(var11);
    org.jfree.chart.axis.CategoryLabelPositions var14 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var17 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var18 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var17);
    org.jfree.data.time.TimePeriodValue var20 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var17, (java.lang.Number)10);
    var15.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var22 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var24 = var22.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var27 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var28 = var27.getTickLabelPaint();
    var22.setFillPaint(var28, true);
    var15.setDomainCrosshairPaint(var28);
    boolean var32 = var14.equals((java.lang.Object)var15);
    org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var34 = var33.getDomainCrosshairColumnKey();
    var33.setCrosshairDatasetIndex(100);
    org.jfree.chart.plot.CombinedRangeXYPlot var37 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var38 = var37.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var40 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var41 = var40.getMargin();
    var37.setAxisOffset(var41);
    var33.setAxisOffset(var41);
    org.jfree.data.category.CategoryDataset var45 = var33.getDataset((-2));
    var33.clearRangeMarkers((-13421773));
    org.jfree.chart.plot.XYPlot var48 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.plot.DatasetRenderingOrder var49 = var48.getDatasetRenderingOrder();
    var33.setDatasetRenderingOrder(var49);
    var15.setDatasetRenderingOrder(var49);
    org.jfree.chart.plot.ContourPlot var52 = new org.jfree.chart.plot.ContourPlot();
    org.jfree.chart.plot.CategoryMarker var54 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    var52.addRangeMarker((org.jfree.chart.plot.Marker)var54);
    var15.addDomainMarker(var54);
    var15.setRangeCrosshairValue(2.0d, false);
    org.jfree.chart.annotations.CategoryTextAnnotation var63 = new org.jfree.chart.annotations.CategoryTextAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (java.lang.Comparable)(short)1, 0.05d);
    var63.setValue((-170.0d));
    org.jfree.ui.TextAnchor var66 = var63.getRotationAnchor();
    var15.addAnnotation((org.jfree.chart.annotations.CategoryAnnotation)var63);
    boolean var68 = var0.removeAnnotation((org.jfree.chart.annotations.CategoryAnnotation)var63);
    
    // Checks the contract:  equals-hashcode on var7 and var33
    assertTrue("Contract failed: equals-hashcode on var7 and var33", var7.equals(var33) ? var7.hashCode() == var33.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var33 and var7
    assertTrue("Contract failed: equals-hashcode on var33 and var7", var33.equals(var7) ? var33.hashCode() == var7.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var3 and var18
    assertTrue("Contract failed: equals-hashcode on var3 and var18", var3.equals(var18) ? var3.hashCode() == var18.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var18 and var3
    assertTrue("Contract failed: equals-hashcode on var18 and var3", var18.equals(var3) ? var18.hashCode() == var3.hashCode() : true);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test102"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var11 = new org.jfree.chart.entity.ContourEntity(var9, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var14 = var13.isVisible();
    java.lang.Object var15 = var13.clone();
    java.lang.String var16 = var13.getURLText();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.image.ColorModel var19 = var17.getColorModel();
    var17.updateUI();
    java.lang.String var21 = var17.toString();
    java.awt.Color var22 = var17.getForeground();
    var13.setBackgroundPaint((java.awt.Paint)var22);
    int var24 = var22.getRGB();
    int var25 = var22.getBlue();
    org.jfree.chart.plot.dial.DialPlot var26 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var27 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var28 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var27);
    org.jfree.chart.plot.dial.DialValueIndicator var29 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var30 = var29.getInsets();
    int var31 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var29);
    java.awt.Stroke var32 = var29.getOutlineStroke();
    org.jfree.chart.title.TextTitle var34 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var35 = var34.isVisible();
    java.lang.Object var36 = var34.clone();
    java.lang.String var37 = var34.getURLText();
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.image.ColorModel var40 = var38.getColorModel();
    var38.updateUI();
    java.lang.String var42 = var38.toString();
    java.awt.Color var43 = var38.getForeground();
    var34.setBackgroundPaint((java.awt.Paint)var43);
    org.jfree.chart.LegendItem var45 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var9, (java.awt.Paint)var22, var32, (java.awt.Paint)var43);
    var0.setBaseSectionOutlinePaint((java.awt.Paint)var22);
    org.jfree.chart.labels.PieSectionLabelGenerator var47 = var0.getLegendLabelToolTipGenerator();
    org.jfree.chart.plot.Crosshair var49 = new org.jfree.chart.plot.Crosshair();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var50 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var52 = var50.getSeriesLinesVisible(10);
    var50.setUseOutlinePaint(true);
    boolean var55 = var49.equals((java.lang.Object)true);
    java.awt.Paint var56 = var49.getLabelPaint();
    var0.setSectionPaint((java.lang.Comparable)0.2d, var56);
    org.jfree.chart.labels.StandardPieToolTipGenerator var58 = new org.jfree.chart.labels.StandardPieToolTipGenerator();
    var0.setToolTipGenerator((org.jfree.chart.labels.PieToolTipGenerator)var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test103"); }


    org.jfree.data.function.NormalDistributionFunction2D var2 = new org.jfree.data.function.NormalDistributionFunction2D(4.0d, 10.0d);
    double var3 = var2.getMean();
    double var5 = var2.getValue(174.49d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 4.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3.0413664921379274E-65d);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test104"); }


    org.jfree.data.xy.OHLCDataItem[] var1 = new org.jfree.data.xy.OHLCDataItem[] { };
    org.jfree.data.xy.DefaultOHLCDataset var2 = new org.jfree.data.xy.DefaultOHLCDataset((java.lang.Comparable)0.05d, var1);
    int var3 = var2.getSeriesCount();
    java.lang.String[] var6 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var7 = new org.jfree.chart.axis.SymbolAxis("hi!", var6);
    org.jfree.chart.plot.CompassPlot var8 = new org.jfree.chart.plot.CompassPlot();
    boolean var9 = var7.equals((java.lang.Object)var8);
    java.lang.String var10 = var8.getPlotType();
    java.awt.Paint var11 = var8.getRoseCenterPaint();
    java.awt.Paint var12 = var8.getBackgroundPaint();
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var14 = var13.getPreferredSize();
    java.awt.image.ColorModel var15 = var13.getColorModel();
    var13.updateUI();
    java.lang.String var17 = var13.toString();
    boolean var18 = var13.getInheritsPopupMenu();
    javax.swing.InputMap var19 = var13.getInputMap();
    var13.nextFocus();
    boolean var21 = var13.getInheritsPopupMenu();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    java.awt.image.ColorModel var24 = var22.getColorModel();
    var22.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var29 = var22.getForeground();
    var13.setForeground(var29);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var32 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var12, (java.awt.Paint)var29, true);
    java.awt.Shape var34 = var32.lookupLegendShape((-1));
    java.awt.Paint var35 = var32.getNegativePaint();
    boolean var36 = var2.equals((java.lang.Object)var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var39 = var2.getClose((-13421773), 10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Compass Plot"+ "'", var10.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var17,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var17.equals("org.jfree.chart.ChartPanel[,0,0,0var17,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test105"); }


    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var4 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var5 = var4.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var6 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var7 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var4, (org.jfree.chart.urls.XYURLGenerator)var6);
    org.jfree.chart.renderer.xy.StandardXYItemRenderer var8 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, (org.jfree.chart.labels.XYToolTipGenerator)var4);
    java.text.NumberFormat var9 = var4.getYFormat();
    org.jfree.chart.labels.StandardCategoryToolTipGenerator var10 = new org.jfree.chart.labels.StandardCategoryToolTipGenerator("jfreechart-", var9);
    org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator var11 = new org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator("org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]", var9);
    org.jfree.chart.plot.XYPlot var12 = new org.jfree.chart.plot.XYPlot();
    java.lang.Object var13 = var12.clone();
    boolean var14 = var11.equals((java.lang.Object)var12);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var17 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var20 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var21 = var20.getItemLabelFont();
    double var22 = var20.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var25 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var26 = var25.getItemLabelFont();
    java.awt.Shape var27 = var25.getBaseLegendShape();
    var20.setShape(var27);
    var17.setLegendBar(var27);
    org.jfree.data.general.DefaultKeyedValues2DDataset var32 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var35 = new org.jfree.chart.entity.CategoryItemEntity(var27, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var32, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    var35.setCategoryIndex(0);
    var35.setCategoryIndex(15);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var42 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var45 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var46 = var45.getItemLabelFont();
    double var47 = var45.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var50 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var51 = var50.getItemLabelFont();
    java.awt.Shape var52 = var50.getBaseLegendShape();
    var45.setShape(var52);
    var42.setLegendBar(var52);
    org.jfree.data.general.DefaultKeyedValues2DDataset var57 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var60 = new org.jfree.chart.entity.CategoryItemEntity(var52, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var57, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    var35.setDataset((org.jfree.data.category.CategoryDataset)var57);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var63 = var11.generateColumnLabel((org.jfree.data.category.CategoryDataset)var57, 8);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test106"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    boolean var8 = var0.getDrawSharedDomainAxis();
    var0.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var0.addChangeListener((org.jfree.chart.event.PlotChangeListener)var11);
    org.jfree.chart.event.PlotChangeEvent var13 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var11);
    org.jfree.chart.plot.DatasetRenderingOrder var14 = var11.getDatasetRenderingOrder();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test107"); }


    org.jfree.data.xy.YIntervalSeriesCollection var0 = new org.jfree.data.xy.YIntervalSeriesCollection();
    int var1 = var0.getSeriesCount();
    org.jfree.chart.plot.CombinedDomainCategoryPlot var10 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.util.List var11 = var10.getSubplots();
    org.jfree.data.statistics.BoxAndWhiskerItem var12 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)(-2208960000000L), (java.lang.Number)Double.NaN, (java.lang.Number)51, (java.lang.Number)0.05d, (java.lang.Number)(byte)100, (java.lang.Number)2.0f, (java.lang.Number)15, (java.lang.Number)1.0f, var11);
    java.lang.String var13 = var12.toString();
    boolean var14 = var0.equals((java.lang.Object)var13);
    var0.removeAllSeries();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test108"); }


    org.jfree.chart.StandardChartTheme var2 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var3 = var2.getLegendItemPaint();
    java.awt.Paint var4 = var2.getSubtitlePaint();
    java.awt.Paint var5 = var2.getPlotBackgroundPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test109"); }


    org.jfree.chart.annotations.XYPointerAnnotation var4 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    boolean var5 = var4.isOutlineVisible();
    var4.setY(1.05d);
    var4.setArrowLength((-0.7853981633974483d));
    boolean var10 = var4.getNotify();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test110"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var11 = new org.jfree.chart.entity.ContourEntity(var9, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var14 = var13.isVisible();
    java.lang.Object var15 = var13.clone();
    java.lang.String var16 = var13.getURLText();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.image.ColorModel var19 = var17.getColorModel();
    var17.updateUI();
    java.lang.String var21 = var17.toString();
    java.awt.Color var22 = var17.getForeground();
    var13.setBackgroundPaint((java.awt.Paint)var22);
    int var24 = var22.getRGB();
    int var25 = var22.getBlue();
    org.jfree.chart.plot.dial.DialPlot var26 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var27 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var28 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var27);
    org.jfree.chart.plot.dial.DialValueIndicator var29 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var30 = var29.getInsets();
    int var31 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var29);
    java.awt.Stroke var32 = var29.getOutlineStroke();
    org.jfree.chart.title.TextTitle var34 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var35 = var34.isVisible();
    java.lang.Object var36 = var34.clone();
    java.lang.String var37 = var34.getURLText();
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.image.ColorModel var40 = var38.getColorModel();
    var38.updateUI();
    java.lang.String var42 = var38.toString();
    java.awt.Color var43 = var38.getForeground();
    var34.setBackgroundPaint((java.awt.Paint)var43);
    org.jfree.chart.LegendItem var45 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var9, (java.awt.Paint)var22, var32, (java.awt.Paint)var43);
    var0.setBaseSectionOutlinePaint((java.awt.Paint)var22);
    var0.handleMouseWheelRotation(2147483647);
    var0.clearSectionOutlinePaints(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test111"); }


    org.jfree.chart.axis.QuarterDateFormat var0 = new org.jfree.chart.axis.QuarterDateFormat();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var2 = var1.getDomainCrosshairColumnKey();
    var1.setCrosshairDatasetIndex(100);
    org.jfree.chart.plot.CombinedRangeXYPlot var5 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var6 = var5.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var8 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var9 = var8.getMargin();
    var5.setAxisOffset(var9);
    var1.setAxisOffset(var9);
    org.jfree.data.category.CategoryDataset var13 = var1.getDataset((-2));
    org.jfree.chart.StandardChartTheme var16 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var17 = var16.getLegendItemPaint();
    java.awt.Paint var18 = var16.getSubtitlePaint();
    java.awt.Font var19 = var16.getLargeFont();
    var1.setNoDataMessageFont(var19);
    org.jfree.chart.renderer.category.DefaultCategoryItemRenderer var21 = new org.jfree.chart.renderer.category.DefaultCategoryItemRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var23 = var21.getSeriesItemURLGenerator(2147483647);
    java.awt.Paint var24 = var21.getBaseOutlinePaint();
    var1.setRangeMinorGridlinePaint(var24);
    boolean var26 = var0.equals((java.lang.Object)var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test112"); }


    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    var0.clear();
    java.util.List var2 = var0.getRowKeys();
    java.lang.Object var3 = var0.clone();
    org.jfree.data.Range var5 = var0.getRangeBounds(false);
    int var6 = var0.getRowCount();
    org.jfree.data.time.Minute var10 = new org.jfree.data.time.Minute();
    int var11 = var10.getMinute();
    org.jfree.data.time.Hour var12 = var10.getHour();
    org.jfree.data.time.Day var13 = var12.getDay();
    int var14 = var13.getYear();
    org.jfree.data.time.Hour var15 = new org.jfree.data.time.Hour(52, var13);
    var0.add((java.lang.Number)2147483647, (java.lang.Number)2, (java.lang.Comparable)52, (java.lang.Comparable)1378965599999L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2013);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test113"); }


    org.jfree.chart.renderer.category.BarPainter var0 = org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test114"); }


    org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
    var0.setValue((java.lang.Comparable)4.0d, (-0.7853981633974483d));
    var0.setValue((java.lang.Comparable)10.0f, (java.lang.Number)1.05d);
    org.jfree.data.general.DefaultPieDataset var7 = new org.jfree.data.general.DefaultPieDataset((org.jfree.data.KeyedValues)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var9 = var7.getKey(2013);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test115"); }


    org.jfree.chart.plot.dial.ArcDialFrame var0 = new org.jfree.chart.plot.dial.ArcDialFrame();
    double var1 = var0.getOuterRadius();
    var0.setInnerRadius(3.0d);
    var0.setOuterRadius(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.75d);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test116"); }


    org.jfree.chart.axis.CyclicNumberAxis var2 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var3 = var2.isAxisLineVisible();
    var2.setAdvanceLineVisible(false);
    double var6 = var2.getUpperBound();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1.0d);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test117"); }


    org.jfree.chart.util.LogFormat var3 = new org.jfree.chart.util.LogFormat(0.04d, "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", false);
    org.jfree.chart.util.HexNumberFormat var8 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var10 = var9.getPreferredSize();
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var9.setNextFocusableComponent((java.awt.Component)var11);
    java.util.Locale var13 = var11.getLocale();
    org.jfree.chart.axis.MonthDateFormat var14 = new org.jfree.chart.axis.MonthDateFormat(var13);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var15 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var8, (java.text.DateFormat)var14);
    org.jfree.chart.util.HexNumberFormat var17 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var19 = var18.getPreferredSize();
    javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var18.setNextFocusableComponent((java.awt.Component)var20);
    java.util.Locale var22 = var20.getLocale();
    org.jfree.chart.axis.MonthDateFormat var23 = new org.jfree.chart.axis.MonthDateFormat(var22);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var24 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var17, (java.text.DateFormat)var23);
    org.jfree.chart.labels.StandardPieSectionLabelGenerator var25 = new org.jfree.chart.labels.StandardPieSectionLabelGenerator("Combined Range XYPlot", (java.text.NumberFormat)var8, (java.text.NumberFormat)var17);
    org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator var26 = new org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator("hi!", (java.text.NumberFormat)var8);
    org.jfree.chart.labels.StandardCategoryToolTipGenerator var27 = new org.jfree.chart.labels.StandardCategoryToolTipGenerator("hi!?hi!=15&amp;hi!=10", (java.text.NumberFormat)var8);
    var3.setExponentFormat((java.text.NumberFormat)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test118"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.chart.renderer.PaintScale var1 = var0.getPaintScale();
    org.jfree.chart.renderer.PaintScale var2 = var0.getPaintScale();
    org.jfree.chart.plot.PolarPlot var3 = new org.jfree.chart.plot.PolarPlot();
    boolean var4 = var3.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var9 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var9.setUpperMargin(10.0d);
    var9.setAxisLineVisible(true);
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var15 = var14.getLocation();
    java.awt.Dimension var16 = var14.preferredSize();
    java.awt.Rectangle var17 = var14.bounds();
    java.awt.Point var18 = var3.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var9, (java.awt.geom.Rectangle2D)var17);
    float var19 = var9.getTickMarkOutsideLength();
    org.jfree.chart.title.PaintScaleLegend var20 = new org.jfree.chart.title.PaintScaleLegend(var2, (org.jfree.chart.axis.ValueAxis)var9);
    java.awt.Paint var21 = var20.getStripOutlinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test119"); }


    org.jfree.chart.renderer.Outlier var3 = new org.jfree.chart.renderer.Outlier((-170.0d), (-1.0d), (-0.7853981633974483d));
    javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var5 = var4.getLocation();
    java.awt.Dimension var6 = var4.preferredSize();
    var4.paintImmediately(100, 100, 10, (-1));
    org.jfree.chart.plot.PolarPlot var12 = new org.jfree.chart.plot.PolarPlot();
    boolean var13 = var12.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var18 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var18.setUpperMargin(10.0d);
    var18.setAxisLineVisible(true);
    javax.swing.JPanel var23 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var24 = var23.getLocation();
    java.awt.Dimension var25 = var23.preferredSize();
    java.awt.Rectangle var26 = var23.bounds();
    java.awt.Point var27 = var12.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var18, (java.awt.geom.Rectangle2D)var26);
    boolean var28 = var4.contains(var27);
    var3.setPoint((java.awt.geom.Point2D)var27);
    double var30 = var3.getX();
    org.jfree.chart.renderer.Outlier var34 = new org.jfree.chart.renderer.Outlier((-170.0d), (-1.0d), (-0.7853981633974483d));
    double var35 = var34.getY();
    boolean var36 = var3.overlaps(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-0.21460183660255172d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test120"); }


    org.jfree.chart.StandardChartTheme var2 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var3 = var2.getLegendItemPaint();
    java.awt.Paint var4 = var2.getSubtitlePaint();
    java.awt.Font var5 = var2.getLargeFont();
    var2.setShadowVisible(false);
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryMarker var10 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var11 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var13 = var11.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var16 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var17 = var16.getTickLabelPaint();
    var11.setFillPaint(var17, true);
    var10.setLabelPaint(var17);
    var8.setDomainGridlinePaint(var17);
    var2.setRangeGridlinePaint(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test121"); }


    org.jfree.chart.urls.StandardXYURLGenerator var3 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    org.jfree.data.xy.XIntervalSeriesCollection var4 = new org.jfree.data.xy.XIntervalSeriesCollection();
    java.lang.String var7 = var3.generateURL((org.jfree.data.xy.XYDataset)var4, 10, 51);
    org.jfree.data.xy.XIntervalSeries var9 = new org.jfree.data.xy.XIntervalSeries((java.lang.Comparable)1201L);
    var4.removeSeries(var9);
    int var11 = var9.getItemCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "hi!?hi!=10&amp;hi!=51"+ "'", var7.equals("hi!?hi!=10&amp;hi!=51"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test122"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryMarker var10 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var11 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var13 = var11.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var16 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var17 = var16.getTickLabelPaint();
    var11.setFillPaint(var17, true);
    var10.setLabelPaint(var17);
    var8.setDomainGridlinePaint(var17);
    var8.clearDomainMarkers();
    org.jfree.chart.axis.SubCategoryAxis var24 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    var24.configure();
    double var26 = var24.getLowerMargin();
    org.jfree.chart.axis.CategoryAxis[] var27 = new org.jfree.chart.axis.CategoryAxis[] { var24};
    var8.setDomainAxes(var27);
    var0.setDomainAxes(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test123"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    boolean var8 = var0.getDrawSharedDomainAxis();
    var0.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var0.addChangeListener((org.jfree.chart.event.PlotChangeListener)var11);
    double var13 = var11.getGap();
    org.jfree.chart.plot.CombinedRangeXYPlot var14 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var15 = var14.getRangeZeroBaselineStroke();
    java.awt.Paint var16 = var14.getRangeMinorGridlinePaint();
    var11.setDomainCrosshairPaint(var16);
    org.jfree.chart.axis.CyclicNumberAxis var21 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var22 = var21.getTickLabelPaint();
    var11.setRangeAxis(100, (org.jfree.chart.axis.ValueAxis)var21, false);
    var21.setAdvanceLineVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 5.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test124"); }


    org.jfree.chart.labels.StandardXYToolTipGenerator var0 = new org.jfree.chart.labels.StandardXYToolTipGenerator();
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var2 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var3 = var2.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var4 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var5 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var2, (org.jfree.chart.urls.XYURLGenerator)var4);
    java.lang.String var6 = var4.getItemParameterName();
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer2 var7 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer2((org.jfree.chart.labels.XYToolTipGenerator)var0, (org.jfree.chart.urls.XYURLGenerator)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "item"+ "'", var6.equals("item"));

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test125"); }


    org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var1 = var0.getPieChart();
    org.jfree.chart.plot.dial.DialValueIndicator var2 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var3 = var2.getInsets();
    java.awt.Stroke var4 = var2.getOutlineStroke();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var5.setNextFocusableComponent((java.awt.Component)var7);
    java.util.Locale var9 = var7.getLocale();
    javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var11 = var10.getPreferredSize();
    java.awt.Dimension var12 = var7.getSize(var11);
    java.awt.event.ContainerListener[] var13 = var7.getContainerListeners();
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var15 = var14.getPreferredSize();
    java.awt.image.ColorModel var16 = var14.getColorModel();
    var14.updateUI();
    java.lang.String var18 = var14.toString();
    java.awt.Color var19 = var14.getForeground();
    var7.setBackground(var19);
    var2.setOutlinePaint((java.awt.Paint)var19);
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var2.setOutlinePaint((java.awt.Paint)var36);
    var1.setBorderPaint((java.awt.Paint)var36);
    org.jfree.chart.plot.CategoryPlot var40 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var42 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var43 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var42);
    org.jfree.data.time.TimePeriodValue var45 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var42, (java.lang.Number)10);
    var40.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var47 = var40.getDrawSharedDomainAxis();
    boolean var48 = var40.getDrawSharedDomainAxis();
    var40.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var51 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var40.addChangeListener((org.jfree.chart.event.PlotChangeListener)var51);
    org.jfree.chart.event.PlotChangeEvent var53 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var51);
    org.jfree.chart.plot.Plot var54 = var53.getPlot();
    var1.plotChanged(var53);
    org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var57 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((java.lang.Comparable)(short)10);
    boolean var58 = var1.equals((java.lang.Object)var57);
    java.awt.Paint var59 = var1.getBorderPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var18.equals("org.jfree.chart.ChartPanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test126"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    java.awt.image.ColorModel var2 = var0.getColorModel();
    var0.updateUI();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.getInheritsPopupMenu();
    double[] var8 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var9 = new org.jfree.chart.annotations.XYPolygonAnnotation(var8);
    java.lang.Object var10 = var9.clone();
    org.jfree.chart.event.AnnotationChangeEvent var11 = new org.jfree.chart.event.AnnotationChangeEvent((java.lang.Object)var0, (org.jfree.chart.annotations.Annotation)var9);
    java.awt.im.InputContext var12 = var0.getInputContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var4.equals("org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test127"); }


    java.text.NumberFormat var3 = java.text.NumberFormat.getPercentInstance();
    int var4 = var3.getMinimumFractionDigits();
    org.jfree.chart.util.RelativeDateFormat var5 = new org.jfree.chart.util.RelativeDateFormat();
    boolean var6 = var5.getShowZeroHours();
    java.text.NumberFormat var7 = var5.getNumberFormat();
    java.text.NumberFormat var8 = var5.getNumberFormat();
    org.jfree.chart.labels.StandardXYToolTipGenerator var9 = new org.jfree.chart.labels.StandardXYToolTipGenerator("CategoryLabelWidthType.RANGE", var3, var8);
    org.jfree.chart.renderer.xy.CandlestickRenderer var10 = new org.jfree.chart.renderer.xy.CandlestickRenderer(12.0d, true, (org.jfree.chart.labels.XYToolTipGenerator)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test128"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var0 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeRow(8);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test129"); }


    org.jfree.chart.renderer.category.LevelRenderer var0 = new org.jfree.chart.renderer.category.LevelRenderer();
    double var1 = var0.getItemMargin();
    org.jfree.chart.StrokeMap var2 = new org.jfree.chart.StrokeMap();
    java.lang.Object var3 = var2.clone();
    boolean var4 = var0.equals((java.lang.Object)var2);
    org.jfree.chart.renderer.category.LevelRenderer var5 = new org.jfree.chart.renderer.category.LevelRenderer();
    double var6 = var5.getItemMargin();
    org.jfree.chart.StrokeMap var7 = new org.jfree.chart.StrokeMap();
    java.lang.Object var8 = var7.clone();
    boolean var9 = var5.equals((java.lang.Object)var7);
    var5.setItemLabelAnchorOffset(4.0d);
    org.jfree.data.KeyedObjects2D var13 = new org.jfree.data.KeyedObjects2D();
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var15 = var14.getPreferredSize();
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var14.setNextFocusableComponent((java.awt.Component)var16);
    java.util.Locale var18 = var16.getLocale();
    org.jfree.chart.axis.TickUnitSource var19 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var18);
    java.text.NumberFormat var20 = java.text.NumberFormat.getPercentInstance(var18);
    org.jfree.data.time.Year var22 = new org.jfree.data.time.Year();
    var13.addObject((java.lang.Object)var20, (java.lang.Comparable)0.04d, (java.lang.Comparable)var22);
    double[] var26 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var27 = new org.jfree.chart.annotations.XYPolygonAnnotation(var26);
    double[] var30 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var31 = new org.jfree.chart.annotations.XYPolygonAnnotation(var30);
    org.jfree.chart.ClipPath var32 = new org.jfree.chart.ClipPath(var26, var30);
    double[][] var33 = new double[][] { var26};
    double[] var38 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var39 = new org.jfree.chart.annotations.XYPolygonAnnotation(var38);
    double[] var42 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var43 = new org.jfree.chart.annotations.XYPolygonAnnotation(var42);
    org.jfree.chart.ClipPath var44 = new org.jfree.chart.ClipPath(var38, var42);
    double[][] var45 = new double[][] { var38};
    org.jfree.data.category.CategoryDataset var46 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var45);
    org.jfree.data.category.DefaultIntervalCategoryDataset var47 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var33, var45);
    org.jfree.chart.axis.SubCategoryAxis var49 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    var49.configure();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var51 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var53 = var51.getSeriesLinesVisible(10);
    javax.swing.JPanel var55 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var56 = var55.getPreferredSize();
    boolean var57 = var55.getIgnoreRepaint();
    boolean var58 = var55.isLightweight();
    javax.swing.JPanel var59 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var60 = var59.getPreferredSize();
    javax.swing.JPanel var61 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var59.setNextFocusableComponent((java.awt.Component)var61);
    var59.show();
    javax.swing.JPanel var64 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var65 = var64.getLocation();
    java.awt.Dimension var66 = var64.preferredSize();
    java.awt.Rectangle var67 = var64.bounds();
    var59.scrollRectToVisible(var67);
    var55.setBounds(var67);
    var51.setSeriesShape(15, (java.awt.Shape)var67);
    org.jfree.chart.axis.AxisState var71 = new org.jfree.chart.axis.AxisState();
    org.jfree.chart.title.TextTitle var74 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var75 = var74.isVisible();
    java.lang.Object var76 = var74.clone();
    org.jfree.ui.RectangleEdge var77 = var74.getPosition();
    var71.moveCursor(4.0d, var77);
    double var79 = var5.getItemMiddle((java.lang.Comparable)1201L, (java.lang.Comparable)0.04d, (org.jfree.data.category.CategoryDataset)var47, (org.jfree.chart.axis.CategoryAxis)var49, (java.awt.geom.Rectangle2D)var67, var77);
    org.jfree.chart.labels.StandardCategorySeriesLabelGenerator var81 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator("org.jfree.chart.renderer.NotOutlierException: hi!");
    var5.setLegendItemURLGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator)var81);
    var0.setLegendItemToolTipGenerator((org.jfree.chart.labels.CategorySeriesLabelGenerator)var81);
    
    // Checks the contract:  equals-hashcode on var2 and var7
    assertTrue("Contract failed: equals-hashcode on var2 and var7", var2.equals(var7) ? var2.hashCode() == var7.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var7 and var2
    assertTrue("Contract failed: equals-hashcode on var7 and var2", var7.equals(var2) ? var7.hashCode() == var2.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var3 and var8
    assertTrue("Contract failed: equals-hashcode on var3 and var8", var3.equals(var8) ? var3.hashCode() == var8.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var8 and var3
    assertTrue("Contract failed: equals-hashcode on var8 and var3", var8.equals(var3) ? var8.hashCode() == var3.hashCode() : true);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test130"); }


    org.jfree.chart.renderer.category.LevelRenderer var0 = new org.jfree.chart.renderer.category.LevelRenderer();
    var0.setMaximumItemWidth(0.05d);
    double var3 = var0.getItemMargin();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.2d);

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test131"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var1 = var0.isDomainZoomable();
    org.jfree.chart.plot.PlotOrientation var2 = var0.getOrientation();
    java.lang.String var3 = var2.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + "PlotOrientation.VERTICAL"+ "'", var3.equals("PlotOrientation.VERTICAL"));

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test132"); }


    org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
    var1.setLinesVisible(true);
    boolean var4 = var1.getAutoPopulateSeriesShape();
    var1.setSeriesShapesVisible(8, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test133"); }


    org.jfree.chart.axis.SubCategoryAxis var1 = new org.jfree.chart.axis.SubCategoryAxis("Combined Range XYPlot");
    double var2 = var1.getUpperMargin();
    org.jfree.data.time.Week var3 = new org.jfree.data.time.Week();
    org.jfree.chart.axis.CyclicNumberAxis var6 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var7 = var6.getTickLabelPaint();
    var6.setVisible(false);
    java.lang.Object var10 = var6.clone();
    org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    org.jfree.chart.annotations.XYPointerAnnotation var16 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var17 = var16.getLabelOffset();
    org.jfree.ui.TextAnchor var18 = var16.getRotationAnchor();
    boolean var19 = var11.removeAnnotation((org.jfree.chart.annotations.XYAnnotation)var16);
    org.jfree.chart.StandardChartTheme var22 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var23 = var22.getLegendItemPaint();
    java.awt.Paint var24 = var22.getSubtitlePaint();
    java.awt.Font var25 = var22.getLargeFont();
    var16.setFont(var25);
    var6.setLabelFont(var25);
    var1.setTickLabelFont((java.lang.Comparable)var3, var25);
    org.jfree.chart.renderer.xy.XYStepRenderer var29 = new org.jfree.chart.renderer.xy.XYStepRenderer();
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var31 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var32 = var31.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var33 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var34 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var31, (org.jfree.chart.urls.XYURLGenerator)var33);
    boolean var35 = var29.equals((java.lang.Object)var34);
    int var36 = var3.compareTo((java.lang.Object)var34);
    long var37 = var3.getSerialIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 106726L);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test134"); }


    org.jfree.data.general.DefaultHeatMapDataset var6 = new org.jfree.data.general.DefaultHeatMapDataset(8, 20, 0.5d, 0.75d, 10.0d, (-0.21460183660255172d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var6.setZValue(750, (-655360), 1.5d);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test135"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    boolean var8 = var0.getDrawSharedDomainAxis();
    java.lang.Object var9 = var0.clone();
    org.jfree.chart.util.DefaultShadowGenerator var10 = new org.jfree.chart.util.DefaultShadowGenerator();
    double var11 = var10.getAngle();
    var0.setShadowGenerator((org.jfree.chart.util.ShadowGenerator)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-0.7853981633974483d));

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test136"); }


    org.jfree.chart.renderer.WaferMapRenderer var2 = new org.jfree.chart.renderer.WaferMapRenderer(19, (-1));

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test137"); }


    org.jfree.chart.axis.CyclicNumberAxis var2 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var3 = var2.isAxisLineVisible();
    var2.setAdvanceLineVisible(false);
    var2.centerRange(3.0d);
    boolean var8 = var2.isNegativeArrowVisible();
    var2.setOffset(12.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test138"); }


    org.jfree.chart.title.TextTitle var1 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var2 = var1.isVisible();
    java.lang.Object var3 = var1.clone();
    var1.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
    var1.setToolTipText("");
    org.jfree.chart.needle.PinNeedle var11 = new org.jfree.chart.needle.PinNeedle();
    org.jfree.chart.plot.CategoryPlot var12 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var14 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var15 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var14);
    org.jfree.data.time.TimePeriodValue var17 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var14, (java.lang.Number)10);
    var12.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var19 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var21 = var19.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var24 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var25 = var24.getTickLabelPaint();
    var19.setFillPaint(var25, true);
    var12.setDomainCrosshairPaint(var25);
    var11.setOutlinePaint(var25);
    org.jfree.chart.event.RendererChangeEvent var30 = new org.jfree.chart.event.RendererChangeEvent((java.lang.Object)var11);
    java.lang.String[] var33 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var34 = new org.jfree.chart.axis.SymbolAxis("hi!", var33);
    org.jfree.chart.plot.CompassPlot var35 = new org.jfree.chart.plot.CompassPlot();
    boolean var36 = var34.equals((java.lang.Object)var35);
    java.lang.String var37 = var35.getPlotType();
    java.awt.Paint var38 = var35.getRoseCenterPaint();
    java.awt.Paint var39 = var35.getBackgroundPaint();
    javax.swing.JPanel var40 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var41 = var40.getPreferredSize();
    java.awt.image.ColorModel var42 = var40.getColorModel();
    var40.updateUI();
    java.lang.String var44 = var40.toString();
    boolean var45 = var40.getInheritsPopupMenu();
    javax.swing.InputMap var46 = var40.getInputMap();
    var40.nextFocus();
    boolean var48 = var40.getInheritsPopupMenu();
    javax.swing.JPanel var49 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var50 = var49.getPreferredSize();
    java.awt.image.ColorModel var51 = var49.getColorModel();
    var49.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var56 = var49.getForeground();
    var40.setForeground(var56);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var59 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var39, (java.awt.Paint)var56, true);
    var11.setFillPaint((java.awt.Paint)var56);
    var1.setBackgroundPaint((java.awt.Paint)var56);
    java.lang.String var62 = var56.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Compass Plot"+ "'", var37.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var44.equals("org.jfree.chart.ChartPanel[,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var62 + "' != '" + "sun.swing.PrintColorUIResource[r=51,g=51,b=51]"+ "'", var62.equals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]"));

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test139"); }


    org.jfree.chart.plot.Crosshair var1 = new org.jfree.chart.plot.Crosshair(0.05d);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test140"); }


    org.jfree.data.time.Minute var0 = new org.jfree.data.time.Minute();
    int var1 = var0.getMinute();
    org.jfree.data.time.Hour var2 = var0.getHour();
    org.jfree.data.time.Day var3 = var2.getDay();
    int var4 = var3.getYear();
    int var5 = var3.getDayOfMonth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 11);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test141"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var2 = var0.findDomainBounds((org.jfree.data.xy.XYDataset)var1);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.labels.ItemLabelPosition var10 = var5.getNegativeItemLabelPosition(0, 0);
    double var11 = var10.getAngle();
    var0.setNegativeItemLabelPosition(var10);
    org.jfree.chart.labels.XYSeriesLabelGenerator var13 = var0.getLegendItemToolTipGenerator();
    org.jfree.chart.title.LegendTitle var14 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var0);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var16 = var15.getDomainCrosshairColumnKey();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var17.setUseSeriesOffset(true);
    var17.setBaseSeriesVisible(true);
    var17.setAutoPopulateSeriesShape(false);
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var24 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var17};
    var15.setRenderers(var24);
    var14.setSources((org.jfree.chart.LegendItemSource[])var24);
    org.jfree.ui.RectangleAnchor var27 = var14.getLegendItemGraphicLocation();
    var14.setID("[size=0x00000000]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test142"); }


    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var0.setUseSeriesOffset(true);
    int var3 = var0.getPassCount();
    org.jfree.data.xy.XYSeries var6 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    java.lang.Object var7 = var6.clone();
    int var8 = var6.getMaximumItemCount();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var10 = var9.getPreferredSize();
    boolean var11 = var9.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var13 = new org.jfree.chart.plot.ContourPlot();
    var13.setOutlineVisible(false);
    var9.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var13);
    org.jfree.chart.urls.XYURLGenerator var17 = var13.getURLGenerator();
    var6.removePropertyChangeListener((java.beans.PropertyChangeListener)var13);
    float var19 = var13.getForegroundAlpha();
    double var20 = var13.getRangeCrosshairValue();
    java.lang.String[] var23 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var24 = new org.jfree.chart.axis.SymbolAxis("hi!", var23);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var25 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var27 = var25.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var30 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var31 = var30.getTickLabelPaint();
    var25.setFillPaint(var31, true);
    var24.setGridBandAlternatePaint(var31);
    boolean var35 = var13.isCompatibleDomainAxis((org.jfree.chart.axis.ValueAxis)var24);
    org.jfree.chart.plot.CompassPlot var36 = new org.jfree.chart.plot.CompassPlot();
    var36.setDrawBorder(true);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var39 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var40 = var39.getBaseItemLabelsVisible();
    var39.setSeriesShapesFilled(1, (java.lang.Boolean)false);
    var39.setDrawOutlines(true);
    org.jfree.chart.renderer.category.BarRenderer3D var48 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var49 = var48.getItemLabelFont();
    double var50 = var48.getItemLabelAnchorOffset();
    java.awt.Shape var52 = var48.getSeriesShape(1);
    org.jfree.chart.renderer.category.BarRenderer3D var56 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var57 = var56.getItemLabelFont();
    double var58 = var56.getItemLabelAnchorOffset();
    org.jfree.chart.axis.CyclicNumberAxis var62 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var63 = var62.getTickLabelPaint();
    var56.setLegendTextPaint(0, var63);
    var48.setSeriesFillPaint(100, var63, true);
    var39.setBaseOutlinePaint(var63, false);
    var36.setRoseHighlightPaint(var63);
    var24.setGridBandAlternatePaint(var63);
    var0.setBasePaint(var63, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + false+ "'", var40.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test143"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var6 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var6.setUpperMargin(10.0d);
    var6.setAxisLineVisible(true);
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var12 = var11.getLocation();
    java.awt.Dimension var13 = var11.preferredSize();
    java.awt.Rectangle var14 = var11.bounds();
    java.awt.Point var15 = var0.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var6, (java.awt.geom.Rectangle2D)var14);
    org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var18 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((java.lang.Comparable)(short)10);
    double var19 = var18.getOutlierCoefficient();
    var0.setDataset(100, (org.jfree.data.xy.XYDataset)var18);
    java.lang.Comparable var22 = var18.getSeriesKey(100);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Date var25 = var18.getXDate(2, 1024);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1.5d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + (short)10+ "'", var22.equals((short)10));

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test144"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var1 = var0.getDomainCrosshairColumnKey();
    var0.setCrosshairDatasetIndex(100);
    org.jfree.chart.plot.CombinedRangeXYPlot var4 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var5 = var4.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var7 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var8 = var7.getMargin();
    var4.setAxisOffset(var8);
    var0.setAxisOffset(var8);
    org.jfree.chart.plot.CategoryMarker var12 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var13 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var15 = var13.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var18 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var19 = var18.getTickLabelPaint();
    var13.setFillPaint(var19, true);
    var12.setLabelPaint(var19);
    org.jfree.chart.plot.CompassPlot var23 = new org.jfree.chart.plot.CompassPlot();
    var12.addChangeListener((org.jfree.chart.event.MarkerChangeListener)var23);
    boolean var25 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var12);
    var12.setKey((java.lang.Comparable)"RectangleConstraint[LengthConstraintType.FIXED: width=0.04, height=0.0]");
    org.jfree.chart.plot.ThermometerPlot var28 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var29 = var28.isDomainZoomable();
    int var30 = var28.getColumnRadius();
    org.jfree.chart.plot.PiePlot3D var31 = new org.jfree.chart.plot.PiePlot3D();
    boolean var32 = var31.getSectionOutlinesVisible();
    org.jfree.chart.plot.CombinedRangeXYPlot var33 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var34 = var33.getRangeZeroBaselineStroke();
    java.lang.String var35 = var33.getPlotType();
    org.jfree.chart.plot.CategoryMarker var37 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var38 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var40 = var38.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var43 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var44 = var43.getTickLabelPaint();
    var38.setFillPaint(var44, true);
    var37.setLabelPaint(var44);
    boolean var48 = var33.removeRangeMarker((org.jfree.chart.plot.Marker)var37);
    javax.swing.JPanel var49 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var50 = var49.getPreferredSize();
    java.awt.image.ColorModel var51 = var49.getColorModel();
    var49.updateUI();
    java.lang.String var53 = var49.toString();
    boolean var54 = var49.getInheritsPopupMenu();
    double[] var57 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var58 = new org.jfree.chart.annotations.XYPolygonAnnotation(var57);
    java.lang.Object var59 = var58.clone();
    org.jfree.chart.event.AnnotationChangeEvent var60 = new org.jfree.chart.event.AnnotationChangeEvent((java.lang.Object)var49, (org.jfree.chart.annotations.Annotation)var58);
    var33.annotationChanged(var60);
    org.jfree.ui.RectangleInsets var62 = var33.getAxisOffset();
    var31.setSimpleLabelOffset(var62);
    var28.setPadding(var62);
    var12.setLabelOffset(var62);
    
    // Checks the contract:  equals-hashcode on var4 and var33
    assertTrue("Contract failed: equals-hashcode on var4 and var33", var4.equals(var33) ? var4.hashCode() == var33.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var33 and var4
    assertTrue("Contract failed: equals-hashcode on var33 and var4", var33.equals(var4) ? var33.hashCode() == var4.hashCode() : true);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test145"); }


    org.jfree.chart.block.GridArrangement var2 = new org.jfree.chart.block.GridArrangement(2147483647, 100);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    java.awt.Shape var9 = var5.getSeriesShape(1);
    org.jfree.chart.renderer.category.BarRenderer3D var13 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var14 = var13.getItemLabelFont();
    double var15 = var13.getItemLabelAnchorOffset();
    org.jfree.chart.axis.CyclicNumberAxis var19 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var20 = var19.getTickLabelPaint();
    var13.setLegendTextPaint(0, var20);
    var5.setSeriesFillPaint(100, var20, true);
    org.jfree.chart.block.GridArrangement var26 = new org.jfree.chart.block.GridArrangement(2147483647, 100);
    org.jfree.chart.block.CenterArrangement var27 = new org.jfree.chart.block.CenterArrangement();
    var27.clear();
    org.jfree.chart.title.LegendTitle var29 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var5, (org.jfree.chart.block.Arrangement)var26, (org.jfree.chart.block.Arrangement)var27);
    org.jfree.chart.axis.AxisState var30 = new org.jfree.chart.axis.AxisState();
    org.jfree.chart.title.TextTitle var33 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var34 = var33.isVisible();
    java.lang.Object var35 = var33.clone();
    org.jfree.ui.RectangleEdge var36 = var33.getPosition();
    var30.moveCursor(4.0d, var36);
    var29.setPosition(var36);
    var2.add((org.jfree.chart.block.Block)var29, (java.lang.Object)2.0d);
    
    // Checks the contract:  equals-hashcode on var2 and var26
    assertTrue("Contract failed: equals-hashcode on var2 and var26", var2.equals(var26) ? var2.hashCode() == var26.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var26 and var2
    assertTrue("Contract failed: equals-hashcode on var26 and var2", var26.equals(var2) ? var26.hashCode() == var2.hashCode() : true);

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test146"); }


    org.jfree.data.statistics.SimpleHistogramBin var2 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
    var2.setItemCount(2);
    double var5 = var2.getUpperBound();
    org.jfree.chart.StandardChartTheme var8 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    org.jfree.chart.plot.DrawingSupplier var9 = var8.getDrawingSupplier();
    org.jfree.chart.plot.dial.StandardDialScale var10 = new org.jfree.chart.plot.dial.StandardDialScale();
    var10.setMajorTickIncrement(10.0d);
    java.awt.Paint var13 = var10.getMinorTickPaint();
    var8.setTickLabelPaint(var13);
    boolean var15 = var2.equals((java.lang.Object)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test147"); }


    org.jfree.chart.util.LogFormat var4 = new org.jfree.chart.util.LogFormat(0.0d, "hi!", true);
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var5.setNextFocusableComponent((java.awt.Component)var7);
    java.util.Locale var9 = var7.getLocale();
    org.jfree.chart.axis.TickUnitSource var10 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var9);
    java.text.NumberFormat var11 = java.text.NumberFormat.getPercentInstance(var9);
    org.jfree.chart.labels.StandardXYItemLabelGenerator var12 = new org.jfree.chart.labels.StandardXYItemLabelGenerator("d", (java.text.NumberFormat)var4, var11);
    java.lang.Object var13 = var12.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test148"); }


    org.jfree.data.xy.YIntervalSeriesCollection var0 = new org.jfree.data.xy.YIntervalSeriesCollection();
    int var1 = var0.getSeriesCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var4 = var0.getStartY(252, 255);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test149"); }


    org.jfree.chart.title.ShortTextTitle var1 = new org.jfree.chart.title.ShortTextTitle("s");

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test150"); }


    org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
    org.jfree.data.time.RegularTimePeriod var1 = var0.previous();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test151"); }


    org.jfree.chart.plot.dial.DialValueIndicator var6 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var7 = var6.getInsets();
    java.awt.Stroke var8 = var6.getOutlineStroke();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var10 = var9.getPreferredSize();
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var9.setNextFocusableComponent((java.awt.Component)var11);
    java.util.Locale var13 = var11.getLocale();
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var15 = var14.getPreferredSize();
    java.awt.Dimension var16 = var11.getSize(var15);
    java.awt.event.ContainerListener[] var17 = var11.getContainerListeners();
    javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var19 = var18.getPreferredSize();
    java.awt.image.ColorModel var20 = var18.getColorModel();
    var18.updateUI();
    java.lang.String var22 = var18.toString();
    java.awt.Color var23 = var18.getForeground();
    var11.setBackground(var23);
    var6.setOutlinePaint((java.awt.Paint)var23);
    java.awt.Color var26 = var23.brighter();
    float[] var30 = new float[] { 10.0f, 100.0f, 1.0f};
    float[] var31 = var23.getRGBColorComponents(var30);
    float[] var32 = java.awt.Color.RGBtoHSB(20, 2147483647, 80, var30);
    float[] var33 = java.awt.Color.RGBtoHSB(1043495433, (-2), 1043495433, var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var22,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var22.equals("org.jfree.chart.ChartPanel[,0,0,0var22,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test152"); }


    org.jfree.chart.annotations.XYPointerAnnotation var4 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var5 = var4.getLabelOffset();
    org.jfree.ui.TextAnchor var6 = var4.getRotationAnchor();
    double var7 = var4.getY();
    var4.setOutlineVisible(false);
    java.lang.Object var10 = var4.clone();
    var4.setToolTipText("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");
    var4.setY(3.0d);
    java.lang.Object var15 = var4.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test153"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    org.jfree.chart.plot.dial.DialValueIndicator var19 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var20 = var19.getInsets();
    java.awt.Stroke var21 = var19.getOutlineStroke();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var19.setOutlinePaint((java.awt.Paint)var36);
    java.awt.Color var39 = var36.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    double var45 = var42.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var46 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var47 = var46.getRangeZeroBaselineStroke();
    var42.setStroke(var47, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var50 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var51 = var50.isOutline();
    var50.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var56 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var57 = var56.getLegendItemPaint();
    var50.setShapePaint(var57);
    org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var16, (java.awt.Paint)var39, var47, var57);
    var59.setShapeVisible(false);
    var59.setURLText("0x00000001");
    org.jfree.chart.DrawableLegendItem var64 = new org.jfree.chart.DrawableLegendItem(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test154"); }


    org.jfree.chart.plot.WaferMapPlot var0 = new org.jfree.chart.plot.WaferMapPlot();

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test155"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    boolean var1 = var0.getSectionOutlinesVisible();
    java.awt.Paint var2 = var0.getBaseSectionOutlinePaint();
    var0.setAutoPopulateSectionPaint(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test156"); }


    org.jfree.data.time.Year var2 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var3 = new org.jfree.data.time.Month(1, var2);
    java.util.Locale var4 = javax.swing.JComponent.getDefaultLocale();
    org.jfree.chart.axis.MonthDateFormat var6 = new org.jfree.chart.axis.MonthDateFormat(var4, 2147483647);
    java.util.Calendar var7 = var6.getCalendar();
    var3.peg(var7);
    org.jfree.data.time.Year var13 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var14 = new org.jfree.data.time.Month(1, var13);
    org.jfree.data.time.Month var15 = new org.jfree.data.time.Month(2, var13);
    org.jfree.chart.StandardChartTheme var19 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var20 = var19.getLegendItemPaint();
    java.awt.Paint var21 = var19.getSubtitlePaint();
    java.awt.Paint var22 = var19.getTickLabelPaint();
    org.jfree.chart.StandardChartTheme var25 = new org.jfree.chart.StandardChartTheme("hi!", true);
    java.awt.Paint var26 = var25.getGridBandPaint();
    var19.setLabelLinkPaint(var26);
    org.jfree.chart.plot.dial.StandardDialFrame var28 = new org.jfree.chart.plot.dial.StandardDialFrame();
    boolean var29 = var28.isClippedToWindow();
    java.awt.Paint var30 = var28.getBackgroundPaint();
    org.jfree.chart.plot.CombinedRangeXYPlot var31 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var32 = var31.getRangeZeroBaselineStroke();
    java.lang.String var33 = var31.getPlotType();
    boolean var34 = var31.isDomainZoomable();
    org.jfree.chart.plot.CombinedRangeXYPlot var35 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var36 = var35.getRangeZeroBaselineStroke();
    var31.setDomainCrosshairStroke(var36);
    var28.setStroke(var36);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var39 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var40 = var39.getBaseItemLabelsVisible();
    var39.setSeriesShapesFilled(1, (java.lang.Boolean)false);
    var39.setDrawOutlines(true);
    org.jfree.chart.renderer.category.BarRenderer3D var48 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var49 = var48.getItemLabelFont();
    double var50 = var48.getItemLabelAnchorOffset();
    java.awt.Shape var52 = var48.getSeriesShape(1);
    org.jfree.chart.renderer.category.BarRenderer3D var56 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var57 = var56.getItemLabelFont();
    double var58 = var56.getItemLabelAnchorOffset();
    org.jfree.chart.axis.CyclicNumberAxis var62 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var63 = var62.getTickLabelPaint();
    var56.setLegendTextPaint(0, var63);
    var48.setSeriesFillPaint(100, var63, true);
    var39.setBaseOutlinePaint(var63, false);
    var28.setForegroundPaint(var63);
    var19.setGridBandAlternatePaint(var63);
    org.jfree.chart.plot.dial.StandardDialFrame var71 = new org.jfree.chart.plot.dial.StandardDialFrame();
    boolean var72 = var71.isClippedToWindow();
    java.awt.Paint var73 = var71.getBackgroundPaint();
    org.jfree.chart.plot.CombinedRangeXYPlot var74 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var75 = var74.getRangeZeroBaselineStroke();
    java.lang.String var76 = var74.getPlotType();
    boolean var77 = var74.isDomainZoomable();
    org.jfree.chart.plot.CombinedRangeXYPlot var78 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var79 = var78.getRangeZeroBaselineStroke();
    var74.setDomainCrosshairStroke(var79);
    var71.setStroke(var79);
    org.jfree.chart.annotations.CategoryLineAnnotation var82 = new org.jfree.chart.annotations.CategoryLineAnnotation((java.lang.Comparable)var3, 0.02d, (java.lang.Comparable)2, 15.0d, var63, var79);
    
    // Checks the contract:  equals-hashcode on var31 and var74
    assertTrue("Contract failed: equals-hashcode on var31 and var74", var31.equals(var74) ? var31.hashCode() == var74.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var35 and var78
    assertTrue("Contract failed: equals-hashcode on var35 and var78", var35.equals(var78) ? var35.hashCode() == var78.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var74 and var31
    assertTrue("Contract failed: equals-hashcode on var74 and var31", var74.equals(var31) ? var74.hashCode() == var31.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var78 and var35
    assertTrue("Contract failed: equals-hashcode on var78 and var35", var78.equals(var35) ? var78.hashCode() == var35.hashCode() : true);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test157"); }


    org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var4);
    org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
    var2.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var15 = var14.getTickLabelPaint();
    var9.setFillPaint(var15, true);
    var2.setDomainCrosshairPaint(var15);
    boolean var19 = var1.equals((java.lang.Object)var2);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var21 = var20.getDomainCrosshairColumnKey();
    var20.setCrosshairDatasetIndex(100);
    org.jfree.chart.plot.CombinedRangeXYPlot var24 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var25 = var24.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var27 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var28 = var27.getMargin();
    var24.setAxisOffset(var28);
    var20.setAxisOffset(var28);
    org.jfree.data.category.CategoryDataset var32 = var20.getDataset((-2));
    var20.clearRangeMarkers((-13421773));
    org.jfree.chart.plot.XYPlot var35 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.plot.DatasetRenderingOrder var36 = var35.getDatasetRenderingOrder();
    var20.setDatasetRenderingOrder(var36);
    var2.setDatasetRenderingOrder(var36);
    var2.setRangeZeroBaselineVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test158"); }


    org.jfree.chart.renderer.xy.DefaultXYItemRenderer var0 = new org.jfree.chart.renderer.xy.DefaultXYItemRenderer();
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var1 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var2 = var1.clone();
    var0.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var1);
    org.jfree.chart.labels.XYItemLabelGenerator var6 = var0.getItemLabelGenerator(1, 15);
    org.jfree.chart.renderer.category.BarRenderer var7 = new org.jfree.chart.renderer.category.BarRenderer();
    org.jfree.chart.labels.ItemLabelPosition var10 = var7.getPositiveItemLabelPosition(10, 2013);
    var0.setBasePositiveItemLabelPosition(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test159"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var7 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var9 = var7.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var12 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var13 = var12.getTickLabelPaint();
    var7.setFillPaint(var13, true);
    var0.setDomainCrosshairPaint(var13);
    org.jfree.chart.plot.CombinedRangeXYPlot var17 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var18 = var17.getRangeZeroBaselineStroke();
    java.lang.String var19 = var17.getPlotType();
    boolean var20 = var17.isDomainZoomable();
    org.jfree.chart.plot.ContourPlot var21 = new org.jfree.chart.plot.ContourPlot();
    org.jfree.chart.plot.CategoryMarker var23 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    var21.addRangeMarker((org.jfree.chart.plot.Marker)var23);
    boolean var25 = var17.removeRangeMarker((org.jfree.chart.plot.Marker)var23);
    java.lang.Comparable var26 = var23.getKey();
    boolean var27 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "Combined Range XYPlot"+ "'", var19.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + 10.0f+ "'", var26.equals(10.0f));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test160"); }


    org.jfree.data.time.TimePeriodValues var3 = new org.jfree.data.time.TimePeriodValues("Compass Plot", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");
    var3.setRangeDescription("d");
    org.jfree.data.time.Week var7 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var8 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var7);
    org.jfree.data.time.TimePeriodValue var10 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var7, (java.lang.Number)10);
    java.lang.Object var11 = var10.clone();
    org.jfree.data.time.TimePeriod var12 = var10.getPeriod();
    org.jfree.data.time.TimePeriod var13 = var10.getPeriod();
    var3.add(var10);
    org.jfree.data.time.TimePeriodValuesCollection var15 = new org.jfree.data.time.TimePeriodValuesCollection(var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var18 = var15.getEndX((-2), 10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test161"); }


    org.jfree.chart.util.LogFormat var4 = new org.jfree.chart.util.LogFormat(0.0d, "hi!", true);
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var5.setNextFocusableComponent((java.awt.Component)var7);
    java.util.Locale var9 = var7.getLocale();
    org.jfree.chart.axis.TickUnitSource var10 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var9);
    java.text.NumberFormat var11 = java.text.NumberFormat.getPercentInstance(var9);
    org.jfree.chart.labels.StandardXYItemLabelGenerator var12 = new org.jfree.chart.labels.StandardXYItemLabelGenerator("d", (java.text.NumberFormat)var4, var11);
    java.text.NumberFormat var13 = var4.getExponentFormat();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test162"); }


    org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var0);
    var1.setMaximumItemCount(0);
    boolean var4 = var1.getNotify();
    double var5 = var1.getMaxY();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.RegularTimePeriod var7 = var1.getTimePeriod(51);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == Double.NaN);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test163"); }


    org.jfree.data.xml.PieDatasetHandler var0 = new org.jfree.data.xml.PieDatasetHandler();
    org.jfree.data.xml.RootHandler var1 = new org.jfree.data.xml.RootHandler();
    var1.endElement("", "hi!", "hi!");
    char[] var6 = new char[] { };
    var1.characters(var6, (-1), (-1));
    org.jfree.data.xml.RootHandler var10 = new org.jfree.data.xml.RootHandler();
    var10.endElement("", "hi!", "hi!");
    var10.endDocument();
    org.jfree.data.xml.CategorySeriesHandler var16 = new org.jfree.data.xml.CategorySeriesHandler(var10);
    var10.endElement("Compass Plot", "Combined Range XYPlot", "Combined Range XYPlot");
    org.jfree.data.xml.ItemHandler var21 = new org.jfree.data.xml.ItemHandler(var1, (org.xml.sax.helpers.DefaultHandler)var10);
    org.jfree.data.xml.KeyHandler var22 = new org.jfree.data.xml.KeyHandler((org.jfree.data.xml.RootHandler)var0, var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var22.endElement("hi!?hi!=80&amp;hi!=100", "15,963d6h59m59.999s", "0x00000001");
      fail("Expected exception of type org.xml.sax.SAXException");
    } catch (org.xml.sax.SAXException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test164"); }


    org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
    var0.setValue((java.lang.Comparable)4.0d, (-0.7853981633974483d));
    var0.setValue((java.lang.Comparable)10.0f, (java.lang.Number)1.05d);
    org.jfree.data.general.DefaultPieDataset var7 = new org.jfree.data.general.DefaultPieDataset((org.jfree.data.KeyedValues)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var9 = var7.getKey(750);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test165"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.chart.renderer.PaintScale var1 = var0.getPaintScale();
    org.jfree.chart.renderer.PaintScale var2 = var0.getPaintScale();
    boolean var3 = var0.getDataBoundsIncludesVisibleSeriesOnly();
    org.jfree.ui.RectangleAnchor var4 = var0.getBlockAnchor();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var7 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    double var12 = var10.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var15 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var16 = var15.getItemLabelFont();
    java.awt.Shape var17 = var15.getBaseLegendShape();
    var10.setShape(var17);
    var7.setLegendBar(var17);
    var7.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var22 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var23 = var7.findDomainBounds((org.jfree.data.xy.XYDataset)var22);
    org.jfree.data.xy.XYIntervalSeriesCollection var24 = new org.jfree.data.xy.XYIntervalSeriesCollection();
    org.jfree.data.xy.XYBarDataset var26 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var24, 10.0d);
    var26.setBarWidth(2.0d);
    org.jfree.chart.axis.AxisCollection var29 = new org.jfree.chart.axis.AxisCollection();
    java.util.List var30 = var29.getAxesAtLeft();
    org.jfree.data.general.DefaultKeyedValues2DDataset var31 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var31.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var36 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var31);
    org.jfree.data.Range var38 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds((org.jfree.data.category.CategoryDataset)var31, true);
    org.jfree.data.Range var40 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds((org.jfree.data.xy.XYDataset)var26, var30, var38, true);
    org.jfree.data.Range var42 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset)var22, var30, true);
    java.lang.Number var43 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset)var22);
    org.jfree.data.Range var44 = var0.findRangeBounds((org.jfree.data.xy.XYDataset)var22);
    org.jfree.data.time.Year var47 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var48 = new org.jfree.data.time.Month(1, var47);
    org.jfree.data.time.RegularTimePeriod var49 = var48.previous();
    long var50 = var48.getSerialIndex();
    org.jfree.data.time.Year var51 = var48.getYear();
    boolean var52 = var22.equals((java.lang.Object)var48);
    org.jfree.data.Range var54 = var22.getDomainBounds(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + Double.NaN+ "'", var43.equals(Double.NaN));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test166"); }


    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var1 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var2 = var1.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var3 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var4 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var1, (org.jfree.chart.urls.XYURLGenerator)var3);
    var4.setShapesFilled(true);
    var4.setSeriesVisibleInLegend(8, (java.lang.Boolean)false);
    java.awt.Paint var10 = var4.getBaseLegendTextPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test167"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setNextFocusableComponent((java.awt.Component)var2);
    javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var5 = var4.getLocation();
    java.awt.Dimension var6 = var4.preferredSize();
    var0.setSize(var6);
    javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var9 = var8.getPreferredSize();
    java.awt.image.ColorModel var10 = var8.getColorModel();
    var8.firePropertyChange("", 0.0f, 0.0f);
    javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var16 = var15.getLocation();
    java.awt.Point var17 = var8.getLocation(var16);
    var0.add((java.awt.Component)var8, (java.lang.Object)(-1.0d), 0);
    boolean var21 = var8.isDoubleBuffered();
    org.jfree.chart.StandardChartTheme var23 = new org.jfree.chart.StandardChartTheme("Compass Plot");
    java.awt.Paint var24 = var23.getTitlePaint();
    java.awt.Paint var25 = var23.getChartBackgroundPaint();
    java.awt.Font var26 = var23.getLargeFont();
    java.awt.FontMetrics var27 = var8.getFontMetrics(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test168"); }


    org.jfree.chart.StandardChartTheme var2 = new org.jfree.chart.StandardChartTheme("hi!?category=10&amp;pieIndex=2013", true);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test169"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    java.awt.Shape var12 = var10.getBaseLegendShape();
    var5.setShape(var12);
    var2.setLegendBar(var12);
    org.jfree.data.general.DefaultKeyedValues2DDataset var17 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var20 = new org.jfree.chart.entity.CategoryItemEntity(var12, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var17, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    var20.setCategoryIndex(0);
    var20.setCategoryIndex(15);
    java.lang.String var25 = var20.getToolTipText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + "hi!"+ "'", var25.equals("hi!"));

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test170"); }


    org.jfree.chart.StandardChartTheme var1 = new org.jfree.chart.StandardChartTheme("Compass Plot");
    java.awt.Paint var2 = var1.getTitlePaint();
    java.awt.Paint var3 = var1.getItemLabelPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test171"); }


    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var0 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    java.awt.Paint var1 = var0.getShapePaint();
    java.awt.Font var2 = var0.getItemLabelFont();
    org.jfree.chart.labels.XYToolTipGenerator var4 = var0.getSeriesToolTipGenerator(11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test172"); }


    org.jfree.chart.plot.dial.DialValueIndicator var0 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var1 = var0.getInsets();
    var0.setAngle((-1.0d));
    org.jfree.chart.renderer.category.BarRenderer3D var8 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var9 = var8.getItemLabelFont();
    double var10 = var8.getItemLabelAnchorOffset();
    org.jfree.chart.labels.ItemLabelPosition var13 = var8.getNegativeItemLabelPosition(0, 0);
    double var14 = var13.getAngle();
    org.jfree.ui.TextAnchor var15 = var13.getTextAnchor();
    org.jfree.chart.plot.dial.DialValueIndicator var16 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var17 = var16.getInsets();
    java.awt.Stroke var18 = var16.getOutlineStroke();
    javax.swing.JPanel var19 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var20 = var19.getPreferredSize();
    javax.swing.JPanel var21 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var19.setNextFocusableComponent((java.awt.Component)var21);
    java.util.Locale var23 = var21.getLocale();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var21.getSize(var25);
    java.awt.event.ContainerListener[] var27 = var21.getContainerListeners();
    javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.image.ColorModel var30 = var28.getColorModel();
    var28.updateUI();
    java.lang.String var32 = var28.toString();
    java.awt.Color var33 = var28.getForeground();
    var21.setBackground(var33);
    var16.setOutlinePaint((java.awt.Paint)var33);
    boolean var36 = var16.isClippedToWindow();
    org.jfree.ui.TextAnchor var37 = var16.getTextAnchor();
    org.jfree.chart.axis.NumberTick var39 = new org.jfree.chart.axis.NumberTick((java.lang.Number)(short)0, "jfreechart-onetime-", var15, var37, 1.0d);
    var0.setTextAnchor(var37);
    org.jfree.chart.title.TextTitle var42 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var43 = var42.getNotify();
    org.jfree.ui.RectangleInsets var44 = var42.getMargin();
    var0.setInsets(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var32,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var32.equals("org.jfree.chart.ChartPanel[,0,0,0var32,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test173"); }


    org.jfree.chart.title.TextTitle var1 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var2 = var1.isVisible();
    java.lang.Object var3 = var1.clone();
    java.lang.String var4 = var1.getURLText();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    java.awt.image.ColorModel var7 = var5.getColorModel();
    var5.updateUI();
    java.lang.String var9 = var5.toString();
    java.awt.Color var10 = var5.getForeground();
    var1.setBackgroundPaint((java.awt.Paint)var10);
    org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var14 = var13.isVisible();
    java.lang.Object var15 = var13.clone();
    java.lang.String var16 = var13.getURLText();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.image.ColorModel var19 = var17.getColorModel();
    var17.updateUI();
    java.lang.String var21 = var17.toString();
    java.awt.Color var22 = var17.getForeground();
    var13.setBackgroundPaint((java.awt.Paint)var22);
    int var24 = var22.getRGB();
    int var25 = var22.getBlue();
    org.jfree.chart.plot.dial.DialValueIndicator var29 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var30 = var29.getInsets();
    java.awt.Stroke var31 = var29.getOutlineStroke();
    javax.swing.JPanel var32 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var33 = var32.getPreferredSize();
    javax.swing.JPanel var34 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var32.setNextFocusableComponent((java.awt.Component)var34);
    java.util.Locale var36 = var34.getLocale();
    javax.swing.JPanel var37 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var38 = var37.getPreferredSize();
    java.awt.Dimension var39 = var34.getSize(var38);
    java.awt.event.ContainerListener[] var40 = var34.getContainerListeners();
    javax.swing.JPanel var41 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var42 = var41.getPreferredSize();
    java.awt.image.ColorModel var43 = var41.getColorModel();
    var41.updateUI();
    java.lang.String var45 = var41.toString();
    java.awt.Color var46 = var41.getForeground();
    var34.setBackground(var46);
    var29.setOutlinePaint((java.awt.Paint)var46);
    java.awt.Color var49 = var46.brighter();
    float[] var53 = new float[] { 10.0f, 100.0f, 1.0f};
    float[] var54 = var46.getRGBColorComponents(var53);
    float[] var55 = java.awt.Color.RGBtoHSB(20, 2147483647, 80, var53);
    float[] var56 = var22.getRGBColorComponents(var53);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float[] var57 = var10.getComponents(var56);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var9.equals("org.jfree.chart.ChartPanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var45,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var45.equals("org.jfree.chart.ChartPanel[,0,0,0var45,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test174"); }


    org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var1 = var0.getPieChart();
    org.jfree.chart.plot.dial.DialValueIndicator var2 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var3 = var2.getInsets();
    java.awt.Stroke var4 = var2.getOutlineStroke();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var5.setNextFocusableComponent((java.awt.Component)var7);
    java.util.Locale var9 = var7.getLocale();
    javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var11 = var10.getPreferredSize();
    java.awt.Dimension var12 = var7.getSize(var11);
    java.awt.event.ContainerListener[] var13 = var7.getContainerListeners();
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var15 = var14.getPreferredSize();
    java.awt.image.ColorModel var16 = var14.getColorModel();
    var14.updateUI();
    java.lang.String var18 = var14.toString();
    java.awt.Color var19 = var14.getForeground();
    var7.setBackground(var19);
    var2.setOutlinePaint((java.awt.Paint)var19);
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var2.setOutlinePaint((java.awt.Paint)var36);
    var1.setBorderPaint((java.awt.Paint)var36);
    var1.setTitle("-4,-4,4,4");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.PolarChartPanel var42 = new org.jfree.chart.PolarChartPanel(var1);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var18.equals("org.jfree.chart.ChartPanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test175"); }


    org.jfree.data.statistics.SimpleHistogramBin var2 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
    var2.setItemCount(2);
    double var5 = var2.getUpperBound();
    int var6 = var2.getItemCount();
    int var7 = var2.getItemCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test176"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    org.jfree.chart.axis.AxisLocation var16 = var0.getDomainAxisLocation();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var19 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var22 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var23 = var22.getItemLabelFont();
    double var24 = var22.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var27 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var28 = var27.getItemLabelFont();
    java.awt.Shape var29 = var27.getBaseLegendShape();
    var22.setShape(var29);
    var19.setLegendBar(var29);
    var19.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var34 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var35 = var19.findDomainBounds((org.jfree.data.xy.XYDataset)var34);
    int var36 = var0.getIndexOf((org.jfree.chart.renderer.xy.XYItemRenderer)var19);
    var0.setRangeCrosshairVisible(false);
    org.jfree.chart.renderer.xy.StackedXYBarRenderer var39 = new org.jfree.chart.renderer.xy.StackedXYBarRenderer();
    javax.swing.JPanel var40 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var41 = var40.getPreferredSize();
    java.awt.image.ColorModel var42 = var40.getColorModel();
    var40.updateUI();
    java.lang.String var44 = var40.toString();
    var40.setFocusable(true);
    boolean var47 = var39.equals((java.lang.Object)var40);
    java.awt.Paint var49 = var39.lookupSeriesOutlinePaint((-1));
    var0.setDomainCrosshairPaint(var49);
    var0.setDomainPannable(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var44.equals("org.jfree.chart.ChartPanel[,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test177"); }


    org.jfree.data.xy.VectorDataItem var4 = new org.jfree.data.xy.VectorDataItem((-1.0d), 10.0d, 2.0d, (-1.0d));
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var7 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    java.awt.Shape var8 = var7.getLegendBar();
    boolean var9 = var4.equals((java.lang.Object)var8);
    org.jfree.chart.entity.ChartEntity var10 = new org.jfree.chart.entity.ChartEntity(var8);
    var10.setToolTipText("sun.swing.PrintColorUIResource[r=51,g=51,b=51]");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test178"); }


    org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.data.category.CategoryDataset var1 = var0.getDataset();
    org.jfree.data.category.CategoryDataset var2 = var0.getDataset();
    java.lang.Object var3 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test179"); }


    org.jfree.data.time.ohlc.OHLC var4 = new org.jfree.data.time.ohlc.OHLC(100.0d, 4.0d, 0.5d, 4.0d);
    double var5 = var4.getOpen();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 100.0d);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test180"); }


    org.jfree.chart.util.HexNumberFormat var3 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var5 = var4.getPreferredSize();
    javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var4.setNextFocusableComponent((java.awt.Component)var6);
    java.util.Locale var8 = var6.getLocale();
    org.jfree.chart.axis.MonthDateFormat var9 = new org.jfree.chart.axis.MonthDateFormat(var8);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var10 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var3, (java.text.DateFormat)var9);
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var12 = var11.getPreferredSize();
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var11.setNextFocusableComponent((java.awt.Component)var13);
    java.util.Locale var15 = var13.getLocale();
    org.jfree.chart.axis.MonthDateFormat var16 = new org.jfree.chart.axis.MonthDateFormat(var15);
    org.jfree.chart.labels.StandardXYToolTipGenerator var17 = new org.jfree.chart.labels.StandardXYToolTipGenerator("Combined Range XYPlot", (java.text.DateFormat)var9, (java.text.DateFormat)var16);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var18 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer(10, (org.jfree.chart.labels.XYToolTipGenerator)var17);
    var18.setGapThreshold(2.0d);
    var18.setShapesFilled((java.lang.Boolean)true);
    var18.setShapesFilled((java.lang.Boolean)false);
    var18.setShapesFilled((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test181"); }


    org.jfree.data.xy.DefaultXYZDataset var0 = new org.jfree.data.xy.DefaultXYZDataset();
    org.jfree.data.DomainOrder var1 = var0.getDomainOrder();
    org.jfree.data.Range var3 = org.jfree.data.general.DatasetUtilities.findZBounds((org.jfree.data.xy.XYZDataset)var0, true);
    org.jfree.data.DomainOrder var4 = var0.getDomainOrder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test182"); }


    org.jfree.data.time.Minute var0 = new org.jfree.data.time.Minute();
    int var1 = var0.getMinute();
    org.jfree.data.time.Hour var2 = var0.getHour();
    org.jfree.data.time.Day var3 = var2.getDay();
    long var4 = var2.getFirstMillisecond();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1378962000000L);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test183"); }


    org.jfree.data.time.Year var3 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var4 = new org.jfree.data.time.Month(1, var3);
    org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
    long var6 = var4.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var7 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var9 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var10 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var9);
    var7.remove((org.jfree.data.time.TimePeriod)var9, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var14 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var4, (org.jfree.data.time.RegularTimePeriod)var9);
    var14.setMinorTickMarksVisible(false);
    org.jfree.data.time.Year var18 = new org.jfree.data.time.Year(100);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var19 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    int var20 = var18.compareTo((java.lang.Object)var19);
    var14.setFirst((org.jfree.data.time.RegularTimePeriod)var18);
    var14.setLabelAngle(1.0E-8d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test184"); }


    org.jfree.data.time.TimeTableXYDataset var0 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.Range var1 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds((org.jfree.data.xy.TableXYDataset)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test185"); }


    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var1 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var2 = var1.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var3 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var4 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var1, (org.jfree.chart.urls.XYURLGenerator)var3);
    boolean var5 = var4.getPlotArea();
    org.jfree.chart.labels.HighLowItemLabelGenerator var6 = new org.jfree.chart.labels.HighLowItemLabelGenerator();
    var4.setBaseItemLabelGenerator((org.jfree.chart.labels.XYItemLabelGenerator)var6);
    var4.setShapesVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test186"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    org.jfree.chart.labels.ItemLabelPosition var6 = var2.getPositiveItemLabelPosition(8, 100);
    var2.setMinimumBarLength(0.3d);
    double var9 = var2.getShadowXOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 4.0d);

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test187"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    java.awt.Shape var12 = var10.getBaseLegendShape();
    var5.setShape(var12);
    var2.setLegendBar(var12);
    var2.setDrawBarOutline(true);
    java.lang.Object var17 = var2.clone();
    org.jfree.chart.LegendItem var20 = var2.getLegendItem(51, 0);
    org.jfree.chart.renderer.category.StackedBarRenderer3D var22 = new org.jfree.chart.renderer.category.StackedBarRenderer3D(true);
    boolean var23 = var2.equals((java.lang.Object)var22);
    java.awt.Paint var24 = var2.getItemLabelPaint();
    var2.setUseYInterval(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test188"); }


    org.jfree.chart.plot.dial.DialValueIndicator var0 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var1 = var0.getInsets();
    var0.setAngle((-1.0d));
    java.lang.Object var4 = var0.clone();
    org.jfree.chart.renderer.xy.XYBlockRenderer var5 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var6 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var7 = var5.findDomainBounds((org.jfree.data.xy.XYDataset)var6);
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    double var12 = var10.getItemLabelAnchorOffset();
    org.jfree.chart.labels.ItemLabelPosition var15 = var10.getNegativeItemLabelPosition(0, 0);
    double var16 = var15.getAngle();
    var5.setNegativeItemLabelPosition(var15);
    org.jfree.chart.labels.XYSeriesLabelGenerator var18 = var5.getLegendItemToolTipGenerator();
    org.jfree.chart.title.LegendTitle var19 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var5);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var21 = var20.getDomainCrosshairColumnKey();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var22 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var22.setUseSeriesOffset(true);
    var22.setBaseSeriesVisible(true);
    var22.setAutoPopulateSeriesShape(false);
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var29 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var22};
    var20.setRenderers(var29);
    var19.setSources((org.jfree.chart.LegendItemSource[])var29);
    org.jfree.ui.RectangleAnchor var32 = var19.getLegendItemGraphicLocation();
    var0.setFrameAnchor(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test189"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    java.awt.Shape var12 = var10.getBaseLegendShape();
    var5.setShape(var12);
    var2.setLegendBar(var12);
    org.jfree.data.general.DefaultKeyedValues2DDataset var17 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var20 = new org.jfree.chart.entity.CategoryItemEntity(var12, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var17, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.chart.plot.CombinedRangeXYPlot var21 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var22 = var21.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CategoryMarker var24 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var25 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var27 = var25.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var30 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var31 = var30.getTickLabelPaint();
    var25.setFillPaint(var31, true);
    var24.setLabelPaint(var31);
    org.jfree.chart.annotations.XYShapeAnnotation var35 = new org.jfree.chart.annotations.XYShapeAnnotation(var12, var22, var31);
    java.lang.Object var36 = var35.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test190"); }


    org.jfree.chart.renderer.category.ScatterRenderer var0 = new org.jfree.chart.renderer.category.ScatterRenderer();
    var0.setItemMargin(0.2d);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var6 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var7 = var6.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var8 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var9 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var6, (org.jfree.chart.urls.XYURLGenerator)var8);
    org.jfree.chart.renderer.xy.StandardXYItemRenderer var10 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, (org.jfree.chart.labels.XYToolTipGenerator)var6);
    java.text.NumberFormat var11 = var6.getYFormat();
    org.jfree.chart.labels.StandardCategoryToolTipGenerator var12 = new org.jfree.chart.labels.StandardCategoryToolTipGenerator("jfreechart-", var11);
    var0.setBaseToolTipGenerator((org.jfree.chart.labels.CategoryToolTipGenerator)var12);
    boolean var14 = var0.getBaseShapesFilled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test191"); }


    org.jfree.data.time.Year var1 = new org.jfree.data.time.Year(10);
    org.jfree.data.xy.DefaultXYZDataset var2 = new org.jfree.data.xy.DefaultXYZDataset();
    org.jfree.data.DomainOrder var3 = var2.getDomainOrder();
    org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer var4 = new org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer();
    org.jfree.chart.StandardChartTheme var7 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var8 = var7.getLegendItemPaint();
    var4.setBoxPaint(var8);
    java.lang.Number[][] var10 = new java.lang.Number[][] { };
    java.lang.Number[][] var11 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var12 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var10, var11);
    int var14 = var12.getRowIndex((java.lang.Comparable)'a');
    boolean var15 = var4.equals((java.lang.Object)var12);
    java.awt.Paint var16 = var4.getArtifactPaint();
    java.awt.Paint var17 = var4.getArtifactPaint();
    boolean var18 = var3.equals((java.lang.Object)var4);
    boolean var19 = var1.equals((java.lang.Object)var4);
    java.awt.Paint var20 = var4.getBoxPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test192"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var1 = var0.isDomainZoomable();
    int var2 = var0.getAxisLocation();
    org.jfree.data.general.ValueDataset var3 = var0.getDataset();
    org.jfree.chart.plot.MeterPlot var4 = new org.jfree.chart.plot.MeterPlot(var3);
    org.jfree.data.general.DefaultKeyedValues2DDataset var6 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var6.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var11 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.category.CategoryDataset)var6);
    org.jfree.data.Range var13 = org.jfree.data.Range.shift(var11, (-1.0d));
    org.jfree.data.Range var15 = org.jfree.data.Range.scale(var13, 100.0d);
    org.jfree.chart.plot.MeterInterval var16 = new org.jfree.chart.plot.MeterInterval("100", var15);
    var4.addInterval(var16);
    org.jfree.data.Range var18 = var4.getRange();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test193"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isCounterClockwise();
    var0.setRadiusGridlinesVisible(false);
    int var4 = var0.getDatasetCount();
    boolean var5 = var0.isAngleGridlinesVisible();
    org.jfree.data.xy.CategoryTableXYDataset var7 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.general.DefaultKeyedValues2DDataset var8 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var8.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var13 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var8);
    java.util.List var14 = var8.getColumnKeys();
    org.jfree.data.Range var16 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset)var7, var14, true);
    var0.setDataset(15, (org.jfree.data.xy.XYDataset)var7);
    org.jfree.chart.util.RelativeDateFormat var20 = new org.jfree.chart.util.RelativeDateFormat();
    java.lang.Object var21 = var20.clone();
    org.jfree.chart.axis.DateTickUnit var22 = new org.jfree.chart.axis.DateTickUnit(1, 8, (java.text.DateFormat)var20);
    int var23 = var22.getCount();
    var0.setAngleTickUnit((org.jfree.chart.axis.TickUnit)var22);
    int var25 = var22.getRollMultiple();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 8);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test194"); }


    org.jfree.chart.axis.LogarithmicAxis var1 = new org.jfree.chart.axis.LogarithmicAxis("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ");
    double var3 = var1.adjustedLog10(100.0d);
    var1.zoomRange(0.025d, 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2.0d);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test195"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    boolean var8 = var0.isDomainPannable();
    org.jfree.chart.axis.AxisSpace var9 = var0.getFixedRangeAxisSpace();
    var0.setRangeMinorGridlinesVisible(false);
    org.jfree.chart.axis.ValueAxis var13 = var0.getRangeAxisForDataset(255);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test196"); }


    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis("0x00000000");
    boolean var3 = var1.isHiddenValue(0L);
    org.jfree.chart.title.TextTitle var6 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var7 = var6.isVisible();
    java.lang.Object var8 = var6.clone();
    var6.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
    double var14 = var6.getWidth();
    javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var16 = var15.getLocation();
    org.jfree.chart.plot.PolarPlot var17 = new org.jfree.chart.plot.PolarPlot();
    boolean var18 = var17.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var23 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var23.setUpperMargin(10.0d);
    var23.setAxisLineVisible(true);
    javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var29 = var28.getLocation();
    java.awt.Dimension var30 = var28.preferredSize();
    java.awt.Rectangle var31 = var28.bounds();
    java.awt.Point var32 = var17.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var23, (java.awt.geom.Rectangle2D)var31);
    java.awt.Rectangle var33 = var15.getBounds(var31);
    var6.setBounds((java.awt.geom.Rectangle2D)var33);
    org.jfree.chart.title.TextTitle var36 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var37 = var36.isVisible();
    java.lang.Object var38 = var36.clone();
    org.jfree.ui.RectangleEdge var39 = var36.getPosition();
    double var40 = var1.valueToJava2D(5.0d, (java.awt.geom.Rectangle2D)var33, var39);
    var1.setFixedDimension(Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.0d);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test197"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isCounterClockwise();
    var0.setRadiusGridlinesVisible(false);
    int var4 = var0.getDatasetCount();
    org.jfree.chart.axis.CyclicNumberAxis var8 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var9 = var8.isAxisLineVisible();
    var8.setAxisLineVisible(true);
    org.jfree.data.general.DefaultKeyedValues2DDataset var12 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var12.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var17 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.category.CategoryDataset)var12);
    var8.setDefaultAutoRange(var17);
    org.jfree.data.Range var19 = var8.getRange();
    var0.setAxis(0, (org.jfree.chart.axis.ValueAxis)var8, true);
    int var22 = var0.getAxisCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test198"); }


    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var1 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var2 = var1.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var3 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var4 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var1, (org.jfree.chart.urls.XYURLGenerator)var3);
    var4.setShapesVisible(false);
    java.lang.String[] var10 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var11 = new org.jfree.chart.axis.SymbolAxis("hi!", var10);
    org.jfree.chart.plot.CompassPlot var12 = new org.jfree.chart.plot.CompassPlot();
    boolean var13 = var11.equals((java.lang.Object)var12);
    java.lang.String var14 = var12.getPlotType();
    java.awt.Paint var15 = var12.getRoseCenterPaint();
    java.awt.Paint var16 = var12.getBackgroundPaint();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.image.ColorModel var19 = var17.getColorModel();
    var17.updateUI();
    java.lang.String var21 = var17.toString();
    boolean var22 = var17.getInheritsPopupMenu();
    javax.swing.InputMap var23 = var17.getInputMap();
    var17.nextFocus();
    boolean var25 = var17.getInheritsPopupMenu();
    javax.swing.JPanel var26 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var27 = var26.getPreferredSize();
    java.awt.image.ColorModel var28 = var26.getColorModel();
    var26.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var33 = var26.getForeground();
    var17.setForeground(var33);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var36 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var16, (java.awt.Paint)var33, true);
    org.jfree.chart.labels.StandardXYSeriesLabelGenerator var37 = new org.jfree.chart.labels.StandardXYSeriesLabelGenerator();
    var36.setLegendItemLabelGenerator((org.jfree.chart.labels.XYSeriesLabelGenerator)var37);
    org.jfree.chart.LegendItem var41 = var36.getLegendItem(0, (-1));
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var44 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var47 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var48 = var47.getItemLabelFont();
    double var49 = var47.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var52 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var53 = var52.getItemLabelFont();
    java.awt.Shape var54 = var52.getBaseLegendShape();
    var47.setShape(var54);
    var44.setLegendBar(var54);
    var44.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var59 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var60 = var44.findDomainBounds((org.jfree.data.xy.XYDataset)var59);
    org.jfree.data.Range var62 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds((org.jfree.data.xy.TableXYDataset)var59, (-1.0d));
    boolean var63 = var36.equals((java.lang.Object)(-1.0d));
    javax.swing.JPanel var64 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var65 = var64.getLocation();
    org.jfree.chart.plot.PolarPlot var66 = new org.jfree.chart.plot.PolarPlot();
    boolean var67 = var66.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var72 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var72.setUpperMargin(10.0d);
    var72.setAxisLineVisible(true);
    javax.swing.JPanel var77 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var78 = var77.getLocation();
    java.awt.Dimension var79 = var77.preferredSize();
    java.awt.Rectangle var80 = var77.bounds();
    java.awt.Point var81 = var66.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var72, (java.awt.geom.Rectangle2D)var80);
    java.awt.Rectangle var82 = var64.getBounds(var80);
    var36.setLegendLine((java.awt.Shape)var80);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.setSeriesShape((-2), (java.awt.Shape)var80, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Compass Plot"+ "'", var14.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test199"); }


    org.jfree.chart.util.HexNumberFormat var2 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var3.setNextFocusableComponent((java.awt.Component)var5);
    java.util.Locale var7 = var5.getLocale();
    org.jfree.chart.axis.MonthDateFormat var8 = new org.jfree.chart.axis.MonthDateFormat(var7);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var9 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var2, (java.text.DateFormat)var8);
    org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator var10 = new org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator("jfreechart-onetime-", (java.text.NumberFormat)var2);
    var2.setNumberOfDigits(2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test200"); }


    org.jfree.data.general.DefaultKeyedValueDataset var0 = new org.jfree.data.general.DefaultKeyedValueDataset();
    org.jfree.data.general.DatasetGroup var1 = var0.getGroup();
    org.jfree.data.general.DefaultKeyedValueDataset var2 = new org.jfree.data.general.DefaultKeyedValueDataset((org.jfree.data.KeyedValue)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.updateValue((java.lang.Number)1043495433);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test201"); }


    org.jfree.data.ComparableObjectSeries var1 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable)100L);
    boolean var2 = var1.getAutoSort();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test202"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[1.0,1.0]", var2, false);
    java.awt.Toolkit var7 = var6.getToolkit();
    var6.addNotify();
    java.awt.event.InputMethodListener[] var9 = var6.getInputMethodListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test203"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var6 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var6.setUpperMargin(10.0d);
    var6.setAxisLineVisible(true);
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var12 = var11.getLocation();
    java.awt.Dimension var13 = var11.preferredSize();
    java.awt.Rectangle var14 = var11.bounds();
    java.awt.Point var15 = var0.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var6, (java.awt.geom.Rectangle2D)var14);
    org.jfree.chart.renderer.DefaultPolarItemRenderer var17 = new org.jfree.chart.renderer.DefaultPolarItemRenderer();
    var0.setRenderer(10, (org.jfree.chart.renderer.PolarItemRenderer)var17, true);
    var0.setMargin(15);
    org.jfree.data.general.DefaultKeyedValues2DDataset var23 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var23.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var28 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var23);
    java.util.List var29 = var23.getColumnKeys();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mapDatasetToAxes(2, var29);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test204"); }


    org.jfree.data.xy.XYIntervalDataItem var6 = new org.jfree.data.xy.XYIntervalDataItem((-0.7853981633974483d), (-1.0d), 0.05d, 0.25d, 1.5d, (-0.7853981633974483d));
    double var7 = var6.getYLowValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1.5d);

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test205"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    java.awt.image.ColorModel var2 = var0.getColorModel();
    var0.updateUI();
    java.lang.String var4 = var0.toString();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    boolean var6 = var0.isFocusCycleRoot((java.awt.Container)var5);
    var0.enableInputMethods(true);
    boolean var9 = var0.isPaintingForPrint();
    org.jfree.chart.plot.GreyPalette var10 = new org.jfree.chart.plot.GreyPalette();
    double var11 = var10.getMaxZ();
    org.jfree.chart.editor.PaletteSample var12 = new org.jfree.chart.editor.PaletteSample((org.jfree.chart.plot.ColorPalette)var10);
    var12.setFocusTraversalKeysEnabled(false);
    org.jfree.chart.plot.GreyPalette var15 = new org.jfree.chart.plot.GreyPalette();
    var12.setPalette((org.jfree.chart.plot.ColorPalette)var15);
    java.awt.Dimension var17 = var12.getPreferredSize();
    var0.setPreferredSize(var17);
    javax.swing.JPanel var19 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var20 = var19.getPreferredSize();
    javax.swing.JPanel var21 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var19.setNextFocusableComponent((java.awt.Component)var21);
    java.util.Locale var23 = var21.getLocale();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.Dimension var26 = var21.getSize(var25);
    java.awt.event.ContainerListener[] var27 = var21.getContainerListeners();
    boolean var30 = var21.inside(2147483647, 10);
    java.awt.Dimension var31 = var21.getMinimumSize();
    int var32 = var21.getY();
    java.lang.String var33 = var21.getUIClassID();
    java.awt.Color var34 = var21.getForeground();
    var0.setForeground(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var4.equals("org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "PanelUI"+ "'", var33.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test206"); }


    org.jfree.data.xy.YIntervalDataItem var4 = new org.jfree.data.xy.YIntervalDataItem(0.02d, 100.0d, (-0.4636476090008061d), (-1.0d));

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test207"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    java.lang.Object var1 = var0.clone();
    var0.mapDatasetToDomainAxis(1, 1024);
    org.jfree.chart.axis.AxisCollection var6 = new org.jfree.chart.axis.AxisCollection();
    java.util.List var7 = var6.getAxesAtLeft();
    java.util.List var8 = var6.getAxesAtBottom();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mapDatasetToRangeAxes(100, var8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test208"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    java.awt.image.ColorModel var2 = var0.getColorModel();
    var0.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Dimension var7 = var0.getMaximumSize();
    java.awt.Color var8 = var0.getBackground();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    var0.firePropertyChange("0x00000000", 'a', '#');
    org.jfree.data.xy.XYSeries var16 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    java.lang.Object var17 = var16.clone();
    int var18 = var16.getMaximumItemCount();
    org.jfree.chart.urls.StandardXYURLGenerator var22 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    org.jfree.data.statistics.SimpleHistogramDataset var24 = new org.jfree.data.statistics.SimpleHistogramDataset((java.lang.Comparable)100.0f);
    var24.removeAllBins();
    java.lang.String var28 = var22.generateURL((org.jfree.data.xy.XYDataset)var24, 100, 1);
    var16.removeChangeListener((org.jfree.data.general.SeriesChangeListener)var24);
    boolean var30 = var16.getAllowDuplicateXValues();
    org.jfree.data.xy.XYSeriesCollection var31 = new org.jfree.data.xy.XYSeriesCollection(var16);
    double var33 = var31.getDomainUpperBound(false);
    var0.addVetoableChangeListener((java.beans.VetoableChangeListener)var31);
    var31.removeSeries(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "hi!?hi!=100&amp;hi!=1"+ "'", var28.equals("hi!?hi!=100&amp;hi!=1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == Double.NaN);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test209"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var1 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((java.lang.Comparable)(short)10);
    int var3 = var1.getItemCount((-13421773));
    org.jfree.data.xy.VectorDataItem var8 = new org.jfree.data.xy.VectorDataItem((-1.0d), 10.0d, 2.0d, (-1.0d));
    double var9 = var8.getXValue();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var12 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var15 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var16 = var15.getItemLabelFont();
    double var17 = var15.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var20 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var21 = var20.getItemLabelFont();
    java.awt.Shape var22 = var20.getBaseLegendShape();
    var15.setShape(var22);
    var12.setLegendBar(var22);
    org.jfree.data.general.DefaultKeyedValues2DDataset var27 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var30 = new org.jfree.chart.entity.CategoryItemEntity(var22, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var27, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.chart.plot.CombinedRangeXYPlot var31 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var32 = var31.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CategoryMarker var34 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var35 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var37 = var35.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var40 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var41 = var40.getTickLabelPaint();
    var35.setFillPaint(var41, true);
    var34.setLabelPaint(var41);
    org.jfree.chart.annotations.XYShapeAnnotation var45 = new org.jfree.chart.annotations.XYShapeAnnotation(var22, var32, var41);
    boolean var46 = var8.equals((java.lang.Object)var22);
    org.jfree.chart.axis.PeriodAxis var48 = new org.jfree.chart.axis.PeriodAxis("Compass Plot");
    org.jfree.chart.axis.PeriodAxisLabelInfo[] var49 = new org.jfree.chart.axis.PeriodAxisLabelInfo[] { };
    var48.setLabelInfo(var49);
    float var51 = var48.getMinorTickMarkOutsideLength();
    java.awt.Shape var52 = var48.getLeftArrow();
    org.jfree.chart.entity.AxisEntity var54 = new org.jfree.chart.entity.AxisEntity(var22, (org.jfree.chart.axis.Axis)var48, "TimePeriodValue[Week 37, 2013,10]");
    boolean var55 = var1.equals((java.lang.Object)var48);
    org.jfree.data.time.DynamicTimeSeriesCollection var58 = new org.jfree.data.time.DynamicTimeSeriesCollection(2, (-1));
    int var60 = var58.offsetFromOldest(51);
    int var61 = var58.getNewestIndex();
    int var62 = var58.getSeriesCount();
    boolean var63 = var48.hasListener((java.util.EventListener)var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test210"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.title.DateTitle var1 = new org.jfree.chart.title.DateTitle(2013);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test211"); }


    org.jfree.chart.title.TextTitle var1 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var2 = var1.isVisible();
    java.lang.Object var3 = var1.clone();
    java.lang.String var4 = var1.getURLText();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    java.awt.image.ColorModel var7 = var5.getColorModel();
    var5.updateUI();
    java.lang.String var9 = var5.toString();
    java.awt.Color var10 = var5.getForeground();
    var1.setBackgroundPaint((java.awt.Paint)var10);
    int var12 = var10.getRGB();
    int var13 = var10.getBlue();
    int var14 = var10.getAlpha();
    org.jfree.chart.block.BlockBorder var15 = new org.jfree.chart.block.BlockBorder((java.awt.Paint)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var9.equals("org.jfree.chart.ChartPanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 255);

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test212"); }


    org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var2.add((-1.0d), (-1.0d), false);
    double[][] var7 = var2.toArray();
    java.lang.Object[][] var8 = org.jfree.data.contour.DefaultContourDataset.formObjectArray(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test213"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var1 = var0.getDomainCrosshairColumnKey();
    var0.setCrosshairDatasetIndex(100);
    org.jfree.chart.plot.CombinedRangeXYPlot var4 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var5 = var4.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var7 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var8 = var7.getMargin();
    var4.setAxisOffset(var8);
    var0.setAxisOffset(var8);
    org.jfree.data.category.CategoryDataset var12 = var0.getDataset((-2));
    org.jfree.chart.LegendItemCollection var13 = var0.getLegendItems();
    boolean var14 = var0.isDomainZoomable();
    org.jfree.ui.RectangleEdge var16 = var0.getRangeAxisEdge(51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test214"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var7 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var9 = var7.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var12 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var13 = var12.getTickLabelPaint();
    var7.setFillPaint(var13, true);
    var0.setDomainCrosshairPaint(var13);
    boolean var17 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.util.ShadowGenerator var18 = var0.getShadowGenerator();
    var0.setDomainGridlinesVisible(true);
    var0.configureRangeAxes();
    org.jfree.chart.JFreeChart var22 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var0);
    org.jfree.chart.title.TextTitle var24 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var25 = var24.isVisible();
    java.lang.Object var26 = var24.clone();
    var24.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
    double var32 = var24.getWidth();
    var22.removeSubtitle((org.jfree.chart.title.Title)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 0.0d);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test215"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryMarker var2 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var3 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var5 = var3.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var8 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var9 = var8.getTickLabelPaint();
    var3.setFillPaint(var9, true);
    var2.setLabelPaint(var9);
    var0.setDomainGridlinePaint(var9);
    var0.clearDomainMarkers();
    org.jfree.chart.axis.AxisSpace var15 = new org.jfree.chart.axis.AxisSpace();
    var0.setFixedRangeAxisSpace(var15);
    double var17 = var15.getTop();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.0d);

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test216"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    java.awt.Paint var17 = var0.getQuadrantPaint(1);
    double var18 = var0.getDomainCrosshairValue();
    var0.configureRangeAxes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.0d);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test217"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var4);
    org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
    var2.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.axis.AxisLocation var10 = var2.getRangeAxisLocation(52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDomainAxisLocation((-2), var10, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test218"); }


    org.jfree.chart.axis.LogAxis var0 = new org.jfree.chart.axis.LogAxis();
    var0.setFixedDimension((-170.0d));
    boolean var4 = var0.equals((java.lang.Object)1.5d);
    var0.configure();
    double var7 = var0.calculateValue(0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 1.0d);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test219"); }


    java.lang.String[] var2 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var4 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var6 = var4.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var9 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var10 = var9.getTickLabelPaint();
    var4.setFillPaint(var10, true);
    var3.setGridBandAlternatePaint(var10);
    var3.setFixedDimension(100.0d);
    var3.setTickMarkInsideLength(2.0f);
    javax.swing.JPanel var19 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var20 = var19.getPreferredSize();
    javax.swing.JPanel var21 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var19.setNextFocusableComponent((java.awt.Component)var21);
    var19.show();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var25 = var24.getPreferredSize();
    javax.swing.JPanel var26 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var24.setNextFocusableComponent((java.awt.Component)var26);
    var24.show();
    javax.swing.JPanel var29 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var30 = var29.getLocation();
    java.awt.Dimension var31 = var29.preferredSize();
    java.awt.Rectangle var32 = var29.bounds();
    var24.scrollRectToVisible(var32);
    var19.paintImmediately(var32);
    org.jfree.chart.plot.CombinedRangeXYPlot var35 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var36 = var35.getRangeZeroBaselineStroke();
    java.lang.String var37 = var35.getPlotType();
    org.jfree.chart.plot.CategoryMarker var39 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var40 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var42 = var40.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var45 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var46 = var45.getTickLabelPaint();
    var40.setFillPaint(var46, true);
    var39.setLabelPaint(var46);
    boolean var50 = var35.removeRangeMarker((org.jfree.chart.plot.Marker)var39);
    org.jfree.chart.axis.AxisLocation var51 = var35.getDomainAxisLocation();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var54 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var57 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var58 = var57.getItemLabelFont();
    double var59 = var57.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var62 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var63 = var62.getItemLabelFont();
    java.awt.Shape var64 = var62.getBaseLegendShape();
    var57.setShape(var64);
    var54.setLegendBar(var64);
    var54.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var69 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var70 = var54.findDomainBounds((org.jfree.data.xy.XYDataset)var69);
    int var71 = var35.getIndexOf((org.jfree.chart.renderer.xy.XYItemRenderer)var54);
    var35.setRangeCrosshairVisible(false);
    org.jfree.ui.RectangleEdge var74 = var35.getRangeAxisEdge();
    double var75 = var3.lengthToJava2D((-170.0d), (java.awt.geom.Rectangle2D)var32, var74);
    java.lang.Object var76 = var3.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Combined Range XYPlot"+ "'", var37.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var75 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test220"); }


    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow((org.jfree.data.category.CategoryDataset)var0, 10);
    org.jfree.data.statistics.SimpleHistogramBin var5 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
    org.jfree.data.general.PieDataset var7 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(var2, (java.lang.Comparable)0.05d, 175.0d);
    org.jfree.chart.plot.RingPlot var8 = new org.jfree.chart.plot.RingPlot(var7);
    var8.setSectionDepth(0.02d);
    var8.setInnerSeparatorExtension(0.02d);
    java.awt.Stroke var14 = var8.getSectionOutlineStroke((java.lang.Comparable)0.025d);
    org.jfree.chart.renderer.category.GanttRenderer var15 = new org.jfree.chart.renderer.category.GanttRenderer();
    java.lang.String[] var18 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var19 = new org.jfree.chart.axis.SymbolAxis("hi!", var18);
    org.jfree.chart.plot.CompassPlot var20 = new org.jfree.chart.plot.CompassPlot();
    boolean var21 = var19.equals((java.lang.Object)var20);
    java.lang.String var22 = var20.getPlotType();
    java.awt.Paint var23 = var20.getRoseCenterPaint();
    var15.setIncompletePaint(var23);
    org.jfree.chart.labels.CategorySeriesLabelGenerator var25 = var15.getLegendItemLabelGenerator();
    java.awt.Paint var26 = var15.getCompletePaint();
    var8.setBaseSectionPaint(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "Compass Plot"+ "'", var22.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test221"); }


    org.jfree.chart.plot.ContourPlot var0 = new org.jfree.chart.plot.ContourPlot();
    org.jfree.chart.plot.CategoryMarker var2 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    var0.addRangeMarker((org.jfree.chart.plot.Marker)var2);
    org.jfree.chart.urls.StandardXYURLGenerator var7 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    org.jfree.data.statistics.SimpleHistogramDataset var9 = new org.jfree.data.statistics.SimpleHistogramDataset((java.lang.Comparable)100.0f);
    var9.removeAllBins();
    java.lang.String var13 = var7.generateURL((org.jfree.data.xy.XYDataset)var9, 100, 1);
    var0.setURLGenerator((org.jfree.chart.urls.XYURLGenerator)var7);
    var0.zoom(3.0d);
    org.jfree.chart.plot.CombinedRangeXYPlot var17 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var18 = var17.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CombinedRangeXYPlot var19 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var20 = var19.getRangeZeroBaselineStroke();
    var17.setRangeGridlineStroke(var20);
    var17.setDomainMinorGridlinesVisible(true);
    org.jfree.chart.renderer.xy.XYItemRenderer var24 = var17.getRenderer();
    var0.removeChangeListener((org.jfree.chart.event.PlotChangeListener)var17);
    boolean var26 = var0.isRenderAsPoints();
    java.awt.Paint var27 = var0.getMissingPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!?hi!=100&amp;hi!=1"+ "'", var13.equals("hi!?hi!=100&amp;hi!=1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test222"); }


    org.jfree.data.general.WaferMapDataset var3 = new org.jfree.data.general.WaferMapDataset(2, 15, (java.lang.Number)5.0d);
    java.lang.Number var6 = var3.getChipValue(52, 20);
    boolean var8 = var3.isMaxValue((java.lang.Number)1);
    java.lang.Number var9 = var3.getMinValue();
    java.lang.Number var12 = var3.getChipValue(1024, (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + Double.POSITIVE_INFINITY+ "'", var9.equals(Double.POSITIVE_INFINITY));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test223"); }


    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var2 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.LegendItem var5 = var2.getLegendItem(1, 0);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var6 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    var2.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var6);
    org.jfree.chart.renderer.xy.CandlestickRenderer var8 = new org.jfree.chart.renderer.xy.CandlestickRenderer(0.75d, false, (org.jfree.chart.labels.XYToolTipGenerator)var6);
    boolean var9 = var8.getUseOutlinePaint();
    int var10 = var8.getAutoWidthMethod();
    java.awt.Paint var11 = var8.getVolumePaint();
    org.jfree.chart.plot.PolarPlot var12 = new org.jfree.chart.plot.PolarPlot();
    boolean var13 = var12.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var18 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var18.setUpperMargin(10.0d);
    var18.setAxisLineVisible(true);
    javax.swing.JPanel var23 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var24 = var23.getLocation();
    java.awt.Dimension var25 = var23.preferredSize();
    java.awt.Rectangle var26 = var23.bounds();
    java.awt.Point var27 = var12.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var18, (java.awt.geom.Rectangle2D)var26);
    var8.addChangeListener((org.jfree.chart.event.RendererChangeListener)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test224"); }


    org.jfree.chart.plot.XYCrosshairState var0 = new org.jfree.chart.plot.XYCrosshairState();
    var0.setAnchorX(360.0d);
    var0.updateCrosshairX(0.04d, 20);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test225"); }


    org.jfree.chart.renderer.category.StackedBarRenderer3D var1 = new org.jfree.chart.renderer.category.StackedBarRenderer3D(false);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test226"); }


    org.jfree.chart.servlet.ChartDeleter var0 = new org.jfree.chart.servlet.ChartDeleter();
    boolean var2 = var0.isChartAvailable("hi!?category=10&amp;pieIndex=2013");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test227"); }


    javax.swing.JPanel var1 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var2 = var1.getPreferredSize();
    javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var1.setNextFocusableComponent((java.awt.Component)var3);
    java.util.Locale var5 = var3.getLocale();
    java.text.NumberFormat var6 = java.text.NumberFormat.getNumberInstance(var5);
    org.jfree.chart.axis.TickUnitSource var7 = org.jfree.chart.axis.NumberAxis.createIntegerTickUnits(var5);
    org.jfree.chart.axis.MonthDateFormat var9 = new org.jfree.chart.axis.MonthDateFormat(var5, 51);
    org.jfree.chart.labels.StandardCategoryItemLabelGenerator var10 = new org.jfree.chart.labels.StandardCategoryItemLabelGenerator("null", (java.text.DateFormat)var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test228"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    javax.swing.JPanel var1 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var2 = var1.getPreferredSize();
    javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var1.setNextFocusableComponent((java.awt.Component)var3);
    java.util.Locale var5 = var3.getLocale();
    org.jfree.chart.axis.TickUnitSource var6 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var5);
    java.text.NumberFormat var7 = java.text.NumberFormat.getPercentInstance(var5);
    org.jfree.data.time.Year var9 = new org.jfree.data.time.Year();
    var0.addObject((java.lang.Object)var7, (java.lang.Comparable)0.04d, (java.lang.Comparable)var9);
    java.lang.Object var11 = var0.clone();
    org.jfree.data.xy.XYIntervalDataItem var18 = new org.jfree.data.xy.XYIntervalDataItem(0.05d, 0.04d, 40.05d, (-0.7853981633974483d), 0.0d, 1.5d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeObject((java.lang.Comparable)0.0d, (java.lang.Comparable)252);
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test229"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    java.awt.image.ColorModel var2 = var0.getColorModel();
    var0.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Dimension var7 = var0.getMaximumSize();
    var0.disable();
    var0.setFocusTraversalPolicyProvider(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test230"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    org.jfree.chart.labels.ItemLabelPosition var6 = var2.getPositiveItemLabelPosition(8, 100);
    var2.setMinimumBarLength(0.3d);
    org.jfree.chart.plot.DrawingSupplier var9 = var2.getDrawingSupplier();
    java.awt.Stroke var11 = var2.getSeriesStroke(15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test231"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    java.awt.Shape var3 = var2.getLegendBar();
    org.jfree.chart.entity.ContourEntity var6 = new org.jfree.chart.entity.ContourEntity(var3, "", "hi!");
    java.lang.String[] var9 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var10 = new org.jfree.chart.axis.SymbolAxis("hi!", var9);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var11 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var13 = var11.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var16 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var17 = var16.getTickLabelPaint();
    var11.setFillPaint(var17, true);
    var10.setGridBandAlternatePaint(var17);
    var10.setFixedDimension(100.0d);
    org.jfree.chart.plot.CompassPlot var23 = new org.jfree.chart.plot.CompassPlot();
    var23.setDrawBorder(true);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var26 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var27 = var26.getBaseItemLabelsVisible();
    var26.setSeriesShapesFilled(1, (java.lang.Boolean)false);
    var26.setDrawOutlines(true);
    org.jfree.chart.renderer.category.BarRenderer3D var35 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var36 = var35.getItemLabelFont();
    double var37 = var35.getItemLabelAnchorOffset();
    java.awt.Shape var39 = var35.getSeriesShape(1);
    org.jfree.chart.renderer.category.BarRenderer3D var43 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var44 = var43.getItemLabelFont();
    double var45 = var43.getItemLabelAnchorOffset();
    org.jfree.chart.axis.CyclicNumberAxis var49 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var50 = var49.getTickLabelPaint();
    var43.setLegendTextPaint(0, var50);
    var35.setSeriesFillPaint(100, var50, true);
    var26.setBaseOutlinePaint(var50, false);
    var23.setRoseHighlightPaint(var50);
    var10.setPlot((org.jfree.chart.plot.Plot)var23);
    org.jfree.data.general.DefaultKeyedValues2DDataset var58 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var58.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var63 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var58);
    org.jfree.data.Range var65 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds((org.jfree.data.category.CategoryDataset)var58, true);
    var10.setRangeWithMargins(var65);
    boolean var67 = var6.equals((java.lang.Object)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test232"); }


    org.jfree.chart.renderer.category.MinMaxCategoryRenderer var0 = new org.jfree.chart.renderer.category.MinMaxCategoryRenderer();
    java.lang.String[] var3 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var4 = new org.jfree.chart.axis.SymbolAxis("hi!", var3);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setGridBandAlternatePaint(var11);
    var4.setFixedDimension(100.0d);
    var4.setGridBandsVisible(false);
    java.awt.Stroke var19 = var4.getAxisLineStroke();
    var0.setGroupStroke(var19);
    javax.swing.Icon var21 = var0.getMinIcon();
    org.jfree.chart.plot.CombinedRangeXYPlot var22 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var23 = var22.getRangeZeroBaselineStroke();
    java.lang.String var24 = var22.getPlotType();
    org.jfree.chart.plot.CategoryMarker var26 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var27 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var29 = var27.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var32 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var33 = var32.getTickLabelPaint();
    var27.setFillPaint(var33, true);
    var26.setLabelPaint(var33);
    boolean var37 = var22.removeRangeMarker((org.jfree.chart.plot.Marker)var26);
    org.jfree.chart.axis.AxisLocation var38 = var22.getDomainAxisLocation();
    org.jfree.chart.axis.AxisLocation var39 = org.jfree.chart.axis.AxisLocation.getOpposite(var38);
    boolean var40 = var0.equals((java.lang.Object)var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "Combined Range XYPlot"+ "'", var24.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test233"); }


    org.jfree.data.time.TimeTableXYDataset var0 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    var0.remove((org.jfree.data.time.TimePeriod)var2, (java.lang.Comparable)100, false);
    org.jfree.data.xy.XYBarDataset var8 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var0, Double.NaN);
    org.jfree.chart.event.RendererChangeEvent var9 = new org.jfree.chart.event.RendererChangeEvent((java.lang.Object)var8);
    java.lang.Object var10 = var8.clone();
    double var11 = var8.getBarWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == Double.NaN);

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test234"); }


    org.jfree.chart.plot.CategoryMarker var1 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var2 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var4 = var2.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var7 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var8 = var7.getTickLabelPaint();
    var2.setFillPaint(var8, true);
    var1.setLabelPaint(var8);
    org.jfree.chart.plot.CompassPlot var12 = new org.jfree.chart.plot.CompassPlot();
    var1.addChangeListener((org.jfree.chart.event.MarkerChangeListener)var12);
    java.awt.Font var14 = var12.getLabelFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test235"); }


    org.jfree.data.function.LineFunction2D var2 = new org.jfree.data.function.LineFunction2D(0.05d, 10.0d);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var5 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var8 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var9 = var8.getItemLabelFont();
    double var10 = var8.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var13 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var14 = var13.getItemLabelFont();
    java.awt.Shape var15 = var13.getBaseLegendShape();
    var8.setShape(var15);
    var5.setLegendBar(var15);
    org.jfree.data.general.DefaultKeyedValues2DDataset var20 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var23 = new org.jfree.chart.entity.CategoryItemEntity(var15, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var20, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var26 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    java.awt.Shape var27 = var26.getLegendBar();
    org.jfree.chart.entity.ContourEntity var30 = new org.jfree.chart.entity.ContourEntity(var27, "", "hi!");
    var23.setArea(var27);
    boolean var32 = var2.equals((java.lang.Object)var27);
    org.jfree.chart.renderer.xy.XYDotRenderer var33 = new org.jfree.chart.renderer.xy.XYDotRenderer();
    org.jfree.chart.needle.LineNeedle var34 = new org.jfree.chart.needle.LineNeedle();
    java.awt.Stroke var35 = var34.getOutlineStroke();
    boolean var36 = var33.equals((java.lang.Object)var34);
    java.awt.Shape var39 = var33.getItemShape(20, 2013);
    org.jfree.chart.renderer.xy.XYSplineRenderer var41 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
    var41.clearSeriesPaints(false);
    java.lang.Boolean var44 = var41.getShapesVisible();
    java.awt.Shape var45 = var41.getLegendLine();
    var33.setLegendShape(var45);
    boolean var47 = var2.equals((java.lang.Object)var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test236"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    int var7 = var2.getSubtitleCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test237"); }


    org.jfree.data.function.PowerFunction2D var2 = new org.jfree.data.function.PowerFunction2D(2.0d, 1.0d);
    org.jfree.chart.axis.CyclicNumberAxis var6 = new org.jfree.chart.axis.CyclicNumberAxis(1.0d, 4.0d, "");
    var6.setInverted(true);
    boolean var9 = var2.equals((java.lang.Object)var6);
    var6.setFixedAutoRange(0.75d);
    var6.configure();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test238"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    java.awt.Shape var4 = var2.getBaseLegendShape();
    var2.setSeriesItemLabelsVisible(2, (java.lang.Boolean)true, false);
    boolean var9 = var2.getDataBoundsIncludesVisibleSeriesOnly();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test239"); }


    org.jfree.chart.plot.dial.DialValueIndicator var0 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var1 = var0.getInsets();
    java.awt.Stroke var2 = var0.getOutlineStroke();
    javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var3.setNextFocusableComponent((java.awt.Component)var5);
    java.util.Locale var7 = var5.getLocale();
    javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var9 = var8.getPreferredSize();
    java.awt.Dimension var10 = var5.getSize(var9);
    java.awt.event.ContainerListener[] var11 = var5.getContainerListeners();
    javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var13 = var12.getPreferredSize();
    java.awt.image.ColorModel var14 = var12.getColorModel();
    var12.updateUI();
    java.lang.String var16 = var12.toString();
    java.awt.Color var17 = var12.getForeground();
    var5.setBackground(var17);
    var0.setOutlinePaint((java.awt.Paint)var17);
    javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var21 = var20.getPreferredSize();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var20.setNextFocusableComponent((java.awt.Component)var22);
    java.util.Locale var24 = var22.getLocale();
    javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var26 = var25.getPreferredSize();
    java.awt.Dimension var27 = var22.getSize(var26);
    java.awt.event.ContainerListener[] var28 = var22.getContainerListeners();
    javax.swing.JPanel var29 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var30 = var29.getPreferredSize();
    java.awt.image.ColorModel var31 = var29.getColorModel();
    var29.updateUI();
    java.lang.String var33 = var29.toString();
    java.awt.Color var34 = var29.getForeground();
    var22.setBackground(var34);
    var0.setOutlinePaint((java.awt.Paint)var34);
    org.jfree.chart.block.ColorBlock var39 = new org.jfree.chart.block.ColorBlock((java.awt.Paint)var34, 10.0d, 3.0413664921379274E-65d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var16,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var16.equals("org.jfree.chart.ChartPanel[,0,0,0var16,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var33 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var33,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var33.equals("org.jfree.chart.ChartPanel[,0,0,0var33,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test240"); }


    org.jfree.chart.plot.dial.ArcDialFrame var0 = new org.jfree.chart.plot.dial.ArcDialFrame();
    double var1 = var0.getOuterRadius();
    java.awt.Paint var2 = var0.getForegroundPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.75d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test241"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
    java.awt.Paint var9 = var8.getZoomOutlinePaint();
    var8.restoreAutoBounds();
    int var11 = var8.getInitialDelay();
    javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var13 = var12.getPreferredSize();
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var12.setNextFocusableComponent((java.awt.Component)var14);
    var12.show();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var18 = var17.getLocation();
    java.awt.Dimension var19 = var17.preferredSize();
    java.awt.Rectangle var20 = var17.bounds();
    var12.scrollRectToVisible(var20);
    var8.computeVisibleRect(var20);
    boolean var23 = var8.isForegroundSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 750);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test242"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    org.jfree.chart.plot.dial.DialValueIndicator var19 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var20 = var19.getInsets();
    java.awt.Stroke var21 = var19.getOutlineStroke();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var19.setOutlinePaint((java.awt.Paint)var36);
    java.awt.Color var39 = var36.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    double var45 = var42.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var46 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var47 = var46.getRangeZeroBaselineStroke();
    var42.setStroke(var47, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var50 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var51 = var50.isOutline();
    var50.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var56 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var57 = var56.getLegendItemPaint();
    var50.setShapePaint(var57);
    org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var16, (java.awt.Paint)var39, var47, var57);
    var59.setShapeVisible(false);
    java.awt.Font var62 = var59.getLabelFont();
    org.jfree.chart.DrawableLegendItem var63 = new org.jfree.chart.DrawableLegendItem(var59);
    double var64 = var63.getMaxY();
    double var65 = var63.getMaxY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.0d);

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test243"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    org.jfree.chart.axis.AxisLocation var16 = var0.getDomainAxisLocation();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var19 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var22 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var23 = var22.getItemLabelFont();
    double var24 = var22.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var27 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var28 = var27.getItemLabelFont();
    java.awt.Shape var29 = var27.getBaseLegendShape();
    var22.setShape(var29);
    var19.setLegendBar(var29);
    var19.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var34 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var35 = var19.findDomainBounds((org.jfree.data.xy.XYDataset)var34);
    int var36 = var0.getIndexOf((org.jfree.chart.renderer.xy.XYItemRenderer)var19);
    var0.setRangeCrosshairVisible(false);
    java.awt.Paint var39 = var0.getDomainTickBandPaint();
    org.jfree.data.contour.NonGridContourDataset var40 = new org.jfree.data.contour.NonGridContourDataset();
    int[] var41 = var40.getXIndices();
    org.jfree.chart.renderer.xy.XYItemRenderer var42 = var0.getRendererForDataset((org.jfree.data.xy.XYDataset)var40);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var45 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    java.awt.Shape var46 = var45.getLegendBar();
    java.lang.String[] var49 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var50 = new org.jfree.chart.axis.SymbolAxis("hi!", var49);
    org.jfree.chart.plot.CompassPlot var51 = new org.jfree.chart.plot.CompassPlot();
    boolean var52 = var50.equals((java.lang.Object)var51);
    java.lang.String var53 = var51.getPlotType();
    java.awt.Paint var54 = var51.getRoseCenterPaint();
    java.awt.Paint var55 = var51.getBackgroundPaint();
    var45.setItemLabelPaint(var55, true);
    var0.setDomainCrosshairPaint(var55);
    org.jfree.data.xy.XYDataset var59 = var0.getDataset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var53 + "' != '" + "Compass Plot"+ "'", var53.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test244"); }


    org.jfree.chart.util.HexNumberFormat var2 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var3.setNextFocusableComponent((java.awt.Component)var5);
    java.util.Locale var7 = var5.getLocale();
    org.jfree.chart.axis.MonthDateFormat var8 = new org.jfree.chart.axis.MonthDateFormat(var7);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var9 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var2, (java.text.DateFormat)var8);
    org.jfree.chart.util.HexNumberFormat var11 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var13 = var12.getPreferredSize();
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var12.setNextFocusableComponent((java.awt.Component)var14);
    java.util.Locale var16 = var14.getLocale();
    org.jfree.chart.axis.MonthDateFormat var17 = new org.jfree.chart.axis.MonthDateFormat(var16);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var18 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var11, (java.text.DateFormat)var17);
    org.jfree.chart.labels.StandardPieSectionLabelGenerator var19 = new org.jfree.chart.labels.StandardPieSectionLabelGenerator("Combined Range XYPlot", (java.text.NumberFormat)var2, (java.text.NumberFormat)var11);
    java.lang.Object var20 = var19.clone();
    java.text.NumberFormat var21 = var19.getNumberFormat();
    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var22 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    org.jfree.data.general.PieDataset var24 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow((org.jfree.data.category.CategoryDataset)var22, 10);
    double var25 = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(var24);
    org.jfree.data.time.Year var28 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var29 = new org.jfree.data.time.Month(1, var28);
    java.util.Locale var30 = javax.swing.JComponent.getDefaultLocale();
    org.jfree.chart.axis.MonthDateFormat var32 = new org.jfree.chart.axis.MonthDateFormat(var30, 2147483647);
    java.util.Calendar var33 = var32.getCalendar();
    var29.peg(var33);
    java.text.AttributedString var35 = var19.generateAttributedSectionLabel(var24, (java.lang.Comparable)var29);
    org.jfree.chart.plot.RingPlot var36 = new org.jfree.chart.plot.RingPlot(var24);
    var36.setSectionOutlinesVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test245"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var1 = var0.getDomainCrosshairColumnKey();
    var0.setCrosshairDatasetIndex(100);
    org.jfree.chart.plot.CombinedRangeXYPlot var4 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var5 = var4.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var7 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var8 = var7.getMargin();
    var4.setAxisOffset(var8);
    var0.setAxisOffset(var8);
    org.jfree.data.category.CategoryDataset var12 = var0.getDataset((-2));
    org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer var14 = new org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer();
    org.jfree.chart.StandardChartTheme var17 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var18 = var17.getLegendItemPaint();
    var14.setBoxPaint(var18);
    java.lang.Number[][] var20 = new java.lang.Number[][] { };
    java.lang.Number[][] var21 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var22 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var20, var21);
    int var24 = var22.getRowIndex((java.lang.Comparable)'a');
    boolean var25 = var14.equals((java.lang.Object)var22);
    var0.setDataset(5, (org.jfree.data.category.CategoryDataset)var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test246"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.CategoryAxis var1 = var0.getDomainAxis();
    org.jfree.data.xy.XYSeries var4 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    java.lang.Object var5 = var4.clone();
    int var6 = var4.getMaximumItemCount();
    javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var8 = var7.getPreferredSize();
    boolean var9 = var7.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var11 = new org.jfree.chart.plot.ContourPlot();
    var11.setOutlineVisible(false);
    var7.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var11);
    org.jfree.chart.urls.XYURLGenerator var15 = var11.getURLGenerator();
    var4.removePropertyChangeListener((java.beans.PropertyChangeListener)var11);
    float var17 = var11.getForegroundAlpha();
    org.jfree.chart.plot.ValueMarker var19 = new org.jfree.chart.plot.ValueMarker((-1.0d));
    var11.addDomainMarker((org.jfree.chart.plot.Marker)var19);
    var19.setLabel("Compass Plot");
    javax.swing.JPanel var23 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var24 = var23.getPreferredSize();
    java.awt.image.ColorModel var25 = var23.getColorModel();
    var23.updateUI();
    java.lang.String var27 = var23.toString();
    var23.setFocusable(true);
    boolean var30 = var19.equals((java.lang.Object)var23);
    var19.setValue(0.04d);
    org.jfree.ui.TextAnchor var33 = var19.getLabelTextAnchor();
    boolean var34 = var0.removeDomainMarker((org.jfree.chart.plot.Marker)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var27,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var27.equals("org.jfree.chart.ChartPanel[,0,0,0var27,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test247"); }


    org.jfree.chart.plot.ContourPlot var0 = new org.jfree.chart.plot.ContourPlot();
    double var1 = var0.getDomainCrosshairValue();
    org.jfree.chart.axis.CyclicNumberAxis var4 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var5 = var4.isAxisLineVisible();
    var4.setAxisLineVisible(true);
    var4.setMinorTickMarksVisible(true);
    org.jfree.chart.plot.CombinedRangeXYPlot var10 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var11 = var10.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CombinedRangeXYPlot var12 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var13 = var12.getRangeZeroBaselineStroke();
    var10.setRangeGridlineStroke(var13);
    var10.setDomainMinorGridlinesVisible(true);
    var10.setRangeZeroBaselineVisible(true);
    var4.setPlot((org.jfree.chart.plot.Plot)var10);
    var0.setDomainAxis((org.jfree.chart.axis.ValueAxis)var4);
    boolean var21 = var0.isDomainCrosshairVisible();
    org.jfree.chart.axis.AxisSpace var22 = new org.jfree.chart.axis.AxisSpace();
    double var23 = var22.getBottom();
    org.jfree.chart.axis.DateAxis var26 = new org.jfree.chart.axis.DateAxis("0x00000000");
    boolean var28 = var26.isHiddenValue(0L);
    org.jfree.chart.title.TextTitle var31 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var32 = var31.isVisible();
    java.lang.Object var33 = var31.clone();
    var31.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
    double var39 = var31.getWidth();
    javax.swing.JPanel var40 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var41 = var40.getLocation();
    org.jfree.chart.plot.PolarPlot var42 = new org.jfree.chart.plot.PolarPlot();
    boolean var43 = var42.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var48 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var48.setUpperMargin(10.0d);
    var48.setAxisLineVisible(true);
    javax.swing.JPanel var53 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var54 = var53.getLocation();
    java.awt.Dimension var55 = var53.preferredSize();
    java.awt.Rectangle var56 = var53.bounds();
    java.awt.Point var57 = var42.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var48, (java.awt.geom.Rectangle2D)var56);
    java.awt.Rectangle var58 = var40.getBounds(var56);
    var31.setBounds((java.awt.geom.Rectangle2D)var58);
    org.jfree.chart.title.TextTitle var61 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var62 = var61.isVisible();
    java.lang.Object var63 = var61.clone();
    org.jfree.ui.RectangleEdge var64 = var61.getPosition();
    double var65 = var26.valueToJava2D(5.0d, (java.awt.geom.Rectangle2D)var58, var64);
    var22.ensureAtLeast((-1.0d), var64);
    var0.setColorBarLocation(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == 0.0d);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test248"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var6 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var6.setUpperMargin(10.0d);
    var6.setAxisLineVisible(true);
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var12 = var11.getLocation();
    java.awt.Dimension var13 = var11.preferredSize();
    java.awt.Rectangle var14 = var11.bounds();
    java.awt.Point var15 = var0.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var6, (java.awt.geom.Rectangle2D)var14);
    org.jfree.data.xy.DefaultXYZDataset var17 = new org.jfree.data.xy.DefaultXYZDataset();
    org.jfree.data.DomainOrder var18 = var17.getDomainOrder();
    var0.setDataset(1, (org.jfree.data.xy.XYDataset)var17);
    org.jfree.data.Range var20 = org.jfree.data.general.DatasetUtilities.iterateZBounds((org.jfree.data.xy.XYZDataset)var17);
    java.lang.Object var21 = var17.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var25 = org.jfree.chart.renderer.RendererUtilities.findLiveItemsUpperBound((org.jfree.data.xy.XYDataset)var17, (-334), 12.0d, (-170.0d));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test249"); }


    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var1 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var2 = var1.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var3 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var4 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var1, (org.jfree.chart.urls.XYURLGenerator)var3);
    boolean var5 = var4.getPlotArea();
    org.jfree.chart.labels.HighLowItemLabelGenerator var6 = new org.jfree.chart.labels.HighLowItemLabelGenerator();
    var4.setBaseItemLabelGenerator((org.jfree.chart.labels.XYItemLabelGenerator)var6);
    org.jfree.data.xy.XYSeries var10 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var10.add((-1.0d), (-1.0d), false);
    org.jfree.data.xy.XYSeries var17 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var17.clear();
    double var19 = var17.getMinX();
    org.jfree.data.xy.XYSeriesCollection var20 = new org.jfree.data.xy.XYSeriesCollection(var17);
    var10.addVetoableChangeListener((java.beans.VetoableChangeListener)var20);
    java.lang.String var24 = var6.generateLabel((org.jfree.data.xy.XYDataset)var20, 100, 2147483647);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var27 = var20.getEndY(1043495433, 100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test250"); }


    org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
    var1.setLinesVisible(true);
    java.lang.Boolean var5 = var1.getSeriesLinesVisible(10);
    java.lang.Object var6 = var1.clone();
    var1.setSeriesLinesVisible(8, (java.lang.Boolean)true);
    var1.setSeriesShapesFilled(4, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test251"); }


    org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
    var1.clearSeriesPaints(false);
    boolean var4 = var1.getBaseLinesVisible();
    boolean var7 = var1.getItemShapeFilled((-2), 15);
    org.jfree.chart.plot.CombinedRangeXYPlot var8 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var9 = var8.getRangeZeroBaselineStroke();
    java.lang.String var10 = var8.getPlotType();
    boolean var11 = var8.isDomainZoomable();
    org.jfree.chart.plot.CombinedRangeXYPlot var12 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var13 = var12.getRangeZeroBaselineStroke();
    var8.setDomainCrosshairStroke(var13);
    var1.setOutlineStroke(var13, true);
    var1.setSeriesShapesVisible(15, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setSeriesShapesVisible(2147483647, (java.lang.Boolean)false);
      fail("Expected exception of type java.lang.NegativeArraySizeException");
    } catch (java.lang.NegativeArraySizeException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Combined Range XYPlot"+ "'", var10.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test252"); }


    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis("0x00000000");
    org.jfree.chart.axis.Timeline var2 = var1.getTimeline();
    var1.setMinorTickMarkInsideLength(0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test253"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    var0.setBlockHeight(0.3d);
    var0.setBlockWidth(0.05d);

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test254"); }


    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    var0.clear();
    java.util.List var2 = var0.getRowKeys();
    java.lang.Object var3 = var0.clone();
    int var4 = var0.getRowCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var7 = var0.getMeanValue(19, (-655360));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test255"); }


    org.jfree.chart.annotations.XYPointerAnnotation var4 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    boolean var5 = var4.isOutlineVisible();
    var4.setY(1.05d);
    java.awt.Color var11 = java.awt.Color.getHSBColor(100.0f, (-1.0f), 2.0f);
    java.awt.Color var12 = var11.brighter();
    var4.setBackgroundPaint((java.awt.Paint)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test256"); }


    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var0.setUseSeriesOffset(true);
    java.awt.Paint var3 = var0.getItemLabelPaint();
    double var4 = var0.getItemMargin();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test257"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var6 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var6.setUpperMargin(10.0d);
    var6.setAxisLineVisible(true);
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var12 = var11.getLocation();
    java.awt.Dimension var13 = var11.preferredSize();
    java.awt.Rectangle var14 = var11.bounds();
    java.awt.Point var15 = var0.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var6, (java.awt.geom.Rectangle2D)var14);
    org.jfree.chart.renderer.DefaultPolarItemRenderer var17 = new org.jfree.chart.renderer.DefaultPolarItemRenderer();
    var0.setRenderer(10, (org.jfree.chart.renderer.PolarItemRenderer)var17, true);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var22 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var23 = var22.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var24 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var25 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var22, (org.jfree.chart.urls.XYURLGenerator)var24);
    org.jfree.chart.renderer.xy.StandardXYItemRenderer var26 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, (org.jfree.chart.labels.XYToolTipGenerator)var22);
    java.text.NumberFormat var27 = var22.getYFormat();
    var17.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var22);
    java.lang.String[] var31 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var32 = new org.jfree.chart.axis.SymbolAxis("hi!", var31);
    org.jfree.chart.plot.CompassPlot var33 = new org.jfree.chart.plot.CompassPlot();
    boolean var34 = var32.equals((java.lang.Object)var33);
    java.lang.String var35 = var33.getPlotType();
    java.awt.Paint var36 = var33.getRoseCenterPaint();
    java.awt.Paint var37 = var33.getBackgroundPaint();
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.image.ColorModel var40 = var38.getColorModel();
    var38.updateUI();
    java.lang.String var42 = var38.toString();
    boolean var43 = var38.getInheritsPopupMenu();
    javax.swing.InputMap var44 = var38.getInputMap();
    var38.nextFocus();
    boolean var46 = var38.getInheritsPopupMenu();
    javax.swing.JPanel var47 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var48 = var47.getPreferredSize();
    java.awt.image.ColorModel var49 = var47.getColorModel();
    var47.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var54 = var47.getForeground();
    var38.setForeground(var54);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var57 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var37, (java.awt.Paint)var54, true);
    org.jfree.chart.labels.StandardXYSeriesLabelGenerator var58 = new org.jfree.chart.labels.StandardXYSeriesLabelGenerator();
    var57.setLegendItemLabelGenerator((org.jfree.chart.labels.XYSeriesLabelGenerator)var58);
    var17.setLegendItemURLGenerator((org.jfree.chart.labels.XYSeriesLabelGenerator)var58);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var61 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var63 = var61.getSeriesLinesVisible(10);
    javax.swing.JPanel var65 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var66 = var65.getPreferredSize();
    boolean var67 = var65.getIgnoreRepaint();
    boolean var68 = var65.isLightweight();
    javax.swing.JPanel var69 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var70 = var69.getPreferredSize();
    javax.swing.JPanel var71 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var69.setNextFocusableComponent((java.awt.Component)var71);
    var69.show();
    javax.swing.JPanel var74 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var75 = var74.getLocation();
    java.awt.Dimension var76 = var74.preferredSize();
    java.awt.Rectangle var77 = var74.bounds();
    var69.scrollRectToVisible(var77);
    var65.setBounds(var77);
    var61.setSeriesShape(15, (java.awt.Shape)var77);
    var17.setLegendLine((java.awt.Shape)var77);
    org.jfree.chart.plot.DrawingSupplier var82 = var17.getDrawingSupplier();
    org.jfree.data.xy.DefaultXYZDataset var83 = new org.jfree.data.xy.DefaultXYZDataset();
    org.jfree.data.DomainOrder var84 = var83.getDomainOrder();
    java.lang.String var85 = var84.toString();
    boolean var86 = var17.equals((java.lang.Object)var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Compass Plot"+ "'", var35.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var85 + "' != '" + "DomainOrder.NONE"+ "'", var85.equals("DomainOrder.NONE"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == false);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test258"); }


    org.jfree.chart.renderer.xy.YIntervalRenderer var0 = new org.jfree.chart.renderer.xy.YIntervalRenderer();

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test259"); }


    org.jfree.chart.axis.CyclicNumberAxis var2 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var3 = var2.getTickLabelPaint();
    var2.setVisible(false);
    var2.setMinorTickMarkInsideLength(100.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test260"); }


    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var2 = var0.getSeriesLinesVisible(10);
    java.awt.Stroke var3 = var0.getErrorIndicatorStroke();
    org.jfree.data.general.DefaultKeyedValues2DDataset var4 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var4.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    var4.setValue((java.lang.Number)0.04d, (java.lang.Comparable)(short)(-1), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var13 = var0.findRangeBounds((org.jfree.data.category.CategoryDataset)var4);
    org.jfree.data.general.DefaultKeyedValues2DDataset var14 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.data.Range var15 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var14);
    org.jfree.data.Range var16 = var0.findRangeBounds((org.jfree.data.category.CategoryDataset)var14);
    org.jfree.data.Range var17 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.category.CategoryDataset)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test261"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var3 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var4 = var3.getMargin();
    var0.setAxisOffset(var4);
    boolean var6 = var0.isRangeZoomable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test262"); }


    org.jfree.data.xy.XYIntervalSeriesCollection var0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
    org.jfree.data.xy.XYBarDataset var2 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var0, 10.0d);
    java.lang.Number var3 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset)var0);
    org.jfree.chart.plot.CombinedRangeXYPlot var4 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var5 = var4.getRangeZeroBaselineStroke();
    java.lang.String var6 = var4.getPlotType();
    org.jfree.chart.plot.CategoryMarker var8 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var15 = var14.getTickLabelPaint();
    var9.setFillPaint(var15, true);
    var8.setLabelPaint(var15);
    boolean var19 = var4.removeRangeMarker((org.jfree.chart.plot.Marker)var8);
    org.jfree.chart.axis.AxisLocation var20 = var4.getDomainAxisLocation();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var23 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var26 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var27 = var26.getItemLabelFont();
    double var28 = var26.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var31 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var32 = var31.getItemLabelFont();
    java.awt.Shape var33 = var31.getBaseLegendShape();
    var26.setShape(var33);
    var23.setLegendBar(var33);
    var23.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var38 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var39 = var23.findDomainBounds((org.jfree.data.xy.XYDataset)var38);
    int var40 = var4.getIndexOf((org.jfree.chart.renderer.xy.XYItemRenderer)var23);
    boolean var41 = var0.equals((java.lang.Object)var23);
    int var42 = var0.getSeriesCount();
    org.jfree.data.xy.XYBarDataset var44 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var0, 0.5d);
    org.jfree.data.DefaultKeyedValues var45 = new org.jfree.data.DefaultKeyedValues();
    var45.setValue((java.lang.Comparable)4.0d, (-0.7853981633974483d));
    var45.setValue((java.lang.Comparable)10.0f, (java.lang.Number)1.05d);
    java.util.List var52 = var45.getKeys();
    org.jfree.data.general.DefaultKeyedValues2DDataset var53 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var53.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var58 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.category.CategoryDataset)var53);
    org.jfree.data.Range var60 = org.jfree.data.Range.shift(var58, (-1.0d));
    org.jfree.data.Range var62 = org.jfree.data.Range.scale(var60, 100.0d);
    org.jfree.data.general.DefaultKeyedValues2DDataset var63 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var63.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var68 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.category.CategoryDataset)var63);
    org.jfree.data.Range var70 = org.jfree.data.Range.shift(var68, (-1.0d));
    org.jfree.data.Range var72 = org.jfree.data.Range.scale(var70, 100.0d);
    boolean var73 = var62.intersects(var72);
    org.jfree.data.Range var75 = org.jfree.data.Range.shift(var72, (-1.0d));
    boolean var78 = var72.intersects(Double.NaN, 3.0d);
    java.lang.String var79 = var72.toString();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.Range var81 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds((org.jfree.data.xy.XYDataset)var44, var52, var72, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Combined Range XYPlot"+ "'", var6.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var79 + "' != '" + "Range[0.0,0.0]"+ "'", var79.equals("Range[0.0,0.0]"));

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test263"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var1 = var0.getLocation();
    java.awt.Dimension var2 = var0.preferredSize();
    java.awt.Rectangle var3 = var0.bounds();
    var0.setDoubleBuffered(true);
    java.beans.VetoableChangeListener[] var6 = var0.getVetoableChangeListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test264"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var11 = new org.jfree.chart.entity.ContourEntity(var9, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var14 = var13.isVisible();
    java.lang.Object var15 = var13.clone();
    java.lang.String var16 = var13.getURLText();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.image.ColorModel var19 = var17.getColorModel();
    var17.updateUI();
    java.lang.String var21 = var17.toString();
    java.awt.Color var22 = var17.getForeground();
    var13.setBackgroundPaint((java.awt.Paint)var22);
    int var24 = var22.getRGB();
    int var25 = var22.getBlue();
    org.jfree.chart.plot.dial.DialPlot var26 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var27 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var28 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var27);
    org.jfree.chart.plot.dial.DialValueIndicator var29 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var30 = var29.getInsets();
    int var31 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var29);
    java.awt.Stroke var32 = var29.getOutlineStroke();
    org.jfree.chart.title.TextTitle var34 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var35 = var34.isVisible();
    java.lang.Object var36 = var34.clone();
    java.lang.String var37 = var34.getURLText();
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.image.ColorModel var40 = var38.getColorModel();
    var38.updateUI();
    java.lang.String var42 = var38.toString();
    java.awt.Color var43 = var38.getForeground();
    var34.setBackgroundPaint((java.awt.Paint)var43);
    org.jfree.chart.LegendItem var45 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var9, (java.awt.Paint)var22, var32, (java.awt.Paint)var43);
    var0.setBaseSectionOutlinePaint((java.awt.Paint)var22);
    java.awt.Paint var47 = var0.getLabelBackgroundPaint();
    var0.setMaximumLabelWidth((-0.7853981633974483d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test265"); }


    org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    java.lang.Object var3 = var2.clone();
    int var4 = var2.getMaximumItemCount();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    boolean var7 = var5.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var9 = new org.jfree.chart.plot.ContourPlot();
    var9.setOutlineVisible(false);
    var5.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var9);
    org.jfree.chart.urls.XYURLGenerator var13 = var9.getURLGenerator();
    var2.removePropertyChangeListener((java.beans.PropertyChangeListener)var9);
    float var15 = var9.getForegroundAlpha();
    org.jfree.chart.plot.ValueMarker var17 = new org.jfree.chart.plot.ValueMarker((-1.0d));
    var9.addDomainMarker((org.jfree.chart.plot.Marker)var17);
    var9.setDataAreaRatio(3.0d);
    var9.clearDomainMarkers();
    org.jfree.chart.plot.dial.DialPlot var22 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var23 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var24 = var22.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var23);
    org.jfree.chart.plot.dial.DialValueIndicator var25 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var26 = var25.getInsets();
    int var27 = var22.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var25);
    org.jfree.chart.axis.DateAxis var29 = new org.jfree.chart.axis.DateAxis("0x00000000");
    boolean var31 = var29.isHiddenValue(0L);
    org.jfree.chart.axis.DateTickMarkPosition var32 = var29.getTickMarkPosition();
    boolean var33 = var22.equals((java.lang.Object)var29);
    org.jfree.chart.axis.DateTickMarkPosition var34 = var29.getTickMarkPosition();
    org.jfree.data.Range var35 = var9.getDataRange((org.jfree.chart.axis.ValueAxis)var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test266"); }


    org.jfree.chart.labels.HighLowItemLabelGenerator var0 = new org.jfree.chart.labels.HighLowItemLabelGenerator();
    org.jfree.data.time.TimeTableXYDataset var1 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var3 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var4 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var3);
    var1.remove((org.jfree.data.time.TimePeriod)var3, (java.lang.Comparable)100, false);
    org.jfree.data.xy.XYBarDataset var9 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var1, Double.NaN);
    java.lang.Object var10 = var9.clone();
    java.lang.String var13 = var0.generateToolTip((org.jfree.data.xy.XYDataset)var9, 1043495433, 0);
    int var14 = var9.getSeriesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test267"); }


    org.jfree.data.xy.XYIntervalDataItem var6 = new org.jfree.data.xy.XYIntervalDataItem((-0.7853981633974483d), (-1.0d), 0.05d, 0.25d, 1.5d, (-0.7853981633974483d));
    double var7 = var6.getXLowValue();
    java.awt.Window[] var8 = java.awt.Window.getWindows();
    org.jfree.data.resources.DataPackageResources var9 = new org.jfree.data.resources.DataPackageResources();
    java.util.Locale var10 = var9.getLocale();
    java.util.Set var11 = var9.keySet();
    java.lang.Object[][] var12 = var9.getContents();
    java.lang.String[] var16 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var17 = new org.jfree.chart.axis.SymbolAxis("hi!", var16);
    java.lang.Number[][] var18 = new java.lang.Number[][] { };
    java.lang.Number[][] var19 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var20 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var18, var19);
    java.lang.Object[][][] var21 = new java.lang.Object[][][] { var19};
    org.jfree.data.xy.DefaultWindDataset var22 = new org.jfree.data.xy.DefaultWindDataset(var16, var21);
    org.jfree.chart.axis.SymbolAxis var23 = new org.jfree.chart.axis.SymbolAxis("d", var16);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.contour.DefaultContourDataset var24 = new org.jfree.data.contour.DefaultContourDataset((java.lang.Comparable)var7, (java.lang.Object[])var8, (java.lang.Object[])var12, (java.lang.Object[])var16);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test268"); }


    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var2 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.LegendItem var5 = var2.getLegendItem(1, 0);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var6 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    var2.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var6);
    org.jfree.chart.renderer.xy.CandlestickRenderer var8 = new org.jfree.chart.renderer.xy.CandlestickRenderer(0.75d, false, (org.jfree.chart.labels.XYToolTipGenerator)var6);
    boolean var9 = var8.getUseOutlinePaint();
    int var10 = var8.getAutoWidthMethod();
    var8.setUseOutlinePaint(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test269"); }


    org.jfree.data.time.Minute var1 = new org.jfree.data.time.Minute();
    int var2 = var1.getMinute();
    org.jfree.data.time.Hour var3 = var1.getHour();
    org.jfree.data.time.Day var4 = var3.getDay();
    int var5 = var4.getYear();
    org.jfree.data.time.Hour var6 = new org.jfree.data.time.Hour(52, var4);
    org.jfree.data.time.Minute var7 = new org.jfree.data.time.Minute();
    int var8 = var7.getMinute();
    org.jfree.data.time.Hour var9 = var7.getHour();
    org.jfree.data.time.Day var10 = var9.getDay();
    org.jfree.data.time.Minute var11 = new org.jfree.data.time.Minute();
    int var12 = var11.getMinute();
    org.jfree.data.time.Hour var13 = var11.getHour();
    org.jfree.data.time.Year var16 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var17 = new org.jfree.data.time.Month(1, var16);
    java.util.Locale var18 = javax.swing.JComponent.getDefaultLocale();
    org.jfree.chart.axis.MonthDateFormat var20 = new org.jfree.chart.axis.MonthDateFormat(var18, 2147483647);
    java.util.Calendar var21 = var20.getCalendar();
    long var22 = var17.getLastMillisecond(var21);
    long var23 = var13.getLastMillisecond(var21);
    long var24 = var10.getLastMillisecond(var21);
    long var25 = var6.getFirstMillisecond(var21);
    long var26 = var6.getSerialIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-59008924800001L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1378965599999L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 1378969199999L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 1379070000000L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 996724L);

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test270"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var0 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var3 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var4 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var3);
    org.jfree.data.time.TimePeriodValue var6 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var3, (java.lang.Number)10);
    var1.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var8 = var1.getDrawSharedDomainAxis();
    org.jfree.ui.RectangleEdge var10 = var1.getDomainAxisEdge(2);
    org.jfree.data.general.DefaultKeyedValues2DDataset var11 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var11.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var16 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var11);
    org.jfree.chart.urls.StandardXYURLGenerator var20 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    boolean var21 = var11.equals((java.lang.Object)"hi!");
    org.jfree.data.Range var22 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds((org.jfree.data.category.CategoryDataset)var11);
    boolean var23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var11);
    int var24 = var1.indexOf((org.jfree.data.category.CategoryDataset)var11);
    boolean var25 = var0.equals((java.lang.Object)var24);
    int var27 = var0.getColumnIndex((java.lang.Comparable)1L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var29 = var0.getRowKey(2);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test271"); }


    org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.axis.CategoryLabelPositions var3 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.axis.CategoryLabelPositions var5 = org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(100.0d);
    org.jfree.chart.title.TextTitle var7 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var8 = var7.isVisible();
    java.lang.Object var9 = var7.clone();
    org.jfree.ui.RectangleEdge var10 = var7.getPosition();
    org.jfree.chart.axis.CategoryLabelPosition var11 = var5.getLabelPosition(var10);
    org.jfree.chart.axis.CategoryLabelPositions var12 = org.jfree.chart.axis.CategoryLabelPositions.replaceBottomPosition(var3, var11);
    org.jfree.chart.axis.CategoryLabelPositions var13 = org.jfree.chart.axis.CategoryLabelPositions.replaceRightPosition(var1, var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test272"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    org.jfree.chart.axis.AxisLocation var16 = var0.getDomainAxisLocation();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var19 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var22 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var23 = var22.getItemLabelFont();
    double var24 = var22.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var27 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var28 = var27.getItemLabelFont();
    java.awt.Shape var29 = var27.getBaseLegendShape();
    var22.setShape(var29);
    var19.setLegendBar(var29);
    var19.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var34 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var35 = var19.findDomainBounds((org.jfree.data.xy.XYDataset)var34);
    int var36 = var0.getIndexOf((org.jfree.chart.renderer.xy.XYItemRenderer)var19);
    var0.setRangeCrosshairVisible(false);
    org.jfree.chart.renderer.xy.StackedXYBarRenderer var39 = new org.jfree.chart.renderer.xy.StackedXYBarRenderer();
    javax.swing.JPanel var40 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var41 = var40.getPreferredSize();
    java.awt.image.ColorModel var42 = var40.getColorModel();
    var40.updateUI();
    java.lang.String var44 = var40.toString();
    var40.setFocusable(true);
    boolean var47 = var39.equals((java.lang.Object)var40);
    java.awt.Paint var49 = var39.lookupSeriesOutlinePaint((-1));
    var0.setDomainCrosshairPaint(var49);
    java.awt.Paint var51 = var0.getDomainTickBandPaint();
    org.jfree.chart.util.HexNumberFormat var55 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var56 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var57 = var56.getPreferredSize();
    javax.swing.JPanel var58 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var56.setNextFocusableComponent((java.awt.Component)var58);
    java.util.Locale var60 = var58.getLocale();
    org.jfree.chart.axis.MonthDateFormat var61 = new org.jfree.chart.axis.MonthDateFormat(var60);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var62 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var55, (java.text.DateFormat)var61);
    javax.swing.JPanel var63 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var64 = var63.getPreferredSize();
    javax.swing.JPanel var65 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var63.setNextFocusableComponent((java.awt.Component)var65);
    java.util.Locale var67 = var65.getLocale();
    org.jfree.chart.axis.MonthDateFormat var68 = new org.jfree.chart.axis.MonthDateFormat(var67);
    org.jfree.chart.labels.StandardXYToolTipGenerator var69 = new org.jfree.chart.labels.StandardXYToolTipGenerator("Combined Range XYPlot", (java.text.DateFormat)var61, (java.text.DateFormat)var68);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var70 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer(10, (org.jfree.chart.labels.XYToolTipGenerator)var69);
    var70.setGapThreshold(2.0d);
    org.jfree.chart.renderer.xy.XYItemRenderer[] var73 = new org.jfree.chart.renderer.xy.XYItemRenderer[] { var70};
    var0.setRenderers(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var44.equals("org.jfree.chart.ChartPanel[,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test273"); }


    org.jfree.chart.title.TextTitle var1 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var2 = var1.isVisible();
    java.lang.Object var3 = var1.clone();
    java.lang.String var4 = var1.getURLText();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    java.awt.image.ColorModel var7 = var5.getColorModel();
    var5.updateUI();
    java.lang.String var9 = var5.toString();
    java.awt.Color var10 = var5.getForeground();
    var1.setBackgroundPaint((java.awt.Paint)var10);
    var1.setURLText("jfreechart-onetime-");
    var1.setURLText("org.jfree.chart.renderer.NotOutlierException: hi!");
    java.awt.Font var16 = var1.getFont();
    org.jfree.chart.title.TextTitle var18 = new org.jfree.chart.title.TextTitle("hi!");
    var18.setExpandToFitSpace(false);
    org.jfree.ui.HorizontalAlignment var21 = var18.getTextAlignment();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var24 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var27 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var28 = var27.getItemLabelFont();
    double var29 = var27.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var32 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var33 = var32.getItemLabelFont();
    java.awt.Shape var34 = var32.getBaseLegendShape();
    var27.setShape(var34);
    var24.setLegendBar(var34);
    var24.setDrawBarOutline(true);
    org.jfree.chart.title.LegendTitle var39 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var24);
    org.jfree.ui.VerticalAlignment var40 = var39.getVerticalAlignment();
    org.jfree.chart.block.ColumnArrangement var43 = new org.jfree.chart.block.ColumnArrangement(var21, var40, 0.025d, 1.0E-8d);
    var1.setHorizontalAlignment(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var9.equals("org.jfree.chart.ChartPanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test274"); }


    org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
    java.awt.Shape var1 = var0.getLegendItemShape();
    var0.setLimit(1.0d);
    java.awt.Shape var4 = var0.getLegendItemShape();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test275"); }


    org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
    var1.clearSeriesPaints(false);
    org.jfree.chart.LegendItem var6 = var1.getLegendItem(15, 2013);
    var1.setShapesVisible((java.lang.Boolean)true);
    java.awt.Paint var10 = var1.getLegendTextPaint(51);
    int var11 = var1.getPassCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test276"); }


    org.jfree.chart.plot.dial.DialPlot var0 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var1 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var2 = var0.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var1);
    double var3 = var1.getMajorTickLength();
    var1.setFirstTickLabelVisible(true);
    var1.setTickLabelsVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.04d);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test277"); }


    org.jfree.chart.plot.dial.StandardDialScale var0 = new org.jfree.chart.plot.dial.StandardDialScale();
    java.lang.Object var1 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test278"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
    java.awt.Paint var9 = var8.getZoomOutlinePaint();
    var8.restoreAutoBounds();
    var8.zoomInDomain(2.0d, 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test279"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var1 = var0.isDomainZoomable();
    int var2 = var0.getAxisLocation();
    org.jfree.data.general.ValueDataset var3 = var0.getDataset();
    org.jfree.chart.plot.MeterPlot var4 = new org.jfree.chart.plot.MeterPlot(var3);
    java.awt.Paint var5 = var4.getDialOutlinePaint();
    org.jfree.data.general.ValueDataset var6 = var4.getDataset();
    org.jfree.chart.plot.CombinedRangeXYPlot var9 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var9.clearDomainMarkers();
    java.awt.Paint var11 = var9.getRangeGridlinePaint();
    org.jfree.chart.plot.dial.StandardDialRange var12 = new org.jfree.chart.plot.dial.StandardDialRange(0.2d, 10.0d, var11);
    var12.setOuterRadius(0.75d);
    var12.setOuterRadius(1.05d);
    java.awt.Paint var17 = var12.getPaint();
    var4.setNoDataMessagePaint(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test280"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
    java.awt.Paint var9 = var8.getZoomOutlinePaint();
    var8.list();
    org.jfree.chart.entity.ChartEntity var13 = var8.getEntityForPoint(1, 2147483647);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Set var15 = var8.getFocusTraversalKeys(252);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test281"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var0 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var3 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var4 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var3);
    org.jfree.data.time.TimePeriodValue var6 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var3, (java.lang.Number)10);
    var1.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var8 = var1.getDrawSharedDomainAxis();
    org.jfree.ui.RectangleEdge var10 = var1.getDomainAxisEdge(2);
    org.jfree.data.general.DefaultKeyedValues2DDataset var11 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var11.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var16 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var11);
    org.jfree.chart.urls.StandardXYURLGenerator var20 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    boolean var21 = var11.equals((java.lang.Object)"hi!");
    org.jfree.data.Range var22 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds((org.jfree.data.category.CategoryDataset)var11);
    boolean var23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var11);
    int var24 = var1.indexOf((org.jfree.data.category.CategoryDataset)var11);
    boolean var25 = var0.equals((java.lang.Object)var24);
    int var27 = var0.getColumnIndex((java.lang.Comparable)1L);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var30 = var0.getMaxOutlier(0, (-655360));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test282"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    java.awt.Shape var12 = var10.getBaseLegendShape();
    var5.setShape(var12);
    var2.setLegendBar(var12);
    var2.setDrawBarOutline(true);
    java.awt.Paint var18 = var2.getLegendTextPaint(0);
    java.lang.Object var19 = var2.clone();
    var2.setDrawBarOutline(false);
    double var22 = var2.getMargin();
    org.jfree.chart.plot.dial.StandardDialFrame var24 = new org.jfree.chart.plot.dial.StandardDialFrame();
    boolean var25 = var24.isClippedToWindow();
    javax.swing.JPanel var26 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var27 = var26.getPreferredSize();
    javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var26.setNextFocusableComponent((java.awt.Component)var28);
    var26.show();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var32 = var31.getLocation();
    java.awt.Dimension var33 = var31.preferredSize();
    java.awt.Rectangle var34 = var31.bounds();
    var26.scrollRectToVisible(var34);
    java.awt.Shape var36 = var24.getWindow((java.awt.geom.Rectangle2D)var34);
    var2.setSeriesShape(52, (java.awt.Shape)var34, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test283"); }


    org.jfree.chart.renderer.category.StackedBarRenderer var1 = new org.jfree.chart.renderer.category.StackedBarRenderer(true);

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test284"); }


    org.jfree.chart.plot.ContourPlot var0 = new org.jfree.chart.plot.ContourPlot();
    org.jfree.chart.plot.CategoryMarker var2 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    var0.addRangeMarker((org.jfree.chart.plot.Marker)var2);
    org.jfree.chart.urls.StandardXYURLGenerator var7 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    org.jfree.data.statistics.SimpleHistogramDataset var9 = new org.jfree.data.statistics.SimpleHistogramDataset((java.lang.Comparable)100.0f);
    var9.removeAllBins();
    java.lang.String var13 = var7.generateURL((org.jfree.data.xy.XYDataset)var9, 100, 1);
    var0.setURLGenerator((org.jfree.chart.urls.XYURLGenerator)var7);
    org.jfree.chart.renderer.category.BarRenderer3D var17 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var18 = var17.getItemLabelFont();
    java.awt.Shape var19 = var17.getBaseLegendShape();
    double var20 = var17.getItemMargin();
    java.awt.Stroke var22 = var17.lookupSeriesStroke((-1));
    var0.setDomainCrosshairStroke(var22);
    org.jfree.data.contour.NonGridContourDataset var24 = new org.jfree.data.contour.NonGridContourDataset();
    var0.setDataset((org.jfree.data.contour.ContourDataset)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var27 = var24.getSeriesKey(5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!?hi!=100&amp;hi!=1"+ "'", var13.equals("hi!?hi!=100&amp;hi!=1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test285"); }


    javax.swing.JPanel var1 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var2 = var1.getLocation();
    java.awt.Dimension var3 = var1.preferredSize();
    java.awt.Rectangle var4 = var1.bounds();
    org.jfree.chart.entity.CategoryLabelEntity var7 = new org.jfree.chart.entity.CategoryLabelEntity((java.lang.Comparable)'a', (java.awt.Shape)var4, "d", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");
    org.jfree.chart.entity.ChartEntity var8 = new org.jfree.chart.entity.ChartEntity((java.awt.Shape)var4);
    org.jfree.chart.entity.ChartEntity var10 = new org.jfree.chart.entity.ChartEntity((java.awt.Shape)var4, "Compass Plot");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test286"); }


    org.jfree.data.general.DefaultKeyedValueDataset var0 = new org.jfree.data.general.DefaultKeyedValueDataset();
    org.jfree.data.general.DatasetGroup var1 = var0.getGroup();
    org.jfree.data.general.DefaultKeyedValueDataset var2 = new org.jfree.data.general.DefaultKeyedValueDataset((org.jfree.data.KeyedValue)var0);
    var2.setValue((java.lang.Comparable)100.0f, (java.lang.Number)(-1.0d));
    org.jfree.chart.title.TextTitle var7 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var8 = var7.isVisible();
    boolean var9 = var2.equals((java.lang.Object)var8);
    java.lang.Object var10 = var2.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test287"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var1 = var0.getDomainCrosshairColumnKey();
    var0.setCrosshairDatasetIndex(100);
    org.jfree.chart.axis.CategoryAnchor var4 = var0.getDomainGridlinePosition();
    org.jfree.chart.plot.dial.StandardDialScale var5 = new org.jfree.chart.plot.dial.StandardDialScale();
    double var6 = var5.getUpperBound();
    java.awt.Stroke var7 = var5.getMinorTickStroke();
    boolean var8 = var4.equals((java.lang.Object)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 100.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test288"); }


    org.jfree.chart.plot.Crosshair var0 = new org.jfree.chart.plot.Crosshair();
    double var1 = var0.getValue();
    org.jfree.chart.needle.PinNeedle var2 = new org.jfree.chart.needle.PinNeedle();
    org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryMarker var5 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var6 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var8 = var6.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var11 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var12 = var11.getTickLabelPaint();
    var6.setFillPaint(var12, true);
    var5.setLabelPaint(var12);
    var3.setDomainGridlinePaint(var12);
    var2.setHighlightPaint(var12);
    java.awt.Paint var18 = var2.getHighlightPaint();
    var0.setLabelOutlinePaint(var18);
    java.awt.Font var20 = var0.getLabelFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test289"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var11 = new org.jfree.chart.entity.ContourEntity(var9, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var14 = var13.isVisible();
    java.lang.Object var15 = var13.clone();
    java.lang.String var16 = var13.getURLText();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.image.ColorModel var19 = var17.getColorModel();
    var17.updateUI();
    java.lang.String var21 = var17.toString();
    java.awt.Color var22 = var17.getForeground();
    var13.setBackgroundPaint((java.awt.Paint)var22);
    int var24 = var22.getRGB();
    int var25 = var22.getBlue();
    org.jfree.chart.plot.dial.DialPlot var26 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var27 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var28 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var27);
    org.jfree.chart.plot.dial.DialValueIndicator var29 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var30 = var29.getInsets();
    int var31 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var29);
    java.awt.Stroke var32 = var29.getOutlineStroke();
    org.jfree.chart.title.TextTitle var34 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var35 = var34.isVisible();
    java.lang.Object var36 = var34.clone();
    java.lang.String var37 = var34.getURLText();
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.image.ColorModel var40 = var38.getColorModel();
    var38.updateUI();
    java.lang.String var42 = var38.toString();
    java.awt.Color var43 = var38.getForeground();
    var34.setBackgroundPaint((java.awt.Paint)var43);
    org.jfree.chart.LegendItem var45 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var9, (java.awt.Paint)var22, var32, (java.awt.Paint)var43);
    var0.setBaseSectionOutlinePaint((java.awt.Paint)var22);
    org.jfree.chart.labels.PieSectionLabelGenerator var47 = var0.getLegendLabelToolTipGenerator();
    org.jfree.chart.renderer.category.StackedBarRenderer var50 = new org.jfree.chart.renderer.category.StackedBarRenderer(false);
    org.jfree.chart.labels.CategoryItemLabelGenerator var53 = var50.getItemLabelGenerator((-2), 1);
    var50.setRenderAsPercentages(true);
    java.awt.Stroke var56 = var50.getBaseStroke();
    var0.setSectionOutlineStroke((java.lang.Comparable)15.0d, var56);
    java.awt.Stroke var58 = var0.getLabelLinkStroke();
    boolean var59 = var0.getAutoPopulateSectionOutlinePaint();
    java.awt.Paint var60 = var0.getLabelBackgroundPaint();
    var0.clearSectionOutlinePaints(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test290"); }


    org.jfree.data.general.DefaultKeyedValues2DDataset var0 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var0.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var5 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.category.CategoryDataset)var0);
    org.jfree.data.Range var6 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds((org.jfree.data.category.CategoryDataset)var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test291"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var2 = var0.findDomainBounds((org.jfree.data.xy.XYDataset)var1);
    java.lang.Number var3 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset)var1);
    var1.add(100.0d, Double.NaN, "jfreechart-onetime-");
    var1.clear();
    int var10 = var1.getItemCount(8);
    org.jfree.data.xy.XYSeries var15 = org.jfree.data.time.MovingAverage.createMovingAverage((org.jfree.data.xy.XYDataset)var1, 2013, "hi!?hi!=100&amp;hi!=1", 0.3d, 1.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var18 = var1.getStartXValue(2013, 100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + Double.NaN+ "'", var3.equals(Double.NaN));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test292"); }


    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var2 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var3 = var2.isOutline();
    var2.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var8 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var9 = var8.getLegendItemPaint();
    var2.setShapePaint(var9);
    org.jfree.chart.plot.IntervalMarker var11 = new org.jfree.chart.plot.IntervalMarker(0.2d, 0.04d, var9);
    org.jfree.data.xy.XYDatasetTableModel var12 = new org.jfree.data.xy.XYDatasetTableModel();
    java.lang.Class var14 = var12.getColumnClass((-1));
    org.jfree.chart.util.HexNumberFormat var16 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    javax.swing.JPanel var19 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var17.setNextFocusableComponent((java.awt.Component)var19);
    java.util.Locale var21 = var19.getLocale();
    org.jfree.chart.axis.MonthDateFormat var22 = new org.jfree.chart.axis.MonthDateFormat(var21);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var23 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var16, (java.text.DateFormat)var22);
    org.jfree.chart.util.RelativeDateFormat var24 = new org.jfree.chart.util.RelativeDateFormat();
    boolean var25 = var24.getShowZeroHours();
    var24.setPositivePrefix("d");
    var24.setMinuteSuffix("hi!?hi!=100&amp;hi!=1");
    boolean var30 = var22.equals((java.lang.Object)"hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.axis.PeriodAxisLabelInfo var31 = new org.jfree.chart.axis.PeriodAxisLabelInfo(var14, (java.text.DateFormat)var22);
    java.lang.Class var32 = org.jfree.data.time.RegularTimePeriod.downsize(var14);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.EventListener[] var33 = var11.getListeners(var14);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test293"); }


    org.jfree.chart.labels.HighLowItemLabelGenerator var2 = new org.jfree.chart.labels.HighLowItemLabelGenerator();
    org.jfree.data.time.TimeTableXYDataset var3 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var5 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var6 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var5);
    var3.remove((org.jfree.data.time.TimePeriod)var5, (java.lang.Comparable)100, false);
    org.jfree.data.xy.XYBarDataset var11 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var3, Double.NaN);
    boolean var12 = var3.getDomainIsPointsInTime();
    java.lang.String var15 = var2.generateToolTip((org.jfree.data.xy.XYDataset)var3, 52, 1043495433);
    org.jfree.chart.renderer.xy.CandlestickRenderer var16 = new org.jfree.chart.renderer.xy.CandlestickRenderer((-170.0d), false, (org.jfree.chart.labels.XYToolTipGenerator)var2);
    org.jfree.data.time.TimeTableXYDataset var17 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var19 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var20 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var19);
    var17.remove((org.jfree.data.time.TimePeriod)var19, (java.lang.Comparable)100, false);
    double var25 = var17.getDomainLowerBound(false);
    int var26 = var17.getItemCount();
    org.jfree.data.time.Year var29 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var30 = new org.jfree.data.time.Month(1, var29);
    var17.add((org.jfree.data.time.TimePeriod)var30, 0.3d, (java.lang.Comparable)"org.jfree.chart.renderer.NotOutlierException: hi!");
    org.jfree.data.Range var34 = var16.findRangeBounds((org.jfree.data.xy.XYDataset)var17);
    
    // Checks the contract:  equals-hashcode on var6 and var20
    assertTrue("Contract failed: equals-hashcode on var6 and var20", var6.equals(var20) ? var6.hashCode() == var20.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var20 and var6
    assertTrue("Contract failed: equals-hashcode on var20 and var6", var20.equals(var6) ? var20.hashCode() == var6.hashCode() : true);

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test294"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var11 = new org.jfree.chart.entity.ContourEntity(var9, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var14 = var13.isVisible();
    java.lang.Object var15 = var13.clone();
    java.lang.String var16 = var13.getURLText();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.image.ColorModel var19 = var17.getColorModel();
    var17.updateUI();
    java.lang.String var21 = var17.toString();
    java.awt.Color var22 = var17.getForeground();
    var13.setBackgroundPaint((java.awt.Paint)var22);
    int var24 = var22.getRGB();
    int var25 = var22.getBlue();
    org.jfree.chart.plot.dial.DialPlot var26 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var27 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var28 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var27);
    org.jfree.chart.plot.dial.DialValueIndicator var29 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var30 = var29.getInsets();
    int var31 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var29);
    java.awt.Stroke var32 = var29.getOutlineStroke();
    org.jfree.chart.title.TextTitle var34 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var35 = var34.isVisible();
    java.lang.Object var36 = var34.clone();
    java.lang.String var37 = var34.getURLText();
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.image.ColorModel var40 = var38.getColorModel();
    var38.updateUI();
    java.lang.String var42 = var38.toString();
    java.awt.Color var43 = var38.getForeground();
    var34.setBackgroundPaint((java.awt.Paint)var43);
    org.jfree.chart.LegendItem var45 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var9, (java.awt.Paint)var22, var32, (java.awt.Paint)var43);
    var0.setBaseSectionOutlinePaint((java.awt.Paint)var22);
    org.jfree.chart.labels.PieSectionLabelGenerator var47 = var0.getLegendLabelToolTipGenerator();
    org.jfree.chart.plot.Crosshair var49 = new org.jfree.chart.plot.Crosshair();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var50 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var52 = var50.getSeriesLinesVisible(10);
    var50.setUseOutlinePaint(true);
    boolean var55 = var49.equals((java.lang.Object)true);
    java.awt.Paint var56 = var49.getLabelPaint();
    var0.setSectionPaint((java.lang.Comparable)0.2d, var56);
    javax.swing.JPanel var58 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var59 = var58.getPreferredSize();
    javax.swing.JPanel var60 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var58.setNextFocusableComponent((java.awt.Component)var60);
    java.util.Locale var62 = var60.getLocale();
    javax.swing.JPanel var63 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var64 = var63.getPreferredSize();
    java.awt.Dimension var65 = var60.getSize(var64);
    java.awt.event.ContainerListener[] var66 = var60.getContainerListeners();
    boolean var69 = var60.inside(2147483647, 10);
    java.awt.Dimension var70 = var60.getMinimumSize();
    int var71 = var60.getY();
    java.lang.String var72 = var60.getUIClassID();
    java.awt.Color var73 = var60.getForeground();
    var0.setBaseSectionPaint((java.awt.Paint)var73);
    java.awt.Stroke var75 = var0.getLabelLinkStroke();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "PanelUI"+ "'", var72.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test295"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var6 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var6.setUpperMargin(10.0d);
    var6.setAxisLineVisible(true);
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var12 = var11.getLocation();
    java.awt.Dimension var13 = var11.preferredSize();
    java.awt.Rectangle var14 = var11.bounds();
    java.awt.Point var15 = var0.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var6, (java.awt.geom.Rectangle2D)var14);
    org.jfree.chart.renderer.DefaultPolarItemRenderer var17 = new org.jfree.chart.renderer.DefaultPolarItemRenderer();
    var0.setRenderer(10, (org.jfree.chart.renderer.PolarItemRenderer)var17, true);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var22 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var23 = var22.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var24 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var25 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var22, (org.jfree.chart.urls.XYURLGenerator)var24);
    org.jfree.chart.renderer.xy.StandardXYItemRenderer var26 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, (org.jfree.chart.labels.XYToolTipGenerator)var22);
    java.text.NumberFormat var27 = var22.getYFormat();
    var17.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var22);
    java.lang.String[] var31 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var32 = new org.jfree.chart.axis.SymbolAxis("hi!", var31);
    org.jfree.chart.plot.CompassPlot var33 = new org.jfree.chart.plot.CompassPlot();
    boolean var34 = var32.equals((java.lang.Object)var33);
    java.lang.String var35 = var33.getPlotType();
    java.awt.Paint var36 = var33.getRoseCenterPaint();
    java.awt.Paint var37 = var33.getBackgroundPaint();
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.image.ColorModel var40 = var38.getColorModel();
    var38.updateUI();
    java.lang.String var42 = var38.toString();
    boolean var43 = var38.getInheritsPopupMenu();
    javax.swing.InputMap var44 = var38.getInputMap();
    var38.nextFocus();
    boolean var46 = var38.getInheritsPopupMenu();
    javax.swing.JPanel var47 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var48 = var47.getPreferredSize();
    java.awt.image.ColorModel var49 = var47.getColorModel();
    var47.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var54 = var47.getForeground();
    var38.setForeground(var54);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var57 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var37, (java.awt.Paint)var54, true);
    org.jfree.chart.labels.StandardXYSeriesLabelGenerator var58 = new org.jfree.chart.labels.StandardXYSeriesLabelGenerator();
    var57.setLegendItemLabelGenerator((org.jfree.chart.labels.XYSeriesLabelGenerator)var58);
    var17.setLegendItemURLGenerator((org.jfree.chart.labels.XYSeriesLabelGenerator)var58);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var61 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var63 = var61.getSeriesLinesVisible(10);
    javax.swing.JPanel var65 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var66 = var65.getPreferredSize();
    boolean var67 = var65.getIgnoreRepaint();
    boolean var68 = var65.isLightweight();
    javax.swing.JPanel var69 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var70 = var69.getPreferredSize();
    javax.swing.JPanel var71 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var69.setNextFocusableComponent((java.awt.Component)var71);
    var69.show();
    javax.swing.JPanel var74 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var75 = var74.getLocation();
    java.awt.Dimension var76 = var74.preferredSize();
    java.awt.Rectangle var77 = var74.bounds();
    var69.scrollRectToVisible(var77);
    var65.setBounds(var77);
    var61.setSeriesShape(15, (java.awt.Shape)var77);
    var17.setLegendLine((java.awt.Shape)var77);
    var17.setSeriesFilled(2, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "Compass Plot"+ "'", var35.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test296"); }


    org.jfree.chart.annotations.XYPointerAnnotation var4 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var5 = var4.getLabelOffset();
    org.jfree.ui.TextAnchor var6 = var4.getRotationAnchor();
    double var7 = var4.getY();
    var4.setOutlineVisible(false);
    java.lang.Object var10 = var4.clone();
    var4.setToolTipText("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");
    org.jfree.chart.annotations.XYPointerAnnotation var17 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var18 = var17.getLabelOffset();
    org.jfree.ui.TextAnchor var19 = var17.getRotationAnchor();
    var4.setRotationAnchor(var19);
    double var21 = var4.getArrowLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 5.0d);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test297"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    boolean var2 = var0.getIgnoreRepaint();
    boolean var3 = var0.isLightweight();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      boolean var5 = var0.areFocusTraversalKeysSet(51);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test298"); }


    org.jfree.chart.labels.StandardPieToolTipGenerator var0 = new org.jfree.chart.labels.StandardPieToolTipGenerator();
    java.text.NumberFormat var1 = var0.getPercentFormat();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test299"); }


    double[] var2 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var3 = new org.jfree.chart.annotations.XYPolygonAnnotation(var2);
    org.jfree.chart.annotations.XYPolygonAnnotation var4 = new org.jfree.chart.annotations.XYPolygonAnnotation(var2);
    java.awt.Stroke var5 = var4.getOutlineStroke();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test300"); }


    org.jfree.chart.annotations.XYPointerAnnotation var4 = new org.jfree.chart.annotations.XYPointerAnnotation("", (-0.7853981633974483d), 1.0d, 0.2d);
    java.awt.Paint var5 = var4.getPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test301"); }


    org.jfree.data.general.DefaultKeyedValues2DDataset var1 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var1.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var6 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.category.CategoryDataset)var1);
    org.jfree.data.Range var8 = org.jfree.data.Range.shift(var6, (-1.0d));
    org.jfree.data.Range var10 = org.jfree.data.Range.scale(var8, 100.0d);
    org.jfree.chart.plot.MeterInterval var11 = new org.jfree.chart.plot.MeterInterval("100", var10);
    java.awt.Stroke var12 = var11.getOutlineStroke();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test302"); }


    org.jfree.chart.plot.CombinedDomainCategoryPlot var0 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.lang.Object var1 = var0.clone();
    org.jfree.chart.LegendItemCollection var2 = var0.getLegendItems();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test303"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    java.awt.Paint var1 = var0.getThermometerPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test304"); }


    double[] var2 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var3 = new org.jfree.chart.annotations.XYPolygonAnnotation(var2);
    double[] var6 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var7 = new org.jfree.chart.annotations.XYPolygonAnnotation(var6);
    org.jfree.chart.ClipPath var8 = new org.jfree.chart.ClipPath(var2, var6);
    boolean var9 = var8.isFillPath();
    var8.setClip(false);
    org.jfree.chart.plot.CategoryPlot var12 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var14 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var15 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var14);
    org.jfree.data.time.TimePeriodValue var17 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var14, (java.lang.Number)10);
    var12.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var19 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var21 = var19.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var24 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var25 = var24.getTickLabelPaint();
    var19.setFillPaint(var25, true);
    var12.setDomainCrosshairPaint(var25);
    var8.setFillPaint(var25);
    double[] var30 = var8.getYValue();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    boolean var36 = var31.getInheritsPopupMenu();
    javax.swing.InputMap var37 = var31.getInputMap();
    var31.nextFocus();
    boolean var39 = var31.getInheritsPopupMenu();
    javax.swing.JPanel var40 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var41 = var40.getPreferredSize();
    java.awt.image.ColorModel var42 = var40.getColorModel();
    var40.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var47 = var40.getForeground();
    var31.setForeground(var47);
    var8.setFillPaint((java.awt.Paint)var47);
    java.awt.Paint var50 = var8.getDrawPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test305"); }


    org.jfree.chart.plot.CombinedRangeCategoryPlot var0 = new org.jfree.chart.plot.CombinedRangeCategoryPlot();
    org.jfree.chart.annotations.CategoryPointerAnnotation var5 = new org.jfree.chart.annotations.CategoryPointerAnnotation("[size=0x00000000]", (java.lang.Comparable)1043495433, 0.25d, 100.0d);
    boolean var7 = var0.removeAnnotation((org.jfree.chart.annotations.CategoryAnnotation)var5, false);
    double var8 = var5.getLabelOffset();
    double var9 = var5.getAngle();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 100.0d);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test306"); }


    org.jfree.chart.plot.dial.DialBackground var0 = new org.jfree.chart.plot.dial.DialBackground();
    java.lang.Object var1 = var0.clone();
    java.lang.Object var2 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test307"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    boolean var8 = var0.getDrawSharedDomainAxis();
    var0.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var0.addChangeListener((org.jfree.chart.event.PlotChangeListener)var11);
    org.jfree.chart.event.PlotChangeEvent var13 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var11);
    org.jfree.data.xy.XYDataset var15 = var11.getDataset(750);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test308"); }


    org.jfree.chart.axis.LogAxis var0 = new org.jfree.chart.axis.LogAxis();
    org.jfree.chart.editor.DefaultLogAxisEditor var1 = new org.jfree.chart.editor.DefaultLogAxisEditor(var0);
    org.jfree.chart.util.HexNumberFormat var3 = new org.jfree.chart.util.HexNumberFormat();
    org.jfree.chart.labels.IntervalCategoryToolTipGenerator var4 = new org.jfree.chart.labels.IntervalCategoryToolTipGenerator("Combined Range XYPlot", (java.text.NumberFormat)var3);
    java.lang.Object var5 = var3.clone();
    var0.setNumberFormatOverride((java.text.NumberFormat)var3);
    var0.setUpperMargin(12.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test309"); }


    org.jfree.chart.LegendItem var1 = new org.jfree.chart.LegendItem("hi!?hi!=100&amp;amp;hi!=1");
    org.jfree.chart.DrawableLegendItem var2 = new org.jfree.chart.DrawableLegendItem(var1);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test310"); }


    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var1 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var2 = var1.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var3 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var4 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var1, (org.jfree.chart.urls.XYURLGenerator)var3);
    boolean var5 = var4.getPlotArea();
    org.jfree.chart.labels.HighLowItemLabelGenerator var6 = new org.jfree.chart.labels.HighLowItemLabelGenerator();
    var4.setBaseItemLabelGenerator((org.jfree.chart.labels.XYItemLabelGenerator)var6);
    org.jfree.data.xy.XYSeries var10 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var10.add((-1.0d), (-1.0d), false);
    org.jfree.data.xy.XYSeries var17 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var17.clear();
    double var19 = var17.getMinX();
    org.jfree.data.xy.XYSeriesCollection var20 = new org.jfree.data.xy.XYSeriesCollection(var17);
    var10.addVetoableChangeListener((java.beans.VetoableChangeListener)var20);
    java.lang.String var24 = var6.generateLabel((org.jfree.data.xy.XYDataset)var20, 100, 2147483647);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var27 = var20.getStartXValue(500, 750);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test311"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
    java.awt.Paint var9 = var8.getZoomOutlinePaint();
    var8.list();
    java.awt.Paint var11 = var8.getZoomOutlinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test312"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
    java.awt.Paint var9 = var8.getZoomOutlinePaint();
    var8.restoreAutoBounds();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var11.setUseSeriesOffset(true);
    java.awt.Paint var14 = var11.getErrorIndicatorPaint();
    org.jfree.chart.renderer.category.BarRenderer3D var21 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var22 = var21.getItemLabelFont();
    java.awt.Shape var23 = var21.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var25 = new org.jfree.chart.entity.ContourEntity(var23, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var27 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var28 = var27.isVisible();
    java.lang.Object var29 = var27.clone();
    java.lang.String var30 = var27.getURLText();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var27.setBackgroundPaint((java.awt.Paint)var36);
    int var38 = var36.getRGB();
    int var39 = var36.getBlue();
    org.jfree.chart.plot.dial.DialPlot var40 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var41 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var42 = var40.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var41);
    org.jfree.chart.plot.dial.DialValueIndicator var43 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var44 = var43.getInsets();
    int var45 = var40.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var43);
    java.awt.Stroke var46 = var43.getOutlineStroke();
    org.jfree.chart.title.TextTitle var48 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var49 = var48.isVisible();
    java.lang.Object var50 = var48.clone();
    java.lang.String var51 = var48.getURLText();
    javax.swing.JPanel var52 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var53 = var52.getPreferredSize();
    java.awt.image.ColorModel var54 = var52.getColorModel();
    var52.updateUI();
    java.lang.String var56 = var52.toString();
    java.awt.Color var57 = var52.getForeground();
    var48.setBackgroundPaint((java.awt.Paint)var57);
    org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var23, (java.awt.Paint)var36, var46, (java.awt.Paint)var57);
    var11.setFillPaint((java.awt.Paint)var36, false);
    var8.setZoomFillPaint((java.awt.Paint)var36);
    var8.setDisplayToolTips(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var56 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var56,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var56.equals("org.jfree.chart.ChartPanel[,0,0,0var56,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test313"); }


    org.jfree.data.function.NormalDistributionFunction2D var2 = new org.jfree.data.function.NormalDistributionFunction2D(0.0d, 0.2d);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    java.awt.Shape var7 = var5.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var9 = new org.jfree.chart.entity.ContourEntity(var7, "hi!?hi!=100&amp;hi!=1");
    var9.setToolTipText("0x00000001");
    boolean var12 = var2.equals((java.lang.Object)var9);
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var14 = var13.getLocation();
    java.awt.Dimension var15 = var13.preferredSize();
    java.awt.Rectangle var16 = var13.bounds();
    var13.setDoubleBuffered(true);
    var13.setEnabled(false);
    boolean var21 = var2.equals((java.lang.Object)var13);
    boolean var22 = var13.isForegroundSet();
    javax.swing.JRootPane var23 = var13.getRootPane();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var25 = var24.getPreferredSize();
    javax.swing.JPanel var26 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var24.setNextFocusableComponent((java.awt.Component)var26);
    javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var29 = var28.getLocation();
    java.awt.Dimension var30 = var28.preferredSize();
    var24.setSize(var30);
    var13.setPreferredSize(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test314"); }


    org.jfree.chart.axis.AxisCollection var0 = new org.jfree.chart.axis.AxisCollection();
    java.util.List var1 = var0.getAxesAtLeft();
    java.util.List var2 = var0.getAxesAtTop();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test315"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    boolean var2 = var0.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var4 = new org.jfree.chart.plot.ContourPlot();
    var4.setOutlineVisible(false);
    var0.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var4);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(1.0d, "jfreechart-onetime-");
    boolean var11 = var4.isCompatibleDomainAxis((org.jfree.chart.axis.ValueAxis)var10);
    java.lang.String var12 = var10.getLabel();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "jfreechart-onetime-"+ "'", var12.equals("jfreechart-onetime-"));

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test316"); }


    org.jfree.data.time.Year var3 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var4 = new org.jfree.data.time.Month(1, var3);
    org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
    long var6 = var4.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var7 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var9 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var10 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var9);
    var7.remove((org.jfree.data.time.TimePeriod)var9, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var14 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var4, (org.jfree.data.time.RegularTimePeriod)var9);
    java.util.Date var15 = var9.getEnd();
    org.jfree.data.time.Minute var16 = new org.jfree.data.time.Minute(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test317"); }


    org.jfree.chart.renderer.xy.HighLowRenderer var0 = new org.jfree.chart.renderer.xy.HighLowRenderer();
    boolean var1 = var0.getDrawOpenTicks();
    boolean var2 = var0.getDrawCloseTicks();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test318"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.chart.renderer.PaintScale var1 = var0.getPaintScale();
    org.jfree.chart.renderer.PaintScale var2 = var0.getPaintScale();
    org.jfree.chart.plot.PolarPlot var3 = new org.jfree.chart.plot.PolarPlot();
    boolean var4 = var3.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var9 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var9.setUpperMargin(10.0d);
    var9.setAxisLineVisible(true);
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var15 = var14.getLocation();
    java.awt.Dimension var16 = var14.preferredSize();
    java.awt.Rectangle var17 = var14.bounds();
    java.awt.Point var18 = var3.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var9, (java.awt.geom.Rectangle2D)var17);
    float var19 = var9.getTickMarkOutsideLength();
    org.jfree.chart.title.PaintScaleLegend var20 = new org.jfree.chart.title.PaintScaleLegend(var2, (org.jfree.chart.axis.ValueAxis)var9);
    var20.setStripOutlineVisible(true);
    double var23 = var20.getStripWidth();
    java.awt.Paint var24 = var20.getBackgroundPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 15.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test319"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
    java.awt.Paint var9 = var8.getZoomOutlinePaint();
    var8.list();
    org.jfree.chart.entity.ChartEntity var13 = var8.getEntityForPoint(1, 2147483647);
    var8.setRefreshBuffer(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test320"); }


    double[] var2 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var3 = new org.jfree.chart.annotations.XYPolygonAnnotation(var2);
    double[] var6 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var7 = new org.jfree.chart.annotations.XYPolygonAnnotation(var6);
    org.jfree.chart.ClipPath var8 = new org.jfree.chart.ClipPath(var2, var6);
    org.jfree.chart.annotations.XYPolygonAnnotation var9 = new org.jfree.chart.annotations.XYPolygonAnnotation(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test321"); }


    org.jfree.chart.renderer.xy.XYBarRenderer var1 = new org.jfree.chart.renderer.xy.XYBarRenderer(100.0d);
    boolean var2 = var1.getShadowsVisible();
    boolean var3 = var1.getUseYInterval();
    java.awt.Paint var5 = var1.getLegendTextPaint(10);
    var1.setAutoPopulateSeriesOutlineStroke(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test322"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var1 = var0.isDomainZoomable();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setAxisLocation(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test323"); }


    org.jfree.chart.needle.LongNeedle var0 = new org.jfree.chart.needle.LongNeedle();
    javax.swing.JPanel var1 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var2 = var1.getPreferredSize();
    java.awt.image.ColorModel var3 = var1.getColorModel();
    var1.firePropertyChange("", 0.0f, 0.0f);
    javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var9 = var8.getLocation();
    java.awt.Point var10 = var1.getLocation(var9);
    boolean var11 = var0.equals((java.lang.Object)var9);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var12 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    java.awt.Paint var13 = var12.getShapePaint();
    java.awt.Shape var14 = var12.getLegendArea();
    org.jfree.chart.renderer.category.LevelRenderer var15 = new org.jfree.chart.renderer.category.LevelRenderer();
    double var16 = var15.getItemMargin();
    org.jfree.chart.StrokeMap var17 = new org.jfree.chart.StrokeMap();
    java.lang.Object var18 = var17.clone();
    boolean var19 = var15.equals((java.lang.Object)var17);
    var15.setItemLabelAnchorOffset(4.0d);
    org.jfree.data.KeyedObjects2D var23 = new org.jfree.data.KeyedObjects2D();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var25 = var24.getPreferredSize();
    javax.swing.JPanel var26 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var24.setNextFocusableComponent((java.awt.Component)var26);
    java.util.Locale var28 = var26.getLocale();
    org.jfree.chart.axis.TickUnitSource var29 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var28);
    java.text.NumberFormat var30 = java.text.NumberFormat.getPercentInstance(var28);
    org.jfree.data.time.Year var32 = new org.jfree.data.time.Year();
    var23.addObject((java.lang.Object)var30, (java.lang.Comparable)0.04d, (java.lang.Comparable)var32);
    double[] var36 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var37 = new org.jfree.chart.annotations.XYPolygonAnnotation(var36);
    double[] var40 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var41 = new org.jfree.chart.annotations.XYPolygonAnnotation(var40);
    org.jfree.chart.ClipPath var42 = new org.jfree.chart.ClipPath(var36, var40);
    double[][] var43 = new double[][] { var36};
    double[] var48 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var49 = new org.jfree.chart.annotations.XYPolygonAnnotation(var48);
    double[] var52 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var53 = new org.jfree.chart.annotations.XYPolygonAnnotation(var52);
    org.jfree.chart.ClipPath var54 = new org.jfree.chart.ClipPath(var48, var52);
    double[][] var55 = new double[][] { var48};
    org.jfree.data.category.CategoryDataset var56 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var55);
    org.jfree.data.category.DefaultIntervalCategoryDataset var57 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var43, var55);
    org.jfree.chart.axis.SubCategoryAxis var59 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    var59.configure();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var61 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var63 = var61.getSeriesLinesVisible(10);
    javax.swing.JPanel var65 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var66 = var65.getPreferredSize();
    boolean var67 = var65.getIgnoreRepaint();
    boolean var68 = var65.isLightweight();
    javax.swing.JPanel var69 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var70 = var69.getPreferredSize();
    javax.swing.JPanel var71 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var69.setNextFocusableComponent((java.awt.Component)var71);
    var69.show();
    javax.swing.JPanel var74 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var75 = var74.getLocation();
    java.awt.Dimension var76 = var74.preferredSize();
    java.awt.Rectangle var77 = var74.bounds();
    var69.scrollRectToVisible(var77);
    var65.setBounds(var77);
    var61.setSeriesShape(15, (java.awt.Shape)var77);
    org.jfree.chart.axis.AxisState var81 = new org.jfree.chart.axis.AxisState();
    org.jfree.chart.title.TextTitle var84 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var85 = var84.isVisible();
    java.lang.Object var86 = var84.clone();
    org.jfree.ui.RectangleEdge var87 = var84.getPosition();
    var81.moveCursor(4.0d, var87);
    double var89 = var15.getItemMiddle((java.lang.Comparable)1201L, (java.lang.Comparable)0.04d, (org.jfree.data.category.CategoryDataset)var57, (org.jfree.chart.axis.CategoryAxis)var59, (java.awt.geom.Rectangle2D)var77, var87);
    java.awt.Stroke var92 = var15.getItemOutlineStroke(2013, 8);
    var12.setShapeStroke(var92);
    var0.setOutlineStroke(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test324"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    boolean var8 = var0.getDrawSharedDomainAxis();
    var0.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var0.addChangeListener((org.jfree.chart.event.PlotChangeListener)var11);
    double var13 = var11.getGap();
    org.jfree.chart.renderer.category.BarRenderer3D var20 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var21 = var20.getItemLabelFont();
    java.awt.Shape var22 = var20.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var24 = new org.jfree.chart.entity.ContourEntity(var22, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var26 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var27 = var26.isVisible();
    java.lang.Object var28 = var26.clone();
    java.lang.String var29 = var26.getURLText();
    javax.swing.JPanel var30 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var31 = var30.getPreferredSize();
    java.awt.image.ColorModel var32 = var30.getColorModel();
    var30.updateUI();
    java.lang.String var34 = var30.toString();
    java.awt.Color var35 = var30.getForeground();
    var26.setBackgroundPaint((java.awt.Paint)var35);
    int var37 = var35.getRGB();
    int var38 = var35.getBlue();
    org.jfree.chart.plot.dial.DialPlot var39 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var40 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var41 = var39.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var40);
    org.jfree.chart.plot.dial.DialValueIndicator var42 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var43 = var42.getInsets();
    int var44 = var39.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var42);
    java.awt.Stroke var45 = var42.getOutlineStroke();
    org.jfree.chart.title.TextTitle var47 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var48 = var47.isVisible();
    java.lang.Object var49 = var47.clone();
    java.lang.String var50 = var47.getURLText();
    javax.swing.JPanel var51 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var52 = var51.getPreferredSize();
    java.awt.image.ColorModel var53 = var51.getColorModel();
    var51.updateUI();
    java.lang.String var55 = var51.toString();
    java.awt.Color var56 = var51.getForeground();
    var47.setBackgroundPaint((java.awt.Paint)var56);
    org.jfree.chart.LegendItem var58 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var22, (java.awt.Paint)var35, var45, (java.awt.Paint)var56);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var59 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.lang.Object var60 = var59.clone();
    org.jfree.data.function.PowerFunction2D var63 = new org.jfree.data.function.PowerFunction2D(2.0d, 1.0d);
    org.jfree.chart.axis.CyclicNumberAxis var67 = new org.jfree.chart.axis.CyclicNumberAxis(1.0d, 4.0d, "");
    var67.setInverted(true);
    boolean var70 = var63.equals((java.lang.Object)var67);
    org.jfree.data.Range var71 = var59.getDataRange((org.jfree.chart.axis.ValueAxis)var67);
    var67.setFixedAutoRange((-1.0d));
    org.jfree.chart.entity.AxisEntity var76 = new org.jfree.chart.entity.AxisEntity(var22, (org.jfree.chart.axis.Axis)var67, "item", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");
    int var77 = var11.getDomainAxisIndex((org.jfree.chart.axis.ValueAxis)var67);
    var11.setDomainCrosshairValue(0.14d, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 5.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var34,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var34.equals("org.jfree.chart.ChartPanel[,0,0,0var34,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var55 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var55,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var55.equals("org.jfree.chart.ChartPanel[,0,0,0var55,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == (-1));

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test325"); }


    org.jfree.chart.plot.ContourPlot var0 = new org.jfree.chart.plot.ContourPlot();
    org.jfree.chart.plot.CategoryMarker var2 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    var0.addRangeMarker((org.jfree.chart.plot.Marker)var2);
    org.jfree.chart.urls.StandardXYURLGenerator var7 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    org.jfree.data.statistics.SimpleHistogramDataset var9 = new org.jfree.data.statistics.SimpleHistogramDataset((java.lang.Comparable)100.0f);
    var9.removeAllBins();
    java.lang.String var13 = var7.generateURL((org.jfree.data.xy.XYDataset)var9, 100, 1);
    var0.setURLGenerator((org.jfree.chart.urls.XYURLGenerator)var7);
    int var15 = var0.getBackgroundImageAlignment();
    boolean var16 = var0.isDomainCrosshairVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!?hi!=100&amp;hi!=1"+ "'", var13.equals("hi!?hi!=100&amp;hi!=1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test326"); }


    org.jfree.chart.plot.dial.DialPlot var0 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var1 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var2 = var0.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var1);
    var1.setTickLabelsVisible(false);
    double var5 = var1.getTickRadius();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.7d);

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test327"); }


    org.jfree.chart.LegendItem var1 = new org.jfree.chart.LegendItem("Range[0.0,0.0]");

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test328"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var7 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var9 = var7.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var12 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var13 = var12.getTickLabelPaint();
    var7.setFillPaint(var13, true);
    var0.setDomainCrosshairPaint(var13);
    boolean var17 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.util.ShadowGenerator var18 = var0.getShadowGenerator();
    var0.setDomainGridlinesVisible(true);
    var0.setAnchorValue(0.48d);
    double var23 = var0.getAnchorValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.48d);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test329"); }


    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week(1024, (-1));

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test330"); }


    org.jfree.chart.StandardChartTheme var2 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var3 = var2.getLegendItemPaint();
    java.awt.Paint var4 = var2.getSubtitlePaint();
    java.awt.Font var5 = var2.getLargeFont();
    var2.setShadowVisible(false);
    java.awt.Font var8 = var2.getExtraLargeFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test331"); }


    org.jfree.chart.renderer.xy.DeviationRenderer var2 = new org.jfree.chart.renderer.xy.DeviationRenderer(true, true);
    float var3 = var2.getAlpha();
    org.jfree.data.xy.XYSeries var6 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var6.add((-1.0d), (-1.0d), false);
    org.jfree.data.xy.XYSeries var13 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var13.clear();
    double var15 = var13.getMinX();
    org.jfree.data.xy.XYSeriesCollection var16 = new org.jfree.data.xy.XYSeriesCollection(var13);
    var6.addVetoableChangeListener((java.beans.VetoableChangeListener)var16);
    org.jfree.data.Range var18 = var2.findRangeBounds((org.jfree.data.xy.XYDataset)var16);
    org.jfree.chart.axis.StandardTickUnitSource var19 = new org.jfree.chart.axis.StandardTickUnitSource();
    org.jfree.chart.plot.PolarPlot var20 = new org.jfree.chart.plot.PolarPlot();
    org.jfree.chart.axis.TickUnit var21 = var20.getAngleTickUnit();
    org.jfree.chart.axis.TickUnit var22 = var19.getCeilingTickUnit(var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.xy.XYSeries var23 = var16.getSeries((java.lang.Comparable)var22);
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test332"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var2 = var0.findDomainBounds((org.jfree.data.xy.XYDataset)var1);
    java.lang.Number var3 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset)var1);
    var1.add(100.0d, Double.NaN, "jfreechart-onetime-");
    var1.add(0.3d, 12.0d, "hi!?hi!=100&amp;amp;hi!=1");
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + Double.NaN+ "'", var3.equals(Double.NaN));

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test333"); }


    org.jfree.chart.renderer.xy.XYAreaRenderer2 var0 = new org.jfree.chart.renderer.xy.XYAreaRenderer2();
    java.awt.Shape var2 = var0.lookupLegendShape(750);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test334"); }


    org.jfree.chart.renderer.xy.XYDifferenceRenderer var0 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer();

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test335"); }


    java.awt.Color var2 = java.awt.Color.getColor("CategoryAnchor.MIDDLE", 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test336"); }


    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis("0x00000000");
    var1.setVerticalTickLabels(false);
    var1.setMinorTickMarksVisible(true);
    org.jfree.chart.util.RelativeDateFormat var8 = new org.jfree.chart.util.RelativeDateFormat();
    java.lang.Object var9 = var8.clone();
    org.jfree.chart.axis.DateTickUnit var10 = new org.jfree.chart.axis.DateTickUnit(1, 8, (java.text.DateFormat)var8);
    int var11 = var10.getUnit();
    java.util.Date var12 = var1.calculateLowestVisibleTickValue(var10);
    org.jfree.chart.renderer.category.BarRenderer3D var15 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var16 = var15.getItemLabelFont();
    org.jfree.chart.labels.ItemLabelPosition var19 = var15.getPositiveItemLabelPosition(8, 100);
    boolean var20 = var10.equals((java.lang.Object)var15);
    double var21 = var15.getMaximumBarWidth();
    java.awt.Font var22 = var15.getBaseLegendTextFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test337"); }


    org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var0);
    var1.setMaximumItemCount(0);
    boolean var4 = var1.getNotify();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.TimeSeriesDataItem var6 = var1.getDataItem(2013);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test338"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    org.jfree.chart.labels.ItemLabelPosition var6 = var2.getPositiveItemLabelPosition(8, 100);
    var2.setMinimumBarLength(0.3d);
    org.jfree.chart.plot.DrawingSupplier var9 = var2.getDrawingSupplier();
    boolean var10 = var2.getDataBoundsIncludesVisibleSeriesOnly();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == true);

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test339"); }


    org.jfree.data.xy.XYIntervalSeriesCollection var0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
    org.jfree.data.xy.XYBarDataset var2 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var0, 10.0d);
    java.lang.Number var3 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset)var0);
    org.jfree.chart.plot.CombinedRangeXYPlot var4 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var5 = var4.getRangeZeroBaselineStroke();
    java.lang.String var6 = var4.getPlotType();
    org.jfree.chart.plot.CategoryMarker var8 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var15 = var14.getTickLabelPaint();
    var9.setFillPaint(var15, true);
    var8.setLabelPaint(var15);
    boolean var19 = var4.removeRangeMarker((org.jfree.chart.plot.Marker)var8);
    org.jfree.chart.axis.AxisLocation var20 = var4.getDomainAxisLocation();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var23 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var26 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var27 = var26.getItemLabelFont();
    double var28 = var26.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var31 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var32 = var31.getItemLabelFont();
    java.awt.Shape var33 = var31.getBaseLegendShape();
    var26.setShape(var33);
    var23.setLegendBar(var33);
    var23.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var38 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var39 = var23.findDomainBounds((org.jfree.data.xy.XYDataset)var38);
    int var40 = var4.getIndexOf((org.jfree.chart.renderer.xy.XYItemRenderer)var23);
    boolean var41 = var0.equals((java.lang.Object)var23);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var44 = var0.getStartX((-1), (-334));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Combined Range XYPlot"+ "'", var6.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test340"); }


    org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)"jfreechart-");
    org.jfree.data.time.TimeSeriesTableModel var3 = new org.jfree.data.time.TimeSeriesTableModel(var1, false);
    int var4 = var3.getColumnCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test341"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var1 = var0.getLocation();
    java.awt.Dimension var2 = var0.preferredSize();
    var0.paintImmediately(100, 100, 10, (-1));
    boolean var8 = var0.getIgnoreRepaint();
    boolean var9 = var0.isFocusTraversalPolicyProvider();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var12 = var0.getBaseline(2147483647, (-1));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test342"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
    java.awt.Paint var9 = var8.getZoomOutlinePaint();
    var8.restoreAutoBounds();
    int var11 = var8.getInitialDelay();
    javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var13 = var12.getPreferredSize();
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var12.setNextFocusableComponent((java.awt.Component)var14);
    var12.show();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var18 = var17.getLocation();
    java.awt.Dimension var19 = var17.preferredSize();
    java.awt.Rectangle var20 = var17.bounds();
    var12.scrollRectToVisible(var20);
    var8.computeVisibleRect(var20);
    var8.setMouseZoomable(true);
    javax.swing.ActionMap var25 = var8.getActionMap();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 750);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test343"); }


    org.jfree.chart.util.HexNumberFormat var2 = new org.jfree.chart.util.HexNumberFormat();
    org.jfree.chart.labels.IntervalCategoryToolTipGenerator var3 = new org.jfree.chart.labels.IntervalCategoryToolTipGenerator("Combined Range XYPlot", (java.text.NumberFormat)var2);
    org.jfree.chart.labels.StandardCrosshairLabelGenerator var4 = new org.jfree.chart.labels.StandardCrosshairLabelGenerator("15,963d6h59m59.999s", (java.text.NumberFormat)var2);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test344"); }


    org.jfree.data.general.WaferMapDataset var3 = new org.jfree.data.general.WaferMapDataset(2, 15, (java.lang.Number)5.0d);
    var3.addValue(1, 1043495433, 500);
    var3.setMaxChipX(4);

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test345"); }


    org.jfree.data.xy.DefaultXYZDataset var0 = new org.jfree.data.xy.DefaultXYZDataset();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var2 = var0.getSeriesKey(100);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test346"); }


    org.jfree.data.xy.XYIntervalSeriesCollection var0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
    org.jfree.data.xy.XYBarDataset var2 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var0, 10.0d);
    java.lang.Number var3 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue((org.jfree.data.xy.XYDataset)var0);
    org.jfree.chart.plot.CombinedRangeXYPlot var4 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var5 = var4.getRangeZeroBaselineStroke();
    java.lang.String var6 = var4.getPlotType();
    org.jfree.chart.plot.CategoryMarker var8 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var15 = var14.getTickLabelPaint();
    var9.setFillPaint(var15, true);
    var8.setLabelPaint(var15);
    boolean var19 = var4.removeRangeMarker((org.jfree.chart.plot.Marker)var8);
    org.jfree.chart.axis.AxisLocation var20 = var4.getDomainAxisLocation();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var23 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var26 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var27 = var26.getItemLabelFont();
    double var28 = var26.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var31 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var32 = var31.getItemLabelFont();
    java.awt.Shape var33 = var31.getBaseLegendShape();
    var26.setShape(var33);
    var23.setLegendBar(var33);
    var23.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var38 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var39 = var23.findDomainBounds((org.jfree.data.xy.XYDataset)var38);
    int var40 = var4.getIndexOf((org.jfree.chart.renderer.xy.XYItemRenderer)var23);
    boolean var41 = var0.equals((java.lang.Object)var23);
    org.jfree.chart.needle.LineNeedle var46 = new org.jfree.chart.needle.LineNeedle();
    java.awt.Stroke var47 = var46.getOutlineStroke();
    org.jfree.chart.StandardChartTheme var50 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var51 = var50.getLegendItemPaint();
    org.jfree.chart.annotations.XYBoxAnnotation var52 = new org.jfree.chart.annotations.XYBoxAnnotation(0.0d, 0.2d, 0.05d, (-90.0d), var47, var51);
    var23.addAnnotation((org.jfree.chart.annotations.XYAnnotation)var52);
    java.lang.Boolean var54 = var23.getCreateEntities();
    org.jfree.chart.labels.BubbleXYItemLabelGenerator var55 = new org.jfree.chart.labels.BubbleXYItemLabelGenerator();
    java.text.DateFormat var56 = var55.getZDateFormat();
    java.text.DateFormat var57 = var55.getYDateFormat();
    var23.setBaseItemLabelGenerator((org.jfree.chart.labels.XYItemLabelGenerator)var55);
    org.jfree.data.xy.CategoryTableXYDataset var59 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.general.DefaultKeyedValues2DDataset var60 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var60.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var65 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var60);
    java.util.List var66 = var60.getColumnKeys();
    org.jfree.data.Range var68 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset)var59, var66, true);
    double var70 = var59.getDomainLowerBound(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var73 = var55.generateLabelString((org.jfree.data.xy.XYDataset)var59, (-13421773), 252);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Combined Range XYPlot"+ "'", var6.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var65 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == Double.NaN);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test347"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setOpaque(true);
    boolean var3 = var0.isCursorSet();
    javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var5 = var4.getPreferredSize();
    java.awt.image.ColorModel var6 = var4.getColorModel();
    var4.updateUI();
    java.lang.String var8 = var4.toString();
    boolean var9 = var4.getInheritsPopupMenu();
    javax.swing.InputMap var10 = var4.getInputMap();
    var4.nextFocus();
    boolean var12 = var4.getInheritsPopupMenu();
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var14 = var13.getPreferredSize();
    java.awt.image.ColorModel var15 = var13.getColorModel();
    var13.updateUI();
    java.lang.String var17 = var13.toString();
    javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    boolean var19 = var13.isFocusCycleRoot((java.awt.Container)var18);
    var13.enableInputMethods(true);
    boolean var22 = var13.isPaintingForPrint();
    var4.setNextFocusableComponent((java.awt.Component)var13);
    var0.remove((java.awt.Component)var13);
    var0.setAlignmentX(1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var8,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var8.equals("org.jfree.chart.ChartPanel[,0,0,0var8,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var17,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var17.equals("org.jfree.chart.ChartPanel[,0,0,0var17,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test348"); }


    org.jfree.chart.StandardChartTheme var2 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var3 = var2.getLegendItemPaint();
    java.awt.Paint var4 = var2.getSubtitlePaint();
    java.awt.Font var5 = var2.getLargeFont();
    java.awt.Paint var6 = var2.getWallPaint();
    org.jfree.chart.renderer.xy.XYBarPainter var7 = var2.getXYBarPainter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test349"); }


    org.jfree.chart.editor.ChartEditorFactory var0 = org.jfree.chart.editor.ChartEditorManager.getChartEditorFactory();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test350"); }


    org.jfree.chart.renderer.category.MinMaxCategoryRenderer var0 = new org.jfree.chart.renderer.category.MinMaxCategoryRenderer();
    java.lang.String[] var3 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var4 = new org.jfree.chart.axis.SymbolAxis("hi!", var3);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setGridBandAlternatePaint(var11);
    var4.setFixedDimension(100.0d);
    var4.setGridBandsVisible(false);
    java.awt.Stroke var19 = var4.getAxisLineStroke();
    var0.setGroupStroke(var19);
    javax.swing.Icon var21 = var0.getMinIcon();
    org.jfree.chart.StandardChartTheme var23 = new org.jfree.chart.StandardChartTheme("Compass Plot");
    java.awt.Paint var24 = var23.getTitlePaint();
    java.awt.Paint var25 = var23.getChartBackgroundPaint();
    var0.setGroupPaint(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test351"); }


    org.jfree.data.xy.XIntervalSeriesCollection var0 = new org.jfree.data.xy.XIntervalSeriesCollection();
    org.jfree.data.xy.XIntervalSeries var2 = new org.jfree.data.xy.XIntervalSeries((java.lang.Comparable)1201L);
    var0.addSeries(var2);
    org.jfree.data.general.SeriesDataset[] var4 = new org.jfree.data.general.SeriesDataset[] { var0};
    org.jfree.data.general.CombinedDataset var5 = new org.jfree.data.general.CombinedDataset(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var8 = var5.getX(2147483647, 0);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test352"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[1.0,1.0]", var2, false);
    var2.setBackgroundImageAlignment((-13421773));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.plot.XYPlot var9 = var2.getXYPlot();
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test353"); }


    org.jfree.data.time.Week var1 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var2 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var1);
    var2.setPercentComplete((java.lang.Double)10.0d);
    org.jfree.data.time.Week var6 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var7 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var6);
    var7.setPercentComplete((java.lang.Double)10.0d);
    var2.addSubtask(var7);
    java.lang.Double var11 = var2.getPercentComplete();
    org.jfree.chart.renderer.xy.XYBlockRenderer var12 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var13 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var14 = var12.findDomainBounds((org.jfree.data.xy.XYDataset)var13);
    org.jfree.chart.renderer.category.BarRenderer3D var17 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var18 = var17.getItemLabelFont();
    double var19 = var17.getItemLabelAnchorOffset();
    org.jfree.chart.labels.ItemLabelPosition var22 = var17.getNegativeItemLabelPosition(0, 0);
    double var23 = var22.getAngle();
    var12.setNegativeItemLabelPosition(var22);
    org.jfree.chart.labels.XYSeriesLabelGenerator var25 = var12.getLegendItemToolTipGenerator();
    org.jfree.chart.title.LegendTitle var26 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var12);
    org.jfree.chart.plot.CategoryPlot var27 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var28 = var27.getDomainCrosshairColumnKey();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var29 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var29.setUseSeriesOffset(true);
    var29.setBaseSeriesVisible(true);
    var29.setAutoPopulateSeriesShape(false);
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var36 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var29};
    var27.setRenderers(var36);
    var26.setSources((org.jfree.chart.LegendItemSource[])var36);
    org.jfree.ui.RectangleAnchor var39 = var26.getLegendItemGraphicLocation();
    java.lang.Object var40 = var26.clone();
    org.jfree.util.SortOrder var41 = var26.getSortOrder();
    boolean var42 = var2.equals((java.lang.Object)var41);
    org.jfree.data.time.DynamicTimeSeriesCollection var45 = new org.jfree.data.time.DynamicTimeSeriesCollection(2, (-1));
    int var46 = var45.getSeriesCount();
    boolean var47 = var2.equals((java.lang.Object)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 10.0d+ "'", var11.equals(10.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test354"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    java.awt.Shape var3 = var2.getLegendBar();
    org.jfree.chart.entity.ContourEntity var6 = new org.jfree.chart.entity.ContourEntity(var3, "", "hi!");
    org.jfree.chart.entity.TickLabelEntity var9 = new org.jfree.chart.entity.TickLabelEntity(var3, "hi!", "");
    org.jfree.chart.entity.ContourEntity var12 = new org.jfree.chart.entity.ContourEntity(var3, "-4,-4,4,4", "-4,-4,4,4");
    java.lang.Object var13 = var12.clone();
    org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator var14 = new org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator();
    org.jfree.chart.imagemap.StandardURLTagFragmentGenerator var15 = new org.jfree.chart.imagemap.StandardURLTagFragmentGenerator();
    java.lang.String var16 = var12.getImageMapAreaTag((org.jfree.chart.imagemap.ToolTipTagFragmentGenerator)var14, (org.jfree.chart.imagemap.URLTagFragmentGenerator)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "<area shape=\"rect\" coords=\"-3,-5,3,5\" title=\"-4,-4,4,4\" alt=\"\" href=\"-4,-4,4,4\"/>"+ "'", var16.equals("<area shape=\"rect\" coords=\"-3,-5,3,5\" title=\"-4,-4,4,4\" alt=\"\" href=\"-4,-4,4,4\"/>"));

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test355"); }


    org.jfree.chart.plot.dial.DialValueIndicator var0 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var1 = var0.getInsets();
    java.awt.Stroke var2 = var0.getOutlineStroke();
    javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var3.setNextFocusableComponent((java.awt.Component)var5);
    java.util.Locale var7 = var5.getLocale();
    javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var9 = var8.getPreferredSize();
    java.awt.Dimension var10 = var5.getSize(var9);
    java.awt.event.ContainerListener[] var11 = var5.getContainerListeners();
    javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var13 = var12.getPreferredSize();
    java.awt.image.ColorModel var14 = var12.getColorModel();
    var12.updateUI();
    java.lang.String var16 = var12.toString();
    java.awt.Color var17 = var12.getForeground();
    var5.setBackground(var17);
    var0.setOutlinePaint((java.awt.Paint)var17);
    boolean var20 = var0.isClippedToWindow();
    java.awt.Paint var21 = var0.getBackgroundPaint();
    var0.setAngle(Double.NaN);
    java.lang.String[] var26 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var27 = new org.jfree.chart.axis.SymbolAxis("hi!", var26);
    org.jfree.chart.plot.CompassPlot var28 = new org.jfree.chart.plot.CompassPlot();
    boolean var29 = var27.equals((java.lang.Object)var28);
    java.lang.String var30 = var28.getPlotType();
    java.awt.Paint var31 = var28.getRoseCenterPaint();
    java.awt.Paint var32 = var28.getBackgroundPaint();
    javax.swing.JPanel var33 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var34 = var33.getPreferredSize();
    java.awt.image.ColorModel var35 = var33.getColorModel();
    var33.updateUI();
    java.lang.String var37 = var33.toString();
    boolean var38 = var33.getInheritsPopupMenu();
    javax.swing.InputMap var39 = var33.getInputMap();
    var33.nextFocus();
    boolean var41 = var33.getInheritsPopupMenu();
    javax.swing.JPanel var42 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var43 = var42.getPreferredSize();
    java.awt.image.ColorModel var44 = var42.getColorModel();
    var42.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var49 = var42.getForeground();
    var33.setForeground(var49);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var52 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var32, (java.awt.Paint)var49, true);
    org.jfree.chart.LegendItem var55 = var52.getLegendItem(10, 51);
    org.jfree.chart.plot.CategoryPlot var56 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var58 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var59 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var58);
    org.jfree.data.time.TimePeriodValue var61 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var58, (java.lang.Number)10);
    var56.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    java.awt.Stroke var63 = var56.getRangeMinorGridlineStroke();
    var52.setBaseStroke(var63);
    var0.setOutlineStroke(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var16,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var16.equals("org.jfree.chart.ChartPanel[,0,0,0var16,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Compass Plot"+ "'", var30.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var37,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var37.equals("org.jfree.chart.ChartPanel[,0,0,0var37,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test356"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var0.setDomainZeroBaselineVisible(false);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var4 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var5 = var4.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var6 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var7 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var4, (org.jfree.chart.urls.XYURLGenerator)var6);
    var7.setShapesFilled(true);
    var7.setSeriesVisibleInLegend(8, (java.lang.Boolean)false);
    var0.setRenderer((org.jfree.chart.renderer.xy.XYItemRenderer)var7);
    org.jfree.chart.renderer.xy.XYSplineRenderer var15 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
    var15.clearSeriesPaints(false);
    org.jfree.chart.LegendItem var20 = var15.getLegendItem(15, 2013);
    var0.setRenderer((org.jfree.chart.renderer.xy.XYItemRenderer)var15);
    var15.setDrawOutlines(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test357"); }


    org.jfree.chart.annotations.CategoryTextAnnotation var3 = new org.jfree.chart.annotations.CategoryTextAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (java.lang.Comparable)(short)1, 0.05d);
    java.awt.Font var4 = var3.getFont();
    var3.setRotationAngle(180.0d);
    var3.setRotationAngle(Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test358"); }


    org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var0);
    org.jfree.data.time.Year var5 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var6 = new org.jfree.data.time.Month(1, var5);
    org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
    long var8 = var6.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var9 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var11 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var12 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var11);
    var9.remove((org.jfree.data.time.TimePeriod)var11, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var16 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var6, (org.jfree.data.time.RegularTimePeriod)var11);
    var16.setMinorTickMarksVisible(false);
    org.jfree.data.time.Year var20 = new org.jfree.data.time.Year(100);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var21 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    int var22 = var20.compareTo((java.lang.Object)var21);
    var16.setFirst((org.jfree.data.time.RegularTimePeriod)var20);
    java.lang.String var24 = var20.toString();
    var1.add((org.jfree.data.time.RegularTimePeriod)var20, (java.lang.Number)(short)(-1));
    var1.setDomainDescription("[size=0x00000000]");
    org.jfree.data.time.Second var29 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var30 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var29);
    var30.setMaximumItemCount(0);
    boolean var33 = var30.getNotify();
    double var34 = var30.getMaxY();
    java.lang.Object var35 = var30.clone();
    org.jfree.data.time.Year var38 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var39 = new org.jfree.data.time.Month(1, var38);
    org.jfree.data.time.Year var41 = new org.jfree.data.time.Year();
    org.jfree.data.gantt.Task var42 = new org.jfree.data.gantt.Task("item", (org.jfree.data.time.TimePeriod)var41);
    org.jfree.data.time.TimeSeries var43 = var30.createCopy((org.jfree.data.time.RegularTimePeriod)var38, (org.jfree.data.time.RegularTimePeriod)var41);
    org.jfree.data.time.TimeSeries var44 = var1.addAndOrUpdate(var30);
    java.lang.String var45 = var1.getDomainDescription();
    double var46 = var1.getMaxY();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.update(11, (java.lang.Number)1.5d);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "100"+ "'", var24.equals("100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var45 + "' != '" + "[size=0var450000000]"+ "'", var45.equals("[size=0var450000000]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == (-1.0d));

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test359"); }


    org.jfree.chart.util.RelativeDateFormat var1 = new org.jfree.chart.util.RelativeDateFormat();
    org.jfree.chart.labels.StandardCategoryItemLabelGenerator var2 = new org.jfree.chart.labels.StandardCategoryItemLabelGenerator("org.jfree.chart.renderer.NotOutlierException: hi!", (java.text.DateFormat)var1);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test360"); }


    org.jfree.chart.PaintMap var0 = new org.jfree.chart.PaintMap();

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test361"); }


    org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
    var1.setLinesVisible(true);
    java.lang.Boolean var5 = var1.getSeriesShapesFilled(19);
    boolean var6 = var1.getUseFillPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test362"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var0 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.chart.plot.CombinedDomainCategoryPlot var9 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.util.List var10 = var9.getSubplots();
    org.jfree.data.statistics.BoxAndWhiskerItem var11 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)100.0d, (java.lang.Number)0.3d, (java.lang.Number)2.0d, (java.lang.Number)2, (java.lang.Number)(short)10, (java.lang.Number)10.0f, (java.lang.Number)15, (java.lang.Number)2.0d, var10);
    java.util.List var12 = var11.getOutliers();
    java.util.List var13 = var11.getOutliers();
    java.lang.Number var14 = var11.getQ1();
    java.lang.Number var15 = var11.getMinOutlier();
    var0.add(var11, (java.lang.Comparable)"hi!?hi!=10&amp;hi!=51", (java.lang.Comparable)"jfreechart-onetime-");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var21 = var0.getMinRegularValue(1024, 20);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + 2.0d+ "'", var14.equals(2.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + 15+ "'", var15.equals(15));

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test363"); }


    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow((org.jfree.data.category.CategoryDataset)var0, 10);
    org.jfree.data.statistics.SimpleHistogramBin var5 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
    org.jfree.data.general.PieDataset var7 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(var2, (java.lang.Comparable)0.05d, 175.0d);
    org.jfree.chart.plot.RingPlot var8 = new org.jfree.chart.plot.RingPlot(var7);
    double var9 = var8.getLabelLinkMargin();
    double var10 = var8.getShadowYOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.025d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 4.0d);

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test364"); }


    org.jfree.chart.plot.CombinedDomainCategoryPlot var8 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.util.List var9 = var8.getSubplots();
    org.jfree.data.statistics.BoxAndWhiskerItem var10 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)(-2208960000000L), (java.lang.Number)Double.NaN, (java.lang.Number)51, (java.lang.Number)0.05d, (java.lang.Number)(byte)100, (java.lang.Number)2.0f, (java.lang.Number)15, (java.lang.Number)1.0f, var9);
    java.lang.Number var11 = var10.getQ1();
    java.util.List var12 = var10.getOutliers();
    java.lang.Number var13 = var10.getMinRegularValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + 51+ "'", var11.equals(51));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + (byte)100+ "'", var13.equals((byte)100));

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test365"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    boolean var8 = var0.getDrawSharedDomainAxis();
    var0.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var0.addChangeListener((org.jfree.chart.event.PlotChangeListener)var11);
    org.jfree.chart.event.PlotChangeEvent var13 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var11);
    org.jfree.data.xy.CategoryTableXYDataset var14 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.general.DefaultKeyedValues2DDataset var15 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var15.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var20 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var15);
    java.util.List var21 = var15.getColumnKeys();
    org.jfree.data.Range var23 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset)var14, var21, true);
    double var25 = var14.getDomainLowerBound(true);
    int var26 = var11.indexOf((org.jfree.data.xy.XYDataset)var14);
    org.jfree.data.xy.XYDatasetTableModel var27 = new org.jfree.data.xy.XYDatasetTableModel((org.jfree.data.xy.TableXYDataset)var14);
    java.lang.Class var29 = var27.getColumnClass(500);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test366"); }


    org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var4);
    org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
    var2.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var15 = var14.getTickLabelPaint();
    var9.setFillPaint(var15, true);
    var2.setDomainCrosshairPaint(var15);
    boolean var19 = var1.equals((java.lang.Object)var2);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var21 = var20.getDomainCrosshairColumnKey();
    var20.setCrosshairDatasetIndex(100);
    org.jfree.chart.plot.CombinedRangeXYPlot var24 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var25 = var24.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var27 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var28 = var27.getMargin();
    var24.setAxisOffset(var28);
    var20.setAxisOffset(var28);
    org.jfree.data.category.CategoryDataset var32 = var20.getDataset((-2));
    var20.clearRangeMarkers((-13421773));
    org.jfree.chart.plot.XYPlot var35 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.plot.DatasetRenderingOrder var36 = var35.getDatasetRenderingOrder();
    var20.setDatasetRenderingOrder(var36);
    var2.setDatasetRenderingOrder(var36);
    org.jfree.chart.plot.ContourPlot var39 = new org.jfree.chart.plot.ContourPlot();
    org.jfree.chart.plot.CategoryMarker var41 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    var39.addRangeMarker((org.jfree.chart.plot.Marker)var41);
    var2.addDomainMarker(var41);
    java.awt.Paint var44 = var41.getLabelPaint();
    org.jfree.chart.annotations.CategoryTextAnnotation var48 = new org.jfree.chart.annotations.CategoryTextAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (java.lang.Comparable)(short)1, 0.05d);
    var48.setValue((-170.0d));
    org.jfree.ui.TextAnchor var51 = var48.getRotationAnchor();
    var41.setLabelTextAnchor(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test367"); }


    org.jfree.chart.annotations.XYPointerAnnotation var4 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var5 = var4.getLabelOffset();
    org.jfree.ui.TextAnchor var6 = var4.getRotationAnchor();
    org.jfree.chart.StandardChartTheme var9 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var10 = var9.getLegendItemPaint();
    var4.setOutlinePaint(var10);
    java.lang.String var12 = var4.getURL();
    java.lang.Object var13 = var4.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test368"); }


    org.jfree.chart.plot.CombinedDomainCategoryPlot var8 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.util.List var9 = var8.getSubplots();
    org.jfree.data.statistics.BoxAndWhiskerItem var10 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)100.0d, (java.lang.Number)0.3d, (java.lang.Number)2.0d, (java.lang.Number)2, (java.lang.Number)(short)10, (java.lang.Number)10.0f, (java.lang.Number)15, (java.lang.Number)2.0d, var9);
    java.util.List var11 = var10.getOutliers();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    double var16 = var14.getItemLabelAnchorOffset();
    java.awt.Shape var18 = var14.getSeriesShape(1);
    org.jfree.chart.renderer.category.BarRenderer3D var22 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var23 = var22.getItemLabelFont();
    double var24 = var22.getItemLabelAnchorOffset();
    org.jfree.chart.axis.CyclicNumberAxis var28 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var29 = var28.getTickLabelPaint();
    var22.setLegendTextPaint(0, var29);
    var14.setSeriesFillPaint(100, var29, true);
    boolean var33 = var10.equals((java.lang.Object)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test369"); }


    org.jfree.chart.axis.SegmentedTimeline var0 = org.jfree.chart.axis.SegmentedTimeline.newMondayThroughFridayTimeline();
    javax.swing.JPanel var1 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    float var2 = var1.getAlignmentX();
    javax.accessibility.AccessibleContext var3 = var1.getAccessibleContext();
    boolean var4 = var0.equals((java.lang.Object)var3);
    org.jfree.data.time.Year var8 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var9 = new org.jfree.data.time.Month(1, var8);
    org.jfree.data.time.RegularTimePeriod var10 = var9.previous();
    long var11 = var9.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var12 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var14 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var15 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var14);
    var12.remove((org.jfree.data.time.TimePeriod)var14, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var19 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var9, (org.jfree.data.time.RegularTimePeriod)var14);
    java.util.Date var20 = var14.getEnd();
    org.jfree.data.time.Quarter var21 = new org.jfree.data.time.Quarter(var20);
    org.jfree.data.time.Day var22 = new org.jfree.data.time.Day(var20);
    org.jfree.chart.axis.SegmentedTimeline.Segment var23 = var0.getSegment(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test370"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var11 = new org.jfree.chart.entity.ContourEntity(var9, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var14 = var13.isVisible();
    java.lang.Object var15 = var13.clone();
    java.lang.String var16 = var13.getURLText();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.image.ColorModel var19 = var17.getColorModel();
    var17.updateUI();
    java.lang.String var21 = var17.toString();
    java.awt.Color var22 = var17.getForeground();
    var13.setBackgroundPaint((java.awt.Paint)var22);
    int var24 = var22.getRGB();
    int var25 = var22.getBlue();
    org.jfree.chart.plot.dial.DialPlot var26 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var27 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var28 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var27);
    org.jfree.chart.plot.dial.DialValueIndicator var29 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var30 = var29.getInsets();
    int var31 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var29);
    java.awt.Stroke var32 = var29.getOutlineStroke();
    org.jfree.chart.title.TextTitle var34 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var35 = var34.isVisible();
    java.lang.Object var36 = var34.clone();
    java.lang.String var37 = var34.getURLText();
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.image.ColorModel var40 = var38.getColorModel();
    var38.updateUI();
    java.lang.String var42 = var38.toString();
    java.awt.Color var43 = var38.getForeground();
    var34.setBackgroundPaint((java.awt.Paint)var43);
    org.jfree.chart.LegendItem var45 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var9, (java.awt.Paint)var22, var32, (java.awt.Paint)var43);
    var0.setBaseSectionOutlinePaint((java.awt.Paint)var22);
    org.jfree.chart.labels.PieSectionLabelGenerator var47 = var0.getLegendLabelToolTipGenerator();
    org.jfree.chart.renderer.category.StackedBarRenderer var50 = new org.jfree.chart.renderer.category.StackedBarRenderer(false);
    org.jfree.chart.labels.CategoryItemLabelGenerator var53 = var50.getItemLabelGenerator((-2), 1);
    var50.setRenderAsPercentages(true);
    java.awt.Stroke var56 = var50.getBaseStroke();
    var0.setSectionOutlineStroke((java.lang.Comparable)15.0d, var56);
    java.awt.Stroke var58 = var0.getLabelLinkStroke();
    boolean var59 = var0.getAutoPopulateSectionOutlinePaint();
    org.jfree.chart.plot.PieLabelLinkStyle var60 = var0.getLabelLinkStyle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test371"); }


    org.jfree.chart.plot.dial.DialCap var0 = new org.jfree.chart.plot.dial.DialCap();
    java.awt.Paint var1 = var0.getOutlinePaint();
    double var2 = var0.getRadius();
    org.jfree.data.time.Year var4 = new org.jfree.data.time.Year(100);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var5 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    int var6 = var4.compareTo((java.lang.Object)var5);
    org.jfree.data.time.TimeSeriesDataItem var8 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var4, 175.0d);
    boolean var9 = var0.equals((java.lang.Object)var8);
    org.jfree.chart.plot.CombinedRangeXYPlot var10 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var11 = var10.getRangeZeroBaselineStroke();
    java.lang.String var12 = var10.getPlotType();
    org.jfree.chart.plot.CategoryMarker var14 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var15 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var17 = var15.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var20 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var21 = var20.getTickLabelPaint();
    var15.setFillPaint(var21, true);
    var14.setLabelPaint(var21);
    boolean var25 = var10.removeRangeMarker((org.jfree.chart.plot.Marker)var14);
    java.awt.Paint var27 = var10.getQuadrantPaint(1);
    org.jfree.chart.axis.CyclicNumberAxis var30 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var31 = var30.isAxisLineVisible();
    var30.setAxisLineVisible(true);
    var30.setMinorTickMarksVisible(true);
    org.jfree.chart.plot.CombinedRangeXYPlot var36 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var37 = var36.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CombinedRangeXYPlot var38 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var39 = var38.getRangeZeroBaselineStroke();
    var36.setRangeGridlineStroke(var39);
    var36.setDomainMinorGridlinesVisible(true);
    var36.setRangeZeroBaselineVisible(true);
    var30.setPlot((org.jfree.chart.plot.Plot)var36);
    var10.setDomainAxis((org.jfree.chart.axis.ValueAxis)var30);
    org.jfree.data.xy.XYSeries var49 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    java.lang.Object var50 = var49.clone();
    int var51 = var49.getMaximumItemCount();
    javax.swing.JPanel var52 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var53 = var52.getPreferredSize();
    boolean var54 = var52.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var56 = new org.jfree.chart.plot.ContourPlot();
    var56.setOutlineVisible(false);
    var52.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var56);
    org.jfree.chart.urls.XYURLGenerator var60 = var56.getURLGenerator();
    var49.removePropertyChangeListener((java.beans.PropertyChangeListener)var56);
    float var62 = var56.getForegroundAlpha();
    org.jfree.chart.plot.ValueMarker var64 = new org.jfree.chart.plot.ValueMarker((-1.0d));
    var56.addDomainMarker((org.jfree.chart.plot.Marker)var64);
    java.awt.Stroke var66 = var64.getStroke();
    var10.setRangeZeroBaselineStroke(var66);
    var0.setOutlineStroke(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var12 + "' != '" + "Combined Range XYPlot"+ "'", var12.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test372"); }


    org.jfree.chart.plot.GreyPalette var0 = new org.jfree.chart.plot.GreyPalette();
    double var1 = var0.getMaxZ();
    org.jfree.chart.editor.PaletteSample var2 = new org.jfree.chart.editor.PaletteSample((org.jfree.chart.plot.ColorPalette)var0);
    var2.setFocusTraversalKeysEnabled(false);
    org.jfree.chart.plot.GreyPalette var5 = new org.jfree.chart.plot.GreyPalette();
    double var6 = var5.getMaxZ();
    var2.setPalette((org.jfree.chart.plot.ColorPalette)var5);
    java.awt.Dimension var8 = var2.getPreferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test373"); }


    org.jfree.chart.plot.dial.StandardDialScale var0 = new org.jfree.chart.plot.dial.StandardDialScale();
    var0.setMajorTickIncrement(10.0d);
    double var4 = var0.valueToAngle(0.3d);
    var0.setExtent((-0.7853981633974483d));
    var0.setMinorTickLength(3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 174.49d);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test374"); }


    org.jfree.chart.plot.CombinedRangeCategoryPlot var0 = new org.jfree.chart.plot.CombinedRangeCategoryPlot();
    org.jfree.chart.annotations.CategoryPointerAnnotation var5 = new org.jfree.chart.annotations.CategoryPointerAnnotation("[size=0x00000000]", (java.lang.Comparable)1043495433, 0.25d, 100.0d);
    boolean var7 = var0.removeAnnotation((org.jfree.chart.annotations.CategoryAnnotation)var5, false);
    org.jfree.chart.axis.CategoryLabelPositions var9 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var12 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var13 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var12);
    org.jfree.data.time.TimePeriodValue var15 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var12, (java.lang.Number)10);
    var10.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var17 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var19 = var17.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var22 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var23 = var22.getTickLabelPaint();
    var17.setFillPaint(var23, true);
    var10.setDomainCrosshairPaint(var23);
    boolean var27 = var9.equals((java.lang.Object)var10);
    org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var29 = var28.getDomainCrosshairColumnKey();
    var28.setCrosshairDatasetIndex(100);
    org.jfree.chart.plot.CombinedRangeXYPlot var32 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var33 = var32.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var35 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var36 = var35.getMargin();
    var32.setAxisOffset(var36);
    var28.setAxisOffset(var36);
    org.jfree.data.category.CategoryDataset var40 = var28.getDataset((-2));
    var28.clearRangeMarkers((-13421773));
    org.jfree.chart.plot.XYPlot var43 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.plot.DatasetRenderingOrder var44 = var43.getDatasetRenderingOrder();
    var28.setDatasetRenderingOrder(var44);
    var10.setDatasetRenderingOrder(var44);
    var0.setDatasetRenderingOrder(var44);
    java.lang.Object var48 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test375"); }


    org.jfree.chart.StandardChartTheme var1 = new org.jfree.chart.StandardChartTheme("Compass Plot");
    java.lang.String[] var4 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var5 = new org.jfree.chart.axis.SymbolAxis("hi!", var4);
    org.jfree.chart.plot.CompassPlot var6 = new org.jfree.chart.plot.CompassPlot();
    boolean var7 = var5.equals((java.lang.Object)var6);
    java.lang.String var8 = var6.getPlotType();
    java.awt.Paint var9 = var6.getRoseCenterPaint();
    java.awt.Paint var10 = var6.getBackgroundPaint();
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var12 = var11.getPreferredSize();
    java.awt.image.ColorModel var13 = var11.getColorModel();
    var11.updateUI();
    java.lang.String var15 = var11.toString();
    boolean var16 = var11.getInheritsPopupMenu();
    javax.swing.InputMap var17 = var11.getInputMap();
    var11.nextFocus();
    boolean var19 = var11.getInheritsPopupMenu();
    javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var21 = var20.getPreferredSize();
    java.awt.image.ColorModel var22 = var20.getColorModel();
    var20.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var27 = var20.getForeground();
    var11.setForeground(var27);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var30 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var10, (java.awt.Paint)var27, true);
    var1.setPlotBackgroundPaint((java.awt.Paint)var27);
    org.jfree.chart.plot.dial.DialPlot var32 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var33 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var34 = var32.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var33);
    var33.setTickLabelsVisible(false);
    org.jfree.chart.plot.dial.DialPlot var37 = new org.jfree.chart.plot.dial.DialPlot();
    double var38 = var37.getViewWidth();
    org.jfree.chart.plot.dial.DialScale var40 = var37.getScaleForDataset(1);
    var33.addChangeListener((org.jfree.chart.plot.dial.DialLayerChangeListener)var37);
    javax.swing.JPanel var42 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var43 = var42.getPreferredSize();
    boolean var44 = var42.getIgnoreRepaint();
    boolean var45 = var42.isLightweight();
    javax.swing.JPanel var46 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var47 = var46.getPreferredSize();
    javax.swing.JPanel var48 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var46.setNextFocusableComponent((java.awt.Component)var48);
    var46.show();
    javax.swing.JPanel var51 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var52 = var51.getLocation();
    java.awt.Dimension var53 = var51.preferredSize();
    java.awt.Rectangle var54 = var51.bounds();
    var46.scrollRectToVisible(var54);
    var42.setBounds(var54);
    org.jfree.chart.renderer.category.BarRenderer3D var59 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var60 = var59.getItemLabelFont();
    java.awt.Shape var61 = var59.getBaseLegendShape();
    double var62 = var59.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var63 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var64 = var63.getRangeZeroBaselineStroke();
    var59.setStroke(var64, false);
    org.jfree.chart.renderer.category.BarRenderer3D var69 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var70 = var69.getItemLabelFont();
    double var71 = var69.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var74 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var75 = var74.getItemLabelFont();
    java.awt.Shape var76 = var74.getBaseLegendShape();
    var69.setShape(var76);
    org.jfree.chart.StandardChartTheme var80 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var81 = var80.getLegendItemPaint();
    var69.setItemLabelPaint(var81);
    org.jfree.chart.annotations.XYShapeAnnotation var83 = new org.jfree.chart.annotations.XYShapeAnnotation((java.awt.Shape)var54, var64, var81);
    var33.setMinorTickPaint(var81);
    var1.setLegendItemPaint(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "Compass Plot"+ "'", var8.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var15,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var15.equals("org.jfree.chart.ChartPanel[,0,0,0var15,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var62 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test376"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var7 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var9 = var7.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var12 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var13 = var12.getTickLabelPaint();
    var7.setFillPaint(var13, true);
    var0.setDomainCrosshairPaint(var13);
    java.lang.String var17 = var0.getPlotType();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "Category Plot"+ "'", var17.equals("Category Plot"));

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test377"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var1 = var0.isDomainZoomable();
    int var2 = var0.getAxisLocation();
    org.jfree.data.general.ValueDataset var3 = var0.getDataset();
    org.jfree.chart.plot.CompassPlot var4 = new org.jfree.chart.plot.CompassPlot(var3);
    org.jfree.chart.plot.MeterPlot var5 = new org.jfree.chart.plot.MeterPlot(var3);
    java.awt.Paint var6 = var5.getTickPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test378"); }


    java.lang.String[] var2 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
    org.jfree.chart.plot.CompassPlot var4 = new org.jfree.chart.plot.CompassPlot();
    boolean var5 = var3.equals((java.lang.Object)var4);
    java.lang.String var6 = var4.getPlotType();
    java.awt.Paint var7 = var4.getRoseCenterPaint();
    java.awt.Paint var8 = var4.getBackgroundPaint();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var10 = var9.getPreferredSize();
    java.awt.image.ColorModel var11 = var9.getColorModel();
    var9.updateUI();
    java.lang.String var13 = var9.toString();
    boolean var14 = var9.getInheritsPopupMenu();
    javax.swing.InputMap var15 = var9.getInputMap();
    var9.nextFocus();
    boolean var17 = var9.getInheritsPopupMenu();
    javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var19 = var18.getPreferredSize();
    java.awt.image.ColorModel var20 = var18.getColorModel();
    var18.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var25 = var18.getForeground();
    var9.setForeground(var25);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var28 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var8, (java.awt.Paint)var25, true);
    org.jfree.chart.labels.StandardXYSeriesLabelGenerator var29 = new org.jfree.chart.labels.StandardXYSeriesLabelGenerator();
    var28.setLegendItemLabelGenerator((org.jfree.chart.labels.XYSeriesLabelGenerator)var29);
    org.jfree.chart.LegendItem var33 = var28.getLegendItem(0, (-1));
    var28.setSeriesVisible(51, (java.lang.Boolean)true);
    var28.setBaseSeriesVisible(false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "Compass Plot"+ "'", var6.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var13.equals("org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test379"); }


    org.jfree.chart.urls.StandardXYURLGenerator var3 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    org.jfree.data.statistics.SimpleHistogramDataset var5 = new org.jfree.data.statistics.SimpleHistogramDataset((java.lang.Comparable)100.0f);
    var5.removeAllBins();
    java.lang.String var9 = var3.generateURL((org.jfree.data.xy.XYDataset)var5, 100, 1);
    var5.removeAllBins();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "hi!?hi!=100&amp;hi!=1"+ "'", var9.equals("hi!?hi!=100&amp;hi!=1"));

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test380"); }


    org.jfree.chart.axis.LogarithmicAxis var1 = new org.jfree.chart.axis.LogarithmicAxis("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ");
    java.awt.Paint var2 = var1.getLabelPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test381"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var11 = new org.jfree.chart.entity.ContourEntity(var9, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var14 = var13.isVisible();
    java.lang.Object var15 = var13.clone();
    java.lang.String var16 = var13.getURLText();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.image.ColorModel var19 = var17.getColorModel();
    var17.updateUI();
    java.lang.String var21 = var17.toString();
    java.awt.Color var22 = var17.getForeground();
    var13.setBackgroundPaint((java.awt.Paint)var22);
    int var24 = var22.getRGB();
    int var25 = var22.getBlue();
    org.jfree.chart.plot.dial.DialPlot var26 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var27 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var28 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var27);
    org.jfree.chart.plot.dial.DialValueIndicator var29 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var30 = var29.getInsets();
    int var31 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var29);
    java.awt.Stroke var32 = var29.getOutlineStroke();
    org.jfree.chart.title.TextTitle var34 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var35 = var34.isVisible();
    java.lang.Object var36 = var34.clone();
    java.lang.String var37 = var34.getURLText();
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.image.ColorModel var40 = var38.getColorModel();
    var38.updateUI();
    java.lang.String var42 = var38.toString();
    java.awt.Color var43 = var38.getForeground();
    var34.setBackgroundPaint((java.awt.Paint)var43);
    org.jfree.chart.LegendItem var45 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var9, (java.awt.Paint)var22, var32, (java.awt.Paint)var43);
    var0.setBaseSectionOutlinePaint((java.awt.Paint)var22);
    org.jfree.chart.labels.PieSectionLabelGenerator var47 = var0.getLegendLabelToolTipGenerator();
    org.jfree.chart.plot.dial.DialCap var49 = new org.jfree.chart.plot.dial.DialCap();
    java.awt.Paint var50 = var49.getOutlinePaint();
    var0.setSectionOutlinePaint((java.lang.Comparable)(byte)100, var50);
    java.awt.Paint var52 = var0.getLabelOutlinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);

  }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test382"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var17 = var16.getPreferredSize();
    java.awt.image.ColorModel var18 = var16.getColorModel();
    var16.updateUI();
    java.lang.String var20 = var16.toString();
    boolean var21 = var16.getInheritsPopupMenu();
    double[] var24 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var25 = new org.jfree.chart.annotations.XYPolygonAnnotation(var24);
    java.lang.Object var26 = var25.clone();
    org.jfree.chart.event.AnnotationChangeEvent var27 = new org.jfree.chart.event.AnnotationChangeEvent((java.lang.Object)var16, (org.jfree.chart.annotations.Annotation)var25);
    var0.annotationChanged(var27);
    org.jfree.ui.RectangleInsets var29 = var0.getAxisOffset();
    boolean var30 = var0.isOutlineVisible();
    org.jfree.data.xy.CategoryTableXYDataset var32 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.general.DefaultKeyedValues2DDataset var33 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var33.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var38 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var33);
    java.util.List var39 = var33.getColumnKeys();
    org.jfree.data.Range var41 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset)var32, var39, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mapDatasetToDomainAxes(1, var39);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var20.equals("org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test383"); }


    org.jfree.data.resources.DataPackageResources_pl var0 = new org.jfree.data.resources.DataPackageResources_pl();

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test384"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    org.jfree.chart.axis.ValueAxis var1 = var0.getRangeAxis();
    org.jfree.chart.axis.ValueAxis var2 = var0.getRangeAxis();
    double var3 = var0.getLowerBound();
    var0.setUseSubrangePaint(true);
    java.awt.Paint var6 = var0.getValuePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test385"); }


    org.jfree.chart.axis.AxisState var0 = new org.jfree.chart.axis.AxisState();
    org.jfree.chart.title.TextTitle var3 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var4 = var3.isVisible();
    java.lang.Object var5 = var3.clone();
    org.jfree.ui.RectangleEdge var6 = var3.getPosition();
    var0.moveCursor(4.0d, var6);
    java.util.List var8 = var0.getTicks();
    org.jfree.chart.plot.CombinedDomainCategoryPlot var17 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.util.List var18 = var17.getSubplots();
    org.jfree.data.statistics.BoxAndWhiskerItem var19 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)(-2208960000000L), (java.lang.Number)Double.NaN, (java.lang.Number)51, (java.lang.Number)0.05d, (java.lang.Number)(byte)100, (java.lang.Number)2.0f, (java.lang.Number)15, (java.lang.Number)1.0f, var18);
    var0.setTicks(var18);
    org.jfree.chart.renderer.category.BarRenderer3D var24 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var25 = var24.getItemLabelFont();
    double var26 = var24.getItemLabelAnchorOffset();
    java.awt.Shape var28 = var24.getSeriesShape(1);
    org.jfree.chart.renderer.category.BarRenderer3D var32 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var33 = var32.getItemLabelFont();
    double var34 = var32.getItemLabelAnchorOffset();
    org.jfree.chart.axis.CyclicNumberAxis var38 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var39 = var38.getTickLabelPaint();
    var32.setLegendTextPaint(0, var39);
    var24.setSeriesFillPaint(100, var39, true);
    org.jfree.chart.block.GridArrangement var45 = new org.jfree.chart.block.GridArrangement(2147483647, 100);
    org.jfree.chart.block.CenterArrangement var46 = new org.jfree.chart.block.CenterArrangement();
    var46.clear();
    org.jfree.chart.title.LegendTitle var48 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var24, (org.jfree.chart.block.Arrangement)var45, (org.jfree.chart.block.Arrangement)var46);
    org.jfree.chart.title.TextTitle var50 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var51 = var50.isVisible();
    java.lang.Object var52 = var50.clone();
    org.jfree.ui.RectangleEdge var53 = var50.getPosition();
    var48.setLegendItemGraphicEdge(var53);
    var0.moveCursor(174.49d, var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test386"); }


    org.jfree.chart.axis.LogAxis var0 = new org.jfree.chart.axis.LogAxis();
    org.jfree.chart.editor.DefaultLogAxisEditor var1 = new org.jfree.chart.editor.DefaultLogAxisEditor(var0);
    var1.toggleAutoTick();
    java.awt.peer.ComponentPeer var3 = var1.getPeer();
    org.jfree.chart.axis.CyclicNumberAxis var6 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var6.setVisible(false);
    org.jfree.chart.plot.CombinedRangeXYPlot var9 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var10 = var9.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var12 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var13 = var12.getMargin();
    var9.setAxisOffset(var13);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var17 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var20 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var21 = var20.getItemLabelFont();
    double var22 = var20.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var25 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var26 = var25.getItemLabelFont();
    java.awt.Shape var27 = var25.getBaseLegendShape();
    var20.setShape(var27);
    var17.setLegendBar(var27);
    org.jfree.data.general.DefaultKeyedValues2DDataset var32 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var35 = new org.jfree.chart.entity.CategoryItemEntity(var27, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var32, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.chart.plot.CombinedRangeXYPlot var36 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var37 = var36.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CategoryMarker var39 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var40 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var42 = var40.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var45 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var46 = var45.getTickLabelPaint();
    var40.setFillPaint(var46, true);
    var39.setLabelPaint(var46);
    org.jfree.chart.annotations.XYShapeAnnotation var50 = new org.jfree.chart.annotations.XYShapeAnnotation(var27, var37, var46);
    var9.setRangeCrosshairPaint(var46);
    var6.setAdvanceLinePaint(var46);
    var6.setAutoRangeIncludesZero(false);
    double var55 = var6.getOffset();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setAxisProperties((org.jfree.chart.axis.Axis)var6);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 100.0d);

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test387"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    org.jfree.chart.plot.dial.DialValueIndicator var19 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var20 = var19.getInsets();
    java.awt.Stroke var21 = var19.getOutlineStroke();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var19.setOutlinePaint((java.awt.Paint)var36);
    java.awt.Color var39 = var36.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    double var45 = var42.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var46 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var47 = var46.getRangeZeroBaselineStroke();
    var42.setStroke(var47, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var50 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var51 = var50.isOutline();
    var50.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var56 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var57 = var56.getLegendItemPaint();
    var50.setShapePaint(var57);
    org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var16, (java.awt.Paint)var39, var47, var57);
    var59.setShapeVisible(false);
    java.awt.Font var62 = var59.getLabelFont();
    org.jfree.chart.DrawableLegendItem var63 = new org.jfree.chart.DrawableLegendItem(var59);
    double var64 = var63.getMaxY();
    var63.setX(0.0d);
    double var67 = var63.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.0d);

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test388"); }


    org.jfree.chart.axis.CyclicNumberAxis var2 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var3 = var2.isAxisLineVisible();
    var2.setAxisLineVisible(true);
    var2.setMinorTickMarksVisible(true);
    org.jfree.chart.plot.CombinedRangeXYPlot var8 = new org.jfree.chart.plot.CombinedRangeXYPlot((org.jfree.chart.axis.ValueAxis)var2);
    org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var12 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var13 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var12);
    org.jfree.data.time.TimePeriodValue var15 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var12, (java.lang.Number)10);
    var10.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var17 = var10.getDrawSharedDomainAxis();
    boolean var18 = var10.isDomainPannable();
    org.jfree.chart.axis.AxisLocation var20 = var10.getRangeAxisLocation(5);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.setRangeAxisLocation(1043495433, var20);
      fail("Expected exception of type java.lang.OutOfMemoryError");
    } catch (java.lang.OutOfMemoryError e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test389"); }


    org.jfree.data.time.SimpleTimePeriod var2 = new org.jfree.data.time.SimpleTimePeriod((-59011603200000L), 1L);
    long var3 = var2.getStartMillis();
    long var4 = var2.getStartMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-59011603200000L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-59011603200000L));

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test390"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    java.awt.Paint var17 = var0.getQuadrantPaint(1);
    org.jfree.chart.axis.CyclicNumberAxis var20 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var21 = var20.isAxisLineVisible();
    var20.setAxisLineVisible(true);
    var20.setMinorTickMarksVisible(true);
    org.jfree.chart.plot.CombinedRangeXYPlot var26 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var27 = var26.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CombinedRangeXYPlot var28 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var29 = var28.getRangeZeroBaselineStroke();
    var26.setRangeGridlineStroke(var29);
    var26.setDomainMinorGridlinesVisible(true);
    var26.setRangeZeroBaselineVisible(true);
    var20.setPlot((org.jfree.chart.plot.Plot)var26);
    var0.setDomainAxis((org.jfree.chart.axis.ValueAxis)var20);
    boolean var37 = var0.isDomainCrosshairVisible();
    boolean var38 = var0.isRangeMinorGridlinesVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test391"); }


    org.jfree.chart.renderer.xy.StackedXYBarRenderer var0 = new org.jfree.chart.renderer.xy.StackedXYBarRenderer();
    javax.swing.JPanel var1 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var2 = var1.getPreferredSize();
    java.awt.image.ColorModel var3 = var1.getColorModel();
    var1.updateUI();
    java.lang.String var5 = var1.toString();
    var1.setFocusable(true);
    boolean var8 = var0.equals((java.lang.Object)var1);
    java.awt.Paint var10 = var0.lookupSeriesOutlinePaint((-1));
    int var11 = var0.getPassCount();
    int var12 = var0.getPassCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var5,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var5.equals("org.jfree.chart.ChartPanel[,0,0,0var5,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 3);

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test392"); }


    org.jfree.chart.plot.GreyPalette var0 = new org.jfree.chart.plot.GreyPalette();
    double var1 = var0.getMaxZ();
    org.jfree.chart.editor.PaletteSample var2 = new org.jfree.chart.editor.PaletteSample((org.jfree.chart.plot.ColorPalette)var0);
    var2.setFocusTraversalKeysEnabled(false);
    org.jfree.chart.plot.GreyPalette var5 = new org.jfree.chart.plot.GreyPalette();
    double var6 = var5.getMaxZ();
    var2.setPalette((org.jfree.chart.plot.ColorPalette)var5);
    var5.setLogscale(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1.0d));

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test393"); }


    org.jfree.chart.renderer.category.MinMaxCategoryRenderer var0 = new org.jfree.chart.renderer.category.MinMaxCategoryRenderer();
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var3 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.LegendItem var6 = var3.getLegendItem(1, 0);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var7 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    var3.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var7);
    org.jfree.chart.renderer.xy.CandlestickRenderer var9 = new org.jfree.chart.renderer.xy.CandlestickRenderer(0.75d, false, (org.jfree.chart.labels.XYToolTipGenerator)var7);
    var9.setAutoWidthGap(0.02d);
    boolean var12 = var0.equals((java.lang.Object)0.02d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test394"); }


    org.jfree.chart.renderer.xy.XYShapeRenderer var0 = new org.jfree.chart.renderer.xy.XYShapeRenderer();
    var0.setGuideLinesVisible(true);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    boolean var8 = var5.getItemVisible(0, 0);
    org.jfree.chart.renderer.category.BarPainter var9 = var5.getBarPainter();
    double var10 = var5.getMinimumBarLength();
    java.awt.Stroke var12 = var5.lookupSeriesStroke(2013);
    var0.setGuideLineStroke(var12);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.CategoryAxis var16 = var15.getDomainAxis();
    var15.clearRangeMarkers(2013);
    boolean var19 = var15.isDomainPannable();
    java.awt.Stroke var20 = var15.getRangeCrosshairStroke();
    var0.setSeriesStroke(3, var20, true);
    org.jfree.chart.plot.DrawingSupplier var23 = var0.getDrawingSupplier();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test395"); }


    double[] var2 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var3 = new org.jfree.chart.annotations.XYPolygonAnnotation(var2);
    int var4 = org.jfree.chart.HashUtilities.hashCodeForDoubleArray(var2);
    org.jfree.data.function.PolynomialFunction2D var5 = new org.jfree.data.function.PolynomialFunction2D(var2);
    double[] var6 = var5.getCoefficients();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1043495433);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test396"); }


    org.jfree.chart.title.TextTitle var1 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var2 = var1.isVisible();
    java.lang.Object var3 = var1.clone();
    var1.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
    double var9 = var1.getWidth();
    java.awt.Paint var10 = var1.getBackgroundPaint();
    org.jfree.ui.HorizontalAlignment var11 = var1.getHorizontalAlignment();
    org.jfree.chart.plot.CombinedRangeXYPlot var12 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var13 = var12.getRangeZeroBaselineStroke();
    java.lang.String var14 = var12.getPlotType();
    org.jfree.chart.plot.CategoryMarker var16 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var17 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var19 = var17.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var22 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var23 = var22.getTickLabelPaint();
    var17.setFillPaint(var23, true);
    var16.setLabelPaint(var23);
    boolean var27 = var12.removeRangeMarker((org.jfree.chart.plot.Marker)var16);
    javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.image.ColorModel var30 = var28.getColorModel();
    var28.updateUI();
    java.lang.String var32 = var28.toString();
    boolean var33 = var28.getInheritsPopupMenu();
    double[] var36 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var37 = new org.jfree.chart.annotations.XYPolygonAnnotation(var36);
    java.lang.Object var38 = var37.clone();
    org.jfree.chart.event.AnnotationChangeEvent var39 = new org.jfree.chart.event.AnnotationChangeEvent((java.lang.Object)var28, (org.jfree.chart.annotations.Annotation)var37);
    var12.annotationChanged(var39);
    org.jfree.ui.RectangleInsets var41 = var12.getAxisOffset();
    var1.setMargin(var41);
    org.jfree.ui.VerticalAlignment var43 = var1.getVerticalAlignment();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Combined Range XYPlot"+ "'", var14.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var32 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var32,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var32.equals("org.jfree.chart.ChartPanel[,0,0,0var32,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test397"); }


    org.jfree.data.time.Week var1 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var2 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var1);
    org.jfree.data.time.TimePeriodValue var4 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var1, (java.lang.Number)10);
    org.jfree.data.time.ohlc.OHLCItem var9 = new org.jfree.data.time.ohlc.OHLCItem((org.jfree.data.time.RegularTimePeriod)var1, 100.0d, 0.0d, 0.05d, 0.0d);
    org.jfree.chart.plot.XYPlot var10 = new org.jfree.chart.plot.XYPlot();
    java.lang.Object var11 = var10.clone();
    org.jfree.data.ComparableObjectItem var12 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable)var9, (java.lang.Object)var10);
    org.jfree.data.ComparableObjectSeries var15 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable)var12, false, false);
    int var16 = var15.getItemCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0);

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test398"); }


    org.jfree.chart.panel.CrosshairOverlay var0 = new org.jfree.chart.panel.CrosshairOverlay();
    org.jfree.chart.plot.Crosshair var1 = new org.jfree.chart.plot.Crosshair();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var2 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var4 = var2.getSeriesLinesVisible(10);
    var2.setUseOutlinePaint(true);
    boolean var7 = var1.equals((java.lang.Object)true);
    org.jfree.chart.renderer.xy.HighLowRenderer var8 = new org.jfree.chart.renderer.xy.HighLowRenderer();
    boolean var9 = var1.equals((java.lang.Object)var8);
    var0.addRangeCrosshair(var1);
    java.lang.Object var11 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test399"); }


    org.jfree.chart.renderer.category.BarRenderer3D var4 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var5 = var4.getItemLabelFont();
    double var6 = var4.getItemLabelAnchorOffset();
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var4.setLegendTextPaint(0, var11);
    org.jfree.chart.plot.dial.StandardDialRange var13 = new org.jfree.chart.plot.dial.StandardDialRange(1.05d, 0.025d, var11);
    var13.setBounds(Double.NaN, 0.6428571428571429d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test400"); }


    org.jfree.data.xy.YIntervalSeriesCollection var0 = new org.jfree.data.xy.YIntervalSeriesCollection();
    int var1 = var0.getSeriesCount();
    var0.removeAllSeries();
    int var3 = var0.getSeriesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test401"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var1 = var0.isDomainZoomable();
    int var2 = var0.getAxisLocation();
    org.jfree.data.general.ValueDataset var3 = var0.getDataset();
    org.jfree.chart.plot.MeterPlot var4 = new org.jfree.chart.plot.MeterPlot(var3);
    java.awt.Paint var5 = var4.getDialOutlinePaint();
    org.jfree.chart.plot.dial.DialValueIndicator var6 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var7 = var6.getInsets();
    java.awt.Stroke var8 = var6.getOutlineStroke();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var10 = var9.getPreferredSize();
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var9.setNextFocusableComponent((java.awt.Component)var11);
    java.util.Locale var13 = var11.getLocale();
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var15 = var14.getPreferredSize();
    java.awt.Dimension var16 = var11.getSize(var15);
    java.awt.event.ContainerListener[] var17 = var11.getContainerListeners();
    javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var19 = var18.getPreferredSize();
    java.awt.image.ColorModel var20 = var18.getColorModel();
    var18.updateUI();
    java.lang.String var22 = var18.toString();
    java.awt.Color var23 = var18.getForeground();
    var11.setBackground(var23);
    var6.setOutlinePaint((java.awt.Paint)var23);
    java.awt.Color var26 = var23.brighter();
    var4.setDialOutlinePaint((java.awt.Paint)var26);
    var4.setTickLabelsVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var22 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var22,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var22.equals("org.jfree.chart.ChartPanel[,0,0,0var22,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test402"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    boolean var2 = var0.getIgnoreRepaint();
    java.awt.dnd.DropTarget var3 = var0.getDropTarget();
    org.jfree.chart.plot.dial.DialValueIndicator var4 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var5 = var4.getInsets();
    java.awt.Stroke var6 = var4.getOutlineStroke();
    javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var7.setNextFocusableComponent((java.awt.Component)var9);
    java.util.Locale var11 = var9.getLocale();
    javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var13 = var12.getPreferredSize();
    java.awt.Dimension var14 = var9.getSize(var13);
    java.awt.event.ContainerListener[] var15 = var9.getContainerListeners();
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var17 = var16.getPreferredSize();
    java.awt.image.ColorModel var18 = var16.getColorModel();
    var16.updateUI();
    java.lang.String var20 = var16.toString();
    java.awt.Color var21 = var16.getForeground();
    var9.setBackground(var21);
    var4.setOutlinePaint((java.awt.Paint)var21);
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var25 = var24.getPreferredSize();
    javax.swing.JPanel var26 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var24.setNextFocusableComponent((java.awt.Component)var26);
    java.util.Locale var28 = var26.getLocale();
    javax.swing.JPanel var29 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var30 = var29.getPreferredSize();
    java.awt.Dimension var31 = var26.getSize(var30);
    java.awt.event.ContainerListener[] var32 = var26.getContainerListeners();
    javax.swing.JPanel var33 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var34 = var33.getPreferredSize();
    java.awt.image.ColorModel var35 = var33.getColorModel();
    var33.updateUI();
    java.lang.String var37 = var33.toString();
    java.awt.Color var38 = var33.getForeground();
    var26.setBackground(var38);
    var4.setOutlinePaint((java.awt.Paint)var38);
    org.jfree.chart.block.ColorBlock var43 = new org.jfree.chart.block.ColorBlock((java.awt.Paint)var38, 2.0d, Double.NaN);
    var0.setBackground(var38);
    boolean var45 = var0.isPreferredSizeSet();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var20.equals("org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var37,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var37.equals("org.jfree.chart.ChartPanel[,0,0,0var37,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test403"); }


    org.jfree.chart.axis.SegmentedTimeline var0 = org.jfree.chart.axis.SegmentedTimeline.newMondayThroughFridayTimeline();
    org.jfree.chart.axis.SegmentedTimeline var1 = var0.getBaseTimeline();
    boolean var3 = var0.containsDomainValue(1378963199999L);
    org.jfree.data.time.SimpleTimePeriod var6 = new org.jfree.data.time.SimpleTimePeriod((-59011603200000L), 1L);
    long var7 = var6.getStartMillis();
    java.util.Date var8 = var6.getStart();
    long var9 = var0.getTime(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-59011603200000L));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-59011603200000L));

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test404"); }


    org.jfree.chart.renderer.category.StackedBarRenderer var0 = new org.jfree.chart.renderer.category.StackedBarRenderer();
    java.awt.Paint var1 = var0.getShadowPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test405"); }


    org.jfree.chart.ChartRenderingInfo var1 = new org.jfree.chart.ChartRenderingInfo();
    org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator var2 = new org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator();
    org.jfree.chart.imagemap.StandardURLTagFragmentGenerator var3 = new org.jfree.chart.imagemap.StandardURLTagFragmentGenerator();
    java.lang.String var4 = org.jfree.chart.imagemap.ImageMapUtilities.getImageMap("org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]", var1, (org.jfree.chart.imagemap.ToolTipTagFragmentGenerator)var2, (org.jfree.chart.imagemap.URLTagFragmentGenerator)var3);
    java.lang.String var6 = var3.generateURLFragment("SeriesRenderingOrder.REVERSE");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "<map id=\"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]\" name=\"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]\">\r\n</map>"+ "'", var4.equals("<map id=\"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]\" name=\"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]\">\r\n</map>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + " href=\"SeriesRenderingOrder.REVERSE\""+ "'", var6.equals(" href=\"SeriesRenderingOrder.REVERSE\""));

  }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test406"); }


    org.jfree.data.DefaultKeyedValues2D var1 = new org.jfree.data.DefaultKeyedValues2D(false);
    java.util.List var2 = var1.getColumnKeys();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.removeColumn((java.lang.Comparable)1378963199999L);
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test407"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    double var4 = var2.getItemLabelAnchorOffset();
    java.lang.String[] var8 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var9 = new org.jfree.chart.axis.SymbolAxis("hi!", var8);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var10 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var12 = var10.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var15 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var16 = var15.getTickLabelPaint();
    var10.setFillPaint(var16, true);
    var9.setGridBandAlternatePaint(var16);
    var2.setSeriesFillPaint(2013, var16, false);
    org.jfree.chart.renderer.category.StackedAreaRenderer var23 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.LegendItem var26 = var23.getLegendItem((-1), (-1));
    java.awt.Paint var27 = var23.getBaseOutlinePaint();
    var2.setShadowPaint(var27);
    org.jfree.chart.renderer.category.BarRenderer3D var29 = new org.jfree.chart.renderer.category.BarRenderer3D();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var32 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var35 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var36 = var35.getItemLabelFont();
    double var37 = var35.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var40 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var41 = var40.getItemLabelFont();
    java.awt.Shape var42 = var40.getBaseLegendShape();
    var35.setShape(var42);
    var32.setLegendBar(var42);
    org.jfree.data.general.DefaultKeyedValues2DDataset var47 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var50 = new org.jfree.chart.entity.CategoryItemEntity(var42, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var47, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.data.Range var52 = var29.findRangeBounds((org.jfree.data.category.CategoryDataset)var47, true);
    org.jfree.chart.labels.SymbolicXYItemLabelGenerator var54 = new org.jfree.chart.labels.SymbolicXYItemLabelGenerator();
    org.jfree.chart.urls.TimeSeriesURLGenerator var55 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var56 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer(100, (org.jfree.chart.labels.XYToolTipGenerator)var54, (org.jfree.chart.urls.XYURLGenerator)var55);
    boolean var57 = var56.getPlotShapes();
    boolean var58 = var47.equals((java.lang.Object)var56);
    org.jfree.ui.GradientPaintTransformer var59 = var56.getGradientTransformer();
    var2.setGradientPaintTransformer(var59);
    
    // Checks the contract:  equals-hashcode on var40 and var2
    assertTrue("Contract failed: equals-hashcode on var40 and var2", var40.equals(var2) ? var40.hashCode() == var2.hashCode() : true);
    
    // This assertion (symmetry of equals) fails 
    assertTrue("Contract failed: equals-symmetric on var40 and var2.", var40.equals(var2) == var2.equals(var40));

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test408"); }


    org.jfree.chart.plot.dial.ArcDialFrame var0 = new org.jfree.chart.plot.dial.ArcDialFrame();
    var0.setOuterRadius(0.48d);

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test409"); }


    org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var0);
    var1.setMaximumItemCount(0);
    double var4 = var1.getMaxY();
    org.jfree.data.time.Year var7 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var8 = new org.jfree.data.time.Month(1, var7);
    org.jfree.data.time.RegularTimePeriod var9 = var8.previous();
    int var10 = var8.getMonth();
    org.jfree.data.time.Minute var11 = new org.jfree.data.time.Minute();
    boolean var13 = var11.equals((java.lang.Object)"[Dec 31, 1969 4:00:00 PM --> Dec 31, 1969 4:00:00 PM]");
    org.jfree.data.time.RegularTimePeriod var14 = var11.next();
    javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var16 = var15.getLocation();
    org.jfree.chart.plot.PolarPlot var17 = new org.jfree.chart.plot.PolarPlot();
    boolean var18 = var17.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var23 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var23.setUpperMargin(10.0d);
    var23.setAxisLineVisible(true);
    javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var29 = var28.getLocation();
    java.awt.Dimension var30 = var28.preferredSize();
    java.awt.Rectangle var31 = var28.bounds();
    java.awt.Point var32 = var17.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var23, (java.awt.geom.Rectangle2D)var31);
    java.awt.Rectangle var33 = var15.getBounds(var31);
    org.jfree.chart.entity.CategoryLabelEntity var36 = new org.jfree.chart.entity.CategoryLabelEntity((java.lang.Comparable)var14, (java.awt.Shape)var31, "Time", "Compass Plot");
    org.jfree.data.time.TimeSeries var37 = var1.createCopy((org.jfree.data.time.RegularTimePeriod)var8, var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test410"); }


    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var0 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var1 = var0.isOutline();
    var0.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var6 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var7 = var6.getLegendItemPaint();
    var0.setShapePaint(var7);
    org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var10 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((java.lang.Comparable)(short)10);
    int var12 = var10.getItemCount((-13421773));
    boolean var13 = var0.equals((java.lang.Object)var10);
    org.jfree.chart.plot.CategoryPlot var14 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryMarker var16 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var17 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var19 = var17.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var22 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var23 = var22.getTickLabelPaint();
    var17.setFillPaint(var23, true);
    var16.setLabelPaint(var23);
    var14.setDomainGridlinePaint(var23);
    var14.setDrawSharedDomainAxis(false);
    java.awt.Stroke var30 = var14.getRangeZeroBaselineStroke();
    var0.setShapeStroke(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test411"); }


    org.jfree.data.xy.XIntervalSeriesCollection var0 = new org.jfree.data.xy.XIntervalSeriesCollection();
    org.jfree.data.xy.XIntervalSeries var2 = new org.jfree.data.xy.XIntervalSeries((java.lang.Comparable)1201L);
    var0.addSeries(var2);
    org.jfree.data.general.SeriesDataset[] var4 = new org.jfree.data.general.SeriesDataset[] { var0};
    org.jfree.data.general.CombinedDataset var5 = new org.jfree.data.general.CombinedDataset(var4);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var8 = var5.getStartY(1024, (-1));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test412"); }


    org.jfree.chart.renderer.category.BarRenderer3D var6 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var7 = var6.getItemLabelFont();
    double var8 = var6.getItemLabelAnchorOffset();
    org.jfree.chart.labels.ItemLabelPosition var11 = var6.getNegativeItemLabelPosition(0, 0);
    double var12 = var11.getAngle();
    org.jfree.ui.TextAnchor var13 = var11.getTextAnchor();
    org.jfree.chart.plot.dial.DialValueIndicator var14 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var15 = var14.getInsets();
    java.awt.Stroke var16 = var14.getOutlineStroke();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    javax.swing.JPanel var19 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var17.setNextFocusableComponent((java.awt.Component)var19);
    java.util.Locale var21 = var19.getLocale();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    java.awt.Dimension var24 = var19.getSize(var23);
    java.awt.event.ContainerListener[] var25 = var19.getContainerListeners();
    javax.swing.JPanel var26 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var27 = var26.getPreferredSize();
    java.awt.image.ColorModel var28 = var26.getColorModel();
    var26.updateUI();
    java.lang.String var30 = var26.toString();
    java.awt.Color var31 = var26.getForeground();
    var19.setBackground(var31);
    var14.setOutlinePaint((java.awt.Paint)var31);
    boolean var34 = var14.isClippedToWindow();
    org.jfree.ui.TextAnchor var35 = var14.getTextAnchor();
    org.jfree.chart.axis.NumberTick var37 = new org.jfree.chart.axis.NumberTick((java.lang.Number)(short)0, "jfreechart-onetime-", var13, var35, 1.0d);
    org.jfree.chart.annotations.CategoryTextAnnotation var41 = new org.jfree.chart.annotations.CategoryTextAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (java.lang.Comparable)(short)1, 0.05d);
    var41.setValue((-170.0d));
    org.jfree.ui.TextAnchor var44 = var41.getRotationAnchor();
    org.jfree.chart.axis.NumberTick var46 = new org.jfree.chart.axis.NumberTick((java.lang.Number)19, "hi!?hi!=10&amp;hi!=51", var35, var44, 180.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var30,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var30.equals("org.jfree.chart.ChartPanel[,0,0,0var30,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test413"); }


    org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    java.lang.Object var3 = var2.clone();
    int var4 = var2.getMaximumItemCount();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    boolean var7 = var5.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var9 = new org.jfree.chart.plot.ContourPlot();
    var9.setOutlineVisible(false);
    var5.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var9);
    org.jfree.chart.urls.XYURLGenerator var13 = var9.getURLGenerator();
    var2.removePropertyChangeListener((java.beans.PropertyChangeListener)var9);
    float var15 = var9.getForegroundAlpha();
    double var16 = var9.getRangeCrosshairValue();
    java.lang.String[] var19 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var20 = new org.jfree.chart.axis.SymbolAxis("hi!", var19);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var21 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var23 = var21.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var26 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var27 = var26.getTickLabelPaint();
    var21.setFillPaint(var27, true);
    var20.setGridBandAlternatePaint(var27);
    boolean var31 = var9.isCompatibleDomainAxis((org.jfree.chart.axis.ValueAxis)var20);
    var9.zoom(0.05d);
    var9.zoomDomainAxes(0.48d, (-170.0d), 1.05d, 0.7d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test414"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    var0.addCornerTextItem("0x00000001");
    var0.setAngleGridlinesVisible(false);
    org.jfree.chart.plot.PolarPlot var5 = new org.jfree.chart.plot.PolarPlot();
    boolean var6 = var5.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var11 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var11.setUpperMargin(10.0d);
    var11.setAxisLineVisible(true);
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var17 = var16.getLocation();
    java.awt.Dimension var18 = var16.preferredSize();
    java.awt.Rectangle var19 = var16.bounds();
    java.awt.Point var20 = var5.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var11, (java.awt.geom.Rectangle2D)var19);
    org.jfree.chart.renderer.DefaultPolarItemRenderer var22 = new org.jfree.chart.renderer.DefaultPolarItemRenderer();
    var5.setRenderer(10, (org.jfree.chart.renderer.PolarItemRenderer)var22, true);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var27 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var28 = var27.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var29 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var30 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var27, (org.jfree.chart.urls.XYURLGenerator)var29);
    org.jfree.chart.renderer.xy.StandardXYItemRenderer var31 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, (org.jfree.chart.labels.XYToolTipGenerator)var27);
    java.text.NumberFormat var32 = var27.getYFormat();
    var22.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var27);
    java.lang.String[] var36 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var37 = new org.jfree.chart.axis.SymbolAxis("hi!", var36);
    org.jfree.chart.plot.CompassPlot var38 = new org.jfree.chart.plot.CompassPlot();
    boolean var39 = var37.equals((java.lang.Object)var38);
    java.lang.String var40 = var38.getPlotType();
    java.awt.Paint var41 = var38.getRoseCenterPaint();
    java.awt.Paint var42 = var38.getBackgroundPaint();
    javax.swing.JPanel var43 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var44 = var43.getPreferredSize();
    java.awt.image.ColorModel var45 = var43.getColorModel();
    var43.updateUI();
    java.lang.String var47 = var43.toString();
    boolean var48 = var43.getInheritsPopupMenu();
    javax.swing.InputMap var49 = var43.getInputMap();
    var43.nextFocus();
    boolean var51 = var43.getInheritsPopupMenu();
    javax.swing.JPanel var52 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var53 = var52.getPreferredSize();
    java.awt.image.ColorModel var54 = var52.getColorModel();
    var52.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var59 = var52.getForeground();
    var43.setForeground(var59);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var62 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var42, (java.awt.Paint)var59, true);
    org.jfree.chart.labels.StandardXYSeriesLabelGenerator var63 = new org.jfree.chart.labels.StandardXYSeriesLabelGenerator();
    var62.setLegendItemLabelGenerator((org.jfree.chart.labels.XYSeriesLabelGenerator)var63);
    var22.setLegendItemURLGenerator((org.jfree.chart.labels.XYSeriesLabelGenerator)var63);
    boolean var66 = var22.getDrawOutlineWhenFilled();
    var0.setRenderer((org.jfree.chart.renderer.PolarItemRenderer)var22);
    org.jfree.chart.urls.XYURLGenerator var68 = var22.getURLGenerator();
    org.jfree.data.general.DefaultKeyedValues2DDataset var69 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var69.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.chart.axis.PeriodAxis var75 = new org.jfree.chart.axis.PeriodAxis("Compass Plot");
    org.jfree.chart.axis.PeriodAxisLabelInfo[] var76 = new org.jfree.chart.axis.PeriodAxisLabelInfo[] { };
    var75.setLabelInfo(var76);
    boolean var78 = var69.equals((java.lang.Object)var75);
    boolean var79 = var75.isInverted();
    java.awt.Paint var80 = var75.getMinorTickMarkPaint();
    var22.setFillPaint(var80, false);
    org.jfree.chart.plot.PolarPlot var83 = new org.jfree.chart.plot.PolarPlot();
    boolean var84 = var83.isCounterClockwise();
    var83.setRadiusGridlinesVisible(false);
    int var87 = var83.getDatasetCount();
    var83.addCornerTextItem("");
    var83.setAngleOffset(0.02d);
    var22.setPlot(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Compass Plot"+ "'", var40.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var47,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var47.equals("org.jfree.chart.ChartPanel[,0,0,0var47,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var78 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == 1);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test415"); }


    org.jfree.chart.axis.CyclicNumberAxis var2 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var3 = var2.isAxisLineVisible();
    var2.setAxisLineVisible(true);
    var2.setMinorTickMarksVisible(true);
    org.jfree.chart.plot.CombinedRangeXYPlot var8 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var9 = var8.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CombinedRangeXYPlot var10 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var11 = var10.getRangeZeroBaselineStroke();
    var8.setRangeGridlineStroke(var11);
    var8.setDomainMinorGridlinesVisible(true);
    var8.setRangeZeroBaselineVisible(true);
    var2.setPlot((org.jfree.chart.plot.Plot)var8);
    org.jfree.chart.plot.Plot var18 = var2.getPlot();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test416"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setNextFocusableComponent((java.awt.Component)var2);
    java.util.Locale var4 = var2.getLocale();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    java.awt.Dimension var7 = var2.getSize(var6);
    java.awt.event.ContainerListener[] var8 = var2.getContainerListeners();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var10 = var9.getPreferredSize();
    java.awt.image.ColorModel var11 = var9.getColorModel();
    var9.updateUI();
    java.lang.String var13 = var9.toString();
    java.awt.Color var14 = var9.getForeground();
    var2.setBackground(var14);
    var2.addNotify();
    var2.setVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var13.equals("org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test417"); }


    org.jfree.chart.renderer.xy.GradientXYBarPainter var3 = new org.jfree.chart.renderer.xy.GradientXYBarPainter(0.25d, (-0.7853981633974483d), 0.14d);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    var6.setDrawBarOutline(true);
    java.lang.Object var21 = var6.clone();
    java.lang.Object var22 = var6.clone();
    boolean var23 = var3.equals((java.lang.Object)var6);
    var6.setBase(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);

  }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test418"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    org.jfree.chart.axis.AxisLocation var16 = var0.getDomainAxisLocation();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var19 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var22 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var23 = var22.getItemLabelFont();
    double var24 = var22.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var27 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var28 = var27.getItemLabelFont();
    java.awt.Shape var29 = var27.getBaseLegendShape();
    var22.setShape(var29);
    var19.setLegendBar(var29);
    var19.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var34 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var35 = var19.findDomainBounds((org.jfree.data.xy.XYDataset)var34);
    int var36 = var0.getIndexOf((org.jfree.chart.renderer.xy.XYItemRenderer)var19);
    org.jfree.chart.event.RendererChangeEvent var38 = new org.jfree.chart.event.RendererChangeEvent((java.lang.Object)var19, false);
    org.jfree.chart.event.ChartChangeEventType var39 = var38.getType();
    org.jfree.chart.plot.XYPlot var40 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.plot.DatasetRenderingOrder var41 = var40.getDatasetRenderingOrder();
    boolean var42 = var39.equals((java.lang.Object)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);

  }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test419"); }


    org.jfree.data.xy.XYIntervalSeriesCollection var0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
    org.jfree.data.xy.XYBarDataset var2 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var0, 10.0d);
    org.jfree.chart.plot.CombinedRangeXYPlot var3 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var4 = var3.getRangeZeroBaselineStroke();
    java.lang.String var5 = var3.getPlotType();
    boolean var6 = var0.hasListener((java.util.EventListener)var3);
    int var7 = var0.getSeriesCount();
    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var8 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    org.jfree.data.general.PieDataset var10 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow((org.jfree.data.category.CategoryDataset)var8, 10);
    org.jfree.data.statistics.SimpleHistogramBin var13 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
    org.jfree.data.general.PieDataset var15 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(var10, (java.lang.Comparable)0.05d, 175.0d);
    org.jfree.chart.plot.RingPlot var16 = new org.jfree.chart.plot.RingPlot(var15);
    var16.setSectionDepth(0.02d);
    var16.setInnerSeparatorExtension(0.02d);
    java.awt.Stroke var22 = var16.getSectionOutlineStroke((java.lang.Comparable)0.025d);
    org.jfree.chart.renderer.category.IntervalBarRenderer var23 = new org.jfree.chart.renderer.category.IntervalBarRenderer();
    var23.setSeriesVisible(15, (java.lang.Boolean)false, true);
    org.jfree.chart.StandardChartTheme var30 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var31 = var30.getLegendItemPaint();
    java.awt.Paint var32 = var30.getSubtitlePaint();
    java.awt.Paint var33 = var30.getTickLabelPaint();
    var23.setBaseLegendTextPaint(var33);
    boolean var35 = var16.equals((java.lang.Object)var23);
    boolean var36 = var0.equals((java.lang.Object)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Combined Range XYPlot"+ "'", var5.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test420"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    java.lang.Object var1 = var0.clone();
    var0.setDomainCrosshairValue(10.0d, false);
    org.jfree.chart.axis.AxisSpace var5 = var0.getFixedRangeAxisSpace();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test421"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    boolean var8 = var0.getDrawSharedDomainAxis();
    var0.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var0.addChangeListener((org.jfree.chart.event.PlotChangeListener)var11);
    org.jfree.chart.event.PlotChangeEvent var13 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var11);
    var11.setDomainGridlinesVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test422"); }


    org.jfree.data.xy.VectorDataItem var4 = new org.jfree.data.xy.VectorDataItem((-1.0d), 10.0d, 2.0d, (-1.0d));
    double var5 = var4.getXValue();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var8 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var11 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var12 = var11.getItemLabelFont();
    double var13 = var11.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var16 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var17 = var16.getItemLabelFont();
    java.awt.Shape var18 = var16.getBaseLegendShape();
    var11.setShape(var18);
    var8.setLegendBar(var18);
    org.jfree.data.general.DefaultKeyedValues2DDataset var23 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var26 = new org.jfree.chart.entity.CategoryItemEntity(var18, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var23, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.chart.plot.CombinedRangeXYPlot var27 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var28 = var27.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CategoryMarker var30 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var31 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var33 = var31.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var36 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var37 = var36.getTickLabelPaint();
    var31.setFillPaint(var37, true);
    var30.setLabelPaint(var37);
    org.jfree.chart.annotations.XYShapeAnnotation var41 = new org.jfree.chart.annotations.XYShapeAnnotation(var18, var28, var37);
    boolean var42 = var4.equals((java.lang.Object)var18);
    org.jfree.chart.needle.ShipNeedle var43 = new org.jfree.chart.needle.ShipNeedle();
    org.jfree.chart.plot.dial.DialPlot var44 = new org.jfree.chart.plot.dial.DialPlot();
    var44.setView(0.2d, 4.0d, 10.0d, 10.0d);
    var44.mapDatasetToScale(2013, 100);
    org.jfree.chart.plot.dial.DialPlot var53 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var54 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var55 = var53.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var54);
    var54.setTickLabelsVisible(false);
    int var58 = var44.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var54);
    boolean var59 = var43.equals((java.lang.Object)var44);
    double var61 = var44.getValue(15);
    org.jfree.chart.entity.PlotEntity var63 = new org.jfree.chart.entity.PlotEntity(var18, (org.jfree.chart.plot.Plot)var44, "jfreechart-onetime-");
    java.lang.Object var64 = var63.clone();
    org.jfree.chart.plot.dial.DialValueIndicator var65 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var66 = var65.getInsets();
    java.lang.Number var67 = var65.getTemplateValue();
    boolean var68 = var63.equals((java.lang.Object)var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var67 + "' != '" + 100.0d+ "'", var67.equals(100.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);

  }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test423"); }


    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    double var2 = var0.getRangeLowerBound(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == Double.NaN);

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test424"); }


    java.lang.String[] var3 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var4 = new org.jfree.chart.axis.SymbolAxis("hi!", var3);
    org.jfree.chart.plot.CompassPlot var5 = new org.jfree.chart.plot.CompassPlot();
    boolean var6 = var4.equals((java.lang.Object)var5);
    java.lang.String var7 = var5.getPlotType();
    java.awt.Paint var8 = var5.getRoseCenterPaint();
    org.jfree.chart.LegendItem var9 = new org.jfree.chart.LegendItem("hi!?hi!=10&amp;hi!=51", var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Compass Plot"+ "'", var7.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test425"); }


    org.jfree.chart.renderer.category.GanttRenderer var0 = new org.jfree.chart.renderer.category.GanttRenderer();
    java.lang.String[] var3 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var4 = new org.jfree.chart.axis.SymbolAxis("hi!", var3);
    org.jfree.chart.plot.CompassPlot var5 = new org.jfree.chart.plot.CompassPlot();
    boolean var6 = var4.equals((java.lang.Object)var5);
    java.lang.String var7 = var5.getPlotType();
    java.awt.Paint var8 = var5.getRoseCenterPaint();
    var0.setIncompletePaint(var8);
    var0.setStartPercent(1.05d);
    org.jfree.data.time.Year var14 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var15 = new org.jfree.data.time.Month(1, var14);
    org.jfree.data.time.ohlc.OHLCItem var20 = new org.jfree.data.time.ohlc.OHLCItem((org.jfree.data.time.RegularTimePeriod)var14, 175.0d, 360.0d, (-0.7853981633974483d), 0.75d);
    boolean var21 = var0.equals((java.lang.Object)var20);
    java.awt.Stroke var23 = var0.getSeriesStroke(1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Compass Plot"+ "'", var7.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test426"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    java.awt.image.ColorModel var2 = var0.getColorModel();
    var0.updateUI();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.getInheritsPopupMenu();
    javax.swing.InputMap var6 = var0.getInputMap();
    var0.nextFocus();
    boolean var8 = var0.getInheritsPopupMenu();
    org.jfree.chart.plot.CombinedRangeXYPlot var9 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    org.jfree.chart.annotations.XYPointerAnnotation var14 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var15 = var14.getLabelOffset();
    org.jfree.ui.TextAnchor var16 = var14.getRotationAnchor();
    boolean var17 = var9.removeAnnotation((org.jfree.chart.annotations.XYAnnotation)var14);
    org.jfree.chart.StandardChartTheme var20 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var21 = var20.getLegendItemPaint();
    java.awt.Paint var22 = var20.getSubtitlePaint();
    java.awt.Font var23 = var20.getLargeFont();
    var14.setFont(var23);
    java.awt.FontMetrics var25 = var0.getFontMetrics(var23);
    java.awt.Dimension var26 = var0.preferredSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var4.equals("org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test427"); }


    org.jfree.chart.axis.CyclicNumberAxis var2 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var3 = var2.isAxisLineVisible();
    var2.setAxisLineVisible(true);
    var2.setMinorTickMarksVisible(true);
    org.jfree.chart.plot.CombinedRangeXYPlot var8 = new org.jfree.chart.plot.CombinedRangeXYPlot((org.jfree.chart.axis.ValueAxis)var2);
    var8.setDomainMinorGridlinesVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test428"); }


    org.jfree.chart.title.TextTitle var1 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var2 = var1.isVisible();
    java.lang.Object var3 = var1.clone();
    java.lang.String var4 = var1.getURLText();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    java.awt.image.ColorModel var7 = var5.getColorModel();
    var5.updateUI();
    java.lang.String var9 = var5.toString();
    java.awt.Color var10 = var5.getForeground();
    var1.setBackgroundPaint((java.awt.Paint)var10);
    var1.setURLText("jfreechart-onetime-");
    var1.setURLText("org.jfree.chart.renderer.NotOutlierException: hi!");
    org.jfree.chart.renderer.category.BarRenderer3D var18 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var19 = var18.getItemLabelFont();
    double var20 = var18.getItemLabelAnchorOffset();
    org.jfree.chart.axis.CyclicNumberAxis var24 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var25 = var24.getTickLabelPaint();
    var18.setLegendTextPaint(0, var25);
    var18.setItemLabelsVisible((java.lang.Boolean)false, true);
    org.jfree.ui.GradientPaintTransformer var30 = var18.getGradientPaintTransformer();
    java.awt.Paint var31 = var18.getWallPaint();
    var1.setBackgroundPaint(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var9.equals("org.jfree.chart.ChartPanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test429"); }


    org.jfree.chart.plot.CombinedDomainCategoryPlot var0 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.util.List var1 = var0.getSubplots();
    org.jfree.chart.renderer.category.BarRenderer3D var4 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var5 = var4.getItemLabelFont();
    org.jfree.chart.util.HexNumberFormat var7 = new org.jfree.chart.util.HexNumberFormat();
    org.jfree.chart.labels.IntervalCategoryToolTipGenerator var8 = new org.jfree.chart.labels.IntervalCategoryToolTipGenerator("Combined Range XYPlot", (java.text.NumberFormat)var7);
    var4.setToolTipGenerator((org.jfree.chart.labels.CategoryToolTipGenerator)var8);
    boolean var10 = var0.equals((java.lang.Object)var4);
    org.jfree.chart.renderer.category.CategoryItemRenderer var12 = var0.getRenderer(20);
    org.jfree.chart.plot.CombinedRangeCategoryPlot var13 = new org.jfree.chart.plot.CombinedRangeCategoryPlot();
    org.jfree.chart.annotations.CategoryPointerAnnotation var18 = new org.jfree.chart.annotations.CategoryPointerAnnotation("[size=0x00000000]", (java.lang.Comparable)1043495433, 0.25d, 100.0d);
    boolean var20 = var13.removeAnnotation((org.jfree.chart.annotations.CategoryAnnotation)var18, false);
    org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryMarker var23 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var24 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var26 = var24.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var29 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var30 = var29.getTickLabelPaint();
    var24.setFillPaint(var30, true);
    var23.setLabelPaint(var30);
    var21.setDomainGridlinePaint(var30);
    var21.clearDomainMarkers();
    boolean var36 = var21.isNotify();
    var13.add(var21, 8);
    var0.add(var21, 15);
    org.jfree.chart.plot.DrawingSupplier var41 = var0.getDrawingSupplier();
    org.jfree.chart.plot.CategoryPlot var42 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var44 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var45 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var44);
    org.jfree.data.time.TimePeriodValue var47 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var44, (java.lang.Number)10);
    var42.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var49 = var42.getDrawSharedDomainAxis();
    boolean var50 = var42.getDrawSharedDomainAxis();
    var42.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var53 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var42.addChangeListener((org.jfree.chart.event.PlotChangeListener)var53);
    var42.clearRangeMarkers();
    java.awt.Stroke var56 = var42.getDomainCrosshairStroke();
    var0.add(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test430"); }


    org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var4);
    org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
    var2.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var15 = var14.getTickLabelPaint();
    var9.setFillPaint(var15, true);
    var2.setDomainCrosshairPaint(var15);
    boolean var19 = var1.equals((java.lang.Object)var2);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var21 = var20.getDomainCrosshairColumnKey();
    var20.setCrosshairDatasetIndex(100);
    org.jfree.chart.plot.CombinedRangeXYPlot var24 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var25 = var24.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var27 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var28 = var27.getMargin();
    var24.setAxisOffset(var28);
    var20.setAxisOffset(var28);
    org.jfree.data.category.CategoryDataset var32 = var20.getDataset((-2));
    var20.clearRangeMarkers((-13421773));
    org.jfree.chart.plot.XYPlot var35 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.plot.DatasetRenderingOrder var36 = var35.getDatasetRenderingOrder();
    var20.setDatasetRenderingOrder(var36);
    var2.setDatasetRenderingOrder(var36);
    org.jfree.chart.plot.ContourPlot var39 = new org.jfree.chart.plot.ContourPlot();
    org.jfree.chart.plot.CategoryMarker var41 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    var39.addRangeMarker((org.jfree.chart.plot.Marker)var41);
    var2.addDomainMarker(var41);
    var2.setRangeCrosshairValue(2.0d, false);
    org.jfree.chart.annotations.CategoryTextAnnotation var50 = new org.jfree.chart.annotations.CategoryTextAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (java.lang.Comparable)(short)1, 0.05d);
    var50.setValue((-170.0d));
    org.jfree.ui.TextAnchor var53 = var50.getRotationAnchor();
    var2.addAnnotation((org.jfree.chart.annotations.CategoryAnnotation)var50);
    org.jfree.chart.axis.CategoryAnchor var55 = var50.getCategoryAnchor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test431"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    java.awt.Stroke var2 = var0.getSectionOutlineStroke((-334));
    boolean var3 = var0.getSimpleLabels();
    org.jfree.chart.plot.AbstractPieLabelDistributor var4 = var0.getLabelDistributor();
    org.jfree.chart.urls.CustomPieURLGenerator var5 = new org.jfree.chart.urls.CustomPieURLGenerator();
    java.lang.Object var6 = var5.clone();
    var0.setURLGenerator((org.jfree.chart.urls.PieURLGenerator)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test432"); }


    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var0.setUseSeriesOffset(true);
    var0.setAutoPopulateSeriesOutlinePaint(false);
    double var5 = var0.getItemMargin();
    boolean var6 = var0.getBaseShapesFilled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);

  }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test433"); }


    org.jfree.data.time.Year var3 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var4 = new org.jfree.data.time.Month(1, var3);
    org.jfree.chart.util.HexNumberFormat var6 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var7.setNextFocusableComponent((java.awt.Component)var9);
    java.util.Locale var11 = var9.getLocale();
    org.jfree.chart.axis.MonthDateFormat var12 = new org.jfree.chart.axis.MonthDateFormat(var11);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var13 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var6, (java.text.DateFormat)var12);
    boolean var14 = var3.equals((java.lang.Object)var12);
    org.jfree.chart.labels.IntervalCategoryItemLabelGenerator var15 = new org.jfree.chart.labels.IntervalCategoryItemLabelGenerator("{0.0,0.0}", (java.text.DateFormat)var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test434"); }


    org.jfree.data.time.Year var2 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var3 = new org.jfree.data.time.Month(1, var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var3, 175.0d);
    var5.setValue((java.lang.Number)2.0f);
    var5.setValue((java.lang.Number)1L);

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test435"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    double var4 = var2.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    var2.setShape(var9);
    org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var12 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((java.lang.Comparable)(short)10);
    double var13 = var12.getOutlierCoefficient();
    org.jfree.chart.entity.XYItemEntity var18 = new org.jfree.chart.entity.XYItemEntity(var9, (org.jfree.data.xy.XYDataset)var12, 1, 4, "-4,-4,4,4", "100");
    int var19 = var18.getSeriesIndex();
    java.lang.String var20 = var18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1.5d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1);

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test436"); }


    org.jfree.data.time.DateRange var0 = new org.jfree.data.time.DateRange();
    long var1 = var0.getUpperMillis();
    org.jfree.data.general.DefaultKeyedValues2DDataset var2 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var2.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var7 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var2);
    org.jfree.data.Range var9 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds((org.jfree.data.category.CategoryDataset)var2, true);
    org.jfree.chart.block.RectangleConstraint var10 = new org.jfree.chart.block.RectangleConstraint((org.jfree.data.Range)var0, var9);
    org.jfree.data.time.DateRange var13 = new org.jfree.data.time.DateRange((-1.0d), 1.0d);
    org.jfree.chart.block.RectangleConstraint var14 = var10.toRangeHeight((org.jfree.data.Range)var13);
    org.jfree.chart.block.RectangleConstraint var16 = var14.toFixedHeight(3.0d);
    double var17 = var14.getWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.0d);

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test437"); }


    org.jfree.chart.util.HexNumberFormat var1 = new org.jfree.chart.util.HexNumberFormat();
    org.jfree.chart.labels.StandardCrosshairLabelGenerator var2 = new org.jfree.chart.labels.StandardCrosshairLabelGenerator("", (java.text.NumberFormat)var1);
    org.jfree.chart.util.RelativeDateFormat var3 = new org.jfree.chart.util.RelativeDateFormat();
    boolean var4 = var3.getShowZeroHours();
    java.text.NumberFormat var5 = var3.getNumberFormat();
    java.text.NumberFormat var6 = var3.getNumberFormat();
    java.math.RoundingMode var7 = var6.getRoundingMode();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setRoundingMode(var7);
      fail("Expected exception of type java.lang.UnsupportedOperationException");
    } catch (java.lang.UnsupportedOperationException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test438"); }


    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow((org.jfree.data.category.CategoryDataset)var0, 10);
    org.jfree.data.statistics.SimpleHistogramBin var5 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
    org.jfree.data.general.PieDataset var7 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(var2, (java.lang.Comparable)0.05d, 175.0d);
    org.jfree.chart.plot.RingPlot var8 = new org.jfree.chart.plot.RingPlot(var7);
    var8.setSectionDepth(0.02d);
    var8.setInnerSeparatorExtension(0.02d);
    java.awt.Stroke var14 = var8.getSectionOutlineStroke((java.lang.Comparable)0.025d);
    org.jfree.chart.renderer.category.IntervalBarRenderer var15 = new org.jfree.chart.renderer.category.IntervalBarRenderer();
    var15.setSeriesVisible(15, (java.lang.Boolean)false, true);
    org.jfree.chart.StandardChartTheme var22 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var23 = var22.getLegendItemPaint();
    java.awt.Paint var24 = var22.getSubtitlePaint();
    java.awt.Paint var25 = var22.getTickLabelPaint();
    var15.setBaseLegendTextPaint(var25);
    boolean var27 = var8.equals((java.lang.Object)var15);
    var8.setMaximumLabelWidth(0.7d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test439"); }


    org.jfree.chart.plot.GreyPalette var0 = new org.jfree.chart.plot.GreyPalette();
    double var1 = var0.getMaxZ();
    org.jfree.chart.editor.PaletteSample var2 = new org.jfree.chart.editor.PaletteSample((org.jfree.chart.plot.ColorPalette)var0);
    var2.setAlignmentY(100.0f);
    var2.enable();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.0d));

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test440"); }


    org.jfree.chart.plot.CombinedRangeCategoryPlot var0 = new org.jfree.chart.plot.CombinedRangeCategoryPlot();
    org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.CyclicNumberAxis var4 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var5 = var4.getTickLabelPaint();
    org.jfree.chart.axis.ValueAxis[] var6 = new org.jfree.chart.axis.ValueAxis[] { var4};
    var1.setRangeAxes(var6);
    int var8 = var1.getRendererCount();
    var0.add(var1, 500);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1);

  }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test441"); }


    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var0 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    java.awt.Paint var1 = var0.getShapePaint();
    java.awt.Shape var2 = var0.getLegendArea();
    org.jfree.chart.renderer.category.LevelRenderer var3 = new org.jfree.chart.renderer.category.LevelRenderer();
    double var4 = var3.getItemMargin();
    org.jfree.chart.StrokeMap var5 = new org.jfree.chart.StrokeMap();
    java.lang.Object var6 = var5.clone();
    boolean var7 = var3.equals((java.lang.Object)var5);
    var3.setItemLabelAnchorOffset(4.0d);
    org.jfree.data.KeyedObjects2D var11 = new org.jfree.data.KeyedObjects2D();
    javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var13 = var12.getPreferredSize();
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var12.setNextFocusableComponent((java.awt.Component)var14);
    java.util.Locale var16 = var14.getLocale();
    org.jfree.chart.axis.TickUnitSource var17 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var16);
    java.text.NumberFormat var18 = java.text.NumberFormat.getPercentInstance(var16);
    org.jfree.data.time.Year var20 = new org.jfree.data.time.Year();
    var11.addObject((java.lang.Object)var18, (java.lang.Comparable)0.04d, (java.lang.Comparable)var20);
    double[] var24 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var25 = new org.jfree.chart.annotations.XYPolygonAnnotation(var24);
    double[] var28 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var29 = new org.jfree.chart.annotations.XYPolygonAnnotation(var28);
    org.jfree.chart.ClipPath var30 = new org.jfree.chart.ClipPath(var24, var28);
    double[][] var31 = new double[][] { var24};
    double[] var36 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var37 = new org.jfree.chart.annotations.XYPolygonAnnotation(var36);
    double[] var40 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var41 = new org.jfree.chart.annotations.XYPolygonAnnotation(var40);
    org.jfree.chart.ClipPath var42 = new org.jfree.chart.ClipPath(var36, var40);
    double[][] var43 = new double[][] { var36};
    org.jfree.data.category.CategoryDataset var44 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var43);
    org.jfree.data.category.DefaultIntervalCategoryDataset var45 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var31, var43);
    org.jfree.chart.axis.SubCategoryAxis var47 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    var47.configure();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var49 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var51 = var49.getSeriesLinesVisible(10);
    javax.swing.JPanel var53 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var54 = var53.getPreferredSize();
    boolean var55 = var53.getIgnoreRepaint();
    boolean var56 = var53.isLightweight();
    javax.swing.JPanel var57 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var58 = var57.getPreferredSize();
    javax.swing.JPanel var59 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var57.setNextFocusableComponent((java.awt.Component)var59);
    var57.show();
    javax.swing.JPanel var62 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var63 = var62.getLocation();
    java.awt.Dimension var64 = var62.preferredSize();
    java.awt.Rectangle var65 = var62.bounds();
    var57.scrollRectToVisible(var65);
    var53.setBounds(var65);
    var49.setSeriesShape(15, (java.awt.Shape)var65);
    org.jfree.chart.axis.AxisState var69 = new org.jfree.chart.axis.AxisState();
    org.jfree.chart.title.TextTitle var72 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var73 = var72.isVisible();
    java.lang.Object var74 = var72.clone();
    org.jfree.ui.RectangleEdge var75 = var72.getPosition();
    var69.moveCursor(4.0d, var75);
    double var77 = var3.getItemMiddle((java.lang.Comparable)1201L, (java.lang.Comparable)0.04d, (org.jfree.data.category.CategoryDataset)var45, (org.jfree.chart.axis.CategoryAxis)var47, (java.awt.geom.Rectangle2D)var65, var75);
    java.awt.Stroke var80 = var3.getItemOutlineStroke(2013, 8);
    var0.setShapeStroke(var80);
    boolean var82 = var0.getPlotShapes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == false);

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test442"); }


    org.jfree.data.xy.XYIntervalDataItem var6 = new org.jfree.data.xy.XYIntervalDataItem(0.05d, 0.04d, 40.05d, (-0.7853981633974483d), 0.0d, 1.5d);
    double var7 = var6.getYLowValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.0d);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test443"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    int var7 = var6.getDefaultCloseOperation();
    boolean var8 = var6.isActive();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var10 = var9.getPreferredSize();
    java.awt.image.ColorModel var11 = var9.getColorModel();
    var9.updateUI();
    java.lang.String var13 = var9.toString();
    boolean var14 = var9.getInheritsPopupMenu();
    javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var16 = var15.getPreferredSize();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var15.setNextFocusableComponent((java.awt.Component)var17);
    java.util.Locale var19 = var17.getLocale();
    javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var21 = var20.getPreferredSize();
    java.awt.Dimension var22 = var17.getSize(var21);
    var9.setSize(var21);
    java.awt.LayoutManager var24 = var9.getLayout();
    var6.setLayout(var24);
    java.awt.Container var26 = var6.getFocusCycleRootAncestor();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var13.equals("org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test444"); }


    org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var2.clear();
    boolean var4 = var2.getAutoSort();
    org.jfree.chart.plot.PolarPlot var5 = new org.jfree.chart.plot.PolarPlot();
    boolean var6 = var5.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var11 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var11.setUpperMargin(10.0d);
    var11.setAxisLineVisible(true);
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var17 = var16.getLocation();
    java.awt.Dimension var18 = var16.preferredSize();
    java.awt.Rectangle var19 = var16.bounds();
    java.awt.Point var20 = var5.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var11, (java.awt.geom.Rectangle2D)var19);
    org.jfree.data.xy.DefaultXYZDataset var22 = new org.jfree.data.xy.DefaultXYZDataset();
    org.jfree.data.DomainOrder var23 = var22.getDomainOrder();
    var5.setDataset(1, (org.jfree.data.xy.XYDataset)var22);
    var2.addChangeListener((org.jfree.data.general.SeriesChangeListener)var22);
    org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var27 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((java.lang.Comparable)(short)10);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var34 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var37 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var38 = var37.getItemLabelFont();
    double var39 = var37.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    var37.setShape(var44);
    var34.setLegendBar(var44);
    var34.setDrawBarOutline(true);
    org.jfree.chart.title.LegendTitle var49 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var34);
    org.jfree.chart.annotations.XYDrawableAnnotation var50 = new org.jfree.chart.annotations.XYDrawableAnnotation(100.0d, 10.0d, 0.0d, (-1.0d), (org.jfree.ui.Drawable)var49);
    var50.setURL("");
    boolean var53 = var27.equals((java.lang.Object)var50);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var62 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.util.List var63 = var62.getSubplots();
    org.jfree.data.statistics.BoxAndWhiskerItem var64 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)(-2208960000000L), (java.lang.Number)Double.NaN, (java.lang.Number)51, (java.lang.Number)0.05d, (java.lang.Number)(byte)100, (java.lang.Number)2.0f, (java.lang.Number)15, (java.lang.Number)1.0f, var63);
    org.jfree.chart.axis.CyclicNumberAxis var67 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var68 = var67.isAxisLineVisible();
    var67.setAxisLineVisible(true);
    org.jfree.data.general.DefaultKeyedValues2DDataset var71 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var71.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var76 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.category.CategoryDataset)var71);
    var67.setDefaultAutoRange(var76);
    org.jfree.data.Range var79 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset)var27, var63, var76, false);
    org.jfree.data.time.DateRange var80 = new org.jfree.data.time.DateRange();
    org.jfree.data.Range var82 = org.jfree.data.general.DatasetUtilities.iterateToFindZBounds((org.jfree.data.xy.XYZDataset)var22, var63, (org.jfree.data.Range)var80, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var84 = var22.getItemCount(52);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test445"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    boolean var8 = var0.getDrawSharedDomainAxis();
    var0.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var0.addChangeListener((org.jfree.chart.event.PlotChangeListener)var11);
    double var13 = var11.getGap();
    org.jfree.chart.renderer.xy.XYBlockRenderer var14 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var15 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var16 = var14.findDomainBounds((org.jfree.data.xy.XYDataset)var15);
    java.lang.Number var17 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset)var15);
    var15.add(100.0d, Double.NaN, "jfreechart-onetime-");
    var15.clear();
    int var24 = var15.getItemCount(8);
    boolean var25 = var15.isAutoWidth();
    var15.setIntervalWidth(100.0d);
    var11.setDataset((org.jfree.data.xy.XYDataset)var15);
    org.jfree.data.xy.XYSeries var31 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    java.lang.Object var32 = var31.clone();
    int var33 = var31.getMaximumItemCount();
    javax.swing.JPanel var34 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var35 = var34.getPreferredSize();
    boolean var36 = var34.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var38 = new org.jfree.chart.plot.ContourPlot();
    var38.setOutlineVisible(false);
    var34.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var38);
    org.jfree.chart.urls.XYURLGenerator var42 = var38.getURLGenerator();
    var31.removePropertyChangeListener((java.beans.PropertyChangeListener)var38);
    float var44 = var38.getForegroundAlpha();
    org.jfree.chart.plot.ValueMarker var46 = new org.jfree.chart.plot.ValueMarker((-1.0d));
    var38.addDomainMarker((org.jfree.chart.plot.Marker)var46);
    var46.setLabel("Compass Plot");
    javax.swing.JPanel var50 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var51 = var50.getPreferredSize();
    java.awt.image.ColorModel var52 = var50.getColorModel();
    var50.updateUI();
    java.lang.String var54 = var50.toString();
    var50.setFocusable(true);
    boolean var57 = var46.equals((java.lang.Object)var50);
    java.lang.String[] var60 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var61 = new org.jfree.chart.axis.SymbolAxis("hi!", var60);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var62 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var64 = var62.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var67 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var68 = var67.getTickLabelPaint();
    var62.setFillPaint(var68, true);
    var61.setGridBandAlternatePaint(var68);
    var46.setLabelPaint(var68);
    boolean var73 = var11.removeDomainMarker((org.jfree.chart.plot.Marker)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 5.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + Double.NaN+ "'", var17.equals(Double.NaN));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var54,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var54.equals("org.jfree.chart.ChartPanel[,0,0,0var54,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == false);

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test446"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    java.awt.Paint var17 = var0.getQuadrantPaint(1);
    org.jfree.chart.axis.CyclicNumberAxis var20 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var21 = var20.isAxisLineVisible();
    var20.setAxisLineVisible(true);
    var20.setMinorTickMarksVisible(true);
    org.jfree.chart.plot.CombinedRangeXYPlot var26 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var27 = var26.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CombinedRangeXYPlot var28 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var29 = var28.getRangeZeroBaselineStroke();
    var26.setRangeGridlineStroke(var29);
    var26.setDomainMinorGridlinesVisible(true);
    var26.setRangeZeroBaselineVisible(true);
    var20.setPlot((org.jfree.chart.plot.Plot)var26);
    var0.setDomainAxis((org.jfree.chart.axis.ValueAxis)var20);
    org.jfree.chart.LegendItemCollection var37 = var0.getLegendItems();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test447"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    org.jfree.chart.plot.dial.DialValueIndicator var19 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var20 = var19.getInsets();
    java.awt.Stroke var21 = var19.getOutlineStroke();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var19.setOutlinePaint((java.awt.Paint)var36);
    java.awt.Color var39 = var36.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    double var45 = var42.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var46 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var47 = var46.getRangeZeroBaselineStroke();
    var42.setStroke(var47, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var50 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var51 = var50.isOutline();
    var50.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var56 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var57 = var56.getLegendItemPaint();
    var50.setShapePaint(var57);
    org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var16, (java.awt.Paint)var39, var47, var57);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var60 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var60.setBaseSeriesVisible(true, true);
    java.awt.Paint var64 = var60.getBasePaint();
    var59.setOutlinePaint(var64);
    org.jfree.chart.needle.PinNeedle var66 = new org.jfree.chart.needle.PinNeedle();
    org.jfree.chart.plot.CategoryPlot var67 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var69 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var70 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var69);
    org.jfree.data.time.TimePeriodValue var72 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var69, (java.lang.Number)10);
    var67.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var74 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var76 = var74.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var79 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var80 = var79.getTickLabelPaint();
    var74.setFillPaint(var80, true);
    var67.setDomainCrosshairPaint(var80);
    var66.setOutlinePaint(var80);
    org.jfree.chart.event.RendererChangeEvent var85 = new org.jfree.chart.event.RendererChangeEvent((java.lang.Object)var66);
    double var86 = var66.getRotateY();
    boolean var87 = var59.equals((java.lang.Object)var86);
    int var88 = var59.getDatasetIndex();
    boolean var89 = var59.isShapeVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0.5d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var89 == true);

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test448"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var0.clearDomainMarkers();
    java.awt.Paint var2 = var0.getRangeGridlinePaint();
    var0.clearRangeAxes();
    var0.setDomainCrosshairValue(15.0d, false);
    int var7 = var0.getRangeAxisCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test449"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var1 = var0.isDomainZoomable();
    int var2 = var0.getAxisLocation();
    org.jfree.data.general.ValueDataset var3 = var0.getDataset();
    org.jfree.chart.plot.MeterPlot var4 = new org.jfree.chart.plot.MeterPlot(var3);
    java.util.List var5 = var4.getIntervals();
    java.awt.Font var6 = var4.getTickLabelFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test450"); }


    org.jfree.data.time.Week var1 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var2 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var1);
    org.jfree.data.time.TimePeriodValue var4 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var1, (java.lang.Number)10);
    org.jfree.data.time.ohlc.OHLCItem var9 = new org.jfree.data.time.ohlc.OHLCItem((org.jfree.data.time.RegularTimePeriod)var1, 100.0d, 0.0d, 0.05d, 0.0d);
    org.jfree.chart.plot.XYPlot var10 = new org.jfree.chart.plot.XYPlot();
    java.lang.Object var11 = var10.clone();
    org.jfree.data.ComparableObjectItem var12 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable)var9, (java.lang.Object)var10);
    java.lang.String var13 = var10.getNoDataMessage();
    org.jfree.chart.plot.ThermometerPlot var14 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var15 = var14.isDomainZoomable();
    int var16 = var14.getAxisLocation();
    org.jfree.data.general.ValueDataset var17 = var14.getDataset();
    org.jfree.chart.plot.MeterPlot var18 = new org.jfree.chart.plot.MeterPlot(var17);
    java.awt.Paint var19 = var18.getTickLabelPaint();
    java.awt.Paint var20 = var18.getDialBackgroundPaint();
    var10.setDomainCrosshairPaint(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test451"); }


    org.jfree.data.xy.VectorSeries var3 = new org.jfree.data.xy.VectorSeries((java.lang.Comparable)15.0d, true, false);
    var3.add(0.04d, 360.0d, (-90.0d), 3.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var10 = var3.getVectorYValue(100);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test452"); }


    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var2 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.LegendItem var5 = var2.getLegendItem(1, 0);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var6 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    var2.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var6);
    org.jfree.chart.renderer.xy.CandlestickRenderer var8 = new org.jfree.chart.renderer.xy.CandlestickRenderer(0.75d, false, (org.jfree.chart.labels.XYToolTipGenerator)var6);
    boolean var9 = var8.getUseOutlinePaint();
    int var10 = var8.getAutoWidthMethod();
    java.awt.Paint var11 = var8.getVolumePaint();
    java.awt.Font var14 = var8.getItemLabelFont(252, 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test453"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    boolean var2 = var0.getIgnoreRepaint();
    java.awt.dnd.DropTarget var3 = var0.getDropTarget();
    java.awt.event.ContainerListener[] var4 = var0.getContainerListeners();
    var0.paintImmediately(2147483647, 100, 1, 100);
    var0.firePropertyChange("hi!", '#', '#');
    java.awt.LayoutManager var14 = var0.getLayout();
    java.awt.Component.BaselineResizeBehavior var15 = var0.getBaselineResizeBehavior();
    javax.swing.border.Border var16 = var0.getBorder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test454"); }


    org.jfree.data.statistics.MeanAndStandardDeviation var2 = new org.jfree.data.statistics.MeanAndStandardDeviation((java.lang.Number)1L, (java.lang.Number)0.0f);
    org.jfree.data.time.TimeTableXYDataset var3 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var5 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var6 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var5);
    var3.remove((org.jfree.data.time.TimePeriod)var5, (java.lang.Comparable)100, false);
    org.jfree.data.xy.XYBarDataset var11 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var3, Double.NaN);
    boolean var12 = var2.equals((java.lang.Object)var11);
    org.jfree.data.xy.XYDataset var16 = org.jfree.data.time.MovingAverage.createMovingAverage((org.jfree.data.xy.XYDataset)var11, "Range[0.0,0.0]", (-1L), (-2208960000000L));
    org.jfree.data.xy.IntervalXYDelegate var17 = new org.jfree.data.xy.IntervalXYDelegate(var16);
    double var19 = var17.getDomainLowerBound(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == Double.NaN);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test455"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    int var7 = var6.getDefaultCloseOperation();
    var6.transferFocusDownCycle();
    java.util.List var9 = var6.getIconImages();
    var6.show();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test456"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var11 = new org.jfree.chart.entity.ContourEntity(var9, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var14 = var13.isVisible();
    java.lang.Object var15 = var13.clone();
    java.lang.String var16 = var13.getURLText();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.image.ColorModel var19 = var17.getColorModel();
    var17.updateUI();
    java.lang.String var21 = var17.toString();
    java.awt.Color var22 = var17.getForeground();
    var13.setBackgroundPaint((java.awt.Paint)var22);
    int var24 = var22.getRGB();
    int var25 = var22.getBlue();
    org.jfree.chart.plot.dial.DialPlot var26 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var27 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var28 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var27);
    org.jfree.chart.plot.dial.DialValueIndicator var29 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var30 = var29.getInsets();
    int var31 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var29);
    java.awt.Stroke var32 = var29.getOutlineStroke();
    org.jfree.chart.title.TextTitle var34 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var35 = var34.isVisible();
    java.lang.Object var36 = var34.clone();
    java.lang.String var37 = var34.getURLText();
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.image.ColorModel var40 = var38.getColorModel();
    var38.updateUI();
    java.lang.String var42 = var38.toString();
    java.awt.Color var43 = var38.getForeground();
    var34.setBackgroundPaint((java.awt.Paint)var43);
    org.jfree.chart.LegendItem var45 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var9, (java.awt.Paint)var22, var32, (java.awt.Paint)var43);
    var0.setBaseSectionOutlinePaint((java.awt.Paint)var22);
    double var47 = var0.getLabelLinkMargin();
    double var48 = var0.getMaximumLabelWidth();
    org.jfree.chart.util.HexNumberFormat var50 = new org.jfree.chart.util.HexNumberFormat();
    org.jfree.chart.axis.NumberTickUnit var52 = new org.jfree.chart.axis.NumberTickUnit(0.05d, (java.text.NumberFormat)var50, 1);
    java.lang.String var54 = var52.valueToString(1.0d);
    int var55 = var52.getMinorTickCount();
    org.jfree.chart.needle.LineNeedle var60 = new org.jfree.chart.needle.LineNeedle();
    java.awt.Stroke var61 = var60.getOutlineStroke();
    org.jfree.chart.StandardChartTheme var64 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var65 = var64.getLegendItemPaint();
    org.jfree.chart.annotations.XYBoxAnnotation var66 = new org.jfree.chart.annotations.XYBoxAnnotation(0.0d, 0.2d, 0.05d, (-90.0d), var61, var65);
    var0.setSectionOutlineStroke((java.lang.Comparable)var55, var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.025d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.14d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var54 + "' != '" + "0var540000001"+ "'", var54.equals("0var540000001"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test457"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    org.jfree.chart.axis.AxisLocation var16 = var0.getDomainAxisLocation();
    org.jfree.chart.axis.AxisLocation var17 = var16.getOpposite();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test458"); }


    org.jfree.chart.axis.LogAxis var0 = new org.jfree.chart.axis.LogAxis();
    org.jfree.chart.axis.SubCategoryAxis var2 = new org.jfree.chart.axis.SubCategoryAxis("Combined Range XYPlot");
    java.lang.Number[][] var3 = new java.lang.Number[][] { };
    java.lang.Number[][] var4 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var5 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var3, var4);
    org.jfree.data.time.Week var7 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var8 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var7);
    int var9 = var5.getColumnIndex((java.lang.Comparable)var7);
    org.jfree.chart.plot.CategoryMarker var11 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var12 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var14 = var12.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var17 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var18 = var17.getTickLabelPaint();
    var12.setFillPaint(var18, true);
    var11.setLabelPaint(var18);
    org.jfree.chart.plot.CompassPlot var22 = new org.jfree.chart.plot.CompassPlot();
    var11.addChangeListener((org.jfree.chart.event.MarkerChangeListener)var22);
    org.jfree.chart.StandardChartTheme var26 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var27 = var26.getLegendItemPaint();
    java.awt.Paint var28 = var26.getSubtitlePaint();
    java.awt.Font var29 = var26.getLargeFont();
    var22.setLabelFont(var29);
    var2.setTickLabelFont((java.lang.Comparable)var7, var29);
    var0.setLabelFont(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test459"); }


    org.jfree.data.time.ohlc.OHLCSeriesCollection var0 = new org.jfree.data.time.ohlc.OHLCSeriesCollection();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var3 = var0.getOpen(1, 11);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test460"); }


    org.jfree.chart.plot.ThermometerPlot var1 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var2 = var1.isDomainZoomable();
    int var3 = var1.getAxisLocation();
    org.jfree.chart.StandardChartTheme var6 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    org.jfree.chart.plot.DrawingSupplier var7 = var6.getDrawingSupplier();
    org.jfree.chart.plot.dial.StandardDialScale var8 = new org.jfree.chart.plot.dial.StandardDialScale();
    var8.setMajorTickIncrement(10.0d);
    java.awt.Paint var11 = var8.getMinorTickPaint();
    var6.setTickLabelPaint(var11);
    java.awt.Font var13 = var6.getSmallFont();
    var1.setValueFont(var13);
    org.jfree.chart.block.LabelBlock var15 = new org.jfree.chart.block.LabelBlock("100", var13);
    java.awt.Paint var16 = var15.getPaint();
    java.lang.String[] var19 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var20 = new org.jfree.chart.axis.SymbolAxis("hi!", var19);
    org.jfree.chart.plot.CompassPlot var21 = new org.jfree.chart.plot.CompassPlot();
    boolean var22 = var20.equals((java.lang.Object)var21);
    var20.setGridBandsVisible(false);
    javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var26 = var25.getLocation();
    java.awt.Dimension var27 = var25.preferredSize();
    java.awt.Rectangle var28 = var25.bounds();
    var25.setDoubleBuffered(true);
    org.jfree.chart.axis.CyclicNumberAxis var33 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var34 = var33.getTickLabelPaint();
    var33.setVisible(false);
    java.lang.Object var37 = var33.clone();
    org.jfree.chart.plot.CombinedRangeXYPlot var38 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    org.jfree.chart.annotations.XYPointerAnnotation var43 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var44 = var43.getLabelOffset();
    org.jfree.ui.TextAnchor var45 = var43.getRotationAnchor();
    boolean var46 = var38.removeAnnotation((org.jfree.chart.annotations.XYAnnotation)var43);
    org.jfree.chart.StandardChartTheme var49 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var50 = var49.getLegendItemPaint();
    java.awt.Paint var51 = var49.getSubtitlePaint();
    java.awt.Font var52 = var49.getLargeFont();
    var43.setFont(var52);
    var33.setLabelFont(var52);
    var25.setFont(var52);
    var20.setTickLabelFont(var52);
    var15.setFont(var52);
    java.awt.geom.Rectangle2D var58 = var15.getBounds();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test461"); }


    org.jfree.chart.renderer.category.BarRenderer3D var0 = new org.jfree.chart.renderer.category.BarRenderer3D();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var3 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var6 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var7 = var6.getItemLabelFont();
    double var8 = var6.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var11 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var12 = var11.getItemLabelFont();
    java.awt.Shape var13 = var11.getBaseLegendShape();
    var6.setShape(var13);
    var3.setLegendBar(var13);
    org.jfree.data.general.DefaultKeyedValues2DDataset var18 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var21 = new org.jfree.chart.entity.CategoryItemEntity(var13, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var18, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.data.Range var23 = var0.findRangeBounds((org.jfree.data.category.CategoryDataset)var18, true);
    org.jfree.chart.labels.SymbolicXYItemLabelGenerator var25 = new org.jfree.chart.labels.SymbolicXYItemLabelGenerator();
    org.jfree.chart.urls.TimeSeriesURLGenerator var26 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var27 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer(100, (org.jfree.chart.labels.XYToolTipGenerator)var25, (org.jfree.chart.urls.XYURLGenerator)var26);
    boolean var28 = var27.getPlotShapes();
    boolean var29 = var18.equals((java.lang.Object)var27);
    org.jfree.chart.annotations.XYPointerAnnotation var34 = new org.jfree.chart.annotations.XYPointerAnnotation("-4,-4,4,4", (-0.7853981633974483d), (-90.0d), 0.05d);
    org.jfree.chart.plot.CombinedRangeXYPlot var35 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    org.jfree.chart.annotations.XYPointerAnnotation var40 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var41 = var40.getLabelOffset();
    org.jfree.ui.TextAnchor var42 = var40.getRotationAnchor();
    boolean var43 = var35.removeAnnotation((org.jfree.chart.annotations.XYAnnotation)var40);
    org.jfree.chart.StandardChartTheme var46 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var47 = var46.getLegendItemPaint();
    java.awt.Paint var48 = var46.getSubtitlePaint();
    java.awt.Font var49 = var46.getLargeFont();
    var40.setFont(var49);
    var34.setFont(var49);
    double var52 = var34.getX();
    java.awt.Paint var53 = var34.getBackgroundPaint();
    boolean var54 = var27.removeAnnotation((org.jfree.chart.annotations.XYAnnotation)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == (-0.7853981633974483d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test462"); }


    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    var0.clear();
    java.util.List var2 = var0.getRowKeys();
    java.lang.Object var3 = var0.clone();
    java.lang.String[] var7 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var8 = new org.jfree.chart.axis.SymbolAxis("hi!", var7);
    org.jfree.chart.plot.CompassPlot var9 = new org.jfree.chart.plot.CompassPlot();
    boolean var10 = var8.equals((java.lang.Object)var9);
    java.lang.String var11 = var9.getPlotType();
    java.awt.Paint var12 = var9.getRoseCenterPaint();
    org.jfree.chart.LegendItem var13 = new org.jfree.chart.LegendItem("0x00000001", var12);
    boolean var14 = var0.equals((java.lang.Object)"0x00000001");
    var0.add(1.0d, 0.5d, (java.lang.Comparable)0.05d, (java.lang.Comparable)(byte)(-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + "Compass Plot"+ "'", var11.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test463() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test463"); }


    org.jfree.chart.renderer.xy.StackedXYBarRenderer var0 = new org.jfree.chart.renderer.xy.StackedXYBarRenderer();
    javax.swing.JPanel var1 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var2 = var1.getPreferredSize();
    java.awt.image.ColorModel var3 = var1.getColorModel();
    var1.updateUI();
    java.lang.String var5 = var1.toString();
    var1.setFocusable(true);
    boolean var8 = var0.equals((java.lang.Object)var1);
    java.awt.Paint var10 = var0.lookupSeriesOutlinePaint((-1));
    org.jfree.chart.plot.dial.DialPlot var11 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var12 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var13 = var11.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var12);
    var12.setTickLabelsVisible(false);
    var12.setStartAngle(0.2d);
    boolean var18 = var0.equals((java.lang.Object)0.2d);
    var0.setRenderAsPercentages(false);
    double var21 = var0.getShadowYOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var5,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var5.equals("org.jfree.chart.ChartPanel[,0,0,0var5,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 4.0d);

  }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test464"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    boolean var8 = var0.getDrawSharedDomainAxis();
    var0.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var0.addChangeListener((org.jfree.chart.event.PlotChangeListener)var11);
    boolean var13 = var0.isRangeMinorGridlinesVisible();
    org.jfree.chart.renderer.category.CategoryStepRenderer var16 = new org.jfree.chart.renderer.category.CategoryStepRenderer(true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setRenderer((-334), (org.jfree.chart.renderer.category.CategoryItemRenderer)var16);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test465"); }


    org.jfree.data.time.TimeSeriesCollection var0 = new org.jfree.data.time.TimeSeriesCollection();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      int var2 = var0.getItemCount(252);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test466() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test466"); }


    org.jfree.data.time.DateRange var0 = new org.jfree.data.time.DateRange();
    long var1 = var0.getUpperMillis();
    org.jfree.data.general.DefaultKeyedValues2DDataset var2 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var2.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var7 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var2);
    org.jfree.data.Range var9 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds((org.jfree.data.category.CategoryDataset)var2, true);
    org.jfree.chart.block.RectangleConstraint var10 = new org.jfree.chart.block.RectangleConstraint((org.jfree.data.Range)var0, var9);
    org.jfree.data.time.DateRange var13 = new org.jfree.data.time.DateRange((-1.0d), 1.0d);
    org.jfree.chart.block.RectangleConstraint var14 = var10.toRangeHeight((org.jfree.data.Range)var13);
    org.jfree.data.Range var17 = org.jfree.data.Range.expand((org.jfree.data.Range)var13, (-0.7853981633974483d), 0.025d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test467"); }


    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var1 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var2 = var1.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var3 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var4 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var1, (org.jfree.chart.urls.XYURLGenerator)var3);
    boolean var5 = var4.getPlotArea();
    org.jfree.chart.labels.HighLowItemLabelGenerator var6 = new org.jfree.chart.labels.HighLowItemLabelGenerator();
    var4.setBaseItemLabelGenerator((org.jfree.chart.labels.XYItemLabelGenerator)var6);
    org.jfree.data.xy.XYSeries var10 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var10.add((-1.0d), (-1.0d), false);
    org.jfree.data.xy.XYSeries var17 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var17.clear();
    double var19 = var17.getMinX();
    org.jfree.data.xy.XYSeriesCollection var20 = new org.jfree.data.xy.XYSeriesCollection(var17);
    var10.addVetoableChangeListener((java.beans.VetoableChangeListener)var20);
    java.lang.String var24 = var6.generateLabel((org.jfree.data.xy.XYDataset)var20, 100, 2147483647);
    double var26 = var20.getRangeUpperBound(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == Double.NaN);

  }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test468"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    java.awt.Stroke var7 = var0.getRangeMinorGridlineStroke();
    boolean var8 = var0.isRangeMinorGridlinesVisible();
    double[] var11 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var12 = new org.jfree.chart.annotations.XYPolygonAnnotation(var11);
    double[] var15 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var16 = new org.jfree.chart.annotations.XYPolygonAnnotation(var15);
    org.jfree.chart.ClipPath var17 = new org.jfree.chart.ClipPath(var11, var15);
    double[][] var18 = new double[][] { var11};
    double[] var23 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var24 = new org.jfree.chart.annotations.XYPolygonAnnotation(var23);
    double[] var27 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var28 = new org.jfree.chart.annotations.XYPolygonAnnotation(var27);
    org.jfree.chart.ClipPath var29 = new org.jfree.chart.ClipPath(var23, var27);
    double[][] var30 = new double[][] { var23};
    org.jfree.data.category.CategoryDataset var31 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var30);
    org.jfree.data.category.DefaultIntervalCategoryDataset var32 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var18, var30);
    java.util.List var33 = var32.getColumnKeys();
    var0.setDataset((org.jfree.data.category.CategoryDataset)var32);
    org.jfree.data.general.DatasetGroup var36 = new org.jfree.data.general.DatasetGroup("Combined Range XYPlot");
    java.lang.String var37 = var36.getID();
    var32.setGroup(var36);
    java.lang.Number var39 = org.jfree.data.general.DatasetUtilities.findMaximumStackedRangeValue((org.jfree.data.category.CategoryDataset)var32);
    org.jfree.data.time.Minute var40 = new org.jfree.data.time.Minute();
    int var41 = var40.getMinute();
    org.jfree.data.time.Hour var42 = var40.getHour();
    org.jfree.data.time.Day var43 = var42.getDay();
    org.jfree.data.time.Minute var44 = new org.jfree.data.time.Minute();
    int var45 = var44.getMinute();
    org.jfree.data.time.Hour var46 = var44.getHour();
    org.jfree.data.time.Year var49 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var50 = new org.jfree.data.time.Month(1, var49);
    java.util.Locale var51 = javax.swing.JComponent.getDefaultLocale();
    org.jfree.chart.axis.MonthDateFormat var53 = new org.jfree.chart.axis.MonthDateFormat(var51, 2147483647);
    java.util.Calendar var54 = var53.getCalendar();
    long var55 = var50.getLastMillisecond(var54);
    long var56 = var46.getLastMillisecond(var54);
    long var57 = var43.getLastMillisecond(var54);
    org.jfree.chart.plot.CategoryMarker var59 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    int var60 = var43.compareTo((java.lang.Object)var59);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var62 = var32.getValue((java.lang.Comparable)var60, (java.lang.Comparable)Double.POSITIVE_INFINITY);
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Combined Range XYPlot"+ "'", var37.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + 1.0d+ "'", var39.equals(1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-59008924800001L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 1378965599999L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 1378969199999L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == 1);

  }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test469"); }


    java.util.Locale var1 = javax.swing.JComponent.getDefaultLocale();
    org.jfree.chart.axis.MonthDateFormat var3 = new org.jfree.chart.axis.MonthDateFormat(var1, 2147483647);
    javax.swing.JComponent.setDefaultLocale(var1);
    org.jfree.chart.axis.TickUnitSource var5 = org.jfree.chart.axis.NumberAxis.createStandardTickUnits(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.ResourceBundle var6 = org.jfree.chart.util.ResourceBundleWrapper.getBundle("", var1);
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test470"); }


    org.jfree.chart.urls.StandardXYURLGenerator var1 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!?hi!=80&amp;hi!=100");

  }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test471"); }


    org.jfree.chart.plot.dial.DialPlot var0 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var1 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var2 = var0.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var1);
    org.jfree.chart.plot.dial.DialValueIndicator var3 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var4 = var3.getInsets();
    int var5 = var0.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var3);
    org.jfree.chart.plot.dial.DialValueIndicator var6 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var7 = var6.getInsets();
    java.awt.Stroke var8 = var6.getOutlineStroke();
    var0.setCap((org.jfree.chart.plot.dial.DialLayer)var6);
    org.jfree.chart.util.LogFormat var13 = new org.jfree.chart.util.LogFormat(0.04d, "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", false);
    org.jfree.chart.util.HexNumberFormat var15 = new org.jfree.chart.util.HexNumberFormat(52);
    var13.setExponentFormat((java.text.NumberFormat)var15);
    var6.setNumberFormat((java.text.NumberFormat)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test472"); }


    org.jfree.data.time.TimePeriodValues var3 = new org.jfree.data.time.TimePeriodValues("Compass Plot", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");
    var3.setRangeDescription("d");
    int var6 = var3.getMinStartIndex();
    int var7 = var3.getMinEndIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test473"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    boolean var8 = var0.getDrawSharedDomainAxis();
    var0.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var0.addChangeListener((org.jfree.chart.event.PlotChangeListener)var11);
    var0.clearRangeMarkers();
    java.awt.Stroke var14 = var0.getDomainCrosshairStroke();
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var16 = var15.getDomainCrosshairColumnKey();
    var15.setCrosshairDatasetIndex(100);
    org.jfree.chart.plot.CombinedRangeXYPlot var19 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var20 = var19.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var22 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var23 = var22.getMargin();
    var19.setAxisOffset(var23);
    var15.setAxisOffset(var23);
    org.jfree.data.category.CategoryDataset var27 = var15.getDataset((-2));
    org.jfree.chart.StandardChartTheme var30 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var31 = var30.getLegendItemPaint();
    java.awt.Paint var32 = var30.getSubtitlePaint();
    java.awt.Font var33 = var30.getLargeFont();
    var15.setNoDataMessageFont(var33);
    var0.setNoDataMessageFont(var33);
    
    // Checks the contract:  equals-hashcode on var11 and var19
    assertTrue("Contract failed: equals-hashcode on var11 and var19", var11.equals(var19) ? var11.hashCode() == var19.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var19 and var11
    assertTrue("Contract failed: equals-hashcode on var19 and var11", var19.equals(var11) ? var19.hashCode() == var11.hashCode() : true);

  }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test474"); }


    org.jfree.chart.renderer.category.MinMaxCategoryRenderer var0 = new org.jfree.chart.renderer.category.MinMaxCategoryRenderer();
    javax.swing.Icon var1 = var0.getMaxIcon();
    javax.swing.Icon var2 = var0.getMinIcon();
    org.jfree.chart.annotations.XYLineAnnotation var7 = new org.jfree.chart.annotations.XYLineAnnotation((-1.0d), (-1.0d), 100.0d, 100.0d);
    org.jfree.data.xy.DefaultIntervalXYDataset var8 = new org.jfree.data.xy.DefaultIntervalXYDataset();
    boolean var9 = var7.hasListener((java.util.EventListener)var8);
    int var10 = var8.getSeriesCount();
    java.lang.Object var11 = var8.clone();
    boolean var12 = var0.equals((java.lang.Object)var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test475"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isRadiusGridlinesVisible();
    org.jfree.data.time.Year var6 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var7 = new org.jfree.data.time.Month(1, var6);
    org.jfree.data.time.RegularTimePeriod var8 = var7.previous();
    long var9 = var7.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var10 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var12 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var13 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var12);
    var10.remove((org.jfree.data.time.TimePeriod)var12, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var17 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var7, (org.jfree.data.time.RegularTimePeriod)var12);
    var17.setMinorTickMarksVisible(false);
    org.jfree.data.time.Year var21 = new org.jfree.data.time.Year(100);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var22 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    int var23 = var21.compareTo((java.lang.Object)var22);
    var17.setFirst((org.jfree.data.time.RegularTimePeriod)var21);
    var0.setAxis(19, (org.jfree.chart.axis.ValueAxis)var17);
    org.jfree.chart.plot.PolarPlot var26 = new org.jfree.chart.plot.PolarPlot();
    boolean var27 = var26.isCounterClockwise();
    var26.setRadiusGridlinesVisible(false);
    int var30 = var26.getDatasetCount();
    int var31 = var26.getAxisCount();
    java.awt.Paint var32 = var26.getAngleLabelPaint();
    org.jfree.chart.LegendItemCollection var33 = var26.getLegendItems();
    var0.setFixedLegendItems(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);

  }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test476"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    int var7 = var6.getDefaultCloseOperation();
    boolean var8 = var6.isActive();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var10 = var9.getPreferredSize();
    java.awt.image.ColorModel var11 = var9.getColorModel();
    var9.updateUI();
    java.lang.String var13 = var9.toString();
    boolean var14 = var9.getInheritsPopupMenu();
    javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var16 = var15.getPreferredSize();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var15.setNextFocusableComponent((java.awt.Component)var17);
    java.util.Locale var19 = var17.getLocale();
    javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var21 = var20.getPreferredSize();
    java.awt.Dimension var22 = var17.getSize(var21);
    var9.setSize(var21);
    java.awt.LayoutManager var24 = var9.getLayout();
    var6.setLayout(var24);
    javax.swing.JRootPane var26 = var6.getRootPane();
    boolean var27 = var6.isLocationByPlatform();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var13.equals("org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test477"); }


    org.jfree.chart.plot.Crosshair var0 = new org.jfree.chart.plot.Crosshair();
    double var1 = var0.getValue();
    org.jfree.chart.needle.PinNeedle var2 = new org.jfree.chart.needle.PinNeedle();
    org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryMarker var5 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var6 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var8 = var6.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var11 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var12 = var11.getTickLabelPaint();
    var6.setFillPaint(var12, true);
    var5.setLabelPaint(var12);
    var3.setDomainGridlinePaint(var12);
    var2.setHighlightPaint(var12);
    java.awt.Paint var18 = var2.getHighlightPaint();
    var0.setLabelOutlinePaint(var18);
    org.jfree.data.statistics.SimpleHistogramBin var22 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
    var22.setItemCount(2);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var27 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var30 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var31 = var30.getItemLabelFont();
    double var32 = var30.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var35 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var36 = var35.getItemLabelFont();
    java.awt.Shape var37 = var35.getBaseLegendShape();
    var30.setShape(var37);
    var27.setLegendBar(var37);
    var27.setDrawBarOutline(true);
    java.awt.Paint var43 = var27.getLegendTextPaint(0);
    var27.setSeriesItemLabelsVisible(0, true);
    boolean var47 = var22.equals((java.lang.Object)var27);
    boolean var48 = var0.equals((java.lang.Object)var47);
    var0.setLabelOutlineVisible(false);
    boolean var51 = var0.isLabelVisible();
    java.awt.Paint var52 = var0.getPaint();
    org.jfree.chart.plot.dial.DialPlot var53 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var54 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var55 = var53.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var54);
    var54.setTickLabelsVisible(false);
    var54.setTickRadius(0.05d);
    java.awt.Stroke var60 = var54.getMinorTickStroke();
    org.jfree.chart.plot.dial.DialValueIndicator var61 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var62 = var61.getInsets();
    java.awt.Stroke var63 = var61.getOutlineStroke();
    javax.swing.JPanel var64 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var65 = var64.getPreferredSize();
    javax.swing.JPanel var66 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var64.setNextFocusableComponent((java.awt.Component)var66);
    java.util.Locale var68 = var66.getLocale();
    javax.swing.JPanel var69 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var70 = var69.getPreferredSize();
    java.awt.Dimension var71 = var66.getSize(var70);
    java.awt.event.ContainerListener[] var72 = var66.getContainerListeners();
    javax.swing.JPanel var73 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var74 = var73.getPreferredSize();
    java.awt.image.ColorModel var75 = var73.getColorModel();
    var73.updateUI();
    java.lang.String var77 = var73.toString();
    java.awt.Color var78 = var73.getForeground();
    var66.setBackground(var78);
    var61.setOutlinePaint((java.awt.Paint)var78);
    boolean var81 = var61.isClippedToWindow();
    org.jfree.ui.TextAnchor var82 = var61.getTextAnchor();
    org.jfree.chart.StandardChartTheme var85 = new org.jfree.chart.StandardChartTheme("hi!", true);
    org.jfree.chart.plot.dial.DialValueIndicator var86 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var87 = var86.getInsets();
    var85.setAxisOffset(var87);
    var61.setInsets(var87);
    org.jfree.chart.block.LineBorder var90 = new org.jfree.chart.block.LineBorder(var52, var60, var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var77 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var77,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var77.equals("org.jfree.chart.ChartPanel[,0,0,0var77,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test478"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    java.awt.Shape var12 = var10.getBaseLegendShape();
    var5.setShape(var12);
    var2.setLegendBar(var12);
    org.jfree.data.general.DefaultKeyedValues2DDataset var17 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var20 = new org.jfree.chart.entity.CategoryItemEntity(var12, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var17, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    var20.setToolTipText("Combined Range XYPlot");
    java.lang.String var23 = var20.getShapeCoords();
    var20.setToolTipText("");
    org.jfree.data.category.CategoryDataset var26 = var20.getDataset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "-4,-4,4,4"+ "'", var23.equals("-4,-4,4,4"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test479"); }


    org.jfree.chart.renderer.xy.XYDotRenderer var0 = new org.jfree.chart.renderer.xy.XYDotRenderer();
    int var1 = var0.getDotWidth();
    java.awt.Shape var2 = var0.getLegendShape();
    java.awt.Shape var3 = var0.getLegendShape();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test480"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    java.awt.image.ColorModel var2 = var0.getColorModel();
    var0.updateUI();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.getInheritsPopupMenu();
    javax.swing.InputMap var6 = var0.getInputMap();
    var0.nextFocus();
    boolean var8 = var0.getInheritsPopupMenu();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var10 = var9.getPreferredSize();
    java.awt.image.ColorModel var11 = var9.getColorModel();
    var9.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var16 = var9.getForeground();
    var0.setForeground(var16);
    var0.setEnabled(true);
    java.awt.Rectangle var20 = var0.bounds();
    var0.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var4.equals("org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test481"); }


    org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var4);
    org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
    var2.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var15 = var14.getTickLabelPaint();
    var9.setFillPaint(var15, true);
    var2.setDomainCrosshairPaint(var15);
    boolean var19 = var1.equals((java.lang.Object)var2);
    org.jfree.ui.RectangleEdge var20 = var2.getRangeAxisEdge();
    org.jfree.chart.axis.SubCategoryAxis var22 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    int var23 = var2.getDomainAxisIndex((org.jfree.chart.axis.CategoryAxis)var22);
    boolean var24 = var2.isDomainCrosshairVisible();
    boolean var25 = var2.isRangeGridlinesVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);

  }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test482"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    org.jfree.chart.plot.dial.DialValueIndicator var19 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var20 = var19.getInsets();
    java.awt.Stroke var21 = var19.getOutlineStroke();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var19.setOutlinePaint((java.awt.Paint)var36);
    java.awt.Color var39 = var36.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    double var45 = var42.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var46 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var47 = var46.getRangeZeroBaselineStroke();
    var42.setStroke(var47, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var50 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var51 = var50.isOutline();
    var50.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var56 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var57 = var56.getLegendItemPaint();
    var50.setShapePaint(var57);
    org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var16, (java.awt.Paint)var39, var47, var57);
    var59.setShapeVisible(false);
    java.awt.Font var62 = var59.getLabelFont();
    org.jfree.chart.DrawableLegendItem var63 = new org.jfree.chart.DrawableLegendItem(var59);
    double var64 = var63.getMaxY();
    var63.setX(0.0d);
    double var67 = var63.getMaxY();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.0d);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test483"); }


    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var2 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var3 = var2.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var4 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var5 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var2, (org.jfree.chart.urls.XYURLGenerator)var4);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var6 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer(2013, (org.jfree.chart.labels.XYToolTipGenerator)var2);
    java.lang.Object var7 = var6.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test484"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    java.awt.Shape var12 = var10.getBaseLegendShape();
    var5.setShape(var12);
    var2.setLegendBar(var12);
    org.jfree.data.general.DefaultKeyedValues2DDataset var17 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var20 = new org.jfree.chart.entity.CategoryItemEntity(var12, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var17, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    var20.setCategoryIndex(0);
    var20.setCategoryIndex(15);
    java.lang.Comparable var25 = var20.getRowKey();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var25 + "' != '" + 0.0f+ "'", var25.equals(0.0f));

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test485"); }


    org.jfree.chart.plot.ContourPlot var0 = new org.jfree.chart.plot.ContourPlot();
    org.jfree.chart.plot.CategoryMarker var2 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    var0.addRangeMarker((org.jfree.chart.plot.Marker)var2);
    var0.setDomainCrosshairValue(0.05d);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test486"); }


    org.jfree.chart.renderer.category.StackedBarRenderer var0 = new org.jfree.chart.renderer.category.StackedBarRenderer();
    double var1 = var0.getUpperClip();
    int var2 = var0.getPassCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 3);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test487"); }


    org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var0);
    var1.setMaximumItemCount(0);
    boolean var4 = var1.getNotify();
    double var5 = var1.getMaxY();
    java.lang.Object var6 = var1.clone();
    org.jfree.data.time.Year var9 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var10 = new org.jfree.data.time.Month(1, var9);
    org.jfree.data.time.Year var12 = new org.jfree.data.time.Year();
    org.jfree.data.gantt.Task var13 = new org.jfree.data.gantt.Task("item", (org.jfree.data.time.TimePeriod)var12);
    org.jfree.data.time.TimeSeries var14 = var1.createCopy((org.jfree.data.time.RegularTimePeriod)var9, (org.jfree.data.time.RegularTimePeriod)var12);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var14.update(11, (java.lang.Number)0);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test488"); }


    org.jfree.data.time.DynamicTimeSeriesCollection var2 = new org.jfree.data.time.DynamicTimeSeriesCollection(2, (-1));
    int var4 = var2.offsetFromOldest(51);
    int var5 = var2.getNewestIndex();
    int var7 = var2.getItemCount(20);
    int var8 = var2.getSeriesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test489"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.CyclicNumberAxis var3 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var4 = var3.getTickLabelPaint();
    org.jfree.chart.axis.ValueAxis[] var5 = new org.jfree.chart.axis.ValueAxis[] { var3};
    var0.setRangeAxes(var5);
    boolean var7 = var0.isRangeZoomable();
    org.jfree.chart.axis.PeriodAxis var10 = new org.jfree.chart.axis.PeriodAxis("Compass Plot");
    org.jfree.chart.axis.PeriodAxisLabelInfo[] var11 = new org.jfree.chart.axis.PeriodAxisLabelInfo[] { };
    var10.setLabelInfo(var11);
    var10.setMinorTickMarksVisible(false);
    var0.setRangeAxis(3, (org.jfree.chart.axis.ValueAxis)var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test490"); }


    org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("null");
    org.jfree.data.time.Week var3 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var4 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var3);
    org.jfree.data.time.TimePeriodValue var6 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var3, (java.lang.Number)10);
    org.jfree.data.time.ohlc.OHLCItem var11 = new org.jfree.data.time.ohlc.OHLCItem((org.jfree.data.time.RegularTimePeriod)var3, 100.0d, 0.0d, 0.05d, 0.0d);
    var1.addCategoryLabelToolTip((java.lang.Comparable)var3, "[size=0x00000000]");
    int var14 = var3.getYearValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2013);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test491"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var0.setDomainZeroBaselineVisible(false);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var4 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var5 = var4.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var6 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var7 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var4, (org.jfree.chart.urls.XYURLGenerator)var6);
    var7.setShapesFilled(true);
    var7.setSeriesVisibleInLegend(8, (java.lang.Boolean)false);
    var0.setRenderer((org.jfree.chart.renderer.xy.XYItemRenderer)var7);
    org.jfree.chart.labels.XYItemLabelGenerator var14 = var7.getItemLabelGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test492"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.plot.CombinedRangeXYPlot var2 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var3 = var2.getRangeZeroBaselineStroke();
    java.lang.String var4 = var2.getPlotType();
    boolean var5 = var2.isDomainZoomable();
    org.jfree.chart.plot.CombinedRangeXYPlot var6 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var7 = var6.getRangeZeroBaselineStroke();
    var2.setDomainCrosshairStroke(var7);
    var1.setBaseOutlineStroke(var7, true);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var13 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var14 = var13.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var15 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var16 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var13, (org.jfree.chart.urls.XYURLGenerator)var15);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var17 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var13);
    boolean var18 = var1.equals((java.lang.Object)var13);
    java.lang.Object var19 = var13.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Combined Range XYPlot"+ "'", var4.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test493"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var11 = new org.jfree.chart.entity.ContourEntity(var9, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var14 = var13.isVisible();
    java.lang.Object var15 = var13.clone();
    java.lang.String var16 = var13.getURLText();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.image.ColorModel var19 = var17.getColorModel();
    var17.updateUI();
    java.lang.String var21 = var17.toString();
    java.awt.Color var22 = var17.getForeground();
    var13.setBackgroundPaint((java.awt.Paint)var22);
    int var24 = var22.getRGB();
    int var25 = var22.getBlue();
    org.jfree.chart.plot.dial.DialPlot var26 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var27 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var28 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var27);
    org.jfree.chart.plot.dial.DialValueIndicator var29 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var30 = var29.getInsets();
    int var31 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var29);
    java.awt.Stroke var32 = var29.getOutlineStroke();
    org.jfree.chart.title.TextTitle var34 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var35 = var34.isVisible();
    java.lang.Object var36 = var34.clone();
    java.lang.String var37 = var34.getURLText();
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.image.ColorModel var40 = var38.getColorModel();
    var38.updateUI();
    java.lang.String var42 = var38.toString();
    java.awt.Color var43 = var38.getForeground();
    var34.setBackgroundPaint((java.awt.Paint)var43);
    org.jfree.chart.LegendItem var45 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var9, (java.awt.Paint)var22, var32, (java.awt.Paint)var43);
    var0.setBaseSectionOutlinePaint((java.awt.Paint)var22);
    org.jfree.chart.labels.PieSectionLabelGenerator var47 = var0.getLegendLabelToolTipGenerator();
    org.jfree.chart.plot.Crosshair var49 = new org.jfree.chart.plot.Crosshair();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var50 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var52 = var50.getSeriesLinesVisible(10);
    var50.setUseOutlinePaint(true);
    boolean var55 = var49.equals((java.lang.Object)true);
    java.awt.Paint var56 = var49.getLabelPaint();
    var0.setSectionPaint((java.lang.Comparable)0.2d, var56);
    javax.swing.JPanel var58 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var59 = var58.getPreferredSize();
    javax.swing.JPanel var60 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var58.setNextFocusableComponent((java.awt.Component)var60);
    java.util.Locale var62 = var60.getLocale();
    javax.swing.JPanel var63 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var64 = var63.getPreferredSize();
    java.awt.Dimension var65 = var60.getSize(var64);
    java.awt.event.ContainerListener[] var66 = var60.getContainerListeners();
    boolean var69 = var60.inside(2147483647, 10);
    java.awt.Dimension var70 = var60.getMinimumSize();
    int var71 = var60.getY();
    java.lang.String var72 = var60.getUIClassID();
    java.awt.Color var73 = var60.getForeground();
    var0.setBaseSectionPaint((java.awt.Paint)var73);
    var0.setCircular(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var71 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var72 + "' != '" + "PanelUI"+ "'", var72.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test494"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setNextFocusableComponent((java.awt.Component)var2);
    java.util.Locale var4 = var2.getLocale();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    java.awt.Dimension var7 = var2.getSize(var6);
    java.awt.event.ContainerListener[] var8 = var2.getContainerListeners();
    boolean var11 = var2.inside(2147483647, 10);
    java.awt.Dimension var12 = var2.getMinimumSize();
    int var13 = var2.getY();
    java.lang.String var14 = var2.getUIClassID();
    java.awt.Color var15 = var2.getForeground();
    int var16 = var15.getTransparency();
    int var17 = var15.getTransparency();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "PanelUI"+ "'", var14.equals("PanelUI"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 1);

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test495"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isCounterClockwise();
    var0.setRadiusGridlinesVisible(false);
    int var4 = var0.getDatasetCount();
    boolean var5 = var0.isAngleGridlinesVisible();
    org.jfree.data.xy.CategoryTableXYDataset var7 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.general.DefaultKeyedValues2DDataset var8 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var8.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var13 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var8);
    java.util.List var14 = var8.getColumnKeys();
    org.jfree.data.Range var16 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset)var7, var14, true);
    var0.setDataset(15, (org.jfree.data.xy.XYDataset)var7);
    org.jfree.chart.axis.CyclicNumberAxis var21 = new org.jfree.chart.axis.CyclicNumberAxis(0.0d, 3.0d, "hi!?hi!=15&amp;hi!=10");
    org.jfree.data.Range var22 = var21.getDefaultAutoRange();
    int var23 = var0.getAxisIndex((org.jfree.chart.axis.ValueAxis)var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test496"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var7 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var9 = var7.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var12 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var13 = var12.getTickLabelPaint();
    var7.setFillPaint(var13, true);
    var0.setDomainCrosshairPaint(var13);
    boolean var17 = var0.isRangeCrosshairLockedOnData();
    org.jfree.chart.util.ShadowGenerator var18 = var0.getShadowGenerator();
    var0.setDomainGridlinesVisible(true);
    var0.configureRangeAxes();
    org.jfree.chart.JFreeChart var22 = new org.jfree.chart.JFreeChart((org.jfree.chart.plot.Plot)var0);
    var22.setAntiAlias(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test497"); }


    org.jfree.chart.axis.SubCategoryAxis var1 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    var1.configure();
    double var3 = var1.getLowerMargin();
    java.awt.Font var5 = var1.getTickLabelFont((java.lang.Comparable)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test498"); }


    org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.data.category.CategoryDataset var1 = var0.getDataset();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var9 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var12 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var13 = var12.getItemLabelFont();
    double var14 = var12.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var17 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var18 = var17.getItemLabelFont();
    java.awt.Shape var19 = var17.getBaseLegendShape();
    var12.setShape(var19);
    var9.setLegendBar(var19);
    org.jfree.chart.plot.dial.DialValueIndicator var22 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var23 = var22.getInsets();
    java.awt.Stroke var24 = var22.getOutlineStroke();
    javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var26 = var25.getPreferredSize();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var25.setNextFocusableComponent((java.awt.Component)var27);
    java.util.Locale var29 = var27.getLocale();
    javax.swing.JPanel var30 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var31 = var30.getPreferredSize();
    java.awt.Dimension var32 = var27.getSize(var31);
    java.awt.event.ContainerListener[] var33 = var27.getContainerListeners();
    javax.swing.JPanel var34 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var35 = var34.getPreferredSize();
    java.awt.image.ColorModel var36 = var34.getColorModel();
    var34.updateUI();
    java.lang.String var38 = var34.toString();
    java.awt.Color var39 = var34.getForeground();
    var27.setBackground(var39);
    var22.setOutlinePaint((java.awt.Paint)var39);
    java.awt.Color var42 = var39.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var45 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var46 = var45.getItemLabelFont();
    java.awt.Shape var47 = var45.getBaseLegendShape();
    double var48 = var45.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var49 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var50 = var49.getRangeZeroBaselineStroke();
    var45.setStroke(var50, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var53 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var54 = var53.isOutline();
    var53.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var59 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var60 = var59.getLegendItemPaint();
    var53.setShapePaint(var60);
    org.jfree.chart.LegendItem var62 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var19, (java.awt.Paint)var42, var50, var60);
    var0.setAggregatedItemsPaint(var60);
    java.awt.Shape var64 = var0.getLegendItemShape();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Multiple Pie Plot"+ "'", var2.equals("Multiple Pie Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var38,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var38.equals("org.jfree.chart.ChartPanel[,0,0,0var38,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test499"); }


    org.jfree.chart.servlet.ServletUtilities.setTempOneTimeFilePrefix("ChartChangeEventType.GENERAL");

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest3.test500"); }


    org.jfree.data.general.DefaultKeyedValues2DDataset var0 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var0.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var6 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds((org.jfree.data.category.CategoryDataset)var0, true);
    java.util.List var7 = var0.getColumnKeys();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

}
