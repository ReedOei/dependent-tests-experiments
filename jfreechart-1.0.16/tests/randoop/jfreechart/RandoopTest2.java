package randoop.jfreechart;

import junit.framework.*;

public class RandoopTest2 extends TestCase {

  public static boolean debug = false;

  public void test1() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test1"); }


    org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var4);
    org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
    var2.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var15 = var14.getTickLabelPaint();
    var9.setFillPaint(var15, true);
    var2.setDomainCrosshairPaint(var15);
    boolean var19 = var1.equals((java.lang.Object)var2);
    org.jfree.ui.RectangleEdge var20 = var2.getRangeAxisEdge();
    org.jfree.chart.axis.SubCategoryAxis var22 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    int var23 = var2.getDomainAxisIndex((org.jfree.chart.axis.CategoryAxis)var22);
    var2.setDomainGridlinesVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-1));

  }

  public void test2() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test2"); }


    org.jfree.chart.util.LogFormat var6 = new org.jfree.chart.util.LogFormat(0.0d, "hi!", true);
    javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var8 = var7.getPreferredSize();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var7.setNextFocusableComponent((java.awt.Component)var9);
    java.util.Locale var11 = var9.getLocale();
    org.jfree.chart.axis.TickUnitSource var12 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var11);
    java.text.NumberFormat var13 = java.text.NumberFormat.getPercentInstance(var11);
    org.jfree.chart.labels.StandardXYItemLabelGenerator var14 = new org.jfree.chart.labels.StandardXYItemLabelGenerator("d", (java.text.NumberFormat)var6, var13);
    org.jfree.chart.axis.NumberTickUnit var15 = new org.jfree.chart.axis.NumberTickUnit(0.04d, (java.text.NumberFormat)var6);
    org.jfree.chart.util.LogFormat var20 = new org.jfree.chart.util.LogFormat(0.0d, "hi!", true);
    javax.swing.JPanel var21 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var22 = var21.getPreferredSize();
    javax.swing.JPanel var23 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var21.setNextFocusableComponent((java.awt.Component)var23);
    java.util.Locale var25 = var23.getLocale();
    org.jfree.chart.axis.TickUnitSource var26 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var25);
    java.text.NumberFormat var27 = java.text.NumberFormat.getPercentInstance(var25);
    org.jfree.chart.labels.StandardXYItemLabelGenerator var28 = new org.jfree.chart.labels.StandardXYItemLabelGenerator("d", (java.text.NumberFormat)var20, var27);
    org.jfree.chart.labels.StandardXYItemLabelGenerator var29 = new org.jfree.chart.labels.StandardXYItemLabelGenerator("item", (java.text.NumberFormat)var6, var27);
    
    // Checks the contract:  equals-hashcode on var12 and var26
    assertTrue("Contract failed: equals-hashcode on var12 and var26", var12.equals(var26) ? var12.hashCode() == var26.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var26 and var12
    assertTrue("Contract failed: equals-hashcode on var26 and var12", var26.equals(var12) ? var26.hashCode() == var12.hashCode() : true);

  }

  public void test3() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test3"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    boolean var2 = var0.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var4 = new org.jfree.chart.plot.ContourPlot();
    var4.setOutlineVisible(false);
    var0.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var4);
    javax.swing.JPopupMenu var8 = var0.getComponentPopupMenu();
    var0.reshape((-13421773), 2147483647, 2013, 2013);
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var15 = var14.getPreferredSize();
    java.awt.image.ColorModel var16 = var14.getColorModel();
    var14.updateUI();
    java.lang.String var18 = var14.toString();
    boolean var19 = var14.getInheritsPopupMenu();
    javax.swing.InputMap var20 = var14.getInputMap();
    var14.nextFocus();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    var14.setMinimumSize(var29);
    java.awt.Dimension var31 = var0.getSize(var29);
    java.awt.LayoutManager var32 = var0.getLayout();
    java.awt.Component var35 = var0.getComponentAt(2013, 10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var18.equals("org.jfree.chart.ChartPanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);

  }

  public void test4() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test4"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var1 = var0.getDomainCrosshairColumnKey();
    var0.setCrosshairDatasetIndex(100);
    int var4 = var0.getBackgroundImageAlignment();
    org.jfree.chart.axis.CategoryLabelPositions var6 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var9 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var10 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var9);
    org.jfree.data.time.TimePeriodValue var12 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var9, (java.lang.Number)10);
    var7.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var14 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var16 = var14.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var19 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var20 = var19.getTickLabelPaint();
    var14.setFillPaint(var20, true);
    var7.setDomainCrosshairPaint(var20);
    boolean var24 = var6.equals((java.lang.Object)var7);
    org.jfree.ui.RectangleEdge var25 = var7.getRangeAxisEdge();
    org.jfree.chart.axis.SubCategoryAxis var27 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    int var28 = var7.getDomainAxisIndex((org.jfree.chart.axis.CategoryAxis)var27);
    java.awt.Paint var29 = var27.getSubLabelPaint();
    org.jfree.chart.plot.CombinedRangeXYPlot var31 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    org.jfree.chart.annotations.XYPointerAnnotation var36 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var37 = var36.getLabelOffset();
    org.jfree.ui.TextAnchor var38 = var36.getRotationAnchor();
    boolean var39 = var31.removeAnnotation((org.jfree.chart.annotations.XYAnnotation)var36);
    org.jfree.chart.StandardChartTheme var42 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var43 = var42.getLegendItemPaint();
    java.awt.Paint var44 = var42.getSubtitlePaint();
    java.awt.Font var45 = var42.getLargeFont();
    var36.setFont(var45);
    var27.setTickLabelFont((java.lang.Comparable)(byte)10, var45);
    var0.setNoDataMessageFont(var45);
    org.jfree.chart.StandardChartTheme var50 = new org.jfree.chart.StandardChartTheme("Compass Plot");
    java.awt.Paint var51 = var50.getTitlePaint();
    java.awt.Paint var52 = var50.getChartBackgroundPaint();
    org.jfree.chart.plot.CategoryPlot var53 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.CategoryAxis var54 = var53.getDomainAxis();
    boolean var55 = var53.isRangeMinorGridlinesVisible();
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var56 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var57 = var56.isOutline();
    var56.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var62 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var63 = var62.getLegendItemPaint();
    var56.setShapePaint(var63);
    var53.setRangeMinorGridlinePaint(var63);
    var50.setLegendBackgroundPaint(var63);
    javax.swing.JPanel var68 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var69 = var68.getPreferredSize();
    java.awt.image.ColorModel var70 = var68.getColorModel();
    var68.updateUI();
    java.lang.String var72 = var68.toString();
    java.awt.Color var73 = var68.getForeground();
    org.jfree.chart.util.DefaultShadowGenerator var77 = new org.jfree.chart.util.DefaultShadowGenerator(20, var73, 0.5f, (-2), 0.2d);
    var50.setLegendItemPaint((java.awt.Paint)var73);
    var0.setRangeMinorGridlinePaint((java.awt.Paint)var73);
    
    // Checks the contract:  equals-hashcode on var42 and var62
    assertTrue("Contract failed: equals-hashcode on var42 and var62", var42.equals(var62) ? var42.hashCode() == var62.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var62 and var42
    assertTrue("Contract failed: equals-hashcode on var62 and var42", var62.equals(var42) ? var62.hashCode() == var42.hashCode() : true);

  }

  public void test5() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test5"); }


    org.jfree.data.xy.XIntervalSeriesCollection var0 = new org.jfree.data.xy.XIntervalSeriesCollection();
    org.jfree.data.xy.XIntervalSeries var2 = new org.jfree.data.xy.XIntervalSeries((java.lang.Comparable)1201L);
    var0.addSeries(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var6 = var0.getEndX(52, 52);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test6() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test6"); }


    java.lang.String[] var2 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var4 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var6 = var4.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var9 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var10 = var9.getTickLabelPaint();
    var4.setFillPaint(var10, true);
    var3.setGridBandAlternatePaint(var10);
    var3.setFixedDimension(100.0d);
    java.awt.Paint var16 = var3.getAxisLinePaint();
    boolean var17 = var3.isPositiveArrowVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test7() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test7"); }


    org.jfree.chart.plot.DefaultDrawingSupplier var0 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    java.awt.Stroke var1 = var0.getNextStroke();
    java.awt.Paint var2 = var0.getNextFillPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test8() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test8"); }


    org.jfree.data.xy.DefaultIntervalXYDataset var0 = new org.jfree.data.xy.DefaultIntervalXYDataset();
    org.jfree.chart.util.ParamChecks.nullNotPermitted((java.lang.Object)var0, "Combined Range XYPlot");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var5 = var0.getEndYValue(51, 10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test9() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test9"); }


    org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
    var1.clearSeriesPaints(false);
    boolean var4 = var1.getBaseLinesVisible();
    boolean var7 = var1.getItemShapeFilled((-2), 15);
    org.jfree.chart.plot.MultiplePiePlot var8 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var9 = var8.getPieChart();
    var9.setBackgroundImageAlpha(1.0f);
    org.jfree.chart.plot.CombinedRangeXYPlot var12 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var13 = var12.getRangeZeroBaselineStroke();
    java.lang.String var14 = var12.getPlotType();
    org.jfree.chart.plot.CategoryMarker var16 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var17 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var19 = var17.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var22 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var23 = var22.getTickLabelPaint();
    var17.setFillPaint(var23, true);
    var16.setLabelPaint(var23);
    boolean var27 = var12.removeRangeMarker((org.jfree.chart.plot.Marker)var16);
    org.jfree.chart.axis.AxisLocation var28 = var12.getDomainAxisLocation();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var31 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var34 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var35 = var34.getItemLabelFont();
    double var36 = var34.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var39 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var40 = var39.getItemLabelFont();
    java.awt.Shape var41 = var39.getBaseLegendShape();
    var34.setShape(var41);
    var31.setLegendBar(var41);
    var31.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var46 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var47 = var31.findDomainBounds((org.jfree.data.xy.XYDataset)var46);
    int var48 = var12.getIndexOf((org.jfree.chart.renderer.xy.XYItemRenderer)var31);
    org.jfree.chart.event.RendererChangeEvent var50 = new org.jfree.chart.event.RendererChangeEvent((java.lang.Object)var31, false);
    org.jfree.chart.event.ChartChangeEventType var51 = var50.getType();
    java.lang.String var52 = var51.toString();
    org.jfree.chart.event.ChartChangeEvent var53 = new org.jfree.chart.event.ChartChangeEvent((java.lang.Object)(-2), var9, var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Combined Range XYPlot"+ "'", var14.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var52 + "' != '" + "ChartChangeEventType.GENERAL"+ "'", var52.equals("ChartChangeEventType.GENERAL"));

  }

  public void test10() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test10"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setNextFocusableComponent((java.awt.Component)var2);
    javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var5 = var4.getLocation();
    java.awt.Dimension var6 = var4.preferredSize();
    var0.setSize(var6);
    javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var9 = var8.getPreferredSize();
    java.awt.image.ColorModel var10 = var8.getColorModel();
    var8.firePropertyChange("", 0.0f, 0.0f);
    javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var16 = var15.getLocation();
    java.awt.Point var17 = var8.getLocation(var16);
    var0.add((java.awt.Component)var8, (java.lang.Object)(-1.0d), 0);
    javax.swing.JPanel var21 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var22 = var21.getPreferredSize();
    javax.swing.JPanel var23 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var21.setNextFocusableComponent((java.awt.Component)var23);
    java.util.Locale var25 = var23.getLocale();
    var23.list();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    boolean var29 = var27.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var31 = new org.jfree.chart.plot.ContourPlot();
    var31.setOutlineVisible(false);
    var27.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var31);
    org.jfree.chart.urls.XYURLGenerator var35 = var31.getURLGenerator();
    org.jfree.chart.ClipPath var36 = var31.getClipPath();
    var23.addPropertyChangeListener((java.beans.PropertyChangeListener)var31);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var38 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var39 = var38.getBaseItemLabelsVisible();
    var38.setSeriesShapesFilled(1, (java.lang.Boolean)false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var8.add((java.awt.Component)var23, (java.lang.Object)false, 8);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + false+ "'", var39.equals(false));

  }

  public void test11() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test11"); }


    org.jfree.chart.renderer.xy.StandardXYBarPainter var0 = new org.jfree.chart.renderer.xy.StandardXYBarPainter();
    boolean var2 = var0.equals((java.lang.Object)8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test12() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test12"); }


    org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var1 = var0.getPieChart();
    var1.setBackgroundImageAlpha(1.0f);
    boolean var4 = var1.getAntiAlias();
    java.awt.Paint var5 = var1.getBorderPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test13() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test13"); }


    org.jfree.data.time.Year var2 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var3 = new org.jfree.data.time.Month(1, var2);
    org.jfree.chart.util.HexNumberFormat var5 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var7 = var6.getPreferredSize();
    javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var6.setNextFocusableComponent((java.awt.Component)var8);
    java.util.Locale var10 = var8.getLocale();
    org.jfree.chart.axis.MonthDateFormat var11 = new org.jfree.chart.axis.MonthDateFormat(var10);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var12 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var5, (java.text.DateFormat)var11);
    boolean var13 = var2.equals((java.lang.Object)var11);
    org.jfree.chart.renderer.category.BarRenderer3D var16 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var17 = var16.getItemLabelFont();
    java.awt.Shape var18 = var16.getBaseLegendShape();
    boolean var19 = var2.equals((java.lang.Object)var16);
    var16.setItemMargin(1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test14() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test14"); }


    org.jfree.chart.plot.GreyPalette var0 = new org.jfree.chart.plot.GreyPalette();
    var0.setMaxZ((-170.0d));
    var0.setPaletteName("Range[0.0,0.0]");

  }

  public void test15() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test15"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    boolean var2 = var0.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var4 = new org.jfree.chart.plot.ContourPlot();
    var4.setOutlineVisible(false);
    var0.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var4);
    org.jfree.chart.urls.XYURLGenerator var8 = var4.getURLGenerator();
    org.jfree.data.contour.ContourDataset var9 = var4.getDataset();
    java.lang.String[] var12 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var13 = new org.jfree.chart.axis.SymbolAxis("hi!", var12);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var14 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var16 = var14.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var19 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var20 = var19.getTickLabelPaint();
    var14.setFillPaint(var20, true);
    var13.setGridBandAlternatePaint(var20);
    var13.setFixedDimension(100.0d);
    var13.setTickMarkInsideLength(2.0f);
    var4.setDomainAxis((org.jfree.chart.axis.ValueAxis)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test16() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test16"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CombinedRangeXYPlot var2 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var3 = var2.getRangeZeroBaselineStroke();
    var0.setRangeGridlineStroke(var3);
    boolean var5 = var0.isRangeZeroBaselineVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test17() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test17"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    boolean var2 = var0.getIgnoreRepaint();
    boolean var3 = var0.isLightweight();
    javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var5 = var4.getPreferredSize();
    javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var4.setNextFocusableComponent((java.awt.Component)var6);
    var4.show();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var10 = var9.getLocation();
    java.awt.Dimension var11 = var9.preferredSize();
    java.awt.Rectangle var12 = var9.bounds();
    var4.scrollRectToVisible(var12);
    var0.setBounds(var12);
    org.jfree.data.statistics.DefaultMultiValueCategoryDataset var17 = new org.jfree.data.statistics.DefaultMultiValueCategoryDataset();
    org.jfree.chart.entity.CategoryItemEntity var20 = new org.jfree.chart.entity.CategoryItemEntity((java.awt.Shape)var12, "Multiple Pie Plot", "0x00000000", (org.jfree.data.category.CategoryDataset)var17, (java.lang.Comparable)"hi!", (java.lang.Comparable)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test18() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test18"); }


    org.jfree.chart.plot.Crosshair var0 = new org.jfree.chart.plot.Crosshair();
    java.awt.Paint var1 = var0.getLabelPaint();
    boolean var2 = var0.isLabelOutlineVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);

  }

  public void test19() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test19"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    java.awt.Shape var12 = var10.getBaseLegendShape();
    var5.setShape(var12);
    var2.setLegendBar(var12);
    var2.setDrawBarOutline(true);
    org.jfree.chart.title.LegendTitle var17 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var2);
    org.jfree.chart.renderer.xy.XYBlockRenderer var18 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.chart.renderer.PaintScale var19 = var18.getPaintScale();
    org.jfree.chart.renderer.PaintScale var20 = var18.getPaintScale();
    boolean var21 = var18.getDataBoundsIncludesVisibleSeriesOnly();
    org.jfree.ui.RectangleAnchor var22 = var18.getBlockAnchor();
    var17.setLegendItemGraphicAnchor(var22);
    org.jfree.util.SortOrder var24 = var17.getSortOrder();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test20() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test20"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    boolean var7 = var6.isShowing();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test21() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test21"); }


    org.jfree.data.time.Week var1 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var2 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var1);
    org.jfree.data.time.TimePeriodValue var4 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var1, (java.lang.Number)10);
    java.lang.Object var5 = var4.clone();
    java.lang.Number var6 = var4.getValue();
    org.jfree.data.time.TimePeriod var7 = var4.getPeriod();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + 10+ "'", var6.equals(10));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test22() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test22"); }


    java.lang.String[] var2 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
    var3.setLabelAngle(0.0d);
    boolean var6 = var3.isVerticalTickLabels();
    boolean var7 = var3.isAxisLineVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test23() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test23"); }


    org.jfree.data.xy.OHLCDataItem[] var1 = new org.jfree.data.xy.OHLCDataItem[] { };
    org.jfree.data.xy.DefaultOHLCDataset var2 = new org.jfree.data.xy.DefaultOHLCDataset((java.lang.Comparable)0.05d, var1);
    int var3 = var2.getSeriesCount();
    java.lang.String[] var6 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var7 = new org.jfree.chart.axis.SymbolAxis("hi!", var6);
    org.jfree.chart.plot.CompassPlot var8 = new org.jfree.chart.plot.CompassPlot();
    boolean var9 = var7.equals((java.lang.Object)var8);
    java.lang.String var10 = var8.getPlotType();
    java.awt.Paint var11 = var8.getRoseCenterPaint();
    java.awt.Paint var12 = var8.getBackgroundPaint();
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var14 = var13.getPreferredSize();
    java.awt.image.ColorModel var15 = var13.getColorModel();
    var13.updateUI();
    java.lang.String var17 = var13.toString();
    boolean var18 = var13.getInheritsPopupMenu();
    javax.swing.InputMap var19 = var13.getInputMap();
    var13.nextFocus();
    boolean var21 = var13.getInheritsPopupMenu();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    java.awt.image.ColorModel var24 = var22.getColorModel();
    var22.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var29 = var22.getForeground();
    var13.setForeground(var29);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var32 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var12, (java.awt.Paint)var29, true);
    java.awt.Shape var34 = var32.lookupLegendShape((-1));
    java.awt.Paint var35 = var32.getNegativePaint();
    boolean var36 = var2.equals((java.lang.Object)var35);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var39 = var2.getX((-334), (-1));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var10 + "' != '" + "Compass Plot"+ "'", var10.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var17 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var17,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var17.equals("org.jfree.chart.ChartPanel[,0,0,0var17,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);

  }

  public void test24() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test24"); }


    org.jfree.chart.renderer.category.StackedBarRenderer var1 = new org.jfree.chart.renderer.category.StackedBarRenderer(false);
    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var5 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var8 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var9 = var8.getItemLabelFont();
    double var10 = var8.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var13 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var14 = var13.getItemLabelFont();
    java.awt.Shape var15 = var13.getBaseLegendShape();
    var8.setShape(var15);
    var5.setLegendBar(var15);
    org.jfree.data.general.DefaultKeyedValues2DDataset var20 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var23 = new org.jfree.chart.entity.CategoryItemEntity(var15, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var20, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.data.Range var25 = var2.findRangeBounds((org.jfree.data.category.CategoryDataset)var20, true);
    org.jfree.data.Range var26 = var1.findRangeBounds((org.jfree.data.category.CategoryDataset)var20);
    boolean var27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var20);
    org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var30 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var31 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var30);
    org.jfree.data.time.TimePeriodValue var33 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var30, (java.lang.Number)10);
    var28.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var35 = var28.getDrawSharedDomainAxis();
    org.jfree.ui.RectangleEdge var37 = var28.getDomainAxisEdge(2);
    java.util.List var38 = var28.getAnnotations();
    org.jfree.data.Range var40 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var20, var38, false);
    org.jfree.chart.plot.MultiplePiePlot var41 = new org.jfree.chart.plot.MultiplePiePlot((org.jfree.data.category.CategoryDataset)var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);

  }

  public void test25() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test25"); }


    org.jfree.chart.renderer.xy.XYBarRenderer var1 = new org.jfree.chart.renderer.xy.XYBarRenderer(100.0d);
    boolean var2 = var1.getUseYInterval();
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    java.awt.Shape var12 = var10.getBaseLegendShape();
    var5.setShape(var12);
    org.jfree.chart.StandardChartTheme var16 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var17 = var16.getLegendItemPaint();
    var5.setItemLabelPaint(var17);
    org.jfree.chart.block.ColorBlock var21 = new org.jfree.chart.block.ColorBlock(var17, 4.0d, (-0.7853981633974483d));
    java.awt.Paint var22 = var21.getPaint();
    var1.setFillPaint(var22, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test26() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test26"); }


    org.jfree.data.function.LineFunction2D var2 = new org.jfree.data.function.LineFunction2D(0.05d, 10.0d);
    double var4 = var2.getValue(0.0d);
    org.jfree.data.general.DefaultKeyedValueDataset var5 = new org.jfree.data.general.DefaultKeyedValueDataset();
    org.jfree.data.general.DatasetGroup var6 = var5.getGroup();
    boolean var7 = var2.equals((java.lang.Object)var5);
    org.jfree.data.xy.XYDataset var12 = org.jfree.data.general.DatasetUtilities.sampleFunction2D((org.jfree.data.function.Function2D)var2, 0.25d, 2.0d, 15, (java.lang.Comparable)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test27() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test27"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isCounterClockwise();
    var0.setRadiusGridlinesVisible(false);
    int var4 = var0.getDatasetCount();
    int var5 = var0.getAxisCount();
    double var6 = var0.getAngleOffset();
    org.jfree.chart.renderer.xy.XYBlockRenderer var7 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.chart.renderer.PaintScale var8 = var7.getPaintScale();
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var9 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var10 = var9.isOutline();
    var9.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var15 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var16 = var15.getLegendItemPaint();
    var9.setShapePaint(var16);
    org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var19 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((java.lang.Comparable)(short)10);
    int var21 = var19.getItemCount((-13421773));
    boolean var22 = var9.equals((java.lang.Object)var19);
    org.jfree.data.Range var23 = var7.findDomainBounds((org.jfree.data.xy.XYDataset)var19);
    int var24 = var0.indexOf((org.jfree.data.xy.XYDataset)var19);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var27 = var19.getQ3Value(10, 3);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-90.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));

  }

  public void test28() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test28"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.plot.CombinedRangeXYPlot var2 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var3 = var2.getRangeZeroBaselineStroke();
    java.lang.String var4 = var2.getPlotType();
    boolean var5 = var2.isDomainZoomable();
    org.jfree.chart.plot.CombinedRangeXYPlot var6 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var7 = var6.getRangeZeroBaselineStroke();
    var2.setDomainCrosshairStroke(var7);
    var1.setBaseOutlineStroke(var7, true);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var13 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var14 = var13.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var15 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var16 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var13, (org.jfree.chart.urls.XYURLGenerator)var15);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var17 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var13);
    boolean var18 = var1.equals((java.lang.Object)var13);
    java.lang.String var19 = var13.getFormatString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "Combined Range XYPlot"+ "'", var4.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var19 + "' != '" + "X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} "+ "'", var19.equals("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} "));

  }

  public void test29() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test29"); }


    org.jfree.data.xy.XYCoordinate var0 = new org.jfree.data.xy.XYCoordinate();
    double var1 = var0.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);

  }

  public void test30() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test30"); }


    org.jfree.data.time.DynamicTimeSeriesCollection var2 = new org.jfree.data.time.DynamicTimeSeriesCollection(2, (-1));
    int var4 = var2.offsetFromOldest(51);
    int var5 = var2.getNewestIndex();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var8 = var2.getYValue(19, 0);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-2));

  }

  public void test31() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test31"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var2 = var0.findDomainBounds((org.jfree.data.xy.XYDataset)var1);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.labels.ItemLabelPosition var10 = var5.getNegativeItemLabelPosition(0, 0);
    double var11 = var10.getAngle();
    var0.setNegativeItemLabelPosition(var10);
    org.jfree.chart.labels.XYSeriesLabelGenerator var13 = var0.getLegendItemToolTipGenerator();
    org.jfree.chart.title.LegendTitle var14 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var0);
    org.jfree.chart.block.BlockContainer var15 = var14.getItemContainer();
    org.jfree.chart.block.CenterArrangement var16 = new org.jfree.chart.block.CenterArrangement();
    var15.setArrangement((org.jfree.chart.block.Arrangement)var16);
    org.jfree.chart.block.CenterArrangement var18 = new org.jfree.chart.block.CenterArrangement();
    org.jfree.chart.block.BlockContainer var19 = new org.jfree.chart.block.BlockContainer((org.jfree.chart.block.Arrangement)var18);
    var15.setArrangement((org.jfree.chart.block.Arrangement)var18);
    
    // Checks the contract:  equals-hashcode on var15 and var19
    assertTrue("Contract failed: equals-hashcode on var15 and var19", var15.equals(var19) ? var15.hashCode() == var19.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var19 and var15
    assertTrue("Contract failed: equals-hashcode on var19 and var15", var19.equals(var15) ? var19.hashCode() == var15.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var16 and var18
    assertTrue("Contract failed: equals-hashcode on var16 and var18", var16.equals(var18) ? var16.hashCode() == var18.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var18 and var16
    assertTrue("Contract failed: equals-hashcode on var18 and var16", var18.equals(var16) ? var18.hashCode() == var16.hashCode() : true);

  }

  public void test32() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test32"); }


    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week(2147483647, 1);

  }

  public void test33() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test33"); }


    org.jfree.data.xy.MatrixSeriesCollection var0 = new org.jfree.data.xy.MatrixSeriesCollection();
    int var1 = var0.getSeriesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);

  }

  public void test34() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test34"); }


    org.jfree.chart.renderer.xy.StackedXYBarRenderer var0 = new org.jfree.chart.renderer.xy.StackedXYBarRenderer();
    javax.swing.JPanel var1 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var2 = var1.getPreferredSize();
    java.awt.image.ColorModel var3 = var1.getColorModel();
    var1.updateUI();
    java.lang.String var5 = var1.toString();
    var1.setFocusable(true);
    boolean var8 = var0.equals((java.lang.Object)var1);
    java.awt.Paint var10 = var0.lookupSeriesOutlinePaint((-1));
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var13 = var11.getSeriesLinesVisible(10);
    java.awt.Stroke var14 = var11.getErrorIndicatorStroke();
    org.jfree.data.general.DefaultKeyedValues2DDataset var15 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var15.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    var15.setValue((java.lang.Number)0.04d, (java.lang.Comparable)(short)(-1), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var24 = var11.findRangeBounds((org.jfree.data.category.CategoryDataset)var15);
    org.jfree.data.general.DefaultKeyedValues2DDataset var25 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.data.Range var26 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var25);
    org.jfree.data.Range var27 = var11.findRangeBounds((org.jfree.data.category.CategoryDataset)var25);
    org.jfree.data.time.Year var32 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var33 = new org.jfree.data.time.Month(1, var32);
    org.jfree.data.time.RegularTimePeriod var34 = var33.previous();
    long var35 = var33.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var36 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var38 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var39 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var38);
    var36.remove((org.jfree.data.time.TimePeriod)var38, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var43 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var33, (org.jfree.data.time.RegularTimePeriod)var38);
    java.util.Date var44 = var38.getEnd();
    var25.setValue((java.lang.Number)0.0d, (java.lang.Comparable)var38, (java.lang.Comparable)52);
    boolean var47 = var0.equals((java.lang.Object)0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var5,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var5.equals("org.jfree.chart.ChartPanel[,0,0,0var5,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);

  }

  public void test35() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test35"); }


    org.jfree.data.time.Year var2 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var3 = new org.jfree.data.time.Month(1, var2);
    long var4 = var3.getFirstMillisecond();
    org.jfree.data.ComparableObjectSeries var5 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-59011603200000L));

  }

  public void test36() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test36"); }


    java.util.Locale var1 = javax.swing.JComponent.getDefaultLocale();
    org.jfree.chart.axis.MonthDateFormat var3 = new org.jfree.chart.axis.MonthDateFormat(var1, 2147483647);
    javax.swing.JComponent.setDefaultLocale(var1);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.ResourceBundle var5 = java.util.ResourceBundle.getBundle("jfreechart-", var1);
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test37() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test37"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setNextFocusableComponent((java.awt.Component)var2);
    var0.show();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var6 = var5.getLocation();
    java.awt.Dimension var7 = var5.preferredSize();
    java.awt.Rectangle var8 = var5.bounds();
    var0.scrollRectToVisible(var8);
    javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var11 = var10.getLocation();
    java.awt.Dimension var12 = var10.preferredSize();
    org.jfree.chart.plot.ContourPlot var13 = new org.jfree.chart.plot.ContourPlot();
    var10.addPropertyChangeListener((java.beans.PropertyChangeListener)var13);
    org.jfree.data.general.DatasetGroup var15 = var13.getDatasetGroup();
    java.lang.String[] var18 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var19 = new org.jfree.chart.axis.SymbolAxis("hi!", var18);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var20 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var22 = var20.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var25 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var26 = var25.getTickLabelPaint();
    var20.setFillPaint(var26, true);
    var19.setGridBandAlternatePaint(var26);
    var19.setFixedDimension(100.0d);
    var13.setDomainAxis((org.jfree.chart.axis.ValueAxis)var19);
    var13.zoom(0.25d);
    var0.removePropertyChangeListener((java.beans.PropertyChangeListener)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test38() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test38"); }


    org.jfree.chart.renderer.category.LevelRenderer var0 = new org.jfree.chart.renderer.category.LevelRenderer();
    double var1 = var0.getItemMargin();
    org.jfree.chart.StrokeMap var2 = new org.jfree.chart.StrokeMap();
    java.lang.Object var3 = var2.clone();
    boolean var4 = var0.equals((java.lang.Object)var2);
    var0.setItemLabelAnchorOffset(4.0d);
    org.jfree.data.KeyedObjects2D var8 = new org.jfree.data.KeyedObjects2D();
    javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var10 = var9.getPreferredSize();
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var9.setNextFocusableComponent((java.awt.Component)var11);
    java.util.Locale var13 = var11.getLocale();
    org.jfree.chart.axis.TickUnitSource var14 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var13);
    java.text.NumberFormat var15 = java.text.NumberFormat.getPercentInstance(var13);
    org.jfree.data.time.Year var17 = new org.jfree.data.time.Year();
    var8.addObject((java.lang.Object)var15, (java.lang.Comparable)0.04d, (java.lang.Comparable)var17);
    double[] var21 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var22 = new org.jfree.chart.annotations.XYPolygonAnnotation(var21);
    double[] var25 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var26 = new org.jfree.chart.annotations.XYPolygonAnnotation(var25);
    org.jfree.chart.ClipPath var27 = new org.jfree.chart.ClipPath(var21, var25);
    double[][] var28 = new double[][] { var21};
    double[] var33 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var34 = new org.jfree.chart.annotations.XYPolygonAnnotation(var33);
    double[] var37 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var38 = new org.jfree.chart.annotations.XYPolygonAnnotation(var37);
    org.jfree.chart.ClipPath var39 = new org.jfree.chart.ClipPath(var33, var37);
    double[][] var40 = new double[][] { var33};
    org.jfree.data.category.CategoryDataset var41 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var40);
    org.jfree.data.category.DefaultIntervalCategoryDataset var42 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var28, var40);
    org.jfree.chart.axis.SubCategoryAxis var44 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    var44.configure();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var46 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var48 = var46.getSeriesLinesVisible(10);
    javax.swing.JPanel var50 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var51 = var50.getPreferredSize();
    boolean var52 = var50.getIgnoreRepaint();
    boolean var53 = var50.isLightweight();
    javax.swing.JPanel var54 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var55 = var54.getPreferredSize();
    javax.swing.JPanel var56 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var54.setNextFocusableComponent((java.awt.Component)var56);
    var54.show();
    javax.swing.JPanel var59 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var60 = var59.getLocation();
    java.awt.Dimension var61 = var59.preferredSize();
    java.awt.Rectangle var62 = var59.bounds();
    var54.scrollRectToVisible(var62);
    var50.setBounds(var62);
    var46.setSeriesShape(15, (java.awt.Shape)var62);
    org.jfree.chart.axis.AxisState var66 = new org.jfree.chart.axis.AxisState();
    org.jfree.chart.title.TextTitle var69 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var70 = var69.isVisible();
    java.lang.Object var71 = var69.clone();
    org.jfree.ui.RectangleEdge var72 = var69.getPosition();
    var66.moveCursor(4.0d, var72);
    double var74 = var0.getItemMiddle((java.lang.Comparable)1201L, (java.lang.Comparable)0.04d, (org.jfree.data.category.CategoryDataset)var42, (org.jfree.chart.axis.CategoryAxis)var44, (java.awt.geom.Rectangle2D)var62, var72);
    java.awt.Stroke var77 = var0.getItemOutlineStroke(2013, 8);
    var0.setMaximumItemWidth(1.5d);
    double var80 = var0.getMaximumItemWidth();
    double var81 = var0.getItemMargin();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var74 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 1.5d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == 0.2d);

  }

  public void test39() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test39"); }


    org.jfree.chart.renderer.category.StackedBarRenderer var1 = new org.jfree.chart.renderer.category.StackedBarRenderer(false);
    org.jfree.chart.labels.CategoryItemLabelGenerator var4 = var1.getItemLabelGenerator((-2), 1);
    var1.setRenderAsPercentages(true);
    var1.setBaseCreateEntities(false, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test40() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test40"); }


    org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator var0 = new org.jfree.chart.imagemap.OverLIBToolTipTagFragmentGenerator();
    java.lang.String var2 = var0.generateToolTipFragment("[size=0x00000000]");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + " onMouseOver=\"return overlib('[size=0var20000000]');\" onMouseOut=\"return nd();\""+ "'", var2.equals(" onMouseOver=\"return overlib('[size=0var20000000]');\" onMouseOut=\"return nd();\""));

  }

  public void test41() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test41"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.ui.GradientPaintTransformer var3 = var2.getGradientPaintTransformer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test42() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test42"); }


    java.lang.String[] var2 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
    var3.setLabelAngle(0.0d);
    var3.setTickLabelsVisible(true);
    java.lang.String var8 = var3.getLabel();
    float var9 = var3.getTickMarkInsideLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!"+ "'", var8.equals("hi!"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.0f);

  }

  public void test43() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test43"); }


    org.jfree.data.resources.DataPackageResources_es var0 = new org.jfree.data.resources.DataPackageResources_es();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var2 = var0.getString("org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]");
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }

  }

  public void test44() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test44"); }


    org.jfree.data.xy.DefaultWindDataset var0 = new org.jfree.data.xy.DefaultWindDataset();

  }

  public void test45() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test45"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.needle.PinNeedle var3 = new org.jfree.chart.needle.PinNeedle();
    org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var6 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var7 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var6);
    org.jfree.data.time.TimePeriodValue var9 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var6, (java.lang.Number)10);
    var4.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var11 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var13 = var11.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var16 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var17 = var16.getTickLabelPaint();
    var11.setFillPaint(var17, true);
    var4.setDomainCrosshairPaint(var17);
    var3.setOutlinePaint(var17);
    org.jfree.chart.event.RendererChangeEvent var22 = new org.jfree.chart.event.RendererChangeEvent((java.lang.Object)var3);
    var0.rendererChanged(var22);
    boolean var24 = var0.isRangeZeroBaselineVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test46() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test46"); }


    org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var2.add((-1.0d), (-1.0d), false);
    org.jfree.data.xy.XYSeries var9 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var9.clear();
    double var11 = var9.getMinX();
    org.jfree.data.xy.XYSeriesCollection var12 = new org.jfree.data.xy.XYSeriesCollection(var9);
    var2.addVetoableChangeListener((java.beans.VetoableChangeListener)var12);
    org.jfree.data.xy.XYSeries var16 = var2.createCopy(15, 4);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var17 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var19 = var17.getSeriesItemLabelGenerator(0);
    org.jfree.chart.labels.XYItemLabelGenerator var22 = var17.getItemLabelGenerator((-1), 0);
    boolean var23 = var17.getBaseShapesVisible();
    org.jfree.chart.plot.CombinedRangeXYPlot var24 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var25 = var24.getRangeZeroBaselineStroke();
    java.lang.String var26 = var24.getPlotType();
    org.jfree.chart.plot.CategoryMarker var28 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var29 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var31 = var29.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var34 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var35 = var34.getTickLabelPaint();
    var29.setFillPaint(var35, true);
    var28.setLabelPaint(var35);
    boolean var39 = var24.removeRangeMarker((org.jfree.chart.plot.Marker)var28);
    org.jfree.chart.axis.AxisLocation var40 = var24.getDomainAxisLocation();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var43 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var46 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var47 = var46.getItemLabelFont();
    double var48 = var46.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var51 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var52 = var51.getItemLabelFont();
    java.awt.Shape var53 = var51.getBaseLegendShape();
    var46.setShape(var53);
    var43.setLegendBar(var53);
    var43.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var58 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var59 = var43.findDomainBounds((org.jfree.data.xy.XYDataset)var58);
    int var60 = var24.getIndexOf((org.jfree.chart.renderer.xy.XYItemRenderer)var43);
    var17.setPlot((org.jfree.chart.plot.XYPlot)var24);
    org.jfree.chart.plot.dial.DialValueIndicator var62 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var63 = var62.getInsets();
    java.awt.Stroke var64 = var62.getOutlineStroke();
    javax.swing.JPanel var65 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var66 = var65.getPreferredSize();
    javax.swing.JPanel var67 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var65.setNextFocusableComponent((java.awt.Component)var67);
    java.util.Locale var69 = var67.getLocale();
    javax.swing.JPanel var70 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var71 = var70.getPreferredSize();
    java.awt.Dimension var72 = var67.getSize(var71);
    java.awt.event.ContainerListener[] var73 = var67.getContainerListeners();
    javax.swing.JPanel var74 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var75 = var74.getPreferredSize();
    java.awt.image.ColorModel var76 = var74.getColorModel();
    var74.updateUI();
    java.lang.String var78 = var74.toString();
    java.awt.Color var79 = var74.getForeground();
    var67.setBackground(var79);
    var62.setOutlinePaint((java.awt.Paint)var79);
    java.awt.Color var82 = var79.brighter();
    var24.setDomainTickBandPaint((java.awt.Paint)var82);
    boolean var84 = var16.equals((java.lang.Object)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var26 + "' != '" + "Combined Range XYPlot"+ "'", var26.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var60 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var78 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var78,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var78.equals("org.jfree.chart.ChartPanel[,0,0,0var78,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var84 == false);

  }

  public void test47() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test47"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    java.awt.Paint var16 = var0.getRangeZeroBaselinePaint();
    boolean var17 = var0.isRangeCrosshairLockedOnData();
    boolean var18 = var0.isRangeCrosshairVisible();
    org.jfree.ui.RectangleInsets var19 = var0.getAxisOffset();
    boolean var20 = var0.isDomainCrosshairVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);

  }

  public void test48() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test48"); }


    org.jfree.data.statistics.SimpleHistogramDataset var1 = new org.jfree.data.statistics.SimpleHistogramDataset((java.lang.Comparable)0.04d);

  }

  public void test49() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test49"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isRadiusGridlinesVisible();
    org.jfree.data.time.Year var6 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var7 = new org.jfree.data.time.Month(1, var6);
    org.jfree.data.time.RegularTimePeriod var8 = var7.previous();
    long var9 = var7.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var10 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var12 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var13 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var12);
    var10.remove((org.jfree.data.time.TimePeriod)var12, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var17 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var7, (org.jfree.data.time.RegularTimePeriod)var12);
    var17.setMinorTickMarksVisible(false);
    org.jfree.data.time.Year var21 = new org.jfree.data.time.Year(100);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var22 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    int var23 = var21.compareTo((java.lang.Object)var22);
    var17.setFirst((org.jfree.data.time.RegularTimePeriod)var21);
    var0.setAxis(19, (org.jfree.chart.axis.ValueAxis)var17);
    java.lang.Class var26 = var17.getAutoRangeTimePeriodClass();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test50() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test50"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var1 = var0.getDomainCrosshairColumnKey();
    var0.setCrosshairDatasetIndex(100);
    org.jfree.chart.plot.CombinedRangeXYPlot var4 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var5 = var4.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var7 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var8 = var7.getMargin();
    var4.setAxisOffset(var8);
    var0.setAxisOffset(var8);
    org.jfree.data.category.CategoryDataset var12 = var0.getDataset((-2));
    org.jfree.chart.LegendItemCollection var13 = var0.getLegendItems();
    org.jfree.chart.axis.AxisSpace var14 = var0.getFixedDomainAxisSpace();
    var0.setAnchorValue(174.49d, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test51() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test51"); }


    org.jfree.chart.plot.CompassPlot var0 = new org.jfree.chart.plot.CompassPlot();
    var0.setDrawBorder(true);
    org.jfree.data.general.ValueDataset[] var3 = var0.getDatasets();
    java.awt.Color var7 = java.awt.Color.getHSBColor(100.0f, (-1.0f), 2.0f);
    var0.setRoseHighlightPaint((java.awt.Paint)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test52() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test52"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var17 = var16.getPreferredSize();
    java.awt.image.ColorModel var18 = var16.getColorModel();
    var16.updateUI();
    java.lang.String var20 = var16.toString();
    boolean var21 = var16.getInheritsPopupMenu();
    double[] var24 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var25 = new org.jfree.chart.annotations.XYPolygonAnnotation(var24);
    java.lang.Object var26 = var25.clone();
    org.jfree.chart.event.AnnotationChangeEvent var27 = new org.jfree.chart.event.AnnotationChangeEvent((java.lang.Object)var16, (org.jfree.chart.annotations.Annotation)var25);
    var0.annotationChanged(var27);
    org.jfree.ui.RectangleInsets var29 = var0.getAxisOffset();
    boolean var30 = var0.isOutlineVisible();
    var0.clearRangeMarkers(51);
    boolean var33 = var0.isDomainCrosshairLockedOnData();
    org.jfree.chart.plot.SeriesRenderingOrder var34 = var0.getSeriesRenderingOrder();
    org.jfree.chart.plot.CombinedRangeXYPlot var35 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var36 = var35.getRangeZeroBaselineStroke();
    java.awt.Stroke var37 = var35.getDomainMinorGridlineStroke();
    var0.setDomainMinorGridlineStroke(var37);
    
    // Checks the contract:  equals-hashcode on var0 and var35
    assertTrue("Contract failed: equals-hashcode on var0 and var35", var0.equals(var35) ? var0.hashCode() == var35.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var35 and var0
    assertTrue("Contract failed: equals-hashcode on var35 and var0", var35.equals(var0) ? var35.hashCode() == var0.hashCode() : true);

  }

  public void test53() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test53"); }


    org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
    boolean var4 = var1.getItemLineVisible(8, 52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);

  }

  public void test54() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test54"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    var0.setShadowXOffset(0.25d);
    java.awt.Stroke var3 = var0.getSectionOutlineStroke();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test55() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test55"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    java.awt.Shape var12 = var10.getBaseLegendShape();
    var5.setShape(var12);
    var2.setLegendBar(var12);
    var2.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var17 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var18 = var2.findDomainBounds((org.jfree.data.xy.XYDataset)var17);
    int var20 = var17.getItemCount(3);
    int var22 = var17.getItemCount((-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0);

  }

  public void test56() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test56"); }


    org.jfree.data.xy.XYIntervalSeriesCollection var0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
    org.jfree.data.xy.XYBarDataset var2 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var0, 10.0d);
    int var3 = var0.getSeriesCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.xy.XYIntervalSeries var5 = var0.getSeries((-2));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test57() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test57"); }


    org.jfree.data.time.DynamicTimeSeriesCollection var2 = new org.jfree.data.time.DynamicTimeSeriesCollection(2, (-1));
    int var3 = var2.getSeriesCount();
    org.jfree.data.time.RegularTimePeriod var4 = var2.getNewestTime();

  }

  public void test58() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test58"); }


    org.jfree.data.xy.DefaultIntervalXYDataset var0 = new org.jfree.data.xy.DefaultIntervalXYDataset();
    org.jfree.chart.util.ParamChecks.nullNotPermitted((java.lang.Object)var0, "Combined Range XYPlot");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var5 = var0.getEndYValue((-334), 2013);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test59() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test59"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    java.awt.image.ColorModel var2 = var0.getColorModel();
    var0.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var7 = var0.getForeground();
    boolean var8 = var0.isOptimizedDrawingEnabled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test60() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test60"); }


    org.jfree.data.time.ohlc.OHLC var4 = new org.jfree.data.time.ohlc.OHLC(100.0d, 4.0d, 0.5d, 4.0d);
    double var5 = var4.getLow();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.5d);

  }

  public void test61() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test61"); }


    org.jfree.data.time.Year var2 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var3 = new org.jfree.data.time.Month(1, var2);
    org.jfree.data.time.ohlc.OHLCItem var8 = new org.jfree.data.time.ohlc.OHLCItem((org.jfree.data.time.RegularTimePeriod)var2, 175.0d, 360.0d, (-0.7853981633974483d), 0.75d);
    org.jfree.data.time.Minute var9 = new org.jfree.data.time.Minute();
    int var10 = var9.getMinute();
    org.jfree.data.time.Hour var11 = var9.getHour();
    org.jfree.data.time.Year var14 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var15 = new org.jfree.data.time.Month(1, var14);
    java.util.Locale var16 = javax.swing.JComponent.getDefaultLocale();
    org.jfree.chart.axis.MonthDateFormat var18 = new org.jfree.chart.axis.MonthDateFormat(var16, 2147483647);
    java.util.Calendar var19 = var18.getCalendar();
    long var20 = var15.getLastMillisecond(var19);
    long var21 = var11.getLastMillisecond(var19);
    long var22 = var2.getMiddleMillisecond(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == (-59008924800001L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 1378965599999L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-58995792000001L));

  }

  public void test62() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test62"); }


    org.jfree.data.xy.XYIntervalSeriesCollection var0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
    org.jfree.data.xy.XYBarDataset var2 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var0, 10.0d);
    var2.setBarWidth(2.0d);
    org.jfree.chart.axis.AxisCollection var5 = new org.jfree.chart.axis.AxisCollection();
    java.util.List var6 = var5.getAxesAtLeft();
    org.jfree.data.general.DefaultKeyedValues2DDataset var7 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var7.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var12 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var7);
    org.jfree.data.Range var14 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds((org.jfree.data.category.CategoryDataset)var7, true);
    org.jfree.data.Range var16 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds((org.jfree.data.xy.XYDataset)var2, var6, var14, true);
    java.lang.Object var17 = var2.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test63() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test63"); }


    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    var0.clear();
    java.util.List var2 = var0.getRowKeys();
    java.lang.Object var3 = var0.clone();
    org.jfree.data.Range var5 = var0.getRangeBounds(false);
    javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var7 = var6.getLocation();
    java.awt.Dimension var8 = var6.preferredSize();
    var6.paintImmediately(100, 100, 10, (-1));
    org.jfree.chart.plot.PolarPlot var14 = new org.jfree.chart.plot.PolarPlot();
    boolean var15 = var14.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var20 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var20.setUpperMargin(10.0d);
    var20.setAxisLineVisible(true);
    javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var26 = var25.getLocation();
    java.awt.Dimension var27 = var25.preferredSize();
    java.awt.Rectangle var28 = var25.bounds();
    java.awt.Point var29 = var14.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var20, (java.awt.geom.Rectangle2D)var28);
    boolean var30 = var6.contains(var29);
    var6.show(true);
    javax.swing.ActionMap var33 = var6.getActionMap();
    boolean var34 = var0.equals((java.lang.Object)var33);
    org.jfree.chart.renderer.xy.XYBlockRenderer var35 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var36 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var37 = var35.findDomainBounds((org.jfree.data.xy.XYDataset)var36);
    java.lang.Number var38 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset)var36);
    var36.add(100.0d, Double.NaN, "jfreechart-onetime-");
    var36.clear();
    int var45 = var36.getItemCount(8);
    boolean var46 = var36.isAutoWidth();
    var36.setIntervalWidth(100.0d);
    org.jfree.data.xy.IntervalXYDelegate var49 = new org.jfree.data.xy.IntervalXYDelegate((org.jfree.data.xy.XYDataset)var36);
    double var50 = var49.getIntervalPositionFactor();
    org.jfree.data.time.Year var52 = new org.jfree.data.time.Year();
    org.jfree.data.gantt.Task var53 = new org.jfree.data.gantt.Task("item", (org.jfree.data.time.TimePeriod)var52);
    boolean var54 = var49.equals((java.lang.Object)var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeColumn((java.lang.Comparable)var52);
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var38 + "' != '" + Double.NaN+ "'", var38.equals(Double.NaN));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.5d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test64() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test64"); }


    org.jfree.chart.renderer.DefaultPolarItemRenderer var0 = new org.jfree.chart.renderer.DefaultPolarItemRenderer();
    org.jfree.chart.plot.DrawingSupplier var1 = var0.getDrawingSupplier();
    org.jfree.chart.plot.PolarPlot var2 = new org.jfree.chart.plot.PolarPlot();
    boolean var3 = var2.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var8 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var8.setUpperMargin(10.0d);
    var8.setAxisLineVisible(true);
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var14 = var13.getLocation();
    java.awt.Dimension var15 = var13.preferredSize();
    java.awt.Rectangle var16 = var13.bounds();
    java.awt.Point var17 = var2.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var8, (java.awt.geom.Rectangle2D)var16);
    org.jfree.chart.renderer.DefaultPolarItemRenderer var19 = new org.jfree.chart.renderer.DefaultPolarItemRenderer();
    var2.setRenderer(10, (org.jfree.chart.renderer.PolarItemRenderer)var19, true);
    var2.setMargin(15);
    var0.setPlot(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test65() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test65"); }


    org.jfree.chart.plot.dial.DialTextAnnotation var1 = new org.jfree.chart.plot.dial.DialTextAnnotation("hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.StandardChartTheme var4 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    org.jfree.chart.plot.DrawingSupplier var5 = var4.getDrawingSupplier();
    org.jfree.chart.plot.dial.StandardDialScale var6 = new org.jfree.chart.plot.dial.StandardDialScale();
    var6.setMajorTickIncrement(10.0d);
    java.awt.Paint var9 = var6.getMinorTickPaint();
    var4.setTickLabelPaint(var9);
    java.awt.Font var11 = var4.getSmallFont();
    var1.setFont(var11);
    org.jfree.chart.annotations.XYPointerAnnotation var17 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var18 = var17.getLabelOffset();
    org.jfree.ui.TextAnchor var19 = var17.getRotationAnchor();
    var1.setAnchor(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test66() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test66"); }


    org.jfree.data.xml.RootHandler var0 = new org.jfree.data.xml.RootHandler();
    var0.endElement("", "hi!", "hi!");
    var0.endDocument();
    org.jfree.data.xml.CategorySeriesHandler var6 = new org.jfree.data.xml.CategorySeriesHandler(var0);
    var0.endElement("Compass Plot", "Combined Range XYPlot", "Combined Range XYPlot");
    char[] var12 = new char[] { 'a'};
    var0.characters(var12, 2, 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test67() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test67"); }


    org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer var0 = new org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer();
    org.jfree.chart.StandardChartTheme var3 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var4 = var3.getLegendItemPaint();
    var0.setBoxPaint(var4);
    java.lang.Number[][] var6 = new java.lang.Number[][] { };
    java.lang.Number[][] var7 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var8 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var6, var7);
    int var10 = var8.getRowIndex((java.lang.Comparable)'a');
    boolean var11 = var0.equals((java.lang.Object)var8);
    java.awt.Paint var12 = var0.getArtifactPaint();
    java.awt.Paint var13 = var0.getArtifactPaint();
    org.jfree.chart.plot.dial.DialValueIndicator var14 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var15 = var14.getInsets();
    java.awt.Stroke var16 = var14.getOutlineStroke();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    javax.swing.JPanel var19 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var17.setNextFocusableComponent((java.awt.Component)var19);
    java.util.Locale var21 = var19.getLocale();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    java.awt.Dimension var24 = var19.getSize(var23);
    java.awt.event.ContainerListener[] var25 = var19.getContainerListeners();
    javax.swing.JPanel var26 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var27 = var26.getPreferredSize();
    java.awt.image.ColorModel var28 = var26.getColorModel();
    var26.updateUI();
    java.lang.String var30 = var26.toString();
    java.awt.Color var31 = var26.getForeground();
    var19.setBackground(var31);
    var14.setOutlinePaint((java.awt.Paint)var31);
    java.awt.Color var34 = var31.brighter();
    boolean var35 = var0.equals((java.lang.Object)var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var30,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var30.equals("org.jfree.chart.ChartPanel[,0,0,0var30,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);

  }

  public void test68() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test68"); }


    org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
    int var1 = var0.getItemCount();
    java.lang.Object var2 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test69() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test69"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setNextFocusableComponent((java.awt.Component)var2);
    java.util.Locale var4 = var2.getLocale();
    java.text.NumberFormat var5 = java.text.NumberFormat.getNumberInstance(var4);
    var5.setMaximumFractionDigits(80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test70() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test70"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    java.awt.Shape var3 = var2.getLegendBar();
    org.jfree.chart.entity.ContourEntity var6 = new org.jfree.chart.entity.ContourEntity(var3, "", "hi!");
    org.jfree.chart.entity.TickLabelEntity var9 = new org.jfree.chart.entity.TickLabelEntity(var3, "hi!", "");
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var12 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var15 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var16 = var15.getItemLabelFont();
    double var17 = var15.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var20 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var21 = var20.getItemLabelFont();
    java.awt.Shape var22 = var20.getBaseLegendShape();
    var15.setShape(var22);
    var12.setLegendBar(var22);
    org.jfree.data.general.DefaultKeyedValues2DDataset var27 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var30 = new org.jfree.chart.entity.CategoryItemEntity(var22, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var27, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.chart.plot.CombinedRangeXYPlot var31 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var32 = var31.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CategoryMarker var34 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var35 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var37 = var35.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var40 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var41 = var40.getTickLabelPaint();
    var35.setFillPaint(var41, true);
    var34.setLabelPaint(var41);
    org.jfree.chart.annotations.XYShapeAnnotation var45 = new org.jfree.chart.annotations.XYShapeAnnotation(var22, var32, var41);
    var9.setArea(var22);
    org.jfree.chart.entity.ChartEntity var47 = new org.jfree.chart.entity.ChartEntity(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test71() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test71"); }


    java.lang.Number[][] var1 = new java.lang.Number[][] { };
    java.lang.Number[][] var2 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var3 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var1, var2);
    int var4 = var3.getRowCount();
    org.jfree.data.xy.OHLCDataItem[] var6 = new org.jfree.data.xy.OHLCDataItem[] { };
    org.jfree.data.xy.DefaultOHLCDataset var7 = new org.jfree.data.xy.DefaultOHLCDataset((java.lang.Comparable)0.05d, var6);
    var3.setSeriesKeys((java.lang.Comparable[])var6);
    org.jfree.data.xy.DefaultOHLCDataset var9 = new org.jfree.data.xy.DefaultOHLCDataset((java.lang.Comparable)"d", var6);
    int var11 = var9.getItemCount(51);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var14 = var9.getY(3, 52);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);

  }

  public void test72() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test72"); }


    java.lang.String[] var2 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var4 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var6 = var4.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var9 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var10 = var9.getTickLabelPaint();
    var4.setFillPaint(var10, true);
    var3.setGridBandAlternatePaint(var10);
    var3.setFixedDimension(100.0d);
    org.jfree.chart.plot.CompassPlot var16 = new org.jfree.chart.plot.CompassPlot();
    var16.setDrawBorder(true);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var19 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var20 = var19.getBaseItemLabelsVisible();
    var19.setSeriesShapesFilled(1, (java.lang.Boolean)false);
    var19.setDrawOutlines(true);
    org.jfree.chart.renderer.category.BarRenderer3D var28 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var29 = var28.getItemLabelFont();
    double var30 = var28.getItemLabelAnchorOffset();
    java.awt.Shape var32 = var28.getSeriesShape(1);
    org.jfree.chart.renderer.category.BarRenderer3D var36 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var37 = var36.getItemLabelFont();
    double var38 = var36.getItemLabelAnchorOffset();
    org.jfree.chart.axis.CyclicNumberAxis var42 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var43 = var42.getTickLabelPaint();
    var36.setLegendTextPaint(0, var43);
    var28.setSeriesFillPaint(100, var43, true);
    var19.setBaseOutlinePaint(var43, false);
    var16.setRoseHighlightPaint(var43);
    var3.setPlot((org.jfree.chart.plot.Plot)var16);
    java.lang.String var51 = var16.getPlotType();
    var16.setRevolutionDistance((-0.21460183660255172d));
    java.awt.Paint var54 = var16.getRosePaint();
    java.awt.Paint var55 = var16.getRosePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + false+ "'", var20.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "Compass Plot"+ "'", var51.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);

  }

  public void test73() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test73"); }


    org.jfree.chart.title.TextTitle var1 = new org.jfree.chart.title.TextTitle("hi!");
    var1.setExpandToFitSpace(false);
    java.lang.String[] var10 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var11 = new org.jfree.chart.axis.SymbolAxis("hi!", var10);
    org.jfree.chart.plot.CompassPlot var12 = new org.jfree.chart.plot.CompassPlot();
    boolean var13 = var11.equals((java.lang.Object)var12);
    java.lang.String var14 = var12.getPlotType();
    java.awt.Paint var15 = var12.getRoseCenterPaint();
    java.awt.Paint var16 = var12.getBackgroundPaint();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.image.ColorModel var19 = var17.getColorModel();
    var17.updateUI();
    java.lang.String var21 = var17.toString();
    boolean var22 = var17.getInheritsPopupMenu();
    javax.swing.InputMap var23 = var17.getInputMap();
    var17.nextFocus();
    boolean var25 = var17.getInheritsPopupMenu();
    javax.swing.JPanel var26 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var27 = var26.getPreferredSize();
    java.awt.image.ColorModel var28 = var26.getColorModel();
    var26.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var33 = var26.getForeground();
    var17.setForeground(var33);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var36 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var16, (java.awt.Paint)var33, true);
    org.jfree.chart.block.BlockBorder var37 = new org.jfree.chart.block.BlockBorder((-90.0d), 0.05d, 3.0d, 2.0d, (java.awt.Paint)var33);
    var1.setFrame((org.jfree.chart.block.BlockFrame)var37);
    java.awt.Paint var39 = var37.getPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + "Compass Plot"+ "'", var14.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test74() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test74"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    java.awt.Paint var17 = var0.getQuadrantPaint(1);
    org.jfree.chart.axis.CyclicNumberAxis var20 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var21 = var20.isAxisLineVisible();
    var20.setAxisLineVisible(true);
    var20.setMinorTickMarksVisible(true);
    org.jfree.chart.plot.CombinedRangeXYPlot var26 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var27 = var26.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CombinedRangeXYPlot var28 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var29 = var28.getRangeZeroBaselineStroke();
    var26.setRangeGridlineStroke(var29);
    var26.setDomainMinorGridlinesVisible(true);
    var26.setRangeZeroBaselineVisible(true);
    var20.setPlot((org.jfree.chart.plot.Plot)var26);
    var0.setDomainAxis((org.jfree.chart.axis.ValueAxis)var20);
    var0.mapDatasetToRangeAxis(2013, 2013);
    var0.setRangeGridlinesVisible(false);
    org.jfree.chart.annotations.XYPointerAnnotation var46 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var47 = var46.getLabelOffset();
    org.jfree.ui.TextAnchor var48 = var46.getRotationAnchor();
    org.jfree.chart.StandardChartTheme var51 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var52 = var51.getLegendItemPaint();
    var46.setOutlinePaint(var52);
    java.lang.String var54 = var46.getURL();
    var46.setRotationAngle(0.75d);
    var0.addAnnotation((org.jfree.chart.annotations.XYAnnotation)var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);

  }

  public void test75() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test75"); }


    org.jfree.chart.plot.dial.ArcDialFrame var2 = new org.jfree.chart.plot.dial.ArcDialFrame(0.75d, 10.0d);
    double var3 = var2.getInnerRadius();
    double var4 = var2.getInnerRadius();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.25d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.25d);

  }

  public void test76() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test76"); }


    org.jfree.chart.util.HexNumberFormat var3 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var5 = var4.getPreferredSize();
    javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var4.setNextFocusableComponent((java.awt.Component)var6);
    java.util.Locale var8 = var6.getLocale();
    org.jfree.chart.axis.MonthDateFormat var9 = new org.jfree.chart.axis.MonthDateFormat(var8);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var10 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var3, (java.text.DateFormat)var9);
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var12 = var11.getPreferredSize();
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var11.setNextFocusableComponent((java.awt.Component)var13);
    java.util.Locale var15 = var13.getLocale();
    org.jfree.chart.axis.MonthDateFormat var16 = new org.jfree.chart.axis.MonthDateFormat(var15);
    org.jfree.chart.labels.StandardXYToolTipGenerator var17 = new org.jfree.chart.labels.StandardXYToolTipGenerator("Combined Range XYPlot", (java.text.DateFormat)var9, (java.text.DateFormat)var16);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var18 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer(10, (org.jfree.chart.labels.XYToolTipGenerator)var17);
    org.jfree.chart.renderer.category.BarRenderer3D var21 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    var21.setSeriesVisible((java.lang.Boolean)false, true);
    double var25 = var21.getBase();
    double var26 = var21.getItemLabelAnchorOffset();
    boolean var27 = var18.equals((java.lang.Object)var26);
    boolean var29 = var18.isSeriesVisibleInLegend(2);
    org.jfree.chart.LegendItem var32 = var18.getLegendItem((-1), 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);

  }

  public void test77() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test77"); }


    org.jfree.data.time.SimpleTimePeriod var2 = new org.jfree.data.time.SimpleTimePeriod((-59011603200000L), 1L);
    long var3 = var2.getEndMillis();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 1L);

  }

  public void test78() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test78"); }


    org.jfree.data.time.TimePeriodValues var3 = new org.jfree.data.time.TimePeriodValues("Compass Plot", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");
    var3.setRangeDescription("d");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var7 = var3.getValue(500);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test79() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test79"); }


    org.jfree.data.contour.NonGridContourDataset var0 = new org.jfree.data.contour.NonGridContourDataset();
    boolean var2 = var0.isDateAxis(52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test80() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test80"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    java.awt.Shape var12 = var10.getBaseLegendShape();
    var5.setShape(var12);
    var2.setLegendBar(var12);
    var2.setDrawBarOutline(true);
    org.jfree.chart.title.LegendTitle var17 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var2);
    org.jfree.chart.plot.dial.DialValueIndicator var18 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var19 = var18.getInsets();
    java.awt.Stroke var20 = var18.getOutlineStroke();
    javax.swing.JPanel var21 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var22 = var21.getPreferredSize();
    javax.swing.JPanel var23 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var21.setNextFocusableComponent((java.awt.Component)var23);
    java.util.Locale var25 = var23.getLocale();
    javax.swing.JPanel var26 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var27 = var26.getPreferredSize();
    java.awt.Dimension var28 = var23.getSize(var27);
    java.awt.event.ContainerListener[] var29 = var23.getContainerListeners();
    javax.swing.JPanel var30 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var31 = var30.getPreferredSize();
    java.awt.image.ColorModel var32 = var30.getColorModel();
    var30.updateUI();
    java.lang.String var34 = var30.toString();
    java.awt.Color var35 = var30.getForeground();
    var23.setBackground(var35);
    var18.setOutlinePaint((java.awt.Paint)var35);
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    javax.swing.JPanel var40 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var38.setNextFocusableComponent((java.awt.Component)var40);
    java.util.Locale var42 = var40.getLocale();
    javax.swing.JPanel var43 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var44 = var43.getPreferredSize();
    java.awt.Dimension var45 = var40.getSize(var44);
    java.awt.event.ContainerListener[] var46 = var40.getContainerListeners();
    javax.swing.JPanel var47 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var48 = var47.getPreferredSize();
    java.awt.image.ColorModel var49 = var47.getColorModel();
    var47.updateUI();
    java.lang.String var51 = var47.toString();
    java.awt.Color var52 = var47.getForeground();
    var40.setBackground(var52);
    var18.setOutlinePaint((java.awt.Paint)var52);
    org.jfree.ui.RectangleInsets var55 = var18.getInsets();
    org.jfree.ui.RectangleAnchor var56 = var18.getFrameAnchor();
    var17.setLegendItemGraphicAnchor(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var34 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var34,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var34.equals("org.jfree.chart.ChartPanel[,0,0,0var34,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var51 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var51,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var51.equals("org.jfree.chart.ChartPanel[,0,0,0var51,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test81() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test81"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), (-1));
    var1.setRenderAsPercentages(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test82() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test82"); }


    org.jfree.data.time.Minute var0 = new org.jfree.data.time.Minute();
    int var1 = var0.getMinute();
    long var2 = var0.getLastMillisecond();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1378963199999L);

  }

  public void test83() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test83"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    double var4 = var2.getItemLabelAnchorOffset();
    java.awt.Shape var6 = var2.getSeriesShape(1);
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    double var12 = var10.getItemLabelAnchorOffset();
    org.jfree.chart.axis.CyclicNumberAxis var16 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var17 = var16.getTickLabelPaint();
    var10.setLegendTextPaint(0, var17);
    var2.setSeriesFillPaint(100, var17, true);
    org.jfree.chart.block.GridArrangement var23 = new org.jfree.chart.block.GridArrangement(2147483647, 100);
    org.jfree.chart.block.CenterArrangement var24 = new org.jfree.chart.block.CenterArrangement();
    var24.clear();
    org.jfree.chart.title.LegendTitle var26 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var2, (org.jfree.chart.block.Arrangement)var23, (org.jfree.chart.block.Arrangement)var24);
    var24.clear();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test84() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test84"); }


    org.jfree.data.xy.DefaultXYZDataset var0 = new org.jfree.data.xy.DefaultXYZDataset();
    org.jfree.data.Range var2 = org.jfree.data.general.DatasetUtilities.findZBounds((org.jfree.data.xy.XYZDataset)var0, true);
    java.lang.Object var3 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test85() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test85"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    org.jfree.chart.axis.AxisLocation var16 = var0.getDomainAxisLocation();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var19 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var22 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var23 = var22.getItemLabelFont();
    double var24 = var22.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var27 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var28 = var27.getItemLabelFont();
    java.awt.Shape var29 = var27.getBaseLegendShape();
    var22.setShape(var29);
    var19.setLegendBar(var29);
    var19.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var34 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var35 = var19.findDomainBounds((org.jfree.data.xy.XYDataset)var34);
    int var36 = var0.getIndexOf((org.jfree.chart.renderer.xy.XYItemRenderer)var19);
    var0.setRangeCrosshairVisible(false);
    org.jfree.chart.renderer.xy.StackedXYBarRenderer var39 = new org.jfree.chart.renderer.xy.StackedXYBarRenderer();
    javax.swing.JPanel var40 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var41 = var40.getPreferredSize();
    java.awt.image.ColorModel var42 = var40.getColorModel();
    var40.updateUI();
    java.lang.String var44 = var40.toString();
    var40.setFocusable(true);
    boolean var47 = var39.equals((java.lang.Object)var40);
    java.awt.Paint var49 = var39.lookupSeriesOutlinePaint((-1));
    var0.setDomainCrosshairPaint(var49);
    org.jfree.data.statistics.SimpleHistogramDataset var52 = new org.jfree.data.statistics.SimpleHistogramDataset((java.lang.Comparable)100.0f);
    var0.setDataset((org.jfree.data.xy.XYDataset)var52);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var56 = var52.getStartYValue(1, 2013);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var44.equals("org.jfree.chart.ChartPanel[,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test86() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test86"); }


    org.jfree.chart.axis.QuarterDateFormat var0 = new org.jfree.chart.axis.QuarterDateFormat();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var7 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    double var12 = var10.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var15 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var16 = var15.getItemLabelFont();
    java.awt.Shape var17 = var15.getBaseLegendShape();
    var10.setShape(var17);
    var7.setLegendBar(var17);
    org.jfree.chart.plot.dial.DialValueIndicator var20 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var21 = var20.getInsets();
    java.awt.Stroke var22 = var20.getOutlineStroke();
    javax.swing.JPanel var23 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var24 = var23.getPreferredSize();
    javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var23.setNextFocusableComponent((java.awt.Component)var25);
    java.util.Locale var27 = var25.getLocale();
    javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.Dimension var30 = var25.getSize(var29);
    java.awt.event.ContainerListener[] var31 = var25.getContainerListeners();
    javax.swing.JPanel var32 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var33 = var32.getPreferredSize();
    java.awt.image.ColorModel var34 = var32.getColorModel();
    var32.updateUI();
    java.lang.String var36 = var32.toString();
    java.awt.Color var37 = var32.getForeground();
    var25.setBackground(var37);
    var20.setOutlinePaint((java.awt.Paint)var37);
    java.awt.Color var40 = var37.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var43 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var44 = var43.getItemLabelFont();
    java.awt.Shape var45 = var43.getBaseLegendShape();
    double var46 = var43.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var47 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var48 = var47.getRangeZeroBaselineStroke();
    var43.setStroke(var48, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var51 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var52 = var51.isOutline();
    var51.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var57 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var58 = var57.getLegendItemPaint();
    var51.setShapePaint(var58);
    org.jfree.chart.LegendItem var60 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var17, (java.awt.Paint)var40, var48, var58);
    var60.setShapeVisible(false);
    org.jfree.ui.GradientPaintTransformer var63 = var60.getFillPaintTransformer();
    boolean var64 = var0.equals((java.lang.Object)var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var36,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var36.equals("org.jfree.chart.ChartPanel[,0,0,0var36,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var52 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);

  }

  public void test87() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test87"); }


    org.jfree.chart.axis.CyclicNumberAxis var2 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var2.setVisible(false);
    org.jfree.chart.plot.CombinedRangeXYPlot var5 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var6 = var5.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var8 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var9 = var8.getMargin();
    var5.setAxisOffset(var9);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var13 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var16 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var17 = var16.getItemLabelFont();
    double var18 = var16.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var21 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var22 = var21.getItemLabelFont();
    java.awt.Shape var23 = var21.getBaseLegendShape();
    var16.setShape(var23);
    var13.setLegendBar(var23);
    org.jfree.data.general.DefaultKeyedValues2DDataset var28 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var31 = new org.jfree.chart.entity.CategoryItemEntity(var23, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var28, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.chart.plot.CombinedRangeXYPlot var32 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var33 = var32.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CategoryMarker var35 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var36 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var38 = var36.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var41 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var42 = var41.getTickLabelPaint();
    var36.setFillPaint(var42, true);
    var35.setLabelPaint(var42);
    org.jfree.chart.annotations.XYShapeAnnotation var46 = new org.jfree.chart.annotations.XYShapeAnnotation(var23, var33, var42);
    var5.setRangeCrosshairPaint(var42);
    var2.setAdvanceLinePaint(var42);
    org.jfree.chart.util.HexNumberFormat var51 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var52 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var53 = var52.getPreferredSize();
    javax.swing.JPanel var54 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var52.setNextFocusableComponent((java.awt.Component)var54);
    java.util.Locale var56 = var54.getLocale();
    org.jfree.chart.axis.MonthDateFormat var57 = new org.jfree.chart.axis.MonthDateFormat(var56);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var58 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var51, (java.text.DateFormat)var57);
    org.jfree.chart.util.HexNumberFormat var60 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var61 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var62 = var61.getPreferredSize();
    javax.swing.JPanel var63 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var61.setNextFocusableComponent((java.awt.Component)var63);
    java.util.Locale var65 = var63.getLocale();
    org.jfree.chart.axis.MonthDateFormat var66 = new org.jfree.chart.axis.MonthDateFormat(var65);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var67 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var60, (java.text.DateFormat)var66);
    org.jfree.chart.labels.StandardPieSectionLabelGenerator var68 = new org.jfree.chart.labels.StandardPieSectionLabelGenerator("Combined Range XYPlot", (java.text.NumberFormat)var51, (java.text.NumberFormat)var60);
    var2.setNumberFormatOverride((java.text.NumberFormat)var51);
    org.jfree.chart.plot.PolarPlot var70 = new org.jfree.chart.plot.PolarPlot();
    boolean var71 = var70.isRadiusGridlinesVisible();
    org.jfree.chart.renderer.category.BarRenderer3D var74 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var75 = var74.getItemLabelFont();
    java.awt.Shape var76 = var74.getBaseLegendShape();
    double var77 = var74.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var78 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var79 = var78.getRangeZeroBaselineStroke();
    var74.setStroke(var79, false);
    var70.setRadiusGridlineStroke(var79);
    var2.setAxisLineStroke(var79);
    
    // Checks the contract:  equals-hashcode on var32 and var78
    assertTrue("Contract failed: equals-hashcode on var32 and var78", var32.equals(var78) ? var32.hashCode() == var78.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var78 and var32
    assertTrue("Contract failed: equals-hashcode on var78 and var32", var78.equals(var32) ? var78.hashCode() == var32.hashCode() : true);

  }

  public void test88() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test88"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    var6.setDrawBarOutline(true);
    org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var6);
    org.jfree.chart.annotations.XYDrawableAnnotation var22 = new org.jfree.chart.annotations.XYDrawableAnnotation(100.0d, 10.0d, 0.0d, (-1.0d), (org.jfree.ui.Drawable)var21);
    org.jfree.chart.renderer.xy.StackedXYBarRenderer var23 = new org.jfree.chart.renderer.xy.StackedXYBarRenderer();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.image.ColorModel var26 = var24.getColorModel();
    var24.updateUI();
    java.lang.String var28 = var24.toString();
    var24.setFocusable(true);
    boolean var31 = var23.equals((java.lang.Object)var24);
    org.jfree.chart.needle.PinNeedle var32 = new org.jfree.chart.needle.PinNeedle();
    org.jfree.chart.plot.CategoryPlot var33 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryMarker var35 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var36 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var38 = var36.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var41 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var42 = var41.getTickLabelPaint();
    var36.setFillPaint(var42, true);
    var35.setLabelPaint(var42);
    var33.setDomainGridlinePaint(var42);
    var32.setHighlightPaint(var42);
    boolean var48 = var23.equals((java.lang.Object)var42);
    var21.setBackgroundPaint(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var28,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var28.equals("org.jfree.chart.ChartPanel[,0,0,0var28,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);

  }

  public void test89() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test89"); }


    org.jfree.data.gantt.TaskSeries var1 = new org.jfree.data.gantt.TaskSeries("hi!");
    org.jfree.data.time.Week var3 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var4 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var3);
    org.jfree.data.time.Week var6 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var7 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var6);
    var7.setPercentComplete((java.lang.Double)10.0d);
    org.jfree.data.time.Week var11 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var12 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var11);
    var12.setPercentComplete((java.lang.Double)10.0d);
    var7.addSubtask(var12);
    var4.addSubtask(var7);
    var1.add(var7);
    int var18 = var7.getSubtaskCount();
    org.jfree.data.time.TimePeriod var19 = var7.getDuration();
    var7.setDescription(" onMouseOver=\"return overlib('[size=0x00000000]');\" onMouseOut=\"return nd();\"");
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test90() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test90"); }


    org.jfree.chart.plot.XYCrosshairState var0 = new org.jfree.chart.plot.XYCrosshairState();
    var0.setAnchorX(360.0d);
    var0.setCrosshairDistance(1.0E-8d);

  }

  public void test91() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test91"); }


    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis("0x00000000");
    boolean var3 = var1.isHiddenValue(0L);
    org.jfree.chart.title.TextTitle var6 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var7 = var6.isVisible();
    java.lang.Object var8 = var6.clone();
    var6.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
    double var14 = var6.getWidth();
    javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var16 = var15.getLocation();
    org.jfree.chart.plot.PolarPlot var17 = new org.jfree.chart.plot.PolarPlot();
    boolean var18 = var17.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var23 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var23.setUpperMargin(10.0d);
    var23.setAxisLineVisible(true);
    javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var29 = var28.getLocation();
    java.awt.Dimension var30 = var28.preferredSize();
    java.awt.Rectangle var31 = var28.bounds();
    java.awt.Point var32 = var17.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var23, (java.awt.geom.Rectangle2D)var31);
    java.awt.Rectangle var33 = var15.getBounds(var31);
    var6.setBounds((java.awt.geom.Rectangle2D)var33);
    org.jfree.chart.title.TextTitle var36 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var37 = var36.isVisible();
    java.lang.Object var38 = var36.clone();
    org.jfree.ui.RectangleEdge var39 = var36.getPosition();
    double var40 = var1.valueToJava2D(5.0d, (java.awt.geom.Rectangle2D)var33, var39);
    var1.setTickMarksVisible(true);
    org.jfree.chart.axis.DateTickUnit var43 = var1.getTickUnit();
    org.jfree.chart.axis.DateTickUnit var44 = var1.getTickUnit();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);

  }

  public void test92() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test92"); }


    org.jfree.data.xml.RootHandler var0 = new org.jfree.data.xml.RootHandler();
    var0.endElement("", "hi!", "hi!");
    var0.endDocument();
    var0.endPrefixMapping("");
    var0.skippedEntity("hi!?hi!=100&amp;amp;hi!=1");

  }

  public void test93() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test93"); }


    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var0.setUseSeriesOffset(true);
    var0.setAutoPopulateSeriesOutlinePaint(false);
    double var5 = var0.getItemMargin();
    var0.setItemMargin(0.75d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 0.0d);

  }

  public void test94() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test94"); }


    org.jfree.data.statistics.SimpleHistogramBin var2 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
    java.lang.Object var3 = var2.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test95() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test95"); }


    org.jfree.chart.plot.CompassPlot var0 = new org.jfree.chart.plot.CompassPlot();
    var0.setDrawBorder(true);
    org.jfree.data.function.NormalDistributionFunction2D var6 = new org.jfree.data.function.NormalDistributionFunction2D(4.0d, 10.0d);
    double var7 = var6.getStandardDeviation();
    java.lang.String[] var10 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var11 = new org.jfree.chart.axis.SymbolAxis("hi!", var10);
    var11.setLabelAngle(0.0d);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var16 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var19 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var20 = var19.getItemLabelFont();
    double var21 = var19.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var24 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var25 = var24.getItemLabelFont();
    java.awt.Shape var26 = var24.getBaseLegendShape();
    var19.setShape(var26);
    var16.setLegendBar(var26);
    org.jfree.data.general.DefaultKeyedValues2DDataset var31 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var34 = new org.jfree.chart.entity.CategoryItemEntity(var26, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var31, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.chart.plot.CombinedRangeXYPlot var35 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var36 = var35.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CategoryMarker var38 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var39 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var41 = var39.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var44 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var45 = var44.getTickLabelPaint();
    var39.setFillPaint(var45, true);
    var38.setLabelPaint(var45);
    org.jfree.chart.annotations.XYShapeAnnotation var49 = new org.jfree.chart.annotations.XYShapeAnnotation(var26, var36, var45);
    var11.setAxisLineStroke(var36);
    boolean var51 = var6.equals((java.lang.Object)var36);
    var0.setSeriesOutlineStroke(100, var36);
    org.jfree.chart.LegendItemCollection var53 = var0.getLegendItems();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);

  }

  public void test96() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test96"); }


    org.jfree.chart.urls.CustomCategoryURLGenerator var0 = new org.jfree.chart.urls.CustomCategoryURLGenerator();
    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var1 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var4);
    org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
    var2.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var9 = var2.getDrawSharedDomainAxis();
    org.jfree.ui.RectangleEdge var11 = var2.getDomainAxisEdge(2);
    org.jfree.data.general.DefaultKeyedValues2DDataset var12 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var12.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var17 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var12);
    org.jfree.chart.urls.StandardXYURLGenerator var21 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    boolean var22 = var12.equals((java.lang.Object)"hi!");
    org.jfree.data.Range var23 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds((org.jfree.data.category.CategoryDataset)var12);
    boolean var24 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var12);
    int var25 = var2.indexOf((org.jfree.data.category.CategoryDataset)var12);
    boolean var26 = var1.equals((java.lang.Object)var25);
    java.lang.String var29 = var0.generateURL((org.jfree.data.category.CategoryDataset)var1, 2, 500);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.statistics.BoxAndWhiskerItem var32 = var1.getItem(51, (-1));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test97() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test97"); }


    org.jfree.data.time.Week var1 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var2 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var1);
    org.jfree.data.time.TimePeriodValue var4 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var1, (java.lang.Number)10);
    java.lang.Object var5 = var4.clone();
    org.jfree.data.time.TimePeriod var6 = var4.getPeriod();
    org.jfree.data.time.TimePeriod var7 = var4.getPeriod();
    org.jfree.data.time.TimePeriod var8 = var4.getPeriod();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test98() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test98"); }


    javax.swing.JPanel var1 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var2 = var1.getPreferredSize();
    javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var1.setNextFocusableComponent((java.awt.Component)var3);
    java.util.Locale var5 = var3.getLocale();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.ResourceBundle var6 = java.util.ResourceBundle.getBundle("CategoryLabelWidthType.RANGE", var5);
      fail("Expected exception of type java.util.MissingResourceException");
    } catch (java.util.MissingResourceException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test99() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test99"); }


    org.jfree.chart.util.HexNumberFormat var1 = new org.jfree.chart.util.HexNumberFormat();
    org.jfree.chart.labels.StandardCrosshairLabelGenerator var2 = new org.jfree.chart.labels.StandardCrosshairLabelGenerator("", (java.text.NumberFormat)var1);
    boolean var3 = var1.isParseIntegerOnly();
    int var4 = var1.getNumberOfDigits();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 8);

  }

  public void test100() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test100"); }


    org.jfree.data.time.TimeTableXYDataset var0 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    var0.remove((org.jfree.data.time.TimePeriod)var2, (java.lang.Comparable)100, false);
    org.jfree.data.xy.XYBarDataset var8 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var0, Double.NaN);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var10 = var0.getSeriesKey(51);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test101() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test101"); }


    org.jfree.chart.urls.CustomCategoryURLGenerator var0 = new org.jfree.chart.urls.CustomCategoryURLGenerator();
    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var1 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var4);
    org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
    var2.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var9 = var2.getDrawSharedDomainAxis();
    org.jfree.ui.RectangleEdge var11 = var2.getDomainAxisEdge(2);
    org.jfree.data.general.DefaultKeyedValues2DDataset var12 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var12.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var17 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var12);
    org.jfree.chart.urls.StandardXYURLGenerator var21 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    boolean var22 = var12.equals((java.lang.Object)"hi!");
    org.jfree.data.Range var23 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds((org.jfree.data.category.CategoryDataset)var12);
    boolean var24 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var12);
    int var25 = var2.indexOf((org.jfree.data.category.CategoryDataset)var12);
    boolean var26 = var1.equals((java.lang.Object)var25);
    java.lang.String var29 = var0.generateURL((org.jfree.data.category.CategoryDataset)var1, 2, 500);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.removeRow((-334));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test102() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test102"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var1 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((java.lang.Comparable)(short)10);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var8 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var11 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var12 = var11.getItemLabelFont();
    double var13 = var11.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var16 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var17 = var16.getItemLabelFont();
    java.awt.Shape var18 = var16.getBaseLegendShape();
    var11.setShape(var18);
    var8.setLegendBar(var18);
    var8.setDrawBarOutline(true);
    org.jfree.chart.title.LegendTitle var23 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var8);
    org.jfree.chart.annotations.XYDrawableAnnotation var24 = new org.jfree.chart.annotations.XYDrawableAnnotation(100.0d, 10.0d, 0.0d, (-1.0d), (org.jfree.ui.Drawable)var23);
    var24.setURL("");
    boolean var27 = var1.equals((java.lang.Object)var24);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var36 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.util.List var37 = var36.getSubplots();
    org.jfree.data.statistics.BoxAndWhiskerItem var38 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)(-2208960000000L), (java.lang.Number)Double.NaN, (java.lang.Number)51, (java.lang.Number)0.05d, (java.lang.Number)(byte)100, (java.lang.Number)2.0f, (java.lang.Number)15, (java.lang.Number)1.0f, var37);
    org.jfree.chart.axis.CyclicNumberAxis var41 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var42 = var41.isAxisLineVisible();
    var41.setAxisLineVisible(true);
    org.jfree.data.general.DefaultKeyedValues2DDataset var45 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var45.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var50 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.category.CategoryDataset)var45);
    var41.setDefaultAutoRange(var50);
    org.jfree.data.Range var53 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset)var1, var37, var50, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var56 = var1.getQ1Value(51, 10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);

  }

  public void test103() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test103"); }


    org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var4);
    org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
    var2.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var15 = var14.getTickLabelPaint();
    var9.setFillPaint(var15, true);
    var2.setDomainCrosshairPaint(var15);
    boolean var19 = var1.equals((java.lang.Object)var2);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var21 = var20.getDomainCrosshairColumnKey();
    var20.setCrosshairDatasetIndex(100);
    org.jfree.chart.plot.CombinedRangeXYPlot var24 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var25 = var24.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var27 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var28 = var27.getMargin();
    var24.setAxisOffset(var28);
    var20.setAxisOffset(var28);
    org.jfree.data.category.CategoryDataset var32 = var20.getDataset((-2));
    var20.clearRangeMarkers((-13421773));
    org.jfree.chart.plot.XYPlot var35 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.plot.DatasetRenderingOrder var36 = var35.getDatasetRenderingOrder();
    var20.setDatasetRenderingOrder(var36);
    var2.setDatasetRenderingOrder(var36);
    org.jfree.chart.LegendItemCollection var39 = var2.getLegendItems();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.LegendItem var41 = var39.get(1043495433);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test104() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test104"); }


    org.jfree.chart.StandardChartTheme var2 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    org.jfree.chart.plot.DrawingSupplier var3 = var2.getDrawingSupplier();
    org.jfree.chart.plot.dial.StandardDialScale var4 = new org.jfree.chart.plot.dial.StandardDialScale();
    var4.setMajorTickIncrement(10.0d);
    java.awt.Paint var7 = var4.getMinorTickPaint();
    var2.setTickLabelPaint(var7);
    org.jfree.chart.renderer.xy.XYBarPainter var9 = org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter();
    var2.setXYBarPainter(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test105() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test105"); }


    org.jfree.chart.renderer.category.BarRenderer3D var4 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var5 = var4.getItemLabelFont();
    double var6 = var4.getItemLabelAnchorOffset();
    org.jfree.chart.labels.ItemLabelPosition var9 = var4.getNegativeItemLabelPosition(0, 0);
    double var10 = var9.getAngle();
    org.jfree.ui.TextAnchor var11 = var9.getTextAnchor();
    org.jfree.chart.plot.dial.DialValueIndicator var12 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var13 = var12.getInsets();
    java.awt.Stroke var14 = var12.getOutlineStroke();
    javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var16 = var15.getPreferredSize();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var15.setNextFocusableComponent((java.awt.Component)var17);
    java.util.Locale var19 = var17.getLocale();
    javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var21 = var20.getPreferredSize();
    java.awt.Dimension var22 = var17.getSize(var21);
    java.awt.event.ContainerListener[] var23 = var17.getContainerListeners();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var25 = var24.getPreferredSize();
    java.awt.image.ColorModel var26 = var24.getColorModel();
    var24.updateUI();
    java.lang.String var28 = var24.toString();
    java.awt.Color var29 = var24.getForeground();
    var17.setBackground(var29);
    var12.setOutlinePaint((java.awt.Paint)var29);
    boolean var32 = var12.isClippedToWindow();
    org.jfree.ui.TextAnchor var33 = var12.getTextAnchor();
    org.jfree.chart.axis.NumberTick var35 = new org.jfree.chart.axis.NumberTick((java.lang.Number)(short)0, "jfreechart-onetime-", var11, var33, 1.0d);
    java.lang.String var36 = var35.toString();
    java.lang.String var37 = var35.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var28 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var28,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var28.equals("org.jfree.chart.ChartPanel[,0,0,0var28,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var36 + "' != '" + "jfreechart-onetime-"+ "'", var36.equals("jfreechart-onetime-"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "jfreechart-onetime-"+ "'", var37.equals("jfreechart-onetime-"));

  }

  public void test106() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test106"); }


    org.jfree.chart.axis.CyclicNumberAxis var2 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var3 = var2.isAxisLineVisible();
    var2.setAxisLineVisible(true);
    var2.setMinorTickMarksVisible(true);
    org.jfree.chart.plot.CombinedRangeXYPlot var8 = new org.jfree.chart.plot.CombinedRangeXYPlot((org.jfree.chart.axis.ValueAxis)var2);
    var8.clearRangeMarkers();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test107() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test107"); }


    org.jfree.chart.plot.ThermometerPlot var1 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var2 = var1.isDomainZoomable();
    int var3 = var1.getAxisLocation();
    org.jfree.chart.StandardChartTheme var6 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    org.jfree.chart.plot.DrawingSupplier var7 = var6.getDrawingSupplier();
    org.jfree.chart.plot.dial.StandardDialScale var8 = new org.jfree.chart.plot.dial.StandardDialScale();
    var8.setMajorTickIncrement(10.0d);
    java.awt.Paint var11 = var8.getMinorTickPaint();
    var6.setTickLabelPaint(var11);
    java.awt.Font var13 = var6.getSmallFont();
    var1.setValueFont(var13);
    org.jfree.chart.block.LabelBlock var15 = new org.jfree.chart.block.LabelBlock("100", var13);
    org.jfree.chart.StandardChartTheme var18 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    org.jfree.chart.plot.DrawingSupplier var19 = var18.getDrawingSupplier();
    org.jfree.chart.plot.dial.StandardDialScale var20 = new org.jfree.chart.plot.dial.StandardDialScale();
    var20.setMajorTickIncrement(10.0d);
    java.awt.Paint var23 = var20.getMinorTickPaint();
    var18.setTickLabelPaint(var23);
    java.awt.Font var25 = var18.getSmallFont();
    var15.setFont(var25);
    
    // Checks the contract:  equals-hashcode on var6 and var18
    assertTrue("Contract failed: equals-hashcode on var6 and var18", var6.equals(var18) ? var6.hashCode() == var18.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var18 and var6
    assertTrue("Contract failed: equals-hashcode on var18 and var6", var18.equals(var6) ? var18.hashCode() == var6.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var7 and var19
    assertTrue("Contract failed: equals-hashcode on var7 and var19", var7.equals(var19) ? var7.hashCode() == var19.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var19 and var7
    assertTrue("Contract failed: equals-hashcode on var19 and var7", var19.equals(var7) ? var19.hashCode() == var7.hashCode() : true);

  }

  public void test108() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test108"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setNextFocusableComponent((java.awt.Component)var2);
    var0.show();
    var0.show(false);
    var0.enable();
    var0.setEnabled(false);
    boolean var10 = var0.requestDefaultFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);

  }

  public void test109() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test109"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    double var4 = var2.getItemLabelAnchorOffset();
    org.jfree.chart.labels.ItemLabelPosition var7 = var2.getNegativeItemLabelPosition(0, 0);
    java.awt.Paint var10 = var2.getItemFillPaint(2013, 1);
    int var11 = var2.getDefaultEntityRadius();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 3);

  }

  public void test110() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test110"); }


    org.jfree.chart.axis.StandardTickUnitSource var0 = new org.jfree.chart.axis.StandardTickUnitSource();
    org.jfree.chart.axis.TickUnit var2 = var0.getCeilingTickUnit((-170.0d));
    org.jfree.chart.axis.TickUnit var4 = var0.getCeilingTickUnit(175.0d);
    org.jfree.data.io.CSV var7 = new org.jfree.data.io.CSV('4', '#');
    boolean var8 = var0.equals((java.lang.Object)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test111() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test111"); }


    org.jfree.data.time.TimePeriodValues var3 = new org.jfree.data.time.TimePeriodValues("Compass Plot", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");
    java.lang.String var4 = var3.getRangeDescription();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.TimePeriod var6 = var3.getTimePeriod(51);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var4.equals("org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

  }

  public void test112() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test112"); }


    org.jfree.chart.title.TextTitle var1 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var2 = var1.getMargin();
    var1.setID("hi!?hi!=100&amp;hi!=1");
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test113() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test113"); }


    org.jfree.chart.StandardChartTheme var2 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var3 = var2.getLegendItemPaint();
    java.awt.Paint var4 = var2.getSubtitlePaint();
    java.awt.Font var5 = var2.getLargeFont();
    org.jfree.chart.renderer.xy.XYBarPainter var6 = var2.getXYBarPainter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test114() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test114"); }


    org.jfree.chart.plot.dial.DialPlot var0 = new org.jfree.chart.plot.dial.DialPlot();
    double var1 = var0.getViewWidth();
    org.jfree.chart.plot.dial.DialScale var3 = var0.getScaleForDataset(1);
    org.jfree.chart.plot.XYPlot var4 = new org.jfree.chart.plot.XYPlot();
    java.lang.Object var5 = var4.clone();
    org.jfree.chart.StandardChartTheme var7 = new org.jfree.chart.StandardChartTheme("Compass Plot");
    org.jfree.chart.StandardChartTheme var10 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var11 = var10.getLegendItemPaint();
    org.jfree.chart.plot.DrawingSupplier var12 = var10.getDrawingSupplier();
    var7.setDrawingSupplier(var12);
    var4.setDrawingSupplier(var12, true);
    var0.setDrawingSupplier(var12, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test115() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test115"); }


    double[] var2 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var3 = new org.jfree.chart.annotations.XYPolygonAnnotation(var2);
    double[] var6 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var7 = new org.jfree.chart.annotations.XYPolygonAnnotation(var6);
    org.jfree.chart.ClipPath var8 = new org.jfree.chart.ClipPath(var2, var6);
    boolean var9 = var8.isFillPath();
    var8.setClip(false);
    org.jfree.chart.plot.CategoryPlot var12 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var14 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var15 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var14);
    org.jfree.data.time.TimePeriodValue var17 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var14, (java.lang.Number)10);
    var12.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var19 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var21 = var19.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var24 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var25 = var24.getTickLabelPaint();
    var19.setFillPaint(var25, true);
    var12.setDomainCrosshairPaint(var25);
    var8.setFillPaint(var25);
    double[] var30 = var8.getYValue();
    boolean var31 = var8.isClip();
    double[] var34 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var35 = new org.jfree.chart.annotations.XYPolygonAnnotation(var34);
    int var36 = org.jfree.chart.HashUtilities.hashCodeForDoubleArray(var34);
    var8.setXValue(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 1043495433);

  }

  public void test116() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test116"); }


    org.jfree.data.general.DefaultKeyedValues2DDataset var0 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var0.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.chart.axis.PeriodAxis var6 = new org.jfree.chart.axis.PeriodAxis("Compass Plot");
    org.jfree.chart.axis.PeriodAxisLabelInfo[] var7 = new org.jfree.chart.axis.PeriodAxisLabelInfo[] { };
    var6.setLabelInfo(var7);
    boolean var9 = var0.equals((java.lang.Object)var6);
    org.jfree.chart.axis.PeriodAxisLabelInfo[] var10 = var6.getLabelInfo();
    var6.setMinorTickMarksVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test117() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test117"); }


    org.jfree.chart.renderer.category.BarRenderer3D var6 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var7 = var6.getItemLabelFont();
    java.awt.Shape var8 = var6.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var10 = new org.jfree.chart.entity.ContourEntity(var8, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var12 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var13 = var12.isVisible();
    java.lang.Object var14 = var12.clone();
    java.lang.String var15 = var12.getURLText();
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var17 = var16.getPreferredSize();
    java.awt.image.ColorModel var18 = var16.getColorModel();
    var16.updateUI();
    java.lang.String var20 = var16.toString();
    java.awt.Color var21 = var16.getForeground();
    var12.setBackgroundPaint((java.awt.Paint)var21);
    int var23 = var21.getRGB();
    int var24 = var21.getBlue();
    org.jfree.chart.plot.dial.DialPlot var25 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var26 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var27 = var25.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var26);
    org.jfree.chart.plot.dial.DialValueIndicator var28 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var29 = var28.getInsets();
    int var30 = var25.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var28);
    java.awt.Stroke var31 = var28.getOutlineStroke();
    org.jfree.chart.title.TextTitle var33 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var34 = var33.isVisible();
    java.lang.Object var35 = var33.clone();
    java.lang.String var36 = var33.getURLText();
    javax.swing.JPanel var37 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var38 = var37.getPreferredSize();
    java.awt.image.ColorModel var39 = var37.getColorModel();
    var37.updateUI();
    java.lang.String var41 = var37.toString();
    java.awt.Color var42 = var37.getForeground();
    var33.setBackgroundPaint((java.awt.Paint)var42);
    org.jfree.chart.LegendItem var44 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var8, (java.awt.Paint)var21, var31, (java.awt.Paint)var42);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var45 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.lang.Object var46 = var45.clone();
    org.jfree.data.function.PowerFunction2D var49 = new org.jfree.data.function.PowerFunction2D(2.0d, 1.0d);
    org.jfree.chart.axis.CyclicNumberAxis var53 = new org.jfree.chart.axis.CyclicNumberAxis(1.0d, 4.0d, "");
    var53.setInverted(true);
    boolean var56 = var49.equals((java.lang.Object)var53);
    org.jfree.data.Range var57 = var45.getDataRange((org.jfree.chart.axis.ValueAxis)var53);
    var53.setFixedAutoRange((-1.0d));
    org.jfree.chart.entity.AxisEntity var62 = new org.jfree.chart.entity.AxisEntity(var8, (org.jfree.chart.axis.Axis)var53, "item", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");
    javax.swing.JPanel var63 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var64 = var63.getPreferredSize();
    javax.swing.JPanel var65 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var63.setNextFocusableComponent((java.awt.Component)var65);
    var63.enable(true);
    float var69 = var63.getAlignmentY();
    boolean var70 = var62.equals((java.lang.Object)var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var20.equals("org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var41,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var41.equals("org.jfree.chart.ChartPanel[,0,0,0var41,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test118() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test118"); }


    org.jfree.data.time.Year var3 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var4 = new org.jfree.data.time.Month(1, var3);
    org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
    long var6 = var4.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var7 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var9 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var10 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var9);
    var7.remove((org.jfree.data.time.TimePeriod)var9, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var14 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var4, (org.jfree.data.time.RegularTimePeriod)var9);
    var14.setMinorTickMarksVisible(false);
    org.jfree.data.time.Year var18 = new org.jfree.data.time.Year(100);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var19 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    int var20 = var18.compareTo((java.lang.Object)var19);
    var14.setFirst((org.jfree.data.time.RegularTimePeriod)var18);
    var14.configure();
    java.lang.Object var23 = var14.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test119() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test119"); }


    org.jfree.data.statistics.HistogramBin var2 = new org.jfree.data.statistics.HistogramBin(0.0d, 1.0d);
    java.lang.Object var3 = var2.clone();
    int var4 = var2.getCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);

  }

  public void test120() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test120"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var17 = var16.getPreferredSize();
    java.awt.image.ColorModel var18 = var16.getColorModel();
    var16.updateUI();
    java.lang.String var20 = var16.toString();
    boolean var21 = var16.getInheritsPopupMenu();
    double[] var24 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var25 = new org.jfree.chart.annotations.XYPolygonAnnotation(var24);
    java.lang.Object var26 = var25.clone();
    org.jfree.chart.event.AnnotationChangeEvent var27 = new org.jfree.chart.event.AnnotationChangeEvent((java.lang.Object)var16, (org.jfree.chart.annotations.Annotation)var25);
    var0.annotationChanged(var27);
    org.jfree.ui.RectangleInsets var29 = var0.getAxisOffset();
    boolean var30 = var0.isOutlineVisible();
    var0.clearRangeMarkers(51);
    boolean var33 = var0.isDomainCrosshairLockedOnData();
    org.jfree.chart.plot.SeriesRenderingOrder var34 = var0.getSeriesRenderingOrder();
    java.lang.String var35 = var34.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var20.equals("org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "SeriesRenderingOrder.REVERSE"+ "'", var35.equals("SeriesRenderingOrder.REVERSE"));

  }

  public void test121() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test121"); }


    java.text.NumberFormat var2 = java.text.NumberFormat.getPercentInstance();
    int var3 = var2.getMinimumFractionDigits();
    org.jfree.chart.util.RelativeDateFormat var4 = new org.jfree.chart.util.RelativeDateFormat();
    boolean var5 = var4.getShowZeroHours();
    java.text.NumberFormat var6 = var4.getNumberFormat();
    java.text.NumberFormat var7 = var4.getNumberFormat();
    org.jfree.chart.labels.StandardXYToolTipGenerator var8 = new org.jfree.chart.labels.StandardXYToolTipGenerator("CategoryLabelWidthType.RANGE", var2, var7);
    java.text.NumberFormat var10 = java.text.NumberFormat.getPercentInstance();
    int var11 = var10.getMinimumFractionDigits();
    org.jfree.chart.util.RelativeDateFormat var12 = new org.jfree.chart.util.RelativeDateFormat();
    boolean var13 = var12.getShowZeroHours();
    java.text.NumberFormat var14 = var12.getNumberFormat();
    java.text.NumberFormat var15 = var12.getNumberFormat();
    org.jfree.chart.labels.StandardXYToolTipGenerator var16 = new org.jfree.chart.labels.StandardXYToolTipGenerator("CategoryLabelWidthType.RANGE", var10, var15);
    org.jfree.chart.labels.StandardXYToolTipGenerator var17 = new org.jfree.chart.labels.StandardXYToolTipGenerator("Time", var2, var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test122() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test122"); }


    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var2 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.LegendItem var5 = var2.getLegendItem(1, 0);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var6 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    var2.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var6);
    org.jfree.chart.renderer.xy.CandlestickRenderer var8 = new org.jfree.chart.renderer.xy.CandlestickRenderer(0.75d, false, (org.jfree.chart.labels.XYToolTipGenerator)var6);
    boolean var9 = var8.getUseOutlinePaint();
    var8.setAutoWidthGap(100.0d);
    java.awt.Paint var12 = var8.getVolumePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test123() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test123"); }


    org.jfree.data.contour.NonGridContourDataset var0 = new org.jfree.data.contour.NonGridContourDataset();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var3 = var0.getZValue(15, 20);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test124() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test124"); }


    org.jfree.chart.plot.GreyPalette var0 = new org.jfree.chart.plot.GreyPalette();
    double var1 = var0.getMaxZ();
    boolean var2 = var0.isInverse();
    java.awt.Paint var4 = var0.getPaint(1.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test125() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test125"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    boolean var2 = var0.getIgnoreRepaint();
    java.awt.dnd.DropTarget var3 = var0.getDropTarget();
    java.awt.event.ContainerListener[] var4 = var0.getContainerListeners();
    var0.firePropertyChange("org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]", (byte)100, (byte)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test126() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test126"); }


    org.jfree.chart.StandardChartTheme var2 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    org.jfree.chart.plot.DrawingSupplier var3 = var2.getDrawingSupplier();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    org.jfree.data.general.DefaultKeyedValues2DDataset var21 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var24 = new org.jfree.chart.entity.CategoryItemEntity(var16, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var21, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.chart.plot.CombinedRangeXYPlot var25 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var26 = var25.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CategoryMarker var28 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var29 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var31 = var29.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var34 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var35 = var34.getTickLabelPaint();
    var29.setFillPaint(var35, true);
    var28.setLabelPaint(var35);
    org.jfree.chart.annotations.XYShapeAnnotation var39 = new org.jfree.chart.annotations.XYShapeAnnotation(var16, var26, var35);
    var2.setTitlePaint(var35);
    org.jfree.chart.plot.DefaultDrawingSupplier var41 = new org.jfree.chart.plot.DefaultDrawingSupplier();
    java.awt.Stroke var42 = var41.getNextStroke();
    var2.setDrawingSupplier((org.jfree.chart.plot.DrawingSupplier)var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test127() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test127"); }


    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var2 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var3 = var2.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var4 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var5 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var2, (org.jfree.chart.urls.XYURLGenerator)var4);
    org.jfree.chart.renderer.xy.StandardXYItemRenderer var6 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, (org.jfree.chart.labels.XYToolTipGenerator)var2);
    double[] var9 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var10 = new org.jfree.chart.annotations.XYPolygonAnnotation(var9);
    double[] var13 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var14 = new org.jfree.chart.annotations.XYPolygonAnnotation(var13);
    org.jfree.chart.ClipPath var15 = new org.jfree.chart.ClipPath(var9, var13);
    double[][] var16 = new double[][] { var9};
    double[] var21 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var22 = new org.jfree.chart.annotations.XYPolygonAnnotation(var21);
    double[] var25 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var26 = new org.jfree.chart.annotations.XYPolygonAnnotation(var25);
    org.jfree.chart.ClipPath var27 = new org.jfree.chart.ClipPath(var21, var25);
    double[][] var28 = new double[][] { var21};
    org.jfree.data.category.CategoryDataset var29 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var28);
    org.jfree.data.category.DefaultIntervalCategoryDataset var30 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var16, var28);
    boolean var31 = var6.equals((java.lang.Object)var16);
    boolean var34 = var6.getItemShapeFilled(8, 5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);

  }

  public void test128() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test128"); }


    org.jfree.chart.renderer.category.StackedBarRenderer var1 = new org.jfree.chart.renderer.category.StackedBarRenderer(false);
    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var5 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var8 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var9 = var8.getItemLabelFont();
    double var10 = var8.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var13 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var14 = var13.getItemLabelFont();
    java.awt.Shape var15 = var13.getBaseLegendShape();
    var8.setShape(var15);
    var5.setLegendBar(var15);
    org.jfree.data.general.DefaultKeyedValues2DDataset var20 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var23 = new org.jfree.chart.entity.CategoryItemEntity(var15, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var20, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.data.Range var25 = var2.findRangeBounds((org.jfree.data.category.CategoryDataset)var20, true);
    org.jfree.data.Range var26 = var1.findRangeBounds((org.jfree.data.category.CategoryDataset)var20);
    boolean var27 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var20);
    org.jfree.chart.plot.CategoryPlot var28 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var30 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var31 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var30);
    org.jfree.data.time.TimePeriodValue var33 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var30, (java.lang.Number)10);
    var28.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var35 = var28.getDrawSharedDomainAxis();
    org.jfree.ui.RectangleEdge var37 = var28.getDomainAxisEdge(2);
    java.util.List var38 = var28.getAnnotations();
    org.jfree.data.Range var40 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var20, var38, false);
    org.jfree.data.Range var42 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.category.CategoryDataset)var20, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);

  }

  public void test129() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test129"); }


    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var0 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var2 = var0.getSeriesItemLabelGenerator(0);
    org.jfree.chart.labels.XYItemLabelGenerator var5 = var0.getItemLabelGenerator((-1), 0);
    boolean var6 = var0.getBaseShapesVisible();
    org.jfree.chart.plot.CombinedRangeXYPlot var7 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var8 = var7.getRangeZeroBaselineStroke();
    java.lang.String var9 = var7.getPlotType();
    org.jfree.chart.plot.CategoryMarker var11 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var12 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var14 = var12.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var17 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var18 = var17.getTickLabelPaint();
    var12.setFillPaint(var18, true);
    var11.setLabelPaint(var18);
    boolean var22 = var7.removeRangeMarker((org.jfree.chart.plot.Marker)var11);
    org.jfree.chart.axis.AxisLocation var23 = var7.getDomainAxisLocation();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var26 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var29 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var30 = var29.getItemLabelFont();
    double var31 = var29.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var34 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var35 = var34.getItemLabelFont();
    java.awt.Shape var36 = var34.getBaseLegendShape();
    var29.setShape(var36);
    var26.setLegendBar(var36);
    var26.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var41 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var42 = var26.findDomainBounds((org.jfree.data.xy.XYDataset)var41);
    int var43 = var7.getIndexOf((org.jfree.chart.renderer.xy.XYItemRenderer)var26);
    var0.setPlot((org.jfree.chart.plot.XYPlot)var7);
    org.jfree.chart.StandardChartTheme var47 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var48 = var47.getLegendItemPaint();
    java.awt.Paint var49 = var47.getSubtitlePaint();
    java.awt.Paint var50 = var47.getTickLabelPaint();
    var7.setOutlinePaint(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Combined Range XYPlot"+ "'", var9.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test130() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test130"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    java.awt.image.ColorModel var2 = var0.getColorModel();
    var0.updateUI();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.getInheritsPopupMenu();
    javax.swing.InputMap var6 = var0.getInputMap();
    var0.nextFocus();
    boolean var8 = var0.getInheritsPopupMenu();
    org.jfree.chart.plot.CombinedRangeXYPlot var9 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    org.jfree.chart.annotations.XYPointerAnnotation var14 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var15 = var14.getLabelOffset();
    org.jfree.ui.TextAnchor var16 = var14.getRotationAnchor();
    boolean var17 = var9.removeAnnotation((org.jfree.chart.annotations.XYAnnotation)var14);
    org.jfree.chart.StandardChartTheme var20 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var21 = var20.getLegendItemPaint();
    java.awt.Paint var22 = var20.getSubtitlePaint();
    java.awt.Font var23 = var20.getLargeFont();
    var14.setFont(var23);
    java.awt.FontMetrics var25 = var0.getFontMetrics(var23);
    java.awt.Dimension var26 = var0.getMaximumSize();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var4.equals("org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);

  }

  public void test131() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test131"); }


    org.jfree.data.general.DefaultKeyedValueDataset var0 = new org.jfree.data.general.DefaultKeyedValueDataset();
    org.jfree.data.general.DatasetGroup var1 = var0.getGroup();
    org.jfree.data.general.DefaultKeyedValueDataset var2 = new org.jfree.data.general.DefaultKeyedValueDataset((org.jfree.data.KeyedValue)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.updateValue((java.lang.Number)(-2));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test132() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test132"); }


    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var1 = var0.getBaseItemLabelsVisible();
    boolean var2 = var0.getDrawOutlines();
    java.lang.Boolean var3 = var0.getShapesFilled();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var1 + "' != '" + false+ "'", var1.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test133() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test133"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.awt.Stroke var2 = var0.getDomainMinorGridlineStroke();
    var0.setRangeCrosshairVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test134() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test134"); }


    org.jfree.chart.plot.dial.StandardDialScale var0 = new org.jfree.chart.plot.dial.StandardDialScale();
    var0.setMajorTickIncrement(10.0d);
    org.jfree.chart.plot.dial.DialPlot var3 = new org.jfree.chart.plot.dial.DialPlot();
    var3.setView(0.2d, 4.0d, 10.0d, 10.0d);
    var3.mapDatasetToScale(2013, 100);
    var0.addChangeListener((org.jfree.chart.plot.dial.DialLayerChangeListener)var3);
    double var13 = var0.getExtent();
    org.jfree.chart.event.RendererChangeEvent var15 = new org.jfree.chart.event.RendererChangeEvent((java.lang.Object)var13, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-170.0d));

  }

  public void test135() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test135"); }


    org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.axis.CategoryLabelPositions var3 = org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(100.0d);
    org.jfree.chart.title.TextTitle var5 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var6 = var5.isVisible();
    java.lang.Object var7 = var5.clone();
    org.jfree.ui.RectangleEdge var8 = var5.getPosition();
    org.jfree.chart.axis.CategoryLabelPosition var9 = var3.getLabelPosition(var8);
    org.jfree.chart.axis.CategoryLabelPositions var10 = org.jfree.chart.axis.CategoryLabelPositions.replaceBottomPosition(var1, var9);
    org.jfree.chart.renderer.category.LevelRenderer var11 = new org.jfree.chart.renderer.category.LevelRenderer();
    double var12 = var11.getItemMargin();
    org.jfree.chart.StrokeMap var13 = new org.jfree.chart.StrokeMap();
    java.lang.Object var14 = var13.clone();
    boolean var15 = var11.equals((java.lang.Object)var13);
    var11.setItemLabelAnchorOffset(4.0d);
    org.jfree.data.KeyedObjects2D var19 = new org.jfree.data.KeyedObjects2D();
    javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var21 = var20.getPreferredSize();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var20.setNextFocusableComponent((java.awt.Component)var22);
    java.util.Locale var24 = var22.getLocale();
    org.jfree.chart.axis.TickUnitSource var25 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var24);
    java.text.NumberFormat var26 = java.text.NumberFormat.getPercentInstance(var24);
    org.jfree.data.time.Year var28 = new org.jfree.data.time.Year();
    var19.addObject((java.lang.Object)var26, (java.lang.Comparable)0.04d, (java.lang.Comparable)var28);
    double[] var32 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var33 = new org.jfree.chart.annotations.XYPolygonAnnotation(var32);
    double[] var36 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var37 = new org.jfree.chart.annotations.XYPolygonAnnotation(var36);
    org.jfree.chart.ClipPath var38 = new org.jfree.chart.ClipPath(var32, var36);
    double[][] var39 = new double[][] { var32};
    double[] var44 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var45 = new org.jfree.chart.annotations.XYPolygonAnnotation(var44);
    double[] var48 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var49 = new org.jfree.chart.annotations.XYPolygonAnnotation(var48);
    org.jfree.chart.ClipPath var50 = new org.jfree.chart.ClipPath(var44, var48);
    double[][] var51 = new double[][] { var44};
    org.jfree.data.category.CategoryDataset var52 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var51);
    org.jfree.data.category.DefaultIntervalCategoryDataset var53 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var39, var51);
    org.jfree.chart.axis.SubCategoryAxis var55 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    var55.configure();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var57 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var59 = var57.getSeriesLinesVisible(10);
    javax.swing.JPanel var61 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var62 = var61.getPreferredSize();
    boolean var63 = var61.getIgnoreRepaint();
    boolean var64 = var61.isLightweight();
    javax.swing.JPanel var65 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var66 = var65.getPreferredSize();
    javax.swing.JPanel var67 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var65.setNextFocusableComponent((java.awt.Component)var67);
    var65.show();
    javax.swing.JPanel var70 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var71 = var70.getLocation();
    java.awt.Dimension var72 = var70.preferredSize();
    java.awt.Rectangle var73 = var70.bounds();
    var65.scrollRectToVisible(var73);
    var61.setBounds(var73);
    var57.setSeriesShape(15, (java.awt.Shape)var73);
    org.jfree.chart.axis.AxisState var77 = new org.jfree.chart.axis.AxisState();
    org.jfree.chart.title.TextTitle var80 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var81 = var80.isVisible();
    java.lang.Object var82 = var80.clone();
    org.jfree.ui.RectangleEdge var83 = var80.getPosition();
    var77.moveCursor(4.0d, var83);
    double var85 = var11.getItemMiddle((java.lang.Comparable)1201L, (java.lang.Comparable)0.04d, (org.jfree.data.category.CategoryDataset)var53, (org.jfree.chart.axis.CategoryAxis)var55, (java.awt.geom.Rectangle2D)var73, var83);
    org.jfree.chart.axis.CategoryLabelPosition var86 = var1.getLabelPosition(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var85 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var86);

  }

  public void test136() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test136"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var6 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var6.setUpperMargin(10.0d);
    var6.setAxisLineVisible(true);
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var12 = var11.getLocation();
    java.awt.Dimension var13 = var11.preferredSize();
    java.awt.Rectangle var14 = var11.bounds();
    java.awt.Point var15 = var0.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var6, (java.awt.geom.Rectangle2D)var14);
    org.jfree.data.xy.DefaultXYZDataset var17 = new org.jfree.data.xy.DefaultXYZDataset();
    org.jfree.data.DomainOrder var18 = var17.getDomainOrder();
    var0.setDataset(1, (org.jfree.data.xy.XYDataset)var17);
    boolean var20 = var0.isAngleGridlinesVisible();
    org.jfree.ui.RectangleInsets var21 = var0.getInsets();
    org.jfree.chart.renderer.PolarItemRenderer var22 = var0.getRenderer();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test137() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test137"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    java.awt.image.ColorModel var2 = var0.getColorModel();
    var0.updateUI();
    java.lang.String var4 = var0.toString();
    java.awt.Color var5 = var0.getForeground();
    org.jfree.chart.axis.LogAxis var6 = new org.jfree.chart.axis.LogAxis();
    org.jfree.chart.editor.DefaultLogAxisEditor var7 = new org.jfree.chart.editor.DefaultLogAxisEditor(var6);
    var7.toggleAutoTick();
    var0.removeFocusListener((java.awt.event.FocusListener)var7);
    var0.setAlignmentY(2.0f);
    org.jfree.chart.plot.GreyPalette var12 = new org.jfree.chart.plot.GreyPalette();
    double var13 = var12.getMaxZ();
    org.jfree.chart.editor.PaletteSample var14 = new org.jfree.chart.editor.PaletteSample((org.jfree.chart.plot.ColorPalette)var12);
    var14.setFocusTraversalKeysEnabled(false);
    org.jfree.chart.plot.GreyPalette var17 = new org.jfree.chart.plot.GreyPalette();
    double var18 = var17.getMaxZ();
    var14.setPalette((org.jfree.chart.plot.ColorPalette)var17);
    java.awt.Insets var20 = var14.getInsets();
    java.awt.Insets var21 = var0.getInsets(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var4.equals("org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);

  }

  public void test138() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test138"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var2 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var3 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var4 = var2.findDomainBounds((org.jfree.data.xy.XYDataset)var3);
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    double var9 = var7.getItemLabelAnchorOffset();
    org.jfree.chart.labels.ItemLabelPosition var12 = var7.getNegativeItemLabelPosition(0, 0);
    double var13 = var12.getAngle();
    var2.setNegativeItemLabelPosition(var12);
    org.jfree.chart.labels.XYSeriesLabelGenerator var15 = var2.getLegendItemToolTipGenerator();
    org.jfree.chart.title.LegendTitle var16 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var2);
    org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var18 = var17.getDomainCrosshairColumnKey();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var19 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var19.setUseSeriesOffset(true);
    var19.setBaseSeriesVisible(true);
    var19.setAutoPopulateSeriesShape(false);
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var26 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var19};
    var17.setRenderers(var26);
    var16.setSources((org.jfree.chart.LegendItemSource[])var26);
    org.jfree.ui.RectangleAnchor var29 = var16.getLegendItemGraphicLocation();
    java.lang.Object var30 = var16.clone();
    org.jfree.chart.annotations.XYTitleAnnotation var31 = new org.jfree.chart.annotations.XYTitleAnnotation(3.0d, 360.0d, (org.jfree.chart.title.Title)var16);
    org.jfree.ui.RectangleAnchor var32 = var16.getLegendItemGraphicLocation();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test139() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test139"); }


    org.jfree.data.time.TimePeriodValues var3 = new org.jfree.data.time.TimePeriodValues("Compass Plot", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");
    var3.setRangeDescription("d");
    int var6 = var3.getItemCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test140() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test140"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    org.jfree.data.general.DatasetGroup var1 = var0.getDatasetGroup();
    org.jfree.chart.plot.Crosshair var2 = new org.jfree.chart.plot.Crosshair();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var5 = var3.getSeriesLinesVisible(10);
    var3.setUseOutlinePaint(true);
    boolean var8 = var2.equals((java.lang.Object)true);
    java.awt.Paint var9 = var2.getLabelPaint();
    var0.setValuePaint(var9);
    var0.setSubrange(4, 1.05d, 0.02d);
    var0.setSubrangeInfo(4, 0.0d, 0.5d, 174.49d, 0.2d);
    boolean var21 = var0.isRangeZoomable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test141() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test141"); }


    org.jfree.chart.plot.dial.DialPlot var0 = new org.jfree.chart.plot.dial.DialPlot();
    float var1 = var0.getForegroundAlpha();
    org.jfree.data.time.Second var2 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var3 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var2);
    var3.setMaximumItemCount(0);
    boolean var6 = var3.getNotify();
    double var7 = var3.getMaxY();
    java.lang.Object var8 = var3.clone();
    boolean var9 = var0.equals(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);

  }

  public void test142() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test142"); }


    org.jfree.chart.util.HexNumberFormat var1 = new org.jfree.chart.util.HexNumberFormat();
    org.jfree.chart.labels.StandardCrosshairLabelGenerator var2 = new org.jfree.chart.labels.StandardCrosshairLabelGenerator("", (java.text.NumberFormat)var1);
    org.jfree.chart.plot.ThermometerPlot var3 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var4 = var3.isDomainZoomable();
    int var5 = var3.getAxisLocation();
    org.jfree.data.general.ValueDataset var6 = var3.getDataset();
    org.jfree.chart.plot.MeterPlot var7 = new org.jfree.chart.plot.MeterPlot(var6);
    java.awt.Paint var8 = var7.getDialOutlinePaint();
    org.jfree.data.Range var9 = var7.getRange();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.text.AttributedCharacterIterator var10 = var1.formatToCharacterIterator((java.lang.Object)var9);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test143() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test143"); }


    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var0 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    java.awt.Paint var1 = var0.getShapePaint();
    int var2 = var0.getPassCount();
    boolean var3 = var0.getPlotShapes();
    java.awt.Stroke var4 = var0.getShapeStroke();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test144() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test144"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var1 = var0.isDomainZoomable();
    int var2 = var0.getAxisLocation();
    org.jfree.data.general.ValueDataset var3 = var0.getDataset();
    org.jfree.chart.plot.MeterPlot var4 = new org.jfree.chart.plot.MeterPlot(var3);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var7 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    java.awt.Shape var8 = var7.getLegendBar();
    java.lang.String[] var11 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var12 = new org.jfree.chart.axis.SymbolAxis("hi!", var11);
    org.jfree.chart.plot.CompassPlot var13 = new org.jfree.chart.plot.CompassPlot();
    boolean var14 = var12.equals((java.lang.Object)var13);
    java.lang.String var15 = var13.getPlotType();
    java.awt.Paint var16 = var13.getRoseCenterPaint();
    java.awt.Paint var17 = var13.getBackgroundPaint();
    var7.setItemLabelPaint(var17, true);
    var4.setValuePaint(var17);
    org.jfree.chart.plot.Crosshair var21 = new org.jfree.chart.plot.Crosshair();
    java.awt.Paint var22 = var21.getLabelPaint();
    boolean var23 = var4.equals((java.lang.Object)var22);
    java.lang.Object var24 = var4.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "Compass Plot"+ "'", var15.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test145() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test145"); }


    org.jfree.chart.renderer.category.BarRenderer3D var6 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var7 = var6.getItemLabelFont();
    java.awt.Shape var8 = var6.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var10 = new org.jfree.chart.entity.ContourEntity(var8, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var12 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var13 = var12.isVisible();
    java.lang.Object var14 = var12.clone();
    java.lang.String var15 = var12.getURLText();
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var17 = var16.getPreferredSize();
    java.awt.image.ColorModel var18 = var16.getColorModel();
    var16.updateUI();
    java.lang.String var20 = var16.toString();
    java.awt.Color var21 = var16.getForeground();
    var12.setBackgroundPaint((java.awt.Paint)var21);
    int var23 = var21.getRGB();
    int var24 = var21.getBlue();
    org.jfree.chart.plot.dial.DialPlot var25 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var26 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var27 = var25.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var26);
    org.jfree.chart.plot.dial.DialValueIndicator var28 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var29 = var28.getInsets();
    int var30 = var25.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var28);
    java.awt.Stroke var31 = var28.getOutlineStroke();
    org.jfree.chart.title.TextTitle var33 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var34 = var33.isVisible();
    java.lang.Object var35 = var33.clone();
    java.lang.String var36 = var33.getURLText();
    javax.swing.JPanel var37 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var38 = var37.getPreferredSize();
    java.awt.image.ColorModel var39 = var37.getColorModel();
    var37.updateUI();
    java.lang.String var41 = var37.toString();
    java.awt.Color var42 = var37.getForeground();
    var33.setBackgroundPaint((java.awt.Paint)var42);
    org.jfree.chart.LegendItem var44 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var8, (java.awt.Paint)var21, var31, (java.awt.Paint)var42);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var45 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.lang.Object var46 = var45.clone();
    org.jfree.data.function.PowerFunction2D var49 = new org.jfree.data.function.PowerFunction2D(2.0d, 1.0d);
    org.jfree.chart.axis.CyclicNumberAxis var53 = new org.jfree.chart.axis.CyclicNumberAxis(1.0d, 4.0d, "");
    var53.setInverted(true);
    boolean var56 = var49.equals((java.lang.Object)var53);
    org.jfree.data.Range var57 = var45.getDataRange((org.jfree.chart.axis.ValueAxis)var53);
    var53.setFixedAutoRange((-1.0d));
    org.jfree.chart.entity.AxisEntity var62 = new org.jfree.chart.entity.AxisEntity(var8, (org.jfree.chart.axis.Axis)var53, "item", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");
    java.lang.Object var63 = var62.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var20.equals("org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var41,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var41.equals("org.jfree.chart.ChartPanel[,0,0,0var41,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);

  }

  public void test146() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test146"); }


    org.jfree.chart.needle.ShipNeedle var0 = new org.jfree.chart.needle.ShipNeedle();
    org.jfree.chart.plot.dial.DialPlot var1 = new org.jfree.chart.plot.dial.DialPlot();
    var1.setView(0.2d, 4.0d, 10.0d, 10.0d);
    var1.mapDatasetToScale(2013, 100);
    org.jfree.chart.plot.dial.DialPlot var10 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var11 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var12 = var10.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var11);
    var11.setTickLabelsVisible(false);
    int var15 = var1.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var11);
    boolean var16 = var0.equals((java.lang.Object)var1);
    java.lang.Object var17 = var0.clone();
    java.lang.Object var18 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test147() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test147"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var1 = var0.isDomainZoomable();
    int var2 = var0.getAxisLocation();
    org.jfree.data.general.ValueDataset var3 = var0.getDataset();
    org.jfree.chart.plot.MeterPlot var4 = new org.jfree.chart.plot.MeterPlot(var3);
    java.awt.Paint var5 = var4.getTickLabelPaint();
    java.lang.String[] var8 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var9 = new org.jfree.chart.axis.SymbolAxis("hi!", var8);
    org.jfree.chart.plot.CompassPlot var10 = new org.jfree.chart.plot.CompassPlot();
    boolean var11 = var9.equals((java.lang.Object)var10);
    var9.setGridBandsVisible(false);
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var15 = var14.getLocation();
    java.awt.Dimension var16 = var14.preferredSize();
    java.awt.Rectangle var17 = var14.bounds();
    var14.setDoubleBuffered(true);
    org.jfree.chart.axis.CyclicNumberAxis var22 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var23 = var22.getTickLabelPaint();
    var22.setVisible(false);
    java.lang.Object var26 = var22.clone();
    org.jfree.chart.plot.CombinedRangeXYPlot var27 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    org.jfree.chart.annotations.XYPointerAnnotation var32 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var33 = var32.getLabelOffset();
    org.jfree.ui.TextAnchor var34 = var32.getRotationAnchor();
    boolean var35 = var27.removeAnnotation((org.jfree.chart.annotations.XYAnnotation)var32);
    org.jfree.chart.StandardChartTheme var38 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var39 = var38.getLegendItemPaint();
    java.awt.Paint var40 = var38.getSubtitlePaint();
    java.awt.Font var41 = var38.getLargeFont();
    var32.setFont(var41);
    var22.setLabelFont(var41);
    var14.setFont(var41);
    var9.setTickLabelFont(var41);
    var4.setTickLabelFont(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test148() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test148"); }


    org.jfree.data.time.Year var3 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var4 = new org.jfree.data.time.Month(1, var3);
    org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
    long var6 = var4.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var7 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var9 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var10 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var9);
    var7.remove((org.jfree.data.time.TimePeriod)var9, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var14 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var4, (org.jfree.data.time.RegularTimePeriod)var9);
    java.util.Date var15 = var9.getEnd();
    org.jfree.data.time.Second var16 = new org.jfree.data.time.Second(var15);
    org.jfree.data.time.Millisecond var17 = new org.jfree.data.time.Millisecond(var15);
    long var18 = var17.getLastMillisecond();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1379228399999L);

  }

  public void test149() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test149"); }


    org.jfree.data.xy.XYIntervalSeries var3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable)"org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", false, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var5 = var3.getYHighValue(4);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test150() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test150"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    org.jfree.chart.axis.AxisLocation var16 = var0.getDomainAxisLocation();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var19 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var22 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var23 = var22.getItemLabelFont();
    double var24 = var22.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var27 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var28 = var27.getItemLabelFont();
    java.awt.Shape var29 = var27.getBaseLegendShape();
    var22.setShape(var29);
    var19.setLegendBar(var29);
    var19.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var34 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var35 = var19.findDomainBounds((org.jfree.data.xy.XYDataset)var34);
    int var36 = var0.getIndexOf((org.jfree.chart.renderer.xy.XYItemRenderer)var19);
    var0.setRangeCrosshairVisible(false);
    org.jfree.chart.plot.dial.DialValueIndicator var39 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var40 = var39.getInsets();
    java.awt.Stroke var41 = var39.getOutlineStroke();
    javax.swing.JPanel var42 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var43 = var42.getPreferredSize();
    javax.swing.JPanel var44 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var42.setNextFocusableComponent((java.awt.Component)var44);
    java.util.Locale var46 = var44.getLocale();
    javax.swing.JPanel var47 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var48 = var47.getPreferredSize();
    java.awt.Dimension var49 = var44.getSize(var48);
    java.awt.event.ContainerListener[] var50 = var44.getContainerListeners();
    javax.swing.JPanel var51 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var52 = var51.getPreferredSize();
    java.awt.image.ColorModel var53 = var51.getColorModel();
    var51.updateUI();
    java.lang.String var55 = var51.toString();
    java.awt.Color var56 = var51.getForeground();
    var44.setBackground(var56);
    var39.setOutlinePaint((java.awt.Paint)var56);
    java.awt.Color var59 = var56.brighter();
    var0.setDomainMinorGridlinePaint((java.awt.Paint)var56);
    java.lang.String var61 = var0.getPlotType();
    org.jfree.chart.plot.CategoryPlot var62 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryMarker var64 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var65 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var67 = var65.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var70 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var71 = var70.getTickLabelPaint();
    var65.setFillPaint(var71, true);
    var64.setLabelPaint(var71);
    var62.setDomainGridlinePaint(var71);
    var62.setDrawSharedDomainAxis(false);
    java.awt.Stroke var78 = var62.getRangeZeroBaselineStroke();
    var0.setRangeCrosshairStroke(var78);
    
    // Checks the contract:  equals-hashcode on var4 and var64
    assertTrue("Contract failed: equals-hashcode on var4 and var64", var4.equals(var64) ? var4.hashCode() == var64.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var64 and var4
    assertTrue("Contract failed: equals-hashcode on var64 and var4", var64.equals(var4) ? var64.hashCode() == var4.hashCode() : true);

  }

  public void test151() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test151"); }


    org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
    var0.setValue((java.lang.Comparable)4.0d, (-0.7853981633974483d));
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var5 = var0.getValue((java.lang.Comparable)10.0f);
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }

  }

  public void test152() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test152"); }


    org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var0);
    org.jfree.data.time.Year var5 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var6 = new org.jfree.data.time.Month(1, var5);
    org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
    long var8 = var6.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var9 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var11 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var12 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var11);
    var9.remove((org.jfree.data.time.TimePeriod)var11, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var16 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var6, (org.jfree.data.time.RegularTimePeriod)var11);
    var16.setMinorTickMarksVisible(false);
    org.jfree.data.time.Year var20 = new org.jfree.data.time.Year(100);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var21 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    int var22 = var20.compareTo((java.lang.Object)var21);
    var16.setFirst((org.jfree.data.time.RegularTimePeriod)var20);
    java.lang.String var24 = var20.toString();
    var1.add((org.jfree.data.time.RegularTimePeriod)var20, (java.lang.Number)(short)(-1));
    var1.setDomainDescription("[size=0x00000000]");
    java.util.Collection var29 = var1.getTimePeriods();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "100"+ "'", var24.equals("100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);

  }

  public void test153() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test153"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(0.5d, 0.14d);

  }

  public void test154() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test154"); }


    org.jfree.chart.labels.HighLowItemLabelGenerator var0 = new org.jfree.chart.labels.HighLowItemLabelGenerator();
    org.jfree.data.time.TimeTableXYDataset var1 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var3 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var4 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var3);
    var1.remove((org.jfree.data.time.TimePeriod)var3, (java.lang.Comparable)100, false);
    org.jfree.data.xy.XYBarDataset var9 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var1, Double.NaN);
    java.lang.Object var10 = var9.clone();
    java.lang.String var13 = var0.generateToolTip((org.jfree.data.xy.XYDataset)var9, 1043495433, 0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var16 = var9.getStartXValue(2147483647, 8);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test155() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test155"); }


    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis("0x00000000");
    var1.zoomRange(0.0d, Double.NaN);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.pan(2.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test156() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test156"); }


    org.jfree.data.time.Week var1 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var2 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var1);
    var2.setPercentComplete((java.lang.Double)10.0d);
    org.jfree.data.time.Week var6 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var7 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var6);
    var7.setPercentComplete((java.lang.Double)10.0d);
    var2.addSubtask(var7);
    org.jfree.data.time.Week var12 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var13 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var12);
    var13.setPercentComplete((java.lang.Double)10.0d);
    org.jfree.data.time.Week var17 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var18 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var17);
    var18.setPercentComplete((java.lang.Double)10.0d);
    var13.addSubtask(var18);
    var7.addSubtask(var18);
    
    // Checks the contract:  equals-hashcode on var7 and var13
    assertTrue("Contract failed: equals-hashcode on var7 and var13", var7.equals(var13) ? var7.hashCode() == var13.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var13 and var7
    assertTrue("Contract failed: equals-hashcode on var13 and var7", var13.equals(var7) ? var13.hashCode() == var7.hashCode() : true);

  }

  public void test157() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test157"); }


    org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.data.category.CategoryDataset var1 = var0.getDataset();
    org.jfree.data.category.CategoryDataset var2 = var0.getDataset();
    var0.setLimit(1.05d);
    org.jfree.data.time.Year var7 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var8 = new org.jfree.data.time.Month(1, var7);
    org.jfree.chart.util.HexNumberFormat var10 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var12 = var11.getPreferredSize();
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var11.setNextFocusableComponent((java.awt.Component)var13);
    java.util.Locale var15 = var13.getLocale();
    org.jfree.chart.axis.MonthDateFormat var16 = new org.jfree.chart.axis.MonthDateFormat(var15);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var17 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var10, (java.text.DateFormat)var16);
    boolean var18 = var7.equals((java.lang.Object)var16);
    long var19 = var7.getSerialIndex();
    var0.setAggregatedItemsKey((java.lang.Comparable)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 100L);

  }

  public void test158() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test158"); }


    org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var2.clear();
    double var4 = var2.getMinX();
    org.jfree.data.xy.XYSeriesCollection var5 = new org.jfree.data.xy.XYSeriesCollection(var2);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.xy.XYSeries var7 = var5.getSeries(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == Double.NaN);

  }

  public void test159() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test159"); }


    org.jfree.chart.plot.XYCrosshairState var0 = new org.jfree.chart.plot.XYCrosshairState();
    var0.setCrosshairDistance((-1.0d));

  }

  public void test160() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test160"); }


    org.jfree.chart.plot.GreyPalette var0 = new org.jfree.chart.plot.GreyPalette();
    var0.setPaletteName("Compass Plot");
    boolean var3 = var0.isStepped();
    var0.setLogscale(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test161() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test161"); }


    org.jfree.chart.plot.dial.DialValueIndicator var1 = new org.jfree.chart.plot.dial.DialValueIndicator(80);

  }

  public void test162() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test162"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var1 = var0.isDomainZoomable();
    int var2 = var0.getAxisLocation();
    org.jfree.data.general.ValueDataset var3 = var0.getDataset();
    org.jfree.chart.plot.MeterPlot var4 = new org.jfree.chart.plot.MeterPlot(var3);
    java.awt.Paint var5 = var4.getTickLabelPaint();
    boolean var7 = var4.equals((java.lang.Object)15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test163() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test163"); }


    org.jfree.data.xy.YInterval var3 = new org.jfree.data.xy.YInterval(5.0d, 100.0d, 15.0d);

  }

  public void test164() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test164"); }


    java.lang.String[] var2 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var4 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var6 = var4.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var9 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var10 = var9.getTickLabelPaint();
    var4.setFillPaint(var10, true);
    var3.setGridBandAlternatePaint(var10);
    boolean var14 = var3.isGridBandsVisible();
    java.awt.Paint var15 = var3.getLabelPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test165() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test165"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setNextFocusableComponent((java.awt.Component)var2);
    java.util.Locale var4 = var2.getLocale();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    java.awt.Dimension var7 = var2.getSize(var6);
    java.awt.event.ContainerListener[] var8 = var2.getContainerListeners();
    var2.removeNotify();
    boolean var10 = var2.requestFocusInWindow();
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var12 = var11.getPreferredSize();
    java.awt.image.ColorModel var13 = var11.getColorModel();
    var11.updateUI();
    java.lang.String var15 = var11.toString();
    boolean var16 = var11.getInheritsPopupMenu();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    javax.swing.JPanel var19 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var17.setNextFocusableComponent((java.awt.Component)var19);
    java.util.Locale var21 = var19.getLocale();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    java.awt.Dimension var24 = var19.getSize(var23);
    var11.setSize(var23);
    java.awt.Dimension var26 = var2.getSize(var23);
    var2.show(true);
    org.jfree.chart.plot.ThermometerPlot var30 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var31 = var30.isDomainZoomable();
    int var32 = var30.getAxisLocation();
    org.jfree.chart.StandardChartTheme var35 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    org.jfree.chart.plot.DrawingSupplier var36 = var35.getDrawingSupplier();
    org.jfree.chart.plot.dial.StandardDialScale var37 = new org.jfree.chart.plot.dial.StandardDialScale();
    var37.setMajorTickIncrement(10.0d);
    java.awt.Paint var40 = var37.getMinorTickPaint();
    var35.setTickLabelPaint(var40);
    java.awt.Font var42 = var35.getSmallFont();
    var30.setValueFont(var42);
    org.jfree.chart.block.LabelBlock var44 = new org.jfree.chart.block.LabelBlock("100", var42);
    var2.setFont(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var15,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var15.equals("org.jfree.chart.ChartPanel[,0,0,0var15,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test166() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test166"); }


    org.jfree.chart.renderer.xy.XYBarRenderer var1 = new org.jfree.chart.renderer.xy.XYBarRenderer(100.0d);
    boolean var2 = var1.getShadowsVisible();
    boolean var3 = var1.getUseYInterval();
    double var4 = var1.getBarAlignmentFactor();
    org.jfree.chart.labels.HighLowItemLabelGenerator var5 = new org.jfree.chart.labels.HighLowItemLabelGenerator();
    org.jfree.data.time.TimeTableXYDataset var6 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var8 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var9 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var8);
    var6.remove((org.jfree.data.time.TimePeriod)var8, (java.lang.Comparable)100, false);
    org.jfree.data.xy.XYBarDataset var14 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var6, Double.NaN);
    java.lang.Object var15 = var14.clone();
    java.lang.String var18 = var5.generateToolTip((org.jfree.data.xy.XYDataset)var14, 1043495433, 0);
    java.lang.Object var19 = var14.clone();
    boolean var20 = var1.equals(var19);
    boolean var21 = var1.getAutoPopulateSeriesPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test167() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test167"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var1 = var0.getDomainCrosshairColumnKey();
    var0.setCrosshairDatasetIndex(100);
    org.jfree.chart.axis.CategoryAnchor var4 = var0.getDomainGridlinePosition();
    java.lang.String var5 = var4.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "CategoryAnchor.MIDDLE"+ "'", var5.equals("CategoryAnchor.MIDDLE"));

  }

  public void test168() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test168"); }


    org.jfree.chart.renderer.xy.HighLowRenderer var0 = new org.jfree.chart.renderer.xy.HighLowRenderer();
    java.awt.Paint var1 = var0.getCloseTickPaint();
    var0.setDrawOpenTicks(true);
    var0.setDrawCloseTicks(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);

  }

  public void test169() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test169"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryMarker var2 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var3 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var5 = var3.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var8 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var9 = var8.getTickLabelPaint();
    var3.setFillPaint(var9, true);
    var2.setLabelPaint(var9);
    var0.setDomainGridlinePaint(var9);
    var0.clearDomainMarkers();
    org.jfree.chart.axis.AxisSpace var15 = new org.jfree.chart.axis.AxisSpace();
    var0.setFixedRangeAxisSpace(var15);
    java.lang.String var17 = var15.toString();
    double var18 = var15.getLeft();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 0.0d);

  }

  public void test170() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test170"); }


    org.jfree.data.general.WaferMapDataset var3 = new org.jfree.data.general.WaferMapDataset(20, 2147483647, (java.lang.Number)0.3d);

  }

  public void test171() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test171"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var2 = var0.findDomainBounds((org.jfree.data.xy.XYDataset)var1);
    java.lang.Number var3 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset)var1);
    var1.add(100.0d, Double.NaN, "jfreechart-onetime-");
    var1.clear();
    int var10 = var1.getItemCount(8);
    boolean var11 = var1.isAutoWidth();
    var1.setIntervalWidth(100.0d);
    org.jfree.data.xy.IntervalXYDelegate var14 = new org.jfree.data.xy.IntervalXYDelegate((org.jfree.data.xy.XYDataset)var1);
    double var15 = var14.getIntervalPositionFactor();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var14.setIntervalPositionFactor(175.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + Double.NaN+ "'", var3.equals(Double.NaN));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5d);

  }

  public void test172() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test172"); }


    org.jfree.chart.axis.CyclicNumberAxis var2 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var3 = var2.isAxisLineVisible();
    var2.setAdvanceLineVisible(false);
    var2.centerRange(3.0d);
    java.awt.Shape var8 = var2.getUpArrow();
    var2.setFixedAutoRange(0.025d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test173() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test173"); }


    org.jfree.data.xy.XIntervalSeries var1 = new org.jfree.data.xy.XIntervalSeries((java.lang.Comparable)4.0d);
    java.lang.String var2 = var1.getDescription();
    int var3 = var1.getItemCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0);

  }

  public void test174() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test174"); }


    org.jfree.chart.plot.GreyPalette var0 = new org.jfree.chart.plot.GreyPalette();
    double var1 = var0.getMaxZ();
    org.jfree.chart.editor.PaletteSample var2 = new org.jfree.chart.editor.PaletteSample((org.jfree.chart.plot.ColorPalette)var0);
    double[] var3 = var0.getTickValues();
    double[] var6 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var7 = new org.jfree.chart.annotations.XYPolygonAnnotation(var6);
    org.jfree.chart.annotations.XYPolygonAnnotation var8 = new org.jfree.chart.annotations.XYPolygonAnnotation(var6);
    var0.setTickValues(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test175() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test175"); }


    org.jfree.chart.block.BlockContainer var0 = new org.jfree.chart.block.BlockContainer();
    org.jfree.chart.renderer.xy.XYBlockRenderer var1 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var2 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var3 = var1.findDomainBounds((org.jfree.data.xy.XYDataset)var2);
    org.jfree.chart.renderer.category.BarRenderer3D var6 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var7 = var6.getItemLabelFont();
    double var8 = var6.getItemLabelAnchorOffset();
    org.jfree.chart.labels.ItemLabelPosition var11 = var6.getNegativeItemLabelPosition(0, 0);
    double var12 = var11.getAngle();
    var1.setNegativeItemLabelPosition(var11);
    org.jfree.chart.labels.XYSeriesLabelGenerator var14 = var1.getLegendItemToolTipGenerator();
    org.jfree.chart.title.LegendTitle var15 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var1);
    org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var17 = var16.getDomainCrosshairColumnKey();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var18.setUseSeriesOffset(true);
    var18.setBaseSeriesVisible(true);
    var18.setAutoPopulateSeriesShape(false);
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var25 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var18};
    var16.setRenderers(var25);
    var15.setSources((org.jfree.chart.LegendItemSource[])var25);
    org.jfree.ui.RectangleEdge var28 = var15.getPosition();
    var0.add((org.jfree.chart.block.Block)var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test176() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test176"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Paint var1 = var0.getRangeCrosshairPaint();
    var0.clearDomainMarkers(80);
    org.jfree.data.xy.DefaultXYZDataset var5 = new org.jfree.data.xy.DefaultXYZDataset();
    org.jfree.data.Range var7 = org.jfree.data.general.DatasetUtilities.iterateZBounds((org.jfree.data.xy.XYZDataset)var5, false);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var16 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.util.List var17 = var16.getSubplots();
    org.jfree.data.statistics.BoxAndWhiskerItem var18 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)(-2208960000000L), (java.lang.Number)Double.NaN, (java.lang.Number)51, (java.lang.Number)0.05d, (java.lang.Number)(byte)100, (java.lang.Number)2.0f, (java.lang.Number)15, (java.lang.Number)1.0f, var17);
    org.jfree.chart.axis.CyclicNumberAxis var21 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var22 = var21.isAxisLineVisible();
    var21.setAxisLineVisible(true);
    org.jfree.data.general.DefaultKeyedValues2DDataset var25 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var25.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var30 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.category.CategoryDataset)var25);
    var21.setDefaultAutoRange(var30);
    org.jfree.data.Range var32 = var21.getRange();
    org.jfree.data.Range var34 = org.jfree.data.general.DatasetUtilities.findZBounds((org.jfree.data.xy.XYZDataset)var5, var17, var32, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.mapDatasetToDomainAxes(3, var17);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test177() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test177"); }


    org.jfree.chart.plot.ContourPlot var0 = new org.jfree.chart.plot.ContourPlot();
    double var1 = var0.getDomainCrosshairValue();
    java.lang.String[] var4 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var5 = new org.jfree.chart.axis.SymbolAxis("hi!", var4);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var6 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var8 = var6.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var11 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var12 = var11.getTickLabelPaint();
    var6.setFillPaint(var12, true);
    var5.setGridBandAlternatePaint(var12);
    var0.setDomainAxis((org.jfree.chart.axis.ValueAxis)var5);
    var0.setRangeCrosshairVisible(false);
    double var19 = var0.getRangeCrosshairValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);

  }

  public void test178() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test178"); }


    org.jfree.data.function.NormalDistributionFunction2D var2 = new org.jfree.data.function.NormalDistributionFunction2D(0.0d, 0.2d);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    java.awt.Shape var7 = var5.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var9 = new org.jfree.chart.entity.ContourEntity(var7, "hi!?hi!=100&amp;hi!=1");
    var9.setToolTipText("0x00000001");
    boolean var12 = var2.equals((java.lang.Object)var9);
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var14 = var13.getLocation();
    java.awt.Dimension var15 = var13.preferredSize();
    java.awt.Rectangle var16 = var13.bounds();
    var13.setDoubleBuffered(true);
    var13.setEnabled(false);
    boolean var21 = var2.equals((java.lang.Object)var13);
    javax.swing.border.Border var22 = var13.getBorder();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.Point var23 = var13.getLocationOnScreen();
      fail("Expected exception of type java.awt.IllegalComponentStateException");
    } catch (java.awt.IllegalComponentStateException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);

  }

  public void test179() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test179"); }


    org.jfree.chart.renderer.category.StackedBarRenderer3D var3 = new org.jfree.chart.renderer.category.StackedBarRenderer3D(175.0d, 175.0d, true);

  }

  public void test180() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test180"); }


    org.jfree.chart.plot.dial.DialPlot var0 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var1 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var2 = var0.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var1);
    org.jfree.chart.plot.dial.DialValueIndicator var3 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var4 = var3.getInsets();
    int var5 = var0.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var3);
    org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis("0x00000000");
    boolean var9 = var7.isHiddenValue(0L);
    org.jfree.chart.axis.DateTickMarkPosition var10 = var7.getTickMarkPosition();
    boolean var11 = var0.equals((java.lang.Object)var7);
    java.lang.Object var12 = var7.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test181() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test181"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isCounterClockwise();
    var0.setRadiusGridlinesVisible(false);
    org.jfree.chart.plot.Plot var4 = var0.getRootPlot();
    org.jfree.chart.axis.ValueAxis var6 = var0.getAxisForDataset(1043495433);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test182() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test182"); }


    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow((org.jfree.data.category.CategoryDataset)var0, 10);
    int var4 = var0.getColumnIndex((java.lang.Comparable)"org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");
    org.jfree.data.time.Year var7 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var8 = new org.jfree.data.time.Month(1, var7);
    org.jfree.chart.util.HexNumberFormat var10 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var12 = var11.getPreferredSize();
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var11.setNextFocusableComponent((java.awt.Component)var13);
    java.util.Locale var15 = var13.getLocale();
    org.jfree.chart.axis.MonthDateFormat var16 = new org.jfree.chart.axis.MonthDateFormat(var15);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var17 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var10, (java.text.DateFormat)var16);
    boolean var18 = var7.equals((java.lang.Object)var16);
    org.jfree.chart.renderer.category.BarRenderer3D var21 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var22 = var21.getItemLabelFont();
    java.awt.Shape var23 = var21.getBaseLegendShape();
    boolean var24 = var7.equals((java.lang.Object)var21);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.remove((java.lang.Comparable)var24, (java.lang.Comparable)"hi!");
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test183() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test183"); }


    org.jfree.chart.renderer.category.GanttRenderer var0 = new org.jfree.chart.renderer.category.GanttRenderer();
    java.lang.String[] var3 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var4 = new org.jfree.chart.axis.SymbolAxis("hi!", var3);
    org.jfree.chart.plot.CompassPlot var5 = new org.jfree.chart.plot.CompassPlot();
    boolean var6 = var4.equals((java.lang.Object)var5);
    java.lang.String var7 = var5.getPlotType();
    java.awt.Paint var8 = var5.getRoseCenterPaint();
    var0.setIncompletePaint(var8);
    var0.setStartPercent(1.05d);
    org.jfree.chart.LegendItem var14 = var0.getLegendItem(2147483647, 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "Compass Plot"+ "'", var7.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);

  }

  public void test184() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test184"); }


    org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
    var1.setLinesVisible(true);
    boolean var4 = var1.getAutoPopulateSeriesShape();
    boolean var5 = var1.getUseOutlinePaint();
    java.lang.Boolean var7 = var1.getSeriesShapesVisible(4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);

  }

  public void test185() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test185"); }


    org.jfree.chart.renderer.OutlierListCollection var0 = new org.jfree.chart.renderer.OutlierListCollection();
    var0.setLowFarOut(true);

  }

  public void test186() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test186"); }


    org.jfree.data.function.PowerFunction2D var2 = new org.jfree.data.function.PowerFunction2D(180.0d, (-0.7853981633974483d));

  }

  public void test187() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test187"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isCounterClockwise();
    var0.setRadiusGridlinesVisible(false);
    int var4 = var0.getDatasetCount();
    boolean var5 = var0.isAngleGridlinesVisible();
    org.jfree.chart.plot.PolarPlot var6 = new org.jfree.chart.plot.PolarPlot();
    boolean var7 = var6.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var12 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var12.setUpperMargin(10.0d);
    var12.setAxisLineVisible(true);
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var18 = var17.getLocation();
    java.awt.Dimension var19 = var17.preferredSize();
    java.awt.Rectangle var20 = var17.bounds();
    java.awt.Point var21 = var6.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var12, (java.awt.geom.Rectangle2D)var20);
    org.jfree.chart.renderer.DefaultPolarItemRenderer var23 = new org.jfree.chart.renderer.DefaultPolarItemRenderer();
    var6.setRenderer(10, (org.jfree.chart.renderer.PolarItemRenderer)var23, true);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var28 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var29 = var28.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var30 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var31 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var28, (org.jfree.chart.urls.XYURLGenerator)var30);
    org.jfree.chart.renderer.xy.StandardXYItemRenderer var32 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, (org.jfree.chart.labels.XYToolTipGenerator)var28);
    java.text.NumberFormat var33 = var28.getYFormat();
    var23.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var28);
    int var35 = var0.getIndexOf((org.jfree.chart.renderer.PolarItemRenderer)var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == (-1));

  }

  public void test188() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test188"); }


    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var0.setUseSeriesOffset(true);
    java.awt.Paint var3 = var0.getErrorIndicatorPaint();
    org.jfree.chart.labels.CategoryToolTipGenerator var4 = var0.getBaseToolTipGenerator();
    var0.setSeriesItemLabelsVisible(5, (java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test189() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test189"); }


    org.jfree.chart.axis.CyclicNumberAxis var3 = new org.jfree.chart.axis.CyclicNumberAxis(1.0d, 4.0d, "");
    boolean var4 = var3.isAxisLineVisible();
    var3.setTickMarkOutsideLength(100.0f);
    boolean var7 = var3.getAutoRangeStickyZero();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test190() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test190"); }


    org.jfree.chart.StandardChartTheme var2 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var3 = var2.getLegendItemPaint();
    org.jfree.chart.plot.DrawingSupplier var4 = var2.getDrawingSupplier();
    org.jfree.chart.title.TextTitle var6 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var7 = var6.getMargin();
    var2.setAxisOffset(var7);
    org.jfree.chart.renderer.category.BarPainter var9 = var2.getBarPainter();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);

  }

  public void test191() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test191"); }


    org.jfree.chart.annotations.XYLineAnnotation var4 = new org.jfree.chart.annotations.XYLineAnnotation((-1.0d), (-1.0d), 100.0d, 100.0d);
    org.jfree.data.xy.DefaultIntervalXYDataset var5 = new org.jfree.data.xy.DefaultIntervalXYDataset();
    boolean var6 = var4.hasListener((java.util.EventListener)var5);
    int var7 = var5.getSeriesCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var10 = var5.getX(51, 1);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);

  }

  public void test192() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test192"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setOpaque(true);
    var0.requestFocus();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test193() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test193"); }


    org.jfree.chart.renderer.category.BarRenderer3D var0 = new org.jfree.chart.renderer.category.BarRenderer3D();
    var0.setDefaultEntityRadius((-1));
    org.jfree.chart.labels.CategoryToolTipGenerator var3 = var0.getBaseToolTipGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test194() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test194"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var11 = new org.jfree.chart.entity.ContourEntity(var9, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var14 = var13.isVisible();
    java.lang.Object var15 = var13.clone();
    java.lang.String var16 = var13.getURLText();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.image.ColorModel var19 = var17.getColorModel();
    var17.updateUI();
    java.lang.String var21 = var17.toString();
    java.awt.Color var22 = var17.getForeground();
    var13.setBackgroundPaint((java.awt.Paint)var22);
    int var24 = var22.getRGB();
    int var25 = var22.getBlue();
    org.jfree.chart.plot.dial.DialPlot var26 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var27 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var28 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var27);
    org.jfree.chart.plot.dial.DialValueIndicator var29 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var30 = var29.getInsets();
    int var31 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var29);
    java.awt.Stroke var32 = var29.getOutlineStroke();
    org.jfree.chart.title.TextTitle var34 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var35 = var34.isVisible();
    java.lang.Object var36 = var34.clone();
    java.lang.String var37 = var34.getURLText();
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.image.ColorModel var40 = var38.getColorModel();
    var38.updateUI();
    java.lang.String var42 = var38.toString();
    java.awt.Color var43 = var38.getForeground();
    var34.setBackgroundPaint((java.awt.Paint)var43);
    org.jfree.chart.LegendItem var45 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var9, (java.awt.Paint)var22, var32, (java.awt.Paint)var43);
    var0.setBaseSectionOutlinePaint((java.awt.Paint)var22);
    double var47 = var0.getLabelLinkMargin();
    javax.swing.JPanel var48 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var49 = var48.getPreferredSize();
    java.awt.image.ColorModel var50 = var48.getColorModel();
    var48.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Dimension var55 = var48.getMaximumSize();
    java.awt.Color var56 = var48.getBackground();
    var0.setBaseSectionOutlinePaint((java.awt.Paint)var56);
    org.jfree.chart.plot.dial.DialValueIndicator var58 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var59 = var58.getInsets();
    java.awt.Stroke var60 = var58.getOutlineStroke();
    javax.swing.JPanel var61 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var62 = var61.getPreferredSize();
    javax.swing.JPanel var63 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var61.setNextFocusableComponent((java.awt.Component)var63);
    java.util.Locale var65 = var63.getLocale();
    javax.swing.JPanel var66 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var67 = var66.getPreferredSize();
    java.awt.Dimension var68 = var63.getSize(var67);
    java.awt.event.ContainerListener[] var69 = var63.getContainerListeners();
    javax.swing.JPanel var70 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var71 = var70.getPreferredSize();
    java.awt.image.ColorModel var72 = var70.getColorModel();
    var70.updateUI();
    java.lang.String var74 = var70.toString();
    java.awt.Color var75 = var70.getForeground();
    var63.setBackground(var75);
    var58.setOutlinePaint((java.awt.Paint)var75);
    java.awt.Color var78 = var75.brighter();
    float[] var82 = new float[] { 10.0f, 100.0f, 1.0f};
    float[] var83 = var75.getRGBColorComponents(var82);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      float[] var84 = var56.getComponents(var83);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.025d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var74 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var74,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var74.equals("org.jfree.chart.ChartPanel[,0,0,0var74,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test195() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test195"); }


    org.jfree.chart.util.HexNumberFormat var2 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var3.setNextFocusableComponent((java.awt.Component)var5);
    java.util.Locale var7 = var5.getLocale();
    org.jfree.chart.axis.MonthDateFormat var8 = new org.jfree.chart.axis.MonthDateFormat(var7);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var9 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var2, (java.text.DateFormat)var8);
    org.jfree.chart.util.HexNumberFormat var11 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var13 = var12.getPreferredSize();
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var12.setNextFocusableComponent((java.awt.Component)var14);
    java.util.Locale var16 = var14.getLocale();
    org.jfree.chart.axis.MonthDateFormat var17 = new org.jfree.chart.axis.MonthDateFormat(var16);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var18 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var11, (java.text.DateFormat)var17);
    org.jfree.chart.labels.StandardPieSectionLabelGenerator var19 = new org.jfree.chart.labels.StandardPieSectionLabelGenerator("Combined Range XYPlot", (java.text.NumberFormat)var2, (java.text.NumberFormat)var11);
    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var20 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    org.jfree.data.general.PieDataset var22 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow((org.jfree.data.category.CategoryDataset)var20, 10);
    double var23 = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(var22);
    org.jfree.data.time.Week var25 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var26 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var25);
    org.jfree.data.time.TimePeriodValue var28 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var25, (java.lang.Number)10);
    org.jfree.data.time.ohlc.OHLCItem var33 = new org.jfree.data.time.ohlc.OHLCItem((org.jfree.data.time.RegularTimePeriod)var25, 100.0d, 0.0d, 0.05d, 0.0d);
    int var34 = var25.getYearValue();
    java.text.AttributedString var35 = var19.generateAttributedSectionLabel(var22, (java.lang.Comparable)var34);
    org.jfree.chart.urls.CustomPieURLGenerator var36 = new org.jfree.chart.urls.CustomPieURLGenerator();
    java.lang.String var39 = var36.getURL((java.lang.Comparable)2.0d, 4);
    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var40 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    org.jfree.data.general.PieDataset var42 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow((org.jfree.data.category.CategoryDataset)var40, 10);
    java.lang.String var45 = var36.generateURL(var42, (java.lang.Comparable)"org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", 2013);
    java.text.AttributedString var47 = var19.generateAttributedSectionLabel(var42, (java.lang.Comparable)(-2208960000000L));
    
    // Checks the contract:  equals-hashcode on var20 and var40
    assertTrue("Contract failed: equals-hashcode on var20 and var40", var20.equals(var40) ? var20.hashCode() == var40.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var40 and var20
    assertTrue("Contract failed: equals-hashcode on var40 and var20", var40.equals(var20) ? var40.hashCode() == var20.hashCode() : true);

  }

  public void test196() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test196"); }


    org.jfree.chart.plot.ThermometerPlot var1 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var2 = var1.isDomainZoomable();
    int var3 = var1.getAxisLocation();
    org.jfree.chart.StandardChartTheme var6 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    org.jfree.chart.plot.DrawingSupplier var7 = var6.getDrawingSupplier();
    org.jfree.chart.plot.dial.StandardDialScale var8 = new org.jfree.chart.plot.dial.StandardDialScale();
    var8.setMajorTickIncrement(10.0d);
    java.awt.Paint var11 = var8.getMinorTickPaint();
    var6.setTickLabelPaint(var11);
    java.awt.Font var13 = var6.getSmallFont();
    var1.setValueFont(var13);
    org.jfree.chart.block.LabelBlock var15 = new org.jfree.chart.block.LabelBlock("100", var13);
    java.lang.Object var16 = var15.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test197() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test197"); }


    org.jfree.data.time.TimePeriodValues var3 = new org.jfree.data.time.TimePeriodValues("Compass Plot", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");
    var3.setRangeDescription("d");
    org.jfree.data.time.Week var7 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var8 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var7);
    org.jfree.data.time.TimePeriodValue var10 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var7, (java.lang.Number)10);
    java.lang.Object var11 = var10.clone();
    org.jfree.data.time.TimePeriod var12 = var10.getPeriod();
    org.jfree.data.time.TimePeriod var13 = var10.getPeriod();
    var3.add(var10);
    int var15 = var3.getMinMiddleIndex();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0);

  }

  public void test198() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test198"); }


    org.jfree.chart.renderer.category.ScatterRenderer var0 = new org.jfree.chart.renderer.category.ScatterRenderer();
    var0.setItemMargin(0.2d);
    boolean var3 = var0.getUseFillPaint();
    boolean var4 = var0.getUseFillPaint();
    boolean var5 = var0.getUseFillPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test199() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test199"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    java.awt.Paint var17 = var0.getQuadrantPaint(1);
    org.jfree.chart.axis.CyclicNumberAxis var20 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var21 = var20.isAxisLineVisible();
    var20.setAxisLineVisible(true);
    var20.setMinorTickMarksVisible(true);
    org.jfree.chart.plot.CombinedRangeXYPlot var26 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var27 = var26.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CombinedRangeXYPlot var28 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var29 = var28.getRangeZeroBaselineStroke();
    var26.setRangeGridlineStroke(var29);
    var26.setDomainMinorGridlinesVisible(true);
    var26.setRangeZeroBaselineVisible(true);
    var20.setPlot((org.jfree.chart.plot.Plot)var26);
    var0.setDomainAxis((org.jfree.chart.axis.ValueAxis)var20);
    var0.mapDatasetToRangeAxis(2013, 2013);
    org.jfree.chart.axis.ValueAxis var40 = var0.getRangeAxis();
    boolean var41 = var0.isDomainMinorGridlinesVisible();
    org.jfree.chart.plot.ThermometerPlot var42 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var43 = var42.isDomainZoomable();
    int var44 = var42.getAxisLocation();
    org.jfree.chart.plot.PlotOrientation var45 = var42.getOrientation();
    var0.setOrientation(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);

  }

  public void test200() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test200"); }


    java.lang.String[] var2 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
    var3.setLabelAngle(0.0d);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var8 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var11 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var12 = var11.getItemLabelFont();
    double var13 = var11.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var16 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var17 = var16.getItemLabelFont();
    java.awt.Shape var18 = var16.getBaseLegendShape();
    var11.setShape(var18);
    var8.setLegendBar(var18);
    org.jfree.data.general.DefaultKeyedValues2DDataset var23 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var26 = new org.jfree.chart.entity.CategoryItemEntity(var18, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var23, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.chart.plot.CombinedRangeXYPlot var27 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var28 = var27.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CategoryMarker var30 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var31 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var33 = var31.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var36 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var37 = var36.getTickLabelPaint();
    var31.setFillPaint(var37, true);
    var30.setLabelPaint(var37);
    org.jfree.chart.annotations.XYShapeAnnotation var41 = new org.jfree.chart.annotations.XYShapeAnnotation(var18, var28, var37);
    var3.setAxisLineStroke(var28);
    var3.setGridBandsVisible(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);

  }

  public void test201() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test201"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CombinedRangeXYPlot var2 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var3 = var2.getRangeZeroBaselineStroke();
    var0.setRangeGridlineStroke(var3);
    var0.setDomainMinorGridlinesVisible(true);
    org.jfree.chart.axis.AxisSpace var7 = new org.jfree.chart.axis.AxisSpace();
    double var8 = var7.getBottom();
    var0.setFixedDomainAxisSpace(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.0d);

  }

  public void test202() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test202"); }


    org.jfree.chart.title.DateTitle var0 = new org.jfree.chart.title.DateTitle();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var2.setNextFocusableComponent((java.awt.Component)var4);
    java.util.Locale var6 = var4.getLocale();
    java.text.NumberFormat var7 = java.text.NumberFormat.getIntegerInstance(var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.setDateFormat((-2), var6);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test203() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test203"); }


    java.lang.Number[][] var0 = new java.lang.Number[][] { };
    java.lang.Number[][] var1 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var2 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var0, var1);
    java.lang.Number[][] var3 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var4 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var0, var3);
    
    // Checks the contract:  equals-hashcode on var2 and var4
    assertTrue("Contract failed: equals-hashcode on var2 and var4", var2.equals(var4) ? var2.hashCode() == var4.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var4 and var2
    assertTrue("Contract failed: equals-hashcode on var4 and var2", var4.equals(var2) ? var4.hashCode() == var2.hashCode() : true);

  }

  public void test204() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test204"); }


    org.jfree.chart.plot.XYCrosshairState var0 = new org.jfree.chart.plot.XYCrosshairState();
    var0.setAnchorX(360.0d);
    var0.setCrosshairY(2.0d);
    var0.setAnchorY((-170.0d));

  }

  public void test205() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test205"); }


    org.jfree.chart.plot.dial.DialPlot var0 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var1 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var2 = var0.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var1);
    var1.setTickLabelsVisible(false);
    org.jfree.chart.plot.dial.DialPlot var5 = new org.jfree.chart.plot.dial.DialPlot();
    double var6 = var5.getViewWidth();
    org.jfree.chart.plot.dial.DialScale var8 = var5.getScaleForDataset(1);
    var1.addChangeListener((org.jfree.chart.plot.dial.DialLayerChangeListener)var5);
    org.jfree.chart.plot.dial.DialCap var10 = new org.jfree.chart.plot.dial.DialCap();
    java.awt.Paint var11 = var10.getOutlinePaint();
    double var12 = var10.getRadius();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var5.removeLayer((org.jfree.chart.plot.dial.DialLayer)var10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.05d);

  }

  public void test206() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test206"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    org.jfree.chart.axis.ValueAxis var1 = var0.getRangeAxis();
    java.lang.Object var2 = var0.clone();
    var0.setSubrange((-334), (-90.0d), 5.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test207() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test207"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var6 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var6.setUpperMargin(10.0d);
    var6.setAxisLineVisible(true);
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var12 = var11.getLocation();
    java.awt.Dimension var13 = var11.preferredSize();
    java.awt.Rectangle var14 = var11.bounds();
    java.awt.Point var15 = var0.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var6, (java.awt.geom.Rectangle2D)var14);
    org.jfree.chart.renderer.PolarItemRenderer var16 = var0.getRenderer();
    java.awt.Paint var17 = var0.getRadiusGridlinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test208() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test208"); }


    org.jfree.chart.axis.CyclicNumberAxis var2 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var2.setVisible(false);
    boolean var5 = var2.isAdvanceLineVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);

  }

  public void test209() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test209"); }


    org.jfree.chart.renderer.xy.DeviationRenderer var2 = new org.jfree.chart.renderer.xy.DeviationRenderer(true, true);
    java.awt.Shape var4 = var2.getSeriesShape(52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);

  }

  public void test210() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test210"); }


    org.jfree.data.xy.DefaultXYZDataset var0 = new org.jfree.data.xy.DefaultXYZDataset();
    org.jfree.chart.axis.CategoryLabelPositions var2 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var5 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var6 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var5);
    org.jfree.data.time.TimePeriodValue var8 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var5, (java.lang.Number)10);
    var3.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var10 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var12 = var10.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var15 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var16 = var15.getTickLabelPaint();
    var10.setFillPaint(var16, true);
    var3.setDomainCrosshairPaint(var16);
    boolean var20 = var2.equals((java.lang.Object)var3);
    org.jfree.ui.RectangleEdge var21 = var3.getRangeAxisEdge();
    org.jfree.chart.axis.SubCategoryAxis var23 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    int var24 = var3.getDomainAxisIndex((org.jfree.chart.axis.CategoryAxis)var23);
    boolean var25 = var3.isDomainCrosshairVisible();
    var0.addChangeListener((org.jfree.data.general.DatasetChangeListener)var3);
    org.jfree.chart.plot.CombinedRangeXYPlot var27 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var28 = var27.getRangeZeroBaselineStroke();
    java.lang.String var29 = var27.getPlotType();
    org.jfree.chart.plot.CategoryMarker var31 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var32 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var34 = var32.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var37 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var38 = var37.getTickLabelPaint();
    var32.setFillPaint(var38, true);
    var31.setLabelPaint(var38);
    boolean var42 = var27.removeRangeMarker((org.jfree.chart.plot.Marker)var31);
    javax.swing.JPanel var43 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var44 = var43.getPreferredSize();
    java.awt.image.ColorModel var45 = var43.getColorModel();
    var43.updateUI();
    java.lang.String var47 = var43.toString();
    boolean var48 = var43.getInheritsPopupMenu();
    double[] var51 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var52 = new org.jfree.chart.annotations.XYPolygonAnnotation(var51);
    java.lang.Object var53 = var52.clone();
    org.jfree.chart.event.AnnotationChangeEvent var54 = new org.jfree.chart.event.AnnotationChangeEvent((java.lang.Object)var43, (org.jfree.chart.annotations.Annotation)var52);
    var27.annotationChanged(var54);
    org.jfree.chart.annotations.Annotation var56 = var54.getAnnotation();
    var3.annotationChanged(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "Combined Range XYPlot"+ "'", var29.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var47,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var47.equals("org.jfree.chart.ChartPanel[,0,0,0var47,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);

  }

  public void test211() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test211"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var0 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var3 = var0.getMedianValue((-2), (-2));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test212() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test212"); }


    org.jfree.data.time.TimeTableXYDataset var0 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    var0.remove((org.jfree.data.time.TimePeriod)var2, (java.lang.Comparable)100, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var9 = var0.getX(19, 80);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test213() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test213"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setNextFocusableComponent((java.awt.Component)var2);
    javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var5 = var4.getPreferredSize();
    java.awt.image.ColorModel var6 = var4.getColorModel();
    var4.firePropertyChange("", 0.0f, 0.0f);
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var12 = var11.getLocation();
    java.awt.Point var13 = var4.getLocation(var12);
    java.awt.Component var14 = var0.findComponentAt(var12);
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var17 = var16.getPreferredSize();
    javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var16.setNextFocusableComponent((java.awt.Component)var18);
    java.util.Locale var20 = var18.getLocale();
    javax.swing.JPanel var21 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var22 = var21.getPreferredSize();
    java.awt.Dimension var23 = var18.getSize(var22);
    java.awt.event.ContainerListener[] var24 = var18.getContainerListeners();
    javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var26 = var25.getPreferredSize();
    java.awt.image.ColorModel var27 = var25.getColorModel();
    var25.updateUI();
    java.lang.String var29 = var25.toString();
    java.awt.Color var30 = var25.getForeground();
    var18.setBackground(var30);
    var18.addNotify();
    java.awt.Component var33 = var0.add("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (java.awt.Component)var18);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var34 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var36 = var34.getSeriesLinesVisible(10);
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    boolean var40 = var38.getIgnoreRepaint();
    boolean var41 = var38.isLightweight();
    javax.swing.JPanel var42 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var43 = var42.getPreferredSize();
    javax.swing.JPanel var44 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var42.setNextFocusableComponent((java.awt.Component)var44);
    var42.show();
    javax.swing.JPanel var47 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var48 = var47.getLocation();
    java.awt.Dimension var49 = var47.preferredSize();
    java.awt.Rectangle var50 = var47.bounds();
    var42.scrollRectToVisible(var50);
    var38.setBounds(var50);
    var34.setSeriesShape(15, (java.awt.Shape)var50);
    var0.paintImmediately(var50);
    java.awt.peer.ComponentPeer var55 = var0.getPeer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var29.equals("org.jfree.chart.ChartPanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);

  }

  public void test214() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test214"); }


    java.text.DateFormat var0 = java.text.DateFormat.getDateInstance();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);

  }

  public void test215() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test215"); }


    org.jfree.chart.renderer.xy.XYAreaRenderer2 var0 = new org.jfree.chart.renderer.xy.XYAreaRenderer2();
    org.jfree.data.statistics.MeanAndStandardDeviation var3 = new org.jfree.data.statistics.MeanAndStandardDeviation((java.lang.Number)0.02d, (java.lang.Number)1.0d);
    double var4 = var3.getMeanValue();
    boolean var5 = var0.equals((java.lang.Object)var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.02d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);

  }

  public void test216() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test216"); }


    org.jfree.chart.axis.CyclicNumberAxis var2 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var2.setVisible(false);
    org.jfree.chart.plot.CombinedRangeXYPlot var5 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var6 = var5.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var8 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var9 = var8.getMargin();
    var5.setAxisOffset(var9);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var13 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var16 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var17 = var16.getItemLabelFont();
    double var18 = var16.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var21 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var22 = var21.getItemLabelFont();
    java.awt.Shape var23 = var21.getBaseLegendShape();
    var16.setShape(var23);
    var13.setLegendBar(var23);
    org.jfree.data.general.DefaultKeyedValues2DDataset var28 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var31 = new org.jfree.chart.entity.CategoryItemEntity(var23, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var28, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.chart.plot.CombinedRangeXYPlot var32 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var33 = var32.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CategoryMarker var35 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var36 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var38 = var36.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var41 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var42 = var41.getTickLabelPaint();
    var36.setFillPaint(var42, true);
    var35.setLabelPaint(var42);
    org.jfree.chart.annotations.XYShapeAnnotation var46 = new org.jfree.chart.annotations.XYShapeAnnotation(var23, var33, var42);
    var5.setRangeCrosshairPaint(var42);
    var2.setAdvanceLinePaint(var42);
    var2.setAutoRangeIncludesZero(false);
    org.jfree.chart.plot.CategoryPlot var51 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var52 = var51.getDomainCrosshairColumnKey();
    java.awt.Stroke var53 = var51.getRangeZeroBaselineStroke();
    boolean var54 = var2.equals((java.lang.Object)var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);

  }

  public void test217() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test217"); }


    org.jfree.chart.renderer.category.DefaultCategoryItemRenderer var0 = new org.jfree.chart.renderer.category.DefaultCategoryItemRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = var0.getSeriesItemURLGenerator(2147483647);
    boolean var3 = var0.getBaseShapesVisible();
    java.lang.String[] var6 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var7 = new org.jfree.chart.axis.SymbolAxis("hi!", var6);
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    double var12 = var10.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var15 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var16 = var15.getItemLabelFont();
    java.awt.Shape var17 = var15.getBaseLegendShape();
    var10.setShape(var17);
    var7.setDownArrow(var17);
    javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var21 = var20.getPreferredSize();
    java.awt.image.ColorModel var22 = var20.getColorModel();
    var20.updateUI();
    java.lang.String var24 = var20.toString();
    boolean var25 = var20.getInheritsPopupMenu();
    javax.swing.InputMap var26 = var20.getInputMap();
    var20.nextFocus();
    boolean var28 = var20.getInheritsPopupMenu();
    javax.swing.JPanel var29 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var30 = var29.getPreferredSize();
    java.awt.image.ColorModel var31 = var29.getColorModel();
    var29.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var36 = var29.getForeground();
    var20.setForeground(var36);
    var7.setGridBandAlternatePaint((java.awt.Paint)var36);
    var0.setBaseItemLabelPaint((java.awt.Paint)var36, false);
    java.lang.Object var41 = var0.clone();
    var0.setSeriesShapesVisible(1024, (java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var24,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var24.equals("org.jfree.chart.ChartPanel[,0,0,0var24,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test218() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test218"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    org.jfree.chart.plot.dial.DialValueIndicator var19 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var20 = var19.getInsets();
    java.awt.Stroke var21 = var19.getOutlineStroke();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var19.setOutlinePaint((java.awt.Paint)var36);
    java.awt.Color var39 = var36.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    double var45 = var42.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var46 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var47 = var46.getRangeZeroBaselineStroke();
    var42.setStroke(var47, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var50 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var51 = var50.isOutline();
    var50.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var56 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var57 = var56.getLegendItemPaint();
    var50.setShapePaint(var57);
    org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var16, (java.awt.Paint)var39, var47, var57);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var60 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var60.setBaseSeriesVisible(true, true);
    java.awt.Paint var64 = var60.getBasePaint();
    var59.setOutlinePaint(var64);
    org.jfree.chart.needle.PinNeedle var66 = new org.jfree.chart.needle.PinNeedle();
    org.jfree.chart.plot.CategoryPlot var67 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var69 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var70 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var69);
    org.jfree.data.time.TimePeriodValue var72 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var69, (java.lang.Number)10);
    var67.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var74 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var76 = var74.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var79 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var80 = var79.getTickLabelPaint();
    var74.setFillPaint(var80, true);
    var67.setDomainCrosshairPaint(var80);
    var66.setOutlinePaint(var80);
    org.jfree.chart.event.RendererChangeEvent var85 = new org.jfree.chart.event.RendererChangeEvent((java.lang.Object)var66);
    double var86 = var66.getRotateY();
    boolean var87 = var59.equals((java.lang.Object)var86);
    int var88 = var59.getDatasetIndex();
    java.lang.Object var89 = var59.clone();
    boolean var90 = var59.isShapeOutlineVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0.5d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var90 == true);

  }

  public void test219() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test219"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    int var1 = var0.getAxisCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 1);

  }

  public void test220() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test220"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    org.jfree.chart.plot.dial.DialValueIndicator var19 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var20 = var19.getInsets();
    java.awt.Stroke var21 = var19.getOutlineStroke();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var19.setOutlinePaint((java.awt.Paint)var36);
    java.awt.Color var39 = var36.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    double var45 = var42.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var46 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var47 = var46.getRangeZeroBaselineStroke();
    var42.setStroke(var47, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var50 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var51 = var50.isOutline();
    var50.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var56 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var57 = var56.getLegendItemPaint();
    var50.setShapePaint(var57);
    org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var16, (java.awt.Paint)var39, var47, var57);
    var59.setShapeVisible(false);
    java.awt.Paint var62 = var59.getLabelPaint();
    boolean var63 = var59.isLineVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var63 == false);

  }

  public void test221() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test221"); }


    org.jfree.chart.plot.GreyPalette var0 = new org.jfree.chart.plot.GreyPalette();
    double var1 = var0.getMaxZ();
    org.jfree.chart.editor.PaletteSample var2 = new org.jfree.chart.editor.PaletteSample((org.jfree.chart.plot.ColorPalette)var0);
    var2.setFocusTraversalKeysEnabled(false);
    org.jfree.chart.plot.GreyPalette var5 = new org.jfree.chart.plot.GreyPalette();
    var2.setPalette((org.jfree.chart.plot.ColorPalette)var5);
    org.jfree.chart.plot.ColorPalette var7 = var2.getPalette();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test222() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test222"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    org.jfree.chart.axis.ValueAxis var1 = var0.getRangeAxis();
    java.awt.Paint var3 = var0.getSubrangePaint(52);
    org.jfree.chart.renderer.xy.XYShapeRenderer var4 = new org.jfree.chart.renderer.xy.XYShapeRenderer();
    org.jfree.chart.axis.CyclicNumberAxis var7 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var8 = var7.isAxisLineVisible();
    var7.setAxisLineVisible(true);
    var7.setMinorTickMarksVisible(true);
    org.jfree.ui.RectangleInsets var13 = var7.getTickLabelInsets();
    boolean var14 = var4.equals((java.lang.Object)var7);
    org.jfree.chart.axis.TickUnits var15 = new org.jfree.chart.axis.TickUnits();
    java.lang.Object var16 = var15.clone();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var19 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var22 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var23 = var22.getItemLabelFont();
    double var24 = var22.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var27 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var28 = var27.getItemLabelFont();
    java.awt.Shape var29 = var27.getBaseLegendShape();
    var22.setShape(var29);
    var19.setLegendBar(var29);
    org.jfree.data.general.DefaultKeyedValues2DDataset var34 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var37 = new org.jfree.chart.entity.CategoryItemEntity(var29, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var34, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    var37.setToolTipText("Combined Range XYPlot");
    boolean var40 = var15.equals((java.lang.Object)"Combined Range XYPlot");
    var7.setStandardTickUnits((org.jfree.chart.axis.TickUnitSource)var15);
    var0.setRangeAxis((org.jfree.chart.axis.ValueAxis)var7);
    int var43 = var0.getUnits();
    org.jfree.chart.annotations.XYBoxAnnotation var48 = new org.jfree.chart.annotations.XYBoxAnnotation(4.0d, 0.04d, 0.0d, 0.0d);
    boolean var49 = var0.equals((java.lang.Object)0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var49 == false);

  }

  public void test223() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test223"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var1 = var0.isDomainZoomable();
    var0.setSubrangeInfo(20, 0.04d, 0.04d, 2.0d, 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);

  }

  public void test224() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test224"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    double var4 = var2.getItemLabelAnchorOffset();
    org.jfree.chart.labels.ItemLabelPosition var7 = var2.getNegativeItemLabelPosition(0, 0);
    var2.setShadowXOffset((-0.21460183660255172d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test225() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test225"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    double var4 = var2.getItemLabelAnchorOffset();
    java.lang.String[] var8 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var9 = new org.jfree.chart.axis.SymbolAxis("hi!", var8);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var10 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var12 = var10.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var15 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var16 = var15.getTickLabelPaint();
    var10.setFillPaint(var16, true);
    var9.setGridBandAlternatePaint(var16);
    var2.setSeriesFillPaint(2013, var16, false);
    org.jfree.chart.title.LegendTitle var22 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test226() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test226"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    org.jfree.chart.plot.dial.DialValueIndicator var19 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var20 = var19.getInsets();
    java.awt.Stroke var21 = var19.getOutlineStroke();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var19.setOutlinePaint((java.awt.Paint)var36);
    java.awt.Color var39 = var36.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    double var45 = var42.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var46 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var47 = var46.getRangeZeroBaselineStroke();
    var42.setStroke(var47, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var50 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var51 = var50.isOutline();
    var50.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var56 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var57 = var56.getLegendItemPaint();
    var50.setShapePaint(var57);
    org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var16, (java.awt.Paint)var39, var47, var57);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var60 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var60.setBaseSeriesVisible(true, true);
    java.awt.Paint var64 = var60.getBasePaint();
    var59.setOutlinePaint(var64);
    org.jfree.chart.needle.PinNeedle var66 = new org.jfree.chart.needle.PinNeedle();
    org.jfree.chart.plot.CategoryPlot var67 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var69 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var70 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var69);
    org.jfree.data.time.TimePeriodValue var72 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var69, (java.lang.Number)10);
    var67.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var74 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var76 = var74.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var79 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var80 = var79.getTickLabelPaint();
    var74.setFillPaint(var80, true);
    var67.setDomainCrosshairPaint(var80);
    var66.setOutlinePaint(var80);
    org.jfree.chart.event.RendererChangeEvent var85 = new org.jfree.chart.event.RendererChangeEvent((java.lang.Object)var66);
    double var86 = var66.getRotateY();
    boolean var87 = var59.equals((java.lang.Object)var86);
    int var88 = var59.getDatasetIndex();
    java.lang.Object var89 = var59.clone();
    java.lang.String var90 = var59.getURLText();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var86 == 0.5d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var87 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var88 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var89);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var90 + "' != '" + "jfreechart-onetime-"+ "'", var90.equals("jfreechart-onetime-"));

  }

  public void test227() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test227"); }


    org.jfree.data.general.DefaultHeatMapDataset var6 = new org.jfree.data.general.DefaultHeatMapDataset(8, 20, 0.5d, 0.75d, 10.0d, (-0.21460183660255172d));
    double var7 = var6.getMinimumYValue();
    boolean var9 = var6.equals((java.lang.Object)0.04d);
    double var10 = var6.getMaximumXValue();
    double var11 = var6.getMaximumYValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.75d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-0.21460183660255172d));

  }

  public void test228() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test228"); }


    java.lang.String[] var2 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
    org.jfree.chart.renderer.category.BarRenderer3D var6 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var7 = var6.getItemLabelFont();
    double var8 = var6.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var11 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var12 = var11.getItemLabelFont();
    java.awt.Shape var13 = var11.getBaseLegendShape();
    var6.setShape(var13);
    var3.setDownArrow(var13);
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var17 = var16.getPreferredSize();
    java.awt.image.ColorModel var18 = var16.getColorModel();
    var16.updateUI();
    java.lang.String var20 = var16.toString();
    boolean var21 = var16.getInheritsPopupMenu();
    javax.swing.InputMap var22 = var16.getInputMap();
    var16.nextFocus();
    boolean var24 = var16.getInheritsPopupMenu();
    javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var26 = var25.getPreferredSize();
    java.awt.image.ColorModel var27 = var25.getColorModel();
    var25.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var32 = var25.getForeground();
    var16.setForeground(var32);
    var3.setGridBandAlternatePaint((java.awt.Paint)var32);
    org.jfree.data.time.DateRange var35 = new org.jfree.data.time.DateRange();
    var3.setRange((org.jfree.data.Range)var35, false, false);
    java.lang.String var39 = var35.toString();
    org.jfree.data.Range var42 = org.jfree.data.Range.expand((org.jfree.data.Range)var35, 0.05d, 0.25d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var20.equals("org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[Dec 31, 1969 4:00:00 PM --> Dec 31, 1969 4:00:00 PM]"+ "'", var39.equals("[Dec 31, 1969 4:00:00 PM --> Dec 31, 1969 4:00:00 PM]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);

  }

  public void test229() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test229"); }


    org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var2.clear();
    boolean var4 = var2.getAutoSort();
    org.jfree.chart.plot.PolarPlot var5 = new org.jfree.chart.plot.PolarPlot();
    boolean var6 = var5.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var11 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var11.setUpperMargin(10.0d);
    var11.setAxisLineVisible(true);
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var17 = var16.getLocation();
    java.awt.Dimension var18 = var16.preferredSize();
    java.awt.Rectangle var19 = var16.bounds();
    java.awt.Point var20 = var5.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var11, (java.awt.geom.Rectangle2D)var19);
    org.jfree.data.xy.DefaultXYZDataset var22 = new org.jfree.data.xy.DefaultXYZDataset();
    org.jfree.data.DomainOrder var23 = var22.getDomainOrder();
    var5.setDataset(1, (org.jfree.data.xy.XYDataset)var22);
    var2.addChangeListener((org.jfree.data.general.SeriesChangeListener)var22);
    org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var27 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((java.lang.Comparable)(short)10);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var34 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var37 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var38 = var37.getItemLabelFont();
    double var39 = var37.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    var37.setShape(var44);
    var34.setLegendBar(var44);
    var34.setDrawBarOutline(true);
    org.jfree.chart.title.LegendTitle var49 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var34);
    org.jfree.chart.annotations.XYDrawableAnnotation var50 = new org.jfree.chart.annotations.XYDrawableAnnotation(100.0d, 10.0d, 0.0d, (-1.0d), (org.jfree.ui.Drawable)var49);
    var50.setURL("");
    boolean var53 = var27.equals((java.lang.Object)var50);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var62 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.util.List var63 = var62.getSubplots();
    org.jfree.data.statistics.BoxAndWhiskerItem var64 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)(-2208960000000L), (java.lang.Number)Double.NaN, (java.lang.Number)51, (java.lang.Number)0.05d, (java.lang.Number)(byte)100, (java.lang.Number)2.0f, (java.lang.Number)15, (java.lang.Number)1.0f, var63);
    org.jfree.chart.axis.CyclicNumberAxis var67 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var68 = var67.isAxisLineVisible();
    var67.setAxisLineVisible(true);
    org.jfree.data.general.DefaultKeyedValues2DDataset var71 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var71.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var76 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.category.CategoryDataset)var71);
    var67.setDefaultAutoRange(var76);
    org.jfree.data.Range var79 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset)var27, var63, var76, false);
    org.jfree.data.time.DateRange var80 = new org.jfree.data.time.DateRange();
    org.jfree.data.Range var82 = org.jfree.data.general.DatasetUtilities.iterateToFindZBounds((org.jfree.data.xy.XYZDataset)var22, var63, (org.jfree.data.Range)var80, true);
    java.util.Date var83 = var80.getLowerDate();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test230() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test230"); }


    org.jfree.chart.panel.CrosshairOverlay var0 = new org.jfree.chart.panel.CrosshairOverlay();
    java.util.List var1 = var0.getRangeCrosshairs();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test231() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test231"); }


    org.jfree.chart.renderer.xy.DeviationRenderer var0 = new org.jfree.chart.renderer.xy.DeviationRenderer();

  }

  public void test232() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test232"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setNextFocusableComponent((java.awt.Component)var2);
    javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var5 = var4.getLocation();
    java.awt.Dimension var6 = var4.preferredSize();
    var0.setSize(var6);
    var0.setIgnoreRepaint(false);
    javax.accessibility.AccessibleContext var10 = var0.getAccessibleContext();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test233() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test233"); }


    org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var1 = var0.getPieChart();
    org.jfree.chart.plot.dial.DialValueIndicator var2 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var3 = var2.getInsets();
    java.awt.Stroke var4 = var2.getOutlineStroke();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var5.setNextFocusableComponent((java.awt.Component)var7);
    java.util.Locale var9 = var7.getLocale();
    javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var11 = var10.getPreferredSize();
    java.awt.Dimension var12 = var7.getSize(var11);
    java.awt.event.ContainerListener[] var13 = var7.getContainerListeners();
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var15 = var14.getPreferredSize();
    java.awt.image.ColorModel var16 = var14.getColorModel();
    var14.updateUI();
    java.lang.String var18 = var14.toString();
    java.awt.Color var19 = var14.getForeground();
    var7.setBackground(var19);
    var2.setOutlinePaint((java.awt.Paint)var19);
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var2.setOutlinePaint((java.awt.Paint)var36);
    var1.setBorderPaint((java.awt.Paint)var36);
    var1.setTitle("-4,-4,4,4");
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.chart.title.Title var43 = var1.getSubtitle(10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var18.equals("org.jfree.chart.ChartPanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test234() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test234"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var0 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var3 = var0.getMedianValue(1024, 15);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test235() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test235"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    org.jfree.chart.annotations.XYPointerAnnotation var5 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var6 = var5.getLabelOffset();
    org.jfree.ui.TextAnchor var7 = var5.getRotationAnchor();
    boolean var8 = var0.removeAnnotation((org.jfree.chart.annotations.XYAnnotation)var5);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var10 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var11 = var10.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var12 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var13 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var10, (org.jfree.chart.urls.XYURLGenerator)var12);
    var13.setShapesFilled(true);
    var13.setSeriesVisibleInLegend(8, (java.lang.Boolean)false);
    var5.removeChangeListener((org.jfree.chart.event.AnnotationChangeListener)var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test236() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test236"); }


    org.jfree.chart.renderer.xy.CandlestickRenderer var0 = new org.jfree.chart.renderer.xy.CandlestickRenderer();

  }

  public void test237() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test237"); }


    org.jfree.chart.axis.LogAxis var0 = new org.jfree.chart.axis.LogAxis();
    org.jfree.chart.editor.DefaultLogAxisEditor var1 = new org.jfree.chart.editor.DefaultLogAxisEditor(var0);
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var3 = var2.getPreferredSize();
    java.awt.image.ColorModel var4 = var2.getColorModel();
    var2.updateUI();
    java.lang.String var6 = var2.toString();
    javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    boolean var8 = var2.isFocusCycleRoot((java.awt.Container)var7);
    var1.setComponentZOrder((java.awt.Component)var7, 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var6,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var6.equals("org.jfree.chart.ChartPanel[,0,0,0var6,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test238() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test238"); }


    org.jfree.chart.util.RelativeDateFormat var1 = new org.jfree.chart.util.RelativeDateFormat();
    boolean var2 = var1.getShowZeroHours();
    var1.setPositivePrefix("d");
    var1.setMinuteSuffix("hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.labels.StandardCategoryItemLabelGenerator var7 = new org.jfree.chart.labels.StandardCategoryItemLabelGenerator("0x00000000", (java.text.DateFormat)var1);
    long var8 = var1.getBaseMillis();
    boolean var9 = var1.getShowZeroHours();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);

  }

  public void test239() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test239"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.chart.renderer.PaintScale var1 = var0.getPaintScale();
    org.jfree.chart.renderer.PaintScale var2 = var0.getPaintScale();
    boolean var3 = var0.getDataBoundsIncludesVisibleSeriesOnly();
    org.jfree.ui.RectangleAnchor var4 = var0.getBlockAnchor();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var7 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    double var12 = var10.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var15 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var16 = var15.getItemLabelFont();
    java.awt.Shape var17 = var15.getBaseLegendShape();
    var10.setShape(var17);
    var7.setLegendBar(var17);
    var7.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var22 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var23 = var7.findDomainBounds((org.jfree.data.xy.XYDataset)var22);
    org.jfree.data.xy.XYIntervalSeriesCollection var24 = new org.jfree.data.xy.XYIntervalSeriesCollection();
    org.jfree.data.xy.XYBarDataset var26 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var24, 10.0d);
    var26.setBarWidth(2.0d);
    org.jfree.chart.axis.AxisCollection var29 = new org.jfree.chart.axis.AxisCollection();
    java.util.List var30 = var29.getAxesAtLeft();
    org.jfree.data.general.DefaultKeyedValues2DDataset var31 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var31.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var36 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var31);
    org.jfree.data.Range var38 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds((org.jfree.data.category.CategoryDataset)var31, true);
    org.jfree.data.Range var40 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds((org.jfree.data.xy.XYDataset)var26, var30, var38, true);
    org.jfree.data.Range var42 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset)var22, var30, true);
    java.lang.Number var43 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset)var22);
    org.jfree.data.Range var44 = var0.findRangeBounds((org.jfree.data.xy.XYDataset)var22);
    org.jfree.chart.plot.ThermometerPlot var45 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var46 = var45.isDomainZoomable();
    org.jfree.chart.plot.PlotOrientation var47 = var45.getOrientation();
    boolean var48 = var22.equals((java.lang.Object)var47);
    org.jfree.chart.plot.dial.DialCap var49 = new org.jfree.chart.plot.dial.DialCap();
    java.awt.Paint var50 = var49.getOutlinePaint();
    double var51 = var49.getRadius();
    org.jfree.chart.renderer.category.DefaultCategoryItemRenderer var52 = new org.jfree.chart.renderer.category.DefaultCategoryItemRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var54 = var52.getSeriesItemURLGenerator(2147483647);
    java.awt.Paint var55 = var52.getBaseOutlinePaint();
    var49.setOutlinePaint(var55);
    boolean var57 = var47.equals((java.lang.Object)var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var43 + "' != '" + Double.NaN+ "'", var43.equals(Double.NaN));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == false);

  }

  public void test240() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test240"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var2 = var0.findDomainBounds((org.jfree.data.xy.XYDataset)var1);
    java.lang.Number var3 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset)var1);
    var1.add(100.0d, Double.NaN, "jfreechart-onetime-");
    var1.clear();
    int var10 = var1.getItemCount(8);
    boolean var11 = var1.isAutoWidth();
    var1.setIntervalWidth(100.0d);
    org.jfree.data.xy.IntervalXYDelegate var14 = new org.jfree.data.xy.IntervalXYDelegate((org.jfree.data.xy.XYDataset)var1);
    double var15 = var14.getIntervalPositionFactor();
    double var16 = var14.getIntervalWidth();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var14.setIntervalPositionFactor(174.49d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + Double.NaN+ "'", var3.equals(Double.NaN));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1.0d);

  }

  public void test241() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test241"); }


    org.jfree.chart.axis.CyclicNumberAxis var2 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var3 = var2.isAxisLineVisible();
    var2.setAxisLineVisible(true);
    var2.setMinorTickMarksVisible(true);
    org.jfree.chart.plot.CombinedRangeXYPlot var8 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var9 = var8.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CombinedRangeXYPlot var10 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var11 = var10.getRangeZeroBaselineStroke();
    var8.setRangeGridlineStroke(var11);
    var8.setDomainMinorGridlinesVisible(true);
    var8.setRangeZeroBaselineVisible(true);
    var2.setPlot((org.jfree.chart.plot.Plot)var8);
    boolean var18 = var8.isRangeCrosshairVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);

  }

  public void test242() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test242"); }


    org.jfree.data.general.WaferMapDataset var3 = new org.jfree.data.general.WaferMapDataset(2, 15, (java.lang.Number)5.0d);
    java.lang.Number var6 = var3.getChipValue(52, 20);
    java.lang.Number var7 = var3.getMaxValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + Double.NEGATIVE_INFINITY+ "'", var7.equals(Double.NEGATIVE_INFINITY));

  }

  public void test243() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test243"); }


    org.jfree.chart.plot.ContourPlot var0 = new org.jfree.chart.plot.ContourPlot();
    org.jfree.chart.plot.CategoryMarker var2 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    var0.addRangeMarker((org.jfree.chart.plot.Marker)var2);
    org.jfree.chart.urls.StandardXYURLGenerator var7 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    org.jfree.data.statistics.SimpleHistogramDataset var9 = new org.jfree.data.statistics.SimpleHistogramDataset((java.lang.Comparable)100.0f);
    var9.removeAllBins();
    java.lang.String var13 = var7.generateURL((org.jfree.data.xy.XYDataset)var9, 100, 1);
    var0.setURLGenerator((org.jfree.chart.urls.XYURLGenerator)var7);
    int var15 = var0.getBackgroundImageAlignment();
    var0.clearAnnotations();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!?hi!=100&amp;hi!=1"+ "'", var13.equals("hi!?hi!=100&amp;hi!=1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 15);

  }

  public void test244() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test244"); }


    org.jfree.data.time.TimeTableXYDataset var0 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    var0.remove((org.jfree.data.time.TimePeriod)var2, (java.lang.Comparable)100, false);
    double var8 = var0.getDomainLowerBound(false);
    int var9 = var0.getItemCount();
    org.jfree.data.Range var11 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds((org.jfree.data.xy.TableXYDataset)var0, 0.5d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test245() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test245"); }


    org.jfree.chart.plot.dial.DialPlot var0 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var1 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var2 = var0.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var1);
    var1.setTickLabelsVisible(false);
    org.jfree.chart.plot.dial.DialPlot var5 = new org.jfree.chart.plot.dial.DialPlot();
    double var6 = var5.getViewWidth();
    org.jfree.chart.plot.dial.DialScale var8 = var5.getScaleForDataset(1);
    var1.addChangeListener((org.jfree.chart.plot.dial.DialLayerChangeListener)var5);
    javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var11 = var10.getPreferredSize();
    boolean var12 = var10.getIgnoreRepaint();
    boolean var13 = var10.isLightweight();
    javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var15 = var14.getPreferredSize();
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var14.setNextFocusableComponent((java.awt.Component)var16);
    var14.show();
    javax.swing.JPanel var19 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var20 = var19.getLocation();
    java.awt.Dimension var21 = var19.preferredSize();
    java.awt.Rectangle var22 = var19.bounds();
    var14.scrollRectToVisible(var22);
    var10.setBounds(var22);
    org.jfree.chart.renderer.category.BarRenderer3D var27 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var28 = var27.getItemLabelFont();
    java.awt.Shape var29 = var27.getBaseLegendShape();
    double var30 = var27.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var31 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var32 = var31.getRangeZeroBaselineStroke();
    var27.setStroke(var32, false);
    org.jfree.chart.renderer.category.BarRenderer3D var37 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var38 = var37.getItemLabelFont();
    double var39 = var37.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    var37.setShape(var44);
    org.jfree.chart.StandardChartTheme var48 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var49 = var48.getLegendItemPaint();
    var37.setItemLabelPaint(var49);
    org.jfree.chart.annotations.XYShapeAnnotation var51 = new org.jfree.chart.annotations.XYShapeAnnotation((java.awt.Shape)var22, var32, var49);
    var1.setMinorTickPaint(var49);
    java.awt.Stroke var53 = var1.getMajorTickStroke();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);

  }

  public void test246() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test246"); }


    org.jfree.chart.plot.dial.DialValueIndicator var0 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var1 = var0.getInsets();
    org.jfree.chart.plot.dial.DialLayerChangeEvent var2 = new org.jfree.chart.plot.dial.DialLayerChangeEvent((org.jfree.chart.plot.dial.DialLayer)var0);
    org.jfree.chart.plot.dial.DialLayer var3 = var2.getDialLayer();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test247() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test247"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var1 = var0.getLocation();
    org.jfree.chart.plot.PolarPlot var2 = new org.jfree.chart.plot.PolarPlot();
    boolean var3 = var2.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var8 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var8.setUpperMargin(10.0d);
    var8.setAxisLineVisible(true);
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var14 = var13.getLocation();
    java.awt.Dimension var15 = var13.preferredSize();
    java.awt.Rectangle var16 = var13.bounds();
    java.awt.Point var17 = var2.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var8, (java.awt.geom.Rectangle2D)var16);
    java.awt.Rectangle var18 = var0.getBounds(var16);
    java.awt.Dimension var19 = var0.getPreferredSize();
    var0.revalidate();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test248() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test248"); }


    org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    java.lang.Object var3 = var2.clone();
    int var4 = var2.getMaximumItemCount();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    boolean var7 = var5.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var9 = new org.jfree.chart.plot.ContourPlot();
    var9.setOutlineVisible(false);
    var5.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var9);
    org.jfree.chart.urls.XYURLGenerator var13 = var9.getURLGenerator();
    var2.removePropertyChangeListener((java.beans.PropertyChangeListener)var9);
    float var15 = var9.getForegroundAlpha();
    org.jfree.chart.plot.ValueMarker var17 = new org.jfree.chart.plot.ValueMarker((-1.0d));
    var9.addDomainMarker((org.jfree.chart.plot.Marker)var17);
    var9.setDataAreaRatio(3.0d);
    var9.clearDomainMarkers();
    double var22 = var9.getRangeCrosshairValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 0.0d);

  }

  public void test249() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test249"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
    java.awt.Paint var9 = var8.getZoomOutlinePaint();
    java.awt.geom.Point2D var10 = var8.getAnchor();
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var12 = var11.getPreferredSize();
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var11.setNextFocusableComponent((java.awt.Component)var13);
    java.util.Locale var15 = var13.getLocale();
    var13.list();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    boolean var19 = var17.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var21 = new org.jfree.chart.plot.ContourPlot();
    var21.setOutlineVisible(false);
    var17.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var21);
    org.jfree.chart.urls.XYURLGenerator var25 = var21.getURLGenerator();
    org.jfree.chart.ClipPath var26 = var21.getClipPath();
    var13.addPropertyChangeListener((java.beans.PropertyChangeListener)var21);
    javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var29 = var28.getPreferredSize();
    java.awt.image.ColorModel var30 = var28.getColorModel();
    var28.firePropertyChange("", 0.0f, 0.0f);
    javax.swing.JPanel var35 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var36 = var35.getLocation();
    java.awt.Point var37 = var28.getLocation(var36);
    boolean var38 = var13.contains(var37);
    java.awt.Point var39 = var8.getLocation(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var38 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test250() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test250"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    boolean var3 = var0.isRangeZeroBaselineVisible();
    var0.clearRangeAxes();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);

  }

  public void test251() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test251"); }


    org.jfree.chart.axis.SubCategoryAxis var1 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    var1.configure();
    double var3 = var1.getLowerMargin();
    org.jfree.chart.axis.SubCategoryAxis var5 = new org.jfree.chart.axis.SubCategoryAxis("Combined Range XYPlot");
    double var6 = var5.getUpperMargin();
    org.jfree.data.time.Week var7 = new org.jfree.data.time.Week();
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var10.setVisible(false);
    java.lang.Object var14 = var10.clone();
    org.jfree.chart.plot.CombinedRangeXYPlot var15 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    org.jfree.chart.annotations.XYPointerAnnotation var20 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var21 = var20.getLabelOffset();
    org.jfree.ui.TextAnchor var22 = var20.getRotationAnchor();
    boolean var23 = var15.removeAnnotation((org.jfree.chart.annotations.XYAnnotation)var20);
    org.jfree.chart.StandardChartTheme var26 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var27 = var26.getLegendItemPaint();
    java.awt.Paint var28 = var26.getSubtitlePaint();
    java.awt.Font var29 = var26.getLargeFont();
    var20.setFont(var29);
    var10.setLabelFont(var29);
    var5.setTickLabelFont((java.lang.Comparable)var7, var29);
    var1.addCategoryLabelToolTip((java.lang.Comparable)var7, "Range[0.0,0.0]");
    org.jfree.chart.axis.CategoryLabelPositions var36 = org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(100.0d);
    org.jfree.chart.title.TextTitle var38 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var39 = var38.isVisible();
    java.lang.Object var40 = var38.clone();
    org.jfree.ui.RectangleEdge var41 = var38.getPosition();
    org.jfree.chart.axis.CategoryLabelPosition var42 = var36.getLabelPosition(var41);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var43 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    boolean var44 = var42.equals((java.lang.Object)var43);
    org.jfree.chart.axis.CategoryLabelWidthType var45 = var42.getWidthType();
    boolean var46 = var7.equals((java.lang.Object)var45);
    java.lang.String var47 = var45.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var44 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "CategoryLabelWidthType.RANGE"+ "'", var47.equals("CategoryLabelWidthType.RANGE"));

  }

  public void test252() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test252"); }


    org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
    double var1 = var0.getDomainCrosshairValue();
    boolean var2 = var0.isRangeZeroBaselineVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test253() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test253"); }


    org.jfree.data.xy.VectorSeriesCollection var0 = new org.jfree.data.xy.VectorSeriesCollection();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var3 = var0.getY((-1), (-2));
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test254() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test254"); }


    org.jfree.data.xy.XYIntervalSeries var3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable)"org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", false, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var5 = var3.getX(4);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test255() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test255"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isRadiusGridlinesVisible();
    org.jfree.chart.renderer.category.BarRenderer3D var4 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var5 = var4.getItemLabelFont();
    java.awt.Shape var6 = var4.getBaseLegendShape();
    double var7 = var4.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var8 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var9 = var8.getRangeZeroBaselineStroke();
    var4.setStroke(var9, false);
    var0.setRadiusGridlineStroke(var9);
    org.jfree.chart.LegendItemCollection var13 = var0.getLegendItems();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test256() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test256"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    double var4 = var2.getItemLabelAnchorOffset();
    java.awt.Shape var6 = var2.getSeriesShape(1);
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    double var12 = var10.getItemLabelAnchorOffset();
    org.jfree.chart.axis.CyclicNumberAxis var16 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var17 = var16.getTickLabelPaint();
    var10.setLegendTextPaint(0, var17);
    var2.setSeriesFillPaint(100, var17, true);
    org.jfree.chart.util.RelativeDateFormat var23 = new org.jfree.chart.util.RelativeDateFormat();
    boolean var24 = var23.getShowZeroHours();
    org.jfree.chart.labels.StandardCategoryItemLabelGenerator var25 = new org.jfree.chart.labels.StandardCategoryItemLabelGenerator("0x00000000", (java.text.DateFormat)var23);
    var2.setSeriesItemLabelGenerator(2013, (org.jfree.chart.labels.CategoryItemLabelGenerator)var25);
    java.lang.String var27 = var25.getLabelFormat();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "0var270000000"+ "'", var27.equals("0var270000000"));

  }

  public void test257() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test257"); }


    org.jfree.data.time.Year var3 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var4 = new org.jfree.data.time.Month(1, var3);
    org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
    long var6 = var4.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var7 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var9 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var10 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var9);
    var7.remove((org.jfree.data.time.TimePeriod)var9, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var14 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var4, (org.jfree.data.time.RegularTimePeriod)var9);
    var14.setMinorTickMarksVisible(false);
    org.jfree.data.time.Year var19 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var20 = new org.jfree.data.time.Month(1, var19);
    org.jfree.data.time.RegularTimePeriod var21 = var20.previous();
    long var22 = var20.getSerialIndex();
    org.jfree.data.time.Year var23 = var20.getYear();
    var14.setLast((org.jfree.data.time.RegularTimePeriod)var23);
    var14.setLowerMargin(0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test258() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test258"); }


    org.jfree.chart.renderer.xy.XYAreaRenderer var1 = new org.jfree.chart.renderer.xy.XYAreaRenderer(52);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var8 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var11 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var12 = var11.getItemLabelFont();
    double var13 = var11.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var16 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var17 = var16.getItemLabelFont();
    java.awt.Shape var18 = var16.getBaseLegendShape();
    var11.setShape(var18);
    var8.setLegendBar(var18);
    org.jfree.chart.plot.dial.DialValueIndicator var21 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var22 = var21.getInsets();
    java.awt.Stroke var23 = var21.getOutlineStroke();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var25 = var24.getPreferredSize();
    javax.swing.JPanel var26 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var24.setNextFocusableComponent((java.awt.Component)var26);
    java.util.Locale var28 = var26.getLocale();
    javax.swing.JPanel var29 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var30 = var29.getPreferredSize();
    java.awt.Dimension var31 = var26.getSize(var30);
    java.awt.event.ContainerListener[] var32 = var26.getContainerListeners();
    javax.swing.JPanel var33 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var34 = var33.getPreferredSize();
    java.awt.image.ColorModel var35 = var33.getColorModel();
    var33.updateUI();
    java.lang.String var37 = var33.toString();
    java.awt.Color var38 = var33.getForeground();
    var26.setBackground(var38);
    var21.setOutlinePaint((java.awt.Paint)var38);
    java.awt.Color var41 = var38.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var44 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var45 = var44.getItemLabelFont();
    java.awt.Shape var46 = var44.getBaseLegendShape();
    double var47 = var44.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var48 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var49 = var48.getRangeZeroBaselineStroke();
    var44.setStroke(var49, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var52 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var53 = var52.isOutline();
    var52.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var58 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var59 = var58.getLegendItemPaint();
    var52.setShapePaint(var59);
    org.jfree.chart.LegendItem var61 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var18, (java.awt.Paint)var41, var49, var59);
    var61.setShapeVisible(false);
    org.jfree.ui.GradientPaintTransformer var64 = var61.getFillPaintTransformer();
    var1.setGradientTransformer(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var37,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var37.equals("org.jfree.chart.ChartPanel[,0,0,0var37,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);

  }

  public void test259() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test259"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    boolean var8 = var0.isDomainPannable();
    var0.setDomainCrosshairRowKey((java.lang.Comparable)(short)100, true);
    org.jfree.data.category.CategoryDataset var13 = var0.getDataset(500);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test260() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test260"); }


    javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var5 = var4.getLocation();
    org.jfree.chart.plot.PolarPlot var6 = new org.jfree.chart.plot.PolarPlot();
    boolean var7 = var6.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var12 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var12.setUpperMargin(10.0d);
    var12.setAxisLineVisible(true);
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var18 = var17.getLocation();
    java.awt.Dimension var19 = var17.preferredSize();
    java.awt.Rectangle var20 = var17.bounds();
    java.awt.Point var21 = var6.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var12, (java.awt.geom.Rectangle2D)var20);
    java.awt.Rectangle var22 = var4.getBounds(var20);
    org.jfree.chart.renderer.category.GanttRenderer var23 = new org.jfree.chart.renderer.category.GanttRenderer();
    java.lang.String[] var26 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var27 = new org.jfree.chart.axis.SymbolAxis("hi!", var26);
    org.jfree.chart.plot.CompassPlot var28 = new org.jfree.chart.plot.CompassPlot();
    boolean var29 = var27.equals((java.lang.Object)var28);
    java.lang.String var30 = var28.getPlotType();
    java.awt.Paint var31 = var28.getRoseCenterPaint();
    var23.setIncompletePaint(var31);
    org.jfree.chart.LegendItem var33 = new org.jfree.chart.LegendItem("Range[0.0,0.0]", "RectangleConstraint[LengthConstraintType.FIXED: width=0.04, height=0.0]", "hi!?hi!=100&amp;hi!=1", "jfreechart-onetime-", (java.awt.Shape)var20, var31);
    org.jfree.data.general.Dataset var34 = var33.getDataset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var30 + "' != '" + "Compass Plot"+ "'", var30.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);

  }

  public void test261() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test261"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    double var4 = var2.getItemLabelAnchorOffset();
    org.jfree.chart.labels.ItemLabelPosition var7 = var2.getNegativeItemLabelPosition(0, 0);
    java.awt.Paint var10 = var2.getItemFillPaint(2013, 1);
    double var11 = var2.getShadowXOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 4.0d);

  }

  public void test262() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test262"); }


    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var0 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var2 = var0.getSeriesItemLabelGenerator(0);
    org.jfree.chart.labels.XYItemLabelGenerator var5 = var0.getItemLabelGenerator((-1), 0);
    boolean var6 = var0.getBaseShapesVisible();
    org.jfree.chart.plot.CombinedRangeXYPlot var7 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var8 = var7.getRangeZeroBaselineStroke();
    java.lang.String var9 = var7.getPlotType();
    org.jfree.chart.plot.CategoryMarker var11 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var12 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var14 = var12.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var17 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var18 = var17.getTickLabelPaint();
    var12.setFillPaint(var18, true);
    var11.setLabelPaint(var18);
    boolean var22 = var7.removeRangeMarker((org.jfree.chart.plot.Marker)var11);
    org.jfree.chart.axis.AxisLocation var23 = var7.getDomainAxisLocation();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var26 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var29 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var30 = var29.getItemLabelFont();
    double var31 = var29.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var34 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var35 = var34.getItemLabelFont();
    java.awt.Shape var36 = var34.getBaseLegendShape();
    var29.setShape(var36);
    var26.setLegendBar(var36);
    var26.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var41 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var42 = var26.findDomainBounds((org.jfree.data.xy.XYDataset)var41);
    int var43 = var7.getIndexOf((org.jfree.chart.renderer.xy.XYItemRenderer)var26);
    var0.setPlot((org.jfree.chart.plot.XYPlot)var7);
    org.jfree.chart.plot.dial.DialValueIndicator var45 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var46 = var45.getInsets();
    java.awt.Stroke var47 = var45.getOutlineStroke();
    javax.swing.JPanel var48 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var49 = var48.getPreferredSize();
    javax.swing.JPanel var50 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var48.setNextFocusableComponent((java.awt.Component)var50);
    java.util.Locale var52 = var50.getLocale();
    javax.swing.JPanel var53 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var54 = var53.getPreferredSize();
    java.awt.Dimension var55 = var50.getSize(var54);
    java.awt.event.ContainerListener[] var56 = var50.getContainerListeners();
    javax.swing.JPanel var57 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var58 = var57.getPreferredSize();
    java.awt.image.ColorModel var59 = var57.getColorModel();
    var57.updateUI();
    java.lang.String var61 = var57.toString();
    java.awt.Color var62 = var57.getForeground();
    var50.setBackground(var62);
    var45.setOutlinePaint((java.awt.Paint)var62);
    java.awt.Color var65 = var62.brighter();
    var7.setDomainTickBandPaint((java.awt.Paint)var65);
    org.jfree.chart.plot.dial.DialValueIndicator var70 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var71 = var70.getInsets();
    java.awt.Stroke var72 = var70.getOutlineStroke();
    javax.swing.JPanel var73 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var74 = var73.getPreferredSize();
    javax.swing.JPanel var75 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var73.setNextFocusableComponent((java.awt.Component)var75);
    java.util.Locale var77 = var75.getLocale();
    javax.swing.JPanel var78 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var79 = var78.getPreferredSize();
    java.awt.Dimension var80 = var75.getSize(var79);
    java.awt.event.ContainerListener[] var81 = var75.getContainerListeners();
    javax.swing.JPanel var82 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var83 = var82.getPreferredSize();
    java.awt.image.ColorModel var84 = var82.getColorModel();
    var82.updateUI();
    java.lang.String var86 = var82.toString();
    java.awt.Color var87 = var82.getForeground();
    var75.setBackground(var87);
    var70.setOutlinePaint((java.awt.Paint)var87);
    java.awt.Color var90 = var87.brighter();
    float[] var94 = new float[] { 10.0f, 100.0f, 1.0f};
    float[] var95 = var87.getRGBColorComponents(var94);
    float[] var96 = java.awt.Color.RGBtoHSB(20, 2147483647, 80, var94);
    float[] var97 = var65.getRGBColorComponents(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var9 + "' != '" + "Combined Range XYPlot"+ "'", var9.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var43 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var61,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var61.equals("org.jfree.chart.ChartPanel[,0,0,0var61,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var84);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var86 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var86,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var86.equals("org.jfree.chart.ChartPanel[,0,0,0var86,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var90);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var94);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var95);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var96);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var97);

  }

  public void test263() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test263"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var1 = var0.getLocation();
    org.jfree.chart.plot.PolarPlot var2 = new org.jfree.chart.plot.PolarPlot();
    boolean var3 = var2.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var8 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var8.setUpperMargin(10.0d);
    var8.setAxisLineVisible(true);
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var14 = var13.getLocation();
    java.awt.Dimension var15 = var13.preferredSize();
    java.awt.Rectangle var16 = var13.bounds();
    java.awt.Point var17 = var2.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var8, (java.awt.geom.Rectangle2D)var16);
    java.awt.Rectangle var18 = var0.getBounds(var16);
    javax.swing.plaf.PanelUI var19 = var0.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);

  }

  public void test264() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test264"); }


    org.jfree.data.general.DefaultKeyedValues2DDataset var0 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var0.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.chart.axis.PeriodAxis var6 = new org.jfree.chart.axis.PeriodAxis("Compass Plot");
    org.jfree.chart.axis.PeriodAxisLabelInfo[] var7 = new org.jfree.chart.axis.PeriodAxisLabelInfo[] { };
    var6.setLabelInfo(var7);
    boolean var9 = var0.equals((java.lang.Object)var6);
    boolean var10 = var6.isInverted();
    boolean var11 = var6.isMinorTickMarksVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test265() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test265"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    java.awt.image.ColorModel var2 = var0.getColorModel();
    var0.updateUI();
    java.lang.String var4 = var0.toString();
    boolean var5 = var0.getInheritsPopupMenu();
    double[] var8 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var9 = new org.jfree.chart.annotations.XYPolygonAnnotation(var8);
    java.lang.Object var10 = var9.clone();
    org.jfree.chart.event.AnnotationChangeEvent var11 = new org.jfree.chart.event.AnnotationChangeEvent((java.lang.Object)var0, (org.jfree.chart.annotations.Annotation)var9);
    int var12 = var0.getY();
    int var13 = var0.getWidth();
    boolean var14 = var0.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var4.equals("org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test266() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test266"); }


    org.jfree.chart.plot.GreyPalette var0 = new org.jfree.chart.plot.GreyPalette();
    double var1 = var0.getMaxZ();
    org.jfree.chart.editor.PaletteSample var2 = new org.jfree.chart.editor.PaletteSample((org.jfree.chart.plot.ColorPalette)var0);
    var2.setFocusTraversalKeysEnabled(false);
    org.jfree.chart.plot.GreyPalette var5 = new org.jfree.chart.plot.GreyPalette();
    var2.setPalette((org.jfree.chart.plot.ColorPalette)var5);
    boolean var7 = var2.getFocusTraversalKeysEnabled();
    boolean var8 = var2.isPaintingForPrint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test267() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test267"); }


    org.jfree.chart.plot.dial.StandardDialScale var0 = new org.jfree.chart.plot.dial.StandardDialScale();
    var0.setMajorTickIncrement(10.0d);
    org.jfree.chart.plot.dial.DialPlot var3 = new org.jfree.chart.plot.dial.DialPlot();
    var3.setView(0.2d, 4.0d, 10.0d, 10.0d);
    var3.mapDatasetToScale(2013, 100);
    var0.addChangeListener((org.jfree.chart.plot.dial.DialLayerChangeListener)var3);
    double var13 = var3.getViewWidth();
    org.jfree.chart.plot.dial.StandardDialScale var14 = new org.jfree.chart.plot.dial.StandardDialScale();
    var14.setMajorTickIncrement(10.0d);
    double var18 = var14.valueToAngle(0.3d);
    org.jfree.chart.axis.CategoryLabelPositions var20 = org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(100.0d);
    org.jfree.chart.title.TextTitle var22 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var23 = var22.isVisible();
    java.lang.Object var24 = var22.clone();
    org.jfree.ui.RectangleEdge var25 = var22.getPosition();
    org.jfree.chart.axis.CategoryLabelPosition var26 = var20.getLabelPosition(var25);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var27 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    boolean var28 = var26.equals((java.lang.Object)var27);
    boolean var29 = var14.equals((java.lang.Object)var27);
    java.awt.Font var30 = var14.getTickLabelFont();
    var3.setBackground((org.jfree.chart.plot.dial.DialLayer)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 174.49d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var29 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test268() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test268"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.LegendItem var4 = var1.getLegendItem((-1), (-1));
    org.jfree.chart.LegendItem var7 = var1.getLegendItem(100, 2147483647);
    org.jfree.chart.plot.DrawingSupplier var8 = var1.getDrawingSupplier();
    int var9 = var1.getPassCount();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var12 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var15 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var16 = var15.getItemLabelFont();
    double var17 = var15.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var20 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var21 = var20.getItemLabelFont();
    java.awt.Shape var22 = var20.getBaseLegendShape();
    var15.setShape(var22);
    var12.setLegendBar(var22);
    org.jfree.data.general.DefaultKeyedValues2DDataset var27 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var30 = new org.jfree.chart.entity.CategoryItemEntity(var22, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var27, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    var1.setBaseShape(var22, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);

  }

  public void test269() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test269"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Quarter var1 = org.jfree.data.time.Quarter.parseQuarter("hi!?hi!=100&amp;hi!=1");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test270() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test270"); }


    org.jfree.chart.util.HexNumberFormat var1 = new org.jfree.chart.util.HexNumberFormat();
    org.jfree.chart.labels.StandardCrosshairLabelGenerator var2 = new org.jfree.chart.labels.StandardCrosshairLabelGenerator("", (java.text.NumberFormat)var1);
    var1.setMaximumFractionDigits(20);

  }

  public void test271() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test271"); }


    org.jfree.chart.urls.StandardPieURLGenerator var1 = new org.jfree.chart.urls.StandardPieURLGenerator("hi!");
    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var2 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    org.jfree.data.general.PieDataset var4 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow((org.jfree.data.category.CategoryDataset)var2, 10);
    org.jfree.data.statistics.SimpleHistogramBin var7 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
    org.jfree.data.general.PieDataset var9 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(var4, (java.lang.Comparable)0.05d, 175.0d);
    org.jfree.data.time.Year var11 = new org.jfree.data.time.Year(10);
    java.lang.String var13 = var1.generateURL(var9, (java.lang.Comparable)10, 2013);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!?category=10&amp;pieIndex=2013"+ "'", var13.equals("hi!?category=10&amp;pieIndex=2013"));

  }

  public void test272() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test272"); }


    org.jfree.chart.plot.XYCrosshairState var0 = new org.jfree.chart.plot.XYCrosshairState();
    var0.setAnchorX(360.0d);
    var0.setCrosshairDistance(4.0d);
    var0.updateCrosshairX(0.5d);

  }

  public void test273() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test273"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    boolean var1 = var0.getSectionOutlinesVisible();
    org.jfree.chart.plot.CombinedRangeXYPlot var2 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    org.jfree.chart.annotations.XYPointerAnnotation var7 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var8 = var7.getLabelOffset();
    org.jfree.ui.TextAnchor var9 = var7.getRotationAnchor();
    boolean var10 = var2.removeAnnotation((org.jfree.chart.annotations.XYAnnotation)var7);
    boolean var11 = var0.equals((java.lang.Object)var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test274() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test274"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var2 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var2.clearDomainMarkers();
    java.awt.Paint var4 = var2.getRangeGridlinePaint();
    org.jfree.chart.plot.dial.StandardDialRange var5 = new org.jfree.chart.plot.dial.StandardDialRange(0.2d, 10.0d, var4);
    var5.setOuterRadius(0.75d);
    double var8 = var5.getUpperBound();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 10.0d);

  }

  public void test275() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test275"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var2 = var0.findDomainBounds((org.jfree.data.xy.XYDataset)var1);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.labels.ItemLabelPosition var10 = var5.getNegativeItemLabelPosition(0, 0);
    double var11 = var10.getAngle();
    var0.setNegativeItemLabelPosition(var10);
    org.jfree.chart.labels.XYSeriesLabelGenerator var13 = var0.getLegendItemToolTipGenerator();
    org.jfree.chart.title.LegendTitle var14 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var0);
    org.jfree.chart.block.BlockContainer var15 = var14.getItemContainer();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var18 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var21 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var22 = var21.getItemLabelFont();
    double var23 = var21.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var26 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var27 = var26.getItemLabelFont();
    java.awt.Shape var28 = var26.getBaseLegendShape();
    var21.setShape(var28);
    var18.setLegendBar(var28);
    var18.setDrawBarOutline(true);
    org.jfree.chart.title.LegendTitle var33 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var18);
    org.jfree.ui.VerticalAlignment var34 = var33.getVerticalAlignment();
    var14.setVerticalAlignment(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);

  }

  public void test276() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test276"); }


    org.jfree.chart.axis.LogAxis var0 = new org.jfree.chart.axis.LogAxis();
    org.jfree.chart.plot.PolarPlot var2 = new org.jfree.chart.plot.PolarPlot();
    boolean var3 = var2.isCounterClockwise();
    var2.setRadiusGridlinesVisible(false);
    int var6 = var2.getDatasetCount();
    var2.addCornerTextItem("");
    java.lang.String[] var13 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var14 = new org.jfree.chart.axis.SymbolAxis("hi!", var13);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var15 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var17 = var15.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var20 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var21 = var20.getTickLabelPaint();
    var15.setFillPaint(var21, true);
    var14.setGridBandAlternatePaint(var21);
    var14.setFixedDimension(100.0d);
    org.jfree.chart.axis.DateAxis var28 = new org.jfree.chart.axis.DateAxis("0x00000000");
    boolean var30 = var28.isHiddenValue(0L);
    org.jfree.chart.title.TextTitle var33 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var34 = var33.isVisible();
    java.lang.Object var35 = var33.clone();
    var33.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
    double var41 = var33.getWidth();
    javax.swing.JPanel var42 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var43 = var42.getLocation();
    org.jfree.chart.plot.PolarPlot var44 = new org.jfree.chart.plot.PolarPlot();
    boolean var45 = var44.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var50 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var50.setUpperMargin(10.0d);
    var50.setAxisLineVisible(true);
    javax.swing.JPanel var55 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var56 = var55.getLocation();
    java.awt.Dimension var57 = var55.preferredSize();
    java.awt.Rectangle var58 = var55.bounds();
    java.awt.Point var59 = var44.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var50, (java.awt.geom.Rectangle2D)var58);
    java.awt.Rectangle var60 = var42.getBounds(var58);
    var33.setBounds((java.awt.geom.Rectangle2D)var60);
    org.jfree.chart.title.TextTitle var63 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var64 = var63.isVisible();
    java.lang.Object var65 = var63.clone();
    org.jfree.ui.RectangleEdge var66 = var63.getPosition();
    double var67 = var28.valueToJava2D(5.0d, (java.awt.geom.Rectangle2D)var60, var66);
    java.awt.Point var68 = var2.translateToJava2D(5.0d, 0.3d, (org.jfree.chart.axis.ValueAxis)var14, (java.awt.geom.Rectangle2D)var60);
    org.jfree.chart.axis.CategoryLabelPositions var70 = org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(100.0d);
    org.jfree.chart.title.TextTitle var72 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var73 = var72.isVisible();
    java.lang.Object var74 = var72.clone();
    org.jfree.ui.RectangleEdge var75 = var72.getPosition();
    org.jfree.chart.axis.CategoryLabelPosition var76 = var70.getLabelPosition(var75);
    double var77 = var0.valueToJava2D(4.0d, (java.awt.geom.Rectangle2D)var60, var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var73 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var75);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var77 == Double.NaN);

  }

  public void test277() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test277"); }


    org.jfree.chart.axis.AxisSpace var0 = new org.jfree.chart.axis.AxisSpace();
    double var1 = var0.getBottom();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var3 = var2.getPreferredSize();
    javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var2.setNextFocusableComponent((java.awt.Component)var4);
    var2.show();
    javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var8 = var7.getLocation();
    java.awt.Dimension var9 = var7.preferredSize();
    java.awt.Rectangle var10 = var7.bounds();
    var2.scrollRectToVisible(var10);
    javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var13 = var12.getPreferredSize();
    boolean var14 = var12.getIgnoreRepaint();
    boolean var15 = var12.isLightweight();
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var17 = var16.getPreferredSize();
    javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var16.setNextFocusableComponent((java.awt.Component)var18);
    var16.show();
    javax.swing.JPanel var21 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var22 = var21.getLocation();
    java.awt.Dimension var23 = var21.preferredSize();
    java.awt.Rectangle var24 = var21.bounds();
    var16.scrollRectToVisible(var24);
    var12.setBounds(var24);
    java.awt.geom.Rectangle2D var27 = var0.expand((java.awt.geom.Rectangle2D)var10, (java.awt.geom.Rectangle2D)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);

  }

  public void test278() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test278"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var2 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var2.clearDomainMarkers();
    java.awt.Paint var4 = var2.getRangeGridlinePaint();
    org.jfree.chart.plot.dial.StandardDialRange var5 = new org.jfree.chart.plot.dial.StandardDialRange(0.2d, 10.0d, var4);
    org.jfree.chart.renderer.category.LevelRenderer var6 = new org.jfree.chart.renderer.category.LevelRenderer();
    double var7 = var6.getItemMargin();
    org.jfree.chart.StrokeMap var8 = new org.jfree.chart.StrokeMap();
    java.lang.Object var9 = var8.clone();
    boolean var10 = var6.equals((java.lang.Object)var8);
    var6.setItemLabelAnchorOffset(4.0d);
    org.jfree.data.KeyedObjects2D var14 = new org.jfree.data.KeyedObjects2D();
    javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var16 = var15.getPreferredSize();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var15.setNextFocusableComponent((java.awt.Component)var17);
    java.util.Locale var19 = var17.getLocale();
    org.jfree.chart.axis.TickUnitSource var20 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var19);
    java.text.NumberFormat var21 = java.text.NumberFormat.getPercentInstance(var19);
    org.jfree.data.time.Year var23 = new org.jfree.data.time.Year();
    var14.addObject((java.lang.Object)var21, (java.lang.Comparable)0.04d, (java.lang.Comparable)var23);
    double[] var27 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var28 = new org.jfree.chart.annotations.XYPolygonAnnotation(var27);
    double[] var31 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var32 = new org.jfree.chart.annotations.XYPolygonAnnotation(var31);
    org.jfree.chart.ClipPath var33 = new org.jfree.chart.ClipPath(var27, var31);
    double[][] var34 = new double[][] { var27};
    double[] var39 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var40 = new org.jfree.chart.annotations.XYPolygonAnnotation(var39);
    double[] var43 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var44 = new org.jfree.chart.annotations.XYPolygonAnnotation(var43);
    org.jfree.chart.ClipPath var45 = new org.jfree.chart.ClipPath(var39, var43);
    double[][] var46 = new double[][] { var39};
    org.jfree.data.category.CategoryDataset var47 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var46);
    org.jfree.data.category.DefaultIntervalCategoryDataset var48 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var34, var46);
    org.jfree.chart.axis.SubCategoryAxis var50 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    var50.configure();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var52 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var54 = var52.getSeriesLinesVisible(10);
    javax.swing.JPanel var56 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var57 = var56.getPreferredSize();
    boolean var58 = var56.getIgnoreRepaint();
    boolean var59 = var56.isLightweight();
    javax.swing.JPanel var60 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var61 = var60.getPreferredSize();
    javax.swing.JPanel var62 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var60.setNextFocusableComponent((java.awt.Component)var62);
    var60.show();
    javax.swing.JPanel var65 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var66 = var65.getLocation();
    java.awt.Dimension var67 = var65.preferredSize();
    java.awt.Rectangle var68 = var65.bounds();
    var60.scrollRectToVisible(var68);
    var56.setBounds(var68);
    var52.setSeriesShape(15, (java.awt.Shape)var68);
    org.jfree.chart.axis.AxisState var72 = new org.jfree.chart.axis.AxisState();
    org.jfree.chart.title.TextTitle var75 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var76 = var75.isVisible();
    java.lang.Object var77 = var75.clone();
    org.jfree.ui.RectangleEdge var78 = var75.getPosition();
    var72.moveCursor(4.0d, var78);
    double var80 = var6.getItemMiddle((java.lang.Comparable)1201L, (java.lang.Comparable)0.04d, (org.jfree.data.category.CategoryDataset)var48, (org.jfree.chart.axis.CategoryAxis)var50, (java.awt.geom.Rectangle2D)var68, var78);
    boolean var81 = var5.equals((java.lang.Object)var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var59 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var66);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var78);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var80 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var81 == false);

  }

  public void test279() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test279"); }


    org.jfree.chart.renderer.xy.XYLineAndShapeRenderer var0 = new org.jfree.chart.renderer.xy.XYLineAndShapeRenderer();
    boolean var3 = var0.getItemShapeVisible(52, 1043495433);
    var0.setShapesVisible((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);

  }

  public void test280() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test280"); }


    double[] var2 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var3 = new org.jfree.chart.annotations.XYPolygonAnnotation(var2);
    org.jfree.chart.annotations.XYPolygonAnnotation var4 = new org.jfree.chart.annotations.XYPolygonAnnotation(var2);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var11 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    double var16 = var14.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var19 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var20 = var19.getItemLabelFont();
    java.awt.Shape var21 = var19.getBaseLegendShape();
    var14.setShape(var21);
    var11.setLegendBar(var21);
    org.jfree.chart.plot.dial.DialValueIndicator var24 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var25 = var24.getInsets();
    java.awt.Stroke var26 = var24.getOutlineStroke();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    javax.swing.JPanel var29 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var27.setNextFocusableComponent((java.awt.Component)var29);
    java.util.Locale var31 = var29.getLocale();
    javax.swing.JPanel var32 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var33 = var32.getPreferredSize();
    java.awt.Dimension var34 = var29.getSize(var33);
    java.awt.event.ContainerListener[] var35 = var29.getContainerListeners();
    javax.swing.JPanel var36 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var37 = var36.getPreferredSize();
    java.awt.image.ColorModel var38 = var36.getColorModel();
    var36.updateUI();
    java.lang.String var40 = var36.toString();
    java.awt.Color var41 = var36.getForeground();
    var29.setBackground(var41);
    var24.setOutlinePaint((java.awt.Paint)var41);
    java.awt.Color var44 = var41.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var47 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var48 = var47.getItemLabelFont();
    java.awt.Shape var49 = var47.getBaseLegendShape();
    double var50 = var47.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var51 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var52 = var51.getRangeZeroBaselineStroke();
    var47.setStroke(var52, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var55 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var56 = var55.isOutline();
    var55.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var61 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var62 = var61.getLegendItemPaint();
    var55.setShapePaint(var62);
    org.jfree.chart.LegendItem var64 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var21, (java.awt.Paint)var44, var52, var62);
    var64.setShapeVisible(false);
    var64.setURLText("0x00000001");
    java.lang.Object var69 = var64.clone();
    boolean var70 = var4.equals((java.lang.Object)var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var40,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var40.equals("org.jfree.chart.ChartPanel[,0,0,0var40,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var70 == false);

  }

  public void test281() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test281"); }


    org.jfree.chart.StandardChartTheme var1 = new org.jfree.chart.StandardChartTheme("Compass Plot");
    java.awt.Paint var2 = var1.getTitlePaint();
    java.awt.Paint var3 = var1.getChartBackgroundPaint();
    org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.CategoryAxis var5 = var4.getDomainAxis();
    boolean var6 = var4.isRangeMinorGridlinesVisible();
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var7 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var8 = var7.isOutline();
    var7.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var13 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var14 = var13.getLegendItemPaint();
    var7.setShapePaint(var14);
    var4.setRangeMinorGridlinePaint(var14);
    var1.setLegendBackgroundPaint(var14);
    java.awt.Paint var18 = var1.getRangeGridlinePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test282() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test282"); }


    org.jfree.chart.labels.StandardXYSeriesLabelGenerator var1 = new org.jfree.chart.labels.StandardXYSeriesLabelGenerator("(0.04, 0.05)");

  }

  public void test283() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test283"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var8 = var7.getDomainCrosshairColumnKey();
    var7.setCrosshairDatasetIndex(100);
    org.jfree.chart.axis.CategoryAnchor var11 = var7.getDomainGridlinePosition();
    var0.setDomainGridlinePosition(var11);
    java.lang.String var13 = var11.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "CategoryAnchor.MIDDLE"+ "'", var13.equals("CategoryAnchor.MIDDLE"));

  }

  public void test284() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test284"); }


    org.jfree.chart.renderer.xy.XYShapeRenderer var0 = new org.jfree.chart.renderer.xy.XYShapeRenderer();
    org.jfree.chart.axis.CyclicNumberAxis var3 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var4 = var3.isAxisLineVisible();
    var3.setAxisLineVisible(true);
    var3.setMinorTickMarksVisible(true);
    org.jfree.ui.RectangleInsets var9 = var3.getTickLabelInsets();
    boolean var10 = var0.equals((java.lang.Object)var3);
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var12 = var11.getPreferredSize();
    java.awt.image.ColorModel var13 = var11.getColorModel();
    var11.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var18 = var11.getForeground();
    boolean var19 = var0.equals((java.lang.Object)var11);
    var0.setUseOutlinePaint(false);
    boolean var22 = var0.getDrawOutlines();
    boolean var23 = var0.isGuideLinesVisible();
    boolean var24 = var0.getUseFillPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);

  }

  public void test285() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test285"); }


    org.jfree.chart.renderer.category.GanttRenderer var0 = new org.jfree.chart.renderer.category.GanttRenderer();
    org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer var1 = new org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer();
    org.jfree.chart.StandardChartTheme var4 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var5 = var4.getLegendItemPaint();
    var1.setBoxPaint(var5);
    var0.setCompletePaint(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test286() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test286"); }


    org.jfree.data.time.Year var2 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var3 = new org.jfree.data.time.Month(1, var2);
    org.jfree.data.time.RegularTimePeriod var4 = var3.previous();
    long var5 = var3.getSerialIndex();
    org.jfree.data.time.Year var6 = var3.getYear();
    org.jfree.data.time.RegularTimePeriod var7 = var3.next();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test287() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test287"); }


    org.jfree.chart.StandardChartTheme var2 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    org.jfree.chart.plot.DrawingSupplier var3 = var2.getDrawingSupplier();
    java.awt.Paint var4 = var2.getThermometerPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test288() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test288"); }


    org.jfree.data.time.ohlc.OHLCSeries var1 = new org.jfree.data.time.ohlc.OHLCSeries((java.lang.Comparable)"hi!?hi!=100&amp;amp;hi!=1");
    org.jfree.data.time.Year var5 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var6 = new org.jfree.data.time.Month(1, var5);
    org.jfree.data.time.Month var7 = new org.jfree.data.time.Month(2, var5);
    var1.add((org.jfree.data.time.RegularTimePeriod)var5, 2.0d, 0.2d, (-170.0d), (-90.0d));
    boolean var13 = var1.getAutoSort();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.setMaximumItemCount((-1));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);

  }

  public void test289() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test289"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    org.jfree.chart.editor.DefaultPolarPlotEditor var1 = new org.jfree.chart.editor.DefaultPolarPlotEditor(var0);

  }

  public void test290() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test290"); }


    org.jfree.data.time.Year var3 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var4 = new org.jfree.data.time.Month(1, var3);
    org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
    long var6 = var4.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var7 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var9 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var10 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var9);
    var7.remove((org.jfree.data.time.TimePeriod)var9, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var14 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var4, (org.jfree.data.time.RegularTimePeriod)var9);
    var14.setMinorTickMarksVisible(false);
    org.jfree.data.time.Year var18 = new org.jfree.data.time.Year(100);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var19 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    int var20 = var18.compareTo((java.lang.Object)var19);
    var14.setFirst((org.jfree.data.time.RegularTimePeriod)var18);
    org.jfree.chart.annotations.XYPointerAnnotation var26 = new org.jfree.chart.annotations.XYPointerAnnotation("-4,-4,4,4", (-0.7853981633974483d), (-90.0d), 0.05d);
    org.jfree.chart.plot.CombinedRangeXYPlot var27 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    org.jfree.chart.annotations.XYPointerAnnotation var32 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var33 = var32.getLabelOffset();
    org.jfree.ui.TextAnchor var34 = var32.getRotationAnchor();
    boolean var35 = var27.removeAnnotation((org.jfree.chart.annotations.XYAnnotation)var32);
    org.jfree.chart.StandardChartTheme var38 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var39 = var38.getLegendItemPaint();
    java.awt.Paint var40 = var38.getSubtitlePaint();
    java.awt.Font var41 = var38.getLargeFont();
    var32.setFont(var41);
    var26.setFont(var41);
    var14.setLabelFont(var41);
    var14.configure();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);

  }

  public void test291() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test291"); }


    org.jfree.chart.urls.CustomCategoryURLGenerator var0 = new org.jfree.chart.urls.CustomCategoryURLGenerator();
    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var1 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var4);
    org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
    var2.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var9 = var2.getDrawSharedDomainAxis();
    org.jfree.ui.RectangleEdge var11 = var2.getDomainAxisEdge(2);
    org.jfree.data.general.DefaultKeyedValues2DDataset var12 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var12.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var17 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var12);
    org.jfree.chart.urls.StandardXYURLGenerator var21 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    boolean var22 = var12.equals((java.lang.Object)"hi!");
    org.jfree.data.Range var23 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds((org.jfree.data.category.CategoryDataset)var12);
    boolean var24 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var12);
    int var25 = var2.indexOf((org.jfree.data.category.CategoryDataset)var12);
    boolean var26 = var1.equals((java.lang.Object)var25);
    java.lang.String var29 = var0.generateURL((org.jfree.data.category.CategoryDataset)var1, 2, 500);
    boolean var31 = var0.equals((java.lang.Object)(short)100);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);

  }

  public void test292() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test292"); }


    org.jfree.data.xy.XYIntervalSeries var3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable)"org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", false, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.ComparableObjectItem var5 = var3.getDataItem(500);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test293() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test293"); }


    org.jfree.data.xy.XYIntervalSeries var3 = new org.jfree.data.xy.XYIntervalSeries((java.lang.Comparable)"org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", false, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.ComparableObjectItem var5 = var3.getDataItem(15);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test294() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test294"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker((-1.0d));
    org.jfree.chart.plot.PolarPlot var2 = new org.jfree.chart.plot.PolarPlot();
    org.jfree.chart.axis.TickUnit var3 = var2.getAngleTickUnit();
    var1.removeChangeListener((org.jfree.chart.event.MarkerChangeListener)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test295() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test295"); }


    org.jfree.chart.renderer.category.DefaultCategoryItemRenderer var0 = new org.jfree.chart.renderer.category.DefaultCategoryItemRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = var0.getSeriesItemURLGenerator(2147483647);
    boolean var3 = var0.getBaseShapesVisible();
    var0.setSeriesItemLabelsVisible(1, (java.lang.Boolean)false);
    int var7 = var0.getPassCount();
    org.jfree.chart.labels.CategoryToolTipGenerator var8 = var0.getToolTipGenerator();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test296() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test296"); }


    org.jfree.data.xml.RootHandler var0 = new org.jfree.data.xml.RootHandler();
    var0.endElement("", "hi!", "hi!");
    var0.endDocument();
    org.jfree.data.xml.CategorySeriesHandler var6 = new org.jfree.data.xml.CategorySeriesHandler(var0);
    var6.endElement("hi!", "-4,-4,4,4", "Range[0.0,0.0]");
    org.jfree.data.time.Second var11 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var12 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var11);
    var12.setMaximumItemCount(0);
    boolean var15 = var12.getNotify();
    double var16 = var12.getMaxY();
    java.lang.Object var17 = var12.clone();
    org.jfree.data.time.Year var20 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var21 = new org.jfree.data.time.Month(1, var20);
    org.jfree.data.time.Year var23 = new org.jfree.data.time.Year();
    org.jfree.data.gantt.Task var24 = new org.jfree.data.gantt.Task("item", (org.jfree.data.time.TimePeriod)var23);
    org.jfree.data.time.TimeSeries var25 = var12.createCopy((org.jfree.data.time.RegularTimePeriod)var20, (org.jfree.data.time.RegularTimePeriod)var23);
    var6.addItem((java.lang.Comparable)var20, (java.lang.Number)15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test297() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test297"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    java.awt.Shape var12 = var10.getBaseLegendShape();
    var5.setShape(var12);
    var2.setLegendBar(var12);
    var2.setDrawBarOutline(true);
    java.awt.Paint var18 = var2.getLegendTextPaint(0);
    boolean var19 = var2.getUseYInterval();
    var2.setBaseCreateEntities(false, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);

  }

  public void test298() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test298"); }


    org.jfree.chart.axis.SubCategoryAxis var1 = new org.jfree.chart.axis.SubCategoryAxis("Combined Range XYPlot");
    java.lang.Number[][] var2 = new java.lang.Number[][] { };
    java.lang.Number[][] var3 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var4 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var2, var3);
    org.jfree.data.time.Week var6 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var7 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var6);
    int var8 = var4.getColumnIndex((java.lang.Comparable)var6);
    org.jfree.chart.plot.CategoryMarker var10 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var11 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var13 = var11.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var16 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var17 = var16.getTickLabelPaint();
    var11.setFillPaint(var17, true);
    var10.setLabelPaint(var17);
    org.jfree.chart.plot.CompassPlot var21 = new org.jfree.chart.plot.CompassPlot();
    var10.addChangeListener((org.jfree.chart.event.MarkerChangeListener)var21);
    org.jfree.chart.StandardChartTheme var25 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var26 = var25.getLegendItemPaint();
    java.awt.Paint var27 = var25.getSubtitlePaint();
    java.awt.Font var28 = var25.getLargeFont();
    var21.setLabelFont(var28);
    var1.setTickLabelFont((java.lang.Comparable)var6, var28);
    var1.clearCategoryLabelToolTips();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test299() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test299"); }


    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var0 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var1 = var0.clone();
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var3 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var4 = var3.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var5 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var6 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var3, (org.jfree.chart.urls.XYURLGenerator)var5);
    java.lang.String var7 = var5.getItemParameterName();
    org.jfree.chart.renderer.xy.XYStepRenderer var8 = new org.jfree.chart.renderer.xy.XYStepRenderer((org.jfree.chart.labels.XYToolTipGenerator)var0, (org.jfree.chart.urls.XYURLGenerator)var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var7 + "' != '" + "item"+ "'", var7.equals("item"));

  }

  public void test300() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test300"); }


    org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
    org.jfree.data.time.RegularTimePeriod var1 = var0.next();
    org.jfree.data.time.TimeSeriesDataItem var3 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var0, 174.49d);
    java.lang.Number var4 = var3.getValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + 174.49d+ "'", var4.equals(174.49d));

  }

  public void test301() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test301"); }


    java.lang.Number[][] var0 = new java.lang.Number[][] { };
    java.lang.Number[][] var1 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var2 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var0, var1);
    org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var4);
    int var6 = var2.getColumnIndex((java.lang.Comparable)var4);
    int var8 = var2.getCategoryIndex((java.lang.Comparable)15);
    org.jfree.data.time.Year var11 = new org.jfree.data.time.Year(100);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var12 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    int var13 = var11.compareTo((java.lang.Object)var12);
    org.jfree.data.time.TimeSeriesDataItem var15 = new org.jfree.data.time.TimeSeriesDataItem((org.jfree.data.time.RegularTimePeriod)var11, 175.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var16 = var2.getStartValue((java.lang.Comparable)500, (java.lang.Comparable)var11);
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1);

  }

  public void test302() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test302"); }


    org.jfree.data.Range var2 = new org.jfree.data.Range(0.75d, 10.0d);

  }

  public void test303() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test303"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    org.jfree.chart.plot.dial.DialValueIndicator var19 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var20 = var19.getInsets();
    java.awt.Stroke var21 = var19.getOutlineStroke();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var19.setOutlinePaint((java.awt.Paint)var36);
    java.awt.Color var39 = var36.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    double var45 = var42.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var46 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var47 = var46.getRangeZeroBaselineStroke();
    var42.setStroke(var47, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var50 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var51 = var50.isOutline();
    var50.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var56 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var57 = var56.getLegendItemPaint();
    var50.setShapePaint(var57);
    org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var16, (java.awt.Paint)var39, var47, var57);
    var59.setShapeVisible(false);
    java.awt.Paint var62 = var59.getLabelPaint();
    java.lang.String var63 = var59.getLabel();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var63 + "' != '" + "Compass Plot"+ "'", var63.equals("Compass Plot"));

  }

  public void test304() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test304"); }


    org.jfree.chart.labels.StandardPieToolTipGenerator var1 = new org.jfree.chart.labels.StandardPieToolTipGenerator("CategoryAnchor.MIDDLE");

  }

  public void test305() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test305"); }


    org.jfree.chart.plot.ContourPlot var0 = new org.jfree.chart.plot.ContourPlot();
    org.jfree.chart.plot.CategoryMarker var2 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    var0.addRangeMarker((org.jfree.chart.plot.Marker)var2);
    org.jfree.chart.urls.StandardXYURLGenerator var7 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    org.jfree.data.statistics.SimpleHistogramDataset var9 = new org.jfree.data.statistics.SimpleHistogramDataset((java.lang.Comparable)100.0f);
    var9.removeAllBins();
    java.lang.String var13 = var7.generateURL((org.jfree.data.xy.XYDataset)var9, 100, 1);
    var0.setURLGenerator((org.jfree.chart.urls.XYURLGenerator)var7);
    java.lang.Number[][] var16 = new java.lang.Number[][] { };
    java.lang.Number[][] var17 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var18 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var16, var17);
    int var19 = var18.getRowCount();
    org.jfree.data.xy.OHLCDataItem[] var21 = new org.jfree.data.xy.OHLCDataItem[] { };
    org.jfree.data.xy.DefaultOHLCDataset var22 = new org.jfree.data.xy.DefaultOHLCDataset((java.lang.Comparable)0.05d, var21);
    var18.setSeriesKeys((java.lang.Comparable[])var21);
    org.jfree.data.xy.DefaultOHLCDataset var24 = new org.jfree.data.xy.DefaultOHLCDataset((java.lang.Comparable)"d", var21);
    java.lang.String var27 = var7.generateURL((org.jfree.data.xy.XYDataset)var24, 15, 10);
    java.lang.Number var28 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset)var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!?hi!=100&amp;hi!=1"+ "'", var13.equals("hi!?hi!=100&amp;hi!=1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!?hi!=15&amp;hi!=10"+ "'", var27.equals("hi!?hi!=15&amp;hi!=10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);

  }

  public void test306() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test306"); }


    org.jfree.chart.axis.PeriodAxis var1 = new org.jfree.chart.axis.PeriodAxis("Compass Plot");
    var1.setMinorTickMarkOutsideLength(100.0f);
    org.jfree.data.xy.XYDatasetTableModel var4 = new org.jfree.data.xy.XYDatasetTableModel();
    java.lang.Class var6 = var4.getColumnClass((-1));
    var1.setMajorTickTimePeriodClass(var6);
    float var8 = var1.getMinorTickMarkOutsideLength();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 100.0f);

  }

  public void test307() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test307"); }


    org.jfree.chart.plot.ContourPlot var0 = new org.jfree.chart.plot.ContourPlot();
    org.jfree.chart.plot.CategoryMarker var2 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    var0.addRangeMarker((org.jfree.chart.plot.Marker)var2);
    var0.setRenderAsPoints(true);

  }

  public void test308() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test308"); }


    org.jfree.data.time.Hour var0 = new org.jfree.data.time.Hour();

  }

  public void test309() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test309"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    java.awt.Paint var17 = var0.getQuadrantPaint(1);
    org.jfree.data.xy.XYDataset var19 = var0.getDataset((-1));
    double var20 = var0.getDomainCrosshairValue();
    var0.setRangeMinorGridlinesVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0.0d);

  }

  public void test310() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test310"); }


    org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var4);
    org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
    var2.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var15 = var14.getTickLabelPaint();
    var9.setFillPaint(var15, true);
    var2.setDomainCrosshairPaint(var15);
    boolean var19 = var1.equals((java.lang.Object)var2);
    org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var21 = var20.getDomainCrosshairColumnKey();
    var20.setCrosshairDatasetIndex(100);
    org.jfree.chart.plot.CombinedRangeXYPlot var24 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var25 = var24.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var27 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var28 = var27.getMargin();
    var24.setAxisOffset(var28);
    var20.setAxisOffset(var28);
    org.jfree.data.category.CategoryDataset var32 = var20.getDataset((-2));
    var20.clearRangeMarkers((-13421773));
    org.jfree.chart.plot.XYPlot var35 = new org.jfree.chart.plot.XYPlot();
    org.jfree.chart.plot.DatasetRenderingOrder var36 = var35.getDatasetRenderingOrder();
    var20.setDatasetRenderingOrder(var36);
    var2.setDatasetRenderingOrder(var36);
    org.jfree.chart.plot.ContourPlot var39 = new org.jfree.chart.plot.ContourPlot();
    org.jfree.chart.plot.CategoryMarker var41 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    var39.addRangeMarker((org.jfree.chart.plot.Marker)var41);
    var2.addDomainMarker(var41);
    org.jfree.chart.plot.Crosshair var44 = new org.jfree.chart.plot.Crosshair();
    double var45 = var44.getValue();
    double var46 = var44.getLabelYOffset();
    java.awt.Font var47 = var44.getLabelFont();
    var41.setLabelFont(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);

  }

  public void test311() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test311"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    var0.setDomainCrosshairVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);

  }

  public void test312() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test312"); }


    org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.insertValue(19, (java.lang.Comparable)51, 15.0d);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test313() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test313"); }


    org.jfree.data.function.NormalDistributionFunction2D var2 = new org.jfree.data.function.NormalDistributionFunction2D(0.0d, 0.2d);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    java.awt.Shape var7 = var5.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var9 = new org.jfree.chart.entity.ContourEntity(var7, "hi!?hi!=100&amp;hi!=1");
    var9.setToolTipText("0x00000001");
    boolean var12 = var2.equals((java.lang.Object)var9);
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var14 = var13.getLocation();
    java.awt.Dimension var15 = var13.preferredSize();
    java.awt.Rectangle var16 = var13.bounds();
    var13.setDoubleBuffered(true);
    var13.setEnabled(false);
    boolean var21 = var2.equals((java.lang.Object)var13);
    boolean var22 = var13.isOpaque();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == true);

  }

  public void test314() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test314"); }


    double[] var2 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var3 = new org.jfree.chart.annotations.XYPolygonAnnotation(var2);
    double[] var6 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var7 = new org.jfree.chart.annotations.XYPolygonAnnotation(var6);
    org.jfree.chart.ClipPath var8 = new org.jfree.chart.ClipPath(var2, var6);
    boolean var9 = var8.isFillPath();
    var8.setClip(false);
    org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var14.setVisible(false);
    org.jfree.chart.plot.CombinedRangeXYPlot var17 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var18 = var17.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var20 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var21 = var20.getMargin();
    var17.setAxisOffset(var21);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var25 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var28 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var29 = var28.getItemLabelFont();
    double var30 = var28.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var33 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var34 = var33.getItemLabelFont();
    java.awt.Shape var35 = var33.getBaseLegendShape();
    var28.setShape(var35);
    var25.setLegendBar(var35);
    org.jfree.data.general.DefaultKeyedValues2DDataset var40 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var43 = new org.jfree.chart.entity.CategoryItemEntity(var35, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var40, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.chart.plot.CombinedRangeXYPlot var44 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var45 = var44.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CategoryMarker var47 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var48 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var50 = var48.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var53 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var54 = var53.getTickLabelPaint();
    var48.setFillPaint(var54, true);
    var47.setLabelPaint(var54);
    org.jfree.chart.annotations.XYShapeAnnotation var58 = new org.jfree.chart.annotations.XYShapeAnnotation(var35, var45, var54);
    var17.setRangeCrosshairPaint(var54);
    var14.setAdvanceLinePaint(var54);
    var8.setFillPaint(var54);
    java.lang.String[] var64 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var65 = new org.jfree.chart.axis.SymbolAxis("hi!", var64);
    org.jfree.chart.plot.CompassPlot var66 = new org.jfree.chart.plot.CompassPlot();
    boolean var67 = var65.equals((java.lang.Object)var66);
    java.lang.String var68 = var66.getPlotType();
    java.awt.Paint var69 = var66.getRoseCenterPaint();
    java.awt.Paint var70 = var66.getBackgroundPaint();
    javax.swing.JPanel var71 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var72 = var71.getPreferredSize();
    java.awt.image.ColorModel var73 = var71.getColorModel();
    var71.updateUI();
    java.lang.String var75 = var71.toString();
    boolean var76 = var71.getInheritsPopupMenu();
    javax.swing.InputMap var77 = var71.getInputMap();
    var71.nextFocus();
    boolean var79 = var71.getInheritsPopupMenu();
    javax.swing.JPanel var80 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var81 = var80.getPreferredSize();
    java.awt.image.ColorModel var82 = var80.getColorModel();
    var80.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var87 = var80.getForeground();
    var71.setForeground(var87);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var90 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var70, (java.awt.Paint)var87, true);
    java.awt.Shape var92 = var90.lookupLegendShape((-1));
    java.awt.Paint var93 = var90.getNegativePaint();
    var8.setDrawPaint(var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var67 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var68 + "' != '" + "Compass Plot"+ "'", var68.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var75 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var75,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var75.equals("org.jfree.chart.ChartPanel[,0,0,0var75,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var76 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var79 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var82);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var87);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var92);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var93);

  }

  public void test315() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test315"); }


    org.jfree.chart.axis.SubCategoryAxis var1 = new org.jfree.chart.axis.SubCategoryAxis("Combined Range XYPlot");
    double var2 = var1.getUpperMargin();
    org.jfree.chart.axis.CategoryLabelPositions var3 = var1.getCategoryLabelPositions();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);

  }

  public void test316() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test316"); }


    org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var0);
    org.jfree.data.time.Year var5 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var6 = new org.jfree.data.time.Month(1, var5);
    org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
    long var8 = var6.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var9 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var11 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var12 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var11);
    var9.remove((org.jfree.data.time.TimePeriod)var11, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var16 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var6, (org.jfree.data.time.RegularTimePeriod)var11);
    var16.setMinorTickMarksVisible(false);
    org.jfree.data.time.Year var20 = new org.jfree.data.time.Year(100);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var21 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    int var22 = var20.compareTo((java.lang.Object)var21);
    var16.setFirst((org.jfree.data.time.RegularTimePeriod)var20);
    java.lang.String var24 = var20.toString();
    var1.add((org.jfree.data.time.RegularTimePeriod)var20, (java.lang.Number)(short)(-1));
    org.jfree.data.time.TimeSeriesTableModel var28 = new org.jfree.data.time.TimeSeriesTableModel(var1, false);
    java.lang.Class var30 = var28.getColumnClass(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "100"+ "'", var24.equals("100"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var30);

  }

  public void test317() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test317"); }


    org.jfree.data.time.Year var3 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var4 = new org.jfree.data.time.Month(1, var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Quarter var5 = new org.jfree.data.time.Quarter((-334), var3);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test318() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test318"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    org.jfree.chart.axis.ValueAxis var1 = var0.getRangeAxis();
    org.jfree.chart.axis.ValueAxis var2 = var0.getRangeAxis();
    var0.setRange(0.0d, 0.02d);
    org.jfree.chart.plot.PiePlot3D var6 = new org.jfree.chart.plot.PiePlot3D();
    org.jfree.chart.renderer.category.BarRenderer3D var13 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var14 = var13.getItemLabelFont();
    java.awt.Shape var15 = var13.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var17 = new org.jfree.chart.entity.ContourEntity(var15, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var19 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var20 = var19.isVisible();
    java.lang.Object var21 = var19.clone();
    java.lang.String var22 = var19.getURLText();
    javax.swing.JPanel var23 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var24 = var23.getPreferredSize();
    java.awt.image.ColorModel var25 = var23.getColorModel();
    var23.updateUI();
    java.lang.String var27 = var23.toString();
    java.awt.Color var28 = var23.getForeground();
    var19.setBackgroundPaint((java.awt.Paint)var28);
    int var30 = var28.getRGB();
    int var31 = var28.getBlue();
    org.jfree.chart.plot.dial.DialPlot var32 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var33 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var34 = var32.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var33);
    org.jfree.chart.plot.dial.DialValueIndicator var35 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var36 = var35.getInsets();
    int var37 = var32.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var35);
    java.awt.Stroke var38 = var35.getOutlineStroke();
    org.jfree.chart.title.TextTitle var40 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var41 = var40.isVisible();
    java.lang.Object var42 = var40.clone();
    java.lang.String var43 = var40.getURLText();
    javax.swing.JPanel var44 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var45 = var44.getPreferredSize();
    java.awt.image.ColorModel var46 = var44.getColorModel();
    var44.updateUI();
    java.lang.String var48 = var44.toString();
    java.awt.Color var49 = var44.getForeground();
    var40.setBackgroundPaint((java.awt.Paint)var49);
    org.jfree.chart.LegendItem var51 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var15, (java.awt.Paint)var28, var38, (java.awt.Paint)var49);
    var6.setBaseSectionOutlinePaint((java.awt.Paint)var28);
    org.jfree.chart.labels.PieSectionLabelGenerator var53 = var6.getLegendLabelToolTipGenerator();
    org.jfree.chart.plot.Crosshair var55 = new org.jfree.chart.plot.Crosshair();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var56 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var58 = var56.getSeriesLinesVisible(10);
    var56.setUseOutlinePaint(true);
    boolean var61 = var55.equals((java.lang.Object)true);
    java.awt.Paint var62 = var55.getLabelPaint();
    var6.setSectionPaint((java.lang.Comparable)0.2d, var62);
    var0.setValuePaint(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var27,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var27.equals("org.jfree.chart.ChartPanel[,0,0,0var27,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var41 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var48 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var48,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var48.equals("org.jfree.chart.ChartPanel[,0,0,0var48,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var61 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);

  }

  public void test319() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test319"); }


    org.jfree.data.general.DatasetGroup var1 = new org.jfree.data.general.DatasetGroup("d");
    org.jfree.chart.plot.dial.DialPlot var2 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var3 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var4 = var2.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var3);
    org.jfree.chart.plot.dial.DialValueIndicator var5 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var6 = var5.getInsets();
    int var7 = var2.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var5);
    boolean var8 = var1.equals((java.lang.Object)var2);
    double var10 = var2.getValue(15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == Double.NaN);

  }

  public void test320() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test320"); }


    org.jfree.data.time.Week var1 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var2 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var1);
    org.jfree.data.time.TimePeriodValue var4 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var1, (java.lang.Number)10);
    org.jfree.data.time.ohlc.OHLCItem var9 = new org.jfree.data.time.ohlc.OHLCItem((org.jfree.data.time.RegularTimePeriod)var1, 100.0d, 0.0d, 0.05d, 0.0d);
    org.jfree.chart.plot.XYPlot var10 = new org.jfree.chart.plot.XYPlot();
    java.lang.Object var11 = var10.clone();
    org.jfree.data.ComparableObjectItem var12 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable)var9, (java.lang.Object)var10);
    org.jfree.data.ComparableObjectSeries var15 = new org.jfree.data.ComparableObjectSeries((java.lang.Comparable)var12, false, false);
    boolean var16 = var15.getAllowDuplicateXValues();
    org.jfree.chart.renderer.xy.XYBlockRenderer var17 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var18 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var19 = var17.findDomainBounds((org.jfree.data.xy.XYDataset)var18);
    java.lang.Number var20 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset)var18);
    var18.add(100.0d, Double.NaN, "jfreechart-onetime-");
    var18.clear();
    int var27 = var18.getItemCount(8);
    boolean var28 = var18.isAutoWidth();
    var15.addChangeListener((org.jfree.data.general.SeriesChangeListener)var18);
    int var33 = org.jfree.chart.renderer.RendererUtilities.findLiveItemsLowerBound((org.jfree.data.xy.XYDataset)var18, 80, (-170.0d), 40.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + Double.NaN+ "'", var20.equals(Double.NaN));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == 0);

  }

  public void test321() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test321"); }


    org.jfree.chart.renderer.xy.XYStepRenderer var0 = new org.jfree.chart.renderer.xy.XYStepRenderer();
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var2 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var3 = var2.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var4 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var5 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var2, (org.jfree.chart.urls.XYURLGenerator)var4);
    boolean var6 = var0.equals((java.lang.Object)var5);
    boolean var9 = var0.getItemCreateEntity(2013, (-1));
    double var10 = var0.getStepPoint();
    var0.setShapesFilled((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 1.0d);

  }

  public void test322() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test322"); }


    org.jfree.chart.plot.dial.StandardDialScale var0 = new org.jfree.chart.plot.dial.StandardDialScale();
    var0.setMajorTickIncrement(10.0d);
    double var4 = var0.valueToAngle(0.3d);
    org.jfree.chart.axis.CategoryLabelPositions var6 = org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(100.0d);
    org.jfree.chart.title.TextTitle var8 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var9 = var8.isVisible();
    java.lang.Object var10 = var8.clone();
    org.jfree.ui.RectangleEdge var11 = var8.getPosition();
    org.jfree.chart.axis.CategoryLabelPosition var12 = var6.getLabelPosition(var11);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var13 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    boolean var14 = var12.equals((java.lang.Object)var13);
    boolean var15 = var0.equals((java.lang.Object)var13);
    org.jfree.chart.renderer.category.BarRenderer3D var18 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var19 = var18.getItemLabelFont();
    double var20 = var18.getItemLabelAnchorOffset();
    java.lang.String[] var24 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var25 = new org.jfree.chart.axis.SymbolAxis("hi!", var24);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var26 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var28 = var26.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var31 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var32 = var31.getTickLabelPaint();
    var26.setFillPaint(var32, true);
    var25.setGridBandAlternatePaint(var32);
    var18.setSeriesFillPaint(2013, var32, false);
    org.jfree.chart.renderer.category.StackedAreaRenderer var39 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
    org.jfree.chart.LegendItem var42 = var39.getLegendItem((-1), (-1));
    java.awt.Paint var43 = var39.getBaseOutlinePaint();
    var18.setShadowPaint(var43);
    boolean var45 = var18.getIncludeBaseInRange();
    boolean var46 = var0.equals((java.lang.Object)var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 174.49d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var46 == false);

  }

  public void test323() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test323"); }


    org.jfree.chart.labels.SymbolicXYItemLabelGenerator var1 = new org.jfree.chart.labels.SymbolicXYItemLabelGenerator();
    org.jfree.chart.urls.TimeSeriesURLGenerator var2 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var3 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer(100, (org.jfree.chart.labels.XYToolTipGenerator)var1, (org.jfree.chart.urls.XYURLGenerator)var2);
    boolean var4 = var3.getPlotShapes();
    org.jfree.data.time.Year var6 = new org.jfree.data.time.Year(100);
    java.lang.String[] var9 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var10 = new org.jfree.chart.axis.SymbolAxis("hi!", var9);
    org.jfree.chart.plot.CompassPlot var11 = new org.jfree.chart.plot.CompassPlot();
    boolean var12 = var10.equals((java.lang.Object)var11);
    java.lang.String var13 = var11.getPlotType();
    java.awt.Paint var14 = var11.getRoseCenterPaint();
    java.awt.Paint var15 = var11.getBackgroundPaint();
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var17 = var16.getPreferredSize();
    java.awt.image.ColorModel var18 = var16.getColorModel();
    var16.updateUI();
    java.lang.String var20 = var16.toString();
    boolean var21 = var16.getInheritsPopupMenu();
    javax.swing.InputMap var22 = var16.getInputMap();
    var16.nextFocus();
    boolean var24 = var16.getInheritsPopupMenu();
    javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var26 = var25.getPreferredSize();
    java.awt.image.ColorModel var27 = var25.getColorModel();
    var25.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var32 = var25.getForeground();
    var16.setForeground(var32);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var35 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var15, (java.awt.Paint)var32, true);
    org.jfree.chart.LegendItem var38 = var35.getLegendItem(10, 51);
    org.jfree.chart.plot.CategoryPlot var39 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var41 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var42 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var41);
    org.jfree.data.time.TimePeriodValue var44 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var41, (java.lang.Number)10);
    var39.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    java.awt.Stroke var46 = var39.getRangeMinorGridlineStroke();
    var35.setBaseStroke(var46);
    int var48 = var6.compareTo((java.lang.Object)var46);
    var3.setBaseStroke(var46);
    java.lang.Object var50 = var3.clone();
    java.awt.Stroke var51 = var3.getShapeStroke();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "Compass Plot"+ "'", var13.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var20.equals("org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var51);

  }

  public void test324() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test324"); }


    org.jfree.chart.renderer.xy.XYLineAndShapeRenderer var0 = new org.jfree.chart.renderer.xy.XYLineAndShapeRenderer();
    org.jfree.chart.labels.BubbleXYItemLabelGenerator var2 = new org.jfree.chart.labels.BubbleXYItemLabelGenerator();
    java.text.DateFormat var3 = var2.getZDateFormat();
    java.text.DateFormat var4 = var2.getYDateFormat();
    java.text.NumberFormat var5 = var2.getZFormat();
    var0.setSeriesItemLabelGenerator(3, (org.jfree.chart.labels.XYItemLabelGenerator)var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test325() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test325"); }


    org.jfree.chart.title.TextTitle var1 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var2 = var1.isVisible();
    java.lang.Object var3 = var1.clone();
    var1.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
    double var9 = var1.getWidth();
    javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var11 = var10.getLocation();
    org.jfree.chart.plot.PolarPlot var12 = new org.jfree.chart.plot.PolarPlot();
    boolean var13 = var12.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var18 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var18.setUpperMargin(10.0d);
    var18.setAxisLineVisible(true);
    javax.swing.JPanel var23 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var24 = var23.getLocation();
    java.awt.Dimension var25 = var23.preferredSize();
    java.awt.Rectangle var26 = var23.bounds();
    java.awt.Point var27 = var12.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var18, (java.awt.geom.Rectangle2D)var26);
    java.awt.Rectangle var28 = var10.getBounds(var26);
    var1.setBounds((java.awt.geom.Rectangle2D)var28);
    var1.setVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);

  }

  public void test326() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test326"); }


    java.lang.Number[][] var0 = new java.lang.Number[][] { };
    java.lang.Number[][] var1 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var2 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var0, var1);
    int var4 = var2.getRowIndex((java.lang.Comparable)'a');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setEndValue(0, (java.lang.Comparable)(-59008924800001L), (java.lang.Number)10);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));

  }

  public void test327() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test327"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    java.awt.Shape var3 = var2.getLegendBar();
    java.lang.Number[][] var6 = new java.lang.Number[][] { };
    java.lang.Number[][] var7 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var8 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var6, var7);
    int var9 = var8.getRowCount();
    org.jfree.data.xy.OHLCDataItem[] var11 = new org.jfree.data.xy.OHLCDataItem[] { };
    org.jfree.data.xy.DefaultOHLCDataset var12 = new org.jfree.data.xy.DefaultOHLCDataset((java.lang.Comparable)0.05d, var11);
    var8.setSeriesKeys((java.lang.Comparable[])var11);
    java.lang.Object var14 = var8.clone();
    org.jfree.data.time.Second var16 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var17 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var16);
    var17.setMaximumItemCount(0);
    boolean var20 = var17.getNotify();
    double var21 = var17.getMaxY();
    java.lang.Object var22 = var17.clone();
    org.jfree.data.time.Year var25 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var26 = new org.jfree.data.time.Month(1, var25);
    org.jfree.data.time.Year var28 = new org.jfree.data.time.Year();
    org.jfree.data.gantt.Task var29 = new org.jfree.data.gantt.Task("item", (org.jfree.data.time.TimePeriod)var28);
    org.jfree.data.time.TimeSeries var30 = var17.createCopy((org.jfree.data.time.RegularTimePeriod)var25, (org.jfree.data.time.RegularTimePeriod)var28);
    org.jfree.chart.entity.CategoryItemEntity var31 = new org.jfree.chart.entity.CategoryItemEntity(var3, "DomainOrder.NONE", "[Dec 31, 1969 4:00:00 PM --> Dec 31, 1969 4:00:00 PM]", (org.jfree.data.category.CategoryDataset)var8, (java.lang.Comparable)3, (java.lang.Comparable)var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);

  }

  public void test328() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test328"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    boolean var2 = var0.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var4 = new org.jfree.chart.plot.ContourPlot();
    var4.setOutlineVisible(false);
    var0.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var4);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(1.0d, "jfreechart-onetime-");
    boolean var11 = var4.isCompatibleDomainAxis((org.jfree.chart.axis.ValueAxis)var10);
    org.jfree.chart.axis.LogAxis var12 = new org.jfree.chart.axis.LogAxis();
    var12.setFixedDimension((-170.0d));
    boolean var16 = var12.equals((java.lang.Object)1.5d);
    org.jfree.chart.title.TextTitle var19 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var20 = var19.isVisible();
    java.lang.Object var21 = var19.clone();
    var19.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
    double var27 = var19.getWidth();
    javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var29 = var28.getLocation();
    org.jfree.chart.plot.PolarPlot var30 = new org.jfree.chart.plot.PolarPlot();
    boolean var31 = var30.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var36 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var36.setUpperMargin(10.0d);
    var36.setAxisLineVisible(true);
    javax.swing.JPanel var41 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var42 = var41.getLocation();
    java.awt.Dimension var43 = var41.preferredSize();
    java.awt.Rectangle var44 = var41.bounds();
    java.awt.Point var45 = var30.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var36, (java.awt.geom.Rectangle2D)var44);
    java.awt.Rectangle var46 = var28.getBounds(var44);
    var19.setBounds((java.awt.geom.Rectangle2D)var46);
    org.jfree.chart.title.TextTitle var49 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var50 = var49.isVisible();
    java.lang.Object var51 = var49.clone();
    org.jfree.ui.RectangleEdge var52 = var49.getPosition();
    double var53 = var12.java2DToValue(Double.NaN, (java.awt.geom.Rectangle2D)var46, var52);
    var4.setColorBarLocation(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == Double.NaN);

  }

  public void test329() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test329"); }


    org.jfree.data.xy.XYSeries var4 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var4.add((-1.0d), (-1.0d), false);
    double[][] var9 = var4.toArray();
    org.jfree.data.category.CategoryDataset var10 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("SeriesRenderingOrder.REVERSE", "CategoryLabelWidthType.RANGE", var9);
    java.lang.Object[][] var11 = org.jfree.data.contour.DefaultContourDataset.formObjectArray(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test330() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test330"); }


    org.jfree.data.xy.Vector var2 = new org.jfree.data.xy.Vector(2.0d, 0.3d);
    double var3 = var2.getX();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2.0d);

  }

  public void test331() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test331"); }


    org.jfree.data.xy.OHLCDataItem[] var1 = new org.jfree.data.xy.OHLCDataItem[] { };
    org.jfree.data.xy.DefaultOHLCDataset var2 = new org.jfree.data.xy.DefaultOHLCDataset((java.lang.Comparable)0.05d, var1);
    var2.sortDataByDate();
    java.lang.Object var4 = var2.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test332() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test332"); }


    double[] var2 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var3 = new org.jfree.chart.annotations.XYPolygonAnnotation(var2);
    double[] var6 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var7 = new org.jfree.chart.annotations.XYPolygonAnnotation(var6);
    org.jfree.chart.ClipPath var8 = new org.jfree.chart.ClipPath(var2, var6);
    boolean var9 = var8.isFillPath();
    var8.setClip(false);
    org.jfree.chart.plot.CategoryPlot var12 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var14 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var15 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var14);
    org.jfree.data.time.TimePeriodValue var17 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var14, (java.lang.Number)10);
    var12.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var19 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var21 = var19.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var24 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var25 = var24.getTickLabelPaint();
    var19.setFillPaint(var25, true);
    var12.setDomainCrosshairPaint(var25);
    var8.setFillPaint(var25);
    double[] var30 = var8.getYValue();
    java.awt.Paint var31 = var8.getDrawPaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test333() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test333"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var3 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var4 = var3.getMargin();
    var0.setAxisOffset(var4);
    var0.setRangeMinorGridlinesVisible(false);
    org.jfree.chart.plot.CombinedRangeXYPlot var8 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var9 = var8.getRangeZeroBaselineStroke();
    java.lang.String var10 = var8.getPlotType();
    org.jfree.chart.plot.CategoryMarker var12 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var13 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var15 = var13.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var18 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var19 = var18.getTickLabelPaint();
    var13.setFillPaint(var19, true);
    var12.setLabelPaint(var19);
    boolean var23 = var8.removeRangeMarker((org.jfree.chart.plot.Marker)var12);
    org.jfree.chart.axis.AxisLocation var24 = var8.getDomainAxisLocation();
    org.jfree.data.time.Week var26 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var27 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var26);
    org.jfree.data.time.TimePeriodValue var29 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var26, (java.lang.Number)10);
    org.jfree.data.time.ohlc.OHLCItem var34 = new org.jfree.data.time.ohlc.OHLCItem((org.jfree.data.time.RegularTimePeriod)var26, 100.0d, 0.0d, 0.05d, 0.0d);
    org.jfree.chart.plot.XYPlot var35 = new org.jfree.chart.plot.XYPlot();
    java.lang.Object var36 = var35.clone();
    org.jfree.data.ComparableObjectItem var37 = new org.jfree.data.ComparableObjectItem((java.lang.Comparable)var34, (java.lang.Object)var35);
    double var38 = var34.getLowValue();
    boolean var39 = var24.equals((java.lang.Object)var34);
    var0.setDomainAxisLocation(var24, false);
    
    // Checks the contract:  equals-hashcode on var0 and var8
    assertTrue("Contract failed: equals-hashcode on var0 and var8", var0.equals(var8) ? var0.hashCode() == var8.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var8 and var0
    assertTrue("Contract failed: equals-hashcode on var8 and var0", var8.equals(var0) ? var8.hashCode() == var0.hashCode() : true);

  }

  public void test334() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test334"); }


    org.jfree.chart.util.RelativeDateFormat var1 = new org.jfree.chart.util.RelativeDateFormat();
    boolean var2 = var1.getShowZeroHours();
    org.jfree.chart.labels.StandardCategoryItemLabelGenerator var3 = new org.jfree.chart.labels.StandardCategoryItemLabelGenerator("0x00000000", (java.text.DateFormat)var1);
    java.lang.Object var4 = var1.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test335() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test335"); }


    org.jfree.chart.renderer.category.BarRenderer3D var3 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var4 = var3.getItemLabelFont();
    org.jfree.data.general.DefaultKeyedValues2DDataset var5 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var5.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var11 = var3.findRangeBounds((org.jfree.data.category.CategoryDataset)var5, false);
    org.jfree.chart.StandardChartTheme var14 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    org.jfree.chart.plot.DrawingSupplier var15 = var14.getDrawingSupplier();
    org.jfree.chart.plot.dial.StandardDialScale var16 = new org.jfree.chart.plot.dial.StandardDialScale();
    var16.setMajorTickIncrement(10.0d);
    java.awt.Paint var19 = var16.getMinorTickPaint();
    var14.setTickLabelPaint(var19);
    java.lang.String[] var23 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var24 = new org.jfree.chart.axis.SymbolAxis("hi!", var23);
    org.jfree.chart.plot.CompassPlot var25 = new org.jfree.chart.plot.CompassPlot();
    boolean var26 = var24.equals((java.lang.Object)var25);
    java.lang.String var27 = var25.getPlotType();
    java.awt.Paint var28 = var25.getRoseCenterPaint();
    java.awt.Paint var29 = var25.getBackgroundPaint();
    javax.swing.JPanel var30 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var31 = var30.getPreferredSize();
    java.awt.image.ColorModel var32 = var30.getColorModel();
    var30.updateUI();
    java.lang.String var34 = var30.toString();
    boolean var35 = var30.getInheritsPopupMenu();
    javax.swing.InputMap var36 = var30.getInputMap();
    var30.nextFocus();
    boolean var38 = var30.getInheritsPopupMenu();
    javax.swing.JPanel var39 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var40 = var39.getPreferredSize();
    java.awt.image.ColorModel var41 = var39.getColorModel();
    var39.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var46 = var39.getForeground();
    var30.setForeground(var46);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var49 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var29, (java.awt.Paint)var46, true);
    org.jfree.chart.LegendItem var52 = var49.getLegendItem(10, 51);
    org.jfree.chart.plot.CategoryPlot var53 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var55 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var56 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var55);
    org.jfree.data.time.TimePeriodValue var58 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var55, (java.lang.Number)10);
    var53.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    java.awt.Stroke var60 = var53.getRangeMinorGridlineStroke();
    var49.setBaseStroke(var60);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var64 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(100.0d, false);
    org.jfree.chart.needle.PinNeedle var65 = new org.jfree.chart.needle.PinNeedle();
    org.jfree.chart.plot.CategoryPlot var66 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var68 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var69 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var68);
    org.jfree.data.time.TimePeriodValue var71 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var68, (java.lang.Number)10);
    var66.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var73 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var75 = var73.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var78 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var79 = var78.getTickLabelPaint();
    var73.setFillPaint(var79, true);
    var66.setDomainCrosshairPaint(var79);
    var65.setOutlinePaint(var79);
    var64.setOutlinePaint(var79);
    org.jfree.chart.plot.MeterInterval var85 = new org.jfree.chart.plot.MeterInterval("RectangleConstraint[LengthConstraintType.FIXED: width=0.04, height=0.0]", var11, var19, var60, var79);
    
    // Checks the contract:  equals-hashcode on var56 and var69
    assertTrue("Contract failed: equals-hashcode on var56 and var69", var56.equals(var69) ? var56.hashCode() == var69.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var69 and var56
    assertTrue("Contract failed: equals-hashcode on var69 and var56", var69.equals(var56) ? var69.hashCode() == var56.hashCode() : true);

  }

  public void test336() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test336"); }


    org.jfree.chart.block.BlockContainer var0 = new org.jfree.chart.block.BlockContainer();
    org.jfree.chart.title.CompositeTitle var1 = new org.jfree.chart.title.CompositeTitle(var0);

  }

  public void test337() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test337"); }


    org.jfree.chart.renderer.category.ScatterRenderer var0 = new org.jfree.chart.renderer.category.ScatterRenderer();
    var0.setItemMargin(0.2d);
    var0.setUseSeriesOffset(false);

  }

  public void test338() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test338"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var0.clearDomainMarkers();
    boolean var2 = var0.isRangeMinorGridlinesVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test339() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test339"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    boolean var8 = var0.getDrawSharedDomainAxis();
    var0.clearRangeMarkers(0);
    org.jfree.chart.plot.Crosshair var11 = new org.jfree.chart.plot.Crosshair();
    double var12 = var11.getValue();
    double var13 = var11.getLabelYOffset();
    java.awt.Font var14 = var11.getLabelFont();
    var0.setNoDataMessageFont(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test340() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test340"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isCounterClockwise();
    var0.setRadiusGridlinesVisible(false);
    int var4 = var0.getDatasetCount();
    boolean var5 = var0.isAngleGridlinesVisible();
    org.jfree.data.time.Year var9 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var10 = new org.jfree.data.time.Month(1, var9);
    org.jfree.data.time.RegularTimePeriod var11 = var10.previous();
    long var12 = var10.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var13 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var15 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var16 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var15);
    var13.remove((org.jfree.data.time.TimePeriod)var15, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var20 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var10, (org.jfree.data.time.RegularTimePeriod)var15);
    var20.setMinorTickMarksVisible(false);
    java.awt.Stroke var23 = var20.getMinorTickMarkStroke();
    var0.setAngleGridlineStroke(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);

  }

  public void test341() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test341"); }


    org.jfree.data.xy.XYIntervalSeriesCollection var0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
    org.jfree.data.xy.XYBarDataset var2 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var0, 10.0d);
    org.jfree.chart.plot.CombinedRangeXYPlot var3 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var4 = var3.getRangeZeroBaselineStroke();
    java.lang.String var5 = var3.getPlotType();
    boolean var6 = var0.hasListener((java.util.EventListener)var3);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var9 = var0.getEndX((-2), 100);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var5 + "' != '" + "Combined Range XYPlot"+ "'", var5.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test342() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test342"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var2 = var0.findDomainBounds((org.jfree.data.xy.XYDataset)var1);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.labels.ItemLabelPosition var10 = var5.getNegativeItemLabelPosition(0, 0);
    double var11 = var10.getAngle();
    var0.setNegativeItemLabelPosition(var10);
    org.jfree.chart.labels.XYSeriesLabelGenerator var13 = var0.getLegendItemToolTipGenerator();
    org.jfree.chart.title.LegendTitle var14 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var0);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var16 = var15.getDomainCrosshairColumnKey();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var17.setUseSeriesOffset(true);
    var17.setBaseSeriesVisible(true);
    var17.setAutoPopulateSeriesShape(false);
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var24 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var17};
    var15.setRenderers(var24);
    var14.setSources((org.jfree.chart.LegendItemSource[])var24);
    org.jfree.ui.RectangleAnchor var27 = var14.getLegendItemGraphicLocation();
    java.lang.Object var28 = var14.clone();
    org.jfree.util.SortOrder var29 = var14.getSortOrder();
    org.jfree.chart.plot.CombinedRangeXYPlot var30 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var31 = var30.getRangeZeroBaselineStroke();
    java.lang.String var32 = var30.getPlotType();
    org.jfree.chart.plot.CategoryMarker var34 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var35 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var37 = var35.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var40 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var41 = var40.getTickLabelPaint();
    var35.setFillPaint(var41, true);
    var34.setLabelPaint(var41);
    boolean var45 = var30.removeRangeMarker((org.jfree.chart.plot.Marker)var34);
    javax.swing.JPanel var46 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var47 = var46.getPreferredSize();
    java.awt.image.ColorModel var48 = var46.getColorModel();
    var46.updateUI();
    java.lang.String var50 = var46.toString();
    boolean var51 = var46.getInheritsPopupMenu();
    double[] var54 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var55 = new org.jfree.chart.annotations.XYPolygonAnnotation(var54);
    java.lang.Object var56 = var55.clone();
    org.jfree.chart.event.AnnotationChangeEvent var57 = new org.jfree.chart.event.AnnotationChangeEvent((java.lang.Object)var46, (org.jfree.chart.annotations.Annotation)var55);
    var30.annotationChanged(var57);
    org.jfree.ui.RectangleInsets var59 = var30.getAxisOffset();
    var14.setItemLabelPadding(var59);
    org.jfree.chart.plot.CombinedRangeXYPlot var61 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var62 = var61.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var64 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var65 = var64.getMargin();
    var61.setAxisOffset(var65);
    var14.setItemLabelPadding(var65);
    
    // Checks the contract:  equals-hashcode on var30 and var61
    assertTrue("Contract failed: equals-hashcode on var30 and var61", var30.equals(var61) ? var30.hashCode() == var61.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var61 and var30
    assertTrue("Contract failed: equals-hashcode on var61 and var30", var61.equals(var30) ? var61.hashCode() == var30.hashCode() : true);

  }

  public void test343() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test343"); }


    org.jfree.data.general.WaferMapDataset var3 = new org.jfree.data.general.WaferMapDataset(2, 15, (java.lang.Number)5.0d);
    java.lang.Number var6 = var3.getChipValue(52, 20);
    boolean var8 = var3.isMaxValue((java.lang.Number)52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);

  }

  public void test344() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test344"); }


    org.jfree.chart.renderer.Outlier var3 = new org.jfree.chart.renderer.Outlier((-170.0d), (-1.0d), (-0.7853981633974483d));
    double var4 = var3.getY();
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var8 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var9 = var8.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var10 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var11 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var8, (org.jfree.chart.urls.XYURLGenerator)var10);
    org.jfree.chart.renderer.xy.StandardXYItemRenderer var12 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, (org.jfree.chart.labels.XYToolTipGenerator)var8);
    java.text.NumberFormat var13 = var8.getYFormat();
    org.jfree.chart.labels.StandardCategoryToolTipGenerator var14 = new org.jfree.chart.labels.StandardCategoryToolTipGenerator("jfreechart-", var13);
    boolean var15 = var3.equals((java.lang.Object)var13);
    double var16 = var3.getY();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-0.21460183660255172d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == (-0.21460183660255172d));

  }

  public void test345() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test345"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var1 = var0.getLocation();
    java.awt.Dimension var2 = var0.preferredSize();
    java.awt.Rectangle var3 = var0.bounds();
    java.awt.event.InputMethodListener[] var4 = var0.getInputMethodListeners();
    java.awt.event.FocusListener[] var5 = var0.getFocusListeners();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test346() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test346"); }


    org.jfree.chart.renderer.category.LevelRenderer var0 = new org.jfree.chart.renderer.category.LevelRenderer();
    double var1 = var0.getItemMargin();
    double var2 = var0.getMaximumItemWidth();
    var0.setMaxItemWidth(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1.0d);

  }

  public void test347() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test347"); }


    org.jfree.chart.plot.CombinedRangeCategoryPlot var0 = new org.jfree.chart.plot.CombinedRangeCategoryPlot();
    org.jfree.chart.annotations.CategoryPointerAnnotation var5 = new org.jfree.chart.annotations.CategoryPointerAnnotation("[size=0x00000000]", (java.lang.Comparable)1043495433, 0.25d, 100.0d);
    boolean var7 = var0.removeAnnotation((org.jfree.chart.annotations.CategoryAnnotation)var5, false);
    double var8 = var5.getArrowWidth();
    var5.setBaseRadius(0.48d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 3.0d);

  }

  public void test348() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test348"); }


    org.jfree.chart.urls.StandardPieURLGenerator var3 = new org.jfree.chart.urls.StandardPieURLGenerator("hi!", "d", "Combined Range XYPlot");
    org.jfree.chart.event.RendererChangeEvent var4 = new org.jfree.chart.event.RendererChangeEvent((java.lang.Object)"d");

  }

  public void test349() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test349"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var2 = var0.findDomainBounds((org.jfree.data.xy.XYDataset)var1);
    java.lang.Number var3 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue((org.jfree.data.xy.XYDataset)var1);
    var1.add(100.0d, Double.NaN, "jfreechart-onetime-");
    var1.clear();
    int var10 = var1.getItemCount(8);
    boolean var11 = var1.isAutoWidth();
    var1.setIntervalWidth(100.0d);
    org.jfree.data.xy.IntervalXYDelegate var14 = new org.jfree.data.xy.IntervalXYDelegate((org.jfree.data.xy.XYDataset)var1);
    double var15 = var14.getIntervalPositionFactor();
    org.jfree.data.time.Year var17 = new org.jfree.data.time.Year();
    org.jfree.data.gantt.Task var18 = new org.jfree.data.gantt.Task("item", (org.jfree.data.time.TimePeriod)var17);
    boolean var19 = var14.equals((java.lang.Object)var17);
    org.jfree.data.Range var21 = var14.getDomainBounds(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var3 + "' != '" + Double.NaN+ "'", var3.equals(Double.NaN));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 0.5d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);

  }

  public void test350() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test350"); }


    org.jfree.chart.util.RelativeDateFormat var1 = new org.jfree.chart.util.RelativeDateFormat();
    boolean var2 = var1.getShowZeroHours();
    var1.setPositivePrefix("d");
    var1.setMinuteSuffix("hi!?hi!=100&amp;hi!=1");
    boolean var7 = var1.getShowZeroHours();
    javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var9 = var8.getPreferredSize();
    javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var8.setNextFocusableComponent((java.awt.Component)var10);
    java.util.Locale var12 = var10.getLocale();
    org.jfree.chart.axis.TickUnitSource var13 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var12);
    java.text.NumberFormat var14 = java.text.NumberFormat.getPercentInstance(var12);
    var1.setMinuteFormatter(var14);
    java.lang.String var16 = var1.getSecondSuffix();
    org.jfree.data.xy.VectorSeriesCollection var17 = new org.jfree.data.xy.VectorSeriesCollection();
    org.jfree.chart.util.RelativeDateFormat var19 = new org.jfree.chart.util.RelativeDateFormat();
    var19.setShowZeroHours(true);
    org.jfree.chart.axis.MonthDateFormat var22 = new org.jfree.chart.axis.MonthDateFormat();
    org.jfree.chart.util.RelativeDateFormat var24 = new org.jfree.chart.util.RelativeDateFormat();
    boolean var25 = var24.getShowZeroHours();
    org.jfree.chart.labels.StandardCategoryItemLabelGenerator var26 = new org.jfree.chart.labels.StandardCategoryItemLabelGenerator("0x00000000", (java.text.DateFormat)var24);
    org.jfree.chart.labels.BubbleXYItemLabelGenerator var27 = new org.jfree.chart.labels.BubbleXYItemLabelGenerator("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (java.text.DateFormat)var19, (java.text.DateFormat)var22, (java.text.DateFormat)var24);
    boolean var28 = var17.equals((java.lang.Object)var19);
    org.jfree.chart.labels.StandardXYItemLabelGenerator var29 = new org.jfree.chart.labels.StandardXYItemLabelGenerator("(0.04, 0.05)", (java.text.DateFormat)var1, (java.text.DateFormat)var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var16 + "' != '" + "s"+ "'", var16.equals("s"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == false);

  }

  public void test351() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test351"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var1 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((java.lang.Comparable)(short)10);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var8 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var11 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var12 = var11.getItemLabelFont();
    double var13 = var11.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var16 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var17 = var16.getItemLabelFont();
    java.awt.Shape var18 = var16.getBaseLegendShape();
    var11.setShape(var18);
    var8.setLegendBar(var18);
    var8.setDrawBarOutline(true);
    org.jfree.chart.title.LegendTitle var23 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var8);
    org.jfree.chart.annotations.XYDrawableAnnotation var24 = new org.jfree.chart.annotations.XYDrawableAnnotation(100.0d, 10.0d, 0.0d, (-1.0d), (org.jfree.ui.Drawable)var23);
    var24.setURL("");
    boolean var27 = var1.equals((java.lang.Object)var24);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var30 = var1.getMinOutlier(500, 20);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test352() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test352"); }


    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var0 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    java.awt.Paint var1 = var0.getShapePaint();
    java.awt.Shape var2 = var0.getLegendArea();
    org.jfree.data.xy.VectorDataItem var7 = new org.jfree.data.xy.VectorDataItem((-1.0d), 10.0d, 2.0d, (-1.0d));
    double var8 = var7.getXValue();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var11 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    double var16 = var14.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var19 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var20 = var19.getItemLabelFont();
    java.awt.Shape var21 = var19.getBaseLegendShape();
    var14.setShape(var21);
    var11.setLegendBar(var21);
    org.jfree.data.general.DefaultKeyedValues2DDataset var26 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var29 = new org.jfree.chart.entity.CategoryItemEntity(var21, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var26, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.chart.plot.CombinedRangeXYPlot var30 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var31 = var30.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CategoryMarker var33 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var34 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var36 = var34.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var39 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var40 = var39.getTickLabelPaint();
    var34.setFillPaint(var40, true);
    var33.setLabelPaint(var40);
    org.jfree.chart.annotations.XYShapeAnnotation var44 = new org.jfree.chart.annotations.XYShapeAnnotation(var21, var31, var40);
    boolean var45 = var7.equals((java.lang.Object)var21);
    var0.setLegendArea(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == false);

  }

  public void test353() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test353"); }


    org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var1 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((java.lang.Comparable)(short)10);
    org.jfree.data.general.DatasetGroup var2 = var1.getGroup();
    java.lang.Comparable var4 = var1.getSeriesKey(51);
    int var6 = var1.getItemCount(15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var9 = var1.getMaxRegularValue(2, 80);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + (short)10+ "'", var4.equals((short)10));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0);

  }

  public void test354() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test354"); }


    org.jfree.chart.plot.dial.ArcDialFrame var0 = new org.jfree.chart.plot.dial.ArcDialFrame();
    java.awt.Paint var1 = var0.getBackgroundPaint();
    var0.setInnerRadius(0.14d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test355() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test355"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var1 = var0.getLocation();
    java.awt.Dimension var2 = var0.preferredSize();
    java.awt.Rectangle var3 = var0.bounds();
    var0.setDoubleBuffered(true);
    org.jfree.chart.axis.CyclicNumberAxis var8 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var9 = var8.getTickLabelPaint();
    var8.setVisible(false);
    java.lang.Object var12 = var8.clone();
    org.jfree.chart.plot.CombinedRangeXYPlot var13 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    org.jfree.chart.annotations.XYPointerAnnotation var18 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var19 = var18.getLabelOffset();
    org.jfree.ui.TextAnchor var20 = var18.getRotationAnchor();
    boolean var21 = var13.removeAnnotation((org.jfree.chart.annotations.XYAnnotation)var18);
    org.jfree.chart.StandardChartTheme var24 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var25 = var24.getLegendItemPaint();
    java.awt.Paint var26 = var24.getSubtitlePaint();
    java.awt.Font var27 = var24.getLargeFont();
    var18.setFont(var27);
    var8.setLabelFont(var27);
    var0.setFont(var27);
    int var31 = var0.getY();
    javax.swing.plaf.PanelUI var32 = var0.getUI();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test356() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test356"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var11 = new org.jfree.chart.entity.ContourEntity(var9, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var14 = var13.isVisible();
    java.lang.Object var15 = var13.clone();
    java.lang.String var16 = var13.getURLText();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.image.ColorModel var19 = var17.getColorModel();
    var17.updateUI();
    java.lang.String var21 = var17.toString();
    java.awt.Color var22 = var17.getForeground();
    var13.setBackgroundPaint((java.awt.Paint)var22);
    int var24 = var22.getRGB();
    int var25 = var22.getBlue();
    org.jfree.chart.plot.dial.DialPlot var26 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var27 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var28 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var27);
    org.jfree.chart.plot.dial.DialValueIndicator var29 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var30 = var29.getInsets();
    int var31 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var29);
    java.awt.Stroke var32 = var29.getOutlineStroke();
    org.jfree.chart.title.TextTitle var34 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var35 = var34.isVisible();
    java.lang.Object var36 = var34.clone();
    java.lang.String var37 = var34.getURLText();
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.image.ColorModel var40 = var38.getColorModel();
    var38.updateUI();
    java.lang.String var42 = var38.toString();
    java.awt.Color var43 = var38.getForeground();
    var34.setBackgroundPaint((java.awt.Paint)var43);
    org.jfree.chart.LegendItem var45 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var9, (java.awt.Paint)var22, var32, (java.awt.Paint)var43);
    var0.setBaseSectionOutlinePaint((java.awt.Paint)var22);
    double var47 = var0.getLabelLinkMargin();
    double var48 = var0.getShadowYOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 0.025d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == 4.0d);

  }

  public void test357() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test357"); }


    org.jfree.chart.renderer.category.LevelRenderer var0 = new org.jfree.chart.renderer.category.LevelRenderer();
    double var1 = var0.getItemMargin();
    org.jfree.chart.StrokeMap var2 = new org.jfree.chart.StrokeMap();
    java.lang.Object var3 = var2.clone();
    boolean var4 = var0.equals((java.lang.Object)var2);
    org.jfree.data.time.Year var7 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var8 = new org.jfree.data.time.Month(1, var7);
    java.awt.Stroke var9 = var2.getStroke((java.lang.Comparable)1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);

  }

  public void test358() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test358"); }


    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var2 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var3 = var2.isOutline();
    var2.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var8 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var9 = var8.getLegendItemPaint();
    var2.setShapePaint(var9);
    org.jfree.chart.plot.IntervalMarker var11 = new org.jfree.chart.plot.IntervalMarker(0.2d, 0.04d, var9);
    org.jfree.ui.GradientPaintTransformer var12 = var11.getGradientPaintTransformer();
    java.lang.Object var13 = var11.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test359() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test359"); }


    org.jfree.chart.plot.CategoryMarker var1 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var2 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var4 = var2.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var7 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var8 = var7.getTickLabelPaint();
    var2.setFillPaint(var8, true);
    var1.setLabelPaint(var8);
    java.awt.Font var12 = var1.getLabelFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);

  }

  public void test360() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test360"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    int var7 = var6.getCursorType();
    boolean var8 = var6.isLocationByPlatform();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test361() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test361"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    org.jfree.chart.axis.ValueAxis var1 = var0.getRangeAxis();
    java.lang.Object var2 = var0.clone();
    int var3 = var0.getUnits();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 2);

  }

  public void test362() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test362"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    double var4 = var2.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    var2.setShape(var9);
    org.jfree.chart.StandardChartTheme var13 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var14 = var13.getLegendItemPaint();
    var2.setItemLabelPaint(var14);
    java.awt.Paint var17 = var2.lookupSeriesFillPaint((-1));
    var2.setItemLabelsVisible((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test363() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test363"); }


    org.jfree.data.xy.XYIntervalSeriesCollection var0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var3 = var0.getEndXValue(20, 10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test364() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test364"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    org.jfree.chart.axis.AxisLocation var16 = var0.getDomainAxisLocation();
    org.jfree.chart.axis.AxisLocation var17 = org.jfree.chart.axis.AxisLocation.getOpposite(var16);
    org.jfree.chart.renderer.xy.XYBlockRenderer var18 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.chart.renderer.PaintScale var19 = var18.getPaintScale();
    org.jfree.chart.renderer.PaintScale var20 = var18.getPaintScale();
    boolean var21 = var18.getDataBoundsIncludesVisibleSeriesOnly();
    org.jfree.ui.RectangleAnchor var22 = var18.getBlockAnchor();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var25 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var28 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var29 = var28.getItemLabelFont();
    double var30 = var28.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var33 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var34 = var33.getItemLabelFont();
    java.awt.Shape var35 = var33.getBaseLegendShape();
    var28.setShape(var35);
    var25.setLegendBar(var35);
    var25.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var40 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var41 = var25.findDomainBounds((org.jfree.data.xy.XYDataset)var40);
    org.jfree.data.xy.XYIntervalSeriesCollection var42 = new org.jfree.data.xy.XYIntervalSeriesCollection();
    org.jfree.data.xy.XYBarDataset var44 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var42, 10.0d);
    var44.setBarWidth(2.0d);
    org.jfree.chart.axis.AxisCollection var47 = new org.jfree.chart.axis.AxisCollection();
    java.util.List var48 = var47.getAxesAtLeft();
    org.jfree.data.general.DefaultKeyedValues2DDataset var49 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var49.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var54 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var49);
    org.jfree.data.Range var56 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds((org.jfree.data.category.CategoryDataset)var49, true);
    org.jfree.data.Range var58 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds((org.jfree.data.xy.XYDataset)var44, var48, var56, true);
    org.jfree.data.Range var60 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset)var40, var48, true);
    java.lang.Number var61 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue((org.jfree.data.xy.XYDataset)var40);
    org.jfree.data.Range var62 = var18.findRangeBounds((org.jfree.data.xy.XYDataset)var40);
    org.jfree.chart.plot.ThermometerPlot var63 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var64 = var63.isDomainZoomable();
    org.jfree.chart.plot.PlotOrientation var65 = var63.getOrientation();
    boolean var66 = var40.equals((java.lang.Object)var65);
    org.jfree.ui.RectangleEdge var67 = org.jfree.chart.plot.Plot.resolveRangeAxisLocation(var17, var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var54 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var61 + "' != '" + Double.NaN+ "'", var61.equals(Double.NaN));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);

  }

  public void test365() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test365"); }


    org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
    var1.clearSeriesPaints(false);
    org.jfree.chart.LegendItem var6 = var1.getLegendItem(15, 2013);
    var1.setShapesVisible((java.lang.Boolean)true);
    var1.setLinesVisible((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test366() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test366"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setNextFocusableComponent((java.awt.Component)var2);
    java.util.Locale var4 = var2.getLocale();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    java.awt.Dimension var7 = var2.getSize(var6);
    java.awt.event.ContainerListener[] var8 = var2.getContainerListeners();
    var2.removeNotify();
    boolean var12 = var2.contains(8, (-2));
    java.awt.im.InputMethodRequests var13 = var2.getInputMethodRequests();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test367() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test367"); }


    org.jfree.chart.annotations.XYPointerAnnotation var4 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    var4.setBaseRadius(1.05d);
    var4.setAngle(100.0d);
    double var9 = var4.getArrowWidth();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 3.0d);

  }

  public void test368() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test368"); }


    org.jfree.data.xy.VectorSeriesCollection var0 = new org.jfree.data.xy.VectorSeriesCollection();
    org.jfree.chart.util.RelativeDateFormat var2 = new org.jfree.chart.util.RelativeDateFormat();
    var2.setShowZeroHours(true);
    org.jfree.chart.axis.MonthDateFormat var5 = new org.jfree.chart.axis.MonthDateFormat();
    org.jfree.chart.util.RelativeDateFormat var7 = new org.jfree.chart.util.RelativeDateFormat();
    boolean var8 = var7.getShowZeroHours();
    org.jfree.chart.labels.StandardCategoryItemLabelGenerator var9 = new org.jfree.chart.labels.StandardCategoryItemLabelGenerator("0x00000000", (java.text.DateFormat)var7);
    org.jfree.chart.labels.BubbleXYItemLabelGenerator var10 = new org.jfree.chart.labels.BubbleXYItemLabelGenerator("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (java.text.DateFormat)var2, (java.text.DateFormat)var5, (java.text.DateFormat)var7);
    boolean var11 = var0.equals((java.lang.Object)var2);
    int var12 = var0.getSeriesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test369() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test369"); }


    org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
    var0.setValue((java.lang.Comparable)4.0d, (-0.7853981633974483d));
    var0.setValue((java.lang.Comparable)10.0f, (java.lang.Number)1.05d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeValue((java.lang.Comparable)"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]");
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }

  }

  public void test370() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test370"); }


    org.jfree.chart.renderer.xy.XYShapeRenderer var0 = new org.jfree.chart.renderer.xy.XYShapeRenderer();
    org.jfree.data.xy.XYSeries var3 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    java.lang.Object var4 = var3.clone();
    int var5 = var3.getMaximumItemCount();
    javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var7 = var6.getPreferredSize();
    boolean var8 = var6.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var10 = new org.jfree.chart.plot.ContourPlot();
    var10.setOutlineVisible(false);
    var6.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var10);
    org.jfree.chart.urls.XYURLGenerator var14 = var10.getURLGenerator();
    var3.removePropertyChangeListener((java.beans.PropertyChangeListener)var10);
    float var16 = var10.getForegroundAlpha();
    double var17 = var10.getRangeCrosshairValue();
    java.lang.String[] var20 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var21 = new org.jfree.chart.axis.SymbolAxis("hi!", var20);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var22 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var24 = var22.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var27 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var28 = var27.getTickLabelPaint();
    var22.setFillPaint(var28, true);
    var21.setGridBandAlternatePaint(var28);
    boolean var32 = var10.isCompatibleDomainAxis((org.jfree.chart.axis.ValueAxis)var21);
    org.jfree.chart.plot.CompassPlot var33 = new org.jfree.chart.plot.CompassPlot();
    var33.setDrawBorder(true);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var36 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var37 = var36.getBaseItemLabelsVisible();
    var36.setSeriesShapesFilled(1, (java.lang.Boolean)false);
    var36.setDrawOutlines(true);
    org.jfree.chart.renderer.category.BarRenderer3D var45 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var46 = var45.getItemLabelFont();
    double var47 = var45.getItemLabelAnchorOffset();
    java.awt.Shape var49 = var45.getSeriesShape(1);
    org.jfree.chart.renderer.category.BarRenderer3D var53 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var54 = var53.getItemLabelFont();
    double var55 = var53.getItemLabelAnchorOffset();
    org.jfree.chart.axis.CyclicNumberAxis var59 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var60 = var59.getTickLabelPaint();
    var53.setLegendTextPaint(0, var60);
    var45.setSeriesFillPaint(100, var60, true);
    var36.setBaseOutlinePaint(var60, false);
    var33.setRoseHighlightPaint(var60);
    var21.setGridBandAlternatePaint(var60);
    var0.setGuideLinePaint(var60);
    java.lang.Boolean var70 = var0.getSeriesCreateEntities(10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + false+ "'", var37.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);

  }

  public void test371() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test371"); }


    org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
    var1.setLinesVisible(true);
    java.lang.Boolean var5 = var1.getSeriesLinesVisible(10);
    var1.setSeriesShapesVisible(10, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test372() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test372"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setNextFocusableComponent((java.awt.Component)var2);
    java.util.Locale var4 = var2.getLocale();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    java.awt.Dimension var7 = var2.getSize(var6);
    java.awt.event.ContainerListener[] var8 = var2.getContainerListeners();
    org.jfree.chart.plot.MultiplePiePlot var10 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var11 = var10.getPieChart();
    var11.setBackgroundImageAlpha(1.0f);
    boolean var14 = var11.getAntiAlias();
    org.jfree.chart.ChartFrame var15 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var11);
    org.jfree.chart.ChartPanel var17 = new org.jfree.chart.ChartPanel(var11, false);
    boolean var18 = var17.getZoomAroundAnchor();
    double var19 = var17.getScaleX();
    var2.removeMouseListener((java.awt.event.MouseListener)var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);

  }

  public void test373() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test373"); }


    org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var2.clear();
    double var4 = var2.getMinX();
    int var5 = var2.getMaximumItemCount();
    var2.setMaximumItemCount(0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 2147483647);

  }

  public void test374() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test374"); }


    org.jfree.chart.axis.CyclicNumberAxis var2 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var3 = var2.isAxisLineVisible();
    var2.setAdvanceLineVisible(false);
    var2.centerRange(3.0d);
    boolean var8 = var2.isNegativeArrowVisible();
    var2.setAutoRangeMinimumSize(5.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);

  }

  public void test375() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test375"); }


    org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
    org.jfree.data.general.DefaultPieDataset var1 = new org.jfree.data.general.DefaultPieDataset((org.jfree.data.KeyedValues)var0);
    org.jfree.data.statistics.SimpleHistogramBin var4 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
    var4.setItemCount(2);
    double var7 = var4.getUpperBound();
    int var8 = var4.getItemCount();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var1.remove((java.lang.Comparable)var4);
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2);

  }

  public void test376() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test376"); }


    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      org.jfree.data.time.Month var1 = org.jfree.data.time.Month.parseMonth("Compass Plot");
      fail("Expected exception of type org.jfree.data.time.TimePeriodFormatException");
    } catch (org.jfree.data.time.TimePeriodFormatException e) {
      // Expected exception.
    }

  }

  public void test377() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test377"); }


    org.jfree.chart.renderer.category.StackedBarRenderer var1 = new org.jfree.chart.renderer.category.StackedBarRenderer(false);
    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var5 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var8 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var9 = var8.getItemLabelFont();
    double var10 = var8.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var13 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var14 = var13.getItemLabelFont();
    java.awt.Shape var15 = var13.getBaseLegendShape();
    var8.setShape(var15);
    var5.setLegendBar(var15);
    org.jfree.data.general.DefaultKeyedValues2DDataset var20 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var23 = new org.jfree.chart.entity.CategoryItemEntity(var15, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var20, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.data.Range var25 = var2.findRangeBounds((org.jfree.data.category.CategoryDataset)var20, true);
    org.jfree.data.Range var26 = var1.findRangeBounds((org.jfree.data.category.CategoryDataset)var20);
    var1.setRenderAsPercentages(false);
    org.jfree.chart.labels.ItemLabelPosition var29 = var1.getNegativeItemLabelPositionFallback();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);

  }

  public void test378() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test378"); }


    java.lang.Number[][] var0 = new java.lang.Number[][] { };
    java.lang.Number[][] var1 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var2 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var0, var1);
    int var4 = var2.getRowIndex((java.lang.Comparable)'a');
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var7 = var2.getStartValue(500, 2);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));

  }

  public void test379() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test379"); }


    java.awt.Color var4 = java.awt.Color.getHSBColor(100.0f, (-1.0f), 2.0f);
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var6 = var5.getLocation();
    java.awt.Dimension var7 = var5.preferredSize();
    java.awt.Rectangle var8 = var5.bounds();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var11 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    double var16 = var14.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var19 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var20 = var19.getItemLabelFont();
    java.awt.Shape var21 = var19.getBaseLegendShape();
    var14.setShape(var21);
    var11.setLegendBar(var21);
    org.jfree.data.general.DefaultKeyedValues2DDataset var26 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var29 = new org.jfree.chart.entity.CategoryItemEntity(var21, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var26, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.chart.plot.CombinedRangeXYPlot var30 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var31 = var30.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CategoryMarker var33 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var34 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var36 = var34.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var39 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var40 = var39.getTickLabelPaint();
    var34.setFillPaint(var40, true);
    var33.setLabelPaint(var40);
    org.jfree.chart.annotations.XYShapeAnnotation var44 = new org.jfree.chart.annotations.XYShapeAnnotation(var21, var31, var40);
    java.lang.String[] var47 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var48 = new org.jfree.chart.axis.SymbolAxis("hi!", var47);
    org.jfree.chart.renderer.category.BarRenderer3D var51 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var52 = var51.getItemLabelFont();
    double var53 = var51.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var56 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var57 = var56.getItemLabelFont();
    java.awt.Shape var58 = var56.getBaseLegendShape();
    var51.setShape(var58);
    var48.setDownArrow(var58);
    javax.swing.JPanel var61 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var62 = var61.getPreferredSize();
    java.awt.image.ColorModel var63 = var61.getColorModel();
    var61.updateUI();
    java.lang.String var65 = var61.toString();
    boolean var66 = var61.getInheritsPopupMenu();
    javax.swing.InputMap var67 = var61.getInputMap();
    var61.nextFocus();
    boolean var69 = var61.getInheritsPopupMenu();
    javax.swing.JPanel var70 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var71 = var70.getPreferredSize();
    java.awt.image.ColorModel var72 = var70.getColorModel();
    var70.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var77 = var70.getForeground();
    var61.setForeground(var77);
    var48.setGridBandAlternatePaint((java.awt.Paint)var77);
    org.jfree.chart.annotations.XYShapeAnnotation var80 = new org.jfree.chart.annotations.XYShapeAnnotation((java.awt.Shape)var8, var31, (java.awt.Paint)var77);
    org.jfree.chart.plot.Crosshair var81 = new org.jfree.chart.plot.Crosshair(100.0d, (java.awt.Paint)var4, var31);
    int var82 = var4.getBlue();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var65 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var65,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var65.equals("org.jfree.chart.ChartPanel[,0,0,0var65,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var82 == 252);

  }

  public void test380() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test380"); }


    org.jfree.data.general.DefaultKeyedValues2DDataset var0 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    java.lang.Object var1 = var0.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var3 = var0.getRowKey(2);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);

  }

  public void test381() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test381"); }


    org.jfree.chart.axis.SubCategoryAxis var1 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    org.jfree.chart.renderer.xy.XYLineAndShapeRenderer var3 = new org.jfree.chart.renderer.xy.XYLineAndShapeRenderer();
    java.awt.Paint var6 = var3.getItemFillPaint(0, (-1));
    var1.setTickLabelPaint((java.lang.Comparable)"0x00000001", var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test382() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test382"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    org.jfree.chart.plot.dial.DialValueIndicator var19 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var20 = var19.getInsets();
    java.awt.Stroke var21 = var19.getOutlineStroke();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var19.setOutlinePaint((java.awt.Paint)var36);
    java.awt.Color var39 = var36.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    double var45 = var42.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var46 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var47 = var46.getRangeZeroBaselineStroke();
    var42.setStroke(var47, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var50 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var51 = var50.isOutline();
    var50.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var56 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var57 = var56.getLegendItemPaint();
    var50.setShapePaint(var57);
    org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var16, (java.awt.Paint)var39, var47, var57);
    org.jfree.chart.plot.CategoryPlot var60 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var62 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var63 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var62);
    org.jfree.data.time.TimePeriodValue var65 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var62, (java.lang.Number)10);
    var60.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var67 = var60.getDrawSharedDomainAxis();
    boolean var68 = var60.getDrawSharedDomainAxis();
    var60.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var71 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var60.addChangeListener((org.jfree.chart.event.PlotChangeListener)var71);
    org.jfree.chart.StandardChartTheme var75 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var76 = var75.getLegendItemPaint();
    java.awt.Paint var77 = var75.getSubtitlePaint();
    java.awt.Paint var78 = var75.getTickLabelPaint();
    var71.setDomainCrosshairPaint(var78);
    var59.setLabelPaint(var78);
    
    // Checks the contract:  equals-hashcode on var56 and var75
    assertTrue("Contract failed: equals-hashcode on var56 and var75", var56.equals(var75) ? var56.hashCode() == var75.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var75 and var56
    assertTrue("Contract failed: equals-hashcode on var75 and var56", var75.equals(var56) ? var75.hashCode() == var56.hashCode() : true);

  }

  public void test383() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test383"); }


    org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis("0x00000000");
    var1.setVerticalTickLabels(false);
    var1.setMinorTickMarksVisible(true);
    java.lang.String var6 = var1.getLabel();
    java.awt.Font var7 = var1.getTickLabelFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var6 + "' != '" + "0var60000000"+ "'", var6.equals("0var60000000"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);

  }

  public void test384() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test384"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    double var4 = var2.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    var2.setShape(var9);
    org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var12 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((java.lang.Comparable)(short)10);
    double var13 = var12.getOutlierCoefficient();
    org.jfree.chart.entity.XYItemEntity var18 = new org.jfree.chart.entity.XYItemEntity(var9, (org.jfree.data.xy.XYDataset)var12, 1, 4, "-4,-4,4,4", "100");
    int var19 = var18.getItem();
    int var20 = var18.getItem();
    java.lang.String var21 = var18.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1.5d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 4);

  }

  public void test385() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test385"); }


    org.jfree.chart.axis.CyclicNumberAxis var2 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var3 = var2.isAxisLineVisible();
    var2.setAxisLineVisible(true);
    var2.setMinorTickMarksVisible(true);
    org.jfree.chart.plot.CombinedRangeXYPlot var8 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var9 = var8.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CombinedRangeXYPlot var10 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var11 = var10.getRangeZeroBaselineStroke();
    var8.setRangeGridlineStroke(var11);
    var8.setDomainMinorGridlinesVisible(true);
    var8.setRangeZeroBaselineVisible(true);
    var2.setPlot((org.jfree.chart.plot.Plot)var8);
    org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var20 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var21 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var20);
    org.jfree.data.time.TimePeriodValue var23 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var20, (java.lang.Number)10);
    var18.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var25 = var18.getDrawSharedDomainAxis();
    boolean var26 = var18.getDrawSharedDomainAxis();
    var18.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var29 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var18.addChangeListener((org.jfree.chart.event.PlotChangeListener)var29);
    org.jfree.chart.event.PlotChangeEvent var31 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var29);
    org.jfree.chart.plot.Plot var32 = var31.getPlot();
    var8.plotChanged(var31);
    
    // Checks the contract:  equals-hashcode on var10 and var29
    assertTrue("Contract failed: equals-hashcode on var10 and var29", var10.equals(var29) ? var10.hashCode() == var29.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var29 and var10
    assertTrue("Contract failed: equals-hashcode on var29 and var10", var29.equals(var10) ? var29.hashCode() == var10.hashCode() : true);

  }

  public void test386() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test386"); }


    org.jfree.data.time.DateRange var1 = new org.jfree.data.time.DateRange();
    long var2 = var1.getUpperMillis();
    org.jfree.data.general.DefaultKeyedValues2DDataset var3 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var3.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var8 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var3);
    org.jfree.data.Range var10 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds((org.jfree.data.category.CategoryDataset)var3, true);
    org.jfree.chart.block.RectangleConstraint var11 = new org.jfree.chart.block.RectangleConstraint((org.jfree.data.Range)var1, var10);
    org.jfree.data.time.DateRange var14 = new org.jfree.data.time.DateRange((-1.0d), 1.0d);
    org.jfree.chart.block.RectangleConstraint var15 = var11.toRangeHeight((org.jfree.data.Range)var14);
    org.jfree.chart.plot.MeterInterval var16 = new org.jfree.chart.plot.MeterInterval("", (org.jfree.data.Range)var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);

  }

  public void test387() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test387"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    boolean var8 = var0.getDrawSharedDomainAxis();
    var0.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var0.addChangeListener((org.jfree.chart.event.PlotChangeListener)var11);
    double var13 = var11.getGap();
    org.jfree.chart.plot.CombinedRangeXYPlot var14 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var15 = var14.getRangeZeroBaselineStroke();
    java.awt.Paint var16 = var14.getRangeMinorGridlinePaint();
    var11.setDomainCrosshairPaint(var16);
    org.jfree.chart.axis.CyclicNumberAxis var21 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var22 = var21.getTickLabelPaint();
    var11.setRangeAxis(100, (org.jfree.chart.axis.ValueAxis)var21, false);
    org.jfree.data.time.DateRange var25 = new org.jfree.data.time.DateRange();
    long var26 = var25.getUpperMillis();
    org.jfree.data.general.DefaultKeyedValues2DDataset var27 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var27.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var32 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var27);
    org.jfree.data.Range var34 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds((org.jfree.data.category.CategoryDataset)var27, true);
    org.jfree.chart.block.RectangleConstraint var35 = new org.jfree.chart.block.RectangleConstraint((org.jfree.data.Range)var25, var34);
    var21.setRangeWithMargins((org.jfree.data.Range)var25, false, true);
    java.lang.String var39 = var25.toString();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 5.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == 1L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var39 + "' != '" + "[Dec 31, 1969 4:00:00 PM --> Dec 31, 1969 4:00:00 PM]"+ "'", var39.equals("[Dec 31, 1969 4:00:00 PM --> Dec 31, 1969 4:00:00 PM]"));

  }

  public void test388() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test388"); }


    org.jfree.chart.plot.Crosshair var0 = new org.jfree.chart.plot.Crosshair();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var1 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var3 = var1.getSeriesLinesVisible(10);
    var1.setUseOutlinePaint(true);
    boolean var6 = var0.equals((java.lang.Object)true);
    boolean var7 = var0.isLabelOutlineVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);

  }

  public void test389() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test389"); }


    org.jfree.chart.util.RelativeDateFormat var1 = new org.jfree.chart.util.RelativeDateFormat();
    var1.setShowZeroHours(true);
    org.jfree.chart.axis.MonthDateFormat var4 = new org.jfree.chart.axis.MonthDateFormat();
    org.jfree.chart.util.RelativeDateFormat var6 = new org.jfree.chart.util.RelativeDateFormat();
    boolean var7 = var6.getShowZeroHours();
    org.jfree.chart.labels.StandardCategoryItemLabelGenerator var8 = new org.jfree.chart.labels.StandardCategoryItemLabelGenerator("0x00000000", (java.text.DateFormat)var6);
    org.jfree.chart.labels.BubbleXYItemLabelGenerator var9 = new org.jfree.chart.labels.BubbleXYItemLabelGenerator("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (java.text.DateFormat)var1, (java.text.DateFormat)var4, (java.text.DateFormat)var6);
    java.text.DateFormat var10 = var9.getZDateFormat();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);

  }

  public void test390() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test390"); }


    org.jfree.chart.plot.ContourPlot var0 = new org.jfree.chart.plot.ContourPlot();
    double var1 = var0.getDomainCrosshairValue();
    org.jfree.chart.axis.CyclicNumberAxis var4 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var5 = var4.isAxisLineVisible();
    var4.setAxisLineVisible(true);
    var4.setMinorTickMarksVisible(true);
    org.jfree.chart.plot.CombinedRangeXYPlot var10 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var11 = var10.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CombinedRangeXYPlot var12 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var13 = var12.getRangeZeroBaselineStroke();
    var10.setRangeGridlineStroke(var13);
    var10.setDomainMinorGridlinesVisible(true);
    var10.setRangeZeroBaselineVisible(true);
    var4.setPlot((org.jfree.chart.plot.Plot)var10);
    var0.setDomainAxis((org.jfree.chart.axis.ValueAxis)var4);
    var4.setOffset(360.0d);
    var4.setFixedAutoRange(40.05d);

  }

  public void test391() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test391"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isCounterClockwise();
    var0.setCounterClockwise(true);
    boolean var4 = var0.isRangeZoomable();
    var0.setCounterClockwise(true);
    double var7 = var0.getAngleOffset();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-90.0d));

  }

  public void test392() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test392"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    org.jfree.chart.plot.MultiplePiePlot var8 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var9 = var8.getPieChart();
    var9.setBackgroundImageAlpha(1.0f);
    boolean var12 = var9.getAntiAlias();
    org.jfree.chart.ChartFrame var13 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var9);
    org.jfree.chart.ChartPanel var15 = new org.jfree.chart.ChartPanel(var9, false);
    java.awt.Paint var16 = var15.getZoomOutlinePaint();
    int var17 = var15.getMaximumDrawWidth();
    var2.removeChangeListener((org.jfree.chart.event.ChartChangeListener)var15);
    
    // Checks the contract:  equals-hashcode on var1 and var8
    assertTrue("Contract failed: equals-hashcode on var1 and var8", var1.equals(var8) ? var1.hashCode() == var8.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var8 and var1
    assertTrue("Contract failed: equals-hashcode on var8 and var1", var8.equals(var1) ? var8.hashCode() == var1.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var2 and var9
    assertTrue("Contract failed: equals-hashcode on var2 and var9", var2.equals(var9) ? var2.hashCode() == var9.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var9 and var2
    assertTrue("Contract failed: equals-hashcode on var9 and var2", var9.equals(var2) ? var9.hashCode() == var2.hashCode() : true);

  }

  public void test393() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test393"); }


    org.jfree.chart.axis.SubCategoryAxis var1 = new org.jfree.chart.axis.SubCategoryAxis("Combined Range XYPlot");
    double var2 = var1.getUpperMargin();
    double var3 = var1.getLowerMargin();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == 0.05d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.05d);

  }

  public void test394() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test394"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    int var2 = var0.getRowIndex((java.lang.Comparable)1043495433);
    org.jfree.data.time.Week var5 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var6 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var5);
    org.jfree.data.time.TimePeriodValue var8 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var5, (java.lang.Number)10);
    org.jfree.data.time.ohlc.OHLCItem var13 = new org.jfree.data.time.ohlc.OHLCItem((org.jfree.data.time.RegularTimePeriod)var5, 100.0d, 0.0d, 0.05d, 0.0d);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Object var14 = var0.getObject((java.lang.Comparable)"CategoryAnchor.MIDDLE", (java.lang.Comparable)var13);
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));

  }

  public void test395() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test395"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[1.0,1.0]", var2, false);
    var2.setBackgroundImageAlignment((-13421773));
    org.jfree.chart.ChartRenderingInfo var13 = new org.jfree.chart.ChartRenderingInfo();
    java.lang.Object var14 = var13.clone();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.awt.image.BufferedImage var15 = var2.createBufferedImage((-1), 5, 0.3d, 180.0d, var13);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test396() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test396"); }


    org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(true);

  }

  public void test397() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test397"); }


    org.jfree.chart.urls.StandardXYURLGenerator var3 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    org.jfree.chart.util.HexNumberFormat var5 = new org.jfree.chart.util.HexNumberFormat();
    org.jfree.chart.labels.StandardCrosshairLabelGenerator var6 = new org.jfree.chart.labels.StandardCrosshairLabelGenerator("", (java.text.NumberFormat)var5);
    boolean var7 = var3.equals((java.lang.Object)var6);
    java.lang.String var8 = var6.getLabelTemplate();
    org.jfree.chart.plot.Crosshair var9 = new org.jfree.chart.plot.Crosshair();
    java.awt.Paint var10 = var9.getLabelPaint();
    java.lang.String var11 = var6.generateLabel(var9);
    org.jfree.chart.plot.Crosshair var12 = new org.jfree.chart.plot.Crosshair();
    double var13 = var12.getValue();
    java.lang.String var14 = var6.generateLabel(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + ""+ "'", var8.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var11 + "' != '" + ""+ "'", var11.equals(""));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var14 + "' != '" + ""+ "'", var14.equals(""));

  }

  public void test398() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test398"); }


    org.jfree.data.xml.PieDatasetHandler var0 = new org.jfree.data.xml.PieDatasetHandler();
    org.jfree.data.xml.RootHandler var1 = new org.jfree.data.xml.RootHandler();
    var1.endElement("", "hi!", "hi!");
    char[] var6 = new char[] { };
    var1.characters(var6, (-1), (-1));
    org.jfree.data.xml.RootHandler var10 = new org.jfree.data.xml.RootHandler();
    var10.endElement("", "hi!", "hi!");
    var10.endDocument();
    org.jfree.data.xml.CategorySeriesHandler var16 = new org.jfree.data.xml.CategorySeriesHandler(var10);
    var10.endElement("Compass Plot", "Combined Range XYPlot", "Combined Range XYPlot");
    org.jfree.data.xml.ItemHandler var21 = new org.jfree.data.xml.ItemHandler(var1, (org.xml.sax.helpers.DefaultHandler)var10);
    org.jfree.data.xml.KeyHandler var22 = new org.jfree.data.xml.KeyHandler((org.jfree.data.xml.RootHandler)var0, var21);
    org.jfree.data.xml.RootHandler var23 = new org.jfree.data.xml.RootHandler();
    var23.endElement("", "hi!", "hi!");
    var23.endDocument();
    org.jfree.data.xml.CategorySeriesHandler var29 = new org.jfree.data.xml.CategorySeriesHandler(var23);
    var23.endElement("Compass Plot", "Combined Range XYPlot", "Combined Range XYPlot");
    org.xml.sax.helpers.DefaultHandler var34 = var23.getCurrentHandler();
    char[] var36 = new char[] { '4'};
    var23.characters(var36, 19, 10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var22.characters(var36, 19, 252);
      fail("Expected exception of type java.lang.StringIndexOutOfBoundsException");
    } catch (java.lang.StringIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);

  }

  public void test399() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test399"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setNextFocusableComponent((java.awt.Component)var2);
    java.util.Locale var4 = var2.getLocale();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    java.awt.Dimension var7 = var2.getSize(var6);
    java.awt.event.ContainerListener[] var8 = var2.getContainerListeners();
    var2.removeNotify();
    boolean var10 = var2.requestFocusInWindow();
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var12 = var11.getPreferredSize();
    java.awt.image.ColorModel var13 = var11.getColorModel();
    var11.updateUI();
    java.lang.String var15 = var11.toString();
    boolean var16 = var11.getInheritsPopupMenu();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    javax.swing.JPanel var19 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var17.setNextFocusableComponent((java.awt.Component)var19);
    java.util.Locale var21 = var19.getLocale();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    java.awt.Dimension var24 = var19.getSize(var23);
    var11.setSize(var23);
    java.awt.Dimension var26 = var2.getSize(var23);
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    javax.swing.JPanel var29 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var30 = var29.getPreferredSize();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var29.setNextFocusableComponent((java.awt.Component)var31);
    java.util.Locale var33 = var31.getLocale();
    var31.list();
    javax.swing.JPanel var35 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var36 = var35.getPreferredSize();
    boolean var37 = var35.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var39 = new org.jfree.chart.plot.ContourPlot();
    var39.setOutlineVisible(false);
    var35.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var39);
    org.jfree.chart.urls.XYURLGenerator var43 = var39.getURLGenerator();
    org.jfree.chart.ClipPath var44 = var39.getClipPath();
    var31.addPropertyChangeListener((java.beans.PropertyChangeListener)var39);
    javax.swing.JPanel var46 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var47 = var46.getPreferredSize();
    java.awt.image.ColorModel var48 = var46.getColorModel();
    var46.firePropertyChange("", 0.0f, 0.0f);
    javax.swing.JPanel var53 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var54 = var53.getLocation();
    java.awt.Point var55 = var46.getLocation(var54);
    boolean var56 = var31.contains(var55);
    var27.setLocation(var55);
    boolean var58 = var2.contains(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var15,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var15.equals("org.jfree.chart.ChartPanel[,0,0,0var15,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var58 == false);

  }

  public void test400() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test400"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    java.awt.Shape var12 = var10.getBaseLegendShape();
    var5.setShape(var12);
    var2.setLegendBar(var12);
    var2.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var17 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var18 = var2.findDomainBounds((org.jfree.data.xy.XYDataset)var17);
    org.jfree.data.Range var20 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds((org.jfree.data.xy.TableXYDataset)var17, (-1.0d));
    org.jfree.data.Range var22 = org.jfree.data.Range.expandToInclude(var20, 0.05d);
    org.jfree.data.Range var25 = org.jfree.data.Range.shift(var20, 10.0d, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test401() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test401"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    boolean var2 = var0.isSeriesVisibleInLegend(0);
    org.jfree.data.xy.DefaultXYZDataset var3 = new org.jfree.data.xy.DefaultXYZDataset();
    org.jfree.data.Range var5 = org.jfree.data.general.DatasetUtilities.iterateZBounds((org.jfree.data.xy.XYZDataset)var3, false);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var14 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.util.List var15 = var14.getSubplots();
    org.jfree.data.statistics.BoxAndWhiskerItem var16 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)(-2208960000000L), (java.lang.Number)Double.NaN, (java.lang.Number)51, (java.lang.Number)0.05d, (java.lang.Number)(byte)100, (java.lang.Number)2.0f, (java.lang.Number)15, (java.lang.Number)1.0f, var15);
    org.jfree.chart.axis.CyclicNumberAxis var19 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var20 = var19.isAxisLineVisible();
    var19.setAxisLineVisible(true);
    org.jfree.data.general.DefaultKeyedValues2DDataset var23 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var23.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var28 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.category.CategoryDataset)var23);
    var19.setDefaultAutoRange(var28);
    org.jfree.data.Range var30 = var19.getRange();
    org.jfree.data.Range var32 = org.jfree.data.general.DatasetUtilities.findZBounds((org.jfree.data.xy.XYZDataset)var3, var15, var30, true);
    org.jfree.data.Range var33 = var0.findDomainBounds((org.jfree.data.xy.XYDataset)var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);

  }

  public void test402() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test402"); }


    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var1 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var2 = var1.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var3 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var4 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var1, (org.jfree.chart.urls.XYURLGenerator)var3);
    var4.setShapesFilled(true);
    var4.setShapesFilled(false);
    var4.setShapesVisible(false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test403() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test403"); }


    org.jfree.data.time.Minute var0 = new org.jfree.data.time.Minute();
    int var1 = var0.getMinute();
    org.jfree.data.time.Hour var2 = var0.getHour();
    org.jfree.data.time.Year var5 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var6 = new org.jfree.data.time.Month(1, var5);
    java.util.Locale var7 = javax.swing.JComponent.getDefaultLocale();
    org.jfree.chart.axis.MonthDateFormat var9 = new org.jfree.chart.axis.MonthDateFormat(var7, 2147483647);
    java.util.Calendar var10 = var9.getCalendar();
    long var11 = var6.getLastMillisecond(var10);
    long var12 = var2.getLastMillisecond(var10);
    long var13 = var2.getLastMillisecond();
    long var14 = var2.getFirstMillisecond();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == (-59008924800001L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 1378965599999L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 1378965599999L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == 1378962000000L);

  }

  public void test404() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test404"); }


    org.jfree.data.general.DatasetGroup var1 = new org.jfree.data.general.DatasetGroup("d");
    org.jfree.chart.plot.dial.DialPlot var2 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var3 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var4 = var2.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var3);
    org.jfree.chart.plot.dial.DialValueIndicator var5 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var6 = var5.getInsets();
    int var7 = var2.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var5);
    boolean var8 = var1.equals((java.lang.Object)var2);
    org.jfree.chart.plot.dial.DialFrame var9 = var2.getDialFrame();
    org.jfree.chart.plot.dial.DialScale var11 = var2.getScale(1024);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);

  }

  public void test405() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test405"); }


    org.jfree.data.function.LineFunction2D var2 = new org.jfree.data.function.LineFunction2D(5.0d, (-90.0d));

  }

  public void test406() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test406"); }


    java.lang.String[] var2 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
    org.jfree.chart.renderer.category.BarRenderer3D var6 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var7 = var6.getItemLabelFont();
    double var8 = var6.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var11 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var12 = var11.getItemLabelFont();
    java.awt.Shape var13 = var11.getBaseLegendShape();
    var6.setShape(var13);
    var3.setDownArrow(var13);
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var17 = var16.getPreferredSize();
    java.awt.image.ColorModel var18 = var16.getColorModel();
    var16.updateUI();
    java.lang.String var20 = var16.toString();
    boolean var21 = var16.getInheritsPopupMenu();
    javax.swing.InputMap var22 = var16.getInputMap();
    var16.nextFocus();
    boolean var24 = var16.getInheritsPopupMenu();
    javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var26 = var25.getPreferredSize();
    java.awt.image.ColorModel var27 = var25.getColorModel();
    var25.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var32 = var25.getForeground();
    var16.setForeground(var32);
    var3.setGridBandAlternatePaint((java.awt.Paint)var32);
    java.awt.Paint var35 = var3.getGridBandAlternatePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var20.equals("org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);

  }

  public void test407() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test407"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    int var2 = var0.getColumnIndex((java.lang.Comparable)'#');
    var0.clear();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeColumn((java.lang.Comparable)5.0d);
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));

  }

  public void test408() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test408"); }


    org.jfree.data.xy.DefaultIntervalXYDataset var0 = new org.jfree.data.xy.DefaultIntervalXYDataset();
    org.jfree.data.Range var2 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset)var0, false);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var5 = var0.getStartYValue(52, (-1));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);

  }

  public void test409() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test409"); }


    org.jfree.chart.urls.CustomPieURLGenerator var0 = new org.jfree.chart.urls.CustomPieURLGenerator();
    java.lang.String var3 = var0.getURL((java.lang.Comparable)2.0d, 4);
    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var4 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    org.jfree.data.general.PieDataset var6 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow((org.jfree.data.category.CategoryDataset)var4, 10);
    java.lang.String var9 = var0.generateURL(var6, (java.lang.Comparable)"org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", 2013);
    org.jfree.data.statistics.SimpleHistogramBin var12 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
    var12.setItemCount(2);
    double var15 = var12.getUpperBound();
    java.lang.String var17 = var0.getURL((java.lang.Comparable)var15, 80);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var17);

  }

  public void test410() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test410"); }


    org.jfree.chart.renderer.xy.DeviationRenderer var2 = new org.jfree.chart.renderer.xy.DeviationRenderer(true, true);
    float var3 = var2.getAlpha();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var2.setAlpha(100.0f);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == 0.5f);

  }

  public void test411() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test411"); }


    org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var3 = var2.getItemLabelFont();
    double var4 = var2.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    var2.setShape(var9);
    org.jfree.chart.StandardChartTheme var13 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var14 = var13.getLegendItemPaint();
    var2.setItemLabelPaint(var14);
    org.jfree.chart.block.ColorBlock var18 = new org.jfree.chart.block.ColorBlock(var14, 4.0d, (-0.7853981633974483d));
    double var19 = var18.getContentXOffset();
    org.jfree.ui.RectangleInsets var20 = var18.getMargin();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);

  }

  public void test412() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test412"); }


    org.jfree.chart.plot.Crosshair var0 = new org.jfree.chart.plot.Crosshair();
    double var1 = var0.getValue();
    org.jfree.chart.needle.PinNeedle var2 = new org.jfree.chart.needle.PinNeedle();
    org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.plot.CategoryMarker var5 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var6 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var8 = var6.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var11 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var12 = var11.getTickLabelPaint();
    var6.setFillPaint(var12, true);
    var5.setLabelPaint(var12);
    var3.setDomainGridlinePaint(var12);
    var2.setHighlightPaint(var12);
    java.awt.Paint var18 = var2.getHighlightPaint();
    var0.setLabelOutlinePaint(var18);
    org.jfree.data.statistics.SimpleHistogramBin var22 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
    var22.setItemCount(2);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var27 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var30 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var31 = var30.getItemLabelFont();
    double var32 = var30.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var35 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var36 = var35.getItemLabelFont();
    java.awt.Shape var37 = var35.getBaseLegendShape();
    var30.setShape(var37);
    var27.setLegendBar(var37);
    var27.setDrawBarOutline(true);
    java.awt.Paint var43 = var27.getLegendTextPaint(0);
    var27.setSeriesItemLabelsVisible(0, true);
    boolean var47 = var22.equals((java.lang.Object)var27);
    boolean var48 = var0.equals((java.lang.Object)var47);
    var0.setLabelOutlineVisible(false);
    var0.setLabelXOffset(174.49d);
    double var53 = var0.getLabelYOffset();
    org.jfree.chart.plot.ThermometerPlot var54 = new org.jfree.chart.plot.ThermometerPlot();
    boolean var55 = var54.isDomainZoomable();
    int var56 = var54.getAxisLocation();
    org.jfree.data.general.ValueDataset var57 = var54.getDataset();
    org.jfree.chart.plot.MeterPlot var58 = new org.jfree.chart.plot.MeterPlot(var57);
    java.awt.Paint var59 = var58.getDialOutlinePaint();
    org.jfree.chart.plot.dial.DialValueIndicator var60 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var61 = var60.getInsets();
    java.awt.Stroke var62 = var60.getOutlineStroke();
    javax.swing.JPanel var63 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var64 = var63.getPreferredSize();
    javax.swing.JPanel var65 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var63.setNextFocusableComponent((java.awt.Component)var65);
    java.util.Locale var67 = var65.getLocale();
    javax.swing.JPanel var68 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var69 = var68.getPreferredSize();
    java.awt.Dimension var70 = var65.getSize(var69);
    java.awt.event.ContainerListener[] var71 = var65.getContainerListeners();
    javax.swing.JPanel var72 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var73 = var72.getPreferredSize();
    java.awt.image.ColorModel var74 = var72.getColorModel();
    var72.updateUI();
    java.lang.String var76 = var72.toString();
    java.awt.Color var77 = var72.getForeground();
    var65.setBackground(var77);
    var60.setOutlinePaint((java.awt.Paint)var77);
    java.awt.Color var80 = var77.brighter();
    var58.setDialOutlinePaint((java.awt.Paint)var80);
    var0.setLabelOutlinePaint((java.awt.Paint)var80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var32 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var47 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var55 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var64);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var67);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var72);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var73);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var74);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var76 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var76,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var76.equals("org.jfree.chart.ChartPanel[,0,0,0var76,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var77);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var80);

  }

  public void test413() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test413"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    var0.addCornerTextItem("0x00000001");
    var0.setAngleGridlinesVisible(false);
    org.jfree.chart.plot.PolarPlot var5 = new org.jfree.chart.plot.PolarPlot();
    boolean var6 = var5.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var11 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var11.setUpperMargin(10.0d);
    var11.setAxisLineVisible(true);
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var17 = var16.getLocation();
    java.awt.Dimension var18 = var16.preferredSize();
    java.awt.Rectangle var19 = var16.bounds();
    java.awt.Point var20 = var5.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var11, (java.awt.geom.Rectangle2D)var19);
    org.jfree.chart.renderer.DefaultPolarItemRenderer var22 = new org.jfree.chart.renderer.DefaultPolarItemRenderer();
    var5.setRenderer(10, (org.jfree.chart.renderer.PolarItemRenderer)var22, true);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var27 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var28 = var27.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var29 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var30 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var27, (org.jfree.chart.urls.XYURLGenerator)var29);
    org.jfree.chart.renderer.xy.StandardXYItemRenderer var31 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, (org.jfree.chart.labels.XYToolTipGenerator)var27);
    java.text.NumberFormat var32 = var27.getYFormat();
    var22.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var27);
    java.lang.String[] var36 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var37 = new org.jfree.chart.axis.SymbolAxis("hi!", var36);
    org.jfree.chart.plot.CompassPlot var38 = new org.jfree.chart.plot.CompassPlot();
    boolean var39 = var37.equals((java.lang.Object)var38);
    java.lang.String var40 = var38.getPlotType();
    java.awt.Paint var41 = var38.getRoseCenterPaint();
    java.awt.Paint var42 = var38.getBackgroundPaint();
    javax.swing.JPanel var43 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var44 = var43.getPreferredSize();
    java.awt.image.ColorModel var45 = var43.getColorModel();
    var43.updateUI();
    java.lang.String var47 = var43.toString();
    boolean var48 = var43.getInheritsPopupMenu();
    javax.swing.InputMap var49 = var43.getInputMap();
    var43.nextFocus();
    boolean var51 = var43.getInheritsPopupMenu();
    javax.swing.JPanel var52 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var53 = var52.getPreferredSize();
    java.awt.image.ColorModel var54 = var52.getColorModel();
    var52.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var59 = var52.getForeground();
    var43.setForeground(var59);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var62 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var42, (java.awt.Paint)var59, true);
    org.jfree.chart.labels.StandardXYSeriesLabelGenerator var63 = new org.jfree.chart.labels.StandardXYSeriesLabelGenerator();
    var62.setLegendItemLabelGenerator((org.jfree.chart.labels.XYSeriesLabelGenerator)var63);
    var22.setLegendItemURLGenerator((org.jfree.chart.labels.XYSeriesLabelGenerator)var63);
    boolean var66 = var22.getDrawOutlineWhenFilled();
    var0.setRenderer((org.jfree.chart.renderer.PolarItemRenderer)var22);
    org.jfree.chart.urls.XYURLGenerator var68 = var22.getURLGenerator();
    org.jfree.chart.labels.StandardXYToolTipGenerator var69 = org.jfree.chart.labels.StandardXYToolTipGenerator.getTimeSeriesInstance();
    org.jfree.chart.labels.SymbolicXYItemLabelGenerator var71 = new org.jfree.chart.labels.SymbolicXYItemLabelGenerator();
    org.jfree.chart.urls.TimeSeriesURLGenerator var72 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var73 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer(100, (org.jfree.chart.labels.XYToolTipGenerator)var71, (org.jfree.chart.urls.XYURLGenerator)var72);
    org.jfree.chart.renderer.xy.XYAreaRenderer2 var74 = new org.jfree.chart.renderer.xy.XYAreaRenderer2((org.jfree.chart.labels.XYToolTipGenerator)var69, (org.jfree.chart.urls.XYURLGenerator)var72);
    var22.setURLGenerator((org.jfree.chart.urls.XYURLGenerator)var72);
    
    // Checks the contract:  equals-hashcode on var29 and var72
    assertTrue("Contract failed: equals-hashcode on var29 and var72", var29.equals(var72) ? var29.hashCode() == var72.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var72 and var29
    assertTrue("Contract failed: equals-hashcode on var72 and var29", var72.equals(var29) ? var72.hashCode() == var29.hashCode() : true);

  }

  public void test414() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test414"); }


    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var0 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var1 = var0.isOutline();
    var0.setUseFillPaint(true);
    boolean var4 = var0.getUseFillPaint();
    java.awt.Stroke var5 = var0.getShapeStroke();
    java.awt.Paint var6 = var0.getShapePaint();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);

  }

  public void test415() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test415"); }


    org.jfree.chart.axis.CyclicNumberAxis var2 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var3 = var2.isAxisLineVisible();
    var2.setAxisLineVisible(true);
    double var6 = var2.getFixedDimension();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == 0.0d);

  }

  public void test416() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test416"); }


    org.jfree.chart.renderer.xy.StackedXYBarRenderer var0 = new org.jfree.chart.renderer.xy.StackedXYBarRenderer();
    org.jfree.chart.labels.ItemLabelPosition var1 = var0.getPositiveItemLabelPositionFallback();
    boolean var2 = var0.getRenderAsPercentages();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == false);

  }

  public void test417() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test417"); }


    org.jfree.chart.renderer.category.GroupedStackedBarRenderer var2 = new org.jfree.chart.renderer.category.GroupedStackedBarRenderer();
    org.jfree.data.xy.OHLCDataItem[] var4 = new org.jfree.data.xy.OHLCDataItem[] { };
    org.jfree.data.xy.DefaultOHLCDataset var5 = new org.jfree.data.xy.DefaultOHLCDataset((java.lang.Comparable)0.05d, var4);
    boolean var6 = var2.equals((java.lang.Object)var4);
    org.jfree.data.xy.DefaultOHLCDataset var7 = new org.jfree.data.xy.DefaultOHLCDataset((java.lang.Comparable)175.0d, var4);
    org.jfree.data.xy.DefaultOHLCDataset var8 = new org.jfree.data.xy.DefaultOHLCDataset((java.lang.Comparable)1379070000000L, var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == false);

  }

  public void test418() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test418"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    int var7 = var6.getDefaultCloseOperation();
    java.awt.Toolkit var8 = var6.getToolkit();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test419() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test419"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var11 = new org.jfree.chart.entity.ContourEntity(var9, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var14 = var13.isVisible();
    java.lang.Object var15 = var13.clone();
    java.lang.String var16 = var13.getURLText();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.image.ColorModel var19 = var17.getColorModel();
    var17.updateUI();
    java.lang.String var21 = var17.toString();
    java.awt.Color var22 = var17.getForeground();
    var13.setBackgroundPaint((java.awt.Paint)var22);
    int var24 = var22.getRGB();
    int var25 = var22.getBlue();
    org.jfree.chart.plot.dial.DialPlot var26 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var27 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var28 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var27);
    org.jfree.chart.plot.dial.DialValueIndicator var29 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var30 = var29.getInsets();
    int var31 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var29);
    java.awt.Stroke var32 = var29.getOutlineStroke();
    org.jfree.chart.title.TextTitle var34 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var35 = var34.isVisible();
    java.lang.Object var36 = var34.clone();
    java.lang.String var37 = var34.getURLText();
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.image.ColorModel var40 = var38.getColorModel();
    var38.updateUI();
    java.lang.String var42 = var38.toString();
    java.awt.Color var43 = var38.getForeground();
    var34.setBackgroundPaint((java.awt.Paint)var43);
    org.jfree.chart.LegendItem var45 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var9, (java.awt.Paint)var22, var32, (java.awt.Paint)var43);
    var0.setBaseSectionOutlinePaint((java.awt.Paint)var22);
    java.lang.String var47 = var22.toString();
    org.jfree.data.general.DefaultKeyedValueDataset var48 = new org.jfree.data.general.DefaultKeyedValueDataset();
    org.jfree.data.general.DatasetGroup var49 = var48.getGroup();
    org.jfree.data.general.DefaultKeyedValueDataset var50 = new org.jfree.data.general.DefaultKeyedValueDataset((org.jfree.data.KeyedValue)var48);
    boolean var51 = var22.equals((java.lang.Object)var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "sun.swing.PrintColorUIResource[r=51,g=51,b=51]"+ "'", var47.equals("sun.swing.PrintColorUIResource[r=51,g=51,b=51]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);

  }

  public void test420() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test420"); }


    org.jfree.data.general.DefaultHeatMapDataset var6 = new org.jfree.data.general.DefaultHeatMapDataset(8, 20, 0.5d, 0.75d, 10.0d, (-0.21460183660255172d));
    double var7 = var6.getMinimumYValue();
    double var8 = var6.getMinimumXValue();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 0.5d);

  }

  public void test421() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test421"); }


    org.jfree.data.general.DefaultKeyedValues2DDataset var0 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var0.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var5 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var0);
    org.jfree.data.Range var7 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds((org.jfree.data.category.CategoryDataset)var0, true);
    org.jfree.chart.renderer.category.DefaultCategoryItemRenderer var8 = new org.jfree.chart.renderer.category.DefaultCategoryItemRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var10 = var8.getSeriesItemURLGenerator(2147483647);
    boolean var11 = var8.getBaseShapesVisible();
    var8.setSeriesItemLabelsVisible(1, (java.lang.Boolean)false);
    int var15 = var8.getPassCount();
    boolean var16 = var8.getUseFillPaint();
    boolean var17 = var0.equals((java.lang.Object)var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == false);

  }

  public void test422() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test422"); }


    org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
    var0.setValue((java.lang.Comparable)4.0d, (-0.7853981633974483d));
    var0.setValue((java.lang.Comparable)10.0f, (java.lang.Number)1.05d);
    org.jfree.data.general.DefaultPieDataset var7 = new org.jfree.data.general.DefaultPieDataset((org.jfree.data.KeyedValues)var0);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeValue(19);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test423() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test423"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    java.awt.Shape var9 = var7.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var11 = new org.jfree.chart.entity.ContourEntity(var9, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var14 = var13.isVisible();
    java.lang.Object var15 = var13.clone();
    java.lang.String var16 = var13.getURLText();
    javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var18 = var17.getPreferredSize();
    java.awt.image.ColorModel var19 = var17.getColorModel();
    var17.updateUI();
    java.lang.String var21 = var17.toString();
    java.awt.Color var22 = var17.getForeground();
    var13.setBackgroundPaint((java.awt.Paint)var22);
    int var24 = var22.getRGB();
    int var25 = var22.getBlue();
    org.jfree.chart.plot.dial.DialPlot var26 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var27 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var28 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var27);
    org.jfree.chart.plot.dial.DialValueIndicator var29 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var30 = var29.getInsets();
    int var31 = var26.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var29);
    java.awt.Stroke var32 = var29.getOutlineStroke();
    org.jfree.chart.title.TextTitle var34 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var35 = var34.isVisible();
    java.lang.Object var36 = var34.clone();
    java.lang.String var37 = var34.getURLText();
    javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var39 = var38.getPreferredSize();
    java.awt.image.ColorModel var40 = var38.getColorModel();
    var38.updateUI();
    java.lang.String var42 = var38.toString();
    java.awt.Color var43 = var38.getForeground();
    var34.setBackgroundPaint((java.awt.Paint)var43);
    org.jfree.chart.LegendItem var45 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var9, (java.awt.Paint)var22, var32, (java.awt.Paint)var43);
    var0.setBaseSectionOutlinePaint((java.awt.Paint)var22);
    org.jfree.chart.plot.CombinedRangeXYPlot var47 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var48 = var47.getRangeZeroBaselineStroke();
    java.awt.Paint var49 = var47.getRangeMinorGridlinePaint();
    var0.setSectionPaint(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var35 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);

  }

  public void test424() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test424"); }


    org.jfree.chart.renderer.category.BarRenderer var0 = new org.jfree.chart.renderer.category.BarRenderer();
    org.jfree.chart.labels.ItemLabelPosition var3 = var0.getPositiveItemLabelPosition(10, 2013);
    java.lang.Boolean var5 = var0.getSeriesVisibleInLegend(3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test425() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test425"); }


    org.jfree.chart.axis.PeriodAxis var1 = new org.jfree.chart.axis.PeriodAxis("Compass Plot");
    org.jfree.chart.axis.PeriodAxisLabelInfo[] var2 = new org.jfree.chart.axis.PeriodAxisLabelInfo[] { };
    var1.setLabelInfo(var2);
    float var4 = var1.getMinorTickMarkOutsideLength();
    java.awt.Shape var5 = var1.getLeftArrow();
    org.jfree.chart.plot.MultiplePiePlot var6 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var7 = var6.getPieChart();
    org.jfree.chart.plot.dial.DialValueIndicator var8 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var9 = var8.getInsets();
    java.awt.Stroke var10 = var8.getOutlineStroke();
    javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var12 = var11.getPreferredSize();
    javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var11.setNextFocusableComponent((java.awt.Component)var13);
    java.util.Locale var15 = var13.getLocale();
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var17 = var16.getPreferredSize();
    java.awt.Dimension var18 = var13.getSize(var17);
    java.awt.event.ContainerListener[] var19 = var13.getContainerListeners();
    javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var21 = var20.getPreferredSize();
    java.awt.image.ColorModel var22 = var20.getColorModel();
    var20.updateUI();
    java.lang.String var24 = var20.toString();
    java.awt.Color var25 = var20.getForeground();
    var13.setBackground(var25);
    var8.setOutlinePaint((java.awt.Paint)var25);
    javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var29 = var28.getPreferredSize();
    javax.swing.JPanel var30 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var28.setNextFocusableComponent((java.awt.Component)var30);
    java.util.Locale var32 = var30.getLocale();
    javax.swing.JPanel var33 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var34 = var33.getPreferredSize();
    java.awt.Dimension var35 = var30.getSize(var34);
    java.awt.event.ContainerListener[] var36 = var30.getContainerListeners();
    javax.swing.JPanel var37 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var38 = var37.getPreferredSize();
    java.awt.image.ColorModel var39 = var37.getColorModel();
    var37.updateUI();
    java.lang.String var41 = var37.toString();
    java.awt.Color var42 = var37.getForeground();
    var30.setBackground(var42);
    var8.setOutlinePaint((java.awt.Paint)var42);
    var7.setBorderPaint((java.awt.Paint)var42);
    var7.setTitle("-4,-4,4,4");
    org.jfree.chart.entity.JFreeChartEntity var50 = new org.jfree.chart.entity.JFreeChartEntity(var5, var7, "jfreechart-", "hi!?hi!=100&amp;amp;hi!=1");
    java.lang.Object var51 = var50.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var24 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var24,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var24.equals("org.jfree.chart.ChartPanel[,0,0,0var24,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var41 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var41,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var41.equals("org.jfree.chart.ChartPanel[,0,0,0var41,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);

  }

  public void test426() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test426"); }


    org.jfree.chart.plot.CombinedRangeCategoryPlot var0 = new org.jfree.chart.plot.CombinedRangeCategoryPlot();
    org.jfree.chart.annotations.CategoryPointerAnnotation var5 = new org.jfree.chart.annotations.CategoryPointerAnnotation("[size=0x00000000]", (java.lang.Comparable)1043495433, 0.25d, 100.0d);
    boolean var7 = var0.removeAnnotation((org.jfree.chart.annotations.CategoryAnnotation)var5, false);
    double var8 = var5.getArrowWidth();
    var5.setTipRadius((-170.0d));
    java.lang.Object var11 = var5.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test427() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test427"); }


    java.lang.String[] var2 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var4 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var6 = var4.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var9 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var10 = var9.getTickLabelPaint();
    var4.setFillPaint(var10, true);
    var3.setGridBandAlternatePaint(var10);
    var3.setFixedDimension(100.0d);
    var3.setGridBandsVisible(false);
    java.awt.Stroke var18 = var3.getAxisLineStroke();
    var3.resizeRange((-0.21460183660255172d), 0.025d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);

  }

  public void test428() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test428"); }


    org.jfree.chart.urls.StandardXYURLGenerator var3 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    org.jfree.data.xy.DefaultXYZDataset var4 = new org.jfree.data.xy.DefaultXYZDataset();
    org.jfree.data.DomainOrder var5 = var4.getDomainOrder();
    java.lang.String var8 = var3.generateURL((org.jfree.data.xy.XYDataset)var4, 80, 100);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var8 + "' != '" + "hi!?hi!=80&amp;hi!=100"+ "'", var8.equals("hi!?hi!=80&amp;hi!=100"));

  }

  public void test429() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test429"); }


    org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var2.clear();
    boolean var4 = var2.getAutoSort();
    org.jfree.chart.plot.PolarPlot var5 = new org.jfree.chart.plot.PolarPlot();
    boolean var6 = var5.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var11 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var11.setUpperMargin(10.0d);
    var11.setAxisLineVisible(true);
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var17 = var16.getLocation();
    java.awt.Dimension var18 = var16.preferredSize();
    java.awt.Rectangle var19 = var16.bounds();
    java.awt.Point var20 = var5.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var11, (java.awt.geom.Rectangle2D)var19);
    org.jfree.data.xy.DefaultXYZDataset var22 = new org.jfree.data.xy.DefaultXYZDataset();
    org.jfree.data.DomainOrder var23 = var22.getDomainOrder();
    var5.setDataset(1, (org.jfree.data.xy.XYDataset)var22);
    var2.addChangeListener((org.jfree.data.general.SeriesChangeListener)var22);
    org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var27 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((java.lang.Comparable)(short)10);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var34 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var37 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var38 = var37.getItemLabelFont();
    double var39 = var37.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    var37.setShape(var44);
    var34.setLegendBar(var44);
    var34.setDrawBarOutline(true);
    org.jfree.chart.title.LegendTitle var49 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var34);
    org.jfree.chart.annotations.XYDrawableAnnotation var50 = new org.jfree.chart.annotations.XYDrawableAnnotation(100.0d, 10.0d, 0.0d, (-1.0d), (org.jfree.ui.Drawable)var49);
    var50.setURL("");
    boolean var53 = var27.equals((java.lang.Object)var50);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var62 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.util.List var63 = var62.getSubplots();
    org.jfree.data.statistics.BoxAndWhiskerItem var64 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)(-2208960000000L), (java.lang.Number)Double.NaN, (java.lang.Number)51, (java.lang.Number)0.05d, (java.lang.Number)(byte)100, (java.lang.Number)2.0f, (java.lang.Number)15, (java.lang.Number)1.0f, var63);
    org.jfree.chart.axis.CyclicNumberAxis var67 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    boolean var68 = var67.isAxisLineVisible();
    var67.setAxisLineVisible(true);
    org.jfree.data.general.DefaultKeyedValues2DDataset var71 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var71.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var76 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds((org.jfree.data.category.CategoryDataset)var71);
    var67.setDefaultAutoRange(var76);
    org.jfree.data.Range var79 = org.jfree.data.general.DatasetUtilities.findRangeBounds((org.jfree.data.xy.XYDataset)var27, var63, var76, false);
    org.jfree.data.time.DateRange var80 = new org.jfree.data.time.DateRange();
    org.jfree.data.Range var82 = org.jfree.data.general.DatasetUtilities.iterateToFindZBounds((org.jfree.data.xy.XYZDataset)var22, var63, (org.jfree.data.Range)var80, true);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Number var85 = var22.getZ(15, (-2));
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var63);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var79);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var82);

  }

  public void test430() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test430"); }


    org.jfree.chart.util.HexNumberFormat var2 = new org.jfree.chart.util.HexNumberFormat();
    javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var4 = var3.getPreferredSize();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var3.setNextFocusableComponent((java.awt.Component)var5);
    java.util.Locale var7 = var5.getLocale();
    org.jfree.chart.axis.MonthDateFormat var8 = new org.jfree.chart.axis.MonthDateFormat(var7);
    org.jfree.chart.labels.IntervalXYItemLabelGenerator var9 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", (java.text.NumberFormat)var2, (java.text.DateFormat)var8);
    javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var11 = var10.getPreferredSize();
    javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var10.setNextFocusableComponent((java.awt.Component)var12);
    java.util.Locale var14 = var12.getLocale();
    org.jfree.chart.axis.MonthDateFormat var15 = new org.jfree.chart.axis.MonthDateFormat(var14);
    org.jfree.chart.labels.StandardXYToolTipGenerator var16 = new org.jfree.chart.labels.StandardXYToolTipGenerator("Combined Range XYPlot", (java.text.DateFormat)var8, (java.text.DateFormat)var15);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.Date var18 = var15.parse("ChartChangeEventType.GENERAL");
      fail("Expected exception of type java.text.ParseException");
    } catch (java.text.ParseException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);

  }

  public void test431() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test431"); }


    org.jfree.data.general.WaferMapDataset var3 = new org.jfree.data.general.WaferMapDataset(2, 15, (java.lang.Number)5.0d);
    var3.addValue(1, 1043495433, 500);
    java.util.Set var8 = var3.getUniqueValues();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);

  }

  public void test432() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test432"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var1 = var0.getLocation();
    java.awt.Dimension var2 = var0.preferredSize();
    org.jfree.chart.plot.ContourPlot var3 = new org.jfree.chart.plot.ContourPlot();
    var0.addPropertyChangeListener((java.beans.PropertyChangeListener)var3);
    var0.transferFocusUpCycle();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test433() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test433"); }


    org.jfree.chart.plot.CombinedDomainCategoryPlot var0 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    float var1 = var0.getBackgroundImageAlpha();
    org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var4);
    org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
    var2.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var9 = var2.getDrawSharedDomainAxis();
    boolean var10 = var2.getDrawSharedDomainAxis();
    var2.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var13 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var2.addChangeListener((org.jfree.chart.event.PlotChangeListener)var13);
    var2.clearRangeMarkers();
    java.awt.Stroke var16 = var2.getDomainCrosshairStroke();
    var2.mapDatasetToDomainAxis(5, 8);
    var0.add(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test434() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test434"); }


    org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
    var1.clearSeriesPaints(false);
    boolean var4 = var1.getBaseLinesVisible();
    java.lang.Boolean var5 = var1.getCreateEntities();
    var1.setLinesVisible((java.lang.Boolean)true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);

  }

  public void test435() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test435"); }


    org.jfree.data.xy.XYIntervalSeriesCollection var0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeSeries(5);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }

  }

  public void test436() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test436"); }


    org.jfree.data.xy.VectorSeriesCollection var0 = new org.jfree.data.xy.VectorSeriesCollection();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var3 = var0.getXValue(3, 4);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test437() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test437"); }


    org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var2.add((-1.0d), (-1.0d), false);
    org.jfree.data.xy.XYSeries var9 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var9.clear();
    double var11 = var9.getMinX();
    org.jfree.data.xy.XYSeriesCollection var12 = new org.jfree.data.xy.XYSeriesCollection(var9);
    var2.addVetoableChangeListener((java.beans.VetoableChangeListener)var12);
    org.jfree.data.xy.XYSeries var16 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var16.add((-1.0d), (-1.0d), false);
    double var21 = var16.getMaxY();
    double var22 = var16.getMinY();
    var12.removeSeries(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var22 == (-1.0d));

  }

  public void test438() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test438"); }


    org.jfree.chart.labels.StandardCategorySeriesLabelGenerator var0 = new org.jfree.chart.labels.StandardCategorySeriesLabelGenerator();
    java.lang.Object var1 = var0.clone();
    org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var2 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
    org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var5 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var6 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var5);
    org.jfree.data.time.TimePeriodValue var8 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var5, (java.lang.Number)10);
    var3.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var10 = var3.getDrawSharedDomainAxis();
    org.jfree.ui.RectangleEdge var12 = var3.getDomainAxisEdge(2);
    org.jfree.data.general.DefaultKeyedValues2DDataset var13 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var13.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var18 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var13);
    org.jfree.chart.urls.StandardXYURLGenerator var22 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    boolean var23 = var13.equals((java.lang.Object)"hi!");
    org.jfree.data.Range var24 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds((org.jfree.data.category.CategoryDataset)var13);
    boolean var25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var13);
    int var26 = var3.indexOf((org.jfree.data.category.CategoryDataset)var13);
    boolean var27 = var2.equals((java.lang.Object)var26);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var29 = var0.generateLabel((org.jfree.data.category.CategoryDataset)var2, 5);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == false);

  }

  public void test439() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test439"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    org.jfree.chart.axis.ValueAxis var1 = var0.getRangeAxis();
    java.lang.Object var2 = var0.clone();
    var0.zoom(Double.NEGATIVE_INFINITY);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);

  }

  public void test440() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test440"); }


    org.jfree.chart.renderer.category.DefaultCategoryItemRenderer var0 = new org.jfree.chart.renderer.category.DefaultCategoryItemRenderer();
    org.jfree.chart.urls.CategoryURLGenerator var2 = var0.getSeriesItemURLGenerator(2147483647);
    boolean var3 = var0.getBaseShapesVisible();
    var0.setSeriesItemLabelsVisible(1, (java.lang.Boolean)false);
    var0.setSeriesShapesVisible(20, (java.lang.Boolean)false);
    boolean var12 = var0.getItemShapeVisible(20, (-334));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);

  }

  public void test441() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test441"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    org.jfree.chart.plot.dial.DialValueIndicator var19 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var20 = var19.getInsets();
    java.awt.Stroke var21 = var19.getOutlineStroke();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var19.setOutlinePaint((java.awt.Paint)var36);
    java.awt.Color var39 = var36.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    double var45 = var42.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var46 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var47 = var46.getRangeZeroBaselineStroke();
    var42.setStroke(var47, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var50 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var51 = var50.isOutline();
    var50.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var56 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var57 = var56.getLegendItemPaint();
    var50.setShapePaint(var57);
    org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var16, (java.awt.Paint)var39, var47, var57);
    var59.setShapeVisible(false);
    java.awt.Font var62 = var59.getLabelFont();
    org.jfree.chart.DrawableLegendItem var63 = new org.jfree.chart.DrawableLegendItem(var59);
    java.awt.geom.Line2D var64 = var63.getLine();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var64);

  }

  public void test442() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test442"); }


    org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker((-0.7853981633974483d));
    org.jfree.chart.axis.PeriodAxis var3 = new org.jfree.chart.axis.PeriodAxis("Compass Plot");
    var3.setMinorTickMarkOutsideLength(100.0f);
    org.jfree.data.xy.XYDatasetTableModel var6 = new org.jfree.data.xy.XYDatasetTableModel();
    java.lang.Class var8 = var6.getColumnClass((-1));
    var3.setMajorTickTimePeriodClass(var8);
    org.jfree.chart.util.RelativeDateFormat var10 = new org.jfree.chart.util.RelativeDateFormat();
    var10.setShowZeroHours(true);
    org.jfree.data.xy.XYIntervalSeriesCollection var13 = new org.jfree.data.xy.XYIntervalSeriesCollection();
    org.jfree.data.xy.XYBarDataset var15 = new org.jfree.data.xy.XYBarDataset((org.jfree.data.xy.XYDataset)var13, 10.0d);
    var15.setBarWidth(2.0d);
    org.jfree.chart.axis.AxisCollection var18 = new org.jfree.chart.axis.AxisCollection();
    java.util.List var19 = var18.getAxesAtLeft();
    org.jfree.data.general.DefaultKeyedValues2DDataset var20 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var20.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var25 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var20);
    org.jfree.data.Range var27 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds((org.jfree.data.category.CategoryDataset)var20, true);
    org.jfree.data.Range var29 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds((org.jfree.data.xy.XYDataset)var15, var19, var27, true);
    org.jfree.data.Range var31 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds((org.jfree.data.xy.XYDataset)var15, false);
    org.jfree.data.xy.XYDataset var35 = org.jfree.data.time.MovingAverage.createMovingAverage((org.jfree.data.xy.XYDataset)var15, "org.jfree.chart.renderer.NotOutlierException: hi!", 0.0d, (-1.0d));
    int var36 = var15.getSeriesCount();
    boolean var37 = var10.equals((java.lang.Object)var15);
    org.jfree.chart.axis.PeriodAxisLabelInfo var38 = new org.jfree.chart.axis.PeriodAxisLabelInfo(var8, (java.text.DateFormat)var10);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.util.EventListener[] var39 = var1.getListeners(var8);
      fail("Expected exception of type java.lang.ClassCastException");
    } catch (java.lang.ClassCastException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == false);

  }

  public void test443() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test443"); }


    int var3 = java.awt.Color.HSBtoRGB(0.0f, 1.0f, 10.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == (-655360));

  }

  public void test444() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test444"); }


    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var0 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.LegendItem var3 = var0.getLegendItem(1, 0);
    org.jfree.data.xy.XYIntervalSeriesCollection var4 = new org.jfree.data.xy.XYIntervalSeriesCollection();
    org.jfree.data.Range var5 = var0.findRangeBounds((org.jfree.data.xy.XYDataset)var4);
    var0.setPlotLines(false);
    org.jfree.chart.StandardChartTheme var11 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var12 = var11.getLegendItemPaint();
    java.awt.Paint var13 = var11.getSubtitlePaint();
    java.awt.Font var14 = var11.getLargeFont();
    java.awt.Paint var15 = var11.getWallPaint();
    var0.setSeriesFillPaint(10, var15);
    java.awt.Shape var17 = var0.getLegendLine();
    var0.setSeriesVisibleInLegend((java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);

  }

  public void test445() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test445"); }


    org.jfree.chart.plot.ContourPlot var0 = new org.jfree.chart.plot.ContourPlot();
    org.jfree.chart.plot.CategoryMarker var2 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    var0.addRangeMarker((org.jfree.chart.plot.Marker)var2);
    org.jfree.chart.urls.StandardXYURLGenerator var7 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    org.jfree.data.statistics.SimpleHistogramDataset var9 = new org.jfree.data.statistics.SimpleHistogramDataset((java.lang.Comparable)100.0f);
    var9.removeAllBins();
    java.lang.String var13 = var7.generateURL((org.jfree.data.xy.XYDataset)var9, 100, 1);
    var0.setURLGenerator((org.jfree.chart.urls.XYURLGenerator)var7);
    java.lang.Number[][] var16 = new java.lang.Number[][] { };
    java.lang.Number[][] var17 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var18 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var16, var17);
    int var19 = var18.getRowCount();
    org.jfree.data.xy.OHLCDataItem[] var21 = new org.jfree.data.xy.OHLCDataItem[] { };
    org.jfree.data.xy.DefaultOHLCDataset var22 = new org.jfree.data.xy.DefaultOHLCDataset((java.lang.Comparable)0.05d, var21);
    var18.setSeriesKeys((java.lang.Comparable[])var21);
    org.jfree.data.xy.DefaultOHLCDataset var24 = new org.jfree.data.xy.DefaultOHLCDataset((java.lang.Comparable)"d", var21);
    java.lang.String var27 = var7.generateURL((org.jfree.data.xy.XYDataset)var24, 15, 10);
    java.lang.Comparable var29 = var24.getSeriesKey(80);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var13 + "' != '" + "hi!?hi!=100&amp;hi!=1"+ "'", var13.equals("hi!?hi!=100&amp;hi!=1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + "hi!?hi!=15&amp;hi!=10"+ "'", var27.equals("hi!?hi!=15&amp;hi!=10"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var29 + "' != '" + "d"+ "'", var29.equals("d"));

  }

  public void test446() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test446"); }


    org.jfree.chart.renderer.category.ScatterRenderer var0 = new org.jfree.chart.renderer.category.ScatterRenderer();
    var0.setUseFillPaint(true);
    var0.setUseFillPaint(false);
    var0.setDrawOutlines(false);

  }

  public void test447() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test447"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var2 = var0.findDomainBounds((org.jfree.data.xy.XYDataset)var1);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.labels.ItemLabelPosition var10 = var5.getNegativeItemLabelPosition(0, 0);
    double var11 = var10.getAngle();
    var0.setNegativeItemLabelPosition(var10);
    org.jfree.chart.labels.XYSeriesLabelGenerator var13 = var0.getLegendItemToolTipGenerator();
    org.jfree.chart.title.LegendTitle var14 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var0);
    org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var16 = var15.getDomainCrosshairColumnKey();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var17.setUseSeriesOffset(true);
    var17.setBaseSeriesVisible(true);
    var17.setAutoPopulateSeriesShape(false);
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var24 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var17};
    var15.setRenderers(var24);
    var14.setSources((org.jfree.chart.LegendItemSource[])var24);
    org.jfree.ui.RectangleAnchor var27 = var14.getLegendItemGraphicLocation();
    java.lang.Object var28 = var14.clone();
    org.jfree.chart.plot.MultiplePiePlot var29 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var30 = var29.getPieChart();
    var30.setBackgroundImageAlpha(1.0f);
    boolean var33 = var30.getAntiAlias();
    var14.addChangeListener((org.jfree.chart.event.TitleChangeListener)var30);
    var30.setTextAntiAlias(true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == true);

  }

  public void test448() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test448"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var6 = var5.getItemLabelFont();
    double var7 = var5.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var11 = var10.getItemLabelFont();
    java.awt.Shape var12 = var10.getBaseLegendShape();
    var5.setShape(var12);
    var2.setLegendBar(var12);
    var2.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var17 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var18 = var2.findDomainBounds((org.jfree.data.xy.XYDataset)var17);
    int var20 = var17.getItemCount(3);
    var17.add((java.lang.Number)(byte)0, (java.lang.Number)8, "s", true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == 0);

  }

  public void test449() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test449"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    boolean var3 = var0.isRangeZeroBaselineVisible();
    java.awt.Paint var4 = var0.getDomainZeroBaselinePaint();
    org.jfree.chart.urls.StandardXYURLGenerator var9 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
    org.jfree.data.statistics.SimpleHistogramDataset var11 = new org.jfree.data.statistics.SimpleHistogramDataset((java.lang.Comparable)100.0f);
    var11.removeAllBins();
    java.lang.String var15 = var9.generateURL((org.jfree.data.xy.XYDataset)var11, 100, 1);
    org.jfree.data.DomainOrder var16 = var11.getDomainOrder();
    var11.removeAllBins();
    org.jfree.data.statistics.SimpleHistogramBin var20 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
    var20.setItemCount(2);
    var11.addBin(var20);
    var0.setDataset(0, (org.jfree.data.xy.XYDataset)var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var15 + "' != '" + "hi!?hi!=100&amp;hi!=1"+ "'", var15.equals("hi!?hi!=100&amp;hi!=1"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);

  }

  public void test450() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test450"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var1 = var0.getDomainCrosshairColumnKey();
    var0.setCrosshairDatasetIndex(100);
    int var4 = var0.getBackgroundImageAlignment();
    org.jfree.chart.axis.CategoryLabelPositions var6 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
    org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var9 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var10 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var9);
    org.jfree.data.time.TimePeriodValue var12 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var9, (java.lang.Number)10);
    var7.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var14 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var16 = var14.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var19 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var20 = var19.getTickLabelPaint();
    var14.setFillPaint(var20, true);
    var7.setDomainCrosshairPaint(var20);
    boolean var24 = var6.equals((java.lang.Object)var7);
    org.jfree.ui.RectangleEdge var25 = var7.getRangeAxisEdge();
    org.jfree.chart.axis.SubCategoryAxis var27 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
    int var28 = var7.getDomainAxisIndex((org.jfree.chart.axis.CategoryAxis)var27);
    java.awt.Paint var29 = var27.getSubLabelPaint();
    org.jfree.chart.plot.CombinedRangeXYPlot var31 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    org.jfree.chart.annotations.XYPointerAnnotation var36 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
    double var37 = var36.getLabelOffset();
    org.jfree.ui.TextAnchor var38 = var36.getRotationAnchor();
    boolean var39 = var31.removeAnnotation((org.jfree.chart.annotations.XYAnnotation)var36);
    org.jfree.chart.StandardChartTheme var42 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var43 = var42.getLegendItemPaint();
    java.awt.Paint var44 = var42.getSubtitlePaint();
    java.awt.Font var45 = var42.getLargeFont();
    var36.setFont(var45);
    var27.setTickLabelFont((java.lang.Comparable)(byte)10, var45);
    var0.setNoDataMessageFont(var45);
    org.jfree.data.statistics.DefaultStatisticalCategoryDataset var49 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
    var49.clear();
    java.util.List var51 = var49.getRowKeys();
    java.lang.Object var52 = var49.clone();
    int var53 = var49.getRowCount();
    org.jfree.data.xy.VectorDataItem var60 = new org.jfree.data.xy.VectorDataItem((-1.0d), 10.0d, 2.0d, (-1.0d));
    org.jfree.data.xy.Vector var61 = var60.getVector();
    var49.add(10.0d, (-90.0d), (java.lang.Comparable)var60, (java.lang.Comparable)"org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");
    var0.setDataset((org.jfree.data.category.CategoryDataset)var49);
    java.util.List var65 = var49.getRowKeys();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var28 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 3.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var51);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var53 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var61);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var65);

  }

  public void test451() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test451"); }


    org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var0);
    var1.setMaximumItemCount(0);
    org.jfree.data.time.Second var4 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var5 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var4);
    var5.setMaximumItemCount(0);
    boolean var8 = var5.getNotify();
    double var9 = var5.getMaxY();
    java.lang.Object var10 = var5.clone();
    org.jfree.data.time.TimeSeries var11 = var1.addAndOrUpdate(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test452() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test452"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    java.lang.String var2 = var0.getPlotType();
    org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var11 = var10.getTickLabelPaint();
    var5.setFillPaint(var11, true);
    var4.setLabelPaint(var11);
    boolean var15 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var4);
    org.jfree.chart.axis.AxisLocation var16 = var0.getDomainAxisLocation();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var19 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var22 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var23 = var22.getItemLabelFont();
    double var24 = var22.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var27 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var28 = var27.getItemLabelFont();
    java.awt.Shape var29 = var27.getBaseLegendShape();
    var22.setShape(var29);
    var19.setLegendBar(var29);
    var19.setDrawBarOutline(true);
    org.jfree.data.xy.CategoryTableXYDataset var34 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var35 = var19.findDomainBounds((org.jfree.data.xy.XYDataset)var34);
    int var36 = var0.getIndexOf((org.jfree.chart.renderer.xy.XYItemRenderer)var19);
    org.jfree.chart.event.RendererChangeEvent var38 = new org.jfree.chart.event.RendererChangeEvent((java.lang.Object)var19, false);
    org.jfree.chart.labels.ItemLabelPosition var39 = var19.getNegativeItemLabelPositionFallback();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);

  }

  public void test453() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test453"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    org.jfree.chart.plot.dial.DialValueIndicator var19 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var20 = var19.getInsets();
    java.awt.Stroke var21 = var19.getOutlineStroke();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var19.setOutlinePaint((java.awt.Paint)var36);
    java.awt.Color var39 = var36.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    double var45 = var42.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var46 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var47 = var46.getRangeZeroBaselineStroke();
    var42.setStroke(var47, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var50 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var51 = var50.isOutline();
    var50.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var56 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var57 = var56.getLegendItemPaint();
    var50.setShapePaint(var57);
    org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var16, (java.awt.Paint)var39, var47, var57);
    var59.setShapeVisible(false);
    java.awt.Font var62 = var59.getLabelFont();
    org.jfree.chart.DrawableLegendItem var63 = new org.jfree.chart.DrawableLegendItem(var59);
    double var64 = var63.getMaxY();
    var63.setX(0.0d);
    java.awt.Shape var67 = var63.getMarker();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var64 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var67);

  }

  public void test454() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test454"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setNextFocusableComponent((java.awt.Component)var2);
    javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var5 = var4.getLocation();
    java.awt.Dimension var6 = var4.preferredSize();
    var0.setSize(var6);
    var0.setIgnoreRepaint(false);
    float var10 = var0.getAlignmentX();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == 0.5f);

  }

  public void test455() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test455"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    java.awt.Stroke var7 = var0.getRangeMinorGridlineStroke();
    boolean var8 = var0.isRangeMinorGridlinesVisible();
    double[] var11 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var12 = new org.jfree.chart.annotations.XYPolygonAnnotation(var11);
    double[] var15 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var16 = new org.jfree.chart.annotations.XYPolygonAnnotation(var15);
    org.jfree.chart.ClipPath var17 = new org.jfree.chart.ClipPath(var11, var15);
    double[][] var18 = new double[][] { var11};
    double[] var23 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var24 = new org.jfree.chart.annotations.XYPolygonAnnotation(var23);
    double[] var27 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var28 = new org.jfree.chart.annotations.XYPolygonAnnotation(var27);
    org.jfree.chart.ClipPath var29 = new org.jfree.chart.ClipPath(var23, var27);
    double[][] var30 = new double[][] { var23};
    org.jfree.data.category.CategoryDataset var31 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var30);
    org.jfree.data.category.DefaultIntervalCategoryDataset var32 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var18, var30);
    java.util.List var33 = var32.getColumnKeys();
    var0.setDataset((org.jfree.data.category.CategoryDataset)var32);
    org.jfree.data.general.DatasetGroup var36 = new org.jfree.data.general.DatasetGroup("Combined Range XYPlot");
    java.lang.String var37 = var36.getID();
    var32.setGroup(var36);
    org.jfree.data.Range var39 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds((org.jfree.data.category.CategoryDataset)var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var37 + "' != '" + "Combined Range XYPlot"+ "'", var37.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);

  }

  public void test456() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test456"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setNextFocusableComponent((java.awt.Component)var2);
    var0.show();
    var0.show(false);
    org.jfree.chart.annotations.CategoryTextAnnotation var10 = new org.jfree.chart.annotations.CategoryTextAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (java.lang.Comparable)(short)1, 0.05d);
    java.awt.Font var11 = var10.getFont();
    var0.setFont(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);

  }

  public void test457() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test457"); }


    double[] var2 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var3 = new org.jfree.chart.annotations.XYPolygonAnnotation(var2);
    double[] var6 = new double[] { 1.0d, 0.0d};
    org.jfree.chart.annotations.XYPolygonAnnotation var7 = new org.jfree.chart.annotations.XYPolygonAnnotation(var6);
    org.jfree.chart.ClipPath var8 = new org.jfree.chart.ClipPath(var2, var6);
    boolean var9 = var8.isFillPath();
    var8.setClip(false);
    org.jfree.chart.plot.CategoryPlot var12 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var14 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var15 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var14);
    org.jfree.data.time.TimePeriodValue var17 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var14, (java.lang.Number)10);
    var12.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var19 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var21 = var19.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var24 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var25 = var24.getTickLabelPaint();
    var19.setFillPaint(var25, true);
    var12.setDomainCrosshairPaint(var25);
    var8.setFillPaint(var25);
    double[] var30 = var8.getXValue();
    java.lang.Object var31 = var8.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);

  }

  public void test458() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test458"); }


    org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    java.lang.Object var3 = var2.clone();
    int var4 = var2.getMaximumItemCount();
    javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var6 = var5.getPreferredSize();
    boolean var7 = var5.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var9 = new org.jfree.chart.plot.ContourPlot();
    var9.setOutlineVisible(false);
    var5.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var9);
    org.jfree.chart.urls.XYURLGenerator var13 = var9.getURLGenerator();
    var2.removePropertyChangeListener((java.beans.PropertyChangeListener)var9);
    float var15 = var9.getForegroundAlpha();
    boolean var16 = var9.isDomainZoomable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var15 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);

  }

  public void test459() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test459"); }


    org.jfree.chart.labels.StandardPieSectionLabelGenerator var0 = new org.jfree.chart.labels.StandardPieSectionLabelGenerator();
    org.jfree.chart.renderer.category.StackedBarRenderer var2 = new org.jfree.chart.renderer.category.StackedBarRenderer(false);
    org.jfree.chart.renderer.category.BarRenderer3D var3 = new org.jfree.chart.renderer.category.BarRenderer3D();
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    org.jfree.data.general.DefaultKeyedValues2DDataset var21 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    org.jfree.chart.entity.CategoryItemEntity var24 = new org.jfree.chart.entity.CategoryItemEntity(var16, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (org.jfree.data.category.CategoryDataset)var21, (java.lang.Comparable)0.0f, (java.lang.Comparable)true);
    org.jfree.data.Range var26 = var3.findRangeBounds((org.jfree.data.category.CategoryDataset)var21, true);
    org.jfree.data.Range var27 = var2.findRangeBounds((org.jfree.data.category.CategoryDataset)var21);
    org.jfree.data.general.PieDataset var29 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow((org.jfree.data.category.CategoryDataset)var21, 1);
    java.text.AttributedString var31 = var0.generateAttributedSectionLabel(var29, (java.lang.Comparable)0.5f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var31);

  }

  public void test460() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test460"); }


    org.jfree.chart.renderer.xy.XYBlockRenderer var2 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
    org.jfree.data.xy.CategoryTableXYDataset var3 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.Range var4 = var2.findDomainBounds((org.jfree.data.xy.XYDataset)var3);
    org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var8 = var7.getItemLabelFont();
    double var9 = var7.getItemLabelAnchorOffset();
    org.jfree.chart.labels.ItemLabelPosition var12 = var7.getNegativeItemLabelPosition(0, 0);
    double var13 = var12.getAngle();
    var2.setNegativeItemLabelPosition(var12);
    org.jfree.chart.labels.XYSeriesLabelGenerator var15 = var2.getLegendItemToolTipGenerator();
    org.jfree.chart.title.LegendTitle var16 = new org.jfree.chart.title.LegendTitle((org.jfree.chart.LegendItemSource)var2);
    org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var18 = var17.getDomainCrosshairColumnKey();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var19 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var19.setUseSeriesOffset(true);
    var19.setBaseSeriesVisible(true);
    var19.setAutoPopulateSeriesShape(false);
    org.jfree.chart.renderer.category.CategoryItemRenderer[] var26 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var19};
    var17.setRenderers(var26);
    var16.setSources((org.jfree.chart.LegendItemSource[])var26);
    org.jfree.ui.RectangleAnchor var29 = var16.getLegendItemGraphicLocation();
    java.lang.Object var30 = var16.clone();
    org.jfree.chart.annotations.XYTitleAnnotation var31 = new org.jfree.chart.annotations.XYTitleAnnotation(3.0d, 360.0d, (org.jfree.chart.title.Title)var16);
    java.awt.Font var32 = var16.getItemFont();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var12);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);

  }

  public void test461() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test461"); }


    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var4 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var5 = var4.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var6 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var7 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var4, (org.jfree.chart.urls.XYURLGenerator)var6);
    org.jfree.chart.renderer.xy.StandardXYItemRenderer var8 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, (org.jfree.chart.labels.XYToolTipGenerator)var4);
    java.text.NumberFormat var9 = var4.getYFormat();
    org.jfree.chart.labels.StandardCategoryToolTipGenerator var10 = new org.jfree.chart.labels.StandardCategoryToolTipGenerator("jfreechart-", var9);
    org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator var11 = new org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator("org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]", var9);
    org.jfree.chart.plot.XYPlot var12 = new org.jfree.chart.plot.XYPlot();
    java.lang.Object var13 = var12.clone();
    boolean var14 = var11.equals((java.lang.Object)var12);
    var12.setDomainCrosshairValue(10.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == false);

  }

  public void test462() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test462"); }


    org.jfree.chart.renderer.xy.DefaultXYItemRenderer var0 = new org.jfree.chart.renderer.xy.DefaultXYItemRenderer();
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var1 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var2 = var1.clone();
    var0.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var1);
    java.lang.Object var4 = var1.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);

  }

  public void test463() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test463"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var2);
    org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
    var0.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    boolean var7 = var0.getDrawSharedDomainAxis();
    boolean var8 = var0.getDrawSharedDomainAxis();
    var0.clearRangeMarkers(0);
    org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    var0.addChangeListener((org.jfree.chart.event.PlotChangeListener)var11);
    org.jfree.chart.event.PlotChangeEvent var13 = new org.jfree.chart.event.PlotChangeEvent((org.jfree.chart.plot.Plot)var11);
    org.jfree.data.xy.CategoryTableXYDataset var14 = new org.jfree.data.xy.CategoryTableXYDataset();
    org.jfree.data.general.DefaultKeyedValues2DDataset var15 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var15.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    boolean var20 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull((org.jfree.data.category.CategoryDataset)var15);
    java.util.List var21 = var15.getColumnKeys();
    org.jfree.data.Range var23 = org.jfree.data.general.DatasetUtilities.findDomainBounds((org.jfree.data.xy.XYDataset)var14, var21, true);
    double var25 = var14.getDomainLowerBound(true);
    int var26 = var11.indexOf((org.jfree.data.xy.XYDataset)var14);
    org.jfree.data.xy.XYSeries var29 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    java.lang.Object var30 = var29.clone();
    int var31 = var29.getMaximumItemCount();
    javax.swing.JPanel var32 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var33 = var32.getPreferredSize();
    boolean var34 = var32.getIgnoreRepaint();
    org.jfree.chart.plot.ContourPlot var36 = new org.jfree.chart.plot.ContourPlot();
    var36.setOutlineVisible(false);
    var32.addPropertyChangeListener("Combined Range XYPlot", (java.beans.PropertyChangeListener)var36);
    org.jfree.chart.urls.XYURLGenerator var40 = var36.getURLGenerator();
    var29.removePropertyChangeListener((java.beans.PropertyChangeListener)var36);
    float var42 = var36.getForegroundAlpha();
    org.jfree.chart.plot.ValueMarker var44 = new org.jfree.chart.plot.ValueMarker((-1.0d));
    var36.addDomainMarker((org.jfree.chart.plot.Marker)var44);
    java.awt.Stroke var46 = var44.getStroke();
    var11.setRangeCrosshairStroke(var46);
    org.jfree.chart.axis.NumberAxis3D var48 = new org.jfree.chart.axis.NumberAxis3D();
    org.jfree.data.Range var49 = var11.getDataRange((org.jfree.chart.axis.ValueAxis)var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var20 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var25 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == 2147483647);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var34 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var42 == 1.0f);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);

  }

  public void test464() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test464"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.chart.axis.CyclicNumberAxis var3 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var4 = var3.getTickLabelPaint();
    org.jfree.chart.axis.ValueAxis[] var5 = new org.jfree.chart.axis.ValueAxis[] { var3};
    var0.setRangeAxes(var5);
    boolean var7 = var0.isRangeZoomable();
    var0.mapDatasetToRangeAxis(500, 2);
    boolean var11 = var0.isRangePannable();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == false);

  }

  public void test465() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test465"); }


    org.jfree.chart.plot.CombinedDomainCategoryPlot var0 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    java.util.List var1 = var0.getSubplots();
    org.jfree.chart.renderer.category.BarRenderer3D var4 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var5 = var4.getItemLabelFont();
    org.jfree.chart.util.HexNumberFormat var7 = new org.jfree.chart.util.HexNumberFormat();
    org.jfree.chart.labels.IntervalCategoryToolTipGenerator var8 = new org.jfree.chart.labels.IntervalCategoryToolTipGenerator("Combined Range XYPlot", (java.text.NumberFormat)var7);
    var4.setToolTipGenerator((org.jfree.chart.labels.CategoryToolTipGenerator)var8);
    boolean var10 = var0.equals((java.lang.Object)var4);
    org.jfree.chart.plot.CombinedRangeXYPlot var16 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var17 = var16.getRangeZeroBaselineStroke();
    java.lang.String var18 = var16.getPlotType();
    org.jfree.chart.plot.CategoryMarker var20 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var21 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var23 = var21.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var26 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var27 = var26.getTickLabelPaint();
    var21.setFillPaint(var27, true);
    var20.setLabelPaint(var27);
    boolean var31 = var16.removeRangeMarker((org.jfree.chart.plot.Marker)var20);
    java.awt.Paint var33 = var16.getQuadrantPaint(1);
    org.jfree.data.xy.XYDataset var35 = var16.getDataset((-1));
    double var36 = var16.getDomainCrosshairValue();
    javax.swing.JPanel var37 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var38 = var37.getPreferredSize();
    boolean var39 = var37.getIgnoreRepaint();
    boolean var40 = var37.isLightweight();
    javax.swing.JPanel var41 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var42 = var41.getPreferredSize();
    javax.swing.JPanel var43 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var41.setNextFocusableComponent((java.awt.Component)var43);
    var41.show();
    javax.swing.JPanel var46 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var47 = var46.getLocation();
    java.awt.Dimension var48 = var46.preferredSize();
    java.awt.Rectangle var49 = var46.bounds();
    var41.scrollRectToVisible(var49);
    var37.setBounds(var49);
    org.jfree.chart.renderer.category.BarRenderer3D var54 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var55 = var54.getItemLabelFont();
    java.awt.Shape var56 = var54.getBaseLegendShape();
    double var57 = var54.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var58 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var59 = var58.getRangeZeroBaselineStroke();
    var54.setStroke(var59, false);
    org.jfree.chart.renderer.category.BarRenderer3D var64 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var65 = var64.getItemLabelFont();
    double var66 = var64.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var69 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var70 = var69.getItemLabelFont();
    java.awt.Shape var71 = var69.getBaseLegendShape();
    var64.setShape(var71);
    org.jfree.chart.StandardChartTheme var75 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var76 = var75.getLegendItemPaint();
    var64.setItemLabelPaint(var76);
    org.jfree.chart.annotations.XYShapeAnnotation var78 = new org.jfree.chart.annotations.XYShapeAnnotation((java.awt.Shape)var49, var59, var76);
    var16.setDomainMinorGridlineStroke(var59);
    org.jfree.chart.plot.dial.StandardDialScale var80 = new org.jfree.chart.plot.dial.StandardDialScale();
    var80.setMajorTickIncrement(10.0d);
    java.awt.Paint var83 = var80.getMinorTickPaint();
    org.jfree.chart.annotations.XYLineAnnotation var84 = new org.jfree.chart.annotations.XYLineAnnotation(10.0d, (-0.7853981633974483d), (-0.21460183660255172d), 100.0d, var59, var83);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var4.setSeriesPaint((-334), var83, true);
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var10 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var18 + "' != '" + "Combined Range XYPlot"+ "'", var18.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var31 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var36 == 0.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var40 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var46);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var56);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var57 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var65);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var70);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var71);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var76);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var83);

  }

  public void test466() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test466"); }


    org.jfree.data.xy.DefaultIntervalXYDataset var0 = new org.jfree.data.xy.DefaultIntervalXYDataset();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var3 = var0.getEndYValue(2013, 10);
      fail("Expected exception of type java.lang.IndexOutOfBoundsException");
    } catch (java.lang.IndexOutOfBoundsException e) {
      // Expected exception.
    }

  }

  public void test467() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test467"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    var0.addCornerTextItem("0x00000001");
    var0.setAngleGridlinesVisible(false);
    org.jfree.chart.plot.PolarPlot var5 = new org.jfree.chart.plot.PolarPlot();
    boolean var6 = var5.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var11 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var11.setUpperMargin(10.0d);
    var11.setAxisLineVisible(true);
    javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var17 = var16.getLocation();
    java.awt.Dimension var18 = var16.preferredSize();
    java.awt.Rectangle var19 = var16.bounds();
    java.awt.Point var20 = var5.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var11, (java.awt.geom.Rectangle2D)var19);
    org.jfree.chart.renderer.DefaultPolarItemRenderer var22 = new org.jfree.chart.renderer.DefaultPolarItemRenderer();
    var5.setRenderer(10, (org.jfree.chart.renderer.PolarItemRenderer)var22, true);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var27 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var28 = var27.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var29 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var30 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var27, (org.jfree.chart.urls.XYURLGenerator)var29);
    org.jfree.chart.renderer.xy.StandardXYItemRenderer var31 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, (org.jfree.chart.labels.XYToolTipGenerator)var27);
    java.text.NumberFormat var32 = var27.getYFormat();
    var22.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var27);
    java.lang.String[] var36 = new java.lang.String[] { "hi!"};
    org.jfree.chart.axis.SymbolAxis var37 = new org.jfree.chart.axis.SymbolAxis("hi!", var36);
    org.jfree.chart.plot.CompassPlot var38 = new org.jfree.chart.plot.CompassPlot();
    boolean var39 = var37.equals((java.lang.Object)var38);
    java.lang.String var40 = var38.getPlotType();
    java.awt.Paint var41 = var38.getRoseCenterPaint();
    java.awt.Paint var42 = var38.getBackgroundPaint();
    javax.swing.JPanel var43 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var44 = var43.getPreferredSize();
    java.awt.image.ColorModel var45 = var43.getColorModel();
    var43.updateUI();
    java.lang.String var47 = var43.toString();
    boolean var48 = var43.getInheritsPopupMenu();
    javax.swing.InputMap var49 = var43.getInputMap();
    var43.nextFocus();
    boolean var51 = var43.getInheritsPopupMenu();
    javax.swing.JPanel var52 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var53 = var52.getPreferredSize();
    java.awt.image.ColorModel var54 = var52.getColorModel();
    var52.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Color var59 = var52.getForeground();
    var43.setForeground(var59);
    org.jfree.chart.renderer.xy.XYDifferenceRenderer var62 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var42, (java.awt.Paint)var59, true);
    org.jfree.chart.labels.StandardXYSeriesLabelGenerator var63 = new org.jfree.chart.labels.StandardXYSeriesLabelGenerator();
    var62.setLegendItemLabelGenerator((org.jfree.chart.labels.XYSeriesLabelGenerator)var63);
    var22.setLegendItemURLGenerator((org.jfree.chart.labels.XYSeriesLabelGenerator)var63);
    boolean var66 = var22.getDrawOutlineWhenFilled();
    var0.setRenderer((org.jfree.chart.renderer.PolarItemRenderer)var22);
    org.jfree.chart.urls.XYURLGenerator var68 = var22.getURLGenerator();
    boolean var69 = var22.getShapesVisible();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var6 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var39 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "Compass Plot"+ "'", var40.equals("Compass Plot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var47 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var47,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var47.equals("org.jfree.chart.ChartPanel[,0,0,0var47,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var48 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var53);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var54);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var59);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var66 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var68);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var69 == true);

  }

  public void test468() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test468"); }


    org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
    int var2 = var0.getColumnIndex((java.lang.Comparable)'#');
    var0.clear();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      var0.removeRow((java.lang.Comparable)(-334));
      fail("Expected exception of type org.jfree.data.UnknownKeyException");
    } catch (org.jfree.data.UnknownKeyException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var2 == (-1));

  }

  public void test469() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test469"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    java.awt.image.ColorModel var2 = var0.getColorModel();
    var0.firePropertyChange("", 0.0f, 0.0f);
    java.awt.Dimension var7 = var0.getMaximumSize();
    java.awt.Color var8 = var0.getBackground();
    boolean var9 = javax.swing.JComponent.isLightweightComponent((java.awt.Component)var0);
    javax.swing.JPopupMenu var10 = var0.getComponentPopupMenu();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test470() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test470"); }


    org.jfree.data.general.WaferMapDataset var3 = new org.jfree.data.general.WaferMapDataset(2, 15, (java.lang.Number)5.0d);
    org.jfree.chart.renderer.WaferMapRenderer var6 = new org.jfree.chart.renderer.WaferMapRenderer(100, 2);
    org.jfree.chart.plot.WaferMapPlot var7 = new org.jfree.chart.plot.WaferMapPlot(var3, var6);
    var6.clearSeriesPaints(false);

  }

  public void test471() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test471"); }


    org.jfree.data.time.DynamicTimeSeriesCollection var2 = new org.jfree.data.time.DynamicTimeSeriesCollection(2, (-1));
    double var4 = var2.getRangeLowerBound(true);
    var2.setPosition((-2));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0.0d);

  }

  public void test472() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test472"); }


    org.jfree.chart.labels.StandardPieToolTipGenerator var1 = new org.jfree.chart.labels.StandardPieToolTipGenerator("15,963d6h59m59.999s");

  }

  public void test473() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test473"); }


    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var2 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.LegendItem var5 = var2.getLegendItem(1, 0);
    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var6 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    var2.setBaseToolTipGenerator((org.jfree.chart.labels.XYToolTipGenerator)var6);
    org.jfree.chart.renderer.xy.CandlestickRenderer var8 = new org.jfree.chart.renderer.xy.CandlestickRenderer(0.75d, false, (org.jfree.chart.labels.XYToolTipGenerator)var6);
    boolean var9 = var8.getUseOutlinePaint();
    var8.setAutoWidthGap(100.0d);
    int var12 = var8.getAutoWidthMethod();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);

  }

  public void test474() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test474"); }


    org.jfree.chart.urls.StandardCategoryURLGenerator var0 = new org.jfree.chart.urls.StandardCategoryURLGenerator();

  }

  public void test475() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test475"); }


    org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
    java.awt.Stroke var2 = var0.getSectionOutlineStroke((-334));
    boolean var3 = var0.getSimpleLabels();
    org.jfree.chart.plot.AbstractPieLabelDistributor var4 = var0.getLabelDistributor();
    java.lang.Object var5 = var0.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var3 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);

  }

  public void test476() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test476"); }


    org.jfree.data.time.DynamicTimeSeriesCollection var2 = new org.jfree.data.time.DynamicTimeSeriesCollection(2, (-1));
    int var4 = var2.offsetFromOldest(51);
    int var5 = var2.getNewestIndex();
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.Comparable var7 = var2.getSeriesKey(10);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == (-2));

  }

  public void test477() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test477"); }


    org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var0);
    var1.setMaximumItemCount(0);
    boolean var4 = var1.getNotify();
    double var5 = var1.getMaxY();
    org.jfree.data.time.Minute var6 = new org.jfree.data.time.Minute();
    int var7 = var6.getMinute();
    org.jfree.data.time.Hour var8 = var6.getHour();
    org.jfree.data.time.Year var11 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var12 = new org.jfree.data.time.Month(1, var11);
    java.util.Locale var13 = javax.swing.JComponent.getDefaultLocale();
    org.jfree.chart.axis.MonthDateFormat var15 = new org.jfree.chart.axis.MonthDateFormat(var13, 2147483647);
    java.util.Calendar var16 = var15.getCalendar();
    long var17 = var12.getLastMillisecond(var16);
    long var18 = var8.getLastMillisecond(var16);
    long var19 = var8.getLastMillisecond();
    var1.add((org.jfree.data.time.RegularTimePeriod)var8, 1.5d, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == Double.NaN);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var17 == (-59008924800001L));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var18 == 1378965599999L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var19 == 1378965599999L);

  }

  public void test478() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test478"); }


    org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
    org.jfree.data.general.DatasetGroup var1 = var0.getDatasetGroup();
    org.jfree.chart.plot.Crosshair var2 = new org.jfree.chart.plot.Crosshair();
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var3 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var5 = var3.getSeriesLinesVisible(10);
    var3.setUseOutlinePaint(true);
    boolean var8 = var2.equals((java.lang.Object)true);
    java.awt.Paint var9 = var2.getLabelPaint();
    var0.setValuePaint(var9);
    var0.setSubrange(4, 1.05d, 0.02d);
    var0.setSubrangeInfo(4, 0.0d, 0.5d, 174.49d, 0.2d);
    org.jfree.chart.renderer.category.BarRenderer3D var23 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Paint var24 = var23.getShadowPaint();
    var0.setThermometerPaint(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var8 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);

  }

  public void test479() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test479"); }


    org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var3 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
    java.lang.Object var4 = var3.clone();
    org.jfree.chart.urls.TimeSeriesURLGenerator var5 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
    org.jfree.chart.renderer.xy.XYStepAreaRenderer var6 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, (org.jfree.chart.labels.XYToolTipGenerator)var3, (org.jfree.chart.urls.XYURLGenerator)var5);
    org.jfree.chart.renderer.xy.StandardXYItemRenderer var7 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, (org.jfree.chart.labels.XYToolTipGenerator)var3);
    java.text.NumberFormat var8 = var3.getYFormat();
    org.jfree.chart.labels.StandardCategoryToolTipGenerator var9 = new org.jfree.chart.labels.StandardCategoryToolTipGenerator("jfreechart-", var8);
    javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var11 = var10.getPreferredSize();
    boolean var12 = var10.getIgnoreRepaint();
    java.awt.dnd.DropTarget var13 = var10.getDropTarget();
    java.awt.event.ContainerListener[] var14 = var10.getContainerListeners();
    var10.paintImmediately(2147483647, 100, 1, 100);
    var10.firePropertyChange("hi!", '#', '#');
    boolean var24 = var9.equals((java.lang.Object)var10);
    java.lang.Object var25 = var9.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var24 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);

  }

  public void test480() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test480"); }


    org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer var0 = new org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer();
    double var1 = var0.getBoxWidth();
    org.jfree.chart.plot.PiePlot3D var2 = new org.jfree.chart.plot.PiePlot3D();
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    java.awt.Shape var11 = var9.getBaseLegendShape();
    org.jfree.chart.entity.ContourEntity var13 = new org.jfree.chart.entity.ContourEntity(var11, "hi!?hi!=100&amp;hi!=1");
    org.jfree.chart.title.TextTitle var15 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var16 = var15.isVisible();
    java.lang.Object var17 = var15.clone();
    java.lang.String var18 = var15.getURLText();
    javax.swing.JPanel var19 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var20 = var19.getPreferredSize();
    java.awt.image.ColorModel var21 = var19.getColorModel();
    var19.updateUI();
    java.lang.String var23 = var19.toString();
    java.awt.Color var24 = var19.getForeground();
    var15.setBackgroundPaint((java.awt.Paint)var24);
    int var26 = var24.getRGB();
    int var27 = var24.getBlue();
    org.jfree.chart.plot.dial.DialPlot var28 = new org.jfree.chart.plot.dial.DialPlot();
    org.jfree.chart.plot.dial.StandardDialScale var29 = new org.jfree.chart.plot.dial.StandardDialScale();
    int var30 = var28.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var29);
    org.jfree.chart.plot.dial.DialValueIndicator var31 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var32 = var31.getInsets();
    int var33 = var28.getLayerIndex((org.jfree.chart.plot.dial.DialLayer)var31);
    java.awt.Stroke var34 = var31.getOutlineStroke();
    org.jfree.chart.title.TextTitle var36 = new org.jfree.chart.title.TextTitle("hi!");
    boolean var37 = var36.isVisible();
    java.lang.Object var38 = var36.clone();
    java.lang.String var39 = var36.getURLText();
    javax.swing.JPanel var40 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var41 = var40.getPreferredSize();
    java.awt.image.ColorModel var42 = var40.getColorModel();
    var40.updateUI();
    java.lang.String var44 = var40.toString();
    java.awt.Color var45 = var40.getForeground();
    var36.setBackgroundPaint((java.awt.Paint)var45);
    org.jfree.chart.LegendItem var47 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var11, (java.awt.Paint)var24, var34, (java.awt.Paint)var45);
    var2.setBaseSectionOutlinePaint((java.awt.Paint)var24);
    org.jfree.chart.labels.PieSectionLabelGenerator var49 = var2.getLegendLabelToolTipGenerator();
    org.jfree.chart.renderer.category.StackedBarRenderer var52 = new org.jfree.chart.renderer.category.StackedBarRenderer(false);
    org.jfree.chart.labels.CategoryItemLabelGenerator var55 = var52.getItemLabelGenerator((-2), 1);
    var52.setRenderAsPercentages(true);
    java.awt.Stroke var58 = var52.getBaseStroke();
    var2.setSectionOutlineStroke((java.lang.Comparable)15.0d, var58);
    java.awt.Stroke var60 = var2.getLabelLinkStroke();
    var0.setStroke(var60, false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == (-1.0d));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var18);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var23 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var23.equals("org.jfree.chart.ChartPanel[,0,0,0var23,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == (-13421773));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var27 == 51);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var30 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var33 == (-1));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var40);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var42);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var44 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var44.equals("org.jfree.chart.ChartPanel[,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var45);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var55);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var58);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var60);

  }

  public void test481() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test481"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var1 = var0.getDomainCrosshairColumnKey();
    var0.setCrosshairDatasetIndex(100);
    org.jfree.chart.plot.CombinedRangeXYPlot var4 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var5 = var4.getRangeZeroBaselineStroke();
    org.jfree.chart.title.TextTitle var7 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var8 = var7.getMargin();
    var4.setAxisOffset(var8);
    var0.setAxisOffset(var8);
    org.jfree.chart.plot.CategoryMarker var12 = new org.jfree.chart.plot.CategoryMarker((java.lang.Comparable)10.0f);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var13 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var15 = var13.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var18 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var19 = var18.getTickLabelPaint();
    var13.setFillPaint(var19, true);
    var12.setLabelPaint(var19);
    org.jfree.chart.plot.CompassPlot var23 = new org.jfree.chart.plot.CompassPlot();
    var12.addChangeListener((org.jfree.chart.event.MarkerChangeListener)var23);
    boolean var25 = var0.removeRangeMarker((org.jfree.chart.plot.Marker)var12);
    var0.zoom(0.05d);

  }

  public void test482() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test482"); }


    org.jfree.chart.renderer.category.DefaultCategoryItemRenderer var0 = new org.jfree.chart.renderer.category.DefaultCategoryItemRenderer();
    var0.setBaseShapesFilled(true);
    java.lang.Boolean var3 = var0.getShapesFilled();
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);

  }

  public void test483() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test483"); }


    java.lang.Number[][] var0 = new java.lang.Number[][] { };
    java.lang.Number[][] var1 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var2 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var0, var1);
    java.lang.Object[][][] var3 = new java.lang.Object[][][] { var0};
    org.jfree.data.xy.DefaultWindDataset var4 = new org.jfree.data.xy.DefaultWindDataset(var3);
    int var5 = var4.getSeriesCount();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == 1);

  }

  public void test484() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test484"); }


    org.jfree.chart.block.FlowArrangement var0 = new org.jfree.chart.block.FlowArrangement();

  }

  public void test485() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test485"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
    java.awt.Paint var9 = var8.getZoomOutlinePaint();
    java.awt.geom.Point2D var10 = var8.getAnchor();
    var8.zoomInDomain((-90.0d), 1.0E-8d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);

  }

  public void test486() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test486"); }


    org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
    org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries((java.lang.Comparable)var0);
    var1.setMaximumItemCount(0);
    double var4 = var1.getMaxY();
    var1.removeAgedItems(604800000L, true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == Double.NaN);

  }

  public void test487() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test487"); }


    org.jfree.chart.ChartRenderingInfo var1 = new org.jfree.chart.ChartRenderingInfo();
    org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator var2 = new org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator();
    org.jfree.chart.imagemap.StandardURLTagFragmentGenerator var3 = new org.jfree.chart.imagemap.StandardURLTagFragmentGenerator();
    java.lang.String var4 = org.jfree.chart.imagemap.ImageMapUtilities.getImageMap("org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]", var1, (org.jfree.chart.imagemap.ToolTipTagFragmentGenerator)var2, (org.jfree.chart.imagemap.URLTagFragmentGenerator)var3);
    java.awt.geom.Rectangle2D var5 = var1.getChartArea();
    java.lang.Object var6 = var1.clone();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var4 + "' != '" + "<map id=\"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]\" name=\"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]\">\r\n</map>"+ "'", var4.equals("<map id=\"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]\" name=\"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]\">\r\n</map>"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test488() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test488"); }


    org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    var2.setBackgroundImageAlpha(1.0f);
    boolean var5 = var2.getAntiAlias();
    org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
    java.awt.Paint var9 = var8.getZoomOutlinePaint();
    var8.restoreAutoBounds();
    java.awt.Component var13 = var8.locate((-334), 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var5 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var13);

  }

  public void test489() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test489"); }


    org.jfree.chart.renderer.category.LevelRenderer var0 = new org.jfree.chart.renderer.category.LevelRenderer();
    double var1 = var0.getItemMargin();
    org.jfree.chart.StrokeMap var2 = new org.jfree.chart.StrokeMap();
    java.lang.Object var3 = var2.clone();
    boolean var4 = var0.equals((java.lang.Object)var2);
    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var11 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    double var16 = var14.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var19 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var20 = var19.getItemLabelFont();
    java.awt.Shape var21 = var19.getBaseLegendShape();
    var14.setShape(var21);
    var11.setLegendBar(var21);
    org.jfree.chart.plot.dial.DialValueIndicator var24 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var25 = var24.getInsets();
    java.awt.Stroke var26 = var24.getOutlineStroke();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    javax.swing.JPanel var29 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var27.setNextFocusableComponent((java.awt.Component)var29);
    java.util.Locale var31 = var29.getLocale();
    javax.swing.JPanel var32 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var33 = var32.getPreferredSize();
    java.awt.Dimension var34 = var29.getSize(var33);
    java.awt.event.ContainerListener[] var35 = var29.getContainerListeners();
    javax.swing.JPanel var36 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var37 = var36.getPreferredSize();
    java.awt.image.ColorModel var38 = var36.getColorModel();
    var36.updateUI();
    java.lang.String var40 = var36.toString();
    java.awt.Color var41 = var36.getForeground();
    var29.setBackground(var41);
    var24.setOutlinePaint((java.awt.Paint)var41);
    java.awt.Color var44 = var41.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var47 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var48 = var47.getItemLabelFont();
    java.awt.Shape var49 = var47.getBaseLegendShape();
    double var50 = var47.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var51 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var52 = var51.getRangeZeroBaselineStroke();
    var47.setStroke(var52, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var55 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var56 = var55.isOutline();
    var55.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var61 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var62 = var61.getLegendItemPaint();
    var55.setShapePaint(var62);
    org.jfree.chart.LegendItem var64 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var21, (java.awt.Paint)var44, var52, var62);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var65 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    var65.setBaseSeriesVisible(true, true);
    java.awt.Paint var69 = var65.getBasePaint();
    var64.setOutlinePaint(var69);
    org.jfree.chart.needle.PinNeedle var71 = new org.jfree.chart.needle.PinNeedle();
    org.jfree.chart.plot.CategoryPlot var72 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var74 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var75 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var74);
    org.jfree.data.time.TimePeriodValue var77 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var74, (java.lang.Number)10);
    var72.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.renderer.xy.CyclicXYItemRenderer var79 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
    org.jfree.chart.labels.XYItemLabelGenerator var81 = var79.getSeriesItemLabelGenerator(0);
    org.jfree.chart.axis.CyclicNumberAxis var84 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var85 = var84.getTickLabelPaint();
    var79.setFillPaint(var85, true);
    var72.setDomainCrosshairPaint(var85);
    var71.setOutlinePaint(var85);
    org.jfree.chart.event.RendererChangeEvent var90 = new org.jfree.chart.event.RendererChangeEvent((java.lang.Object)var71);
    double var91 = var71.getRotateY();
    boolean var92 = var64.equals((java.lang.Object)var91);
    int var93 = var64.getDatasetIndex();
    boolean var94 = var2.equals((java.lang.Object)var93);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var25);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var34);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var35);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var37);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var38);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var40 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var40,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var40.equals("org.jfree.chart.ChartPanel[,0,0,0var40,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var41);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var48);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var49);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var50 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var52);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var56 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var62);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var81);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var85);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var91 == 0.5d);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var92 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var93 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var94 == false);

  }

  public void test490() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test490"); }


    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var0 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var1 = var0.isOutline();
    var0.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var6 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var7 = var6.getLegendItemPaint();
    var0.setShapePaint(var7);
    org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var10 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((java.lang.Comparable)(short)10);
    int var12 = var10.getItemCount((-13421773));
    boolean var13 = var0.equals((java.lang.Object)var10);
    boolean var14 = var0.getAutoPopulateSeriesShape();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var12 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var13 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);

  }

  public void test491() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test491"); }


    org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
    org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var10 = var9.getItemLabelFont();
    double var11 = var9.getItemLabelAnchorOffset();
    org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var15 = var14.getItemLabelFont();
    java.awt.Shape var16 = var14.getBaseLegendShape();
    var9.setShape(var16);
    var6.setLegendBar(var16);
    org.jfree.chart.plot.dial.DialValueIndicator var19 = new org.jfree.chart.plot.dial.DialValueIndicator();
    org.jfree.ui.RectangleInsets var20 = var19.getInsets();
    java.awt.Stroke var21 = var19.getOutlineStroke();
    javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var23 = var22.getPreferredSize();
    javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var22.setNextFocusableComponent((java.awt.Component)var24);
    java.util.Locale var26 = var24.getLocale();
    javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var28 = var27.getPreferredSize();
    java.awt.Dimension var29 = var24.getSize(var28);
    java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var32 = var31.getPreferredSize();
    java.awt.image.ColorModel var33 = var31.getColorModel();
    var31.updateUI();
    java.lang.String var35 = var31.toString();
    java.awt.Color var36 = var31.getForeground();
    var24.setBackground(var36);
    var19.setOutlinePaint((java.awt.Paint)var36);
    java.awt.Color var39 = var36.brighter();
    org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var43 = var42.getItemLabelFont();
    java.awt.Shape var44 = var42.getBaseLegendShape();
    double var45 = var42.getItemMargin();
    org.jfree.chart.plot.CombinedRangeXYPlot var46 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var47 = var46.getRangeZeroBaselineStroke();
    var42.setStroke(var47, false);
    org.jfree.chart.renderer.xy.StackedXYAreaRenderer var50 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
    boolean var51 = var50.isOutline();
    var50.setUseFillPaint(true);
    org.jfree.chart.StandardChartTheme var56 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    java.awt.Paint var57 = var56.getLegendItemPaint();
    var50.setShapePaint(var57);
    org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var16, (java.awt.Paint)var39, var47, var57);
    var59.setShapeVisible(false);
    var59.setURLText("0x00000001");
    java.lang.String var64 = var59.getToolTipText();
    var59.setDescription("hi!?hi!=10&amp;hi!=51");
    org.jfree.chart.plot.dial.StandardDialFrame var67 = new org.jfree.chart.plot.dial.StandardDialFrame();
    boolean var68 = var67.isClippedToWindow();
    java.awt.Paint var69 = var67.getBackgroundPaint();
    var59.setOutlinePaint(var69);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var11 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var20);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var21);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var22);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var24);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var31);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var32);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var43);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 0.2d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var47);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var51 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var57);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var64 + "' != '" + "d"+ "'", var64.equals("d"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var68 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var69);

  }

  public void test492() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test492"); }


    java.lang.Number[][] var1 = new java.lang.Number[][] { };
    java.lang.Number[][] var2 = new java.lang.Number[][] { };
    org.jfree.data.category.DefaultIntervalCategoryDataset var3 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var1, var2);
    int var4 = var3.getRowCount();
    org.jfree.data.xy.OHLCDataItem[] var6 = new org.jfree.data.xy.OHLCDataItem[] { };
    org.jfree.data.xy.DefaultOHLCDataset var7 = new org.jfree.data.xy.DefaultOHLCDataset((java.lang.Comparable)0.05d, var6);
    var3.setSeriesKeys((java.lang.Comparable[])var6);
    org.jfree.data.xy.DefaultOHLCDataset var9 = new org.jfree.data.xy.DefaultOHLCDataset((java.lang.Comparable)"d", var6);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      double var12 = var9.getCloseValue(20, 52);
      fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
    } catch (java.lang.ArrayIndexOutOfBoundsException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var4 == 0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);

  }

  public void test493() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test493"); }


    org.jfree.chart.block.RectangleConstraint var2 = new org.jfree.chart.block.RectangleConstraint(2.0d, Double.NEGATIVE_INFINITY);

  }

  public void test494() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test494"); }


    org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
    org.jfree.chart.plot.CombinedRangeXYPlot var2 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var3 = var2.getRangeZeroBaselineStroke();
    var0.setRangeGridlineStroke(var3);
    var0.setDomainMinorGridlinesVisible(true);
    int var7 = var0.getBackgroundImageAlignment();
    org.jfree.data.xy.XYDataset var8 = var0.getDataset();
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == 15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);

  }

  public void test495() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test495"); }


    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var2 = var0.getSeriesLinesVisible(10);
    java.awt.Stroke var3 = var0.getErrorIndicatorStroke();
    org.jfree.data.general.DefaultKeyedValues2DDataset var4 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
    var4.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
    var4.setValue((java.lang.Number)0.04d, (java.lang.Comparable)(short)(-1), (java.lang.Comparable)(-1.0f));
    org.jfree.data.Range var13 = var0.findRangeBounds((org.jfree.data.category.CategoryDataset)var4);
    var0.setSeriesVisible(8, (java.lang.Boolean)false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var13);

  }

  public void test496() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test496"); }


    javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var1 = var0.getPreferredSize();
    javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    var0.setNextFocusableComponent((java.awt.Component)var2);
    javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var5 = var4.getLocation();
    java.awt.Dimension var6 = var4.preferredSize();
    var0.setSize(var6);
    javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Dimension var9 = var8.getPreferredSize();
    java.awt.image.ColorModel var10 = var8.getColorModel();
    var8.firePropertyChange("", 0.0f, 0.0f);
    javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var16 = var15.getLocation();
    java.awt.Point var17 = var8.getLocation(var16);
    var0.add((java.awt.Component)var8, (java.lang.Object)(-1.0d), 0);
    boolean var21 = var8.isDoubleBuffered();
    var8.move((-13421773), 4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var0);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var1);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var2);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var4);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var5);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var6);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var9);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var10);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var15);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var16);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);

  }

  public void test497() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test497"); }


    org.jfree.chart.StandardChartTheme var2 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
    org.jfree.chart.plot.DrawingSupplier var3 = var2.getDrawingSupplier();
    org.jfree.chart.plot.dial.StandardDialScale var4 = new org.jfree.chart.plot.dial.StandardDialScale();
    var4.setMajorTickIncrement(10.0d);
    java.awt.Paint var7 = var4.getMinorTickPaint();
    var2.setTickLabelPaint(var7);
    org.jfree.chart.title.TextTitle var10 = new org.jfree.chart.title.TextTitle("hi!");
    org.jfree.ui.RectangleInsets var11 = var10.getMargin();
    var2.setAxisOffset(var11);
    org.jfree.chart.renderer.category.GanttRenderer var13 = new org.jfree.chart.renderer.category.GanttRenderer();
    java.awt.Paint var14 = var13.getCompletePaint();
    org.jfree.chart.plot.dial.StandardDialFrame var15 = new org.jfree.chart.plot.dial.StandardDialFrame();
    boolean var16 = var15.isClippedToWindow();
    java.awt.Paint var17 = var15.getBackgroundPaint();
    org.jfree.chart.plot.CombinedRangeXYPlot var18 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var19 = var18.getRangeZeroBaselineStroke();
    java.lang.String var20 = var18.getPlotType();
    boolean var21 = var18.isDomainZoomable();
    org.jfree.chart.plot.CombinedRangeXYPlot var22 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    java.awt.Stroke var23 = var22.getRangeZeroBaselineStroke();
    var18.setDomainCrosshairStroke(var23);
    var15.setStroke(var23);
    org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var26 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
    java.lang.Boolean var27 = var26.getBaseItemLabelsVisible();
    var26.setSeriesShapesFilled(1, (java.lang.Boolean)false);
    var26.setDrawOutlines(true);
    org.jfree.chart.renderer.category.BarRenderer3D var35 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var36 = var35.getItemLabelFont();
    double var37 = var35.getItemLabelAnchorOffset();
    java.awt.Shape var39 = var35.getSeriesShape(1);
    org.jfree.chart.renderer.category.BarRenderer3D var43 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
    java.awt.Font var44 = var43.getItemLabelFont();
    double var45 = var43.getItemLabelAnchorOffset();
    org.jfree.chart.axis.CyclicNumberAxis var49 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    java.awt.Paint var50 = var49.getTickLabelPaint();
    var43.setLegendTextPaint(0, var50);
    var35.setSeriesFillPaint(100, var50, true);
    var26.setBaseOutlinePaint(var50, false);
    var15.setForegroundPaint(var50);
    var13.setIncompletePaint(var50);
    var2.setCrosshairPaint(var50);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var3);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var7);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var11);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var14);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == false);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var17);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var19);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var20 + "' != '" + "Combined Range XYPlot"+ "'", var20.equals("Combined Range XYPlot"));
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var21 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var23);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var37 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var39);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var44);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var45 == 2.0d);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var50);

  }

  public void test498() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test498"); }


    org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var1 = var0.getDomainCrosshairColumnKey();
    var0.setCrosshairDatasetIndex(100);
    int var4 = var0.getBackgroundImageAlignment();
    org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
    org.jfree.data.time.Week var7 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var8 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var7);
    org.jfree.data.time.TimePeriodValue var10 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var7, (java.lang.Number)10);
    var5.setDomainCrosshairColumnKey((java.lang.Comparable)10);
    org.jfree.chart.plot.CategoryPlot var12 = new org.jfree.chart.plot.CategoryPlot();
    java.lang.Comparable var13 = var12.getDomainCrosshairColumnKey();
    var12.setCrosshairDatasetIndex(100);
    org.jfree.chart.axis.CategoryAnchor var16 = var12.getDomainGridlinePosition();
    var5.setDomainGridlinePosition(var16);
    var0.setDomainGridlinePosition(var16);
    
    // Checks the contract:  equals-hashcode on var0 and var12
    assertTrue("Contract failed: equals-hashcode on var0 and var12", var0.equals(var12) ? var0.hashCode() == var12.hashCode() : true);
    
    // Checks the contract:  equals-hashcode on var12 and var0
    assertTrue("Contract failed: equals-hashcode on var12 and var0", var12.equals(var0) ? var12.hashCode() == var0.hashCode() : true);

  }

  public void test499() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test499"); }


    org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
    boolean var1 = var0.isRadiusGridlinesVisible();
    org.jfree.data.time.Year var6 = new org.jfree.data.time.Year(100);
    org.jfree.data.time.Month var7 = new org.jfree.data.time.Month(1, var6);
    org.jfree.data.time.RegularTimePeriod var8 = var7.previous();
    long var9 = var7.getSerialIndex();
    org.jfree.data.time.TimeTableXYDataset var10 = new org.jfree.data.time.TimeTableXYDataset();
    org.jfree.data.time.Week var12 = new org.jfree.data.time.Week();
    org.jfree.data.gantt.Task var13 = new org.jfree.data.gantt.Task("hi!", (org.jfree.data.time.TimePeriod)var12);
    var10.remove((org.jfree.data.time.TimePeriod)var12, (java.lang.Comparable)100, false);
    org.jfree.chart.axis.PeriodAxis var17 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", (org.jfree.data.time.RegularTimePeriod)var7, (org.jfree.data.time.RegularTimePeriod)var12);
    var17.setMinorTickMarksVisible(false);
    org.jfree.data.time.Year var21 = new org.jfree.data.time.Year(100);
    org.jfree.chart.plot.CombinedDomainCategoryPlot var22 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
    int var23 = var21.compareTo((java.lang.Object)var22);
    var17.setFirst((org.jfree.data.time.RegularTimePeriod)var21);
    var0.setAxis(19, (org.jfree.chart.axis.ValueAxis)var17);
    boolean var26 = var0.isCounterClockwise();
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var1 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var8);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var9 == 1201L);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var23 == 1);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var26 == false);

  }

  public void test500() throws Throwable {

    if (debug) { System.out.println(); System.out.print("RandoopTest2.test500"); }


    org.jfree.chart.util.RelativeDateFormat var1 = new org.jfree.chart.util.RelativeDateFormat();
    var1.setShowZeroHours(true);
    org.jfree.chart.axis.MonthDateFormat var4 = new org.jfree.chart.axis.MonthDateFormat();
    org.jfree.chart.util.RelativeDateFormat var6 = new org.jfree.chart.util.RelativeDateFormat();
    boolean var7 = var6.getShowZeroHours();
    org.jfree.chart.labels.StandardCategoryItemLabelGenerator var8 = new org.jfree.chart.labels.StandardCategoryItemLabelGenerator("0x00000000", (java.text.DateFormat)var6);
    org.jfree.chart.labels.BubbleXYItemLabelGenerator var9 = new org.jfree.chart.labels.BubbleXYItemLabelGenerator("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (java.text.DateFormat)var1, (java.text.DateFormat)var4, (java.text.DateFormat)var6);
    org.jfree.data.xy.XYSeries var12 = new org.jfree.data.xy.XYSeries((java.lang.Comparable)(byte)100, true);
    var12.clear();
    boolean var14 = var12.getAutoSort();
    org.jfree.chart.plot.PolarPlot var15 = new org.jfree.chart.plot.PolarPlot();
    boolean var16 = var15.isRadiusGridlinesVisible();
    org.jfree.chart.axis.CyclicNumberAxis var21 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
    var21.setUpperMargin(10.0d);
    var21.setAxisLineVisible(true);
    javax.swing.JPanel var26 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    java.awt.Point var27 = var26.getLocation();
    java.awt.Dimension var28 = var26.preferredSize();
    java.awt.Rectangle var29 = var26.bounds();
    java.awt.Point var30 = var15.translateToJava2D(Double.NaN, Double.NaN, (org.jfree.chart.axis.ValueAxis)var21, (java.awt.geom.Rectangle2D)var29);
    org.jfree.data.xy.DefaultXYZDataset var32 = new org.jfree.data.xy.DefaultXYZDataset();
    org.jfree.data.DomainOrder var33 = var32.getDomainOrder();
    var15.setDataset(1, (org.jfree.data.xy.XYDataset)var32);
    var12.addChangeListener((org.jfree.data.general.SeriesChangeListener)var32);
    org.jfree.data.Range var36 = org.jfree.data.general.DatasetUtilities.iterateZBounds((org.jfree.data.xy.XYZDataset)var32);
    // The following exception was thrown during execution.
    // This behavior will recorded for regression testing.
    try {
      java.lang.String var39 = var9.generateLabel((org.jfree.data.xy.XYDataset)var32, 1024, (-2));
      fail("Expected exception of type java.lang.IllegalArgumentException");
    } catch (java.lang.IllegalArgumentException e) {
      // Expected exception.
    }
    
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var7 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var14 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertTrue(var16 == true);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var26);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var27);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var28);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var29);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var30);
    
    // Regression assertion (captures the current behavior of the code)
    assertNotNull(var33);
    
    // Regression assertion (captures the current behavior of the code)
    assertNull(var36);

  }

}
