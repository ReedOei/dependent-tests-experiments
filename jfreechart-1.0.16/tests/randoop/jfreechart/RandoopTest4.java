package randoop.jfreechart;

import junit.framework.TestCase;

public class RandoopTest4 extends TestCase {

    public static boolean debug = false;

    public void test1() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test1"); }


        org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
        boolean var1 = var0.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var6 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var6.setUpperMargin(10.0d);
        var6.setAxisLineVisible(true);
        javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var12 = var11.getLocation();
        java.awt.Dimension var13 = var11.preferredSize();
        java.awt.Rectangle var14 = var11.bounds();
        java.awt.Point var15 = var0.translateToJava2D(Double.NaN, Double.NaN, var6, var14);
        org.jfree.data.xy.DefaultXYZDataset var17 = new org.jfree.data.xy.DefaultXYZDataset();
        org.jfree.data.DomainOrder var18 = var17.getDomainOrder();
        var0.setDataset(1, var17);
        org.jfree.data.Range var20 = org.jfree.data.general.DatasetUtilities.iterateZBounds(var17);
        var17.removeSeries("");

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var20);

    }

    public void test2() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test2"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var0.setNextFocusableComponent(var2);
        javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var5 = var4.getPreferredSize();
        java.awt.image.ColorModel var6 = var4.getColorModel();
        var4.firePropertyChange("", 0.0f, 0.0f);
        javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var12 = var11.getLocation();
        java.awt.Point var13 = var4.getLocation(var12);
        java.awt.Component var14 = var0.findComponentAt(var12);
        java.beans.VetoableChangeListener[] var15 = var0.getVetoableChangeListeners();
        var0.setFocusable(false);
        var0.requestFocus();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

    }

    public void test3() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test3"); }


        org.jfree.data.xy.XIntervalSeries var1 = new org.jfree.data.xy.XIntervalSeries("s");

    }

    public void test4() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test4"); }


        org.jfree.data.time.ohlc.OHLCSeriesCollection var0 = new org.jfree.data.time.ohlc.OHLCSeriesCollection();
        org.jfree.data.time.TimePeriodAnchor var1 = var0.getXPosition();
        org.jfree.chart.util.LogFormat var7 = new org.jfree.chart.util.LogFormat(0.0d, "hi!", true);
        javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var9 = var8.getPreferredSize();
        javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var8.setNextFocusableComponent(var10);
        java.util.Locale var12 = var10.getLocale();
        org.jfree.chart.axis.TickUnitSource var13 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var12);
        java.text.NumberFormat var14 = java.text.NumberFormat.getPercentInstance(var12);
        org.jfree.chart.labels.StandardXYItemLabelGenerator var15 = new org.jfree.chart.labels.StandardXYItemLabelGenerator("d", var7, var14);
        org.jfree.chart.axis.NumberTickUnit var16 = new org.jfree.chart.axis.NumberTickUnit(0.04d, var7);
        int var17 = var0.indexOf(0.04d);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            double var20 = var0.getCloseValue(3, (-13421773));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == (-1));

    }

    public void test5() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test5"); }


        org.jfree.data.gantt.TaskSeries var1 = new org.jfree.data.gantt.TaskSeries("hi!");
        java.lang.Object var2 = var1.clone();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

    }

    public void test6() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test6"); }


        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var6 = var5.getItemLabelFont();
        double var7 = var5.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var11 = var10.getItemLabelFont();
        java.awt.Shape var12 = var10.getBaseLegendShape();
        var5.setShape(var12);
        var2.setLegendBar(var12);
        org.jfree.data.general.DefaultKeyedValues2DDataset var17 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        org.jfree.chart.entity.CategoryItemEntity var20 = new org.jfree.chart.entity.CategoryItemEntity(var12, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", var17, 0.0f, true);
        var20.setCategoryIndex(0);
        var20.setCategoryIndex(15);
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var27 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var30 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var31 = var30.getItemLabelFont();
        double var32 = var30.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var35 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var36 = var35.getItemLabelFont();
        java.awt.Shape var37 = var35.getBaseLegendShape();
        var30.setShape(var37);
        var27.setLegendBar(var37);
        org.jfree.data.general.DefaultKeyedValues2DDataset var42 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        org.jfree.chart.entity.CategoryItemEntity var45 = new org.jfree.chart.entity.CategoryItemEntity(var37, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", var42, 0.0f, true);
        var20.setDataset(var42);
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer var47 = new org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer();
        org.jfree.chart.StandardChartTheme var50 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var51 = var50.getLegendItemPaint();
        var47.setBoxPaint(var51);
        java.lang.Number[][] var53 = new java.lang.Number[][] { };
        java.lang.Number[][] var54 = new java.lang.Number[][] { };
        org.jfree.data.category.DefaultIntervalCategoryDataset var55 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var53, var54);
        int var57 = var55.getRowIndex('a');
        boolean var58 = var47.equals(var55);
        var20.setCategory(var47);
        java.lang.String var60 = var20.getShapeType();
        java.lang.Comparable var61 = var20.getColumnKey();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var51);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var53);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var54);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var60 + "' != '" + "rect"+ "'", var60.equals("rect"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var61 + "' != '" + true+ "'", var61.equals(true));

    }

    public void test7() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test7"); }


        org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
        boolean var1 = var0.isDomainZoomable();
        int var2 = var0.getAxisLocation();
        org.jfree.data.general.ValueDataset var3 = var0.getDataset();
        org.jfree.chart.plot.MeterPlot var4 = new org.jfree.chart.plot.MeterPlot(var3);
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var7 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        java.awt.Shape var8 = var7.getLegendBar();
        java.lang.String[] var11 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var12 = new org.jfree.chart.axis.SymbolAxis("hi!", var11);
        org.jfree.chart.plot.CompassPlot var13 = new org.jfree.chart.plot.CompassPlot();
        boolean var14 = var12.equals(var13);
        java.lang.String var15 = var13.getPlotType();
        java.awt.Paint var16 = var13.getRoseCenterPaint();
        java.awt.Paint var17 = var13.getBackgroundPaint();
        var7.setItemLabelPaint(var17, true);
        var4.setValuePaint(var17);
        java.lang.String[] var23 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var24 = new org.jfree.chart.axis.SymbolAxis("hi!", var23);
        org.jfree.chart.plot.CompassPlot var25 = new org.jfree.chart.plot.CompassPlot();
        boolean var26 = var24.equals(var25);
        java.lang.String var27 = var25.getPlotType();
        java.awt.Paint var28 = var25.getRoseCenterPaint();
        java.awt.Paint var29 = var25.getBackgroundPaint();
        javax.swing.JPanel var30 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var31 = var30.getPreferredSize();
        java.awt.image.ColorModel var32 = var30.getColorModel();
        var30.updateUI();
        java.lang.String var34 = var30.toString();
        boolean var35 = var30.getInheritsPopupMenu();
        javax.swing.InputMap var36 = var30.getInputMap();
        var30.nextFocus();
        boolean var38 = var30.getInheritsPopupMenu();
        javax.swing.JPanel var39 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var40 = var39.getPreferredSize();
        java.awt.image.ColorModel var41 = var39.getColorModel();
        var39.firePropertyChange("", 0.0f, 0.0f);
        java.awt.Color var46 = var39.getForeground();
        var30.setForeground(var46);
        org.jfree.chart.renderer.xy.XYDifferenceRenderer var49 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var29, var46, true);
        org.jfree.chart.labels.StandardXYSeriesLabelGenerator var50 = new org.jfree.chart.labels.StandardXYSeriesLabelGenerator();
        var49.setLegendItemLabelGenerator(var50);
        org.jfree.chart.LegendItem var54 = var49.getLegendItem(0, (-1));
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var61 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var64 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var65 = var64.getItemLabelFont();
        double var66 = var64.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var69 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var70 = var69.getItemLabelFont();
        java.awt.Shape var71 = var69.getBaseLegendShape();
        var64.setShape(var71);
        var61.setLegendBar(var71);
        var61.setDrawBarOutline(true);
        org.jfree.chart.title.LegendTitle var76 = new org.jfree.chart.title.LegendTitle(var61);
        org.jfree.chart.annotations.XYDrawableAnnotation var77 = new org.jfree.chart.annotations.XYDrawableAnnotation(100.0d, 10.0d, 0.0d, (-1.0d), var76);
        java.awt.Paint var78 = var76.getItemPaint();
        var49.setPositivePaint(var78);
        var4.setDialBackgroundPaint(var78);

        // Checks the contract:  equals-hashcode on var13 and var25
        assertTrue("Contract failed: equals-hashcode on var13 and var25", var13.equals(var25) ? var13.hashCode() == var25.hashCode() : true);

        // Checks the contract:  equals-hashcode on var25 and var13
        assertTrue("Contract failed: equals-hashcode on var25 and var13", var25.equals(var13) ? var25.hashCode() == var13.hashCode() : true);

    }

    public void test8() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test8"); }


        org.jfree.chart.plot.CombinedRangeCategoryPlot var0 = new org.jfree.chart.plot.CombinedRangeCategoryPlot();
        org.jfree.chart.annotations.CategoryPointerAnnotation var5 = new org.jfree.chart.annotations.CategoryPointerAnnotation("[size=0x00000000]", 1043495433, 0.25d, 100.0d);
        boolean var7 = var0.removeAnnotation(var5, false);
        org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var10 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var11 = new org.jfree.data.gantt.Task("hi!", var10);
        org.jfree.data.time.TimePeriodValue var13 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var10, (java.lang.Number)10);
        var8.setDomainCrosshairColumnKey(10);
        boolean var15 = var8.getDrawSharedDomainAxis();
        boolean var16 = var8.getDrawSharedDomainAxis();
        var8.clearRangeMarkers(0);
        org.jfree.chart.plot.CombinedRangeXYPlot var19 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var8.addChangeListener(var19);
        org.jfree.chart.event.PlotChangeEvent var21 = new org.jfree.chart.event.PlotChangeEvent(var19);
        org.jfree.chart.plot.Plot var22 = var21.getPlot();
        org.jfree.chart.plot.Plot var23 = var21.getPlot();
        var0.plotChanged(var21);
        org.jfree.chart.LegendItemCollection var25 = var0.getFixedLegendItems();
        var0.setGap(Double.NEGATIVE_INFINITY);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var25);

    }

    public void test9() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test9"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[1.0,1.0]", var2, false);
        java.awt.Point var7 = var6.getLocation();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

    }

    public void test10() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test10"); }


        org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
        org.jfree.chart.axis.ValueAxis var1 = var0.getRangeAxis();
        org.jfree.chart.axis.CyclicNumberAxis var4 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        boolean var5 = var4.isAxisLineVisible();
        var4.setAxisLineVisible(true);
        org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var11 = var10.getTickLabelPaint();
        var4.setTickMarkPaint(var11);
        var4.setAxisLineVisible(false);
        org.jfree.data.Range var15 = var0.getDataRange(var4);
        var0.setDisplayRange((-13421773), 1.5d, (-0.7853981633974483d));
        java.lang.String var20 = var0.getPlotType();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var20 + "' != '" + "Thermometer Plot"+ "'", var20.equals("Thermometer Plot"));

    }

    public void test11() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test11"); }


        org.jfree.chart.needle.PointerNeedle var0 = new org.jfree.chart.needle.PointerNeedle();

    }

    public void test12() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test12"); }


        org.jfree.chart.util.HexNumberFormat var1 = new org.jfree.chart.util.HexNumberFormat();
        org.jfree.chart.axis.NumberTickUnit var3 = new org.jfree.chart.axis.NumberTickUnit(0.05d, var1, 1);
        java.lang.String var5 = var3.valueToString(1.0d);
        java.lang.String[] var8 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var9 = new org.jfree.chart.axis.SymbolAxis("hi!", var8);
        org.jfree.chart.renderer.category.BarRenderer3D var12 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var13 = var12.getItemLabelFont();
        double var14 = var12.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var17 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var18 = var17.getItemLabelFont();
        java.awt.Shape var19 = var17.getBaseLegendShape();
        var12.setShape(var19);
        var9.setDownArrow(var19);
        org.jfree.chart.entity.CategoryLabelEntity var24 = new org.jfree.chart.entity.CategoryLabelEntity(var5, var19, "hi!?hi!=100&amp;amp;hi!=1", "hi!?hi!=100&amp;hi!=1");
        java.lang.Comparable var25 = var24.getKey();
        java.lang.Comparable var26 = var24.getKey();

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var5 + "' != '" + "0var50000001"+ "'", var5.equals("0var50000001"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var25 + "' != '" + "0var250000001"+ "'", var25.equals("0var250000001"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var26 + "' != '" + "0var260000001"+ "'", var26.equals("0var260000001"));

    }

    public void test13() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test13"); }


        org.jfree.chart.plot.CombinedDomainCategoryPlot var0 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        java.util.List var1 = var0.getSubplots();
        boolean var2 = var0.isOutlineVisible();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);

    }

    public void test14() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test14"); }


        org.jfree.chart.LegendItem var1 = new org.jfree.chart.LegendItem("hi!?hi!=100&amp;amp;hi!=1");
        java.lang.String var2 = var1.getToolTipText();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var2);

    }

    public void test15() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test15"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
        java.lang.String var2 = var0.getPlotType();
        org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var11 = var10.getTickLabelPaint();
        var5.setFillPaint(var11, true);
        var4.setLabelPaint(var11);
        boolean var15 = var0.removeRangeMarker(var4);
        java.awt.Paint var17 = var0.getQuadrantPaint(1);
        org.jfree.chart.axis.CyclicNumberAxis var20 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        boolean var21 = var20.isAxisLineVisible();
        var20.setAxisLineVisible(true);
        var20.setMinorTickMarksVisible(true);
        org.jfree.chart.plot.CombinedRangeXYPlot var26 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var27 = var26.getRangeZeroBaselineStroke();
        org.jfree.chart.plot.CombinedRangeXYPlot var28 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var29 = var28.getRangeZeroBaselineStroke();
        var26.setRangeGridlineStroke(var29);
        var26.setDomainMinorGridlinesVisible(true);
        var26.setRangeZeroBaselineVisible(true);
        var20.setPlot(var26);
        var0.setDomainAxis(var20);
        org.jfree.data.xy.XYDataset var37 = var0.getDataset();
        org.jfree.chart.plot.CombinedRangeXYPlot var39 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var40 = var39.getRangeZeroBaselineStroke();
        java.lang.String var41 = var39.getPlotType();
        org.jfree.chart.plot.CategoryMarker var43 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var44 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var46 = var44.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var49 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var50 = var49.getTickLabelPaint();
        var44.setFillPaint(var50, true);
        var43.setLabelPaint(var50);
        boolean var54 = var39.removeRangeMarker(var43);
        org.jfree.chart.axis.AxisLocation var55 = var39.getDomainAxisLocation();
        org.jfree.chart.axis.AxisLocation var56 = org.jfree.chart.axis.AxisLocation.getOpposite(var55);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.setDomainAxisLocation((-13421773), var56);
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var41 + "' != '" + "Combined Range XYPlot"+ "'", var41.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var46);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var50);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var55);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var56);

    }

    public void test16() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test16"); }


        org.jfree.data.time.Minute var0 = new org.jfree.data.time.Minute();
        int var1 = var0.getMinute();
        org.jfree.data.time.Hour var2 = var0.getHour();
        org.jfree.data.time.Day var3 = var2.getDay();
        org.jfree.data.time.Minute var4 = new org.jfree.data.time.Minute();
        int var5 = var4.getMinute();
        org.jfree.data.time.Hour var6 = var4.getHour();
        org.jfree.data.time.Year var9 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var10 = new org.jfree.data.time.Month(1, var9);
        java.util.Locale var11 = javax.swing.JComponent.getDefaultLocale();
        org.jfree.chart.axis.MonthDateFormat var13 = new org.jfree.chart.axis.MonthDateFormat(var11, 2147483647);
        java.util.Calendar var14 = var13.getCalendar();
        long var15 = var10.getLastMillisecond(var14);
        long var16 = var6.getLastMillisecond(var14);
        long var17 = var3.getLastMillisecond(var14);
        org.jfree.data.DefaultKeyedValue var19 = new org.jfree.data.DefaultKeyedValue(var14, 2147483647);
        java.lang.Object var20 = var19.clone();
        var19.setValue(1043495433);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == (-59008924800001L));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 1378965599999L);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1378969199999L);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

    }

    public void test17() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test17"); }


        org.jfree.data.time.TimeTableXYDataset var0 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        var0.remove(var2, 100, false);
        org.jfree.data.xy.XYBarDataset var8 = new org.jfree.data.xy.XYBarDataset(var0, Double.NaN);
        boolean var9 = var0.getDomainIsPointsInTime();
        org.jfree.data.general.SubSeriesDataset var11 = new org.jfree.data.general.SubSeriesDataset(var0, 3);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Number var14 = var11.getEndX((-1), 252);
            fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);

    }

    public void test18() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test18"); }


        org.jfree.chart.axis.CategoryAxis var1 = new org.jfree.chart.axis.CategoryAxis("null");
        org.jfree.data.time.Week var3 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var4 = new org.jfree.data.gantt.Task("hi!", var3);
        org.jfree.data.time.TimePeriodValue var6 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var3, (java.lang.Number)10);
        org.jfree.data.time.ohlc.OHLCItem var11 = new org.jfree.data.time.ohlc.OHLCItem(var3, 100.0d, 0.0d, 0.05d, 0.0d);
        var1.addCategoryLabelToolTip(var3, "[size=0x00000000]");
        var1.addCategoryLabelToolTip(1378969199999L, "<map id=\"CategoryAnchor.MIDDLE\" name=\"CategoryAnchor.MIDDLE\">\r\n</map>");

    }

    public void test19() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test19"); }


        org.jfree.chart.plot.CrosshairState var1 = new org.jfree.chart.plot.CrosshairState(true);

    }

    public void test20() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test20"); }


        org.jfree.chart.renderer.category.BarRenderer3D var6 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var7 = var6.getItemLabelFont();
        java.awt.Shape var8 = var6.getBaseLegendShape();
        org.jfree.chart.entity.ContourEntity var10 = new org.jfree.chart.entity.ContourEntity(var8, "hi!?hi!=100&amp;hi!=1");
        org.jfree.chart.title.TextTitle var12 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var13 = var12.isVisible();
        java.lang.Object var14 = var12.clone();
        java.lang.String var15 = var12.getURLText();
        javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var17 = var16.getPreferredSize();
        java.awt.image.ColorModel var18 = var16.getColorModel();
        var16.updateUI();
        java.lang.String var20 = var16.toString();
        java.awt.Color var21 = var16.getForeground();
        var12.setBackgroundPaint(var21);
        int var23 = var21.getRGB();
        int var24 = var21.getBlue();
        org.jfree.chart.plot.dial.DialPlot var25 = new org.jfree.chart.plot.dial.DialPlot();
        org.jfree.chart.plot.dial.StandardDialScale var26 = new org.jfree.chart.plot.dial.StandardDialScale();
        int var27 = var25.getLayerIndex(var26);
        org.jfree.chart.plot.dial.DialValueIndicator var28 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var29 = var28.getInsets();
        int var30 = var25.getLayerIndex(var28);
        java.awt.Stroke var31 = var28.getOutlineStroke();
        org.jfree.chart.title.TextTitle var33 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var34 = var33.isVisible();
        java.lang.Object var35 = var33.clone();
        java.lang.String var36 = var33.getURLText();
        javax.swing.JPanel var37 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var38 = var37.getPreferredSize();
        java.awt.image.ColorModel var39 = var37.getColorModel();
        var37.updateUI();
        java.lang.String var41 = var37.toString();
        java.awt.Color var42 = var37.getForeground();
        var33.setBackgroundPaint(var42);
        org.jfree.chart.LegendItem var44 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var8, var21, var31, var42);
        var44.setDatasetIndex((-2));
        java.awt.Font var47 = var44.getLabelFont();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var20 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var20.equals("org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == (-13421773));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 51);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var41 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var41,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var41.equals("org.jfree.chart.ChartPanel[,0,0,0var41,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var42);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var47);

    }

    public void test21() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test21"); }


        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            org.jfree.data.statistics.SimpleHistogramBin var2 = new org.jfree.data.statistics.SimpleHistogramBin(Double.POSITIVE_INFINITY, (-170.0d));
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }

    }

    public void test22() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test22"); }


        org.jfree.data.time.Year var2 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var3 = new org.jfree.data.time.Month(1, var2);
        org.jfree.chart.util.HexNumberFormat var5 = new org.jfree.chart.util.HexNumberFormat();
        javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var7 = var6.getPreferredSize();
        javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var6.setNextFocusableComponent(var8);
        java.util.Locale var10 = var8.getLocale();
        org.jfree.chart.axis.MonthDateFormat var11 = new org.jfree.chart.axis.MonthDateFormat(var10);
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var12 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", var5, var11);
        boolean var13 = var2.equals(var11);
        org.jfree.chart.renderer.category.BarRenderer3D var16 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var17 = var16.getItemLabelFont();
        java.awt.Shape var18 = var16.getBaseLegendShape();
        boolean var19 = var2.equals(var16);
        org.jfree.chart.renderer.category.StackedBarRenderer var21 = new org.jfree.chart.renderer.category.StackedBarRenderer(false);
        org.jfree.chart.renderer.category.BarRenderer3D var22 = new org.jfree.chart.renderer.category.BarRenderer3D();
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var25 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var28 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var29 = var28.getItemLabelFont();
        double var30 = var28.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var33 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var34 = var33.getItemLabelFont();
        java.awt.Shape var35 = var33.getBaseLegendShape();
        var28.setShape(var35);
        var25.setLegendBar(var35);
        org.jfree.data.general.DefaultKeyedValues2DDataset var40 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        org.jfree.chart.entity.CategoryItemEntity var43 = new org.jfree.chart.entity.CategoryItemEntity(var35, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", var40, 0.0f, true);
        org.jfree.data.Range var45 = var22.findRangeBounds(var40, true);
        org.jfree.data.Range var46 = var21.findRangeBounds(var40);
        var21.setRenderAsPercentages(false);
        var21.setItemLabelsVisible(false);
        org.jfree.chart.labels.ItemLabelPosition var51 = var21.getBaseNegativeItemLabelPosition();
        var16.setNegativeItemLabelPositionFallback(var51);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var34);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var45);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var46);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var51);

    }

    public void test23() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test23"); }


        org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
        boolean var1 = var0.isDomainZoomable();
        int var2 = var0.getAxisLocation();
        org.jfree.data.general.ValueDataset var3 = var0.getDataset();
        org.jfree.chart.plot.MeterPlot var4 = new org.jfree.chart.plot.MeterPlot(var3);
        java.awt.Paint var5 = var4.getDialOutlinePaint();
        org.jfree.data.Range var6 = var4.getRange();
        org.jfree.data.Range var7 = var4.getRange();
        org.jfree.chart.util.HexNumberFormat var9 = new org.jfree.chart.util.HexNumberFormat();
        org.jfree.chart.labels.StandardCrosshairLabelGenerator var10 = new org.jfree.chart.labels.StandardCrosshairLabelGenerator("", var9);
        boolean var11 = var9.isParseIntegerOnly();
        var4.setTickLabelFormat(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == 2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);

    }

    public void test24() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test24"); }


        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer var0 = new org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer();
        org.jfree.chart.StandardChartTheme var3 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var4 = var3.getLegendItemPaint();
        var0.setBoxPaint(var4);
        java.lang.Number[][] var6 = new java.lang.Number[][] { };
        java.lang.Number[][] var7 = new java.lang.Number[][] { };
        org.jfree.data.category.DefaultIntervalCategoryDataset var8 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var6, var7);
        int var10 = var8.getRowIndex('a');
        boolean var11 = var0.equals(var8);
        java.awt.Paint var12 = var0.getArtifactPaint();
        java.awt.Paint var13 = var0.getArtifactPaint();
        var0.setBoxWidth(4.0d);
        double var16 = var0.getBoxWidth();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 4.0d);

    }

    public void test25() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test25"); }


        org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
        java.lang.Object var2 = var1.clone();
        org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var8 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
        java.lang.Object var9 = var8.clone();
        org.jfree.chart.urls.TimeSeriesURLGenerator var10 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
        org.jfree.chart.renderer.xy.XYStepAreaRenderer var11 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, var8, var10);
        org.jfree.chart.renderer.xy.StandardXYItemRenderer var12 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, var8);
        java.text.NumberFormat var13 = var8.getYFormat();
        org.jfree.chart.labels.StandardCategoryToolTipGenerator var14 = new org.jfree.chart.labels.StandardCategoryToolTipGenerator("jfreechart-", var13);
        org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator var15 = new org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator("org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]", var13);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var1.setSeriesToolTipGenerator((-334), var15);
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

    }

    public void test26() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test26"); }


        org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
        org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", var4);
        org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
        var2.setDomainCrosshairColumnKey(10);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var15 = var14.getTickLabelPaint();
        var9.setFillPaint(var15, true);
        var2.setDomainCrosshairPaint(var15);
        boolean var19 = var1.equals(var2);
        org.jfree.chart.plot.CategoryPlot var20 = new org.jfree.chart.plot.CategoryPlot();
        java.lang.Comparable var21 = var20.getDomainCrosshairColumnKey();
        var20.setCrosshairDatasetIndex(100);
        org.jfree.chart.plot.CombinedRangeXYPlot var24 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var25 = var24.getRangeZeroBaselineStroke();
        org.jfree.chart.title.TextTitle var27 = new org.jfree.chart.title.TextTitle("hi!");
        org.jfree.ui.RectangleInsets var28 = var27.getMargin();
        var24.setAxisOffset(var28);
        var20.setAxisOffset(var28);
        org.jfree.data.category.CategoryDataset var32 = var20.getDataset((-2));
        var20.clearRangeMarkers((-13421773));
        org.jfree.chart.plot.XYPlot var35 = new org.jfree.chart.plot.XYPlot();
        org.jfree.chart.plot.DatasetRenderingOrder var36 = var35.getDatasetRenderingOrder();
        var20.setDatasetRenderingOrder(var36);
        var2.setDatasetRenderingOrder(var36);
        org.jfree.chart.plot.ContourPlot var39 = new org.jfree.chart.plot.ContourPlot();
        org.jfree.chart.plot.CategoryMarker var41 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        var39.addRangeMarker(var41);
        var2.addDomainMarker(var41);
        org.jfree.chart.event.ChartChangeEvent var44 = new org.jfree.chart.event.ChartChangeEvent(var2);
        org.jfree.chart.axis.CategoryAxis var46 = var2.getDomainAxisForDataset(1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var46);

    }

    public void test27() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test27"); }


        org.jfree.chart.plot.dial.DialTextAnnotation var1 = new org.jfree.chart.plot.dial.DialTextAnnotation("0x00000000");

    }

    public void test28() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test28"); }


        org.jfree.data.time.Week var1 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var2 = new org.jfree.data.gantt.Task("hi!", var1);
        org.jfree.data.time.TimePeriodValue var4 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var1, (java.lang.Number)10);
        org.jfree.data.time.ohlc.OHLCItem var9 = new org.jfree.data.time.ohlc.OHLCItem(var1, 100.0d, 0.0d, 0.05d, 0.0d);
        int var10 = var1.getYearValue();
        org.jfree.data.time.TimeSeries var11 = new org.jfree.data.time.TimeSeries(var10);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            org.jfree.data.time.TimeSeries var14 = org.jfree.data.time.MovingAverage.createPointMovingAverage(var11, "15,963d6h59m59.999s", (-655360));
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 2013);

    }

    public void test29() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test29"); }


        org.jfree.chart.renderer.xy.DeviationRenderer var2 = new org.jfree.chart.renderer.xy.DeviationRenderer(true, true);
        float var3 = var2.getAlpha();
        javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var5 = var4.getPreferredSize();
        boolean var6 = var4.getIgnoreRepaint();
        org.jfree.chart.plot.ContourPlot var8 = new org.jfree.chart.plot.ContourPlot();
        var8.setOutlineVisible(false);
        var4.addPropertyChangeListener("Combined Range XYPlot", var8);
        boolean var12 = var4.getFocusTraversalKeysEnabled();
        var4.reshape(100, 52, 20, 2013);
        java.awt.Container var18 = var4.getTopLevelAncestor();
        boolean var19 = var2.equals(var4);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0.5f);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);

    }

    public void test30() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test30"); }


        org.jfree.data.xy.XYIntervalSeries var3 = new org.jfree.data.xy.XYIntervalSeries("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", false, true);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Number var5 = var3.getX(5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }

    }

    public void test31() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test31"); }


        org.jfree.chart.renderer.category.GanttRenderer var0 = new org.jfree.chart.renderer.category.GanttRenderer();
        java.lang.String[] var3 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var4 = new org.jfree.chart.axis.SymbolAxis("hi!", var3);
        org.jfree.chart.plot.CompassPlot var5 = new org.jfree.chart.plot.CompassPlot();
        boolean var6 = var4.equals(var5);
        java.lang.String var7 = var5.getPlotType();
        java.awt.Paint var8 = var5.getRoseCenterPaint();
        var0.setIncompletePaint(var8);
        var0.setStartPercent(1.05d);
        org.jfree.data.time.Year var14 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var15 = new org.jfree.data.time.Month(1, var14);
        org.jfree.data.time.ohlc.OHLCItem var20 = new org.jfree.data.time.ohlc.OHLCItem(var14, 175.0d, 360.0d, (-0.7853981633974483d), 0.75d);
        boolean var21 = var0.equals(var20);
        org.jfree.chart.renderer.xy.XYSplineRenderer var23 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
        var23.clearSeriesPaints(false);
        boolean var26 = var23.getBaseLinesVisible();
        boolean var29 = var23.getItemShapeFilled((-2), 15);
        org.jfree.chart.plot.PolarPlot var30 = new org.jfree.chart.plot.PolarPlot();
        boolean var31 = var30.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var36 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var36.setUpperMargin(10.0d);
        var36.setAxisLineVisible(true);
        javax.swing.JPanel var41 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var42 = var41.getLocation();
        java.awt.Dimension var43 = var41.preferredSize();
        java.awt.Rectangle var44 = var41.bounds();
        java.awt.Point var45 = var30.translateToJava2D(Double.NaN, Double.NaN, var36, var44);
        var23.setLegendLine(var44);
        org.jfree.chart.entity.CategoryLabelEntity var49 = new org.jfree.chart.entity.CategoryLabelEntity(var21, var44, "RectangleConstraint[LengthConstraintType.FIXED: width=0.04, height=0.0]", "org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]");

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var7 + "' != '" + "Compass Plot"+ "'", var7.equals("Compass Plot"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var41);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var42);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var43);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var45);

    }

    public void test32() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test32"); }


        org.jfree.chart.renderer.xy.XYDotRenderer var0 = new org.jfree.chart.renderer.xy.XYDotRenderer();
        org.jfree.chart.needle.LineNeedle var1 = new org.jfree.chart.needle.LineNeedle();
        java.awt.Stroke var2 = var1.getOutlineStroke();
        boolean var3 = var0.equals(var1);
        org.jfree.chart.LegendItem var6 = var0.getLegendItem(10, (-1));
        var0.setDotHeight(11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var6);

    }

    public void test33() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test33"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        boolean var2 = var0.getIgnoreRepaint();
        org.jfree.chart.plot.ContourPlot var4 = new org.jfree.chart.plot.ContourPlot();
        var4.setOutlineVisible(false);
        var0.addPropertyChangeListener("Combined Range XYPlot", var4);
        java.awt.event.KeyListener[] var8 = var0.getKeyListeners();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(11);
            fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

    }

    public void test34() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test34"); }


        org.jfree.chart.block.BlockContainer var0 = new org.jfree.chart.block.BlockContainer();
        org.jfree.chart.title.TextTitle var2 = new org.jfree.chart.title.TextTitle("hi!");
        var2.setExpandToFitSpace(false);
        var0.add(var2);
        java.awt.Font var6 = var2.getFont();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

    }

    public void test35() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test35"); }


        org.jfree.chart.plot.dial.DialValueIndicator var0 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var1 = var0.getInsets();
        java.awt.Stroke var2 = var0.getOutlineStroke();
        javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var4 = var3.getPreferredSize();
        javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var3.setNextFocusableComponent(var5);
        java.util.Locale var7 = var5.getLocale();
        javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var9 = var8.getPreferredSize();
        java.awt.Dimension var10 = var5.getSize(var9);
        java.awt.event.ContainerListener[] var11 = var5.getContainerListeners();
        javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var13 = var12.getPreferredSize();
        java.awt.image.ColorModel var14 = var12.getColorModel();
        var12.updateUI();
        java.lang.String var16 = var12.toString();
        java.awt.Color var17 = var12.getForeground();
        var5.setBackground(var17);
        var0.setOutlinePaint(var17);
        javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var21 = var20.getPreferredSize();
        javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var20.setNextFocusableComponent(var22);
        java.util.Locale var24 = var22.getLocale();
        javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var26 = var25.getPreferredSize();
        java.awt.Dimension var27 = var22.getSize(var26);
        java.awt.event.ContainerListener[] var28 = var22.getContainerListeners();
        javax.swing.JPanel var29 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var30 = var29.getPreferredSize();
        java.awt.image.ColorModel var31 = var29.getColorModel();
        var29.updateUI();
        java.lang.String var33 = var29.toString();
        java.awt.Color var34 = var29.getForeground();
        var22.setBackground(var34);
        var0.setOutlinePaint(var34);
        org.jfree.ui.RectangleInsets var37 = var0.getInsets();
        org.jfree.ui.RectangleAnchor var38 = var0.getFrameAnchor();
        var0.setAngle((-0.7853981633974483d));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var16 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var16,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var16.equals("org.jfree.chart.ChartPanel[,0,0,0var16,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var33 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var33,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var33.equals("org.jfree.chart.ChartPanel[,0,0,0var33,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var34);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

    }

    public void test36() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test36"); }


        org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var2 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
        java.lang.Object var3 = var2.clone();
        org.jfree.chart.urls.TimeSeriesURLGenerator var4 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
        org.jfree.chart.renderer.xy.XYStepAreaRenderer var5 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, var2, var4);
        org.jfree.chart.renderer.xy.StandardXYItemRenderer var6 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, var2);
        double[] var9 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var10 = new org.jfree.chart.annotations.XYPolygonAnnotation(var9);
        double[] var13 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var14 = new org.jfree.chart.annotations.XYPolygonAnnotation(var13);
        org.jfree.chart.ClipPath var15 = new org.jfree.chart.ClipPath(var9, var13);
        double[][] var16 = new double[][] { var9};
        double[] var21 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var22 = new org.jfree.chart.annotations.XYPolygonAnnotation(var21);
        double[] var25 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var26 = new org.jfree.chart.annotations.XYPolygonAnnotation(var25);
        org.jfree.chart.ClipPath var27 = new org.jfree.chart.ClipPath(var21, var25);
        double[][] var28 = new double[][] { var21};
        org.jfree.data.category.CategoryDataset var29 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var28);
        org.jfree.data.category.DefaultIntervalCategoryDataset var30 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var16, var28);
        boolean var31 = var6.equals(var16);
        org.jfree.chart.labels.XYToolTipGenerator var32 = var6.getBaseToolTipGenerator();
        boolean var33 = var6.getBaseShapesFilled();
        var6.setBaseItemLabelsVisible(true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);

    }

    public void test37() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test37"); }


        org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.axis.CyclicNumberAxis var3 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var4 = var3.getTickLabelPaint();
        org.jfree.chart.axis.ValueAxis[] var5 = new org.jfree.chart.axis.ValueAxis[] { var3};
        var0.setRangeAxes(var5);
        java.lang.Comparable var7 = var0.getDomainCrosshairRowKey();
        int var8 = var0.getDomainAxisCount();
        org.jfree.chart.renderer.xy.StackedXYAreaRenderer var9 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
        java.awt.Paint var10 = var9.getShapePaint();
        boolean var11 = var9.isOutline();
        org.jfree.chart.plot.CategoryPlot var12 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.axis.CategoryAxis var13 = var12.getDomainAxis();
        var12.clearRangeMarkers(2013);
        boolean var16 = var12.isDomainPannable();
        java.awt.Stroke var17 = var12.getRangeCrosshairStroke();
        var9.setShapeStroke(var17);
        var0.setDomainCrosshairStroke(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

    }

    public void test38() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test38"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var0.setDomainZeroBaselineVisible(false);
        boolean var3 = var0.isOutlineVisible();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);

    }

    public void test39() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test39"); }


        org.jfree.data.DefaultKeyedValues2D var1 = new org.jfree.data.DefaultKeyedValues2D(false);
        java.lang.Object var2 = var1.clone();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Number var5 = var1.getValue((-1L), ' ');
            fail("Expected exception of type org.jfree.data.UnknownKeyException");
        } catch (org.jfree.data.UnknownKeyException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

    }

    public void test40() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test40"); }


        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            org.jfree.data.xy.NormalizedMatrixSeries var3 = new org.jfree.data.xy.NormalizedMatrixSeries("E", 0, 255);
            fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }

    }

    public void test41() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test41"); }


        org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var2 = var0.findDomainBounds(var1);
        org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var6 = var5.getItemLabelFont();
        double var7 = var5.getItemLabelAnchorOffset();
        org.jfree.chart.labels.ItemLabelPosition var10 = var5.getNegativeItemLabelPosition(0, 0);
        double var11 = var10.getAngle();
        var0.setNegativeItemLabelPosition(var10);
        org.jfree.chart.labels.XYSeriesLabelGenerator var13 = var0.getLegendItemToolTipGenerator();
        org.jfree.chart.title.LegendTitle var14 = new org.jfree.chart.title.LegendTitle(var0);
        org.jfree.chart.plot.CategoryPlot var15 = new org.jfree.chart.plot.CategoryPlot();
        java.lang.Comparable var16 = var15.getDomainCrosshairColumnKey();
        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var17 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        var17.setUseSeriesOffset(true);
        var17.setBaseSeriesVisible(true);
        var17.setAutoPopulateSeriesShape(false);
        org.jfree.chart.renderer.category.CategoryItemRenderer[] var24 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var17};
        var15.setRenderers(var24);
        var14.setSources(var24);
        org.jfree.ui.RectangleAnchor var27 = var14.getLegendItemGraphicLocation();
        java.lang.Object var28 = var14.clone();
        org.jfree.util.SortOrder var29 = var14.getSortOrder();
        org.jfree.chart.block.BlockContainer var30 = var14.getItemContainer();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

    }

    public void test42() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test42"); }


        org.jfree.chart.renderer.category.ScatterRenderer var0 = new org.jfree.chart.renderer.category.ScatterRenderer();
        var0.setItemMargin(0.2d);
        double var3 = var0.getItemMargin();
        boolean var6 = var0.getItemCreateEntity(2013, 51);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0.2d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);

    }

    public void test43() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test43"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
        java.lang.String var2 = var0.getPlotType();
        org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var11 = var10.getTickLabelPaint();
        var5.setFillPaint(var11, true);
        var4.setLabelPaint(var11);
        boolean var15 = var0.removeRangeMarker(var4);
        java.awt.Paint var16 = var0.getRangeZeroBaselinePaint();
        boolean var17 = var0.isRangeCrosshairLockedOnData();
        java.util.List var18 = var0.getAnnotations();
        var0.setRangeZeroBaselineVisible(false);
        org.jfree.ui.RectangleEdge var21 = var0.getDomainAxisEdge();
        org.jfree.chart.renderer.xy.StackedXYAreaRenderer var24 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
        boolean var25 = var24.isOutline();
        var24.setUseFillPaint(true);
        org.jfree.chart.StandardChartTheme var30 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var31 = var30.getLegendItemPaint();
        var24.setShapePaint(var31);
        org.jfree.chart.plot.IntervalMarker var33 = new org.jfree.chart.plot.IntervalMarker(0.2d, 0.04d, var31);
        boolean var34 = var0.removeRangeMarker(var33);
        java.awt.Paint var35 = var33.getOutlinePaint();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var35);

    }

    public void test44() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test44"); }


        org.jfree.data.xy.XIntervalSeriesCollection var0 = new org.jfree.data.xy.XIntervalSeriesCollection();
        org.jfree.data.xy.XIntervalSeries var2 = new org.jfree.data.xy.XIntervalSeries(1201L);
        var0.addSeries(var2);
        org.jfree.data.general.SeriesDataset[] var4 = new org.jfree.data.general.SeriesDataset[] { var0};
        org.jfree.data.general.CombinedDataset var5 = new org.jfree.data.general.CombinedDataset(var4);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Number var8 = var5.getStartX((-13421773), 1043495433);
            fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

    }

    public void test45() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test45"); }


        org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
        var0.setDomainCrosshairColumnKey(10);
        boolean var7 = var0.getDrawSharedDomainAxis();
        boolean var8 = var0.getDrawSharedDomainAxis();
        var0.clearRangeMarkers(0);
        org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var0.addChangeListener(var11);
        double var13 = var11.getGap();
        org.jfree.chart.plot.CombinedRangeXYPlot var14 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var15 = var14.getRangeZeroBaselineStroke();
        java.awt.Paint var16 = var14.getRangeMinorGridlinePaint();
        var11.setDomainCrosshairPaint(var16);
        org.jfree.chart.axis.CyclicNumberAxis var21 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var22 = var21.getTickLabelPaint();
        var11.setRangeAxis(100, var21, false);
        org.jfree.data.time.DateRange var25 = new org.jfree.data.time.DateRange();
        long var26 = var25.getUpperMillis();
        org.jfree.data.general.DefaultKeyedValues2DDataset var27 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var27.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        boolean var32 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(var27);
        org.jfree.data.Range var34 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(var27, true);
        org.jfree.chart.block.RectangleConstraint var35 = new org.jfree.chart.block.RectangleConstraint(var25, var34);
        var21.setRangeWithMargins(var25, false, true);
        org.jfree.chart.renderer.category.IntervalBarRenderer var39 = new org.jfree.chart.renderer.category.IntervalBarRenderer();
        var39.setSeriesVisible(15, false, true);
        org.jfree.chart.StandardChartTheme var46 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var47 = var46.getLegendItemPaint();
        java.awt.Paint var48 = var46.getSubtitlePaint();
        java.awt.Paint var49 = var46.getTickLabelPaint();
        var39.setBaseLegendTextPaint(var49);
        var21.setLabelPaint(var49);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 5.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 1L);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var34);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var47);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var48);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var49);

    }

    public void test46() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test46"); }


        org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.chart.renderer.PaintScale var1 = var0.getPaintScale();
        org.jfree.chart.renderer.PaintScale var2 = var0.getPaintScale();
        boolean var3 = var0.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.ui.RectangleAnchor var4 = var0.getBlockAnchor();
        org.jfree.chart.util.ParamChecks var5 = new org.jfree.chart.util.ParamChecks();
        boolean var6 = var0.equals(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);

    }

    public void test47() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test47"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
        java.lang.String var2 = var0.getPlotType();
        org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var11 = var10.getTickLabelPaint();
        var5.setFillPaint(var11, true);
        var4.setLabelPaint(var11);
        boolean var15 = var0.removeRangeMarker(var4);
        org.jfree.chart.axis.AxisLocation var16 = var0.getDomainAxisLocation();
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var19 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var22 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var23 = var22.getItemLabelFont();
        double var24 = var22.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var27 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var28 = var27.getItemLabelFont();
        java.awt.Shape var29 = var27.getBaseLegendShape();
        var22.setShape(var29);
        var19.setLegendBar(var29);
        var19.setDrawBarOutline(true);
        org.jfree.data.xy.CategoryTableXYDataset var34 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var35 = var19.findDomainBounds(var34);
        int var36 = var0.getIndexOf(var19);
        var0.setRangeCrosshairVisible(false);
        org.jfree.chart.renderer.xy.StackedXYBarRenderer var39 = new org.jfree.chart.renderer.xy.StackedXYBarRenderer();
        javax.swing.JPanel var40 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var41 = var40.getPreferredSize();
        java.awt.image.ColorModel var42 = var40.getColorModel();
        var40.updateUI();
        java.lang.String var44 = var40.toString();
        var40.setFocusable(true);
        boolean var47 = var39.equals(var40);
        java.awt.Paint var49 = var39.lookupSeriesOutlinePaint((-1));
        var0.setDomainCrosshairPaint(var49);
        org.jfree.data.statistics.SimpleHistogramDataset var52 = new org.jfree.data.statistics.SimpleHistogramDataset(100.0f);
        var0.setDataset(var52);
        java.lang.Object var54 = var52.clone();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var41);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var42);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var44 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var44.equals("org.jfree.chart.ChartPanel[,0,0,0var44,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var49);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var54);

    }

    public void test48() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test48"); }


        org.jfree.chart.labels.IntervalXYItemLabelGenerator var0 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator();
        java.lang.Object var1 = var0.clone();
        org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", var4);
        org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
        var2.setDomainCrosshairColumnKey(10);
        boolean var9 = var2.getDrawSharedDomainAxis();
        org.jfree.ui.RectangleEdge var11 = var2.getDomainAxisEdge(2);
        java.util.List var12 = var2.getAnnotations();
        boolean var13 = var0.equals(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == false);

    }

    public void test49() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test49"); }


        org.jfree.data.time.Year var3 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var4 = new org.jfree.data.time.Month(1, var3);
        org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
        long var6 = var4.getSerialIndex();
        org.jfree.data.time.TimeTableXYDataset var7 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var9 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var10 = new org.jfree.data.gantt.Task("hi!", var9);
        var7.remove(var9, 100, false);
        org.jfree.chart.axis.PeriodAxis var14 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", var4, var9);
        java.util.Date var15 = var9.getEnd();
        org.jfree.data.time.Second var16 = new org.jfree.data.time.Second(var15);
        org.jfree.data.time.Millisecond var17 = new org.jfree.data.time.Millisecond(var15);
        boolean var19 = var17.equals("CategoryLabelWidthType.RANGE");
        org.jfree.data.time.Second var20 = var17.getSecond();
        org.jfree.data.time.RegularTimePeriod var21 = var20.next();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1201L);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

    }

    public void test50() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test50"); }


        org.jfree.data.general.DefaultKeyedValues2DDataset var0 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var0.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        org.jfree.data.Range var5 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(var0);
        org.jfree.data.Range var7 = org.jfree.data.Range.shift(var5, (-1.0d));
        org.jfree.data.Range var10 = org.jfree.data.Range.expand(var5, (-0.21460183660255172d), 0.14d);
        org.jfree.chart.renderer.category.LevelRenderer var11 = new org.jfree.chart.renderer.category.LevelRenderer();
        double var12 = var11.getItemMargin();
        org.jfree.chart.StrokeMap var13 = new org.jfree.chart.StrokeMap();
        java.lang.Object var14 = var13.clone();
        boolean var15 = var11.equals(var13);
        var11.setItemLabelAnchorOffset(4.0d);
        org.jfree.data.KeyedObjects2D var19 = new org.jfree.data.KeyedObjects2D();
        javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var21 = var20.getPreferredSize();
        javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var20.setNextFocusableComponent(var22);
        java.util.Locale var24 = var22.getLocale();
        org.jfree.chart.axis.TickUnitSource var25 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var24);
        java.text.NumberFormat var26 = java.text.NumberFormat.getPercentInstance(var24);
        org.jfree.data.time.Year var28 = new org.jfree.data.time.Year();
        var19.addObject(var26, 0.04d, var28);
        double[] var32 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var33 = new org.jfree.chart.annotations.XYPolygonAnnotation(var32);
        double[] var36 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var37 = new org.jfree.chart.annotations.XYPolygonAnnotation(var36);
        org.jfree.chart.ClipPath var38 = new org.jfree.chart.ClipPath(var32, var36);
        double[][] var39 = new double[][] { var32};
        double[] var44 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var45 = new org.jfree.chart.annotations.XYPolygonAnnotation(var44);
        double[] var48 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var49 = new org.jfree.chart.annotations.XYPolygonAnnotation(var48);
        org.jfree.chart.ClipPath var50 = new org.jfree.chart.ClipPath(var44, var48);
        double[][] var51 = new double[][] { var44};
        org.jfree.data.category.CategoryDataset var52 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var51);
        org.jfree.data.category.DefaultIntervalCategoryDataset var53 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var39, var51);
        org.jfree.chart.axis.SubCategoryAxis var55 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
        var55.configure();
        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var57 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        java.lang.Boolean var59 = var57.getSeriesLinesVisible(10);
        javax.swing.JPanel var61 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var62 = var61.getPreferredSize();
        boolean var63 = var61.getIgnoreRepaint();
        boolean var64 = var61.isLightweight();
        javax.swing.JPanel var65 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var66 = var65.getPreferredSize();
        javax.swing.JPanel var67 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var65.setNextFocusableComponent(var67);
        var65.show();
        javax.swing.JPanel var70 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var71 = var70.getLocation();
        java.awt.Dimension var72 = var70.preferredSize();
        java.awt.Rectangle var73 = var70.bounds();
        var65.scrollRectToVisible(var73);
        var61.setBounds(var73);
        var57.setSeriesShape(15, var73);
        org.jfree.chart.axis.AxisState var77 = new org.jfree.chart.axis.AxisState();
        org.jfree.chart.title.TextTitle var80 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var81 = var80.isVisible();
        java.lang.Object var82 = var80.clone();
        org.jfree.ui.RectangleEdge var83 = var80.getPosition();
        var77.moveCursor(4.0d, var83);
        double var85 = var11.getItemMiddle(1201L, 0.04d, var53, var55, var73, var83);
        java.awt.Paint var86 = var55.getTickLabelPaint();
        org.jfree.data.time.Year var87 = new org.jfree.data.time.Year();
        java.awt.Paint var88 = var55.getTickLabelPaint(var87);
        boolean var89 = var10.equals(var87);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0.2d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var48);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var51);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var52);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var59);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var61);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var62);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var65);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var66);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var67);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var70);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var71);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var72);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var73);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var81 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var82);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var83);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var85 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var86);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var88);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var89 == false);

    }

    public void test51() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test51"); }


        org.jfree.data.time.Minute var0 = new org.jfree.data.time.Minute();
        int var1 = var0.getMinute();
        org.jfree.data.time.Hour var2 = var0.getHour();
        org.jfree.data.time.Day var3 = var2.getDay();
        org.jfree.data.time.Minute var4 = new org.jfree.data.time.Minute();
        int var5 = var4.getMinute();
        org.jfree.data.time.Hour var6 = var4.getHour();
        org.jfree.data.time.Year var9 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var10 = new org.jfree.data.time.Month(1, var9);
        java.util.Locale var11 = javax.swing.JComponent.getDefaultLocale();
        org.jfree.chart.axis.MonthDateFormat var13 = new org.jfree.chart.axis.MonthDateFormat(var11, 2147483647);
        java.util.Calendar var14 = var13.getCalendar();
        long var15 = var10.getLastMillisecond(var14);
        long var16 = var6.getLastMillisecond(var14);
        long var17 = var3.getLastMillisecond(var14);
        org.jfree.data.DefaultKeyedValue var19 = new org.jfree.data.DefaultKeyedValue(var14, 2147483647);
        java.lang.Object var20 = var19.clone();
        java.lang.Object var21 = var19.clone();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == (-59008924800001L));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 1378965599999L);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1378969199999L);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

    }

    public void test52() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test52"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var0.setNextFocusableComponent(var2);
        var0.enable(true);
        float var6 = var0.getAlignmentY();
        boolean var7 = var0.isPaintingTile();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0.5f);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);

    }

    public void test53() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test53"); }


        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var1 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer(20);

    }

    public void test54() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test54"); }


        org.jfree.chart.renderer.category.ScatterRenderer var0 = new org.jfree.chart.renderer.category.ScatterRenderer();
        double var1 = var0.getItemMargin();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0.2d);

    }

    public void test55() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test55"); }


        org.jfree.chart.renderer.xy.HighLowRenderer var0 = new org.jfree.chart.renderer.xy.HighLowRenderer();
        java.awt.Paint var1 = var0.getCloseTickPaint();
        org.jfree.data.xy.DefaultIntervalXYDataset var2 = new org.jfree.data.xy.DefaultIntervalXYDataset();
        org.jfree.data.Range var4 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds(var2, false);
        org.jfree.data.Range var5 = var0.findRangeBounds(var2);
        var0.setSeriesVisible(2013, false, false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

    }

    public void test56() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test56"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var0.setNextFocusableComponent(var2);
        java.util.Locale var4 = var2.getLocale();
        javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var6 = var5.getPreferredSize();
        java.awt.Dimension var7 = var2.getSize(var6);
        java.awt.event.ContainerListener[] var8 = var2.getContainerListeners();
        boolean var11 = var2.inside(2147483647, 10);
        javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var13 = var12.getPreferredSize();
        javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var12.setNextFocusableComponent(var14);
        java.util.Locale var16 = var14.getLocale();
        javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var18 = var17.getPreferredSize();
        java.awt.Dimension var19 = var14.getSize(var18);
        java.awt.event.ContainerListener[] var20 = var14.getContainerListeners();
        boolean var23 = var14.inside(2147483647, 10);
        var2.setNextFocusableComponent(var14);
        boolean var25 = var2.isPaintingForPrint();
        var2.move(252, 52);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);

    }

    public void test57() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test57"); }


        org.jfree.data.time.Week var1 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var2 = new org.jfree.data.gantt.Task("hi!", var1);
        org.jfree.data.time.TimePeriodValue var4 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var1, (java.lang.Number)10);
        org.jfree.data.time.ohlc.OHLCItem var9 = new org.jfree.data.time.ohlc.OHLCItem(var1, 100.0d, 0.0d, 0.05d, 0.0d);
        double var10 = var9.getHighValue();
        double var11 = var9.getOpenValue();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 100.0d);

    }

    public void test58() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test58"); }


        java.text.NumberFormat var0 = java.text.NumberFormat.getInstance();
        int var1 = var0.getMinimumIntegerDigits();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 1);

    }

    public void test59() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test59"); }


        org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
        var0.setDomainCrosshairColumnKey(10);
        org.jfree.chart.axis.AxisLocation var7 = var0.getDomainAxisLocation();
        var0.setAnchorValue(Double.POSITIVE_INFINITY, false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

    }

    public void test60() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test60"); }


        org.jfree.chart.block.BlockParams var0 = new org.jfree.chart.block.BlockParams();

    }

    public void test61() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test61"); }


        org.jfree.chart.renderer.xy.StackedXYAreaRenderer var1 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer(252);

    }

    public void test62() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test62"); }


        java.lang.Number[][] var0 = new java.lang.Number[][] { };
        java.lang.Number[][] var1 = new java.lang.Number[][] { };
        org.jfree.data.category.DefaultIntervalCategoryDataset var2 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var0, var1);
        org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", var4);
        int var6 = var2.getColumnIndex(var4);
        int var7 = var2.getColumnCount();
        org.jfree.data.Range var8 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(var2);
        java.lang.Number var9 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var9);

    }

    public void test63() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test63"); }


        org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
        var0.setDomainCrosshairColumnKey(10);
        boolean var7 = var0.getDrawSharedDomainAxis();
        boolean var8 = var0.getDrawSharedDomainAxis();
        var0.clearRangeMarkers(0);
        org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var0.addChangeListener(var11);
        var0.clearRangeMarkers();
        java.awt.Stroke var14 = var0.getDomainCrosshairStroke();
        var0.mapDatasetToDomainAxis(5, 8);
        org.jfree.chart.axis.SubCategoryAxis var19 = new org.jfree.chart.axis.SubCategoryAxis("Combined Range XYPlot");
        var19.clearCategoryLabelToolTips();
        int var21 = var0.getDomainAxisIndex(var19);
        java.awt.Stroke var22 = var0.getDomainGridlineStroke();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

    }

    public void test64() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test64"); }


        org.jfree.data.xy.VectorSeriesCollection var0 = new org.jfree.data.xy.VectorSeriesCollection();
        var0.removeAllSeries();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            double var4 = var0.getVectorXValue(8, 20);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }

    }

    public void test65() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test65"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[1.0,1.0]", var2, false);
        java.awt.Toolkit var7 = var6.getToolkit();
        var6.addNotify();
        var6.setCursor(1);
        boolean var11 = var6.isFocusCycleRoot();
        java.util.Set var13 = var6.getFocusTraversalKeys(1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

    }

    public void test66() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test66"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
        java.lang.String var2 = var0.getPlotType();
        org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var11 = var10.getTickLabelPaint();
        var5.setFillPaint(var11, true);
        var4.setLabelPaint(var11);
        boolean var15 = var0.removeRangeMarker(var4);
        javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var17 = var16.getPreferredSize();
        java.awt.image.ColorModel var18 = var16.getColorModel();
        var16.updateUI();
        java.lang.String var20 = var16.toString();
        boolean var21 = var16.getInheritsPopupMenu();
        double[] var24 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var25 = new org.jfree.chart.annotations.XYPolygonAnnotation(var24);
        java.lang.Object var26 = var25.clone();
        org.jfree.chart.event.AnnotationChangeEvent var27 = new org.jfree.chart.event.AnnotationChangeEvent(var16, var25);
        var0.annotationChanged(var27);
        org.jfree.ui.RectangleInsets var29 = var0.getAxisOffset();
        boolean var30 = var0.isOutlineVisible();
        java.awt.Color var34 = java.awt.Color.getHSBColor(100.0f, (-1.0f), 2.0f);
        java.awt.Color var35 = var34.brighter();
        var0.setRangeGridlinePaint(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var20 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var20.equals("org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var34);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var35);

    }

    public void test67() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test67"); }


        double[] var2 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var3 = new org.jfree.chart.annotations.XYPolygonAnnotation(var2);
        double[] var6 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var7 = new org.jfree.chart.annotations.XYPolygonAnnotation(var6);
        org.jfree.chart.ClipPath var8 = new org.jfree.chart.ClipPath(var2, var6);
        double[] var11 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var12 = new org.jfree.chart.annotations.XYPolygonAnnotation(var11);
        int var13 = org.jfree.chart.HashUtilities.hashCodeForDoubleArray(var11);
        org.jfree.data.function.PolynomialFunction2D var14 = new org.jfree.data.function.PolynomialFunction2D(var11);
        var8.setXValue(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1043495433);

    }

    public void test68() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test68"); }


        org.jfree.chart.annotations.XYLineAnnotation var4 = new org.jfree.chart.annotations.XYLineAnnotation((-1.0d), (-1.0d), 100.0d, 100.0d);
        org.jfree.data.xy.DefaultIntervalXYDataset var5 = new org.jfree.data.xy.DefaultIntervalXYDataset();
        boolean var6 = var4.hasListener(var5);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Number var9 = var5.getEndY((-2), 20);
            fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);

    }

    public void test69() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test69"); }


        org.jfree.data.time.TimeSeriesCollection var0 = new org.jfree.data.time.TimeSeriesCollection();
        java.util.List var1 = var0.getSeries();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

    }

    public void test70() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test70"); }


        org.jfree.chart.urls.CustomXYURLGenerator var0 = new org.jfree.chart.urls.CustomXYURLGenerator();

    }

    public void test71() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test71"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var0.setNextFocusableComponent(var2);
        javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var5 = var4.getLocation();
        java.awt.Dimension var6 = var4.preferredSize();
        var0.setSize(var6);
        javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var9 = var8.getPreferredSize();
        java.awt.image.ColorModel var10 = var8.getColorModel();
        var8.firePropertyChange("", 0.0f, 0.0f);
        javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var16 = var15.getLocation();
        java.awt.Point var17 = var8.getLocation(var16);
        var0.add(var8, (-1.0d), 0);
        boolean var21 = var8.isDoubleBuffered();
        javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var23 = var22.getPreferredSize();
        java.awt.image.ColorModel var24 = var22.getColorModel();
        var22.updateUI();
        java.awt.Dimension var26 = var22.getPreferredSize();
        java.awt.Dimension var27 = var8.getSize(var26);
        org.jfree.data.xy.XYDatasetTableModel var28 = new org.jfree.data.xy.XYDatasetTableModel();
        java.lang.Class var30 = var28.getColumnClass((-1));
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.util.EventListener[] var31 = var8.<java.util.EventListener>getListeners(var30);
            fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

    }

    public void test72() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test72"); }


        org.jfree.chart.renderer.category.ScatterRenderer var0 = new org.jfree.chart.renderer.category.ScatterRenderer();
        var0.setUseFillPaint(true);
        var0.setBaseShapesFilled(false);

    }

    public void test73() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test73"); }


        org.jfree.data.general.DatasetGroup var1 = new org.jfree.data.general.DatasetGroup("jfreechart-");

    }

    public void test74() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test74"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var1 = var0.getLocation();
        java.awt.Dimension var2 = var0.preferredSize();
        org.jfree.chart.plot.ContourPlot var3 = new org.jfree.chart.plot.ContourPlot();
        var0.addPropertyChangeListener(var3);
        org.jfree.data.general.DatasetGroup var5 = var3.getDatasetGroup();
        org.jfree.chart.plot.DefaultDrawingSupplier var6 = new org.jfree.chart.plot.DefaultDrawingSupplier();
        java.awt.Paint var7 = var6.getNextOutlinePaint();
        var3.setDrawingSupplier(var6, true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

    }

    public void test75() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test75"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[1.0,1.0]", var2, false);
        var6.repaint(1L, 4, 15, 2147483647, 52);
        int var13 = var6.getExtendedState();
        java.awt.peer.ComponentPeer var14 = var6.getPeer();
        var6.setTitle("TimePeriodValue[Week 37, 2013,10]");

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var14);

    }

    public void test76() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test76"); }


        org.jfree.chart.axis.CyclicNumberAxis var1 = new org.jfree.chart.axis.CyclicNumberAxis(2.0d);
        var1.setAutoRangeStickyZero(false);

    }

    public void test77() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test77"); }


        org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var1 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((short)10);
        org.jfree.data.general.DatasetGroup var2 = var1.getGroup();
        java.lang.Comparable var4 = var1.getSeriesKey(51);
        var1.setOutlierCoefficient(180.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var4 + "' != '" + (short)10+ "'", var4.equals((short)10));

    }

    public void test78() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test78"); }


        org.jfree.chart.renderer.category.GanttRenderer var0 = new org.jfree.chart.renderer.category.GanttRenderer();
        java.lang.String[] var3 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var4 = new org.jfree.chart.axis.SymbolAxis("hi!", var3);
        org.jfree.chart.plot.CompassPlot var5 = new org.jfree.chart.plot.CompassPlot();
        boolean var6 = var4.equals(var5);
        java.lang.String var7 = var5.getPlotType();
        java.awt.Paint var8 = var5.getRoseCenterPaint();
        var0.setIncompletePaint(var8);
        org.jfree.chart.labels.CategorySeriesLabelGenerator var10 = var0.getLegendItemLabelGenerator();
        org.jfree.chart.axis.TickUnits var11 = new org.jfree.chart.axis.TickUnits();
        java.lang.Object var12 = var11.clone();
        boolean var13 = var0.equals(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var7 + "' != '" + "Compass Plot"+ "'", var7.equals("Compass Plot"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == false);

    }

    public void test79() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test79"); }


        org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
        int var2 = var0.getRowIndex((-170.0d));
        org.jfree.chart.axis.CategoryLabelPositions var4 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
        org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var7 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var8 = new org.jfree.data.gantt.Task("hi!", var7);
        org.jfree.data.time.TimePeriodValue var10 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var7, (java.lang.Number)10);
        var5.setDomainCrosshairColumnKey(10);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var12 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var14 = var12.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var17 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var18 = var17.getTickLabelPaint();
        var12.setFillPaint(var18, true);
        var5.setDomainCrosshairPaint(var18);
        boolean var22 = var4.equals(var5);
        org.jfree.ui.RectangleEdge var23 = var5.getRangeAxisEdge();
        org.jfree.chart.axis.SubCategoryAxis var25 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
        int var26 = var5.getDomainAxisIndex(var25);
        java.awt.Paint var27 = var25.getSubLabelPaint();
        org.jfree.chart.axis.CyclicNumberAxis var30 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        boolean var31 = var30.isAxisLineVisible();
        var30.setAxisLineVisible(true);
        org.jfree.chart.axis.CyclicNumberAxis var36 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var37 = var36.getTickLabelPaint();
        var30.setTickMarkPaint(var37);
        org.jfree.chart.renderer.category.DefaultCategoryItemRenderer var39 = new org.jfree.chart.renderer.category.DefaultCategoryItemRenderer();
        org.jfree.chart.urls.CategoryURLGenerator var41 = var39.getSeriesItemURLGenerator(2147483647);
        boolean var42 = var39.getBaseShapesVisible();
        java.lang.String[] var45 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var46 = new org.jfree.chart.axis.SymbolAxis("hi!", var45);
        org.jfree.chart.renderer.category.BarRenderer3D var49 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var50 = var49.getItemLabelFont();
        double var51 = var49.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var54 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var55 = var54.getItemLabelFont();
        java.awt.Shape var56 = var54.getBaseLegendShape();
        var49.setShape(var56);
        var46.setDownArrow(var56);
        javax.swing.JPanel var59 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var60 = var59.getPreferredSize();
        java.awt.image.ColorModel var61 = var59.getColorModel();
        var59.updateUI();
        java.lang.String var63 = var59.toString();
        boolean var64 = var59.getInheritsPopupMenu();
        javax.swing.InputMap var65 = var59.getInputMap();
        var59.nextFocus();
        boolean var67 = var59.getInheritsPopupMenu();
        javax.swing.JPanel var68 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var69 = var68.getPreferredSize();
        java.awt.image.ColorModel var70 = var68.getColorModel();
        var68.firePropertyChange("", 0.0f, 0.0f);
        java.awt.Color var75 = var68.getForeground();
        var59.setForeground(var75);
        var46.setGridBandAlternatePaint(var75);
        var39.setBaseItemLabelPaint(var75, false);
        org.jfree.chart.plot.CategoryPlot var80 = new org.jfree.chart.plot.CategoryPlot(var0, var25, var30, var39);
        org.jfree.chart.plot.CombinedRangeCategoryPlot var81 = new org.jfree.chart.plot.CombinedRangeCategoryPlot();
        org.jfree.chart.annotations.CategoryPointerAnnotation var86 = new org.jfree.chart.annotations.CategoryPointerAnnotation("[size=0x00000000]", 1043495433, 0.25d, 100.0d);
        boolean var88 = var81.removeAnnotation(var86, false);
        java.lang.Object var89 = var86.clone();
        boolean var91 = var80.removeAnnotation(var86, true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var41);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var45);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var50);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var55);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var56);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var59);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var60);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var61);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var63 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var63,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var63.equals("org.jfree.chart.ChartPanel[,0,0,0var63,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var65);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var68);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var69);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var70);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var75);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var88 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var89);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var91 == false);

    }

    public void test80() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test80"); }


        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        var0.setUseSeriesOffset(true);
        java.awt.Paint var3 = var0.getErrorIndicatorPaint();
        var0.setItemLabelsVisible(false);
        org.jfree.chart.renderer.xy.XYBlockRenderer var6 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.chart.renderer.xy.XYBlockRenderer var7 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.chart.renderer.PaintScale var8 = var7.getPaintScale();
        org.jfree.chart.renderer.PaintScale var9 = var7.getPaintScale();
        var6.setPaintScale(var9);
        boolean var11 = var0.equals(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);

    }

    public void test81() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test81"); }


        org.jfree.chart.util.HexNumberFormat var2 = new org.jfree.chart.util.HexNumberFormat();
        javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var4 = var3.getPreferredSize();
        javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var3.setNextFocusableComponent(var5);
        java.util.Locale var7 = var5.getLocale();
        org.jfree.chart.axis.MonthDateFormat var8 = new org.jfree.chart.axis.MonthDateFormat(var7);
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var9 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", var2, var8);
        org.jfree.chart.util.HexNumberFormat var11 = new org.jfree.chart.util.HexNumberFormat();
        javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var13 = var12.getPreferredSize();
        javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var12.setNextFocusableComponent(var14);
        java.util.Locale var16 = var14.getLocale();
        org.jfree.chart.axis.MonthDateFormat var17 = new org.jfree.chart.axis.MonthDateFormat(var16);
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var18 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", var11, var17);
        org.jfree.chart.labels.StandardPieSectionLabelGenerator var19 = new org.jfree.chart.labels.StandardPieSectionLabelGenerator("Combined Range XYPlot", var2, var11);
        org.jfree.data.statistics.DefaultStatisticalCategoryDataset var20 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
        org.jfree.data.general.PieDataset var22 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(var20, 10);
        double var23 = org.jfree.data.general.DatasetUtilities.calculatePieDatasetTotal(var22);
        org.jfree.data.time.Week var25 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var26 = new org.jfree.data.gantt.Task("hi!", var25);
        org.jfree.data.time.TimePeriodValue var28 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var25, (java.lang.Number)10);
        org.jfree.data.time.ohlc.OHLCItem var33 = new org.jfree.data.time.ohlc.OHLCItem(var25, 100.0d, 0.0d, 0.05d, 0.0d);
        int var34 = var25.getYearValue();
        java.text.AttributedString var35 = var19.generateAttributedSectionLabel(var22, var34);
        org.jfree.data.general.PieDataset var38 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(var22, 2147483647, 1.0E-8d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == 2013);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

    }

    public void test82() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test82"); }


        org.jfree.data.time.DateRange var0 = new org.jfree.data.time.DateRange();
        long var1 = var0.getUpperMillis();
        org.jfree.data.general.DefaultKeyedValues2DDataset var2 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var2.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        boolean var7 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(var2);
        org.jfree.data.Range var9 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(var2, true);
        org.jfree.chart.block.RectangleConstraint var10 = new org.jfree.chart.block.RectangleConstraint(var0, var9);
        org.jfree.chart.block.RectangleConstraint var12 = new org.jfree.chart.block.RectangleConstraint(var9, 0.025d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 1L);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

    }

    public void test83() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test83"); }


        org.jfree.chart.renderer.category.GradientBarPainter var3 = new org.jfree.chart.renderer.category.GradientBarPainter(0.3d, 3.0d, 2.0d);
        org.jfree.chart.axis.SubCategoryAxis var5 = new org.jfree.chart.axis.SubCategoryAxis("Combined Range XYPlot");
        var5.setCategoryMargin((-0.21460183660255172d));
        boolean var8 = var3.equals(var5);
        java.lang.Object var9 = var5.clone();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

    }

    public void test84() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test84"); }


        org.jfree.chart.util.HexNumberFormat var3 = new org.jfree.chart.util.HexNumberFormat();
        javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var5 = var4.getPreferredSize();
        javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var4.setNextFocusableComponent(var6);
        java.util.Locale var8 = var6.getLocale();
        org.jfree.chart.axis.MonthDateFormat var9 = new org.jfree.chart.axis.MonthDateFormat(var8);
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var10 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", var3, var9);
        javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var12 = var11.getPreferredSize();
        javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var11.setNextFocusableComponent(var13);
        java.util.Locale var15 = var13.getLocale();
        org.jfree.chart.axis.MonthDateFormat var16 = new org.jfree.chart.axis.MonthDateFormat(var15);
        org.jfree.chart.labels.StandardXYToolTipGenerator var17 = new org.jfree.chart.labels.StandardXYToolTipGenerator("Combined Range XYPlot", var9, var16);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var18 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer(10, var17);
        var18.setGapThreshold(2.0d);
        var18.setShapesFilled((java.lang.Boolean)true);
        java.awt.Font var25 = var18.getItemLabelFont(2, 1043495433);
        boolean var26 = var18.getBaseShapesVisible();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);

    }

    public void test85() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test85"); }


        org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
        boolean var1 = var0.isCounterClockwise();
        var0.setRadiusGridlinesVisible(false);
        int var4 = var0.getDatasetCount();
        org.jfree.chart.axis.CyclicNumberAxis var8 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        boolean var9 = var8.isAxisLineVisible();
        var8.setAxisLineVisible(true);
        org.jfree.data.general.DefaultKeyedValues2DDataset var12 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var12.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        org.jfree.data.Range var17 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(var12);
        var8.setDefaultAutoRange(var17);
        org.jfree.data.Range var19 = var8.getRange();
        var0.setAxis(0, var8, true);
        boolean var22 = var0.isRadiusMinorGridlinesVisible();
        var0.zoom(10.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);

    }

    public void test86() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test86"); }


        org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var2 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
        java.lang.Object var3 = var2.clone();
        org.jfree.chart.urls.TimeSeriesURLGenerator var4 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
        org.jfree.chart.renderer.xy.XYStepAreaRenderer var5 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, var2, var4);
        org.jfree.chart.renderer.xy.StandardXYItemRenderer var6 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, var2);
        double[] var9 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var10 = new org.jfree.chart.annotations.XYPolygonAnnotation(var9);
        double[] var13 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var14 = new org.jfree.chart.annotations.XYPolygonAnnotation(var13);
        org.jfree.chart.ClipPath var15 = new org.jfree.chart.ClipPath(var9, var13);
        double[][] var16 = new double[][] { var9};
        double[] var21 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var22 = new org.jfree.chart.annotations.XYPolygonAnnotation(var21);
        double[] var25 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var26 = new org.jfree.chart.annotations.XYPolygonAnnotation(var25);
        org.jfree.chart.ClipPath var27 = new org.jfree.chart.ClipPath(var21, var25);
        double[][] var28 = new double[][] { var21};
        org.jfree.data.category.CategoryDataset var29 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var28);
        org.jfree.data.category.DefaultIntervalCategoryDataset var30 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var16, var28);
        boolean var31 = var6.equals(var16);
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var34 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        java.awt.Shape var35 = var34.getLegendBar();
        org.jfree.chart.entity.ContourEntity var38 = new org.jfree.chart.entity.ContourEntity(var35, "", "hi!");
        org.jfree.chart.entity.TickLabelEntity var41 = new org.jfree.chart.entity.TickLabelEntity(var35, "hi!", "");
        org.jfree.chart.entity.ContourEntity var44 = new org.jfree.chart.entity.ContourEntity(var35, "-4,-4,4,4", "-4,-4,4,4");
        var6.setLegendLine(var35);
        org.jfree.chart.axis.CyclicNumberAxis var48 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        boolean var49 = var48.isAxisLineVisible();
        var48.setAxisLineVisible(true);
        var48.setPeriod(0.3d);
        org.jfree.chart.entity.AxisEntity var54 = new org.jfree.chart.entity.AxisEntity(var35, var48);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);

    }

    public void test87() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test87"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        boolean var2 = var0.getIgnoreRepaint();
        org.jfree.chart.plot.ContourPlot var4 = new org.jfree.chart.plot.ContourPlot();
        var4.setOutlineVisible(false);
        var0.addPropertyChangeListener("Combined Range XYPlot", var4);
        javax.swing.JPopupMenu var8 = var0.getComponentPopupMenu();
        boolean var9 = var0.isFontSet();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == true);

    }

    public void test88() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test88"); }


        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var0 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var2 = var0.getSeriesItemLabelGenerator(0);
        java.lang.Boolean var4 = var0.getSeriesVisibleInLegend(2147483647);
        var0.setDrawSeriesLineAsPath(true);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var4);

    }

    public void test89() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test89"); }


        org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
        java.lang.Comparable var1 = var0.getDomainCrosshairColumnKey();
        var0.setCrosshairDatasetIndex(100);
        org.jfree.chart.plot.CombinedRangeXYPlot var4 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var5 = var4.getRangeZeroBaselineStroke();
        org.jfree.chart.title.TextTitle var7 = new org.jfree.chart.title.TextTitle("hi!");
        org.jfree.ui.RectangleInsets var8 = var7.getMargin();
        var4.setAxisOffset(var8);
        var0.setAxisOffset(var8);
        org.jfree.data.category.CategoryDataset var12 = var0.getDataset((-2));
        var0.clearRangeMarkers((-13421773));
        var0.mapDatasetToDomainAxis(51, 100);
        java.awt.Paint var18 = var0.getRangeMinorGridlinePaint();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

    }

    public void test90() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test90"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        boolean var2 = var0.getIgnoreRepaint();
        org.jfree.chart.plot.ContourPlot var4 = new org.jfree.chart.plot.ContourPlot();
        var4.setOutlineVisible(false);
        var0.addPropertyChangeListener("Combined Range XYPlot", var4);
        javax.swing.JPopupMenu var8 = var0.getComponentPopupMenu();
        var0.reshape((-13421773), 2147483647, 2013, 2013);
        javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var15 = var14.getPreferredSize();
        java.awt.image.ColorModel var16 = var14.getColorModel();
        var14.updateUI();
        java.lang.String var18 = var14.toString();
        boolean var19 = var14.getInheritsPopupMenu();
        javax.swing.InputMap var20 = var14.getInputMap();
        var14.nextFocus();
        javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var23 = var22.getPreferredSize();
        javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var22.setNextFocusableComponent(var24);
        java.util.Locale var26 = var24.getLocale();
        javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var28 = var27.getPreferredSize();
        java.awt.Dimension var29 = var24.getSize(var28);
        var14.setMinimumSize(var29);
        java.awt.Dimension var31 = var0.getSize(var29);
        java.awt.GraphicsConfiguration var32 = var0.getGraphicsConfiguration();
        java.awt.Dimension var33 = var0.getMaximumSize();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var18 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var18.equals("org.jfree.chart.ChartPanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

    }

    public void test91() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test91"); }


        org.jfree.data.xy.XIntervalSeriesCollection var0 = new org.jfree.data.xy.XIntervalSeriesCollection();
        org.jfree.data.xy.XIntervalSeries var2 = new org.jfree.data.xy.XIntervalSeries(1201L);
        var0.addSeries(var2);
        org.jfree.data.general.SeriesDataset[] var4 = new org.jfree.data.general.SeriesDataset[] { var0};
        org.jfree.data.general.CombinedDataset var5 = new org.jfree.data.general.CombinedDataset(var4);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Number var8 = var5.getEndX(19, 5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

    }

    public void test92() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test92"); }


        org.jfree.chart.plot.CombinedRangeCategoryPlot var0 = new org.jfree.chart.plot.CombinedRangeCategoryPlot();
        org.jfree.chart.annotations.CategoryPointerAnnotation var5 = new org.jfree.chart.annotations.CategoryPointerAnnotation("[size=0x00000000]", 1043495433, 0.25d, 100.0d);
        boolean var7 = var0.removeAnnotation(var5, false);
        double var8 = var5.getLabelOffset();
        double var9 = var5.getArrowLength();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 3.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 5.0d);

    }

    public void test93() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test93"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var0.setNextFocusableComponent(var2);
        javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var5 = var4.getPreferredSize();
        java.awt.image.ColorModel var6 = var4.getColorModel();
        var4.firePropertyChange("", 0.0f, 0.0f);
        javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var12 = var11.getLocation();
        java.awt.Point var13 = var4.getLocation(var12);
        java.awt.Component var14 = var0.findComponentAt(var12);
        javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var17 = var16.getPreferredSize();
        javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var16.setNextFocusableComponent(var18);
        java.util.Locale var20 = var18.getLocale();
        javax.swing.JPanel var21 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var22 = var21.getPreferredSize();
        java.awt.Dimension var23 = var18.getSize(var22);
        java.awt.event.ContainerListener[] var24 = var18.getContainerListeners();
        javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var26 = var25.getPreferredSize();
        java.awt.image.ColorModel var27 = var25.getColorModel();
        var25.updateUI();
        java.lang.String var29 = var25.toString();
        java.awt.Color var30 = var25.getForeground();
        var18.setBackground(var30);
        var18.addNotify();
        java.awt.Component var33 = var0.add("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", var18);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.util.Set var35 = var18.getFocusTraversalKeys(52);
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var29 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var29.equals("org.jfree.chart.ChartPanel[,0,0,0var29,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

    }

    public void test94() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test94"); }


        java.text.NumberFormat var1 = java.text.NumberFormat.getIntegerInstance();
        org.jfree.chart.axis.NumberTickUnit var2 = new org.jfree.chart.axis.NumberTickUnit(1.05d, var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

    }

    public void test95() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test95"); }


        org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var4 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
        java.lang.Object var5 = var4.clone();
        org.jfree.chart.urls.TimeSeriesURLGenerator var6 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
        org.jfree.chart.renderer.xy.XYStepAreaRenderer var7 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, var4, var6);
        org.jfree.chart.renderer.xy.StandardXYItemRenderer var8 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, var4);
        java.text.NumberFormat var9 = var4.getYFormat();
        org.jfree.chart.labels.StandardCategoryToolTipGenerator var10 = new org.jfree.chart.labels.StandardCategoryToolTipGenerator("jfreechart-", var9);
        org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator var11 = new org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator("org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]", var9);
        org.jfree.chart.plot.XYPlot var12 = new org.jfree.chart.plot.XYPlot();
        java.lang.Object var13 = var12.clone();
        boolean var14 = var11.equals(var12);
        org.jfree.chart.axis.CyclicNumberAxis var18 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        boolean var19 = var18.isAxisLineVisible();
        var18.setAxisLineVisible(true);
        org.jfree.chart.axis.CyclicNumberAxis var24 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var25 = var24.getTickLabelPaint();
        var18.setTickMarkPaint(var25);
        var18.setAxisLineVisible(false);
        var12.setRangeAxis(51, var18);
        boolean var30 = var12.isNotify();
        org.jfree.chart.title.TextTitle var34 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var35 = var34.isVisible();
        java.lang.Object var36 = var34.clone();
        var34.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
        org.jfree.chart.annotations.XYTitleAnnotation var42 = new org.jfree.chart.annotations.XYTitleAnnotation(0.04d, (-90.0d), var34);
        java.lang.Object var43 = var42.clone();
        var12.addAnnotation(var42, true);
        var42.setMaxWidth(1.5d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var43);

    }

    public void test96() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test96"); }


        org.jfree.data.xy.XYIntervalSeriesCollection var0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.xy.XYBarDataset var2 = new org.jfree.data.xy.XYBarDataset(var0, 10.0d);
        int var3 = var0.getSeriesCount();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Number var6 = var0.getStartY((-655360), (-1));
            fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);

    }

    public void test97() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test97"); }


        org.jfree.chart.axis.LogarithmicAxis var1 = new org.jfree.chart.axis.LogarithmicAxis("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ");
        double var3 = var1.adjustedLog10(100.0d);
        var1.setStrictValuesFlag(false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 2.0d);

    }

    public void test98() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test98"); }


        org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.chart.renderer.xy.XYBlockRenderer var1 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.chart.renderer.PaintScale var2 = var1.getPaintScale();
        org.jfree.chart.renderer.PaintScale var3 = var1.getPaintScale();
        var0.setPaintScale(var3);
        java.lang.String[] var7 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var8 = new org.jfree.chart.axis.SymbolAxis("hi!", var7);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var15 = var14.getTickLabelPaint();
        var9.setFillPaint(var15, true);
        var8.setGridBandAlternatePaint(var15);
        var8.setFixedDimension(100.0d);
        var8.setGridBandsVisible(false);
        var8.centerRange(0.04d);
        org.jfree.chart.title.PaintScaleLegend var25 = new org.jfree.chart.title.PaintScaleLegend(var3, var8);
        java.awt.Font var26 = var8.getLabelFont();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

    }

    public void test99() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test99"); }


        org.jfree.chart.plot.dial.DialPlot var0 = new org.jfree.chart.plot.dial.DialPlot();
        org.jfree.chart.plot.dial.StandardDialScale var1 = new org.jfree.chart.plot.dial.StandardDialScale();
        int var2 = var0.getLayerIndex(var1);
        org.jfree.chart.plot.dial.DialValueIndicator var3 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var4 = var3.getInsets();
        int var5 = var0.getLayerIndex(var3);
        org.jfree.chart.plot.dial.DialValueIndicator var6 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var7 = var6.getInsets();
        java.awt.Stroke var8 = var6.getOutlineStroke();
        var0.setCap(var6);
        double var10 = var0.getViewWidth();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1.0d);

    }

    public void test100() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test100"); }


        org.jfree.data.xy.VectorSeriesCollection var0 = new org.jfree.data.xy.VectorSeriesCollection();
        var0.removeAllSeries();
        var0.removeAllSeries();

    }

    public void test101() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test101"); }


        org.jfree.chart.util.HexNumberFormat var3 = new org.jfree.chart.util.HexNumberFormat();
        javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var5 = var4.getPreferredSize();
        javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var4.setNextFocusableComponent(var6);
        java.util.Locale var8 = var6.getLocale();
        org.jfree.chart.axis.MonthDateFormat var9 = new org.jfree.chart.axis.MonthDateFormat(var8);
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var10 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", var3, var9);
        javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var12 = var11.getPreferredSize();
        javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var11.setNextFocusableComponent(var13);
        java.util.Locale var15 = var13.getLocale();
        org.jfree.chart.axis.MonthDateFormat var16 = new org.jfree.chart.axis.MonthDateFormat(var15);
        org.jfree.chart.labels.StandardXYToolTipGenerator var17 = new org.jfree.chart.labels.StandardXYToolTipGenerator("Combined Range XYPlot", var9, var16);
        org.jfree.chart.util.RelativeDateFormat var18 = new org.jfree.chart.util.RelativeDateFormat();
        boolean var19 = var18.getShowZeroHours();
        java.text.NumberFormat var20 = var18.getNumberFormat();
        var18.setMinuteSuffix("");
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var23 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator(" onMouseOver=\"return overlib('[size=0x00000000]');\" onMouseOut=\"return nd();\"", var16, var18);
        org.jfree.data.time.TimeTableXYDataset var24 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var26 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var27 = new org.jfree.data.gantt.Task("hi!", var26);
        var24.remove(var26, 100, false);
        double var32 = var24.getDomainLowerBound(false);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.String var35 = var23.generateLabel(var24, 52, 5);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == Double.NaN);

    }

    public void test102() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test102"); }


        org.jfree.data.time.Year var3 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var4 = new org.jfree.data.time.Month(1, var3);
        org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
        long var6 = var4.getSerialIndex();
        org.jfree.data.time.TimeTableXYDataset var7 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var9 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var10 = new org.jfree.data.gantt.Task("hi!", var9);
        var7.remove(var9, 100, false);
        org.jfree.chart.axis.PeriodAxis var14 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", var4, var9);
        java.util.Date var15 = var9.getEnd();
        org.jfree.data.time.Second var16 = new org.jfree.data.time.Second(var15);
        org.jfree.data.time.Millisecond var17 = new org.jfree.data.time.Millisecond(var15);
        org.jfree.chart.renderer.xy.StackedXYAreaRenderer var18 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
        boolean var19 = var18.isOutline();
        var18.setUseFillPaint(true);
        boolean var22 = var18.getUseFillPaint();
        java.awt.Stroke var25 = var18.getItemStroke(2013, 10);
        boolean var26 = var17.equals(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1201L);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);

    }

    public void test103() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test103"); }


        org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
        boolean var1 = var0.isCounterClockwise();
        var0.setRadiusGridlinesVisible(false);
        org.jfree.chart.plot.Plot var4 = var0.getRootPlot();
        org.jfree.chart.LegendItemCollection var5 = new org.jfree.chart.LegendItemCollection();
        var0.setFixedLegendItems(var5);
        java.lang.Object var7 = var5.clone();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

    }

    public void test104() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test104"); }


        org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.axis.CyclicNumberAxis var3 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var4 = var3.getTickLabelPaint();
        org.jfree.chart.axis.ValueAxis[] var5 = new org.jfree.chart.axis.ValueAxis[] { var3};
        var0.setRangeAxes(var5);
        var0.setRangeCrosshairValue(1.05d, false);
        var0.clearDomainMarkers();
        java.lang.Number[][] var11 = new java.lang.Number[][] { };
        java.lang.Number[][] var12 = new java.lang.Number[][] { };
        org.jfree.data.category.DefaultIntervalCategoryDataset var13 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var11, var12);
        int var15 = var13.getRowIndex('a');
        var0.setDataset(var13);
        java.lang.Object var17 = var13.clone();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

    }

    public void test105() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test105"); }


        org.jfree.data.time.TimeTableXYDataset var0 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        var0.remove(var2, 100, false);
        double var8 = var0.getDomainLowerBound(false);
        int var9 = var0.getItemCount();
        int var10 = var0.getSeriesCount();
        org.jfree.data.time.TimePeriodAnchor var11 = var0.getXPosition();
        org.jfree.data.time.Year var13 = new org.jfree.data.time.Year(100);
        org.jfree.chart.plot.CombinedDomainCategoryPlot var14 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        int var15 = var13.compareTo(var14);
        var0.add(var13, 180.0d, 1024, true);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            double var21 = org.jfree.data.general.DatasetUtilities.calculateStackTotal(var0, (-1));
            fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == Double.NaN);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);

    }

    public void test106() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test106"); }


        org.jfree.chart.renderer.category.DefaultCategoryItemRenderer var0 = new org.jfree.chart.renderer.category.DefaultCategoryItemRenderer();
        var0.setBaseShapesFilled(true);
        var0.setShapesVisible(false);

    }

    public void test107() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test107"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        boolean var5 = var2.getAntiAlias();
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
        int var7 = var6.getDefaultCloseOperation();
        boolean var8 = var6.isActive();
        javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var10 = var9.getPreferredSize();
        java.awt.image.ColorModel var11 = var9.getColorModel();
        var9.updateUI();
        java.lang.String var13 = var9.toString();
        boolean var14 = var9.getInheritsPopupMenu();
        javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var16 = var15.getPreferredSize();
        javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var15.setNextFocusableComponent(var17);
        java.util.Locale var19 = var17.getLocale();
        javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var21 = var20.getPreferredSize();
        java.awt.Dimension var22 = var17.getSize(var21);
        var9.setSize(var21);
        java.awt.LayoutManager var24 = var9.getLayout();
        var6.setLayout(var24);
        javax.swing.JRootPane var26 = var6.getRootPane();
        boolean var27 = var6.isAlwaysOnTop();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var13 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var13.equals("org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == false);

    }

    public void test108() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test108"); }


        org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((byte)100, true);
        java.lang.String var3 = var2.getDescription();
        org.jfree.data.xy.XYSeries var6 = var2.createCopy(100, 10);
        java.lang.Object var7 = var6.clone();
        double var8 = var6.getMaxY();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == Double.NaN);

    }

    public void test109() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test109"); }


        org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((byte)100, true);
        java.lang.Object var3 = var2.clone();
        int var4 = var2.getMaximumItemCount();
        org.jfree.chart.urls.StandardXYURLGenerator var8 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
        org.jfree.data.statistics.SimpleHistogramDataset var10 = new org.jfree.data.statistics.SimpleHistogramDataset(100.0f);
        var10.removeAllBins();
        java.lang.String var14 = var8.generateURL(var10, 100, 1);
        var2.removeChangeListener(var10);
        boolean var16 = var2.getAllowDuplicateXValues();
        org.jfree.data.xy.XYSeriesCollection var17 = new org.jfree.data.xy.XYSeriesCollection(var2);
        org.jfree.data.time.Year var19 = new org.jfree.data.time.Year(10);
        org.jfree.data.xy.DefaultXYZDataset var20 = new org.jfree.data.xy.DefaultXYZDataset();
        org.jfree.data.DomainOrder var21 = var20.getDomainOrder();
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer var22 = new org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer();
        org.jfree.chart.StandardChartTheme var25 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var26 = var25.getLegendItemPaint();
        var22.setBoxPaint(var26);
        java.lang.Number[][] var28 = new java.lang.Number[][] { };
        java.lang.Number[][] var29 = new java.lang.Number[][] { };
        org.jfree.data.category.DefaultIntervalCategoryDataset var30 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var28, var29);
        int var32 = var30.getRowIndex('a');
        boolean var33 = var22.equals(var30);
        java.awt.Paint var34 = var22.getArtifactPaint();
        java.awt.Paint var35 = var22.getArtifactPaint();
        boolean var36 = var21.equals(var22);
        boolean var37 = var19.equals(var22);
        int var38 = var17.getSeriesIndex(var37);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Number var41 = var17.getStartY(8, (-2));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 2147483647);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var14 + "' != '" + "hi!?hi!=100&amp;hi!=1"+ "'", var14.equals("hi!?hi!=100&amp;hi!=1"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var34);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == (-1));

    }

    public void test110() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test110"); }


        org.jfree.chart.axis.ColorBar var1 = new org.jfree.chart.axis.ColorBar("hi!?hi!=80&amp;hi!=100");
        org.jfree.data.xy.XYSeries var4 = new org.jfree.data.xy.XYSeries((byte)100, true);
        java.lang.Object var5 = var4.clone();
        int var6 = var4.getMaximumItemCount();
        javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var8 = var7.getPreferredSize();
        boolean var9 = var7.getIgnoreRepaint();
        org.jfree.chart.plot.ContourPlot var11 = new org.jfree.chart.plot.ContourPlot();
        var11.setOutlineVisible(false);
        var7.addPropertyChangeListener("Combined Range XYPlot", var11);
        org.jfree.chart.urls.XYURLGenerator var15 = var11.getURLGenerator();
        var4.removePropertyChangeListener(var11);
        float var17 = var11.getForegroundAlpha();
        double var18 = var11.getRangeCrosshairValue();
        java.lang.String[] var21 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var22 = new org.jfree.chart.axis.SymbolAxis("hi!", var21);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var23 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var25 = var23.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var28 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var29 = var28.getTickLabelPaint();
        var23.setFillPaint(var29, true);
        var22.setGridBandAlternatePaint(var29);
        boolean var33 = var11.isCompatibleDomainAxis(var22);
        var11.setRangeCrosshairLockedOnData(true);
        var1.configure(var11);

    }

    public void test111() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test111"); }


        org.jfree.data.time.DynamicTimeSeriesCollection var2 = new org.jfree.data.time.DynamicTimeSeriesCollection(2, (-1));
        int var4 = var2.offsetFromOldest(51);
        int var5 = var2.getNewestIndex();
        int var6 = var2.getSeriesCount();
        java.lang.Number var9 = var2.getX(252, 1);

    }

    public void test112() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test112"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        boolean var5 = var2.getAntiAlias();
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
        org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
        java.awt.Paint var9 = var8.getZoomOutlinePaint();
        java.awt.geom.Point2D var10 = var8.getAnchor();
        int var11 = var8.getReshowDelay();
        org.jfree.chart.entity.ChartEntity var14 = var8.getEntityForPoint(10, (-13421773));
        boolean var15 = var8.isEnforceFileExtensions();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 500);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);

    }

    public void test113() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test113"); }


        org.jfree.chart.axis.AxisSpace var0 = new org.jfree.chart.axis.AxisSpace();
        double var1 = var0.getBottom();
        double var2 = var0.getTop();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == 0.0d);

    }

    public void test114() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test114"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        boolean var5 = var2.getAntiAlias();
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
        int var7 = var6.getDefaultCloseOperation();
        var6.transferFocusDownCycle();
        java.util.List var9 = var6.getIconImages();
        java.awt.event.WindowStateListener[] var10 = var6.getWindowStateListeners();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

    }

    public void test115() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test115"); }


        org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.chart.renderer.PaintScale var1 = var0.getPaintScale();
        org.jfree.chart.renderer.PaintScale var2 = var0.getPaintScale();
        org.jfree.chart.plot.PolarPlot var3 = new org.jfree.chart.plot.PolarPlot();
        boolean var4 = var3.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var9 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var9.setUpperMargin(10.0d);
        var9.setAxisLineVisible(true);
        javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var15 = var14.getLocation();
        java.awt.Dimension var16 = var14.preferredSize();
        java.awt.Rectangle var17 = var14.bounds();
        java.awt.Point var18 = var3.translateToJava2D(Double.NaN, Double.NaN, var9, var17);
        float var19 = var9.getTickMarkOutsideLength();
        org.jfree.chart.title.PaintScaleLegend var20 = new org.jfree.chart.title.PaintScaleLegend(var2, var9);
        boolean var21 = var9.isVerticalTickLabels();
        org.jfree.chart.plot.Crosshair var22 = new org.jfree.chart.plot.Crosshair();
        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var23 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        java.lang.Boolean var25 = var23.getSeriesLinesVisible(10);
        var23.setUseOutlinePaint(true);
        boolean var28 = var22.equals(true);
        java.awt.Paint var29 = var22.getLabelPaint();
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var36 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var39 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var40 = var39.getItemLabelFont();
        double var41 = var39.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var44 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var45 = var44.getItemLabelFont();
        java.awt.Shape var46 = var44.getBaseLegendShape();
        var39.setShape(var46);
        var36.setLegendBar(var46);
        org.jfree.data.general.DefaultKeyedValues2DDataset var51 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        org.jfree.chart.entity.CategoryItemEntity var54 = new org.jfree.chart.entity.CategoryItemEntity(var46, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", var51, 0.0f, true);
        org.jfree.chart.plot.CombinedRangeXYPlot var55 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var56 = var55.getRangeZeroBaselineStroke();
        org.jfree.chart.plot.CategoryMarker var58 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var59 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var61 = var59.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var64 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var65 = var64.getTickLabelPaint();
        var59.setFillPaint(var65, true);
        var58.setLabelPaint(var65);
        org.jfree.chart.annotations.XYShapeAnnotation var69 = new org.jfree.chart.annotations.XYShapeAnnotation(var46, var56, var65);
        org.jfree.chart.block.BlockBorder var70 = new org.jfree.chart.block.BlockBorder(0.04d, 5.0d, Double.NaN, 0.2d, var65);
        var22.setLabelBackgroundPaint(var65);
        var9.setAdvanceLinePaint(var65);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 2.0f);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var45);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var46);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var56);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var61);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var65);

    }

    public void test116() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test116"); }


        org.jfree.data.xy.MatrixSeriesCollection var0 = new org.jfree.data.xy.MatrixSeriesCollection();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            org.jfree.data.xy.MatrixSeries var2 = var0.getSeries(19);
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }

    }

    public void test117() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test117"); }


        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var6 = var5.getItemLabelFont();
        double var7 = var5.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var11 = var10.getItemLabelFont();
        java.awt.Shape var12 = var10.getBaseLegendShape();
        var5.setShape(var12);
        var2.setLegendBar(var12);
        var2.setDrawBarOutline(true);
        org.jfree.chart.title.LegendTitle var17 = new org.jfree.chart.title.LegendTitle(var2);
        org.jfree.ui.RectangleInsets var18 = var17.getMargin();
        org.jfree.chart.plot.CategoryPlot var19 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var21 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var22 = new org.jfree.data.gantt.Task("hi!", var21);
        org.jfree.data.time.TimePeriodValue var24 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var21, (java.lang.Number)10);
        var19.setDomainCrosshairColumnKey(10);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var26 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var28 = var26.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var31 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var32 = var31.getTickLabelPaint();
        var26.setFillPaint(var32, true);
        var19.setDomainCrosshairPaint(var32);
        org.jfree.chart.block.BlockBorder var36 = new org.jfree.chart.block.BlockBorder(var18, var32);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

    }

    public void test118() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test118"); }


        org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
        var1.clearSeriesPaints(false);
        org.jfree.chart.LegendItem var6 = var1.getLegendItem(15, 2013);
        var1.setShapesVisible((java.lang.Boolean)true);
        java.awt.Paint var10 = var1.getLegendTextPaint(51);
        org.jfree.chart.labels.XYItemLabelGenerator var12 = var1.getSeriesItemLabelGenerator((-13421773));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var12);

    }

    public void test119() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test119"); }


        org.jfree.chart.axis.SubCategoryAxis var1 = new org.jfree.chart.axis.SubCategoryAxis("Combined Range XYPlot");
        var1.setCategoryMargin((-0.21460183660255172d));
        var1.setCategoryLabelPositionOffset(80);

    }

    public void test120() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test120"); }


        org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
        int var2 = var0.getColumnIndex('#');
        int var3 = var0.getColumnCount();
        int var4 = var0.getRowCount();
        java.util.List var5 = var0.getColumnKeys();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

    }

    public void test121() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test121"); }


        org.jfree.chart.title.TextTitle var0 = new org.jfree.chart.title.TextTitle();

    }

    public void test122() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test122"); }


        java.lang.Number[][] var0 = new java.lang.Number[][] { };
        java.lang.Number[][] var1 = new java.lang.Number[][] { };
        org.jfree.data.category.DefaultIntervalCategoryDataset var2 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var0, var1);
        org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", var4);
        int var6 = var2.getColumnIndex(var4);
        org.jfree.data.time.Year var10 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var11 = new org.jfree.data.time.Month(1, var10);
        org.jfree.data.time.RegularTimePeriod var12 = var11.previous();
        long var13 = var11.getSerialIndex();
        org.jfree.data.time.TimeTableXYDataset var14 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var16 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var17 = new org.jfree.data.gantt.Task("hi!", var16);
        var14.remove(var16, 100, false);
        org.jfree.chart.axis.PeriodAxis var21 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", var11, var16);
        java.util.Date var22 = var16.getEnd();
        org.jfree.data.time.Quarter var23 = new org.jfree.data.time.Quarter(var22);
        org.jfree.data.time.Minute var24 = new org.jfree.data.time.Minute();
        int var25 = var24.getMinute();
        org.jfree.data.time.Hour var26 = var24.getHour();
        org.jfree.data.time.Day var27 = var26.getDay();
        org.jfree.data.time.Minute var28 = new org.jfree.data.time.Minute();
        int var29 = var28.getMinute();
        org.jfree.data.time.Hour var30 = var28.getHour();
        org.jfree.data.time.Year var33 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var34 = new org.jfree.data.time.Month(1, var33);
        java.util.Locale var35 = javax.swing.JComponent.getDefaultLocale();
        org.jfree.chart.axis.MonthDateFormat var37 = new org.jfree.chart.axis.MonthDateFormat(var35, 2147483647);
        java.util.Calendar var38 = var37.getCalendar();
        long var39 = var34.getLastMillisecond(var38);
        long var40 = var30.getLastMillisecond(var38);
        long var41 = var27.getLastMillisecond(var38);
        org.jfree.data.DefaultKeyedValue var43 = new org.jfree.data.DefaultKeyedValue(var38, 2147483647);
        var23.peg(var38);
        long var45 = var4.getMiddleMillisecond(var38);

        // Checks the contract:  equals-hashcode on var5 and var17
        assertTrue("Contract failed: equals-hashcode on var5 and var17", var5.equals(var17) ? var5.hashCode() == var17.hashCode() : true);

        // Checks the contract:  equals-hashcode on var17 and var5
        assertTrue("Contract failed: equals-hashcode on var17 and var5", var17.equals(var5) ? var17.hashCode() == var5.hashCode() : true);

    }

    public void test123() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test123"); }


        java.lang.String[] var2 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
        org.jfree.chart.plot.CompassPlot var4 = new org.jfree.chart.plot.CompassPlot();
        boolean var5 = var3.equals(var4);
        java.lang.String var6 = var4.getPlotType();
        java.awt.Paint var7 = var4.getRoseCenterPaint();
        java.awt.Paint var8 = var4.getBackgroundPaint();
        javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var10 = var9.getPreferredSize();
        java.awt.image.ColorModel var11 = var9.getColorModel();
        var9.updateUI();
        java.lang.String var13 = var9.toString();
        boolean var14 = var9.getInheritsPopupMenu();
        javax.swing.InputMap var15 = var9.getInputMap();
        var9.nextFocus();
        boolean var17 = var9.getInheritsPopupMenu();
        javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var19 = var18.getPreferredSize();
        java.awt.image.ColorModel var20 = var18.getColorModel();
        var18.firePropertyChange("", 0.0f, 0.0f);
        java.awt.Color var25 = var18.getForeground();
        var9.setForeground(var25);
        org.jfree.chart.renderer.xy.XYDifferenceRenderer var28 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var8, var25, true);
        org.jfree.chart.LegendItem var31 = var28.getLegendItem(10, 51);
        org.jfree.chart.LegendItem var34 = var28.getLegendItem(252, 1024);
        var28.setSeriesItemLabelsVisible(255, (java.lang.Boolean)false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var6 + "' != '" + "Compass Plot"+ "'", var6.equals("Compass Plot"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var13 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var13.equals("org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var34);

    }

    public void test124() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test124"); }


        org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
        var0.setDomainCrosshairColumnKey(10);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var7 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var9 = var7.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var12 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var13 = var12.getTickLabelPaint();
        var7.setFillPaint(var13, true);
        var0.setDomainCrosshairPaint(var13);
        boolean var17 = var0.isRangeCrosshairLockedOnData();
        org.jfree.chart.util.ShadowGenerator var18 = var0.getShadowGenerator();
        var0.setDomainGridlinesVisible(true);
        var0.configureRangeAxes();
        org.jfree.chart.JFreeChart var22 = new org.jfree.chart.JFreeChart(var0);
        java.lang.Object var23 = var22.getTextAntiAlias();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var23);

    }

    public void test125() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test125"); }


        org.jfree.chart.axis.ColorBar var1 = new org.jfree.chart.axis.ColorBar("hi!?hi!=80&amp;hi!=100");
        java.lang.Object var2 = var1.clone();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

    }

    public void test126() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test126"); }


        org.jfree.chart.plot.CompassPlot var0 = new org.jfree.chart.plot.CompassPlot();
        var0.setDrawBorder(true);
        org.jfree.data.general.ValueDataset[] var3 = var0.getDatasets();
        double var4 = var0.getRevolutionDistance();
        org.jfree.chart.plot.ThermometerPlot var5 = new org.jfree.chart.plot.ThermometerPlot();
        boolean var6 = var5.isDomainZoomable();
        int var7 = var5.getAxisLocation();
        org.jfree.data.general.ValueDataset var8 = var5.getDataset();
        org.jfree.chart.plot.MeterPlot var9 = new org.jfree.chart.plot.MeterPlot(var8);
        java.awt.Paint var10 = var9.getDialOutlinePaint();
        org.jfree.data.general.ValueDataset var11 = var9.getDataset();
        boolean var12 = var0.equals(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 360.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);

    }

    public void test127() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test127"); }


        org.jfree.data.function.NormalDistributionFunction2D var2 = new org.jfree.data.function.NormalDistributionFunction2D(0.0d, 0.2d);
        org.jfree.chart.axis.DateAxis var7 = new org.jfree.chart.axis.DateAxis("0x00000000");
        var7.setVerticalTickLabels(false);
        var7.setMinorTickMarksVisible(true);
        org.jfree.chart.util.RelativeDateFormat var14 = new org.jfree.chart.util.RelativeDateFormat();
        java.lang.Object var15 = var14.clone();
        org.jfree.chart.axis.DateTickUnit var16 = new org.jfree.chart.axis.DateTickUnit(1, 8, var14);
        int var17 = var16.getUnit();
        java.util.Date var18 = var7.calculateLowestVisibleTickValue(var16);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            org.jfree.data.xy.XYDataset var19 = org.jfree.data.general.DatasetUtilities.sampleFunction2D(var2, Double.NEGATIVE_INFINITY, 3.0413664921379274E-65d, (-655360), var18);
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

    }

    public void test128() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test128"); }


        org.jfree.chart.plot.CompassPlot var0 = new org.jfree.chart.plot.CompassPlot();
        var0.setDrawBorder(true);
        org.jfree.chart.plot.Plot var3 = var0.getParent();
        boolean var4 = var0.getDrawBorder();
        org.jfree.chart.plot.ThermometerPlot var5 = new org.jfree.chart.plot.ThermometerPlot();
        boolean var6 = var5.isDomainZoomable();
        int var7 = var5.getAxisLocation();
        org.jfree.data.general.ValueDataset var8 = var5.getDataset();
        org.jfree.chart.plot.MeterPlot var9 = new org.jfree.chart.plot.MeterPlot(var8);
        var0.addDataset(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

    }

    public void test129() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test129"); }


        org.jfree.chart.util.LogFormat var4 = new org.jfree.chart.util.LogFormat(0.0d, "hi!", true);
        javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var6 = var5.getPreferredSize();
        javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var5.setNextFocusableComponent(var7);
        java.util.Locale var9 = var7.getLocale();
        org.jfree.chart.axis.TickUnitSource var10 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var9);
        java.text.NumberFormat var11 = java.text.NumberFormat.getPercentInstance(var9);
        org.jfree.chart.labels.StandardXYItemLabelGenerator var12 = new org.jfree.chart.labels.StandardXYItemLabelGenerator("d", var4, var11);
        java.lang.Object var13 = var12.clone();
        org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var15 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((short)10);
        double var16 = var15.getOutlierCoefficient();
        org.jfree.data.xy.IntervalXYDelegate var17 = new org.jfree.data.xy.IntervalXYDelegate(var15);
        double var18 = var15.getOutlierCoefficient();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.String var21 = var12.generateLabel(var15, 100, 1043495433);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 1.5d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1.5d);

    }

    public void test130() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test130"); }


        org.jfree.chart.annotations.XYLineAnnotation var4 = new org.jfree.chart.annotations.XYLineAnnotation((-1.0d), (-1.0d), 100.0d, 100.0d);
        org.jfree.data.xy.DefaultIntervalXYDataset var5 = new org.jfree.data.xy.DefaultIntervalXYDataset();
        boolean var6 = var4.hasListener(var5);
        int var7 = var5.getSeriesCount();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            double var10 = var5.getEndXValue(52, 51);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);

    }

    public void test131() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test131"); }


        org.jfree.data.time.Year var3 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var4 = new org.jfree.data.time.Month(1, var3);
        org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
        long var6 = var4.getSerialIndex();
        org.jfree.data.time.TimeTableXYDataset var7 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var9 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var10 = new org.jfree.data.gantt.Task("hi!", var9);
        var7.remove(var9, 100, false);
        org.jfree.chart.axis.PeriodAxis var14 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", var4, var9);
        var14.setMinorTickMarksVisible(false);
        org.jfree.data.time.Year var18 = new org.jfree.data.time.Year(100);
        org.jfree.chart.plot.CombinedDomainCategoryPlot var19 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        int var20 = var18.compareTo(var19);
        var14.setFirst(var18);
        float var22 = var14.getMinorTickMarkOutsideLength();
        java.lang.Class var23 = var14.getAutoRangeTimePeriodClass();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1201L);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 2.0f);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

    }

    public void test132() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test132"); }


        org.jfree.chart.plot.DefaultDrawingSupplier var0 = new org.jfree.chart.plot.DefaultDrawingSupplier();
        org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.CategoryMarker var3 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var4 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var6 = var4.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var9 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var10 = var9.getTickLabelPaint();
        var4.setFillPaint(var10, true);
        var3.setLabelPaint(var10);
        var1.setDomainGridlinePaint(var10);
        org.jfree.data.time.Year var18 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var19 = new org.jfree.data.time.Month(1, var18);
        org.jfree.data.time.RegularTimePeriod var20 = var19.previous();
        long var21 = var19.getSerialIndex();
        org.jfree.data.time.TimeTableXYDataset var22 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var24 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var25 = new org.jfree.data.gantt.Task("hi!", var24);
        var22.remove(var24, 100, false);
        org.jfree.chart.axis.PeriodAxis var29 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", var19, var24);
        var29.setMinorTickMarksVisible(false);
        org.jfree.chart.axis.ValueAxis[] var32 = new org.jfree.chart.axis.ValueAxis[] { var29};
        var1.setRangeAxes(var32);
        boolean var34 = var0.equals(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 1201L);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == false);

    }

    public void test133() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test133"); }


        org.jfree.chart.renderer.category.ScatterRenderer var0 = new org.jfree.chart.renderer.category.ScatterRenderer();
        var0.setItemMargin(0.2d);
        boolean var3 = var0.getDrawOutlines();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == false);

    }

    public void test134() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test134"); }


        org.jfree.chart.plot.CombinedRangeCategoryPlot var0 = new org.jfree.chart.plot.CombinedRangeCategoryPlot();
        org.jfree.chart.annotations.CategoryPointerAnnotation var5 = new org.jfree.chart.annotations.CategoryPointerAnnotation("[size=0x00000000]", 1043495433, 0.25d, 100.0d);
        boolean var7 = var0.removeAnnotation(var5, false);
        double var8 = var5.getLabelOffset();
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.LegendItem var12 = var9.getLegendItem(1, 0);
        org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var13 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
        var9.setBaseToolTipGenerator(var13);
        javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var16 = var15.getPreferredSize();
        java.awt.image.ColorModel var17 = var15.getColorModel();
        var15.updateUI();
        java.lang.String var19 = var15.toString();
        boolean var20 = var15.getInheritsPopupMenu();
        double[] var23 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var24 = new org.jfree.chart.annotations.XYPolygonAnnotation(var23);
        java.lang.Object var25 = var24.clone();
        org.jfree.chart.event.AnnotationChangeEvent var26 = new org.jfree.chart.event.AnnotationChangeEvent(var15, var24);
        java.awt.LayoutManager var27 = var15.getLayout();
        javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var29 = var28.getPreferredSize();
        javax.swing.JPanel var30 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var28.setNextFocusableComponent(var30);
        javax.swing.JPanel var32 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var33 = var32.getLocation();
        java.awt.Dimension var34 = var32.preferredSize();
        var28.setSize(var34);
        javax.swing.JPanel var36 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var37 = var36.getPreferredSize();
        java.awt.image.ColorModel var38 = var36.getColorModel();
        var36.firePropertyChange("", 0.0f, 0.0f);
        javax.swing.JPanel var43 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var44 = var43.getLocation();
        java.awt.Point var45 = var36.getLocation(var44);
        var28.add(var36, (-1.0d), 0);
        boolean var49 = var15.isFocusCycleRoot(var28);
        boolean var50 = var13.equals(var28);
        java.awt.Dimension var51 = var28.getMinimumSize();
        boolean var52 = var5.equals(var51);
        var5.setText("SeriesRenderingOrder.REVERSE");
        double var55 = var5.getTipRadius();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 3.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var19 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var19,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var19.equals("org.jfree.chart.ChartPanel[,0,0,0var19,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var34);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var43);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var45);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var51);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == 10.0d);

    }

    public void test135() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test135"); }


        org.jfree.chart.renderer.xy.StackedXYAreaRenderer var0 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
        boolean var1 = var0.isOutline();
        var0.setUseFillPaint(true);
        org.jfree.chart.StandardChartTheme var6 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var7 = var6.getLegendItemPaint();
        var0.setShapePaint(var7);
        double[] var11 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var12 = new org.jfree.chart.annotations.XYPolygonAnnotation(var11);
        java.lang.Object var13 = var12.clone();
        java.awt.Paint var14 = var12.getOutlinePaint();
        var0.setBasePaint(var14);
        org.jfree.chart.plot.DrawingSupplier var16 = var0.getDrawingSupplier();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var16);

    }

    //    public void test136() throws Throwable {
    //
    //        if (debug) { System.out.println(); System.out.print("RandoopTest4.test136"); }
    //
    //
    //        org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
    //        org.jfree.chart.JFreeChart var1 = var0.getPieChart();
    //        org.jfree.chart.plot.dial.DialValueIndicator var2 = new org.jfree.chart.plot.dial.DialValueIndicator();
    //        org.jfree.ui.RectangleInsets var3 = var2.getInsets();
    //        java.awt.Stroke var4 = var2.getOutlineStroke();
    //        javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    //        java.awt.Dimension var6 = var5.getPreferredSize();
    //        javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    //        var5.setNextFocusableComponent(var7);
    //        java.util.Locale var9 = var7.getLocale();
    //        javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    //        java.awt.Dimension var11 = var10.getPreferredSize();
    //        java.awt.Dimension var12 = var7.getSize(var11);
    //        java.awt.event.ContainerListener[] var13 = var7.getContainerListeners();
    //        javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    //        java.awt.Dimension var15 = var14.getPreferredSize();
    //        java.awt.image.ColorModel var16 = var14.getColorModel();
    //        var14.updateUI();
    //        java.lang.String var18 = var14.toString();
    //        java.awt.Color var19 = var14.getForeground();
    //        var7.setBackground(var19);
    //        var2.setOutlinePaint(var19);
    //        javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    //        java.awt.Dimension var23 = var22.getPreferredSize();
    //        javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    //        var22.setNextFocusableComponent(var24);
    //        java.util.Locale var26 = var24.getLocale();
    //        javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    //        java.awt.Dimension var28 = var27.getPreferredSize();
    //        java.awt.Dimension var29 = var24.getSize(var28);
    //        java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
    //        javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
    //        java.awt.Dimension var32 = var31.getPreferredSize();
    //        java.awt.image.ColorModel var33 = var31.getColorModel();
    //        var31.updateUI();
    //        java.lang.String var35 = var31.toString();
    //        java.awt.Color var36 = var31.getForeground();
    //        var24.setBackground(var36);
    //        var2.setOutlinePaint(var36);
    //        var1.setBorderPaint(var36);
    //        org.jfree.chart.plot.CategoryPlot var40 = new org.jfree.chart.plot.CategoryPlot();
    //        org.jfree.data.time.Week var42 = new org.jfree.data.time.Week();
    //        org.jfree.data.gantt.Task var43 = new org.jfree.data.gantt.Task("hi!", var42);
    //        org.jfree.data.time.TimePeriodValue var45 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var42, (java.lang.Number)10);
    //        var40.setDomainCrosshairColumnKey(10);
    //        boolean var47 = var40.getDrawSharedDomainAxis();
    //        boolean var48 = var40.getDrawSharedDomainAxis();
    //        var40.clearRangeMarkers(0);
    //        org.jfree.chart.plot.CombinedRangeXYPlot var51 = new org.jfree.chart.plot.CombinedRangeXYPlot();
    //        var40.addChangeListener(var51);
    //        org.jfree.chart.event.PlotChangeEvent var53 = new org.jfree.chart.event.PlotChangeEvent(var51);
    //        org.jfree.chart.plot.Plot var54 = var53.getPlot();
    //        var1.plotChanged(var53);
    //        java.awt.image.BufferedImage var58 = var1.createBufferedImage(10, 750);
    //        // The following exception was thrown during execution.
    //        // This behavior will recorded for regression testing.
    //        try {
    //            byte[] var61 = org.jfree.chart.encoders.EncoderUtil.encode(var58, "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0f));
    //            fail("Expected exception of type java.lang.IllegalArgumentException");
    //        } catch (java.lang.IllegalArgumentException e) {
    //            // Expected exception.
    //        }
    //
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var1);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var3);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var4);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var5);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var6);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var7);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var9);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var10);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var11);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var12);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var13);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var14);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var15);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var16);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertTrue("'" + var18 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var18.equals("org.jfree.chart.ChartPanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var19);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var22);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var23);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var24);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var26);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var27);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var28);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var29);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var30);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var31);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var32);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var33);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var36);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertTrue(var47 == false);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertTrue(var48 == false);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var54);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var58);
    //
    //    }

    public void test137() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test137"); }


        javax.swing.JPanel var1 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var2 = var1.getPreferredSize();
        java.awt.image.ColorModel var3 = var1.getColorModel();
        var1.updateUI();
        org.jfree.chart.annotations.CategoryTextAnnotation var8 = new org.jfree.chart.annotations.CategoryTextAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (short)1, 0.05d);
        org.jfree.chart.StandardChartTheme var11 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var12 = var11.getLegendItemPaint();
        java.awt.Paint var13 = var11.getSubtitlePaint();
        java.awt.Font var14 = var11.getLargeFont();
        java.awt.Paint var15 = var11.getWallPaint();
        org.jfree.chart.title.TextTitle var17 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var18 = var17.isVisible();
        java.lang.Object var19 = var17.clone();
        var17.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
        double var25 = var17.getWidth();
        java.awt.Paint var26 = var17.getBackgroundPaint();
        org.jfree.ui.HorizontalAlignment var27 = var17.getHorizontalAlignment();
        org.jfree.chart.plot.CategoryMarker var29 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var30 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var32 = var30.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var35 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var36 = var35.getTickLabelPaint();
        var30.setFillPaint(var36, true);
        var29.setLabelPaint(var36);
        org.jfree.chart.plot.CompassPlot var40 = new org.jfree.chart.plot.CompassPlot();
        var29.addChangeListener(var40);
        org.jfree.chart.StandardChartTheme var44 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var45 = var44.getLegendItemPaint();
        java.awt.Paint var46 = var44.getSubtitlePaint();
        java.awt.Font var47 = var44.getLargeFont();
        var40.setLabelFont(var47);
        var17.setFont(var47);
        var11.setRegularFont(var47);
        var8.setFont(var47);
        var1.setFont(var47);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var57 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var59 = var57.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var62 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var63 = var62.getTickLabelPaint();
        var57.setFillPaint(var63, true);
        org.jfree.chart.block.BlockBorder var66 = new org.jfree.chart.block.BlockBorder(10.0d, 100.0d, 1.0d, 100.0d, var63);
        org.jfree.chart.block.LabelBlock var67 = new org.jfree.chart.block.LabelBlock("E", var47, var63);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var45);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var46);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var47);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var59);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var63);

    }

    public void test138() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test138"); }


        org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
        var0.setDomainCrosshairColumnKey(10);
        boolean var7 = var0.getDrawSharedDomainAxis();
        boolean var8 = var0.getDrawSharedDomainAxis();
        var0.clearRangeMarkers(0);
        org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var0.addChangeListener(var11);
        org.jfree.chart.plot.CategoryPlot var13 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var15 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var16 = new org.jfree.data.gantt.Task("hi!", var15);
        org.jfree.data.time.TimePeriodValue var18 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var15, (java.lang.Number)10);
        var13.setDomainCrosshairColumnKey(10);
        boolean var20 = var13.getDrawSharedDomainAxis();
        boolean var21 = var13.isDomainPannable();
        org.jfree.chart.axis.AxisLocation var23 = var13.getRangeAxisLocation(5);
        var11.setDomainAxisLocation(var23);

        // Checks the contract:  equals-hashcode on var0 and var13
        assertTrue("Contract failed: equals-hashcode on var0 and var13", var0.equals(var13) ? var0.hashCode() == var13.hashCode() : true);

        // Checks the contract:  equals-hashcode on var13 and var0
        assertTrue("Contract failed: equals-hashcode on var13 and var0", var13.equals(var0) ? var13.hashCode() == var0.hashCode() : true);

        // Checks the contract:  equals-hashcode on var3 and var16
        assertTrue("Contract failed: equals-hashcode on var3 and var16", var3.equals(var16) ? var3.hashCode() == var16.hashCode() : true);

        // Checks the contract:  equals-hashcode on var16 and var3
        assertTrue("Contract failed: equals-hashcode on var16 and var3", var16.equals(var3) ? var16.hashCode() == var3.hashCode() : true);

    }

    public void test139() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test139"); }


        org.jfree.chart.renderer.xy.StackedXYAreaRenderer2 var0 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer2();
        int var1 = var0.getPassCount();
        int var2 = var0.getPassCount();
        org.jfree.chart.LegendItem var5 = var0.getLegendItem(750, 2013);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

    }

    public void test140() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test140"); }


        org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var3 = var2.getItemLabelFont();
        java.awt.Shape var4 = var2.getBaseLegendShape();
        double var5 = var2.getItemMargin();
        org.jfree.chart.LegendItemCollection var6 = var2.getLegendItems();
        int var7 = var6.getItemCount();
        java.lang.String[] var11 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var12 = new org.jfree.chart.axis.SymbolAxis("hi!", var11);
        org.jfree.chart.plot.CompassPlot var13 = new org.jfree.chart.plot.CompassPlot();
        boolean var14 = var12.equals(var13);
        java.lang.String var15 = var13.getPlotType();
        java.awt.Paint var16 = var13.getRoseCenterPaint();
        org.jfree.chart.LegendItem var17 = new org.jfree.chart.LegendItem("0x00000001", var16);
        org.jfree.data.general.Dataset var18 = var17.getDataset();
        var6.add(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0.2d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var15 + "' != '" + "Compass Plot"+ "'", var15.equals("Compass Plot"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var18);

    }

    public void test141() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test141"); }


        org.jfree.chart.renderer.OutlierListCollection var0 = new org.jfree.chart.renderer.OutlierListCollection();
        var0.setHighFarOut(true);

    }

    public void test142() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test142"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
        java.lang.String var2 = var0.getPlotType();
        org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis("0x00000000");
        boolean var7 = var5.isHiddenValue(0L);
        org.jfree.chart.title.TextTitle var10 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var11 = var10.isVisible();
        java.lang.Object var12 = var10.clone();
        var10.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
        double var18 = var10.getWidth();
        javax.swing.JPanel var19 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var20 = var19.getLocation();
        org.jfree.chart.plot.PolarPlot var21 = new org.jfree.chart.plot.PolarPlot();
        boolean var22 = var21.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var27 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var27.setUpperMargin(10.0d);
        var27.setAxisLineVisible(true);
        javax.swing.JPanel var32 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var33 = var32.getLocation();
        java.awt.Dimension var34 = var32.preferredSize();
        java.awt.Rectangle var35 = var32.bounds();
        java.awt.Point var36 = var21.translateToJava2D(Double.NaN, Double.NaN, var27, var35);
        java.awt.Rectangle var37 = var19.getBounds(var35);
        var10.setBounds(var37);
        org.jfree.chart.title.TextTitle var40 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var41 = var40.isVisible();
        java.lang.Object var42 = var40.clone();
        org.jfree.ui.RectangleEdge var43 = var40.getPosition();
        double var44 = var5.valueToJava2D(5.0d, var37, var43);
        var5.setTickMarksVisible(true);
        org.jfree.chart.axis.DateTickUnit var47 = var5.getTickUnit();
        var0.setDomainAxis(10, var5);
        org.jfree.chart.util.RelativeDateFormat var51 = new org.jfree.chart.util.RelativeDateFormat();
        java.lang.Object var52 = var51.clone();
        org.jfree.chart.axis.DateTickUnit var53 = new org.jfree.chart.axis.DateTickUnit(1, 8, var51);
        int var54 = var53.getUnit();
        java.util.Date var55 = var5.calculateLowestVisibleTickValue(var53);
        org.jfree.chart.renderer.xy.XYBlockRenderer var56 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.data.xy.CategoryTableXYDataset var57 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var58 = var56.findDomainBounds(var57);
        java.lang.Number var59 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue(var57);
        var57.add(100.0d, Double.NaN, "jfreechart-onetime-");
        org.jfree.data.Range var64 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(var57);
        var5.setDefaultAutoRange(var64);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var34);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var42);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var43);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var47);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var52);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var55);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var58);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var59 + "' != '" + Double.NaN+ "'", var59.equals(Double.NaN));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var64);

    }

    public void test143() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test143"); }


        org.jfree.data.time.Year var1 = new org.jfree.data.time.Year();
        org.jfree.data.gantt.Task var2 = new org.jfree.data.gantt.Task("item", var1);
        org.jfree.chart.axis.CyclicNumberAxis var5 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        boolean var6 = var5.isAxisLineVisible();
        var5.setAxisLineVisible(true);
        var5.setMinorTickMarksVisible(true);
        org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot(var5);
        int var12 = var1.compareTo(var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 1);

    }

    public void test144() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test144"); }


        org.jfree.data.general.WaferMapDataset var3 = new org.jfree.data.general.WaferMapDataset(2, 15, 5.0d);
        org.jfree.chart.renderer.WaferMapRenderer var6 = new org.jfree.chart.renderer.WaferMapRenderer(100, 2);
        org.jfree.chart.plot.WaferMapPlot var7 = new org.jfree.chart.plot.WaferMapPlot(var3, var6);
        org.jfree.data.time.TimeTableXYDataset var8 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var10 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var11 = new org.jfree.data.gantt.Task("hi!", var10);
        var8.remove(var10, 100, false);
        org.jfree.data.xy.XYBarDataset var16 = new org.jfree.data.xy.XYBarDataset(var8, Double.NaN);
        org.jfree.chart.event.RendererChangeEvent var17 = new org.jfree.chart.event.RendererChangeEvent(var16);
        var7.rendererChanged(var17);
        org.jfree.chart.renderer.WaferMapRenderer var21 = new org.jfree.chart.renderer.WaferMapRenderer(100, 2);
        org.jfree.chart.plot.DrawingSupplier var22 = var21.getDrawingSupplier();
        var7.setRenderer(var21);
        org.jfree.data.general.WaferMapDataset var24 = var7.getDataset();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

    }

    public void test145() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test145"); }


        org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var2 = var0.findDomainBounds(var1);
        java.lang.Object var3 = var1.clone();
        var1.setIntervalWidth(0.75d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

    }

    public void test146() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test146"); }


        org.jfree.data.time.TimeTableXYDataset var0 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        var0.remove(var2, 100, false);
        org.jfree.data.xy.XYBarDataset var8 = new org.jfree.data.xy.XYBarDataset(var0, Double.NaN);
        org.jfree.chart.event.RendererChangeEvent var9 = new org.jfree.chart.event.RendererChangeEvent(var8);
        java.lang.Object var10 = var8.clone();
        org.jfree.data.general.DefaultKeyedValues2DDataset var11 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var11.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        org.jfree.data.Range var16 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(var11);
        org.jfree.data.Range var18 = org.jfree.data.Range.shift(var16, (-1.0d));
        org.jfree.data.Range var20 = org.jfree.data.Range.scale(var18, 100.0d);
        org.jfree.data.general.DefaultKeyedValues2DDataset var21 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var21.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        org.jfree.data.Range var26 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(var21);
        org.jfree.data.Range var28 = org.jfree.data.Range.shift(var26, (-1.0d));
        org.jfree.data.Range var30 = org.jfree.data.Range.scale(var28, 100.0d);
        boolean var31 = var20.intersects(var30);
        org.jfree.data.Range var33 = org.jfree.data.Range.shift(var30, (-1.0d));
        boolean var36 = var30.intersects(Double.NaN, 3.0d);
        java.lang.String var37 = var30.toString();
        boolean var38 = var8.equals(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var37 + "' != '" + "Range[0.0,0.0]"+ "'", var37.equals("Range[0.0,0.0]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);

    }

    public void test147() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test147"); }


        org.jfree.chart.renderer.xy.XYAreaRenderer2 var0 = new org.jfree.chart.renderer.xy.XYAreaRenderer2();
        boolean var1 = var0.getPlotLines();
        org.jfree.chart.ChartRenderingInfo var4 = new org.jfree.chart.ChartRenderingInfo();
        org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator var5 = new org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator();
        org.jfree.chart.imagemap.StandardURLTagFragmentGenerator var6 = new org.jfree.chart.imagemap.StandardURLTagFragmentGenerator();
        java.lang.String var7 = org.jfree.chart.imagemap.ImageMapUtilities.getImageMap("org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]", var4, var5, var6);
        org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator var8 = new org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator();
        org.jfree.chart.imagemap.StandardURLTagFragmentGenerator var9 = new org.jfree.chart.imagemap.StandardURLTagFragmentGenerator();
        java.lang.String var10 = org.jfree.chart.imagemap.ImageMapUtilities.getImageMap("CategoryAnchor.MIDDLE", var4, var8, var9);
        java.awt.geom.Rectangle2D var11 = var4.getChartArea();
        var0.setLegendArea(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var7 + "' != '" + "<map id=\"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]\" name=\"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]\">\r\n</map>"+ "'", var7.equals("<map id=\"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]\" name=\"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0var7,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]\">\r\n</map>"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var10 + "' != '" + "<map id=\"CategoryAnchor.MIDDLE\" name=\"CategoryAnchor.MIDDLE\">\r\n</map>"+ "'", var10.equals("<map id=\"CategoryAnchor.MIDDLE\" name=\"CategoryAnchor.MIDDLE\">\r\n</map>"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

    }

    public void test148() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test148"); }


        javax.swing.JPanel var1 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var2 = var1.getPreferredSize();
        javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var1.setNextFocusableComponent(var3);
        java.util.Locale var5 = var3.getLocale();
        org.jfree.chart.axis.TickUnitSource var6 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var5);
        java.text.NumberFormat var7 = java.text.NumberFormat.getPercentInstance(var5);
        org.jfree.chart.axis.TickUnitSource var8 = org.jfree.chart.axis.NumberAxis.createIntegerTickUnits(var5);
        org.jfree.chart.StandardChartTheme var11 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        org.jfree.chart.plot.DrawingSupplier var12 = var11.getDrawingSupplier();
        org.jfree.chart.plot.dial.StandardDialScale var13 = new org.jfree.chart.plot.dial.StandardDialScale();
        var13.setMajorTickIncrement(10.0d);
        java.awt.Paint var16 = var13.getMinorTickPaint();
        var11.setTickLabelPaint(var16);
        java.awt.Font var18 = var11.getSmallFont();
        org.jfree.chart.renderer.xy.StackedXYBarRenderer var19 = new org.jfree.chart.renderer.xy.StackedXYBarRenderer();
        javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var21 = var20.getPreferredSize();
        java.awt.image.ColorModel var22 = var20.getColorModel();
        var20.updateUI();
        java.lang.String var24 = var20.toString();
        var20.setFocusable(true);
        boolean var27 = var19.equals(var20);
        java.awt.Paint var29 = var19.lookupSeriesOutlinePaint((-1));
        org.jfree.chart.title.DateTitle var30 = new org.jfree.chart.title.DateTitle(2, var5, var18, var29);
        javax.swing.JPanel var32 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var33 = var32.getPreferredSize();
        javax.swing.JPanel var34 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var32.setNextFocusableComponent(var34);
        java.util.Locale var36 = var34.getLocale();
        org.jfree.chart.axis.TickUnitSource var37 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var36);
        java.text.NumberFormat var38 = java.text.NumberFormat.getPercentInstance(var36);
        org.jfree.chart.axis.TickUnitSource var39 = org.jfree.chart.axis.NumberAxis.createIntegerTickUnits(var36);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var30.setDateFormat(20, var36);
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var24 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var24,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var24.equals("org.jfree.chart.ChartPanel[,0,0,0var24,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var34);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

    }

    public void test149() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test149"); }


        org.jfree.data.time.Minute var0 = new org.jfree.data.time.Minute();
        int var1 = var0.getMinute();
        org.jfree.data.time.Hour var2 = var0.getHour();
        int var3 = var2.getHour();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 22);

    }

    public void test150() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test150"); }


        org.jfree.chart.plot.CombinedDomainCategoryPlot var0 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        double var1 = var0.getAnchorValue();
        org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", var4);
        org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
        var2.setDomainCrosshairColumnKey(10);
        boolean var9 = var2.getDrawSharedDomainAxis();
        boolean var10 = var2.getDrawSharedDomainAxis();
        var2.clearRangeMarkers(0);
        org.jfree.chart.plot.CombinedRangeXYPlot var13 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var2.addChangeListener(var13);
        org.jfree.chart.event.PlotChangeEvent var15 = new org.jfree.chart.event.PlotChangeEvent(var13);
        org.jfree.chart.plot.Plot var16 = var15.getPlot();
        var0.plotChanged(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

    }

    public void test151() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test151"); }


        org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
        var0.setShadowXOffset(0.25d);
        var0.setSimpleLabels(false);

    }

    public void test152() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test152"); }


        org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
        org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var8 = var7.getItemLabelFont();
        java.awt.Shape var9 = var7.getBaseLegendShape();
        org.jfree.chart.entity.ContourEntity var11 = new org.jfree.chart.entity.ContourEntity(var9, "hi!?hi!=100&amp;hi!=1");
        org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var14 = var13.isVisible();
        java.lang.Object var15 = var13.clone();
        java.lang.String var16 = var13.getURLText();
        javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var18 = var17.getPreferredSize();
        java.awt.image.ColorModel var19 = var17.getColorModel();
        var17.updateUI();
        java.lang.String var21 = var17.toString();
        java.awt.Color var22 = var17.getForeground();
        var13.setBackgroundPaint(var22);
        int var24 = var22.getRGB();
        int var25 = var22.getBlue();
        org.jfree.chart.plot.dial.DialPlot var26 = new org.jfree.chart.plot.dial.DialPlot();
        org.jfree.chart.plot.dial.StandardDialScale var27 = new org.jfree.chart.plot.dial.StandardDialScale();
        int var28 = var26.getLayerIndex(var27);
        org.jfree.chart.plot.dial.DialValueIndicator var29 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var30 = var29.getInsets();
        int var31 = var26.getLayerIndex(var29);
        java.awt.Stroke var32 = var29.getOutlineStroke();
        org.jfree.chart.title.TextTitle var34 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var35 = var34.isVisible();
        java.lang.Object var36 = var34.clone();
        java.lang.String var37 = var34.getURLText();
        javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var39 = var38.getPreferredSize();
        java.awt.image.ColorModel var40 = var38.getColorModel();
        var38.updateUI();
        java.lang.String var42 = var38.toString();
        java.awt.Color var43 = var38.getForeground();
        var34.setBackgroundPaint(var43);
        org.jfree.chart.LegendItem var45 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var9, var22, var32, var43);
        var0.setBaseSectionOutlinePaint(var22);
        org.jfree.chart.labels.PieSectionLabelGenerator var47 = var0.getLegendLabelToolTipGenerator();
        org.jfree.chart.LegendItemCollection var48 = var0.getLegendItems();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == (-13421773));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 51);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var43);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var47);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var48);

    }

    public void test153() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test153"); }


        org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var1 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((short)10);
        double var2 = var1.getOutlierCoefficient();
        org.jfree.data.xy.IntervalXYDelegate var3 = new org.jfree.data.xy.IntervalXYDelegate(var1);
        org.jfree.data.Range var5 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds(var1, false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == 1.5d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

    }

    public void test154() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test154"); }


        org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis("0x00000000");
        boolean var3 = var1.isHiddenValue(0L);
        org.jfree.chart.title.TextTitle var6 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var7 = var6.isVisible();
        java.lang.Object var8 = var6.clone();
        var6.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
        double var14 = var6.getWidth();
        javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var16 = var15.getLocation();
        org.jfree.chart.plot.PolarPlot var17 = new org.jfree.chart.plot.PolarPlot();
        boolean var18 = var17.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var23 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var23.setUpperMargin(10.0d);
        var23.setAxisLineVisible(true);
        javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var29 = var28.getLocation();
        java.awt.Dimension var30 = var28.preferredSize();
        java.awt.Rectangle var31 = var28.bounds();
        java.awt.Point var32 = var17.translateToJava2D(Double.NaN, Double.NaN, var23, var31);
        java.awt.Rectangle var33 = var15.getBounds(var31);
        var6.setBounds(var33);
        org.jfree.chart.title.TextTitle var36 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var37 = var36.isVisible();
        java.lang.Object var38 = var36.clone();
        org.jfree.ui.RectangleEdge var39 = var36.getPosition();
        double var40 = var1.valueToJava2D(5.0d, var33, var39);
        var1.setTickMarksVisible(true);
        org.jfree.chart.axis.DateTickUnit var43 = var1.getTickUnit();
        var1.zoomRange((-170.0d), 1.05d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var43);

    }

    public void test155() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test155"); }


        org.jfree.chart.plot.dial.StandardDialFrame var0 = new org.jfree.chart.plot.dial.StandardDialFrame();
        var0.setRadius(180.0d);
        java.lang.Object var3 = var0.clone();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

    }

    public void test156() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test156"); }


        org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
        org.jfree.data.time.RegularTimePeriod var1 = var0.next();
        org.jfree.data.time.Minute var2 = var0.getMinute();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

    }

    public void test157() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test157"); }


        org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
        java.awt.Stroke var2 = var0.getSectionOutlineStroke((-334));
        boolean var3 = var0.getSimpleLabels();
        org.jfree.chart.plot.AbstractPieLabelDistributor var4 = var0.getLabelDistributor();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            org.jfree.chart.plot.PieLabelRecord var6 = var4.getPieLabelRecord(80);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

    }

    public void test158() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test158"); }


        org.jfree.data.time.ohlc.OHLCSeriesCollection var0 = new org.jfree.data.time.ohlc.OHLCSeriesCollection();
        org.jfree.data.time.TimePeriodAnchor var1 = var0.getXPosition();
        org.jfree.chart.util.LogFormat var7 = new org.jfree.chart.util.LogFormat(0.0d, "hi!", true);
        javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var9 = var8.getPreferredSize();
        javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var8.setNextFocusableComponent(var10);
        java.util.Locale var12 = var10.getLocale();
        org.jfree.chart.axis.TickUnitSource var13 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var12);
        java.text.NumberFormat var14 = java.text.NumberFormat.getPercentInstance(var12);
        org.jfree.chart.labels.StandardXYItemLabelGenerator var15 = new org.jfree.chart.labels.StandardXYItemLabelGenerator("d", var7, var14);
        org.jfree.chart.axis.NumberTickUnit var16 = new org.jfree.chart.axis.NumberTickUnit(0.04d, var7);
        int var17 = var0.indexOf(0.04d);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.removeSeries(2147483647);
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == (-1));

    }

    public void test159() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test159"); }


        org.jfree.data.xy.XIntervalSeriesCollection var0 = new org.jfree.data.xy.XIntervalSeriesCollection();
        org.jfree.data.xy.XIntervalSeries var2 = new org.jfree.data.xy.XIntervalSeries(1201L);
        var0.addSeries(var2);
        org.jfree.data.general.SeriesDataset[] var4 = new org.jfree.data.general.SeriesDataset[] { var0};
        org.jfree.data.general.CombinedDataset var5 = new org.jfree.data.general.CombinedDataset(var4);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Comparable var7 = var5.getSeriesKey(19);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

    }

    public void test160() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test160"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var0.setNextFocusableComponent(var2);
        var0.show();
        javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var6 = var5.getLocation();
        java.awt.Dimension var7 = var5.preferredSize();
        java.awt.Rectangle var8 = var5.bounds();
        var0.scrollRectToVisible(var8);
        javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var12 = var11.getPreferredSize();
        boolean var13 = var11.getIgnoreRepaint();
        org.jfree.chart.plot.ContourPlot var15 = new org.jfree.chart.plot.ContourPlot();
        var15.setOutlineVisible(false);
        var11.addPropertyChangeListener("Combined Range XYPlot", var15);
        org.jfree.chart.urls.XYURLGenerator var19 = var15.getURLGenerator();
        var0.addPropertyChangeListener("hi!", var15);
        int var21 = var0.getHeight();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 0);

    }

    public void test161() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test161"); }


        org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
        int var2 = var0.getRowIndex((-170.0d));
        org.jfree.chart.axis.CategoryLabelPositions var4 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
        org.jfree.chart.plot.CategoryPlot var5 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var7 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var8 = new org.jfree.data.gantt.Task("hi!", var7);
        org.jfree.data.time.TimePeriodValue var10 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var7, (java.lang.Number)10);
        var5.setDomainCrosshairColumnKey(10);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var12 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var14 = var12.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var17 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var18 = var17.getTickLabelPaint();
        var12.setFillPaint(var18, true);
        var5.setDomainCrosshairPaint(var18);
        boolean var22 = var4.equals(var5);
        org.jfree.ui.RectangleEdge var23 = var5.getRangeAxisEdge();
        org.jfree.chart.axis.SubCategoryAxis var25 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
        int var26 = var5.getDomainAxisIndex(var25);
        java.awt.Paint var27 = var25.getSubLabelPaint();
        org.jfree.chart.axis.CyclicNumberAxis var30 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        boolean var31 = var30.isAxisLineVisible();
        var30.setAxisLineVisible(true);
        org.jfree.chart.axis.CyclicNumberAxis var36 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var37 = var36.getTickLabelPaint();
        var30.setTickMarkPaint(var37);
        org.jfree.chart.renderer.category.DefaultCategoryItemRenderer var39 = new org.jfree.chart.renderer.category.DefaultCategoryItemRenderer();
        org.jfree.chart.urls.CategoryURLGenerator var41 = var39.getSeriesItemURLGenerator(2147483647);
        boolean var42 = var39.getBaseShapesVisible();
        java.lang.String[] var45 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var46 = new org.jfree.chart.axis.SymbolAxis("hi!", var45);
        org.jfree.chart.renderer.category.BarRenderer3D var49 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var50 = var49.getItemLabelFont();
        double var51 = var49.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var54 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var55 = var54.getItemLabelFont();
        java.awt.Shape var56 = var54.getBaseLegendShape();
        var49.setShape(var56);
        var46.setDownArrow(var56);
        javax.swing.JPanel var59 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var60 = var59.getPreferredSize();
        java.awt.image.ColorModel var61 = var59.getColorModel();
        var59.updateUI();
        java.lang.String var63 = var59.toString();
        boolean var64 = var59.getInheritsPopupMenu();
        javax.swing.InputMap var65 = var59.getInputMap();
        var59.nextFocus();
        boolean var67 = var59.getInheritsPopupMenu();
        javax.swing.JPanel var68 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var69 = var68.getPreferredSize();
        java.awt.image.ColorModel var70 = var68.getColorModel();
        var68.firePropertyChange("", 0.0f, 0.0f);
        java.awt.Color var75 = var68.getForeground();
        var59.setForeground(var75);
        var46.setGridBandAlternatePaint(var75);
        var39.setBaseItemLabelPaint(var75, false);
        org.jfree.chart.plot.CategoryPlot var80 = new org.jfree.chart.plot.CategoryPlot(var0, var25, var30, var39);
        org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var85 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
        java.lang.Object var86 = var85.clone();
        org.jfree.chart.urls.TimeSeriesURLGenerator var87 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
        org.jfree.chart.renderer.xy.XYStepAreaRenderer var88 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, var85, var87);
        org.jfree.chart.renderer.xy.StandardXYItemRenderer var89 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, var85);
        java.text.NumberFormat var90 = var85.getYFormat();
        org.jfree.chart.labels.StandardCategoryToolTipGenerator var91 = new org.jfree.chart.labels.StandardCategoryToolTipGenerator("jfreechart-", var90);
        org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator var92 = new org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator("org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]", var90);
        boolean var93 = var0.equals(var92);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Comparable var95 = var0.getRowKey(252);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var41);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var45);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var50);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var55);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var56);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var59);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var60);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var61);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var63 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var63,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var63.equals("org.jfree.chart.ChartPanel[,0,0,0var63,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var65);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var68);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var69);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var70);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var75);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var86);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var90);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var93 == false);

    }

    public void test162() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test162"); }


        org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
        var0.setDomainCrosshairColumnKey(10);
        org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
        java.lang.Comparable var8 = var7.getDomainCrosshairColumnKey();
        var7.setCrosshairDatasetIndex(100);
        org.jfree.chart.axis.CategoryAnchor var11 = var7.getDomainGridlinePosition();
        var0.setDomainGridlinePosition(var11);
        org.jfree.chart.ChartRenderingInfo var14 = new org.jfree.chart.ChartRenderingInfo();
        org.jfree.chart.entity.EntityCollection var15 = var14.getEntityCollection();
        org.jfree.chart.plot.PlotRenderingInfo var16 = new org.jfree.chart.plot.PlotRenderingInfo(var14);
        org.jfree.chart.needle.LongNeedle var17 = new org.jfree.chart.needle.LongNeedle();
        javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var19 = var18.getPreferredSize();
        java.awt.image.ColorModel var20 = var18.getColorModel();
        var18.firePropertyChange("", 0.0f, 0.0f);
        javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var26 = var25.getLocation();
        java.awt.Point var27 = var18.getLocation(var26);
        boolean var28 = var17.equals(var26);
        var0.panRangeAxes(5.0d, var16, var26);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);

    }

    public void test163() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test163"); }


        org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(1.0d);
        org.jfree.chart.axis.CategoryLabelPositions var3 = org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(100.0d);
        org.jfree.chart.title.TextTitle var5 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var6 = var5.isVisible();
        java.lang.Object var7 = var5.clone();
        org.jfree.ui.RectangleEdge var8 = var5.getPosition();
        org.jfree.chart.axis.CategoryLabelPosition var9 = var3.getLabelPosition(var8);
        org.jfree.chart.axis.CategoryLabelPositions var11 = org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(100.0d);
        org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var14 = var13.isVisible();
        java.lang.Object var15 = var13.clone();
        org.jfree.ui.RectangleEdge var16 = var13.getPosition();
        org.jfree.chart.axis.CategoryLabelPosition var17 = var11.getLabelPosition(var16);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var18 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        boolean var19 = var17.equals(var18);
        org.jfree.chart.axis.CategoryLabelWidthType var20 = var17.getWidthType();
        org.jfree.text.TextBlockAnchor var21 = var17.getLabelAnchor();
        org.jfree.chart.axis.CategoryLabelPositions var22 = org.jfree.chart.axis.CategoryLabelPositions.replaceBottomPosition(var3, var17);
        org.jfree.chart.axis.CategoryLabelPositions var23 = org.jfree.chart.axis.CategoryLabelPositions.replaceLeftPosition(var1, var17);
        org.jfree.chart.axis.CategoryLabelPositions var25 = org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(100.0d);
        org.jfree.chart.title.TextTitle var27 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var28 = var27.isVisible();
        java.lang.Object var29 = var27.clone();
        org.jfree.ui.RectangleEdge var30 = var27.getPosition();
        org.jfree.chart.axis.CategoryLabelPosition var31 = var25.getLabelPosition(var30);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var32 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        boolean var33 = var31.equals(var32);
        org.jfree.chart.axis.CategoryLabelWidthType var34 = var31.getWidthType();
        org.jfree.text.TextBlockAnchor var35 = var31.getLabelAnchor();
        org.jfree.chart.axis.CategoryLabelPositions var36 = org.jfree.chart.axis.CategoryLabelPositions.replaceRightPosition(var1, var31);
        org.jfree.chart.axis.CategoryLabelPositions var38 = org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(100.0d);
        org.jfree.chart.title.TextTitle var40 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var41 = var40.isVisible();
        java.lang.Object var42 = var40.clone();
        org.jfree.ui.RectangleEdge var43 = var40.getPosition();
        org.jfree.chart.axis.CategoryLabelPosition var44 = var38.getLabelPosition(var43);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var45 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        boolean var46 = var44.equals(var45);
        org.jfree.chart.axis.CategoryLabelWidthType var47 = var44.getWidthType();
        org.jfree.text.TextBlockAnchor var48 = var44.getLabelAnchor();
        org.jfree.chart.axis.CategoryLabelWidthType var49 = var44.getWidthType();
        org.jfree.chart.axis.CategoryLabelPositions var50 = org.jfree.chart.axis.CategoryLabelPositions.replaceRightPosition(var1, var44);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var34);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var42);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var43);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var47);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var48);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var49);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var50);

    }

    public void test164() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test164"); }


        org.jfree.chart.renderer.category.LevelRenderer var0 = new org.jfree.chart.renderer.category.LevelRenderer();
        double var1 = var0.getItemMargin();
        org.jfree.chart.StrokeMap var2 = new org.jfree.chart.StrokeMap();
        java.lang.Object var3 = var2.clone();
        boolean var4 = var0.equals(var2);
        var0.setItemLabelAnchorOffset(4.0d);
        var0.clearSeriesPaints(false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0.2d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == false);

    }

    public void test165() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test165"); }


        org.jfree.chart.util.LogFormat var5 = new org.jfree.chart.util.LogFormat(0.0d, "hi!", true);
        javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var7 = var6.getPreferredSize();
        javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var6.setNextFocusableComponent(var8);
        java.util.Locale var10 = var8.getLocale();
        org.jfree.chart.axis.TickUnitSource var11 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var10);
        java.text.NumberFormat var12 = java.text.NumberFormat.getPercentInstance(var10);
        org.jfree.chart.labels.StandardXYItemLabelGenerator var13 = new org.jfree.chart.labels.StandardXYItemLabelGenerator("d", var5, var12);
        org.jfree.chart.axis.NumberTickUnit var14 = new org.jfree.chart.axis.NumberTickUnit(0.04d, var5);
        int var15 = var14.getMinorTickCount();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0);

    }

    public void test166() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test166"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        boolean var5 = var2.getAntiAlias();
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
        org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
        var2.setAntiAlias(false);
        org.jfree.chart.ChartTransferable var18 = new org.jfree.chart.ChartTransferable(var2, (-655360), 2, 8, 2147483647, 2013, 51, false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

    }

    public void test167() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test167"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        java.awt.image.ColorModel var2 = var0.getColorModel();
        var0.updateUI();
        java.awt.Dimension var4 = var0.getPreferredSize();
        var0.firePropertyChange("hi!?hi!=100&amp;amp;hi!=1", true, false);
        javax.accessibility.AccessibleContext var9 = var0.getAccessibleContext();
        boolean var10 = var0.getInheritsPopupMenu();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);

    }

    public void test168() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test168"); }


        org.jfree.chart.renderer.xy.StackedXYAreaRenderer var0 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
        boolean var1 = var0.isOutline();
        java.lang.Object var2 = var0.clone();
        java.awt.Font var4 = var0.getLegendTextFont(22);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var4);

    }

    public void test169() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test169"); }


        org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var1 = var0.getPieChart();
        org.jfree.chart.plot.dial.DialValueIndicator var2 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var3 = var2.getInsets();
        java.awt.Stroke var4 = var2.getOutlineStroke();
        javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var6 = var5.getPreferredSize();
        javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var5.setNextFocusableComponent(var7);
        java.util.Locale var9 = var7.getLocale();
        javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var11 = var10.getPreferredSize();
        java.awt.Dimension var12 = var7.getSize(var11);
        java.awt.event.ContainerListener[] var13 = var7.getContainerListeners();
        javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var15 = var14.getPreferredSize();
        java.awt.image.ColorModel var16 = var14.getColorModel();
        var14.updateUI();
        java.lang.String var18 = var14.toString();
        java.awt.Color var19 = var14.getForeground();
        var7.setBackground(var19);
        var2.setOutlinePaint(var19);
        javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var23 = var22.getPreferredSize();
        javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var22.setNextFocusableComponent(var24);
        java.util.Locale var26 = var24.getLocale();
        javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var28 = var27.getPreferredSize();
        java.awt.Dimension var29 = var24.getSize(var28);
        java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
        javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var32 = var31.getPreferredSize();
        java.awt.image.ColorModel var33 = var31.getColorModel();
        var31.updateUI();
        java.lang.String var35 = var31.toString();
        java.awt.Color var36 = var31.getForeground();
        var24.setBackground(var36);
        var2.setOutlinePaint(var36);
        var1.setBorderPaint(var36);
        org.jfree.chart.plot.CategoryPlot var40 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var42 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var43 = new org.jfree.data.gantt.Task("hi!", var42);
        org.jfree.data.time.TimePeriodValue var45 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var42, (java.lang.Number)10);
        var40.setDomainCrosshairColumnKey(10);
        boolean var47 = var40.getDrawSharedDomainAxis();
        boolean var48 = var40.getDrawSharedDomainAxis();
        var40.clearRangeMarkers(0);
        org.jfree.chart.plot.CombinedRangeXYPlot var51 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var40.addChangeListener(var51);
        org.jfree.chart.event.PlotChangeEvent var53 = new org.jfree.chart.event.PlotChangeEvent(var51);
        org.jfree.chart.plot.Plot var54 = var53.getPlot();
        var1.plotChanged(var53);
        org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var57 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((short)10);
        boolean var58 = var1.equals(var57);
        org.jfree.chart.ChartPanel var71 = new org.jfree.chart.ChartPanel(var1, 51, (-334), (-1), 11, 15, 15, false, true, true, false, true, true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var18 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var18.equals("org.jfree.chart.ChartPanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var54);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == false);

    }

    public void test170() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test170"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[1.0,1.0]", var2, false);
        int var7 = var6.getDefaultCloseOperation();
        java.awt.MenuBar var8 = var6.getMenuBar();
        org.jfree.chart.plot.PolarPlot var9 = new org.jfree.chart.plot.PolarPlot();
        boolean var10 = var9.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var15 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var15.setUpperMargin(10.0d);
        var15.setAxisLineVisible(true);
        javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var21 = var20.getLocation();
        java.awt.Dimension var22 = var20.preferredSize();
        java.awt.Rectangle var23 = var20.bounds();
        java.awt.Point var24 = var9.translateToJava2D(Double.NaN, Double.NaN, var15, var23);
        java.awt.Rectangle var25 = var6.getBounds(var23);
        var6.show();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 2);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

    }

    public void test171() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test171"); }


        org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
        boolean var1 = var0.getSectionOutlinesVisible();
        org.jfree.chart.util.DefaultShadowGenerator var2 = new org.jfree.chart.util.DefaultShadowGenerator();
        float var3 = var2.getShadowOpacity();
        var0.setShadowGenerator(var2);
        var0.clearSectionPaints(true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0.5f);

    }

    public void test172() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test172"); }


        org.jfree.chart.renderer.xy.XYShapeRenderer var0 = new org.jfree.chart.renderer.xy.XYShapeRenderer();
        var0.setGuideLinesVisible(true);
        boolean var5 = var0.getItemCreateEntity(4, 4);
        java.awt.Paint var7 = var0.getSeriesPaint(2013);
        org.jfree.chart.renderer.GrayPaintScale var10 = new org.jfree.chart.renderer.GrayPaintScale(0.0d, 0.025d);
        var0.setPaintScale(var10);
        org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var14 = var13.isVisible();
        java.lang.Object var15 = var13.clone();
        var13.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
        var13.setToolTipText("");
        boolean var23 = var13.getExpandToFitSpace();
        boolean var24 = var10.equals(var23);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);

    }

    public void test173() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test173"); }


        org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
        var0.setDomainCrosshairColumnKey(10);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var7 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var9 = var7.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var12 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var13 = var12.getTickLabelPaint();
        var7.setFillPaint(var13, true);
        var0.setDomainCrosshairPaint(var13);
        boolean var17 = var0.isRangeCrosshairLockedOnData();
        org.jfree.data.statistics.DefaultStatisticalCategoryDataset var18 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
        var18.clear();
        java.util.List var20 = var18.getRowKeys();
        java.lang.Object var21 = var18.clone();
        java.lang.String[] var25 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var26 = new org.jfree.chart.axis.SymbolAxis("hi!", var25);
        org.jfree.chart.plot.CompassPlot var27 = new org.jfree.chart.plot.CompassPlot();
        boolean var28 = var26.equals(var27);
        java.lang.String var29 = var27.getPlotType();
        java.awt.Paint var30 = var27.getRoseCenterPaint();
        org.jfree.chart.LegendItem var31 = new org.jfree.chart.LegendItem("0x00000001", var30);
        boolean var32 = var18.equals("0x00000001");
        int var33 = var0.indexOf(var18);
        org.jfree.data.time.Year var37 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var38 = new org.jfree.data.time.Month(1, var37);
        long var39 = var38.getFirstMillisecond();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Number var40 = var18.getStdDevValue("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", var39);
            fail("Expected exception of type org.jfree.data.UnknownKeyException");
        } catch (org.jfree.data.UnknownKeyException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var29 + "' != '" + "Compass Plot"+ "'", var29.equals("Compass Plot"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == (-59011603200000L));

    }

    public void test174() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test174"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        boolean var5 = var2.getAntiAlias();
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
        org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
        java.awt.Paint var9 = var8.getZoomOutlinePaint();
        java.io.File var10 = var8.getDefaultDirectoryForSaveAs();
        var8.restoreAutoBounds();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var10);

    }

    public void test175() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test175"); }


        org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
        boolean var1 = var0.isDomainZoomable();
        int var2 = var0.getAxisLocation();
        org.jfree.data.general.ValueDataset var3 = var0.getDataset();
        var0.setLowerBound(0.25d);
        var0.zoom(1.0E-8d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == 2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

    }

    public void test176() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test176"); }


        org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
        org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(var0, 10);
        int var4 = var0.getColumnIndex("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");
        org.jfree.data.time.Week var7 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var8 = new org.jfree.data.gantt.Task("hi!", var7);
        org.jfree.data.time.Second var9 = new org.jfree.data.time.Second();
        org.jfree.data.time.Year var12 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var13 = new org.jfree.data.time.Month(1, var12);
        java.util.Locale var14 = javax.swing.JComponent.getDefaultLocale();
        org.jfree.chart.axis.MonthDateFormat var16 = new org.jfree.chart.axis.MonthDateFormat(var14, 2147483647);
        java.util.Calendar var17 = var16.getCalendar();
        var13.peg(var17);
        long var19 = var9.getFirstMillisecond(var17);
        long var20 = var7.getLastMillisecond(var17);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(1380610799999L, var17);
            fail("Expected exception of type org.jfree.data.UnknownKeyException");
        } catch (org.jfree.data.UnknownKeyException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1378963170000L);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1379228399999L);

    }

    public void test177() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test177"); }


        org.jfree.chart.plot.XYCrosshairState var0 = new org.jfree.chart.plot.XYCrosshairState();
        var0.setAnchorX(360.0d);
        var0.updateCrosshairY(Double.NaN);

    }

    public void test178() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test178"); }


        org.jfree.data.general.WaferMapDataset var3 = new org.jfree.data.general.WaferMapDataset(2, 15, 5.0d);
        java.lang.Number var6 = var3.getChipValue(52, 20);
        org.jfree.chart.plot.WaferMapPlot var7 = new org.jfree.chart.plot.WaferMapPlot(var3);
        org.jfree.data.general.DatasetGroup var9 = new org.jfree.data.general.DatasetGroup("DomainOrder.NONE");
        org.jfree.chart.renderer.WaferMapRenderer var10 = new org.jfree.chart.renderer.WaferMapRenderer();
        boolean var11 = var9.equals(var10);
        var7.setRenderer(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);

    }

    public void test179() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test179"); }


        org.jfree.data.general.DefaultKeyedValues2DDataset var0 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var0.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        org.jfree.data.Range var6 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(var0, true);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.removeColumn(22);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

    }

    public void test180() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test180"); }


        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var0 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var2 = var0.getSeriesItemLabelGenerator(0);
        org.jfree.chart.labels.XYItemLabelGenerator var5 = var0.getItemLabelGenerator((-1), 0);
        boolean var6 = var0.getBaseShapesVisible();
        java.awt.Shape var7 = var0.getLegendLine();
        org.jfree.chart.plot.CategoryMarker var9 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var10 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var12 = var10.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var15 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var16 = var15.getTickLabelPaint();
        var10.setFillPaint(var16, true);
        var9.setLabelPaint(var16);
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var26 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var29 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var30 = var29.getItemLabelFont();
        double var31 = var29.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var34 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var35 = var34.getItemLabelFont();
        java.awt.Shape var36 = var34.getBaseLegendShape();
        var29.setShape(var36);
        var26.setLegendBar(var36);
        org.jfree.chart.plot.dial.DialValueIndicator var39 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var40 = var39.getInsets();
        java.awt.Stroke var41 = var39.getOutlineStroke();
        javax.swing.JPanel var42 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var43 = var42.getPreferredSize();
        javax.swing.JPanel var44 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var42.setNextFocusableComponent(var44);
        java.util.Locale var46 = var44.getLocale();
        javax.swing.JPanel var47 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var48 = var47.getPreferredSize();
        java.awt.Dimension var49 = var44.getSize(var48);
        java.awt.event.ContainerListener[] var50 = var44.getContainerListeners();
        javax.swing.JPanel var51 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var52 = var51.getPreferredSize();
        java.awt.image.ColorModel var53 = var51.getColorModel();
        var51.updateUI();
        java.lang.String var55 = var51.toString();
        java.awt.Color var56 = var51.getForeground();
        var44.setBackground(var56);
        var39.setOutlinePaint(var56);
        java.awt.Color var59 = var56.brighter();
        org.jfree.chart.renderer.category.BarRenderer3D var62 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var63 = var62.getItemLabelFont();
        java.awt.Shape var64 = var62.getBaseLegendShape();
        double var65 = var62.getItemMargin();
        org.jfree.chart.plot.CombinedRangeXYPlot var66 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var67 = var66.getRangeZeroBaselineStroke();
        var62.setStroke(var67, false);
        org.jfree.chart.renderer.xy.StackedXYAreaRenderer var70 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
        boolean var71 = var70.isOutline();
        var70.setUseFillPaint(true);
        org.jfree.chart.StandardChartTheme var76 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var77 = var76.getLegendItemPaint();
        var70.setShapePaint(var77);
        org.jfree.chart.LegendItem var79 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var36, var59, var67, var77);
        var9.setStroke(var67);
        var0.setStroke(var67);
        var0.setPlotImages(false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var41);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var42);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var43);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var46);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var47);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var48);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var49);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var50);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var51);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var52);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var53);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var55 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var55,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var55.equals("org.jfree.chart.ChartPanel[,0,0,0var55,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var56);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var59);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var63);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var64);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == 0.2d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var67);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var71 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var77);

    }

    public void test181() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test181"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var1 = var0.getLocation();
        java.awt.Dimension var2 = var0.preferredSize();
        java.awt.Rectangle var3 = var0.bounds();
        var0.setDoubleBuffered(true);
        javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var7 = var6.getPreferredSize();
        java.awt.image.ColorModel var8 = var6.getColorModel();
        var6.firePropertyChange("", 0.0f, 0.0f);
        java.awt.event.MouseWheelListener[] var13 = var6.getMouseWheelListeners();
        java.awt.Dimension var14 = var6.size();
        var0.setSize(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

    }

    public void test182() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test182"); }


        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var0 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.LegendItem var3 = var0.getLegendItem(1, 0);
        org.jfree.data.xy.XYIntervalSeriesCollection var4 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range var5 = var0.findRangeBounds(var4);
        var4.removeAllSeries();
        org.jfree.chart.plot.CombinedRangeXYPlot var7 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var8 = var7.getRangeZeroBaselineStroke();
        org.jfree.chart.title.TextTitle var10 = new org.jfree.chart.title.TextTitle("hi!");
        org.jfree.ui.RectangleInsets var11 = var10.getMargin();
        var7.setAxisOffset(var11);
        var7.setRangeMinorGridlinesVisible(false);
        var4.removeChangeListener(var7);
        org.jfree.data.xy.XYDatasetTableModel var16 = new org.jfree.data.xy.XYDatasetTableModel();
        java.lang.Class var18 = var16.getColumnClass((-1));
        org.jfree.chart.util.HexNumberFormat var20 = new org.jfree.chart.util.HexNumberFormat();
        javax.swing.JPanel var21 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var22 = var21.getPreferredSize();
        javax.swing.JPanel var23 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var21.setNextFocusableComponent(var23);
        java.util.Locale var25 = var23.getLocale();
        org.jfree.chart.axis.MonthDateFormat var26 = new org.jfree.chart.axis.MonthDateFormat(var25);
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var27 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", var20, var26);
        org.jfree.chart.util.RelativeDateFormat var28 = new org.jfree.chart.util.RelativeDateFormat();
        boolean var29 = var28.getShowZeroHours();
        var28.setPositivePrefix("d");
        var28.setMinuteSuffix("hi!?hi!=100&amp;hi!=1");
        boolean var34 = var26.equals("hi!?hi!=100&amp;hi!=1");
        org.jfree.chart.axis.PeriodAxisLabelInfo var35 = new org.jfree.chart.axis.PeriodAxisLabelInfo(var18, var26);
        boolean var36 = var35.getDrawDividers();
        java.lang.Class var37 = var35.getPeriodClass();
        boolean var38 = var7.equals(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);

    }

    public void test183() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test183"); }


        org.jfree.chart.labels.StandardPieSectionLabelGenerator var1 = new org.jfree.chart.labels.StandardPieSectionLabelGenerator("X: {1} Mean: {2} Median: {3} Min: {4} Max: {5} Q1: {6} Q3: {7} ");

    }

    public void test184() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test184"); }


        org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
        boolean var1 = var0.isDomainZoomable();
        int var2 = var0.getAxisLocation();
        org.jfree.data.general.ValueDataset var3 = var0.getDataset();
        org.jfree.chart.plot.MeterPlot var4 = new org.jfree.chart.plot.MeterPlot(var3);
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var7 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        java.awt.Shape var8 = var7.getLegendBar();
        java.lang.String[] var11 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var12 = new org.jfree.chart.axis.SymbolAxis("hi!", var11);
        org.jfree.chart.plot.CompassPlot var13 = new org.jfree.chart.plot.CompassPlot();
        boolean var14 = var12.equals(var13);
        java.lang.String var15 = var13.getPlotType();
        java.awt.Paint var16 = var13.getRoseCenterPaint();
        java.awt.Paint var17 = var13.getBackgroundPaint();
        var7.setItemLabelPaint(var17, true);
        var4.setValuePaint(var17);
        java.lang.String var21 = var4.getPlotType();
        java.lang.String var22 = var4.getUnits();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == 2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var15 + "' != '" + "Compass Plot"+ "'", var15.equals("Compass Plot"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var21 + "' != '" + "Meter Plot"+ "'", var21.equals("Meter Plot"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var22 + "' != '" + "Units"+ "'", var22.equals("Units"));

    }

    public void test185() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test185"); }


        org.jfree.chart.renderer.xy.StackedXYAreaRenderer var0 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
        boolean var1 = var0.isOutline();
        java.awt.Stroke var2 = var0.getShapeStroke();
        org.jfree.chart.StandardChartTheme var4 = new org.jfree.chart.StandardChartTheme("Compass Plot");
        java.awt.Paint var5 = var4.getTitlePaint();
        java.awt.Paint var6 = var4.getChartBackgroundPaint();
        org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.axis.CategoryAxis var8 = var7.getDomainAxis();
        boolean var9 = var7.isRangeMinorGridlinesVisible();
        org.jfree.chart.renderer.xy.StackedXYAreaRenderer var10 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
        boolean var11 = var10.isOutline();
        var10.setUseFillPaint(true);
        org.jfree.chart.StandardChartTheme var16 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var17 = var16.getLegendItemPaint();
        var10.setShapePaint(var17);
        var7.setRangeMinorGridlinePaint(var17);
        var4.setLegendBackgroundPaint(var17);
        java.awt.Paint var21 = var4.getItemLabelPaint();
        var0.setBaseFillPaint(var21);
        boolean var23 = var0.isOutline();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);

    }

    public void test186() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test186"); }


        org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((byte)100, true);
        java.lang.Object var3 = var2.clone();
        int var4 = var2.getMaximumItemCount();
        javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var6 = var5.getPreferredSize();
        boolean var7 = var5.getIgnoreRepaint();
        org.jfree.chart.plot.ContourPlot var9 = new org.jfree.chart.plot.ContourPlot();
        var9.setOutlineVisible(false);
        var5.addPropertyChangeListener("Combined Range XYPlot", var9);
        org.jfree.chart.urls.XYURLGenerator var13 = var9.getURLGenerator();
        var2.removePropertyChangeListener(var9);
        float var15 = var9.getForegroundAlpha();
        org.jfree.chart.plot.ValueMarker var17 = new org.jfree.chart.plot.ValueMarker((-1.0d));
        var9.addDomainMarker(var17);
        var17.setLabel("Compass Plot");
        org.jfree.chart.renderer.xy.XYDotRenderer var21 = new org.jfree.chart.renderer.xy.XYDotRenderer();
        int var22 = var21.getDotWidth();
        java.awt.Shape var23 = var21.getLegendShape();
        org.jfree.chart.renderer.category.GanttRenderer var24 = new org.jfree.chart.renderer.category.GanttRenderer();
        java.lang.String[] var27 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var28 = new org.jfree.chart.axis.SymbolAxis("hi!", var27);
        org.jfree.chart.plot.CompassPlot var29 = new org.jfree.chart.plot.CompassPlot();
        boolean var30 = var28.equals(var29);
        java.lang.String var31 = var29.getPlotType();
        java.awt.Paint var32 = var29.getRoseCenterPaint();
        var24.setIncompletePaint(var32);
        var21.setOutlinePaint(var32);
        int var35 = var21.getDotWidth();
        boolean var36 = var17.equals(var35);
        var17.setValue((-170.0d));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 2147483647);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1.0f);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var31 + "' != '" + "Compass Plot"+ "'", var31.equals("Compass Plot"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == false);

    }

    public void test187() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test187"); }


        org.jfree.chart.ChartTheme var0 = org.jfree.chart.StandardChartTheme.createJFreeTheme();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

    }

    public void test188() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test188"); }


        org.jfree.chart.util.HexNumberFormat var2 = new org.jfree.chart.util.HexNumberFormat();
        org.jfree.chart.labels.IntervalCategoryToolTipGenerator var3 = new org.jfree.chart.labels.IntervalCategoryToolTipGenerator("Combined Range XYPlot", var2);
        org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var4 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
        java.lang.Object var5 = var4.clone();
        boolean var6 = var3.equals(var4);
        org.jfree.chart.urls.StandardXYURLGenerator var10 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
        org.jfree.chart.renderer.xy.XYStepAreaRenderer var11 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(15, var4, var10);
        org.jfree.chart.urls.StandardXYURLGenerator var15 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
        org.jfree.chart.renderer.xy.XYStepRenderer var16 = new org.jfree.chart.renderer.xy.XYStepRenderer(var4, var15);

        // Checks the contract:  equals-hashcode on var10 and var15
        assertTrue("Contract failed: equals-hashcode on var10 and var15", var10.equals(var15) ? var10.hashCode() == var15.hashCode() : true);

        // Checks the contract:  equals-hashcode on var15 and var10
        assertTrue("Contract failed: equals-hashcode on var15 and var10", var15.equals(var10) ? var15.hashCode() == var10.hashCode() : true);

    }

    public void test189() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test189"); }


        org.jfree.chart.renderer.xy.XYAreaRenderer var1 = new org.jfree.chart.renderer.xy.XYAreaRenderer(4);

    }

    public void test190() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test190"); }


        org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis("0x00000000");
        boolean var3 = var1.isHiddenValue(0L);
        org.jfree.chart.title.TextTitle var6 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var7 = var6.isVisible();
        java.lang.Object var8 = var6.clone();
        var6.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
        double var14 = var6.getWidth();
        javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var16 = var15.getLocation();
        org.jfree.chart.plot.PolarPlot var17 = new org.jfree.chart.plot.PolarPlot();
        boolean var18 = var17.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var23 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var23.setUpperMargin(10.0d);
        var23.setAxisLineVisible(true);
        javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var29 = var28.getLocation();
        java.awt.Dimension var30 = var28.preferredSize();
        java.awt.Rectangle var31 = var28.bounds();
        java.awt.Point var32 = var17.translateToJava2D(Double.NaN, Double.NaN, var23, var31);
        java.awt.Rectangle var33 = var15.getBounds(var31);
        var6.setBounds(var33);
        org.jfree.chart.title.TextTitle var36 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var37 = var36.isVisible();
        java.lang.Object var38 = var36.clone();
        org.jfree.ui.RectangleEdge var39 = var36.getPosition();
        double var40 = var1.valueToJava2D(5.0d, var33, var39);
        var1.setTickMarksVisible(true);
        org.jfree.chart.plot.CombinedDomainXYPlot var43 = new org.jfree.chart.plot.CombinedDomainXYPlot(var1);
        boolean var44 = var43.isDomainCrosshairLockedOnData();
        org.jfree.chart.plot.CategoryPlot var45 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var47 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var48 = new org.jfree.data.gantt.Task("hi!", var47);
        org.jfree.data.time.TimePeriodValue var50 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var47, (java.lang.Number)10);
        var45.setDomainCrosshairColumnKey(10);
        boolean var52 = var45.getDrawSharedDomainAxis();
        boolean var53 = var45.getDrawSharedDomainAxis();
        var45.clearRangeMarkers(0);
        org.jfree.chart.plot.CombinedRangeXYPlot var56 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var45.addChangeListener(var56);
        org.jfree.chart.event.PlotChangeEvent var58 = new org.jfree.chart.event.PlotChangeEvent(var56);
        org.jfree.chart.plot.Plot var59 = var58.getPlot();
        org.jfree.chart.plot.Plot var60 = var58.getPlot();
        var43.plotChanged(var58);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var59);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var60);

    }

    public void test191() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test191"); }


        org.jfree.chart.renderer.category.LineRenderer3D var0 = new org.jfree.chart.renderer.category.LineRenderer3D();
        double var1 = var0.getXOffset();
        double var2 = var0.getYOffset();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 12.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == 8.0d);

    }

    public void test192() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test192"); }


        org.jfree.chart.urls.StandardXYURLGenerator var3 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
        org.jfree.data.statistics.SimpleHistogramDataset var5 = new org.jfree.data.statistics.SimpleHistogramDataset(100.0f);
        var5.removeAllBins();
        java.lang.String var9 = var3.generateURL(var5, 100, 1);
        int var10 = var5.getSeriesCount();
        java.lang.Object var11 = var5.clone();

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var9 + "' != '" + "hi!?hi!=100&amp;hi!=1"+ "'", var9.equals("hi!?hi!=100&amp;hi!=1"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

    }

    public void test193() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test193"); }


        org.jfree.data.xy.XYIntervalSeriesCollection var0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.xy.XYBarDataset var2 = new org.jfree.data.xy.XYBarDataset(var0, 10.0d);
        var0.removeAllSeries();

    }

    public void test194() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test194"); }


        org.jfree.data.time.TimeTableXYDataset var0 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        var0.remove(var2, 100, false);
        org.jfree.data.xy.XYBarDataset var8 = new org.jfree.data.xy.XYBarDataset(var0, Double.NaN);
        boolean var9 = var0.getDomainIsPointsInTime();
        org.jfree.data.general.SubSeriesDataset var11 = new org.jfree.data.general.SubSeriesDataset(var0, 3);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            double var14 = var0.getEndXValue(51, (-2));
            fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);

    }

    public void test195() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test195"); }


        org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.axis.CategoryAxis var1 = var0.getDomainAxis();
        var0.clearRangeMarkers(2013);
        boolean var4 = var0.isDomainCrosshairVisible();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == false);

    }

    public void test196() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test196"); }


        org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var2 = var0.findDomainBounds(var1);
        java.lang.Number var3 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue(var1);
        var1.add(100.0d, Double.NaN, "jfreechart-onetime-");
        var1.clear();
        int var10 = var1.getItemCount(8);
        boolean var11 = var1.isAutoWidth();
        var1.setIntervalWidth(100.0d);
        org.jfree.data.xy.IntervalXYDelegate var14 = new org.jfree.data.xy.IntervalXYDelegate(var1);
        double var15 = var14.getIntervalPositionFactor();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            double var18 = var14.getStartXValue(2147483647, 2013);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var3 + "' != '" + Double.NaN+ "'", var3.equals(Double.NaN));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0.5d);

    }

    public void test197() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test197"); }


        org.jfree.data.xy.OHLCDataItem[] var1 = new org.jfree.data.xy.OHLCDataItem[] { };
        org.jfree.data.xy.DefaultOHLCDataset var2 = new org.jfree.data.xy.DefaultOHLCDataset(0.05d, var1);
        org.jfree.data.Range var4 = org.jfree.data.general.DatasetUtilities.iterateDomainBounds(var2, true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var4);

    }

    public void test198() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test198"); }


        org.jfree.chart.renderer.xy.XYStepRenderer var0 = new org.jfree.chart.renderer.xy.XYStepRenderer();
        org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var2 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
        java.lang.Object var3 = var2.clone();
        org.jfree.chart.urls.TimeSeriesURLGenerator var4 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
        org.jfree.chart.renderer.xy.XYStepAreaRenderer var5 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, var2, var4);
        boolean var6 = var0.equals(var5);
        java.lang.Object var7 = var5.clone();
        boolean var8 = var5.isShapesFilled();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);

    }

    public void test199() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test199"); }


        org.jfree.chart.util.RelativeDateFormat var1 = new org.jfree.chart.util.RelativeDateFormat();
        boolean var2 = var1.getShowZeroHours();
        java.text.NumberFormat var3 = var1.getNumberFormat();
        org.jfree.chart.util.RelativeDateFormat var5 = new org.jfree.chart.util.RelativeDateFormat();
        boolean var6 = var5.getShowZeroHours();
        org.jfree.chart.labels.StandardCategoryItemLabelGenerator var7 = new org.jfree.chart.labels.StandardCategoryItemLabelGenerator("0x00000000", var5);
        var5.setMinuteSuffix("0x00000001");
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var10 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]", var3, var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);

    }

    public void test200() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test200"); }


        org.jfree.chart.renderer.category.StackedAreaRenderer var1 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
        java.lang.Object var2 = var1.clone();
        java.lang.Object var3 = var1.clone();
        org.jfree.chart.renderer.AreaRendererEndType var4 = var1.getEndType();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

    }

    public void test201() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test201"); }


        org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
        org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var11 = var10.getTickLabelPaint();
        var5.setFillPaint(var11, true);
        var4.setLabelPaint(var11);
        var2.setDomainGridlinePaint(var11);
        var2.clearDomainMarkers();
        org.jfree.chart.axis.AxisSpace var17 = new org.jfree.chart.axis.AxisSpace();
        var2.setFixedRangeAxisSpace(var17);
        var0.addObject((-1.0d), var2);
        org.jfree.chart.util.ShadowGenerator var20 = var2.getShadowGenerator();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var20);

    }

    public void test202() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test202"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
        org.jfree.chart.title.TextTitle var3 = new org.jfree.chart.title.TextTitle("hi!");
        org.jfree.ui.RectangleInsets var4 = var3.getMargin();
        var0.setAxisOffset(var4);
        var0.clearDomainAxes();
        org.jfree.data.xy.XYSeries var9 = new org.jfree.data.xy.XYSeries((byte)100, true);
        java.lang.Object var10 = var9.clone();
        int var11 = var9.getMaximumItemCount();
        javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var13 = var12.getPreferredSize();
        boolean var14 = var12.getIgnoreRepaint();
        org.jfree.chart.plot.ContourPlot var16 = new org.jfree.chart.plot.ContourPlot();
        var16.setOutlineVisible(false);
        var12.addPropertyChangeListener("Combined Range XYPlot", var16);
        org.jfree.chart.urls.XYURLGenerator var20 = var16.getURLGenerator();
        var9.removePropertyChangeListener(var16);
        float var22 = var16.getForegroundAlpha();
        double var23 = var16.getRangeCrosshairValue();
        java.lang.String[] var26 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var27 = new org.jfree.chart.axis.SymbolAxis("hi!", var26);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var28 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var30 = var28.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var33 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var34 = var33.getTickLabelPaint();
        var28.setFillPaint(var34, true);
        var27.setGridBandAlternatePaint(var34);
        boolean var38 = var16.isCompatibleDomainAxis(var27);
        org.jfree.data.Range var39 = var0.getDataRange(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 2147483647);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 1.0f);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var34);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var39);

    }

    public void test203() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test203"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var0.clearDomainMarkers();
        java.awt.Paint var2 = var0.getRangeGridlinePaint();
        var0.clearRangeAxes();
        var0.setDomainCrosshairValue(15.0d, false);
        java.util.List var7 = var0.getAnnotations();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

    }

    public void test204() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test204"); }


        org.jfree.chart.plot.dial.DialValueIndicator var0 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var1 = var0.getInsets();
        java.awt.Stroke var2 = var0.getOutlineStroke();
        javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var4 = var3.getPreferredSize();
        javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var3.setNextFocusableComponent(var5);
        java.util.Locale var7 = var5.getLocale();
        javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var9 = var8.getPreferredSize();
        java.awt.Dimension var10 = var5.getSize(var9);
        java.awt.event.ContainerListener[] var11 = var5.getContainerListeners();
        javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var13 = var12.getPreferredSize();
        java.awt.image.ColorModel var14 = var12.getColorModel();
        var12.updateUI();
        java.lang.String var16 = var12.toString();
        java.awt.Color var17 = var12.getForeground();
        var5.setBackground(var17);
        var0.setOutlinePaint(var17);
        org.jfree.chart.renderer.xy.XYBlockRenderer var20 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.data.xy.CategoryTableXYDataset var21 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var22 = var20.findDomainBounds(var21);
        org.jfree.chart.renderer.category.BarRenderer3D var25 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var26 = var25.getItemLabelFont();
        double var27 = var25.getItemLabelAnchorOffset();
        org.jfree.chart.labels.ItemLabelPosition var30 = var25.getNegativeItemLabelPosition(0, 0);
        double var31 = var30.getAngle();
        var20.setNegativeItemLabelPosition(var30);
        org.jfree.chart.labels.XYSeriesLabelGenerator var33 = var20.getLegendItemToolTipGenerator();
        org.jfree.chart.title.LegendTitle var34 = new org.jfree.chart.title.LegendTitle(var20);
        org.jfree.chart.StandardChartTheme var37 = new org.jfree.chart.StandardChartTheme("hi!", true);
        org.jfree.chart.plot.dial.DialValueIndicator var38 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var39 = var38.getInsets();
        var37.setAxisOffset(var39);
        var34.setMargin(var39);
        var0.setInsets(var39);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var16 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var16,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var16.equals("org.jfree.chart.ChartPanel[,0,0,0var16,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

    }

    public void test205() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test205"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var1 = var0.getLocation();
        java.awt.Dimension var2 = var0.preferredSize();
        org.jfree.chart.plot.ContourPlot var3 = new org.jfree.chart.plot.ContourPlot();
        var0.addPropertyChangeListener(var3);
        org.jfree.data.general.DatasetGroup var5 = var3.getDatasetGroup();
        java.lang.String[] var8 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var9 = new org.jfree.chart.axis.SymbolAxis("hi!", var8);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var10 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var12 = var10.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var15 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var16 = var15.getTickLabelPaint();
        var10.setFillPaint(var16, true);
        var9.setGridBandAlternatePaint(var16);
        var9.setFixedDimension(100.0d);
        var3.setDomainAxis(var9);
        var3.zoom(0.25d);
        boolean var25 = var3.isRenderAsPoints();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);

    }

    public void test206() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test206"); }


        org.jfree.data.time.DynamicTimeSeriesCollection var2 = new org.jfree.data.time.DynamicTimeSeriesCollection(10, 750);

    }

    public void test207() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test207"); }


        org.jfree.chart.plot.Crosshair var0 = new org.jfree.chart.plot.Crosshair();
        double var1 = var0.getValue();
        org.jfree.chart.needle.PinNeedle var2 = new org.jfree.chart.needle.PinNeedle();
        org.jfree.chart.plot.CategoryPlot var3 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.CategoryMarker var5 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var6 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var8 = var6.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var11 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var12 = var11.getTickLabelPaint();
        var6.setFillPaint(var12, true);
        var5.setLabelPaint(var12);
        var3.setDomainGridlinePaint(var12);
        var2.setHighlightPaint(var12);
        java.awt.Paint var18 = var2.getHighlightPaint();
        var0.setLabelOutlinePaint(var18);
        org.jfree.data.statistics.SimpleHistogramBin var22 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
        var22.setItemCount(2);
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var27 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var30 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var31 = var30.getItemLabelFont();
        double var32 = var30.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var35 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var36 = var35.getItemLabelFont();
        java.awt.Shape var37 = var35.getBaseLegendShape();
        var30.setShape(var37);
        var27.setLegendBar(var37);
        var27.setDrawBarOutline(true);
        java.awt.Paint var43 = var27.getLegendTextPaint(0);
        var27.setSeriesItemLabelsVisible(0, true);
        boolean var47 = var22.equals(var27);
        boolean var48 = var0.equals(var47);
        var0.setLabelOutlineVisible(false);
        var0.setLabelXOffset(174.49d);
        org.jfree.chart.renderer.category.GanttRenderer var53 = new org.jfree.chart.renderer.category.GanttRenderer();
        java.awt.Paint var54 = var53.getCompletePaint();
        var0.setLabelPaint(var54);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var43);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var54);

    }

    public void test208() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test208"); }


        org.jfree.data.xy.YWithXInterval var3 = new org.jfree.data.xy.YWithXInterval(3.0d, 4.0d, (-90.0d));
        double var4 = var3.getXLow();
        double var5 = var3.getXLow();
        java.lang.String[] var8 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var9 = new org.jfree.chart.axis.SymbolAxis("hi!", var8);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var10 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var12 = var10.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var15 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var16 = var15.getTickLabelPaint();
        var10.setFillPaint(var16, true);
        var9.setGridBandAlternatePaint(var16);
        org.jfree.chart.needle.PinNeedle var20 = new org.jfree.chart.needle.PinNeedle();
        org.jfree.chart.plot.CategoryPlot var21 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.CategoryMarker var23 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var24 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var26 = var24.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var29 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var30 = var29.getTickLabelPaint();
        var24.setFillPaint(var30, true);
        var23.setLabelPaint(var30);
        var21.setDomainGridlinePaint(var30);
        var20.setHighlightPaint(var30);
        java.awt.Paint var36 = var20.getHighlightPaint();
        var9.setLabelPaint(var36);
        boolean var38 = var3.equals(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 4.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 4.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);

    }

    public void test209() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test209"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
        java.lang.String var2 = var0.getPlotType();
        org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var11 = var10.getTickLabelPaint();
        var5.setFillPaint(var11, true);
        var4.setLabelPaint(var11);
        boolean var15 = var0.removeRangeMarker(var4);
        javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var17 = var16.getPreferredSize();
        java.awt.image.ColorModel var18 = var16.getColorModel();
        var16.updateUI();
        java.lang.String var20 = var16.toString();
        boolean var21 = var16.getInheritsPopupMenu();
        double[] var24 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var25 = new org.jfree.chart.annotations.XYPolygonAnnotation(var24);
        java.lang.Object var26 = var25.clone();
        org.jfree.chart.event.AnnotationChangeEvent var27 = new org.jfree.chart.event.AnnotationChangeEvent(var16, var25);
        var0.annotationChanged(var27);
        org.jfree.ui.RectangleInsets var29 = var0.getAxisOffset();
        boolean var30 = var0.isOutlineVisible();
        org.jfree.data.time.Week var32 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var33 = new org.jfree.data.gantt.Task("hi!", var32);
        org.jfree.data.time.TimePeriodValue var35 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var32, (java.lang.Number)10);
        org.jfree.data.time.ohlc.OHLCItem var40 = new org.jfree.data.time.ohlc.OHLCItem(var32, 100.0d, 0.0d, 0.05d, 0.0d);
        org.jfree.chart.plot.XYPlot var41 = new org.jfree.chart.plot.XYPlot();
        java.lang.Object var42 = var41.clone();
        org.jfree.data.ComparableObjectItem var43 = new org.jfree.data.ComparableObjectItem(var40, var41);
        var0.add(var41, 51);
        var0.clearDomainMarkers();
        org.jfree.chart.annotations.XYPointerAnnotation var51 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
        double var52 = var51.getY();
        boolean var53 = var0.removeAnnotation(var51);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var20 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var20.equals("org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var42);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 0.2d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == false);

    }

    public void test210() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test210"); }


        org.jfree.data.time.TimeTableXYDataset var0 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        var0.remove(var2, 100, false);
        double var8 = var0.getDomainLowerBound(false);
        int var9 = var0.getItemCount();
        org.jfree.data.time.Year var12 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var13 = new org.jfree.data.time.Month(1, var12);
        var0.add(var13, 0.3d, "org.jfree.chart.renderer.NotOutlierException: hi!");
        org.jfree.data.time.Year var18 = new org.jfree.data.time.Year(100);
        org.jfree.chart.plot.CombinedDomainCategoryPlot var19 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        int var20 = var18.compareTo(var19);
        java.lang.String var21 = var18.toString();
        org.jfree.chart.axis.TickUnits var23 = new org.jfree.chart.axis.TickUnits();
        java.lang.Object var24 = var23.clone();
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var27 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var30 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var31 = var30.getItemLabelFont();
        double var32 = var30.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var35 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var36 = var35.getItemLabelFont();
        java.awt.Shape var37 = var35.getBaseLegendShape();
        var30.setShape(var37);
        var27.setLegendBar(var37);
        org.jfree.data.general.DefaultKeyedValues2DDataset var42 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        org.jfree.chart.entity.CategoryItemEntity var45 = new org.jfree.chart.entity.CategoryItemEntity(var37, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", var42, 0.0f, true);
        var45.setToolTipText("Combined Range XYPlot");
        boolean var48 = var23.equals("Combined Range XYPlot");
        org.jfree.chart.axis.StandardTickUnitSource var49 = new org.jfree.chart.axis.StandardTickUnitSource();
        org.jfree.chart.axis.TickUnit var51 = var49.getCeilingTickUnit((-170.0d));
        var23.add(var51);
        var0.add(var18, (short)100, var51, false);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Number var57 = var0.getY(100, 2147483647);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == Double.NaN);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var21 + "' != '" + "100"+ "'", var21.equals("100"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var51);

    }

    public void test211() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test211"); }


        org.jfree.chart.renderer.category.BarRenderer3D var4 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var5 = var4.getItemLabelFont();
        double var6 = var4.getItemLabelAnchorOffset();
        org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var11 = var10.getTickLabelPaint();
        var4.setLegendTextPaint(0, var11);
        org.jfree.chart.plot.dial.StandardDialRange var13 = new org.jfree.chart.plot.dial.StandardDialRange(1.05d, 0.025d, var11);
        java.lang.Object var14 = var13.clone();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

    }

    public void test212() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test212"); }


        org.jfree.data.time.ohlc.OHLCSeries var1 = new org.jfree.data.time.ohlc.OHLCSeries("hi!?hi!=100&amp;amp;hi!=1");
        org.jfree.data.time.Year var5 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var6 = new org.jfree.data.time.Month(1, var5);
        org.jfree.data.time.Month var7 = new org.jfree.data.time.Month(2, var5);
        var1.add(var5, 2.0d, 0.2d, (-170.0d), (-90.0d));
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            org.jfree.data.time.RegularTimePeriod var14 = var1.getPeriod(11);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }

    }

    public void test213() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test213"); }


        org.jfree.data.statistics.MeanAndStandardDeviation var2 = new org.jfree.data.statistics.MeanAndStandardDeviation((java.lang.Number)1L, (java.lang.Number)0.0f);
        java.lang.String var3 = var2.toString();

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var3 + "' != '" + "[1, 0.0]"+ "'", var3.equals("[1, 0.0]"));

    }

    public void test214() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test214"); }


        org.jfree.chart.axis.SegmentedTimeline var0 = org.jfree.chart.axis.SegmentedTimeline.newMondayThroughFridayTimeline();
        org.jfree.chart.axis.SegmentedTimeline var1 = var0.getBaseTimeline();
        boolean var3 = var0.containsDomainValue(1378963199999L);
        org.jfree.data.time.Year var5 = new org.jfree.data.time.Year(100);
        org.jfree.chart.plot.CombinedDomainCategoryPlot var6 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        int var7 = var5.compareTo(var6);
        var6.setGap(2.0d);
        org.jfree.chart.plot.CombinedRangeXYPlot var10 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var11 = var10.getRangeZeroBaselineStroke();
        java.lang.String var12 = var10.getPlotType();
        org.jfree.chart.plot.CategoryMarker var14 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var15 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var17 = var15.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var20 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var21 = var20.getTickLabelPaint();
        var15.setFillPaint(var21, true);
        var14.setLabelPaint(var21);
        boolean var25 = var10.removeRangeMarker(var14);
        javax.swing.JPanel var26 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var27 = var26.getPreferredSize();
        java.awt.image.ColorModel var28 = var26.getColorModel();
        var26.updateUI();
        java.lang.String var30 = var26.toString();
        boolean var31 = var26.getInheritsPopupMenu();
        double[] var34 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var35 = new org.jfree.chart.annotations.XYPolygonAnnotation(var34);
        java.lang.Object var36 = var35.clone();
        org.jfree.chart.event.AnnotationChangeEvent var37 = new org.jfree.chart.event.AnnotationChangeEvent(var26, var35);
        var10.annotationChanged(var37);
        org.jfree.chart.annotations.Annotation var39 = var37.getAnnotation();
        var6.annotationChanged(var37);
        java.util.List var41 = var6.getSubplots();
        var0.addExceptions(var41);
        long var43 = var0.getSegmentSize();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var12 + "' != '" + "Combined Range XYPlot"+ "'", var12.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var30 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var30,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var30.equals("org.jfree.chart.ChartPanel[,0,0,0var30,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var34);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var41);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 86400000L);

    }

    public void test215() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test215"); }


        org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
        var1.setLinesVisible(true);
        boolean var4 = var1.getAutoPopulateSeriesShape();
        var1.setUseOutlinePaint(true);
        java.lang.Boolean var8 = var1.getSeriesShapesVisible(4);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var8);

    }

    public void test216() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test216"); }


        org.jfree.chart.renderer.category.ScatterRenderer var0 = new org.jfree.chart.renderer.category.ScatterRenderer();
        var0.setItemMargin(0.2d);
        var0.setBaseShapesFilled(false);

    }

    public void test217() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test217"); }


        org.jfree.chart.labels.HighLowItemLabelGenerator var1 = new org.jfree.chart.labels.HighLowItemLabelGenerator();
        org.jfree.data.time.TimeTableXYDataset var2 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", var4);
        var2.remove(var4, 100, false);
        org.jfree.data.xy.XYBarDataset var10 = new org.jfree.data.xy.XYBarDataset(var2, Double.NaN);
        java.lang.Object var11 = var10.clone();
        java.lang.String var14 = var1.generateToolTip(var10, 1043495433, 0);
        org.jfree.data.xy.CategoryTableXYDataset var15 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.general.DefaultKeyedValues2DDataset var16 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var16.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        boolean var21 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(var16);
        java.util.List var22 = var16.getColumnKeys();
        org.jfree.data.Range var24 = org.jfree.data.general.DatasetUtilities.findDomainBounds(var15, var22, true);
        java.lang.String var27 = var1.generateLabel(var15, 2, 19);
        org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var29 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
        java.lang.Object var30 = var29.clone();
        org.jfree.chart.urls.TimeSeriesURLGenerator var31 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
        org.jfree.chart.renderer.xy.XYStepAreaRenderer var32 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, var29, var31);
        org.jfree.chart.renderer.xy.StackedXYAreaRenderer var33 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer((-1), var1, var31);
        org.jfree.data.gantt.TaskSeries var35 = new org.jfree.data.gantt.TaskSeries("jfreechart-onetime-");
        int var36 = var35.getItemCount();
        org.jfree.data.gantt.Task var38 = var35.get("Time");
        boolean var39 = var1.equals(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);

    }

    public void test218() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test218"); }


        org.jfree.chart.panel.AbstractOverlay var0 = new org.jfree.chart.panel.AbstractOverlay();

    }

    public void test219() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test219"); }


        org.jfree.chart.plot.CombinedRangeCategoryPlot var0 = new org.jfree.chart.plot.CombinedRangeCategoryPlot();
        org.jfree.chart.annotations.CategoryPointerAnnotation var5 = new org.jfree.chart.annotations.CategoryPointerAnnotation("[size=0x00000000]", 1043495433, 0.25d, 100.0d);
        boolean var7 = var0.removeAnnotation(var5, false);
        org.jfree.chart.plot.CategoryPlot var8 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var10 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var11 = new org.jfree.data.gantt.Task("hi!", var10);
        org.jfree.data.time.TimePeriodValue var13 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var10, (java.lang.Number)10);
        var8.setDomainCrosshairColumnKey(10);
        boolean var15 = var8.getDrawSharedDomainAxis();
        boolean var16 = var8.getDrawSharedDomainAxis();
        var8.clearRangeMarkers(0);
        org.jfree.chart.plot.CombinedRangeXYPlot var19 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var8.addChangeListener(var19);
        org.jfree.chart.event.PlotChangeEvent var21 = new org.jfree.chart.event.PlotChangeEvent(var19);
        org.jfree.chart.plot.Plot var22 = var21.getPlot();
        org.jfree.chart.plot.Plot var23 = var21.getPlot();
        var0.plotChanged(var21);
        org.jfree.chart.LegendItemCollection var25 = var0.getFixedLegendItems();
        var0.clearDomainMarkers(8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var25);

    }

    public void test220() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test220"); }


        javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var5 = var4.getLocation();
        org.jfree.chart.plot.PolarPlot var6 = new org.jfree.chart.plot.PolarPlot();
        boolean var7 = var6.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var12 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var12.setUpperMargin(10.0d);
        var12.setAxisLineVisible(true);
        javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var18 = var17.getLocation();
        java.awt.Dimension var19 = var17.preferredSize();
        java.awt.Rectangle var20 = var17.bounds();
        java.awt.Point var21 = var6.translateToJava2D(Double.NaN, Double.NaN, var12, var20);
        java.awt.Rectangle var22 = var4.getBounds(var20);
        org.jfree.chart.renderer.category.GanttRenderer var23 = new org.jfree.chart.renderer.category.GanttRenderer();
        java.lang.String[] var26 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var27 = new org.jfree.chart.axis.SymbolAxis("hi!", var26);
        org.jfree.chart.plot.CompassPlot var28 = new org.jfree.chart.plot.CompassPlot();
        boolean var29 = var27.equals(var28);
        java.lang.String var30 = var28.getPlotType();
        java.awt.Paint var31 = var28.getRoseCenterPaint();
        var23.setIncompletePaint(var31);
        org.jfree.chart.LegendItem var33 = new org.jfree.chart.LegendItem("Range[0.0,0.0]", "RectangleConstraint[LengthConstraintType.FIXED: width=0.04, height=0.0]", "hi!?hi!=100&amp;hi!=1", "jfreechart-onetime-", var20, var31);
        java.lang.String var34 = var33.getURLText();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var30 + "' != '" + "Compass Plot"+ "'", var30.equals("Compass Plot"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var34 + "' != '" + "jfreechart-onetime-"+ "'", var34.equals("jfreechart-onetime-"));

    }

    public void test221() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test221"); }


        org.jfree.data.time.ohlc.OHLCSeriesCollection var0 = new org.jfree.data.time.ohlc.OHLCSeriesCollection();
        org.jfree.data.time.TimePeriodAnchor var1 = var0.getXPosition();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            org.jfree.data.time.ohlc.OHLCSeries var3 = var0.getSeries(5);
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

    }

    public void test222() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test222"); }


        org.jfree.data.time.Minute var0 = new org.jfree.data.time.Minute();
        int var1 = var0.getMinute();
        org.jfree.data.time.Hour var2 = var0.getHour();
        org.jfree.data.time.Day var3 = var2.getDay();
        org.jfree.data.time.RegularTimePeriod var4 = var2.previous();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

    }

    public void test223() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test223"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        boolean var5 = var2.getAntiAlias();
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
        int var7 = var6.getDefaultCloseOperation();
        int var8 = var6.getCursorType();
        boolean var9 = var6.isFocused();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);

    }

    public void test224() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test224"); }


        org.jfree.data.time.Minute var0 = new org.jfree.data.time.Minute();
        int var1 = var0.getMinute();
        org.jfree.data.time.Hour var2 = var0.getHour();
        org.jfree.data.time.Day var3 = var2.getDay();
        org.jfree.data.time.Minute var4 = new org.jfree.data.time.Minute();
        int var5 = var4.getMinute();
        org.jfree.data.time.Hour var6 = var4.getHour();
        org.jfree.data.time.Year var9 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var10 = new org.jfree.data.time.Month(1, var9);
        java.util.Locale var11 = javax.swing.JComponent.getDefaultLocale();
        org.jfree.chart.axis.MonthDateFormat var13 = new org.jfree.chart.axis.MonthDateFormat(var11, 2147483647);
        java.util.Calendar var14 = var13.getCalendar();
        long var15 = var10.getLastMillisecond(var14);
        long var16 = var6.getLastMillisecond(var14);
        long var17 = var3.getLastMillisecond(var14);
        long var18 = var3.getLastMillisecond();
        java.lang.String var19 = var3.toString();
        org.jfree.data.time.RegularTimePeriod var20 = var3.previous();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == (-59008924800001L));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 1378965599999L);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 1378969199999L);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == 1378969199999L);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var19 + "' != '" + "11-September-2013"+ "'", var19.equals("11-September-2013"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

    }

    public void test225() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test225"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var0.setNextFocusableComponent(var2);
        var0.show();
        var0.show(false);
        javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var8 = var7.getPreferredSize();
        javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var7.setNextFocusableComponent(var9);
        java.util.Locale var11 = var9.getLocale();
        org.jfree.chart.axis.TickUnitSource var12 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var11);
        java.text.NumberFormat var13 = java.text.NumberFormat.getCurrencyInstance(var11);
        var0.setLocale(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

    }

    public void test226() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test226"); }


        org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
        int var1 = var0.getItemCount();
        int var3 = var0.getIndex(5.0d);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.removeValue((java.lang.Comparable)750);
            fail("Expected exception of type org.jfree.data.UnknownKeyException");
        } catch (org.jfree.data.UnknownKeyException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == (-1));

    }

    public void test227() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test227"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        boolean var5 = var2.getAntiAlias();
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
        org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
        java.awt.Paint var9 = var8.getZoomOutlinePaint();
        var8.restoreAutoBounds();
        int var11 = var8.getInitialDelay();
        javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var13 = var12.getPreferredSize();
        javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var12.setNextFocusableComponent(var14);
        var12.show();
        javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var18 = var17.getLocation();
        java.awt.Dimension var19 = var17.preferredSize();
        java.awt.Rectangle var20 = var17.bounds();
        var12.scrollRectToVisible(var20);
        var8.computeVisibleRect(var20);
        var8.setMouseZoomable(true);
        var8.zoomOutRange((-90.0d), Double.NaN);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 750);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

    }

    public void test228() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test228"); }


        java.util.Locale var0 = javax.swing.JComponent.getDefaultLocale();
        org.jfree.chart.axis.MonthDateFormat var2 = new org.jfree.chart.axis.MonthDateFormat(var0, 2147483647);
        org.jfree.chart.axis.TickUnitSource var3 = org.jfree.chart.axis.NumberAxis.createIntegerTickUnits(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

    }

    public void test229() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test229"); }


        java.lang.Number[][] var0 = new java.lang.Number[][] { };
        java.lang.Number[][] var1 = new java.lang.Number[][] { };
        org.jfree.data.category.DefaultIntervalCategoryDataset var2 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var0, var1);
        int var3 = var2.getRowCount();
        var2.validateObject();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0);

    }

    public void test230() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test230"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[1.0,1.0]", var2, false);
        var6.repaint(1L, 4, 15, 2147483647, 52);
        org.jfree.data.xy.XYSeries var15 = new org.jfree.data.xy.XYSeries((byte)100, true);
        java.lang.Object var16 = var15.clone();
        int var17 = var15.getMaximumItemCount();
        javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var19 = var18.getPreferredSize();
        boolean var20 = var18.getIgnoreRepaint();
        org.jfree.chart.plot.ContourPlot var22 = new org.jfree.chart.plot.ContourPlot();
        var22.setOutlineVisible(false);
        var18.addPropertyChangeListener("Combined Range XYPlot", var22);
        org.jfree.chart.urls.XYURLGenerator var26 = var22.getURLGenerator();
        var15.removePropertyChangeListener(var22);
        float var28 = var22.getForegroundAlpha();
        org.jfree.chart.plot.ValueMarker var30 = new org.jfree.chart.plot.ValueMarker((-1.0d));
        var22.addDomainMarker(var30);
        var22.setDataAreaRatio(3.0d);
        var6.addPropertyChangeListener(var22);
        boolean var35 = var6.isFocusableWindow();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 2147483647);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 1.0f);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);

    }

    public void test231() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test231"); }


        org.jfree.chart.axis.AxisSpace var0 = new org.jfree.chart.axis.AxisSpace();
        double var1 = var0.getBottom();
        org.jfree.chart.axis.DateAxis var4 = new org.jfree.chart.axis.DateAxis("0x00000000");
        boolean var6 = var4.isHiddenValue(0L);
        org.jfree.chart.title.TextTitle var9 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var10 = var9.isVisible();
        java.lang.Object var11 = var9.clone();
        var9.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
        double var17 = var9.getWidth();
        javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var19 = var18.getLocation();
        org.jfree.chart.plot.PolarPlot var20 = new org.jfree.chart.plot.PolarPlot();
        boolean var21 = var20.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var26 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var26.setUpperMargin(10.0d);
        var26.setAxisLineVisible(true);
        javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var32 = var31.getLocation();
        java.awt.Dimension var33 = var31.preferredSize();
        java.awt.Rectangle var34 = var31.bounds();
        java.awt.Point var35 = var20.translateToJava2D(Double.NaN, Double.NaN, var26, var34);
        java.awt.Rectangle var36 = var18.getBounds(var34);
        var9.setBounds(var36);
        org.jfree.chart.title.TextTitle var39 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var40 = var39.isVisible();
        java.lang.Object var41 = var39.clone();
        org.jfree.ui.RectangleEdge var42 = var39.getPosition();
        double var43 = var4.valueToJava2D(5.0d, var36, var42);
        var0.ensureAtLeast((-1.0d), var42);
        var0.setLeft(15.0d);
        var0.setBottom(0.05d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var34);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var41);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var42);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == 0.0d);

    }

    public void test232() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test232"); }


        org.jfree.chart.plot.RainbowPalette var0 = new org.jfree.chart.plot.RainbowPalette();
        var0.initialize();
        var0.setPaletteName("sun.swing.PrintColorUIResource[r=51,g=51,b=51]");

    }

    public void test233() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test233"); }


        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        org.jfree.data.xy.VectorDataItem var5 = new org.jfree.data.xy.VectorDataItem((-1.0d), 10.0d, 2.0d, (-1.0d));
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var8 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        java.awt.Shape var9 = var8.getLegendBar();
        boolean var10 = var5.equals(var9);
        var0.setBaseShape(var9);
        var0.setBaseShapesVisible(false);
        java.lang.String[] var17 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var18 = new org.jfree.chart.axis.SymbolAxis("hi!", var17);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var19 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var21 = var19.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var24 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var25 = var24.getTickLabelPaint();
        var19.setFillPaint(var25, true);
        var18.setGridBandAlternatePaint(var25);
        org.jfree.chart.needle.PinNeedle var29 = new org.jfree.chart.needle.PinNeedle();
        org.jfree.chart.plot.CategoryPlot var30 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.CategoryMarker var32 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var33 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var35 = var33.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var38 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var39 = var38.getTickLabelPaint();
        var33.setFillPaint(var39, true);
        var32.setLabelPaint(var39);
        var30.setDomainGridlinePaint(var39);
        var29.setHighlightPaint(var39);
        java.awt.Paint var45 = var29.getHighlightPaint();
        var18.setLabelPaint(var45);
        org.jfree.chart.plot.DefaultDrawingSupplier var47 = new org.jfree.chart.plot.DefaultDrawingSupplier();
        java.awt.Shape var48 = var47.getNextShape();
        java.awt.Stroke var49 = var47.getNextOutlineStroke();
        org.jfree.chart.plot.ValueMarker var50 = new org.jfree.chart.plot.ValueMarker(1.0E-5d, var45, var49);
        var0.setErrorIndicatorStroke(var49);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var45);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var48);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var49);

    }

    public void test234() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test234"); }


        org.jfree.data.time.Year var2 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var3 = new org.jfree.data.time.Month(1, var2);
        org.jfree.data.time.RegularTimePeriod var4 = var3.previous();
        int var5 = var3.getMonth();
        org.jfree.chart.renderer.category.BarRenderer3D var8 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.lang.Object var9 = var8.clone();
        boolean var10 = var3.equals(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);

    }

    public void test235() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test235"); }


        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        var0.setUseSeriesOffset(true);
        java.awt.Paint var3 = var0.getItemLabelPaint();
        int var4 = var0.getColumnCount();
        boolean var5 = var0.getUseOutlinePaint();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == false);

    }

    public void test236() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test236"); }


        org.jfree.data.general.WaferMapDataset var3 = new org.jfree.data.general.WaferMapDataset(2, 15, 5.0d);
        org.jfree.chart.renderer.WaferMapRenderer var6 = new org.jfree.chart.renderer.WaferMapRenderer(100, 2);
        org.jfree.chart.plot.WaferMapPlot var7 = new org.jfree.chart.plot.WaferMapPlot(var3, var6);
        org.jfree.data.time.TimeTableXYDataset var8 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var10 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var11 = new org.jfree.data.gantt.Task("hi!", var10);
        var8.remove(var10, 100, false);
        org.jfree.data.xy.XYBarDataset var16 = new org.jfree.data.xy.XYBarDataset(var8, Double.NaN);
        org.jfree.chart.event.RendererChangeEvent var17 = new org.jfree.chart.event.RendererChangeEvent(var16);
        var7.rendererChanged(var17);
        org.jfree.chart.renderer.WaferMapRenderer var21 = new org.jfree.chart.renderer.WaferMapRenderer(100, 2);
        org.jfree.chart.plot.DrawingSupplier var22 = var21.getDrawingSupplier();
        var7.setRenderer(var21);
        org.jfree.data.general.WaferMapDataset var27 = new org.jfree.data.general.WaferMapDataset(2, 15, 5.0d);
        org.jfree.chart.renderer.WaferMapRenderer var30 = new org.jfree.chart.renderer.WaferMapRenderer(100, 2);
        org.jfree.chart.plot.WaferMapPlot var31 = new org.jfree.chart.plot.WaferMapPlot(var27, var30);
        var21.setPlot(var31);

        // Checks the contract:  equals-hashcode on var7 and var31
        assertTrue("Contract failed: equals-hashcode on var7 and var31", var7.equals(var31) ? var7.hashCode() == var31.hashCode() : true);

        // Checks the contract:  equals-hashcode on var31 and var7
        assertTrue("Contract failed: equals-hashcode on var31 and var7", var31.equals(var7) ? var31.hashCode() == var7.hashCode() : true);

    }

    public void test237() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test237"); }


        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var6 = var5.getItemLabelFont();
        double var7 = var5.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var11 = var10.getItemLabelFont();
        java.awt.Shape var12 = var10.getBaseLegendShape();
        var5.setShape(var12);
        var2.setLegendBar(var12);
        var2.setDrawBarOutline(true);
        java.lang.Object var17 = var2.clone();
        java.lang.Object var18 = var2.clone();
        org.jfree.chart.renderer.xy.XYBlockRenderer var19 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.data.xy.CategoryTableXYDataset var20 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var21 = var19.findDomainBounds(var20);
        org.jfree.chart.renderer.category.BarRenderer3D var24 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var25 = var24.getItemLabelFont();
        double var26 = var24.getItemLabelAnchorOffset();
        org.jfree.chart.labels.ItemLabelPosition var29 = var24.getNegativeItemLabelPosition(0, 0);
        double var30 = var29.getAngle();
        var19.setNegativeItemLabelPosition(var29);
        var2.setBasePositiveItemLabelPosition(var29, false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == 0.0d);

    }

    public void test238() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test238"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var0.setDomainZeroBaselineVisible(false);
        org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var4 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
        java.lang.Object var5 = var4.clone();
        org.jfree.chart.urls.TimeSeriesURLGenerator var6 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
        org.jfree.chart.renderer.xy.XYStepAreaRenderer var7 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, var4, var6);
        var7.setShapesFilled(true);
        var7.setSeriesVisibleInLegend(8, false);
        var0.setRenderer(var7);
        org.jfree.ui.RectangleEdge var15 = var0.getRangeAxisEdge(3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

    }

    public void test239() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test239"); }


        org.jfree.data.time.ohlc.OHLC var4 = new org.jfree.data.time.ohlc.OHLC(100.0d, 4.0d, 0.5d, 4.0d);
        double var5 = var4.getHigh();
        double var6 = var4.getClose();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 4.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 4.0d);

    }

    public void test240() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test240"); }


        org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
        var1.clearSeriesPaints(false);
        boolean var4 = var1.getBaseLinesVisible();
        boolean var7 = var1.getItemShapeFilled((-2), 15);
        org.jfree.chart.plot.CombinedRangeXYPlot var8 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var9 = var8.getRangeZeroBaselineStroke();
        java.lang.String var10 = var8.getPlotType();
        boolean var11 = var8.isDomainZoomable();
        org.jfree.chart.plot.CombinedRangeXYPlot var12 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var13 = var12.getRangeZeroBaselineStroke();
        var8.setDomainCrosshairStroke(var13);
        var1.setOutlineStroke(var13, true);
        var1.setSeriesShapesVisible(15, true);
        java.lang.Boolean var21 = var1.getSeriesShapesFilled(5);
        boolean var23 = var1.isSeriesVisible(2013);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var10 + "' != '" + "Combined Range XYPlot"+ "'", var10.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == true);

    }

    public void test241() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test241"); }


        org.jfree.chart.urls.StandardXYURLGenerator var3 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
        org.jfree.data.statistics.SimpleHistogramDataset var5 = new org.jfree.data.statistics.SimpleHistogramDataset(100.0f);
        var5.removeAllBins();
        java.lang.String var9 = var3.generateURL(var5, 100, 1);
        org.jfree.data.DomainOrder var10 = var5.getDomainOrder();
        var5.removeAllBins();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Number var14 = var5.getEndY(252, 19);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var9 + "' != '" + "hi!?hi!=100&amp;hi!=1"+ "'", var9.equals("hi!?hi!=100&amp;hi!=1"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

    }

    public void test242() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test242"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        java.awt.image.ColorModel var2 = var0.getColorModel();
        var0.updateUI();
        java.lang.String var4 = var0.toString();
        java.awt.Color var5 = var0.getForeground();
        org.jfree.chart.axis.LogAxis var6 = new org.jfree.chart.axis.LogAxis();
        org.jfree.chart.editor.DefaultLogAxisEditor var7 = new org.jfree.chart.editor.DefaultLogAxisEditor(var6);
        var7.toggleAutoTick();
        var0.removeFocusListener(var7);
        var7.validateTickUnit();
        var7.firePropertyChange("100", 1.0f, 2.0f);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var4 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var4.equals("org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

    }

    public void test243() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test243"); }


        org.jfree.chart.annotations.XYLineAnnotation var4 = new org.jfree.chart.annotations.XYLineAnnotation((-1.0d), (-1.0d), 100.0d, 100.0d);
        org.jfree.data.xy.DefaultIntervalXYDataset var5 = new org.jfree.data.xy.DefaultIntervalXYDataset();
        boolean var6 = var4.hasListener(var5);
        int var7 = var5.getSeriesCount();
        java.lang.Object var8 = var5.clone();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Number var11 = var5.getY((-334), 0);
            fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

    }

    public void test244() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test244"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        boolean var2 = var0.getIgnoreRepaint();
        boolean var3 = var0.isLightweight();
        var0.validate();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == false);

    }

    public void test245() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test245"); }


        org.jfree.data.xy.XYSeries var2 = new org.jfree.data.xy.XYSeries((byte)100, true);
        var2.clear();
        org.jfree.data.xy.XYDataItem var6 = new org.jfree.data.xy.XYDataItem((java.lang.Number)1378963157000L, (java.lang.Number)0.75d);
        org.jfree.data.xy.XYDataItem var7 = var2.addOrUpdate(var6);
        org.jfree.data.xy.XYSeries var10 = new org.jfree.data.xy.XYSeries((byte)100, true);
        org.jfree.data.xy.XYSeries var13 = new org.jfree.data.xy.XYSeries((byte)100, true);
        java.lang.Object var14 = var13.clone();
        int var15 = var13.getMaximumItemCount();
        javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var17 = var16.getPreferredSize();
        boolean var18 = var16.getIgnoreRepaint();
        org.jfree.chart.plot.ContourPlot var20 = new org.jfree.chart.plot.ContourPlot();
        var20.setOutlineVisible(false);
        var16.addPropertyChangeListener("Combined Range XYPlot", var20);
        org.jfree.chart.urls.XYURLGenerator var24 = var20.getURLGenerator();
        var13.removePropertyChangeListener(var20);
        float var26 = var20.getForegroundAlpha();
        var10.addPropertyChangeListener(var20);
        boolean var28 = var6.equals(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 2147483647);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == 1.0f);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);

    }

    public void test246() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test246"); }


        org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
        org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries(var0);
        org.jfree.data.time.Year var5 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var6 = new org.jfree.data.time.Month(1, var5);
        org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
        long var8 = var6.getSerialIndex();
        org.jfree.data.time.TimeTableXYDataset var9 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var11 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var12 = new org.jfree.data.gantt.Task("hi!", var11);
        var9.remove(var11, 100, false);
        org.jfree.chart.axis.PeriodAxis var16 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", var6, var11);
        var16.setMinorTickMarksVisible(false);
        org.jfree.data.time.Year var20 = new org.jfree.data.time.Year(100);
        org.jfree.chart.plot.CombinedDomainCategoryPlot var21 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        int var22 = var20.compareTo(var21);
        var16.setFirst(var20);
        java.lang.String var24 = var20.toString();
        var1.add((org.jfree.data.time.RegularTimePeriod)var20, (java.lang.Number)(short)(-1));
        var1.setDomainDescription("[size=0x00000000]");
        java.lang.Object var29 = var1.clone();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1201L);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var24 + "' != '" + "100"+ "'", var24.equals("100"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

    }

    public void test247() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test247"); }


        org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
        org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(var0, 10);
        org.jfree.data.statistics.SimpleHistogramBin var5 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
        org.jfree.data.general.PieDataset var7 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(var2, 0.05d, 175.0d);
        org.jfree.chart.plot.RingPlot var8 = new org.jfree.chart.plot.RingPlot(var7);
        var8.setSectionDepth(0.02d);
        var8.setInnerSeparatorExtension(0.02d);
        var8.setSectionDepth(175.0d);
        boolean var15 = var8.getIgnoreNullValues();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);

    }

    public void test248() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test248"); }


        org.jfree.chart.ChartRenderingInfo var0 = new org.jfree.chart.ChartRenderingInfo();
        org.jfree.chart.entity.EntityCollection var1 = var0.getEntityCollection();
        org.jfree.chart.plot.PlotRenderingInfo var2 = new org.jfree.chart.plot.PlotRenderingInfo(var0);
        java.awt.geom.Rectangle2D var3 = var0.getChartArea();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

    }

    public void test249() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test249"); }


        org.jfree.chart.plot.dial.DialPlot var0 = new org.jfree.chart.plot.dial.DialPlot();
        var0.setView(0.2d, 4.0d, 10.0d, 10.0d);
        var0.mapDatasetToScale(2013, 100);
        org.jfree.chart.plot.dial.DialPlot var9 = new org.jfree.chart.plot.dial.DialPlot();
        org.jfree.chart.plot.dial.StandardDialScale var10 = new org.jfree.chart.plot.dial.StandardDialScale();
        int var11 = var9.getLayerIndex(var10);
        var10.setTickLabelsVisible(false);
        int var14 = var0.getLayerIndex(var10);
        org.jfree.chart.plot.dial.StandardDialFrame var15 = new org.jfree.chart.plot.dial.StandardDialFrame();
        boolean var16 = var15.isClippedToWindow();
        java.awt.Paint var17 = var15.getBackgroundPaint();
        org.jfree.chart.plot.CombinedRangeXYPlot var18 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var19 = var18.getRangeZeroBaselineStroke();
        java.lang.String var20 = var18.getPlotType();
        boolean var21 = var18.isDomainZoomable();
        org.jfree.chart.plot.CombinedRangeXYPlot var22 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var23 = var22.getRangeZeroBaselineStroke();
        var18.setDomainCrosshairStroke(var23);
        var15.setStroke(var23);
        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var26 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        java.lang.Boolean var27 = var26.getBaseItemLabelsVisible();
        var26.setSeriesShapesFilled(1, (java.lang.Boolean)false);
        var26.setDrawOutlines(true);
        org.jfree.chart.renderer.category.BarRenderer3D var35 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var36 = var35.getItemLabelFont();
        double var37 = var35.getItemLabelAnchorOffset();
        java.awt.Shape var39 = var35.getSeriesShape(1);
        org.jfree.chart.renderer.category.BarRenderer3D var43 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var44 = var43.getItemLabelFont();
        double var45 = var43.getItemLabelAnchorOffset();
        org.jfree.chart.axis.CyclicNumberAxis var49 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var50 = var49.getTickLabelPaint();
        var43.setLegendTextPaint(0, var50);
        var35.setSeriesFillPaint(100, var50, true);
        var26.setBaseOutlinePaint(var50, false);
        var15.setForegroundPaint(var50);
        var0.setDialFrame(var15);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.removeLayer(255);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var20 + "' != '" + "Combined Range XYPlot"+ "'", var20.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var27 + "' != '" + false+ "'", var27.equals(false));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var50);

    }

    public void test250() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test250"); }


        org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
        org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", var4);
        org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
        var2.setDomainCrosshairColumnKey(10);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var15 = var14.getTickLabelPaint();
        var9.setFillPaint(var15, true);
        var2.setDomainCrosshairPaint(var15);
        boolean var19 = var1.equals(var2);
        org.jfree.ui.RectangleEdge var20 = var2.getRangeAxisEdge();
        org.jfree.chart.axis.SubCategoryAxis var22 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
        int var23 = var2.getDomainAxisIndex(var22);
        var2.setRangeMinorGridlinesVisible(false);
        org.jfree.chart.plot.CategoryPlot var26 = new org.jfree.chart.plot.CategoryPlot();
        java.lang.Comparable var27 = var26.getDomainCrosshairColumnKey();
        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var28 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        var28.setUseSeriesOffset(true);
        var28.setBaseSeriesVisible(true);
        var28.setAutoPopulateSeriesShape(false);
        org.jfree.chart.renderer.category.CategoryItemRenderer[] var35 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var28};
        var26.setRenderers(var35);
        var2.setRenderers(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var35);

    }

    public void test251() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test251"); }


        org.jfree.chart.needle.LineNeedle var0 = new org.jfree.chart.needle.LineNeedle();
        java.awt.Stroke var1 = var0.getOutlineStroke();
        java.lang.Object var2 = var0.clone();
        javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var4 = var3.getPreferredSize();
        javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var3.setNextFocusableComponent(var5);
        javax.swing.JPopupMenu var7 = var5.getComponentPopupMenu();
        javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var9 = var8.getLocation();
        java.awt.Dimension var10 = var8.preferredSize();
        var5.setMaximumSize(var10);
        boolean var12 = var0.equals(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);

    }

    public void test252() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test252"); }


        org.jfree.chart.renderer.category.LevelRenderer var0 = new org.jfree.chart.renderer.category.LevelRenderer();
        double var1 = var0.getItemMargin();
        org.jfree.chart.StrokeMap var2 = new org.jfree.chart.StrokeMap();
        java.lang.Object var3 = var2.clone();
        boolean var4 = var0.equals(var2);
        var0.setItemLabelAnchorOffset(4.0d);
        org.jfree.data.KeyedObjects2D var8 = new org.jfree.data.KeyedObjects2D();
        javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var10 = var9.getPreferredSize();
        javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var9.setNextFocusableComponent(var11);
        java.util.Locale var13 = var11.getLocale();
        org.jfree.chart.axis.TickUnitSource var14 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var13);
        java.text.NumberFormat var15 = java.text.NumberFormat.getPercentInstance(var13);
        org.jfree.data.time.Year var17 = new org.jfree.data.time.Year();
        var8.addObject(var15, 0.04d, var17);
        double[] var21 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var22 = new org.jfree.chart.annotations.XYPolygonAnnotation(var21);
        double[] var25 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var26 = new org.jfree.chart.annotations.XYPolygonAnnotation(var25);
        org.jfree.chart.ClipPath var27 = new org.jfree.chart.ClipPath(var21, var25);
        double[][] var28 = new double[][] { var21};
        double[] var33 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var34 = new org.jfree.chart.annotations.XYPolygonAnnotation(var33);
        double[] var37 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var38 = new org.jfree.chart.annotations.XYPolygonAnnotation(var37);
        org.jfree.chart.ClipPath var39 = new org.jfree.chart.ClipPath(var33, var37);
        double[][] var40 = new double[][] { var33};
        org.jfree.data.category.CategoryDataset var41 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var40);
        org.jfree.data.category.DefaultIntervalCategoryDataset var42 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var28, var40);
        org.jfree.chart.axis.SubCategoryAxis var44 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
        var44.configure();
        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var46 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        java.lang.Boolean var48 = var46.getSeriesLinesVisible(10);
        javax.swing.JPanel var50 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var51 = var50.getPreferredSize();
        boolean var52 = var50.getIgnoreRepaint();
        boolean var53 = var50.isLightweight();
        javax.swing.JPanel var54 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var55 = var54.getPreferredSize();
        javax.swing.JPanel var56 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var54.setNextFocusableComponent(var56);
        var54.show();
        javax.swing.JPanel var59 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var60 = var59.getLocation();
        java.awt.Dimension var61 = var59.preferredSize();
        java.awt.Rectangle var62 = var59.bounds();
        var54.scrollRectToVisible(var62);
        var50.setBounds(var62);
        var46.setSeriesShape(15, var62);
        org.jfree.chart.axis.AxisState var66 = new org.jfree.chart.axis.AxisState();
        org.jfree.chart.title.TextTitle var69 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var70 = var69.isVisible();
        java.lang.Object var71 = var69.clone();
        org.jfree.ui.RectangleEdge var72 = var69.getPosition();
        var66.moveCursor(4.0d, var72);
        double var74 = var0.getItemMiddle(1201L, 0.04d, var42, var44, var62, var72);
        java.awt.Paint var75 = var44.getTickLabelPaint();
        double var76 = var44.getUpperMargin();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0.2d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var41);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var48);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var50);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var51);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var54);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var55);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var56);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var59);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var60);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var61);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var62);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var70 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var71);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var72);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var74 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var75);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var76 == 0.05d);

    }

    public void test253() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test253"); }


        org.jfree.chart.util.RelativeDateFormat var1 = new org.jfree.chart.util.RelativeDateFormat();
        var1.setShowZeroHours(true);
        org.jfree.chart.util.RelativeDateFormat var4 = new org.jfree.chart.util.RelativeDateFormat();
        boolean var5 = var4.getShowZeroHours();
        var4.setPositivePrefix("d");
        var4.setMinuteSuffix("hi!?hi!=100&amp;hi!=1");
        org.jfree.chart.labels.StandardXYToolTipGenerator var10 = new org.jfree.chart.labels.StandardXYToolTipGenerator("d", var1, var4);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

    }

    public void test254() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test254"); }


        org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var2 = var0.findDomainBounds(var1);
        org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var6 = var5.getItemLabelFont();
        double var7 = var5.getItemLabelAnchorOffset();
        org.jfree.chart.labels.ItemLabelPosition var10 = var5.getNegativeItemLabelPosition(0, 0);
        double var11 = var10.getAngle();
        var0.setNegativeItemLabelPosition(var10);
        org.jfree.chart.labels.XYSeriesLabelGenerator var13 = var0.getLegendItemToolTipGenerator();
        org.jfree.chart.title.LegendTitle var14 = new org.jfree.chart.title.LegendTitle(var0);
        org.jfree.chart.block.BlockContainer var15 = var14.getItemContainer();
        org.jfree.chart.block.CenterArrangement var16 = new org.jfree.chart.block.CenterArrangement();
        var15.setArrangement(var16);
        org.jfree.chart.title.LegendItemBlockContainer var20 = new org.jfree.chart.title.LegendItemBlockContainer(var16, 80, 22);
        var20.setURLText("Multiple Pie Plot");

        // Regression assertion (captures the current behavior of the code)
        assertNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

    }

    public void test255() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test255"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var1 = var0.getLocation();
        java.awt.Dimension var2 = var0.preferredSize();
        var0.paintImmediately(100, 100, 10, (-1));
        boolean var8 = var0.getIgnoreRepaint();
        java.awt.Dimension var9 = var0.getPreferredSize();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

    }

    public void test256() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test256"); }


        org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
        org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries(var0);
        org.jfree.data.time.Year var5 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var6 = new org.jfree.data.time.Month(1, var5);
        org.jfree.data.time.RegularTimePeriod var7 = var6.previous();
        long var8 = var6.getSerialIndex();
        org.jfree.data.time.TimeTableXYDataset var9 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var11 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var12 = new org.jfree.data.gantt.Task("hi!", var11);
        var9.remove(var11, 100, false);
        org.jfree.chart.axis.PeriodAxis var16 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", var6, var11);
        var16.setMinorTickMarksVisible(false);
        org.jfree.data.time.Year var20 = new org.jfree.data.time.Year(100);
        org.jfree.chart.plot.CombinedDomainCategoryPlot var21 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        int var22 = var20.compareTo(var21);
        var16.setFirst(var20);
        java.lang.String var24 = var20.toString();
        var1.add((org.jfree.data.time.RegularTimePeriod)var20, (java.lang.Number)(short)(-1));
        var1.setDomainDescription("[size=0x00000000]");
        org.jfree.data.time.Second var29 = new org.jfree.data.time.Second();
        org.jfree.data.time.TimeSeries var30 = new org.jfree.data.time.TimeSeries(var29);
        var30.setMaximumItemCount(0);
        boolean var33 = var30.getNotify();
        double var34 = var30.getMaxY();
        java.lang.Object var35 = var30.clone();
        org.jfree.data.time.Year var38 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var39 = new org.jfree.data.time.Month(1, var38);
        org.jfree.data.time.Year var41 = new org.jfree.data.time.Year();
        org.jfree.data.gantt.Task var42 = new org.jfree.data.gantt.Task("item", var41);
        org.jfree.data.time.TimeSeries var43 = var30.createCopy(var38, var41);
        org.jfree.data.time.TimeSeries var44 = var1.addAndOrUpdate(var30);
        java.lang.String var45 = var1.getDomainDescription();
        var1.removeAgedItems(true);
        java.lang.Object var48 = var1.clone();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 1201L);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var24 + "' != '" + "100"+ "'", var24.equals("100"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == Double.NaN);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var43);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var45 + "' != '" + "[size=0var450000000]"+ "'", var45.equals("[size=0var450000000]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var48);

    }

    public void test257() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test257"); }


        org.jfree.chart.axis.LogarithmicAxis var1 = new org.jfree.chart.axis.LogarithmicAxis("[Dec 31, 1969 4:00:00 PM --> Dec 31, 1969 4:00:00 PM]");

    }

    public void test258() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test258"); }


        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var10 = var9.getItemLabelFont();
        double var11 = var9.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var15 = var14.getItemLabelFont();
        java.awt.Shape var16 = var14.getBaseLegendShape();
        var9.setShape(var16);
        var6.setLegendBar(var16);
        org.jfree.chart.plot.dial.DialValueIndicator var19 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var20 = var19.getInsets();
        java.awt.Stroke var21 = var19.getOutlineStroke();
        javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var23 = var22.getPreferredSize();
        javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var22.setNextFocusableComponent(var24);
        java.util.Locale var26 = var24.getLocale();
        javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var28 = var27.getPreferredSize();
        java.awt.Dimension var29 = var24.getSize(var28);
        java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
        javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var32 = var31.getPreferredSize();
        java.awt.image.ColorModel var33 = var31.getColorModel();
        var31.updateUI();
        java.lang.String var35 = var31.toString();
        java.awt.Color var36 = var31.getForeground();
        var24.setBackground(var36);
        var19.setOutlinePaint(var36);
        java.awt.Color var39 = var36.brighter();
        org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var43 = var42.getItemLabelFont();
        java.awt.Shape var44 = var42.getBaseLegendShape();
        double var45 = var42.getItemMargin();
        org.jfree.chart.plot.CombinedRangeXYPlot var46 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var47 = var46.getRangeZeroBaselineStroke();
        var42.setStroke(var47, false);
        org.jfree.chart.renderer.xy.StackedXYAreaRenderer var50 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
        boolean var51 = var50.isOutline();
        var50.setUseFillPaint(true);
        org.jfree.chart.StandardChartTheme var56 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var57 = var56.getLegendItemPaint();
        var50.setShapePaint(var57);
        org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var16, var39, var47, var57);
        var59.setShapeVisible(false);
        org.jfree.ui.GradientPaintTransformer var62 = var59.getFillPaintTransformer();
        boolean var63 = var59.isShapeOutlineVisible();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var43);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0.2d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var47);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var57);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var62);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == true);

    }

    public void test259() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test259"); }


        org.jfree.chart.axis.ColorBar var1 = new org.jfree.chart.axis.ColorBar("hi!?hi!=80&amp;hi!=100");
        var1.setMaximumValue(40.05d);

    }

    public void test260() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test260"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
        java.lang.String var2 = var0.getPlotType();
        org.jfree.chart.needle.PinNeedle var3 = new org.jfree.chart.needle.PinNeedle();
        org.jfree.chart.plot.CategoryPlot var4 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var6 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var7 = new org.jfree.data.gantt.Task("hi!", var6);
        org.jfree.data.time.TimePeriodValue var9 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var6, (java.lang.Number)10);
        var4.setDomainCrosshairColumnKey(10);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var11 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var13 = var11.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var16 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var17 = var16.getTickLabelPaint();
        var11.setFillPaint(var17, true);
        var4.setDomainCrosshairPaint(var17);
        var3.setOutlinePaint(var17);
        org.jfree.chart.event.RendererChangeEvent var22 = new org.jfree.chart.event.RendererChangeEvent(var3);
        var0.rendererChanged(var22);
        org.jfree.ui.RectangleInsets var24 = var0.getAxisOffset();
        java.awt.Paint var25 = var0.getRangeGridlinePaint();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

    }

    public void test261() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test261"); }


        org.jfree.chart.axis.LogAxis var0 = new org.jfree.chart.axis.LogAxis();
        var0.setFixedDimension((-170.0d));
        boolean var3 = var0.isTickLabelsVisible();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);

    }

    public void test262() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test262"); }


        org.jfree.data.xml.DatasetReader var0 = new org.jfree.data.xml.DatasetReader();

    }

    public void test263() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test263"); }


        org.jfree.chart.title.TextTitle var3 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var4 = var3.isVisible();
        java.lang.Object var5 = var3.clone();
        var3.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
        org.jfree.chart.annotations.XYTitleAnnotation var11 = new org.jfree.chart.annotations.XYTitleAnnotation(0.04d, (-90.0d), var3);
        org.jfree.data.xy.XYIntervalSeriesCollection var12 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.xy.XYBarDataset var14 = new org.jfree.data.xy.XYBarDataset(var12, 10.0d);
        java.lang.Number var15 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(var12);
        org.jfree.chart.plot.CombinedRangeXYPlot var16 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var17 = var16.getRangeZeroBaselineStroke();
        java.lang.String var18 = var16.getPlotType();
        org.jfree.chart.plot.CategoryMarker var20 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var21 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var23 = var21.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var26 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var27 = var26.getTickLabelPaint();
        var21.setFillPaint(var27, true);
        var20.setLabelPaint(var27);
        boolean var31 = var16.removeRangeMarker(var20);
        org.jfree.chart.axis.AxisLocation var32 = var16.getDomainAxisLocation();
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var35 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var38 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var39 = var38.getItemLabelFont();
        double var40 = var38.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var43 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var44 = var43.getItemLabelFont();
        java.awt.Shape var45 = var43.getBaseLegendShape();
        var38.setShape(var45);
        var35.setLegendBar(var45);
        var35.setDrawBarOutline(true);
        org.jfree.data.xy.CategoryTableXYDataset var50 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var51 = var35.findDomainBounds(var50);
        int var52 = var16.getIndexOf(var35);
        boolean var53 = var12.equals(var35);
        org.jfree.chart.needle.LineNeedle var58 = new org.jfree.chart.needle.LineNeedle();
        java.awt.Stroke var59 = var58.getOutlineStroke();
        org.jfree.chart.StandardChartTheme var62 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var63 = var62.getLegendItemPaint();
        org.jfree.chart.annotations.XYBoxAnnotation var64 = new org.jfree.chart.annotations.XYBoxAnnotation(0.0d, 0.2d, 0.05d, (-90.0d), var59, var63);
        var35.addAnnotation(var64);
        var11.removeChangeListener(var35);
        var11.setToolTipText("SeriesRenderingOrder.REVERSE");
        org.jfree.chart.title.Title var69 = var11.getTitle();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var18 + "' != '" + "Combined Range XYPlot"+ "'", var18.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var45);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var51);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var59);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var63);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var69);

    }

    public void test264() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test264"); }


        org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions((-1.0d));
        org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", var4);
        org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
        var2.setDomainCrosshairColumnKey(10);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var15 = var14.getTickLabelPaint();
        var9.setFillPaint(var15, true);
        var2.setDomainCrosshairPaint(var15);
        boolean var19 = var1.equals(var2);
        org.jfree.ui.RectangleEdge var20 = var2.getRangeAxisEdge();
        org.jfree.chart.axis.SubCategoryAxis var22 = new org.jfree.chart.axis.SubCategoryAxis("Compass Plot");
        int var23 = var2.getDomainAxisIndex(var22);
        org.jfree.data.general.DefaultKeyedValues2DDataset var24 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var24.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        boolean var29 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(var24);
        java.util.List var30 = var24.getColumnKeys();
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var33 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var36 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var37 = var36.getItemLabelFont();
        double var38 = var36.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var41 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var42 = var41.getItemLabelFont();
        java.awt.Shape var43 = var41.getBaseLegendShape();
        var36.setShape(var43);
        var33.setLegendBar(var43);
        var33.setDrawBarOutline(true);
        org.jfree.data.xy.CategoryTableXYDataset var48 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var49 = var33.findDomainBounds(var48);
        org.jfree.data.Range var51 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(var48, (-1.0d));
        boolean var52 = var24.hasListener(var48);
        var2.setDataset(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var42);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var43);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var49);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var51);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == false);

    }

    public void test265() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test265"); }


        org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
        org.jfree.data.general.DefaultPieDataset var1 = new org.jfree.data.general.DefaultPieDataset(var0);
        java.util.List var2 = var1.getKeys();
        org.jfree.chart.renderer.xy.XYBlockRenderer var3 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.data.xy.CategoryTableXYDataset var4 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var5 = var3.findDomainBounds(var4);
        org.jfree.chart.renderer.category.BarRenderer3D var8 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var9 = var8.getItemLabelFont();
        double var10 = var8.getItemLabelAnchorOffset();
        org.jfree.chart.labels.ItemLabelPosition var13 = var8.getNegativeItemLabelPosition(0, 0);
        double var14 = var13.getAngle();
        var3.setNegativeItemLabelPosition(var13);
        org.jfree.chart.labels.XYSeriesLabelGenerator var16 = var3.getLegendItemToolTipGenerator();
        org.jfree.chart.title.LegendTitle var17 = new org.jfree.chart.title.LegendTitle(var3);
        org.jfree.chart.plot.CategoryPlot var18 = new org.jfree.chart.plot.CategoryPlot();
        java.lang.Comparable var19 = var18.getDomainCrosshairColumnKey();
        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var20 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        var20.setUseSeriesOffset(true);
        var20.setBaseSeriesVisible(true);
        var20.setAutoPopulateSeriesShape(false);
        org.jfree.chart.renderer.category.CategoryItemRenderer[] var27 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var20};
        var18.setRenderers(var27);
        var17.setSources(var27);
        org.jfree.ui.RectangleAnchor var30 = var17.getLegendItemGraphicLocation();
        java.lang.Object var31 = var17.clone();
        org.jfree.util.SortOrder var32 = var17.getSortOrder();
        var1.sortByKeys(var32);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var1.insertValue(2, (java.lang.Comparable)(-59011603200000L), (java.lang.Number)(-0.21460183660255172d));
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

    }

    public void test266() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test266"); }


        org.jfree.data.xy.YIntervalSeriesCollection var0 = new org.jfree.data.xy.YIntervalSeriesCollection();
        int var1 = var0.getSeriesCount();
        var0.removeAllSeries();
        java.lang.Object var3 = var0.clone();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.removeSeries(750);
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

    }

    public void test267() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test267"); }


        org.jfree.data.xy.VectorDataItem var4 = new org.jfree.data.xy.VectorDataItem((-1.0d), 10.0d, 2.0d, (-1.0d));
        double var5 = var4.getXValue();
        org.jfree.data.xy.Vector var6 = var4.getVector();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == (-1.0d));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

    }

    public void test268() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test268"); }


        org.jfree.data.xy.XIntervalSeriesCollection var0 = new org.jfree.data.xy.XIntervalSeriesCollection();
        org.jfree.data.xy.XIntervalSeries var2 = new org.jfree.data.xy.XIntervalSeries(1201L);
        var0.addSeries(var2);
        org.jfree.data.general.SeriesDataset[] var4 = new org.jfree.data.general.SeriesDataset[] { var0};
        org.jfree.data.general.CombinedDataset var5 = new org.jfree.data.general.CombinedDataset(var4);
        int[] var6 = var5.getMap();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            int var8 = var5.getItemCount(255);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var6);

    }

    public void test269() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test269"); }


        org.jfree.data.statistics.SimpleHistogramBin var2 = new org.jfree.data.statistics.SimpleHistogramBin(Double.NaN, Double.NEGATIVE_INFINITY);

        // Checks the contract:  var2.equals(var2)
        assertTrue("Contract failed: var2.equals(var2)", var2.equals(var2));

    }

    public void test270() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test270"); }


        org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var3 = var2.getItemLabelFont();
        double var4 = var2.getItemLabelAnchorOffset();
        org.jfree.chart.labels.ItemLabelPosition var7 = var2.getNegativeItemLabelPosition(0, 0);
        java.awt.Paint var10 = var2.getItemFillPaint(2013, 1);
        boolean var11 = var2.getShadowsVisible();
        var2.setBaseCreateEntities(true);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);

    }

    public void test271() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test271"); }


        org.jfree.chart.plot.dial.DialPlot var0 = new org.jfree.chart.plot.dial.DialPlot();
        org.jfree.chart.plot.dial.StandardDialScale var1 = new org.jfree.chart.plot.dial.StandardDialScale();
        int var2 = var0.getLayerIndex(var1);
        double var3 = var1.getMinorTickLength();
        java.awt.Color var7 = java.awt.Color.getHSBColor(100.0f, (-1.0f), 2.0f);
        var1.setMajorTickPaint(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0.02d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

    }

    public void test272() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test272"); }


        org.jfree.chart.axis.SegmentedTimeline var0 = org.jfree.chart.axis.SegmentedTimeline.newMondayThroughFridayTimeline();
        long var1 = var0.getSegmentsGroupSize();
        var0.addException(1380610799999L);
        org.jfree.chart.axis.DateAxis var5 = new org.jfree.chart.axis.DateAxis("0x00000000");
        var5.setVerticalTickLabels(false);
        var5.setMinorTickMarksVisible(true);
        org.jfree.chart.util.RelativeDateFormat var12 = new org.jfree.chart.util.RelativeDateFormat();
        java.lang.Object var13 = var12.clone();
        org.jfree.chart.axis.DateTickUnit var14 = new org.jfree.chart.axis.DateTickUnit(1, 8, var12);
        int var15 = var14.getUnit();
        java.util.Date var16 = var5.calculateLowestVisibleTickValue(var14);
        org.jfree.chart.renderer.category.BarRenderer3D var19 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var20 = var19.getItemLabelFont();
        org.jfree.chart.labels.ItemLabelPosition var23 = var19.getPositiveItemLabelPosition(8, 100);
        boolean var24 = var14.equals(var19);
        org.jfree.data.time.Year var28 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var29 = new org.jfree.data.time.Month(1, var28);
        org.jfree.data.time.RegularTimePeriod var30 = var29.previous();
        long var31 = var29.getSerialIndex();
        org.jfree.data.time.TimeTableXYDataset var32 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var34 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var35 = new org.jfree.data.gantt.Task("hi!", var34);
        var32.remove(var34, 100, false);
        org.jfree.chart.axis.PeriodAxis var39 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", var29, var34);
        java.util.Date var40 = var34.getEnd();
        org.jfree.data.time.Quarter var41 = new org.jfree.data.time.Quarter(var40);
        java.lang.String var42 = var14.dateToString(var40);
        org.jfree.data.time.Year var46 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var47 = new org.jfree.data.time.Month(1, var46);
        org.jfree.data.time.RegularTimePeriod var48 = var47.previous();
        long var49 = var47.getSerialIndex();
        org.jfree.data.time.TimeTableXYDataset var50 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var52 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var53 = new org.jfree.data.gantt.Task("hi!", var52);
        var50.remove(var52, 100, false);
        org.jfree.chart.axis.PeriodAxis var57 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", var47, var52);
        java.util.Date var58 = var52.getEnd();
        org.jfree.data.time.Quarter var59 = new org.jfree.data.time.Quarter(var58);
        boolean var60 = var0.containsDomainRange(var40, var58);

        // Checks the contract:  equals-hashcode on var32 and var50
        assertTrue("Contract failed: equals-hashcode on var32 and var50", var32.equals(var50) ? var32.hashCode() == var50.hashCode() : true);

        // Checks the contract:  equals-hashcode on var50 and var32
        assertTrue("Contract failed: equals-hashcode on var50 and var32", var50.equals(var32) ? var50.hashCode() == var32.hashCode() : true);

        // Checks the contract:  equals-hashcode on var35 and var53
        assertTrue("Contract failed: equals-hashcode on var35 and var53", var35.equals(var53) ? var35.hashCode() == var53.hashCode() : true);

        // Checks the contract:  equals-hashcode on var53 and var35
        assertTrue("Contract failed: equals-hashcode on var53 and var35", var53.equals(var35) ? var53.hashCode() == var35.hashCode() : true);

    }

    public void test273() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test273"); }


        org.jfree.data.xy.XYIntervalSeries var3 = new org.jfree.data.xy.XYIntervalSeries("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", false, true);
        var3.add((-170.0d), 175.0d, 3.0d, 1.5d, 0.04d, 360.0d);

    }

    public void test274() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test274"); }


        org.jfree.chart.plot.CategoryCrosshairState var0 = new org.jfree.chart.plot.CategoryCrosshairState();
        var0.setColumnKey((-2));

    }

    public void test275() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test275"); }


        org.jfree.chart.util.HexNumberFormat var3 = new org.jfree.chart.util.HexNumberFormat();
        javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var5 = var4.getPreferredSize();
        javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var4.setNextFocusableComponent(var6);
        java.util.Locale var8 = var6.getLocale();
        org.jfree.chart.axis.MonthDateFormat var9 = new org.jfree.chart.axis.MonthDateFormat(var8);
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var10 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", var3, var9);
        org.jfree.chart.util.LogFormat var15 = new org.jfree.chart.util.LogFormat(0.0d, "hi!", true);
        javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var17 = var16.getPreferredSize();
        javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var16.setNextFocusableComponent(var18);
        java.util.Locale var20 = var18.getLocale();
        org.jfree.chart.axis.TickUnitSource var21 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var20);
        java.text.NumberFormat var22 = java.text.NumberFormat.getPercentInstance(var20);
        org.jfree.chart.labels.StandardXYItemLabelGenerator var23 = new org.jfree.chart.labels.StandardXYItemLabelGenerator("d", var15, var22);
        org.jfree.chart.labels.StandardPieToolTipGenerator var24 = new org.jfree.chart.labels.StandardPieToolTipGenerator("Combined Range XYPlot", var3, var22);
        org.jfree.chart.axis.NumberTickUnit var26 = new org.jfree.chart.axis.NumberTickUnit(1.0E-5d, var22, 100);
        var22.setGroupingUsed(false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

    }

    public void test276() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test276"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var1 = var0.getLocation();
        java.awt.Dimension var2 = var0.preferredSize();
        var0.paintImmediately(100, 100, 10, (-1));
        var0.firePropertyChange("index.html", 20, (-334));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

    }

    public void test277() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test277"); }


        org.jfree.chart.util.HexNumberFormat var2 = new org.jfree.chart.util.HexNumberFormat();
        javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var4 = var3.getPreferredSize();
        javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var3.setNextFocusableComponent(var5);
        java.util.Locale var7 = var5.getLocale();
        org.jfree.chart.axis.MonthDateFormat var8 = new org.jfree.chart.axis.MonthDateFormat(var7);
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var9 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", var2, var8);
        org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator var10 = new org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator("jfreechart-onetime-", var2);
        org.jfree.chart.plot.CombinedDomainCategoryPlot var11 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        float var12 = var11.getBackgroundImageAlpha();
        var11.setRangeCrosshairValue(100.0d);
        boolean var15 = var10.equals(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0.5f);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);

    }

    public void test278() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test278"); }


        org.jfree.chart.plot.CompassPlot var0 = new org.jfree.chart.plot.CompassPlot();
        var0.setDrawBorder(true);
        org.jfree.data.function.NormalDistributionFunction2D var6 = new org.jfree.data.function.NormalDistributionFunction2D(4.0d, 10.0d);
        double var7 = var6.getStandardDeviation();
        java.lang.String[] var10 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var11 = new org.jfree.chart.axis.SymbolAxis("hi!", var10);
        var11.setLabelAngle(0.0d);
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var16 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var19 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var20 = var19.getItemLabelFont();
        double var21 = var19.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var24 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var25 = var24.getItemLabelFont();
        java.awt.Shape var26 = var24.getBaseLegendShape();
        var19.setShape(var26);
        var16.setLegendBar(var26);
        org.jfree.data.general.DefaultKeyedValues2DDataset var31 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        org.jfree.chart.entity.CategoryItemEntity var34 = new org.jfree.chart.entity.CategoryItemEntity(var26, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", var31, 0.0f, true);
        org.jfree.chart.plot.CombinedRangeXYPlot var35 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var36 = var35.getRangeZeroBaselineStroke();
        org.jfree.chart.plot.CategoryMarker var38 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var39 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var41 = var39.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var44 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var45 = var44.getTickLabelPaint();
        var39.setFillPaint(var45, true);
        var38.setLabelPaint(var45);
        org.jfree.chart.annotations.XYShapeAnnotation var49 = new org.jfree.chart.annotations.XYShapeAnnotation(var26, var36, var45);
        var11.setAxisLineStroke(var36);
        boolean var51 = var6.equals(var36);
        var0.setSeriesOutlineStroke(100, var36);
        boolean var53 = var0.isNotify();
        java.lang.String var54 = var0.getPlotType();
        var0.zoom(100.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 10.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var41);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var45);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var54 + "' != '" + "Compass Plot"+ "'", var54.equals("Compass Plot"));

    }

    public void test279() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test279"); }


        java.lang.Number[][] var0 = new java.lang.Number[][] { };
        java.lang.Number[][] var1 = new java.lang.Number[][] { };
        org.jfree.data.category.DefaultIntervalCategoryDataset var2 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var0, var1);
        java.lang.Object[][][] var3 = new java.lang.Object[][][] { var1};
        org.jfree.data.xy.DefaultWindDataset var4 = new org.jfree.data.xy.DefaultWindDataset(var3);
        int var5 = var4.getSeriesCount();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 1);

    }

    public void test280() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test280"); }


        org.jfree.data.resources.DataPackageResources_ru var0 = new org.jfree.data.resources.DataPackageResources_ru();
        boolean var2 = var0.containsKey("<area shape=\"rect\" coords=\"-3,-5,3,5\" title=\"-4,-4,4,4\" alt=\"\" href=\"-4,-4,4,4\"/>");

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == false);

    }

    public void test281() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test281"); }


        org.jfree.data.time.ohlc.OHLCSeriesCollection var0 = new org.jfree.data.time.ohlc.OHLCSeriesCollection();
        org.jfree.data.time.TimePeriodAnchor var1 = var0.getXPosition();
        java.lang.String var2 = var1.toString();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var2 + "' != '" + "TimePeriodAnchor.MIDDLE"+ "'", var2.equals("TimePeriodAnchor.MIDDLE"));

    }

    public void test282() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test282"); }


        org.jfree.chart.urls.CustomCategoryURLGenerator var0 = new org.jfree.chart.urls.CustomCategoryURLGenerator();
        org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var1 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
        org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var4 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var5 = new org.jfree.data.gantt.Task("hi!", var4);
        org.jfree.data.time.TimePeriodValue var7 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var4, (java.lang.Number)10);
        var2.setDomainCrosshairColumnKey(10);
        boolean var9 = var2.getDrawSharedDomainAxis();
        org.jfree.ui.RectangleEdge var11 = var2.getDomainAxisEdge(2);
        org.jfree.data.general.DefaultKeyedValues2DDataset var12 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var12.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        boolean var17 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(var12);
        org.jfree.chart.urls.StandardXYURLGenerator var21 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
        boolean var22 = var12.equals("hi!");
        org.jfree.data.Range var23 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(var12);
        boolean var24 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(var12);
        int var25 = var2.indexOf(var12);
        boolean var26 = var1.equals(var25);
        java.lang.String var29 = var0.generateURL(var1, 2, 500);
        org.jfree.data.time.Year var31 = new org.jfree.data.time.Year(100);
        org.jfree.chart.plot.CombinedDomainCategoryPlot var32 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        int var33 = var31.compareTo(var32);
        org.jfree.data.time.TimeSeriesDataItem var35 = new org.jfree.data.time.TimeSeriesDataItem(var31, 175.0d);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var1.removeColumn(var31);
            fail("Expected exception of type org.jfree.data.UnknownKeyException");
        } catch (org.jfree.data.UnknownKeyException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 1);

    }

    public void test283() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test283"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        boolean var5 = var2.getAntiAlias();
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
        org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
        java.awt.Paint var9 = var8.getZoomOutlinePaint();
        var8.restoreAutoBounds();
        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var11 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        var11.setUseSeriesOffset(true);
        java.awt.Paint var14 = var11.getErrorIndicatorPaint();
        org.jfree.chart.renderer.category.BarRenderer3D var21 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var22 = var21.getItemLabelFont();
        java.awt.Shape var23 = var21.getBaseLegendShape();
        org.jfree.chart.entity.ContourEntity var25 = new org.jfree.chart.entity.ContourEntity(var23, "hi!?hi!=100&amp;hi!=1");
        org.jfree.chart.title.TextTitle var27 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var28 = var27.isVisible();
        java.lang.Object var29 = var27.clone();
        java.lang.String var30 = var27.getURLText();
        javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var32 = var31.getPreferredSize();
        java.awt.image.ColorModel var33 = var31.getColorModel();
        var31.updateUI();
        java.lang.String var35 = var31.toString();
        java.awt.Color var36 = var31.getForeground();
        var27.setBackgroundPaint(var36);
        int var38 = var36.getRGB();
        int var39 = var36.getBlue();
        org.jfree.chart.plot.dial.DialPlot var40 = new org.jfree.chart.plot.dial.DialPlot();
        org.jfree.chart.plot.dial.StandardDialScale var41 = new org.jfree.chart.plot.dial.StandardDialScale();
        int var42 = var40.getLayerIndex(var41);
        org.jfree.chart.plot.dial.DialValueIndicator var43 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var44 = var43.getInsets();
        int var45 = var40.getLayerIndex(var43);
        java.awt.Stroke var46 = var43.getOutlineStroke();
        org.jfree.chart.title.TextTitle var48 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var49 = var48.isVisible();
        java.lang.Object var50 = var48.clone();
        java.lang.String var51 = var48.getURLText();
        javax.swing.JPanel var52 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var53 = var52.getPreferredSize();
        java.awt.image.ColorModel var54 = var52.getColorModel();
        var52.updateUI();
        java.lang.String var56 = var52.toString();
        java.awt.Color var57 = var52.getForeground();
        var48.setBackgroundPaint(var57);
        org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var23, var36, var46, var57);
        var11.setFillPaint(var36, false);
        var8.setZoomFillPaint(var36);
        var8.setMinimumDrawWidth(252);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == (-13421773));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == 51);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var42 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var46);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var49 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var50);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var51);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var52);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var53);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var54);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var56 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var56,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var56.equals("org.jfree.chart.ChartPanel[,0,0,0var56,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var57);

    }

    public void test284() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test284"); }


        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        var0.setUseSeriesOffset(true);
        java.lang.Boolean var4 = var0.getSeriesLinesVisible(19);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var4);

    }

    public void test285() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test285"); }


        org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
        java.awt.Stroke var2 = var0.getSectionOutlineStroke((-334));
        boolean var3 = var0.getSimpleLabels();
        javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var6 = var5.getPreferredSize();
        java.awt.image.ColorModel var7 = var5.getColorModel();
        var5.updateUI();
        java.lang.String var9 = var5.toString();
        java.awt.Color var10 = var5.getForeground();
        org.jfree.chart.util.DefaultShadowGenerator var14 = new org.jfree.chart.util.DefaultShadowGenerator(20, var10, 0.5f, (-2), 0.2d);
        int var15 = var14.getDistance();
        var0.setShadowGenerator(var14);
        org.jfree.chart.plot.PolarPlot var17 = new org.jfree.chart.plot.PolarPlot();
        boolean var18 = var17.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var23 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var23.setUpperMargin(10.0d);
        var23.setAxisLineVisible(true);
        javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var29 = var28.getLocation();
        java.awt.Dimension var30 = var28.preferredSize();
        java.awt.Rectangle var31 = var28.bounds();
        java.awt.Point var32 = var17.translateToJava2D(Double.NaN, Double.NaN, var23, var31);
        org.jfree.data.xy.DefaultXYZDataset var34 = new org.jfree.data.xy.DefaultXYZDataset();
        org.jfree.data.DomainOrder var35 = var34.getDomainOrder();
        var17.setDataset(1, var34);
        boolean var37 = var17.isAngleGridlinesVisible();
        org.jfree.ui.RectangleInsets var38 = var17.getInsets();
        var0.setSimpleLabelOffset(var38);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var9 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var9.equals("org.jfree.chart.ChartPanel[,0,0,0var9,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == (-2));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

    }

    public void test286() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test286"); }


        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var10 = var9.getItemLabelFont();
        double var11 = var9.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var15 = var14.getItemLabelFont();
        java.awt.Shape var16 = var14.getBaseLegendShape();
        var9.setShape(var16);
        var6.setLegendBar(var16);
        var6.setDrawBarOutline(true);
        org.jfree.chart.title.LegendTitle var21 = new org.jfree.chart.title.LegendTitle(var6);
        org.jfree.chart.annotations.XYDrawableAnnotation var22 = new org.jfree.chart.annotations.XYDrawableAnnotation(100.0d, 10.0d, 0.0d, (-1.0d), var21);
        java.awt.Paint var23 = var21.getItemPaint();
        org.jfree.chart.block.BlockContainer var24 = var21.getWrapper();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var24);

    }

    public void test287() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test287"); }


        org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis("TimePeriodValue[Week 37, 2013,10]");
        java.util.Date var2 = var1.getMinimumDate();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

    }

    public void test288() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test288"); }


        org.jfree.chart.plot.dial.DialPlot var0 = new org.jfree.chart.plot.dial.DialPlot();
        org.jfree.chart.plot.dial.StandardDialScale var1 = new org.jfree.chart.plot.dial.StandardDialScale();
        int var2 = var0.getLayerIndex(var1);
        var1.setTickLabelsVisible(false);
        var1.setStartAngle(0.2d);
        double var7 = var1.getMajorTickLength();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0.04d);

    }

    public void test289() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test289"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var2 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var2.clearDomainMarkers();
        java.awt.Paint var4 = var2.getRangeGridlinePaint();
        org.jfree.chart.plot.dial.StandardDialRange var5 = new org.jfree.chart.plot.dial.StandardDialRange(0.2d, 10.0d, var4);
        var5.setOuterRadius(0.75d);
        var5.setOuterRadius(1.05d);
        java.awt.Paint var10 = var5.getPaint();
        double var11 = var5.getInnerRadius();
        double var12 = var5.getUpperBound();
        var5.setScaleIndex((-2));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0.48d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 10.0d);

    }

    public void test290() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test290"); }


        org.jfree.data.time.Minute var0 = new org.jfree.data.time.Minute();
        int var1 = var0.getMinute();
        org.jfree.data.time.Hour var2 = var0.getHour();
        int var3 = var2.getMonth();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 9);

    }

    public void test291() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test291"); }


        org.jfree.chart.labels.CustomXYToolTipGenerator var0 = new org.jfree.chart.labels.CustomXYToolTipGenerator();

    }

    public void test292() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test292"); }


        org.jfree.chart.renderer.xy.XYBlockRenderer var2 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.data.xy.CategoryTableXYDataset var3 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var4 = var2.findDomainBounds(var3);
        org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var8 = var7.getItemLabelFont();
        double var9 = var7.getItemLabelAnchorOffset();
        org.jfree.chart.labels.ItemLabelPosition var12 = var7.getNegativeItemLabelPosition(0, 0);
        double var13 = var12.getAngle();
        var2.setNegativeItemLabelPosition(var12);
        org.jfree.chart.labels.XYSeriesLabelGenerator var15 = var2.getLegendItemToolTipGenerator();
        org.jfree.chart.title.LegendTitle var16 = new org.jfree.chart.title.LegendTitle(var2);
        org.jfree.chart.plot.CategoryPlot var17 = new org.jfree.chart.plot.CategoryPlot();
        java.lang.Comparable var18 = var17.getDomainCrosshairColumnKey();
        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var19 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        var19.setUseSeriesOffset(true);
        var19.setBaseSeriesVisible(true);
        var19.setAutoPopulateSeriesShape(false);
        org.jfree.chart.renderer.category.CategoryItemRenderer[] var26 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var19};
        var17.setRenderers(var26);
        var16.setSources(var26);
        org.jfree.ui.RectangleAnchor var29 = var16.getLegendItemGraphicLocation();
        java.lang.Object var30 = var16.clone();
        org.jfree.chart.annotations.XYTitleAnnotation var31 = new org.jfree.chart.annotations.XYTitleAnnotation(3.0d, 360.0d, var16);
        double var32 = var31.getX();
        double var33 = var31.getMaxHeight();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 3.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 0.0d);

    }

    public void test293() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test293"); }


        org.jfree.chart.axis.SubCategoryAxis var1 = new org.jfree.chart.axis.SubCategoryAxis("Combined Range XYPlot");
        java.lang.Number[][] var2 = new java.lang.Number[][] { };
        java.lang.Number[][] var3 = new java.lang.Number[][] { };
        org.jfree.data.category.DefaultIntervalCategoryDataset var4 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var2, var3);
        org.jfree.data.time.Week var6 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var7 = new org.jfree.data.gantt.Task("hi!", var6);
        int var8 = var4.getColumnIndex(var6);
        org.jfree.chart.plot.CategoryMarker var10 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var11 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var13 = var11.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var16 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var17 = var16.getTickLabelPaint();
        var11.setFillPaint(var17, true);
        var10.setLabelPaint(var17);
        org.jfree.chart.plot.CompassPlot var21 = new org.jfree.chart.plot.CompassPlot();
        var10.addChangeListener(var21);
        org.jfree.chart.StandardChartTheme var25 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var26 = var25.getLegendItemPaint();
        java.awt.Paint var27 = var25.getSubtitlePaint();
        java.awt.Font var28 = var25.getLargeFont();
        var21.setLabelFont(var28);
        var1.setTickLabelFont(var6, var28);
        var1.setLowerMargin(0.5d);
        var1.setVisible(false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

    }

    public void test294() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test294"); }


        org.jfree.chart.renderer.xy.XYStepRenderer var0 = new org.jfree.chart.renderer.xy.XYStepRenderer();
        boolean var1 = var0.getUseOutlinePaint();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == false);

    }

    public void test295() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test295"); }


        org.jfree.chart.renderer.GrayPaintScale var0 = new org.jfree.chart.renderer.GrayPaintScale();
        double var1 = var0.getUpperBound();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 1.0d);

    }

    public void test296() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test296"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        boolean var5 = var2.getAntiAlias();
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
        org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
        java.awt.Paint var9 = var8.getZoomOutlinePaint();
        var8.restoreAutoBounds();
        int var11 = var8.getInitialDelay();
        javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var13 = var12.getPreferredSize();
        javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var12.setNextFocusableComponent(var14);
        var12.show();
        javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var18 = var17.getLocation();
        java.awt.Dimension var19 = var17.preferredSize();
        java.awt.Rectangle var20 = var17.bounds();
        var12.scrollRectToVisible(var20);
        var8.computeVisibleRect(var20);
        var8.setDismissDelay(2147483647);
        var8.setZoomOutFactor(10.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 750);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

    }

    public void test297() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test297"); }


        org.jfree.chart.util.RelativeDateFormat var0 = new org.jfree.chart.util.RelativeDateFormat();
        boolean var1 = var0.getShowZeroHours();
        var0.setPositivePrefix("d");
        java.lang.Object var4 = var0.clone();
        var0.setSecondSuffix("ChartChangeEventType.GENERAL");
        org.jfree.chart.util.HexNumberFormat var10 = new org.jfree.chart.util.HexNumberFormat();
        javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var12 = var11.getPreferredSize();
        javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var11.setNextFocusableComponent(var13);
        java.util.Locale var15 = var13.getLocale();
        org.jfree.chart.axis.MonthDateFormat var16 = new org.jfree.chart.axis.MonthDateFormat(var15);
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var17 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", var10, var16);
        org.jfree.chart.util.HexNumberFormat var19 = new org.jfree.chart.util.HexNumberFormat();
        javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var21 = var20.getPreferredSize();
        javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var20.setNextFocusableComponent(var22);
        java.util.Locale var24 = var22.getLocale();
        org.jfree.chart.axis.MonthDateFormat var25 = new org.jfree.chart.axis.MonthDateFormat(var24);
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var26 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", var19, var25);
        org.jfree.chart.labels.StandardPieSectionLabelGenerator var27 = new org.jfree.chart.labels.StandardPieSectionLabelGenerator("Combined Range XYPlot", var10, var19);
        org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator var28 = new org.jfree.chart.labels.BoxAndWhiskerToolTipGenerator("hi!", var10);
        var10.setMinimumIntegerDigits(5);
        var0.setDayFormatter(var10);
        long var32 = var0.getBaseMillis();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 0L);

    }

    public void test298() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test298"); }


        org.jfree.chart.plot.CombinedDomainCategoryPlot var8 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        java.util.List var9 = var8.getSubplots();
        org.jfree.data.statistics.BoxAndWhiskerItem var10 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)(-2208960000000L), (java.lang.Number)Double.NaN, (java.lang.Number)51, (java.lang.Number)0.05d, (java.lang.Number)(byte)100, (java.lang.Number)2.0f, (java.lang.Number)15, (java.lang.Number)1.0f, var9);
        java.lang.String var11 = var10.toString();
        java.lang.Number var12 = var10.getMinOutlier();
        java.util.List var13 = var10.getOutliers();
        java.lang.Number var14 = var10.getMinOutlier();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var12 + "' != '" + 15+ "'", var12.equals(15));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var14 + "' != '" + 15+ "'", var14.equals(15));

    }

    public void test299() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test299"); }


        org.jfree.chart.plot.ThermometerPlot var0 = new org.jfree.chart.plot.ThermometerPlot();
        boolean var1 = var0.isDomainZoomable();
        int var2 = var0.getAxisLocation();
        org.jfree.data.general.ValueDataset var3 = var0.getDataset();
        org.jfree.chart.plot.CompassPlot var4 = new org.jfree.chart.plot.CompassPlot(var3);
        org.jfree.chart.plot.MeterPlot var5 = new org.jfree.chart.plot.MeterPlot(var3);
        java.util.List var6 = var5.getIntervals();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == 2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

    }

    public void test300() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test300"); }


        org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createDownRotationLabelPositions(1.0E-8d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

    }

    public void test301() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test301"); }


        org.jfree.chart.util.RelativeDateFormat var1 = new org.jfree.chart.util.RelativeDateFormat();
        boolean var2 = var1.getShowZeroHours();
        org.jfree.chart.labels.StandardCategoryItemLabelGenerator var3 = new org.jfree.chart.labels.StandardCategoryItemLabelGenerator("0x00000000", var1);
        org.jfree.chart.util.HexNumberFormat var5 = new org.jfree.chart.util.HexNumberFormat();
        org.jfree.chart.axis.NumberTickUnit var7 = new org.jfree.chart.axis.NumberTickUnit(0.05d, var5, 1);
        java.lang.Object var8 = var5.clone();
        boolean var9 = var3.equals(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);

    }

    public void test302() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test302"); }


        java.lang.String[] var2 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
        org.jfree.chart.plot.CompassPlot var4 = new org.jfree.chart.plot.CompassPlot();
        boolean var5 = var3.equals(var4);
        org.jfree.chart.plot.CombinedRangeXYPlot var6 = new org.jfree.chart.plot.CombinedRangeXYPlot(var3);
        org.jfree.chart.util.HexNumberFormat var8 = new org.jfree.chart.util.HexNumberFormat();
        org.jfree.chart.axis.NumberTickUnit var10 = new org.jfree.chart.axis.NumberTickUnit(0.05d, var8, 1);
        java.lang.String var12 = var10.valueToString(1.0d);
        int var13 = var10.getMinorTickCount();
        var3.setTickUnit(var10, false, true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var12 + "' != '" + "0var120000001"+ "'", var12.equals("0var120000001"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 1);

    }

    //    public void test303() throws Throwable {
    //
    //        if (debug) { System.out.println(); System.out.print("RandoopTest4.test303"); }
    //
    //
    //        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
    //        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
    //        var2.setBackgroundImageAlpha(1.0f);
    //        boolean var5 = var2.getAntiAlias();
    //        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
    //        org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
    //        var8.setOpaque(true);
    //        int var11 = var8.getZoomTriggerDistance();
    //        var8.doSaveAs();
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertNotNull(var2);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertTrue(var5 == true);
    //
    //        // Regression assertion (captures the current behavior of the code)
    //        assertTrue(var11 == 10);
    //
    //    }

    public void test304() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test304"); }


        org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
        boolean var1 = var0.isCounterClockwise();
        var0.setMargin(1);
        org.jfree.chart.plot.PolarPlot var5 = new org.jfree.chart.plot.PolarPlot();
        boolean var6 = var5.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var11 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var11.setUpperMargin(10.0d);
        var11.setAxisLineVisible(true);
        javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var17 = var16.getLocation();
        java.awt.Dimension var18 = var16.preferredSize();
        java.awt.Rectangle var19 = var16.bounds();
        java.awt.Point var20 = var5.translateToJava2D(Double.NaN, Double.NaN, var11, var19);
        org.jfree.data.xy.DefaultXYZDataset var22 = new org.jfree.data.xy.DefaultXYZDataset();
        org.jfree.data.DomainOrder var23 = var22.getDomainOrder();
        var5.setDataset(1, var22);
        var5.setAngleOffset(1.0E-8d);
        org.jfree.chart.ChartRenderingInfo var28 = new org.jfree.chart.ChartRenderingInfo();
        org.jfree.chart.entity.EntityCollection var29 = var28.getEntityCollection();
        org.jfree.chart.plot.PlotRenderingInfo var30 = new org.jfree.chart.plot.PlotRenderingInfo(var28);
        javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var32 = var31.getPreferredSize();
        javax.swing.JPanel var33 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var31.setNextFocusableComponent(var33);
        java.util.Locale var35 = var33.getLocale();
        var33.list();
        javax.swing.JPanel var37 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var38 = var37.getPreferredSize();
        boolean var39 = var37.getIgnoreRepaint();
        org.jfree.chart.plot.ContourPlot var41 = new org.jfree.chart.plot.ContourPlot();
        var41.setOutlineVisible(false);
        var37.addPropertyChangeListener("Combined Range XYPlot", var41);
        org.jfree.chart.urls.XYURLGenerator var45 = var41.getURLGenerator();
        org.jfree.chart.ClipPath var46 = var41.getClipPath();
        var33.addPropertyChangeListener(var41);
        javax.swing.JPanel var48 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var49 = var48.getPreferredSize();
        java.awt.image.ColorModel var50 = var48.getColorModel();
        var48.firePropertyChange("", 0.0f, 0.0f);
        javax.swing.JPanel var55 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var56 = var55.getLocation();
        java.awt.Point var57 = var48.getLocation(var56);
        boolean var58 = var33.contains(var57);
        var5.zoomRangeAxes(0.3d, var30, var57);
        javax.swing.JPanel var60 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var61 = var60.getPreferredSize();
        java.awt.image.ColorModel var62 = var60.getColorModel();
        var60.firePropertyChange("", 0.0f, 0.0f);
        javax.swing.JPanel var67 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var68 = var67.getLocation();
        java.awt.Point var69 = var60.getLocation(var68);
        var0.zoomDomainAxes(1.5d, var30, var69);
        org.jfree.chart.renderer.category.CategoryItemRendererState var71 = new org.jfree.chart.renderer.category.CategoryItemRendererState(var30);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var45);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var46);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var48);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var49);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var50);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var55);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var56);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var57);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var60);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var61);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var62);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var67);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var68);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var69);

    }

    public void test305() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test305"); }


        org.jfree.data.general.DefaultPieDataset var0 = new org.jfree.data.general.DefaultPieDataset();

    }

    public void test306() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test306"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        boolean var5 = var2.getAntiAlias();
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
        org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
        java.awt.Paint var9 = var8.getZoomOutlinePaint();
        var8.restoreAutoBounds();
        int var11 = var8.getInitialDelay();
        javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var13 = var12.getPreferredSize();
        javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var12.setNextFocusableComponent(var14);
        var12.show();
        javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var18 = var17.getLocation();
        java.awt.Dimension var19 = var17.preferredSize();
        java.awt.Rectangle var20 = var17.bounds();
        var12.scrollRectToVisible(var20);
        var8.computeVisibleRect(var20);
        javax.swing.JPanel var23 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var24 = var23.getPreferredSize();
        javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var23.setNextFocusableComponent(var25);
        java.util.Locale var27 = var25.getLocale();
        javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var29 = var28.getPreferredSize();
        java.awt.Dimension var30 = var25.getSize(var29);
        java.awt.event.ContainerListener[] var31 = var25.getContainerListeners();
        var25.removeNotify();
        boolean var35 = var25.contains(8, (-2));
        org.jfree.chart.urls.StandardPieURLGenerator var37 = new org.jfree.chart.urls.StandardPieURLGenerator("");
        javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var39 = var38.getPreferredSize();
        javax.swing.JPanel var40 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var38.setNextFocusableComponent(var40);
        var38.show();
        javax.swing.border.Border var43 = var38.getBorder();
        boolean var44 = var38.requestDefaultFocus();
        boolean var45 = var37.equals(var38);
        var38.firePropertyChange("hi!?hi!=100&amp;amp;hi!=1", 500, 3);
        org.jfree.chart.plot.PolarPlot var50 = new org.jfree.chart.plot.PolarPlot();
        boolean var51 = var50.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var56 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var56.setUpperMargin(10.0d);
        var56.setAxisLineVisible(true);
        javax.swing.JPanel var61 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var62 = var61.getLocation();
        java.awt.Dimension var63 = var61.preferredSize();
        java.awt.Rectangle var64 = var61.bounds();
        java.awt.Point var65 = var50.translateToJava2D(Double.NaN, Double.NaN, var56, var64);
        java.awt.Point var66 = var38.getLocation(var65);
        java.awt.Component var67 = var25.findComponentAt(var66);
        java.awt.Point var68 = var8.translateJava2DToScreen(var66);
        org.jfree.data.xy.XYDatasetTableModel var69 = new org.jfree.data.xy.XYDatasetTableModel();
        java.lang.Class var71 = var69.getColumnClass((-1));
        org.jfree.chart.util.HexNumberFormat var73 = new org.jfree.chart.util.HexNumberFormat();
        javax.swing.JPanel var74 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var75 = var74.getPreferredSize();
        javax.swing.JPanel var76 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var74.setNextFocusableComponent(var76);
        java.util.Locale var78 = var76.getLocale();
        org.jfree.chart.axis.MonthDateFormat var79 = new org.jfree.chart.axis.MonthDateFormat(var78);
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var80 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", var73, var79);
        org.jfree.chart.util.RelativeDateFormat var81 = new org.jfree.chart.util.RelativeDateFormat();
        boolean var82 = var81.getShowZeroHours();
        var81.setPositivePrefix("d");
        var81.setMinuteSuffix("hi!?hi!=100&amp;hi!=1");
        boolean var87 = var79.equals("hi!?hi!=100&amp;hi!=1");
        org.jfree.chart.axis.PeriodAxisLabelInfo var88 = new org.jfree.chart.axis.PeriodAxisLabelInfo(var71, var79);
        boolean var89 = var88.getDrawDividers();
        java.lang.Class var90 = var88.getPeriodClass();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.util.EventListener[] var91 = var8.getListeners(var90);
            fail("Expected exception of type java.lang.ClassCastException");
        } catch (java.lang.ClassCastException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 750);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var43);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var61);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var62);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var63);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var64);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var65);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var66);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var67);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var68);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var71);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var74);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var75);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var76);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var78);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var82 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var87 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var89 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var90);

    }

    public void test307() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test307"); }


        org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var3 = var2.getItemLabelFont();
        org.jfree.chart.plot.PiePlot3D var4 = new org.jfree.chart.plot.PiePlot3D();
        java.awt.Stroke var6 = var4.getSectionOutlineStroke((-334));
        boolean var7 = var4.getSimpleLabels();
        javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var10 = var9.getPreferredSize();
        java.awt.image.ColorModel var11 = var9.getColorModel();
        var9.updateUI();
        java.lang.String var13 = var9.toString();
        java.awt.Color var14 = var9.getForeground();
        org.jfree.chart.util.DefaultShadowGenerator var18 = new org.jfree.chart.util.DefaultShadowGenerator(20, var14, 0.5f, (-2), 0.2d);
        int var19 = var18.getDistance();
        var4.setShadowGenerator(var18);
        java.awt.Paint var21 = var4.getLabelOutlinePaint();
        var2.setWallPaint(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var13 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var13.equals("org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == (-2));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

    }

    public void test308() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test308"); }


        org.jfree.chart.StandardChartTheme var2 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var3 = var2.getLegendItemPaint();
        java.awt.Paint var4 = var2.getSubtitlePaint();
        java.awt.Paint var5 = var2.getTickLabelPaint();
        java.awt.Paint var6 = var2.getSubtitlePaint();
        java.awt.Paint var7 = var2.getBaselinePaint();
        org.jfree.chart.plot.Crosshair var8 = new org.jfree.chart.plot.Crosshair();
        double var9 = var8.getValue();
        double var10 = var8.getLabelYOffset();
        java.awt.Font var11 = var8.getLabelFont();
        var2.setRegularFont(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 3.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

    }

    public void test309() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test309"); }


        org.jfree.data.time.TimePeriodValues var3 = new org.jfree.data.time.TimePeriodValues("hi!", "Range[0.0,0.0]", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");

    }

    public void test310() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test310"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var0.setNextFocusableComponent(var2);
        java.util.Locale var4 = var2.getLocale();
        javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var6 = var5.getPreferredSize();
        java.awt.Dimension var7 = var2.getSize(var6);
        java.awt.event.ContainerListener[] var8 = var2.getContainerListeners();
        boolean var11 = var2.inside(2147483647, 10);
        java.awt.Dimension var12 = var2.getMinimumSize();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var2.remove(2);
            fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

    }

    public void test311() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test311"); }


        org.jfree.chart.axis.SubCategoryAxis var1 = new org.jfree.chart.axis.SubCategoryAxis("Combined Range XYPlot");
        java.lang.Number[][] var2 = new java.lang.Number[][] { };
        java.lang.Number[][] var3 = new java.lang.Number[][] { };
        org.jfree.data.category.DefaultIntervalCategoryDataset var4 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var2, var3);
        org.jfree.data.time.Week var6 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var7 = new org.jfree.data.gantt.Task("hi!", var6);
        int var8 = var4.getColumnIndex(var6);
        org.jfree.chart.plot.CategoryMarker var10 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var11 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var13 = var11.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var16 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var17 = var16.getTickLabelPaint();
        var11.setFillPaint(var17, true);
        var10.setLabelPaint(var17);
        org.jfree.chart.plot.CompassPlot var21 = new org.jfree.chart.plot.CompassPlot();
        var10.addChangeListener(var21);
        org.jfree.chart.StandardChartTheme var25 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var26 = var25.getLegendItemPaint();
        java.awt.Paint var27 = var25.getSubtitlePaint();
        java.awt.Font var28 = var25.getLargeFont();
        var21.setLabelFont(var28);
        var1.setTickLabelFont(var6, var28);
        var1.setUpperMargin((-0.21460183660255172d));
        var1.configure();
        org.jfree.chart.renderer.xy.XYSplineRenderer var40 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
        var40.clearSeriesPaints(false);
        boolean var43 = var40.getBaseLinesVisible();
        boolean var46 = var40.getItemShapeFilled((-2), 15);
        org.jfree.chart.plot.PolarPlot var47 = new org.jfree.chart.plot.PolarPlot();
        boolean var48 = var47.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var53 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var53.setUpperMargin(10.0d);
        var53.setAxisLineVisible(true);
        javax.swing.JPanel var58 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var59 = var58.getLocation();
        java.awt.Dimension var60 = var58.preferredSize();
        java.awt.Rectangle var61 = var58.bounds();
        java.awt.Point var62 = var47.translateToJava2D(Double.NaN, Double.NaN, var53, var61);
        var40.setLegendLine(var61);
        org.jfree.chart.axis.AxisState var64 = new org.jfree.chart.axis.AxisState();
        org.jfree.chart.title.TextTitle var67 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var68 = var67.isVisible();
        java.lang.Object var69 = var67.clone();
        org.jfree.ui.RectangleEdge var70 = var67.getPosition();
        var64.moveCursor(4.0d, var70);
        double var72 = var1.getCategorySeriesMiddle((-655360), 5, 15, 20, Double.POSITIVE_INFINITY, var61, var70);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var58);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var59);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var60);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var61);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var62);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var69);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var70);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var72 == Double.NaN);

    }

    public void test312() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test312"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[1.0,1.0]", var2, false);
        int var7 = var6.getDefaultCloseOperation();
        java.awt.MenuBar var8 = var6.getMenuBar();
        var6.show();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 2);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var8);

    }

    public void test313() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test313"); }


        org.jfree.chart.title.TextTitle var1 = new org.jfree.chart.title.TextTitle("hi!");
        org.jfree.ui.RectangleInsets var2 = var1.getMargin();
        java.lang.String[] var9 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var10 = new org.jfree.chart.axis.SymbolAxis("hi!", var9);
        org.jfree.chart.plot.CompassPlot var11 = new org.jfree.chart.plot.CompassPlot();
        boolean var12 = var10.equals(var11);
        java.lang.String var13 = var11.getPlotType();
        java.awt.Paint var14 = var11.getRoseCenterPaint();
        java.awt.Paint var15 = var11.getBackgroundPaint();
        javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var17 = var16.getPreferredSize();
        java.awt.image.ColorModel var18 = var16.getColorModel();
        var16.updateUI();
        java.lang.String var20 = var16.toString();
        boolean var21 = var16.getInheritsPopupMenu();
        javax.swing.InputMap var22 = var16.getInputMap();
        var16.nextFocus();
        boolean var24 = var16.getInheritsPopupMenu();
        javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var26 = var25.getPreferredSize();
        java.awt.image.ColorModel var27 = var25.getColorModel();
        var25.firePropertyChange("", 0.0f, 0.0f);
        java.awt.Color var32 = var25.getForeground();
        var16.setForeground(var32);
        org.jfree.chart.renderer.xy.XYDifferenceRenderer var35 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var15, var32, true);
        org.jfree.chart.block.BlockBorder var36 = new org.jfree.chart.block.BlockBorder((-90.0d), 0.05d, 3.0d, 2.0d, var32);
        org.jfree.chart.renderer.category.BarRenderer3D var39 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var40 = var39.getItemLabelFont();
        double var41 = var39.getItemLabelAnchorOffset();
        org.jfree.chart.axis.CyclicNumberAxis var45 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var46 = var45.getTickLabelPaint();
        var39.setLegendTextPaint(0, var46);
        var39.setItemLabelsVisible(false, true);
        var39.setShadowYOffset(1.0d);
        boolean var53 = var36.equals(1.0d);
        var1.setBorder(var36);
        org.jfree.chart.renderer.xy.WindItemRenderer var55 = new org.jfree.chart.renderer.xy.WindItemRenderer();
        boolean var56 = var1.equals(var55);
        java.awt.Font var57 = var1.getFont();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var13 + "' != '" + "Compass Plot"+ "'", var13.equals("Compass Plot"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var20 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var20.equals("org.jfree.chart.ChartPanel[,0,0,0var20,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var46);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var56 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var57);

    }

    public void test314() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test314"); }


        org.jfree.chart.axis.DateAxis var1 = new org.jfree.chart.axis.DateAxis("0x00000000");
        boolean var3 = var1.isHiddenValue(0L);
        org.jfree.chart.title.TextTitle var6 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var7 = var6.isVisible();
        java.lang.Object var8 = var6.clone();
        var6.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
        double var14 = var6.getWidth();
        javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var16 = var15.getLocation();
        org.jfree.chart.plot.PolarPlot var17 = new org.jfree.chart.plot.PolarPlot();
        boolean var18 = var17.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var23 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var23.setUpperMargin(10.0d);
        var23.setAxisLineVisible(true);
        javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var29 = var28.getLocation();
        java.awt.Dimension var30 = var28.preferredSize();
        java.awt.Rectangle var31 = var28.bounds();
        java.awt.Point var32 = var17.translateToJava2D(Double.NaN, Double.NaN, var23, var31);
        java.awt.Rectangle var33 = var15.getBounds(var31);
        var6.setBounds(var33);
        org.jfree.chart.title.TextTitle var36 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var37 = var36.isVisible();
        java.lang.Object var38 = var36.clone();
        org.jfree.ui.RectangleEdge var39 = var36.getPosition();
        double var40 = var1.valueToJava2D(5.0d, var33, var39);
        var1.setTickMarksVisible(true);
        org.jfree.chart.plot.CombinedDomainXYPlot var43 = new org.jfree.chart.plot.CombinedDomainXYPlot(var1);
        double var44 = var43.getGap();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var18 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == 5.0d);

    }

    public void test315() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test315"); }


        org.jfree.chart.plot.dial.DialTextAnnotation var1 = new org.jfree.chart.plot.dial.DialTextAnnotation("0x00000001");
        org.jfree.chart.StandardChartTheme var4 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        org.jfree.chart.plot.DrawingSupplier var5 = var4.getDrawingSupplier();
        org.jfree.chart.StandardChartTheme var8 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var9 = var8.getLegendItemPaint();
        java.awt.Paint var10 = var8.getSubtitlePaint();
        java.awt.Font var11 = var8.getLargeFont();
        var4.setSmallFont(var11);
        var1.setFont(var11);
        java.lang.Object var14 = var1.clone();
        java.awt.Font var15 = var1.getFont();
        var1.setLabel("[size=0x00000000]");

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

    }

    public void test316() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test316"); }


        org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
        boolean var1 = var0.getSectionOutlinesVisible();
        org.jfree.chart.plot.CombinedRangeXYPlot var2 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var3 = var2.getRangeZeroBaselineStroke();
        java.lang.String var4 = var2.getPlotType();
        org.jfree.chart.plot.CategoryMarker var6 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var7 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var9 = var7.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var12 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var13 = var12.getTickLabelPaint();
        var7.setFillPaint(var13, true);
        var6.setLabelPaint(var13);
        boolean var17 = var2.removeRangeMarker(var6);
        javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var19 = var18.getPreferredSize();
        java.awt.image.ColorModel var20 = var18.getColorModel();
        var18.updateUI();
        java.lang.String var22 = var18.toString();
        boolean var23 = var18.getInheritsPopupMenu();
        double[] var26 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var27 = new org.jfree.chart.annotations.XYPolygonAnnotation(var26);
        java.lang.Object var28 = var27.clone();
        org.jfree.chart.event.AnnotationChangeEvent var29 = new org.jfree.chart.event.AnnotationChangeEvent(var18, var27);
        var2.annotationChanged(var29);
        org.jfree.ui.RectangleInsets var31 = var2.getAxisOffset();
        var0.setSimpleLabelOffset(var31);
        java.lang.Object var33 = var0.clone();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var4 + "' != '" + "Combined Range XYPlot"+ "'", var4.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var22 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var22,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var22.equals("org.jfree.chart.ChartPanel[,0,0,0var22,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

    }

    public void test317() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test317"); }


        org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var2 = var0.findDomainBounds(var1);
        java.lang.Number var3 = org.jfree.data.general.DatasetUtilities.findMaximumDomainValue(var1);
        var1.add(100.0d, Double.NaN, "jfreechart-onetime-");
        var1.clear();
        int var10 = var1.getItemCount(8);
        boolean var11 = var1.isAutoWidth();
        var1.setIntervalWidth(100.0d);
        org.jfree.data.xy.IntervalXYDelegate var14 = new org.jfree.data.xy.IntervalXYDelegate(var1);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            int var18 = org.jfree.chart.renderer.RendererUtilities.findLiveItemsUpperBound(var1, 100, 0.7d, 0.3d);
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var3 + "' != '" + Double.NaN+ "'", var3.equals(Double.NaN));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == true);

    }

    public void test318() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test318"); }


        org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
        java.awt.Stroke var2 = var0.getSectionOutlineStroke((-334));
        boolean var3 = var0.getSimpleLabels();
        org.jfree.chart.plot.AbstractPieLabelDistributor var4 = var0.getLabelDistributor();
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var7 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var11 = var10.getItemLabelFont();
        double var12 = var10.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var15 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var16 = var15.getItemLabelFont();
        java.awt.Shape var17 = var15.getBaseLegendShape();
        var10.setShape(var17);
        var7.setLegendBar(var17);
        var7.setDrawBarOutline(true);
        java.awt.Paint var23 = var7.getLegendTextPaint(0);
        boolean var24 = var7.getUseYInterval();
        var7.setShadowXOffset(Double.NaN);
        org.jfree.ui.GradientPaintTransformer var27 = var7.getGradientPaintTransformer();
        org.jfree.chart.plot.CombinedRangeXYPlot var29 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var30 = var29.getRangeZeroBaselineStroke();
        java.lang.String var31 = var29.getPlotType();
        org.jfree.chart.plot.CategoryMarker var33 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var34 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var36 = var34.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var39 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var40 = var39.getTickLabelPaint();
        var34.setFillPaint(var40, true);
        var33.setLabelPaint(var40);
        boolean var44 = var29.removeRangeMarker(var33);
        org.jfree.chart.axis.AxisLocation var45 = var29.getDomainAxisLocation();
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var48 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var51 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var52 = var51.getItemLabelFont();
        double var53 = var51.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var56 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var57 = var56.getItemLabelFont();
        java.awt.Shape var58 = var56.getBaseLegendShape();
        var51.setShape(var58);
        var48.setLegendBar(var58);
        var48.setDrawBarOutline(true);
        org.jfree.data.xy.CategoryTableXYDataset var63 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var64 = var48.findDomainBounds(var63);
        int var65 = var29.getIndexOf(var48);
        var29.setRangeCrosshairVisible(false);
        org.jfree.chart.renderer.xy.StackedXYBarRenderer var68 = new org.jfree.chart.renderer.xy.StackedXYBarRenderer();
        javax.swing.JPanel var69 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var70 = var69.getPreferredSize();
        java.awt.image.ColorModel var71 = var69.getColorModel();
        var69.updateUI();
        java.lang.String var73 = var69.toString();
        var69.setFocusable(true);
        boolean var76 = var68.equals(var69);
        java.awt.Paint var78 = var68.lookupSeriesOutlinePaint((-1));
        var29.setDomainCrosshairPaint(var78);
        var7.setSeriesOutlinePaint(8, var78);
        var0.setSectionOutlinePaint(var78);
        boolean var82 = var0.getAutoPopulateSectionOutlineStroke();
        var0.setExplodePercent(1043495433, Double.NaN);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var31 + "' != '" + "Combined Range XYPlot"+ "'", var31.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var44 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var45);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var52);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var57);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var58);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var64);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var65 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var69);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var70);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var71);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var73 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var73,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var73.equals("org.jfree.chart.ChartPanel[,0,0,0var73,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var76 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var78);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var82 == false);

    }

    public void test319() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test319"); }


        org.jfree.chart.renderer.category.ScatterRenderer var0 = new org.jfree.chart.renderer.category.ScatterRenderer();
        var0.setUseFillPaint(true);
        var0.setUseFillPaint(false);
        double var5 = var0.getItemMargin();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0.2d);

    }

    public void test320() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test320"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var2 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var2.clearDomainMarkers();
        java.awt.Paint var4 = var2.getRangeGridlinePaint();
        org.jfree.chart.plot.dial.StandardDialRange var5 = new org.jfree.chart.plot.dial.StandardDialRange(0.2d, 10.0d, var4);
        var5.setOuterRadius(0.75d);
        var5.setOuterRadius(1.05d);
        java.awt.Paint var10 = var5.getPaint();
        int var11 = var5.getScaleIndex();
        double var12 = var5.getUpperBound();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 10.0d);

    }

    public void test321() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test321"); }


        org.jfree.chart.renderer.xy.XYBlockRenderer var0 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.data.xy.CategoryTableXYDataset var1 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var2 = var0.findDomainBounds(var1);
        org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var6 = var5.getItemLabelFont();
        double var7 = var5.getItemLabelAnchorOffset();
        org.jfree.chart.labels.ItemLabelPosition var10 = var5.getNegativeItemLabelPosition(0, 0);
        double var11 = var10.getAngle();
        var0.setNegativeItemLabelPosition(var10);
        org.jfree.chart.labels.XYSeriesLabelGenerator var13 = var0.getLegendItemToolTipGenerator();
        double var14 = var0.getBlockHeight();
        double var15 = var0.getBlockWidth();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 1.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1.0d);

    }

    public void test322() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test322"); }


        org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var3 = var2.getItemLabelFont();
        java.awt.Shape var4 = var2.getBaseLegendShape();
        double var5 = var2.getItemMargin();
        org.jfree.chart.plot.ContourPlot var6 = new org.jfree.chart.plot.ContourPlot();
        org.jfree.chart.plot.CategoryMarker var8 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        var6.addRangeMarker(var8);
        org.jfree.chart.urls.StandardXYURLGenerator var13 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
        org.jfree.data.statistics.SimpleHistogramDataset var15 = new org.jfree.data.statistics.SimpleHistogramDataset(100.0f);
        var15.removeAllBins();
        java.lang.String var19 = var13.generateURL(var15, 100, 1);
        var6.setURLGenerator(var13);
        var6.zoom(3.0d);
        var6.zoom(1.0d);
        boolean var25 = var2.equals(1.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 0.2d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var19 + "' != '" + "hi!?hi!=100&amp;hi!=1"+ "'", var19.equals("hi!?hi!=100&amp;hi!=1"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);

    }

    public void test323() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test323"); }


        org.jfree.data.time.Week var1 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var2 = new org.jfree.data.gantt.Task("hi!", var1);
        org.jfree.data.time.TimePeriodValue var4 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var1, (java.lang.Number)10);
        org.jfree.data.time.ohlc.OHLCItem var9 = new org.jfree.data.time.ohlc.OHLCItem(var1, 100.0d, 0.0d, 0.05d, 0.0d);
        org.jfree.chart.plot.XYPlot var10 = new org.jfree.chart.plot.XYPlot();
        java.lang.Object var11 = var10.clone();
        org.jfree.data.ComparableObjectItem var12 = new org.jfree.data.ComparableObjectItem(var9, var10);
        org.jfree.chart.plot.CombinedRangeXYPlot var14 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var15 = var14.getRangeZeroBaselineStroke();
        java.lang.String var16 = var14.getPlotType();
        org.jfree.chart.plot.CategoryMarker var18 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var19 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var21 = var19.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var24 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var25 = var24.getTickLabelPaint();
        var19.setFillPaint(var25, true);
        var18.setLabelPaint(var25);
        boolean var29 = var14.removeRangeMarker(var18);
        org.jfree.chart.axis.AxisLocation var30 = var14.getDomainAxisLocation();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var10.setDomainAxisLocation(1043495433, var30);
            fail("Expected exception of type java.lang.OutOfMemoryError");
        } catch (java.lang.OutOfMemoryError e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var16 + "' != '" + "Combined Range XYPlot"+ "'", var16.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

    }

    public void test324() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test324"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        org.jfree.chart.plot.dial.StandardDialScale var1 = new org.jfree.chart.plot.dial.StandardDialScale();
        var1.setMajorTickIncrement(10.0d);
        double var5 = var1.valueToAngle(0.3d);
        double var6 = var1.getExtent();
        boolean var7 = var0.equals(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 174.49d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == (-170.0d));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);

    }

    public void test325() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test325"); }


        org.jfree.data.xy.XYIntervalSeriesCollection var0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.xy.XYBarDataset var2 = new org.jfree.data.xy.XYBarDataset(var0, 10.0d);
        java.lang.Number var3 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(var0);
        org.jfree.chart.plot.CombinedRangeXYPlot var4 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var5 = var4.getRangeZeroBaselineStroke();
        java.lang.String var6 = var4.getPlotType();
        org.jfree.chart.plot.CategoryMarker var8 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var15 = var14.getTickLabelPaint();
        var9.setFillPaint(var15, true);
        var8.setLabelPaint(var15);
        boolean var19 = var4.removeRangeMarker(var8);
        org.jfree.chart.axis.AxisLocation var20 = var4.getDomainAxisLocation();
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var23 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var26 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var27 = var26.getItemLabelFont();
        double var28 = var26.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var31 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var32 = var31.getItemLabelFont();
        java.awt.Shape var33 = var31.getBaseLegendShape();
        var26.setShape(var33);
        var23.setLegendBar(var33);
        var23.setDrawBarOutline(true);
        org.jfree.data.xy.CategoryTableXYDataset var38 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var39 = var23.findDomainBounds(var38);
        int var40 = var4.getIndexOf(var23);
        boolean var41 = var0.equals(var23);
        org.jfree.chart.needle.LineNeedle var46 = new org.jfree.chart.needle.LineNeedle();
        java.awt.Stroke var47 = var46.getOutlineStroke();
        org.jfree.chart.StandardChartTheme var50 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var51 = var50.getLegendItemPaint();
        org.jfree.chart.annotations.XYBoxAnnotation var52 = new org.jfree.chart.annotations.XYBoxAnnotation(0.0d, 0.2d, 0.05d, (-90.0d), var47, var51);
        var23.addAnnotation(var52);
        java.lang.Boolean var54 = var23.getCreateEntities();
        org.jfree.chart.labels.BubbleXYItemLabelGenerator var55 = new org.jfree.chart.labels.BubbleXYItemLabelGenerator();
        java.text.DateFormat var56 = var55.getZDateFormat();
        java.text.DateFormat var57 = var55.getYDateFormat();
        var23.setBaseItemLabelGenerator(var55);
        javax.swing.JPanel var59 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var60 = var59.getPreferredSize();
        java.awt.image.ColorModel var61 = var59.getColorModel();
        var59.firePropertyChange("", 0.0f, 0.0f);
        java.awt.Dimension var66 = var59.getMaximumSize();
        java.awt.Color var67 = var59.getBackground();
        boolean var68 = javax.swing.JComponent.isLightweightComponent(var59);
        var59.firePropertyChange("0x00000000", 'a', '#');
        org.jfree.data.xy.XYSeries var75 = new org.jfree.data.xy.XYSeries((byte)100, true);
        java.lang.Object var76 = var75.clone();
        int var77 = var75.getMaximumItemCount();
        org.jfree.chart.urls.StandardXYURLGenerator var81 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
        org.jfree.data.statistics.SimpleHistogramDataset var83 = new org.jfree.data.statistics.SimpleHistogramDataset(100.0f);
        var83.removeAllBins();
        java.lang.String var87 = var81.generateURL(var83, 100, 1);
        var75.removeChangeListener(var83);
        boolean var89 = var75.getAllowDuplicateXValues();
        org.jfree.data.xy.XYSeriesCollection var90 = new org.jfree.data.xy.XYSeriesCollection(var75);
        double var92 = var90.getDomainUpperBound(false);
        var59.addVetoableChangeListener(var90);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.String var96 = var55.generateLabel(var90, 5, 19);
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var6 + "' != '" + "Combined Range XYPlot"+ "'", var6.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var47);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var51);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var54);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var56);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var57);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var59);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var60);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var61);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var66);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var67);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var68 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var76);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var77 == 2147483647);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var87 + "' != '" + "hi!?hi!=100&amp;hi!=1"+ "'", var87.equals("hi!?hi!=100&amp;hi!=1"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var89 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var92 == Double.NaN);

    }

    public void test326() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test326"); }


        org.jfree.data.time.TimeSeriesCollection var0 = new org.jfree.data.time.TimeSeriesCollection();
        var0.removeAllSeries();

    }

    public void test327() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test327"); }


        org.jfree.chart.renderer.category.AreaRenderer var0 = new org.jfree.chart.renderer.category.AreaRenderer();

    }

    public void test328() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test328"); }


        org.jfree.chart.util.HexNumberFormat var3 = new org.jfree.chart.util.HexNumberFormat();
        javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var5 = var4.getPreferredSize();
        javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var4.setNextFocusableComponent(var6);
        java.util.Locale var8 = var6.getLocale();
        org.jfree.chart.axis.MonthDateFormat var9 = new org.jfree.chart.axis.MonthDateFormat(var8);
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var10 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", var3, var9);
        javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var12 = var11.getPreferredSize();
        javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var11.setNextFocusableComponent(var13);
        java.util.Locale var15 = var13.getLocale();
        org.jfree.chart.axis.MonthDateFormat var16 = new org.jfree.chart.axis.MonthDateFormat(var15);
        org.jfree.chart.labels.StandardXYToolTipGenerator var17 = new org.jfree.chart.labels.StandardXYToolTipGenerator("Combined Range XYPlot", var9, var16);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var18 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer(10, var17);
        org.jfree.chart.labels.XYItemLabelGenerator var21 = var18.getItemLabelGenerator((-1), 2147483647);
        var18.setDrawSeriesLineAsPath(true);
        var18.setShapesFilled(true);
        org.jfree.chart.plot.DrawingSupplier var26 = var18.getDrawingSupplier();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var26);

    }

    public void test329() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test329"); }


        org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
        org.jfree.chart.renderer.category.BarRenderer3D var7 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var8 = var7.getItemLabelFont();
        java.awt.Shape var9 = var7.getBaseLegendShape();
        org.jfree.chart.entity.ContourEntity var11 = new org.jfree.chart.entity.ContourEntity(var9, "hi!?hi!=100&amp;hi!=1");
        org.jfree.chart.title.TextTitle var13 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var14 = var13.isVisible();
        java.lang.Object var15 = var13.clone();
        java.lang.String var16 = var13.getURLText();
        javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var18 = var17.getPreferredSize();
        java.awt.image.ColorModel var19 = var17.getColorModel();
        var17.updateUI();
        java.lang.String var21 = var17.toString();
        java.awt.Color var22 = var17.getForeground();
        var13.setBackgroundPaint(var22);
        int var24 = var22.getRGB();
        int var25 = var22.getBlue();
        org.jfree.chart.plot.dial.DialPlot var26 = new org.jfree.chart.plot.dial.DialPlot();
        org.jfree.chart.plot.dial.StandardDialScale var27 = new org.jfree.chart.plot.dial.StandardDialScale();
        int var28 = var26.getLayerIndex(var27);
        org.jfree.chart.plot.dial.DialValueIndicator var29 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var30 = var29.getInsets();
        int var31 = var26.getLayerIndex(var29);
        java.awt.Stroke var32 = var29.getOutlineStroke();
        org.jfree.chart.title.TextTitle var34 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var35 = var34.isVisible();
        java.lang.Object var36 = var34.clone();
        java.lang.String var37 = var34.getURLText();
        javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var39 = var38.getPreferredSize();
        java.awt.image.ColorModel var40 = var38.getColorModel();
        var38.updateUI();
        java.lang.String var42 = var38.toString();
        java.awt.Color var43 = var38.getForeground();
        var34.setBackgroundPaint(var43);
        org.jfree.chart.LegendItem var45 = new org.jfree.chart.LegendItem("", "jfreechart-", "hi!", "hi!", var9, var22, var32, var43);
        var0.setBaseSectionOutlinePaint(var22);
        org.jfree.chart.labels.PieSectionLabelGenerator var47 = var0.getLegendLabelToolTipGenerator();
        org.jfree.chart.plot.Crosshair var49 = new org.jfree.chart.plot.Crosshair();
        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var50 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        java.lang.Boolean var52 = var50.getSeriesLinesVisible(10);
        var50.setUseOutlinePaint(true);
        boolean var55 = var49.equals(true);
        java.awt.Paint var56 = var49.getLabelPaint();
        var0.setSectionPaint(0.2d, var56);
        java.awt.Paint var58 = var0.getLabelBackgroundPaint();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == (-13421773));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == 51);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var43);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var47);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var52);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var56);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var58);

    }

    public void test330() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test330"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        java.awt.image.ColorModel var2 = var0.getColorModel();
        var0.firePropertyChange("", 0.0f, 0.0f);
        java.awt.Color var7 = var0.getForeground();
        java.awt.Component var8 = var0.getNextFocusableComponent();
        var0.updateUI();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var8);

    }

    public void test331() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test331"); }


        org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var1 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
        java.lang.Object var2 = var1.clone();
        org.jfree.chart.urls.TimeSeriesURLGenerator var3 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
        org.jfree.chart.renderer.xy.XYStepAreaRenderer var4 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, var1, var3);
        java.awt.Font var5 = var4.getBaseLegendTextFont();
        java.lang.Boolean var7 = var4.getSeriesCreateEntities(3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

    }

    public void test332() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test332"); }


        org.jfree.chart.renderer.RendererUtilities var0 = new org.jfree.chart.renderer.RendererUtilities();

    }

    public void test333() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test333"); }


        org.jfree.chart.plot.dial.DialTextAnnotation var1 = new org.jfree.chart.plot.dial.DialTextAnnotation("0x00000001");
        java.awt.Font var2 = var1.getFont();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

    }

    public void test334() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test334"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        org.jfree.chart.annotations.XYPointerAnnotation var5 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
        double var6 = var5.getLabelOffset();
        org.jfree.ui.TextAnchor var7 = var5.getRotationAnchor();
        boolean var8 = var0.removeAnnotation(var5);
        org.jfree.chart.plot.CategoryMarker var10 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var11 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var13 = var11.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var16 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var17 = var16.getTickLabelPaint();
        var11.setFillPaint(var17, true);
        var10.setLabelPaint(var17);
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer var21 = new org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer();
        org.jfree.chart.plot.CombinedRangeXYPlot var22 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var23 = var22.getRangeZeroBaselineStroke();
        java.lang.String var24 = var22.getPlotType();
        org.jfree.chart.plot.CategoryMarker var26 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var27 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var29 = var27.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var32 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var33 = var32.getTickLabelPaint();
        var27.setFillPaint(var33, true);
        var26.setLabelPaint(var33);
        boolean var37 = var22.removeRangeMarker(var26);
        java.awt.Paint var38 = var22.getRangeZeroBaselinePaint();
        boolean var39 = var22.isRangeCrosshairLockedOnData();
        java.awt.Stroke var40 = var22.getOutlineStroke();
        java.lang.String[] var43 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var44 = new org.jfree.chart.axis.SymbolAxis("hi!", var43);
        org.jfree.chart.plot.CompassPlot var45 = new org.jfree.chart.plot.CompassPlot();
        boolean var46 = var44.equals(var45);
        java.lang.String var47 = var45.getPlotType();
        java.awt.Paint var48 = var45.getRoseCenterPaint();
        java.awt.Paint var49 = var45.getBackgroundPaint();
        javax.swing.JPanel var50 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var51 = var50.getPreferredSize();
        java.awt.image.ColorModel var52 = var50.getColorModel();
        var50.updateUI();
        java.lang.String var54 = var50.toString();
        boolean var55 = var50.getInheritsPopupMenu();
        javax.swing.InputMap var56 = var50.getInputMap();
        var50.nextFocus();
        boolean var58 = var50.getInheritsPopupMenu();
        javax.swing.JPanel var59 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var60 = var59.getPreferredSize();
        java.awt.image.ColorModel var61 = var59.getColorModel();
        var59.firePropertyChange("", 0.0f, 0.0f);
        java.awt.Color var66 = var59.getForeground();
        var50.setForeground(var66);
        org.jfree.chart.renderer.xy.XYDifferenceRenderer var69 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var49, var66, true);
        org.jfree.chart.LegendItem var72 = var69.getLegendItem(10, 51);
        org.jfree.chart.plot.CategoryPlot var73 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var75 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var76 = new org.jfree.data.gantt.Task("hi!", var75);
        org.jfree.data.time.TimePeriodValue var78 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var75, (java.lang.Number)10);
        var73.setDomainCrosshairColumnKey(10);
        java.awt.Stroke var80 = var73.getRangeMinorGridlineStroke();
        var69.setBaseStroke(var80);
        var22.setOutlineStroke(var80);
        var21.setBaseOutlineStroke(var80);
        var10.setStroke(var80);
        var5.setArrowStroke(var80);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 3.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var24 + "' != '" + "Combined Range XYPlot"+ "'", var24.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var37 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var39 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var43);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var47 + "' != '" + "Compass Plot"+ "'", var47.equals("Compass Plot"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var48);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var49);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var50);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var51);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var52);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var54 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var54,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var54.equals("org.jfree.chart.ChartPanel[,0,0,0var54,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var55 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var56);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var58 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var59);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var60);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var61);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var66);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var72);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var80);

    }

    public void test335() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test335"); }


        org.jfree.chart.renderer.category.BarRenderer3D var4 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var5 = var4.getItemLabelFont();
        double var6 = var4.getItemLabelAnchorOffset();
        org.jfree.chart.labels.ItemLabelPosition var9 = var4.getNegativeItemLabelPosition(0, 0);
        double var10 = var9.getAngle();
        org.jfree.ui.TextAnchor var11 = var9.getTextAnchor();
        org.jfree.chart.plot.dial.DialValueIndicator var12 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var13 = var12.getInsets();
        java.awt.Stroke var14 = var12.getOutlineStroke();
        javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var16 = var15.getPreferredSize();
        javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var15.setNextFocusableComponent(var17);
        java.util.Locale var19 = var17.getLocale();
        javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var21 = var20.getPreferredSize();
        java.awt.Dimension var22 = var17.getSize(var21);
        java.awt.event.ContainerListener[] var23 = var17.getContainerListeners();
        javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var25 = var24.getPreferredSize();
        java.awt.image.ColorModel var26 = var24.getColorModel();
        var24.updateUI();
        java.lang.String var28 = var24.toString();
        java.awt.Color var29 = var24.getForeground();
        var17.setBackground(var29);
        var12.setOutlinePaint(var29);
        boolean var32 = var12.isClippedToWindow();
        org.jfree.ui.TextAnchor var33 = var12.getTextAnchor();
        org.jfree.chart.axis.NumberTick var35 = new org.jfree.chart.axis.NumberTick((short)0, "jfreechart-onetime-", var11, var33, 1.0d);
        java.lang.String var36 = var35.toString();
        org.jfree.chart.axis.TickType var37 = var35.getTickType();
        javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var39 = var38.getLocation();
        java.awt.Dimension var40 = var38.preferredSize();
        java.awt.Rectangle var41 = var38.bounds();
        var38.setDoubleBuffered(true);
        org.jfree.chart.axis.CyclicNumberAxis var46 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var47 = var46.getTickLabelPaint();
        var46.setVisible(false);
        java.lang.Object var50 = var46.clone();
        org.jfree.chart.plot.CombinedRangeXYPlot var51 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        org.jfree.chart.annotations.XYPointerAnnotation var56 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
        double var57 = var56.getLabelOffset();
        org.jfree.ui.TextAnchor var58 = var56.getRotationAnchor();
        boolean var59 = var51.removeAnnotation(var56);
        org.jfree.chart.StandardChartTheme var62 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var63 = var62.getLegendItemPaint();
        java.awt.Paint var64 = var62.getSubtitlePaint();
        java.awt.Font var65 = var62.getLargeFont();
        var56.setFont(var65);
        var46.setLabelFont(var65);
        var38.setFont(var65);
        boolean var69 = var37.equals(var65);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var28 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var28,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var28.equals("org.jfree.chart.ChartPanel[,0,0,0var28,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var36 + "' != '" + "jfreechart-onetime-"+ "'", var36.equals("jfreechart-onetime-"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var41);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var47);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var50);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == 3.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var58);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var63);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var64);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var65);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var69 == false);

    }

    public void test336() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test336"); }


        org.jfree.data.xy.VectorDataItem var4 = new org.jfree.data.xy.VectorDataItem((-1.0d), 10.0d, 2.0d, (-1.0d));
        double var5 = var4.getXValue();
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var8 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var11 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var12 = var11.getItemLabelFont();
        double var13 = var11.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var16 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var17 = var16.getItemLabelFont();
        java.awt.Shape var18 = var16.getBaseLegendShape();
        var11.setShape(var18);
        var8.setLegendBar(var18);
        org.jfree.data.general.DefaultKeyedValues2DDataset var23 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        org.jfree.chart.entity.CategoryItemEntity var26 = new org.jfree.chart.entity.CategoryItemEntity(var18, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", var23, 0.0f, true);
        org.jfree.chart.plot.CombinedRangeXYPlot var27 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var28 = var27.getRangeZeroBaselineStroke();
        org.jfree.chart.plot.CategoryMarker var30 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var31 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var33 = var31.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var36 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var37 = var36.getTickLabelPaint();
        var31.setFillPaint(var37, true);
        var30.setLabelPaint(var37);
        org.jfree.chart.annotations.XYShapeAnnotation var41 = new org.jfree.chart.annotations.XYShapeAnnotation(var18, var28, var37);
        boolean var42 = var4.equals(var18);
        org.jfree.data.xy.Vector var43 = var4.getVector();
        double var44 = var43.getX();
        double var45 = var43.getAngle();
        double var46 = var43.getY();
        org.jfree.chart.renderer.category.GanttRenderer var47 = new org.jfree.chart.renderer.category.GanttRenderer();
        java.awt.Paint var48 = var47.getCompletePaint();
        org.jfree.chart.plot.dial.StandardDialFrame var49 = new org.jfree.chart.plot.dial.StandardDialFrame();
        boolean var50 = var49.isClippedToWindow();
        java.awt.Paint var51 = var49.getBackgroundPaint();
        org.jfree.chart.plot.CombinedRangeXYPlot var52 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var53 = var52.getRangeZeroBaselineStroke();
        java.lang.String var54 = var52.getPlotType();
        boolean var55 = var52.isDomainZoomable();
        org.jfree.chart.plot.CombinedRangeXYPlot var56 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var57 = var56.getRangeZeroBaselineStroke();
        var52.setDomainCrosshairStroke(var57);
        var49.setStroke(var57);
        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var60 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        java.lang.Boolean var61 = var60.getBaseItemLabelsVisible();
        var60.setSeriesShapesFilled(1, (java.lang.Boolean)false);
        var60.setDrawOutlines(true);
        org.jfree.chart.renderer.category.BarRenderer3D var69 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var70 = var69.getItemLabelFont();
        double var71 = var69.getItemLabelAnchorOffset();
        java.awt.Shape var73 = var69.getSeriesShape(1);
        org.jfree.chart.renderer.category.BarRenderer3D var77 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var78 = var77.getItemLabelFont();
        double var79 = var77.getItemLabelAnchorOffset();
        org.jfree.chart.axis.CyclicNumberAxis var83 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var84 = var83.getTickLabelPaint();
        var77.setLegendTextPaint(0, var84);
        var69.setSeriesFillPaint(100, var84, true);
        var60.setBaseOutlinePaint(var84, false);
        var49.setForegroundPaint(var84);
        var47.setIncompletePaint(var84);
        boolean var92 = var43.equals(var84);

        // Checks the contract:  equals-hashcode on var16 and var69
        assertTrue("Contract failed: equals-hashcode on var16 and var69", var16.equals(var69) ? var16.hashCode() == var69.hashCode() : true);

        // This assertion (symmetry of equals) fails
        assertTrue("Contract failed: equals-symmetric on var16 and var69.", var16.equals(var69) == var69.equals(var16));

        // This assertion (symmetry of equals) fails
        assertTrue("Contract failed: equals-symmetric on var16 and var77.", var16.equals(var77) == var77.equals(var16));

        // Checks the contract:  equals-hashcode on var27 and var56
        assertTrue("Contract failed: equals-hashcode on var27 and var56", var27.equals(var56) ? var27.hashCode() == var56.hashCode() : true);

        // Checks the contract:  equals-hashcode on var56 and var27
        assertTrue("Contract failed: equals-hashcode on var56 and var27", var56.equals(var27) ? var56.hashCode() == var27.hashCode() : true);

    }

    public void test337() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test337"); }


        org.jfree.chart.util.LogFormat var5 = new org.jfree.chart.util.LogFormat(0.0d, "hi!", true);
        java.lang.Object var6 = var5.clone();
        org.jfree.chart.util.HexNumberFormat var9 = new org.jfree.chart.util.HexNumberFormat();
        javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var11 = var10.getPreferredSize();
        javax.swing.JPanel var12 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var10.setNextFocusableComponent(var12);
        java.util.Locale var14 = var12.getLocale();
        org.jfree.chart.axis.MonthDateFormat var15 = new org.jfree.chart.axis.MonthDateFormat(var14);
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var16 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", var9, var15);
        org.jfree.chart.util.LogFormat var21 = new org.jfree.chart.util.LogFormat(0.0d, "hi!", true);
        javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var23 = var22.getPreferredSize();
        javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var22.setNextFocusableComponent(var24);
        java.util.Locale var26 = var24.getLocale();
        org.jfree.chart.axis.TickUnitSource var27 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var26);
        java.text.NumberFormat var28 = java.text.NumberFormat.getPercentInstance(var26);
        org.jfree.chart.labels.StandardXYItemLabelGenerator var29 = new org.jfree.chart.labels.StandardXYItemLabelGenerator("d", var21, var28);
        org.jfree.chart.labels.StandardPieToolTipGenerator var30 = new org.jfree.chart.labels.StandardPieToolTipGenerator("Combined Range XYPlot", var9, var28);
        org.jfree.chart.labels.StandardCategoryItemLabelGenerator var31 = new org.jfree.chart.labels.StandardCategoryItemLabelGenerator("Combined Range XYPlot", var5, var28);
        org.jfree.chart.labels.StandardCrosshairLabelGenerator var32 = new org.jfree.chart.labels.StandardCrosshairLabelGenerator("hi!", var28);
        java.text.NumberFormat var33 = var32.getNumberFormat();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

    }

    public void test338() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test338"); }


        org.jfree.chart.plot.XYPlot var0 = new org.jfree.chart.plot.XYPlot();
        double var1 = var0.getDomainCrosshairValue();
        org.jfree.chart.plot.dial.DialCap var2 = new org.jfree.chart.plot.dial.DialCap();
        java.awt.Paint var3 = var2.getOutlinePaint();
        double var4 = var2.getRadius();
        org.jfree.chart.renderer.category.DefaultCategoryItemRenderer var5 = new org.jfree.chart.renderer.category.DefaultCategoryItemRenderer();
        org.jfree.chart.urls.CategoryURLGenerator var7 = var5.getSeriesItemURLGenerator(2147483647);
        java.awt.Paint var8 = var5.getBaseOutlinePaint();
        var2.setOutlinePaint(var8);
        var0.setRangeGridlinePaint(var8);
        boolean var11 = var0.isDomainPannable();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0.05d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);

    }

    public void test339() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test339"); }


        org.jfree.chart.entity.StandardEntityCollection var0 = new org.jfree.chart.entity.StandardEntityCollection();
        org.jfree.chart.entity.ChartEntity var3 = var0.getEntity(0.0d, 2.0d);
        org.jfree.chart.entity.ChartEntity var6 = var0.getEntity(10.0d, 1.0d);
        int var7 = var0.getEntityCount();
        org.jfree.chart.entity.ChartEntity var10 = var0.getEntity(12.0d, 1.0E-8d);
        var0.clear();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var10);

    }

    public void test340() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test340"); }


        org.jfree.chart.plot.CombinedDomainCategoryPlot var8 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        java.util.List var9 = var8.getSubplots();
        org.jfree.data.statistics.BoxAndWhiskerItem var10 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)(-2208960000000L), (java.lang.Number)Double.NaN, (java.lang.Number)51, (java.lang.Number)0.05d, (java.lang.Number)(byte)100, (java.lang.Number)2.0f, (java.lang.Number)15, (java.lang.Number)1.0f, var9);
        org.jfree.chart.renderer.category.BarRenderer3D var13 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var14 = var13.getItemLabelFont();
        double var15 = var13.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var18 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var19 = var18.getItemLabelFont();
        java.awt.Shape var20 = var18.getBaseLegendShape();
        var13.setShape(var20);
        org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var23 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((short)10);
        double var24 = var23.getOutlierCoefficient();
        org.jfree.chart.entity.XYItemEntity var29 = new org.jfree.chart.entity.XYItemEntity(var20, var23, 1, 4, "-4,-4,4,4", "100");
        java.lang.Object var30 = var23.clone();
        boolean var31 = var10.equals(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 1.5d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);

    }

    public void test341() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test341"); }


        org.jfree.chart.plot.ThermometerPlot var1 = new org.jfree.chart.plot.ThermometerPlot();
        boolean var2 = var1.isDomainZoomable();
        int var3 = var1.getAxisLocation();
        org.jfree.chart.StandardChartTheme var6 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        org.jfree.chart.plot.DrawingSupplier var7 = var6.getDrawingSupplier();
        org.jfree.chart.plot.dial.StandardDialScale var8 = new org.jfree.chart.plot.dial.StandardDialScale();
        var8.setMajorTickIncrement(10.0d);
        java.awt.Paint var11 = var8.getMinorTickPaint();
        var6.setTickLabelPaint(var11);
        java.awt.Font var13 = var6.getSmallFont();
        var1.setValueFont(var13);
        org.jfree.chart.block.LabelBlock var15 = new org.jfree.chart.block.LabelBlock("100", var13);
        org.jfree.chart.plot.Crosshair var16 = new org.jfree.chart.plot.Crosshair();
        java.awt.Paint var17 = var16.getLabelPaint();
        var15.setPaint(var17);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

    }

    public void test342() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test342"); }


        org.jfree.chart.title.TextTitle var3 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var4 = var3.isVisible();
        java.lang.Object var5 = var3.clone();
        var3.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
        org.jfree.chart.annotations.XYTitleAnnotation var11 = new org.jfree.chart.annotations.XYTitleAnnotation(0.04d, (-90.0d), var3);
        org.jfree.data.xy.XYIntervalSeriesCollection var12 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.xy.XYBarDataset var14 = new org.jfree.data.xy.XYBarDataset(var12, 10.0d);
        java.lang.Number var15 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(var12);
        org.jfree.chart.plot.CombinedRangeXYPlot var16 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var17 = var16.getRangeZeroBaselineStroke();
        java.lang.String var18 = var16.getPlotType();
        org.jfree.chart.plot.CategoryMarker var20 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var21 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var23 = var21.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var26 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var27 = var26.getTickLabelPaint();
        var21.setFillPaint(var27, true);
        var20.setLabelPaint(var27);
        boolean var31 = var16.removeRangeMarker(var20);
        org.jfree.chart.axis.AxisLocation var32 = var16.getDomainAxisLocation();
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var35 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var38 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var39 = var38.getItemLabelFont();
        double var40 = var38.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var43 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var44 = var43.getItemLabelFont();
        java.awt.Shape var45 = var43.getBaseLegendShape();
        var38.setShape(var45);
        var35.setLegendBar(var45);
        var35.setDrawBarOutline(true);
        org.jfree.data.xy.CategoryTableXYDataset var50 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var51 = var35.findDomainBounds(var50);
        int var52 = var16.getIndexOf(var35);
        boolean var53 = var12.equals(var35);
        org.jfree.chart.needle.LineNeedle var58 = new org.jfree.chart.needle.LineNeedle();
        java.awt.Stroke var59 = var58.getOutlineStroke();
        org.jfree.chart.StandardChartTheme var62 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var63 = var62.getLegendItemPaint();
        org.jfree.chart.annotations.XYBoxAnnotation var64 = new org.jfree.chart.annotations.XYBoxAnnotation(0.0d, 0.2d, 0.05d, (-90.0d), var59, var63);
        var35.addAnnotation(var64);
        var11.removeChangeListener(var35);
        double var67 = var11.getMaxWidth();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var18 + "' != '" + "Combined Range XYPlot"+ "'", var18.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var45);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var51);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var59);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var63);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var67 == 0.0d);

    }

    public void test343() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test343"); }


        org.jfree.chart.plot.XYCrosshairState var0 = new org.jfree.chart.plot.XYCrosshairState();
        var0.setCrosshairDistance(0.05d);

    }

    public void test344() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test344"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        java.awt.image.ColorModel var2 = var0.getColorModel();
        var0.updateUI();
        java.lang.String var4 = var0.toString();
        boolean var5 = var0.getInheritsPopupMenu();
        javax.swing.InputMap var6 = var0.getInputMap();
        var0.nextFocus();
        javax.swing.JPanel var8 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var9 = var8.getPreferredSize();
        javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var8.setNextFocusableComponent(var10);
        java.util.Locale var12 = var10.getLocale();
        javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var14 = var13.getPreferredSize();
        java.awt.Dimension var15 = var10.getSize(var14);
        var0.setMinimumSize(var15);
        var0.revalidate();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var4 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var4.equals("org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

    }

    public void test345() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test345"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
        java.lang.String var2 = var0.getPlotType();
        org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var11 = var10.getTickLabelPaint();
        var5.setFillPaint(var11, true);
        var4.setLabelPaint(var11);
        boolean var15 = var0.removeRangeMarker(var4);
        java.awt.Paint var17 = var0.getQuadrantPaint(1);
        org.jfree.chart.plot.DatasetRenderingOrder var18 = var0.getDatasetRenderingOrder();
        java.awt.Stroke var19 = var0.getRangeZeroBaselineStroke();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

    }

    public void test346() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test346"); }


        org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var3 = var2.getItemLabelFont();
        java.awt.Shape var4 = var2.getBaseLegendShape();
        org.jfree.chart.entity.XYAnnotationEntity var8 = new org.jfree.chart.entity.XYAnnotationEntity(var4, 500, "hi!?hi!=15&amp;hi!=10", "Compass Plot");

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

    }

    public void test347() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test347"); }


        org.jfree.data.gantt.TaskSeries var1 = new org.jfree.data.gantt.TaskSeries("hi!");
        org.jfree.data.time.Week var3 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var4 = new org.jfree.data.gantt.Task("hi!", var3);
        org.jfree.data.time.Week var6 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var7 = new org.jfree.data.gantt.Task("hi!", var6);
        var7.setPercentComplete((java.lang.Double)10.0d);
        org.jfree.data.time.Week var11 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var12 = new org.jfree.data.gantt.Task("hi!", var11);
        var12.setPercentComplete((java.lang.Double)10.0d);
        var7.addSubtask(var12);
        var4.addSubtask(var7);
        var1.add(var7);
        java.lang.Object var18 = var1.clone();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

    }

    public void test348() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test348"); }


        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.util.ResourceBundle var1 = java.util.ResourceBundle.getBundle("sun.swing.PrintColorUIResource[r=51,g=51,b=51]");
            fail("Expected exception of type java.util.MissingResourceException");
        } catch (java.util.MissingResourceException e) {
            // Expected exception.
        }

    }

    public void test349() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test349"); }


        org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
        boolean var1 = var0.getSectionOutlinesVisible();
        org.jfree.chart.util.DefaultShadowGenerator var2 = new org.jfree.chart.util.DefaultShadowGenerator();
        float var3 = var2.getShadowOpacity();
        var0.setShadowGenerator(var2);
        boolean var5 = var0.getIgnoreZeroValues();
        double var6 = var0.getMaximumExplodePercent();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0.5f);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 0.0d);

    }

    public void test350() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test350"); }


        org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
        boolean var1 = var0.getSectionOutlinesVisible();
        org.jfree.chart.util.DefaultShadowGenerator var2 = new org.jfree.chart.util.DefaultShadowGenerator();
        float var3 = var2.getShadowOpacity();
        var0.setShadowGenerator(var2);
        java.awt.Stroke var5 = var0.getBaseSectionOutlineStroke();
        double var6 = var0.getMinimumArcAngleToDraw();
        org.jfree.chart.util.HexNumberFormat var10 = new org.jfree.chart.util.HexNumberFormat();
        javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var12 = var11.getPreferredSize();
        javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var11.setNextFocusableComponent(var13);
        java.util.Locale var15 = var13.getLocale();
        org.jfree.chart.axis.MonthDateFormat var16 = new org.jfree.chart.axis.MonthDateFormat(var15);
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var17 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", var10, var16);
        org.jfree.chart.util.LogFormat var22 = new org.jfree.chart.util.LogFormat(0.0d, "hi!", true);
        javax.swing.JPanel var23 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var24 = var23.getPreferredSize();
        javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var23.setNextFocusableComponent(var25);
        java.util.Locale var27 = var25.getLocale();
        org.jfree.chart.axis.TickUnitSource var28 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var27);
        java.text.NumberFormat var29 = java.text.NumberFormat.getPercentInstance(var27);
        org.jfree.chart.labels.StandardXYItemLabelGenerator var30 = new org.jfree.chart.labels.StandardXYItemLabelGenerator("d", var22, var29);
        org.jfree.chart.labels.StandardPieToolTipGenerator var31 = new org.jfree.chart.labels.StandardPieToolTipGenerator("Combined Range XYPlot", var10, var29);
        org.jfree.chart.util.HexNumberFormat var34 = new org.jfree.chart.util.HexNumberFormat();
        org.jfree.chart.labels.StandardCrosshairLabelGenerator var35 = new org.jfree.chart.labels.StandardCrosshairLabelGenerator("", var34);
        boolean var36 = var34.isParseIntegerOnly();
        org.jfree.chart.labels.IntervalCategoryItemLabelGenerator var37 = new org.jfree.chart.labels.IntervalCategoryItemLabelGenerator("Compass Plot", var34);
        java.text.NumberFormat var38 = var37.getNumberFormat();
        org.jfree.chart.labels.StandardPieToolTipGenerator var39 = new org.jfree.chart.labels.StandardPieToolTipGenerator("Combined Range XYPlot", var29, var38);
        var0.setToolTipGenerator(var39);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0.5f);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1.0E-5d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

    }

    public void test351() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test351"); }


        org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
        boolean var1 = var0.getSectionOutlinesVisible();
        var0.setExplodePercent("[size=0x00000000]", 0.25d);
        org.jfree.data.time.Year var7 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var8 = new org.jfree.data.time.Month(1, var7);
        org.jfree.data.time.RegularTimePeriod var9 = var8.previous();
        int var10 = var8.getMonth();
        java.awt.Stroke var11 = var0.getSectionOutlineStroke(var8);
        java.awt.Color var14 = java.awt.Color.getColor("Range[1.0,1.0]", 0);
        var0.setSectionOutlinePaint(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

    }

    public void test352() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test352"); }


        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var2 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var5 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var6 = var5.getItemLabelFont();
        double var7 = var5.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var11 = var10.getItemLabelFont();
        java.awt.Shape var12 = var10.getBaseLegendShape();
        var5.setShape(var12);
        var2.setLegendBar(var12);
        var2.setDrawBarOutline(true);
        org.jfree.chart.title.LegendTitle var17 = new org.jfree.chart.title.LegendTitle(var2);
        java.awt.Font var19 = var2.getSeriesItemLabelFont(100);
        org.jfree.ui.GradientPaintTransformer var20 = var2.getGradientPaintTransformer();
        org.jfree.chart.renderer.category.StackedAreaRenderer var23 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
        org.jfree.chart.LegendItem var26 = var23.getLegendItem((-1), (-1));
        java.awt.Paint var27 = var23.getBaseOutlinePaint();
        org.jfree.chart.plot.dial.DialPlot var29 = new org.jfree.chart.plot.dial.DialPlot();
        org.jfree.chart.plot.dial.StandardDialScale var30 = new org.jfree.chart.plot.dial.StandardDialScale();
        int var31 = var29.getLayerIndex(var30);
        org.jfree.chart.plot.dial.DialValueIndicator var32 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var33 = var32.getInsets();
        int var34 = var29.getLayerIndex(var32);
        java.awt.Stroke var35 = var32.getOutlineStroke();
        java.awt.Paint var36 = var32.getBackgroundPaint();
        var23.setSeriesFillPaint(100, var36);
        var2.setSeriesPaint(52, var36);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

    }

    public void test353() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test353"); }


        org.jfree.chart.title.TextTitle var6 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var7 = var6.isVisible();
        java.lang.Object var8 = var6.clone();
        java.lang.String var9 = var6.getURLText();
        javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var11 = var10.getPreferredSize();
        java.awt.image.ColorModel var12 = var10.getColorModel();
        var10.updateUI();
        java.lang.String var14 = var10.toString();
        java.awt.Color var15 = var10.getForeground();
        var6.setBackgroundPaint(var15);
        org.jfree.chart.annotations.XYDrawableAnnotation var17 = new org.jfree.chart.annotations.XYDrawableAnnotation(0.3d, Double.NEGATIVE_INFINITY, 1.0d, (-0.21460183660255172d), 0.3d, var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var14 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var14,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var14.equals("org.jfree.chart.ChartPanel[,0,0,0var14,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

    }

    public void test354() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test354"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        boolean var2 = var0.getIgnoreRepaint();
        java.awt.dnd.DropTarget var3 = var0.getDropTarget();
        java.awt.event.ContainerListener[] var4 = var0.getContainerListeners();
        var0.paintImmediately(2147483647, 100, 1, 100);
        var0.firePropertyChange("hi!", '#', '#');
        java.awt.LayoutManager var14 = var0.getLayout();
        java.awt.Component.BaselineResizeBehavior var15 = var0.getBaselineResizeBehavior();
        boolean var16 = var0.isValid();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == false);

    }

    public void test355() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test355"); }


        org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset var0 = new org.jfree.data.statistics.DefaultBoxAndWhiskerCategoryDataset();
        org.jfree.chart.plot.CategoryPlot var1 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var3 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var4 = new org.jfree.data.gantt.Task("hi!", var3);
        org.jfree.data.time.TimePeriodValue var6 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var3, (java.lang.Number)10);
        var1.setDomainCrosshairColumnKey(10);
        boolean var8 = var1.getDrawSharedDomainAxis();
        org.jfree.ui.RectangleEdge var10 = var1.getDomainAxisEdge(2);
        org.jfree.data.general.DefaultKeyedValues2DDataset var11 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var11.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        boolean var16 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(var11);
        org.jfree.chart.urls.StandardXYURLGenerator var20 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
        boolean var21 = var11.equals("hi!");
        org.jfree.data.Range var22 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(var11);
        boolean var23 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(var11);
        int var24 = var1.indexOf(var11);
        boolean var25 = var0.equals(var24);
        java.util.List var26 = var0.getColumnKeys();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.removeColumn(100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

    }

    public void test356() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test356"); }


        org.jfree.data.time.TimeTableXYDataset var0 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        var0.remove(var2, 100, false);
        double var8 = var0.getDomainLowerBound(false);
        int var9 = var0.getItemCount();
        org.jfree.data.time.Year var12 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var13 = new org.jfree.data.time.Month(1, var12);
        var0.add(var13, 0.3d, "org.jfree.chart.renderer.NotOutlierException: hi!");
        org.jfree.data.time.Year var18 = new org.jfree.data.time.Year(100);
        org.jfree.chart.plot.CombinedDomainCategoryPlot var19 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        int var20 = var18.compareTo(var19);
        java.lang.String var21 = var18.toString();
        org.jfree.chart.axis.TickUnits var23 = new org.jfree.chart.axis.TickUnits();
        java.lang.Object var24 = var23.clone();
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var27 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var30 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var31 = var30.getItemLabelFont();
        double var32 = var30.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var35 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var36 = var35.getItemLabelFont();
        java.awt.Shape var37 = var35.getBaseLegendShape();
        var30.setShape(var37);
        var27.setLegendBar(var37);
        org.jfree.data.general.DefaultKeyedValues2DDataset var42 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        org.jfree.chart.entity.CategoryItemEntity var45 = new org.jfree.chart.entity.CategoryItemEntity(var37, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", var42, 0.0f, true);
        var45.setToolTipText("Combined Range XYPlot");
        boolean var48 = var23.equals("Combined Range XYPlot");
        org.jfree.chart.axis.StandardTickUnitSource var49 = new org.jfree.chart.axis.StandardTickUnitSource();
        org.jfree.chart.axis.TickUnit var51 = var49.getCeilingTickUnit((-170.0d));
        var23.add(var51);
        var0.add(var18, (short)100, var51, false);
        org.jfree.data.time.Year var57 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var58 = new org.jfree.data.time.Month(1, var57);
        org.jfree.data.time.RegularTimePeriod var59 = var58.previous();
        long var60 = var58.getSerialIndex();
        org.jfree.data.time.Year var61 = var58.getYear();
        var0.remove(var61, 0.5d);
        int[] var66 = new int[] { 0, 10};
        org.jfree.data.general.SubSeriesDataset var67 = new org.jfree.data.general.SubSeriesDataset(var0, var66);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Comparable var69 = var67.getSeriesKey((-655360));
            fail("Expected exception of type java.lang.ArrayIndexOutOfBoundsException");
        } catch (java.lang.ArrayIndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == Double.NaN);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var21 + "' != '" + "100"+ "'", var21.equals("100"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var51);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var59);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 1201L);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var61);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var66);

    }

    public void test357() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test357"); }


        org.jfree.chart.title.TextTitle var1 = new org.jfree.chart.title.TextTitle("hi!");
        var1.setExpandToFitSpace(false);
        java.lang.String[] var10 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var11 = new org.jfree.chart.axis.SymbolAxis("hi!", var10);
        org.jfree.chart.plot.CompassPlot var12 = new org.jfree.chart.plot.CompassPlot();
        boolean var13 = var11.equals(var12);
        java.lang.String var14 = var12.getPlotType();
        java.awt.Paint var15 = var12.getRoseCenterPaint();
        java.awt.Paint var16 = var12.getBackgroundPaint();
        javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var18 = var17.getPreferredSize();
        java.awt.image.ColorModel var19 = var17.getColorModel();
        var17.updateUI();
        java.lang.String var21 = var17.toString();
        boolean var22 = var17.getInheritsPopupMenu();
        javax.swing.InputMap var23 = var17.getInputMap();
        var17.nextFocus();
        boolean var25 = var17.getInheritsPopupMenu();
        javax.swing.JPanel var26 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var27 = var26.getPreferredSize();
        java.awt.image.ColorModel var28 = var26.getColorModel();
        var26.firePropertyChange("", 0.0f, 0.0f);
        java.awt.Color var33 = var26.getForeground();
        var17.setForeground(var33);
        org.jfree.chart.renderer.xy.XYDifferenceRenderer var36 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var16, var33, true);
        org.jfree.chart.block.BlockBorder var37 = new org.jfree.chart.block.BlockBorder((-90.0d), 0.05d, 3.0d, 2.0d, var33);
        var1.setFrame(var37);
        var1.setHeight(0.3d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var14 + "' != '" + "Compass Plot"+ "'", var14.equals("Compass Plot"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var21 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var21.equals("org.jfree.chart.ChartPanel[,0,0,0var21,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

    }

    public void test358() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test358"); }


        org.jfree.data.KeyToGroupMap var0 = new org.jfree.data.KeyToGroupMap();
        java.lang.Comparable var2 = var0.getGroup(10.0f);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var2 + "' != '" + "Default Group"+ "'", var2.equals("Default Group"));

    }

    public void test359() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test359"); }


        org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
        org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(var0, 10);
        org.jfree.data.statistics.SimpleHistogramBin var5 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
        org.jfree.data.general.PieDataset var7 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(var2, 0.05d, 175.0d);
        org.jfree.chart.plot.RingPlot var8 = new org.jfree.chart.plot.RingPlot(var7);
        var8.setSectionDepth(0.02d);
        var8.setInnerSeparatorExtension(0.02d);
        boolean var13 = var8.getSectionOutlinesVisible();
        double var14 = var8.getInnerSeparatorExtension();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == 0.02d);

    }

    public void test360() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test360"); }


        org.jfree.data.xy.XIntervalSeriesCollection var0 = new org.jfree.data.xy.XIntervalSeriesCollection();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Number var3 = var0.getX(2013, 0);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }

    }

    public void test361() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test361"); }


        org.jfree.chart.axis.LogAxis var0 = new org.jfree.chart.axis.LogAxis();
        org.jfree.chart.editor.DefaultLogAxisEditor var1 = new org.jfree.chart.editor.DefaultLogAxisEditor(var0);
        var1.toggleAutoTick();
        boolean var3 = var1.isDoubleBuffered();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);

    }

    public void test362() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test362"); }


        double[] var2 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var3 = new org.jfree.chart.annotations.XYPolygonAnnotation(var2);
        double[] var6 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var7 = new org.jfree.chart.annotations.XYPolygonAnnotation(var6);
        org.jfree.chart.ClipPath var8 = new org.jfree.chart.ClipPath(var2, var6);
        boolean var9 = var8.isFillPath();
        var8.setClip(false);
        org.jfree.chart.plot.GreyPalette var12 = new org.jfree.chart.plot.GreyPalette();
        double var13 = var12.getMaxZ();
        org.jfree.chart.editor.PaletteSample var14 = new org.jfree.chart.editor.PaletteSample(var12);
        javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var16 = var15.getPreferredSize();
        java.awt.image.ColorModel var17 = var15.getColorModel();
        var15.firePropertyChange("", 0.0f, 0.0f);
        java.awt.Color var22 = var15.getForeground();
        boolean var23 = javax.swing.JComponent.isLightweightComponent(var15);
        java.awt.Rectangle var24 = var15.getBounds();
        var14.paintImmediately(var24);
        org.jfree.chart.axis.CyclicNumberAxis var28 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var29 = var28.getTickLabelPaint();
        org.jfree.data.time.Year var33 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var34 = new org.jfree.data.time.Month(1, var33);
        org.jfree.data.time.RegularTimePeriod var35 = var34.previous();
        long var36 = var34.getSerialIndex();
        org.jfree.data.time.TimeTableXYDataset var37 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var39 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var40 = new org.jfree.data.gantt.Task("hi!", var39);
        var37.remove(var39, 100, false);
        org.jfree.chart.axis.PeriodAxis var44 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", var34, var39);
        var44.setMinorTickMarksVisible(false);
        org.jfree.data.time.Year var48 = new org.jfree.data.time.Year(100);
        org.jfree.chart.plot.CombinedDomainCategoryPlot var49 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        int var50 = var48.compareTo(var49);
        var44.setFirst(var48);
        float var52 = var44.getMinorTickMarkOutsideLength();
        java.awt.geom.GeneralPath var53 = var8.generateClipPath(var24, var28, var44);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == (-1.0d));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == 1201L);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var50 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var52 == 2.0f);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var53);

    }

    public void test363() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test363"); }


        org.jfree.chart.util.HexNumberFormat var3 = new org.jfree.chart.util.HexNumberFormat();
        javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var5 = var4.getPreferredSize();
        javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var4.setNextFocusableComponent(var6);
        java.util.Locale var8 = var6.getLocale();
        org.jfree.chart.axis.MonthDateFormat var9 = new org.jfree.chart.axis.MonthDateFormat(var8);
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var10 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", var3, var9);
        javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var12 = var11.getPreferredSize();
        javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var11.setNextFocusableComponent(var13);
        java.util.Locale var15 = var13.getLocale();
        org.jfree.chart.axis.MonthDateFormat var16 = new org.jfree.chart.axis.MonthDateFormat(var15);
        org.jfree.chart.labels.StandardXYToolTipGenerator var17 = new org.jfree.chart.labels.StandardXYToolTipGenerator("Combined Range XYPlot", var9, var16);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var18 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer(10, var17);
        var18.setGapThreshold(2.0d);
        var18.setShapesFilled((java.lang.Boolean)true);
        org.jfree.util.UnitType var23 = var18.getGapThresholdType();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

    }

    public void test364() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test364"); }


        org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var3 = var2.getItemLabelFont();
        double var4 = var2.getLowerClip();
        org.jfree.chart.urls.CategoryURLGenerator var6 = var2.getSeriesItemURLGenerator(100);
        java.awt.Stroke var8 = var2.getSeriesStroke(8);
        double var9 = var2.getMaximumBarWidth();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 1.0d);

    }

    public void test365() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test365"); }


        org.jfree.data.statistics.DefaultMultiValueCategoryDataset var0 = new org.jfree.data.statistics.DefaultMultiValueCategoryDataset();
        int var1 = var0.getColumnCount();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Comparable var3 = var0.getRowKey(51);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0);

    }

    public void test366() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test366"); }


        org.jfree.chart.plot.dial.ArcDialFrame var2 = new org.jfree.chart.plot.dial.ArcDialFrame(0.75d, 10.0d);
        double var3 = var2.getInnerRadius();
        org.jfree.chart.title.TextTitle var5 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var6 = var5.isVisible();
        java.lang.Object var7 = var5.clone();
        var5.setMargin(4.0d, 100.0d, 4.0d, 10.0d);
        double var13 = var5.getWidth();
        javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var15 = var14.getLocation();
        org.jfree.chart.plot.PolarPlot var16 = new org.jfree.chart.plot.PolarPlot();
        boolean var17 = var16.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var22 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var22.setUpperMargin(10.0d);
        var22.setAxisLineVisible(true);
        javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var28 = var27.getLocation();
        java.awt.Dimension var29 = var27.preferredSize();
        java.awt.Rectangle var30 = var27.bounds();
        java.awt.Point var31 = var16.translateToJava2D(Double.NaN, Double.NaN, var22, var30);
        java.awt.Rectangle var32 = var14.getBounds(var30);
        var5.setBounds(var32);
        java.awt.Shape var34 = var2.getWindow(var32);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0.25d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var34);

    }

    public void test367() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test367"); }


        org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
        org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(var0, 10);
        org.jfree.data.statistics.SimpleHistogramBin var5 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
        org.jfree.data.general.PieDataset var7 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(var2, 0.05d, 175.0d);
        org.jfree.chart.plot.RingPlot var8 = new org.jfree.chart.plot.RingPlot(var7);
        var8.setSectionDepth(0.02d);
        var8.setInnerSeparatorExtension(0.02d);
        java.awt.Paint var13 = var8.getShadowPaint();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

    }

    public void test368() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test368"); }


        org.jfree.data.general.DefaultKeyedValues2DDataset var0 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var0.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        int var6 = var0.getColumnIndex("");

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == (-1));

    }

    public void test369() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test369"); }


        org.jfree.data.KeyedObjects2D var0 = new org.jfree.data.KeyedObjects2D();
        javax.swing.JPanel var1 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var2 = var1.getPreferredSize();
        javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var1.setNextFocusableComponent(var3);
        java.util.Locale var5 = var3.getLocale();
        org.jfree.chart.axis.TickUnitSource var6 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var5);
        java.text.NumberFormat var7 = java.text.NumberFormat.getPercentInstance(var5);
        org.jfree.data.time.Year var9 = new org.jfree.data.time.Year();
        var0.addObject(var7, 0.04d, var9);
        java.lang.Object var11 = var0.clone();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var14 = var0.getObject(2013, (-13421773));
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

    }

    public void test370() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test370"); }


        org.jfree.data.DefaultKeyedValues var0 = new org.jfree.data.DefaultKeyedValues();
        org.jfree.chart.renderer.xy.XYBlockRenderer var1 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.data.xy.CategoryTableXYDataset var2 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var3 = var1.findDomainBounds(var2);
        org.jfree.chart.renderer.category.BarRenderer3D var6 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var7 = var6.getItemLabelFont();
        double var8 = var6.getItemLabelAnchorOffset();
        org.jfree.chart.labels.ItemLabelPosition var11 = var6.getNegativeItemLabelPosition(0, 0);
        double var12 = var11.getAngle();
        var1.setNegativeItemLabelPosition(var11);
        org.jfree.chart.labels.XYSeriesLabelGenerator var14 = var1.getLegendItemToolTipGenerator();
        org.jfree.chart.title.LegendTitle var15 = new org.jfree.chart.title.LegendTitle(var1);
        org.jfree.chart.plot.CategoryPlot var16 = new org.jfree.chart.plot.CategoryPlot();
        java.lang.Comparable var17 = var16.getDomainCrosshairColumnKey();
        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var18 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        var18.setUseSeriesOffset(true);
        var18.setBaseSeriesVisible(true);
        var18.setAutoPopulateSeriesShape(false);
        org.jfree.chart.renderer.category.CategoryItemRenderer[] var25 = new org.jfree.chart.renderer.category.CategoryItemRenderer[] { var18};
        var16.setRenderers(var25);
        var15.setSources(var25);
        org.jfree.ui.RectangleAnchor var28 = var15.getLegendItemGraphicLocation();
        java.lang.Object var29 = var15.clone();
        org.jfree.util.SortOrder var30 = var15.getSortOrder();
        var0.sortByKeys(var30);
        java.util.List var32 = var0.getKeys();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

    }

    public void test371() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test371"); }


        org.jfree.chart.plot.dial.DialPlot var0 = new org.jfree.chart.plot.dial.DialPlot();
        org.jfree.chart.plot.dial.StandardDialScale var1 = new org.jfree.chart.plot.dial.StandardDialScale();
        int var2 = var0.getLayerIndex(var1);
        var1.setTickLabelsVisible(false);
        org.jfree.chart.needle.LineNeedle var9 = new org.jfree.chart.needle.LineNeedle();
        java.awt.Stroke var10 = var9.getOutlineStroke();
        org.jfree.chart.StandardChartTheme var13 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var14 = var13.getLegendItemPaint();
        org.jfree.chart.annotations.XYBoxAnnotation var15 = new org.jfree.chart.annotations.XYBoxAnnotation(0.0d, 0.2d, 0.05d, (-90.0d), var10, var14);
        var1.setMajorTickPaint(var14);
        double var17 = var1.getTickLabelOffset();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == 0.1d);

    }

    public void test372() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test372"); }


        org.jfree.chart.renderer.category.DefaultCategoryItemRenderer var0 = new org.jfree.chart.renderer.category.DefaultCategoryItemRenderer();
        org.jfree.chart.urls.CategoryURLGenerator var2 = var0.getSeriesItemURLGenerator(2147483647);
        boolean var3 = var0.getBaseShapesVisible();
        var0.setSeriesItemLabelsVisible(1, (java.lang.Boolean)false);
        org.jfree.chart.LegendItem var9 = var0.getLegendItem(2147483647, 15);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var9);

    }

    public void test373() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test373"); }


        org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
        var0.setDomainCrosshairColumnKey(10);
        org.jfree.chart.plot.CategoryPlot var7 = new org.jfree.chart.plot.CategoryPlot();
        java.lang.Comparable var8 = var7.getDomainCrosshairColumnKey();
        var7.setCrosshairDatasetIndex(100);
        org.jfree.chart.axis.CategoryAnchor var11 = var7.getDomainGridlinePosition();
        var0.setDomainGridlinePosition(var11);
        org.jfree.chart.axis.MonthDateFormat var13 = new org.jfree.chart.axis.MonthDateFormat();
        boolean var14 = var11.equals(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == false);

    }

    public void test374() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test374"); }


        org.jfree.chart.annotations.XYPointerAnnotation var4 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
        double var5 = var4.getLabelOffset();
        org.jfree.ui.TextAnchor var6 = var4.getRotationAnchor();
        org.jfree.chart.StandardChartTheme var9 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var10 = var9.getLegendItemPaint();
        var4.setOutlinePaint(var10);
        var4.setRotationAngle(Double.NaN);
        org.jfree.chart.plot.CombinedRangeXYPlot var14 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var15 = var14.getRangeZeroBaselineStroke();
        java.lang.String var16 = var14.getPlotType();
        boolean var17 = var14.isRangeZeroBaselineVisible();
        java.awt.Paint var18 = var14.getDomainZeroBaselinePaint();
        var4.setOutlinePaint(var18);
        org.jfree.chart.plot.ThermometerPlot var20 = new org.jfree.chart.plot.ThermometerPlot();
        org.jfree.data.general.DatasetGroup var21 = var20.getDatasetGroup();
        org.jfree.chart.plot.Crosshair var22 = new org.jfree.chart.plot.Crosshair();
        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var23 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        java.lang.Boolean var25 = var23.getSeriesLinesVisible(10);
        var23.setUseOutlinePaint(true);
        boolean var28 = var22.equals(true);
        java.awt.Paint var29 = var22.getLabelPaint();
        var20.setValuePaint(var29);
        var4.setBackgroundPaint(var29);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 3.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var16 + "' != '" + "Combined Range XYPlot"+ "'", var16.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

    }

    public void test375() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test375"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        boolean var5 = var2.getAntiAlias();
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
        org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
        java.awt.Paint var9 = var8.getZoomOutlinePaint();
        int var10 = var8.getMaximumDrawWidth();
        var8.zoomInRange(0.5d, 40.05d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1024);

    }

    public void test376() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test376"); }


        org.jfree.chart.annotations.XYPointerAnnotation var4 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
        double var5 = var4.getLabelOffset();
        org.jfree.ui.TextAnchor var6 = var4.getRotationAnchor();
        org.jfree.chart.StandardChartTheme var9 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var10 = var9.getLegendItemPaint();
        var4.setOutlinePaint(var10);
        java.lang.String var12 = var4.getURL();
        var4.setRotationAngle(0.05d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 3.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var12);

    }

    public void test377() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test377"); }


        org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var1 = var0.getPieChart();
        var1.setBackgroundImageAlpha(1.0f);
        boolean var4 = var1.getAntiAlias();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            org.jfree.chart.PolarChartPanel var5 = new org.jfree.chart.PolarChartPanel(var1);
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);

    }

    public void test378() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test378"); }


        org.jfree.chart.renderer.xy.XYShapeRenderer var0 = new org.jfree.chart.renderer.xy.XYShapeRenderer();
        org.jfree.chart.axis.CyclicNumberAxis var3 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        boolean var4 = var3.isAxisLineVisible();
        var3.setAxisLineVisible(true);
        var3.setMinorTickMarksVisible(true);
        org.jfree.ui.RectangleInsets var9 = var3.getTickLabelInsets();
        boolean var10 = var0.equals(var3);
        javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var12 = var11.getPreferredSize();
        java.awt.image.ColorModel var13 = var11.getColorModel();
        var11.firePropertyChange("", 0.0f, 0.0f);
        java.awt.Color var18 = var11.getForeground();
        boolean var19 = var0.equals(var11);
        var0.setUseOutlinePaint(false);
        boolean var22 = var0.getDrawOutlines();
        boolean var23 = var0.isGuideLinesVisible();
        var0.setSeriesCreateEntities(4, true, true);
        java.lang.String[] var31 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var32 = new org.jfree.chart.axis.SymbolAxis("hi!", var31);
        org.jfree.chart.plot.CompassPlot var33 = new org.jfree.chart.plot.CompassPlot();
        boolean var34 = var32.equals(var33);
        java.lang.String var35 = var33.getPlotType();
        java.awt.Paint var36 = var33.getRoseCenterPaint();
        java.awt.Paint var37 = var33.getBackgroundPaint();
        javax.swing.JPanel var38 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var39 = var38.getPreferredSize();
        java.awt.image.ColorModel var40 = var38.getColorModel();
        var38.updateUI();
        java.lang.String var42 = var38.toString();
        boolean var43 = var38.getInheritsPopupMenu();
        javax.swing.InputMap var44 = var38.getInputMap();
        var38.nextFocus();
        boolean var46 = var38.getInheritsPopupMenu();
        javax.swing.JPanel var47 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var48 = var47.getPreferredSize();
        java.awt.image.ColorModel var49 = var47.getColorModel();
        var47.firePropertyChange("", 0.0f, 0.0f);
        java.awt.Color var54 = var47.getForeground();
        var38.setForeground(var54);
        org.jfree.chart.renderer.xy.XYDifferenceRenderer var57 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var37, var54, true);
        var0.setSeriesItemLabelPaint(2, var37, true);
        var0.setUseOutlinePaint(false);
        java.lang.Object var62 = var0.clone();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var23 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var35 + "' != '" + "Compass Plot"+ "'", var35.equals("Compass Plot"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var42 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var42.equals("org.jfree.chart.ChartPanel[,0,0,0var42,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var47);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var48);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var49);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var54);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var62);

    }

    public void test379() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test379"); }


        org.jfree.data.time.DynamicTimeSeriesCollection var2 = new org.jfree.data.time.DynamicTimeSeriesCollection(2, (-1));
        int var4 = var2.offsetFromOldest(51);
        int var5 = var2.getNewestIndex();
        int var7 = var2.getItemCount(20);
        org.jfree.data.Range var9 = var2.getDomainBounds(true);

    }

    public void test380() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test380"); }


        org.jfree.chart.renderer.xy.StackedXYBarRenderer var0 = new org.jfree.chart.renderer.xy.StackedXYBarRenderer();
        javax.swing.JPanel var1 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var2 = var1.getPreferredSize();
        java.awt.image.ColorModel var3 = var1.getColorModel();
        var1.updateUI();
        java.lang.String var5 = var1.toString();
        var1.setFocusable(true);
        boolean var8 = var0.equals(var1);
        org.jfree.chart.needle.PinNeedle var9 = new org.jfree.chart.needle.PinNeedle();
        org.jfree.chart.plot.CategoryPlot var10 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.chart.plot.CategoryMarker var12 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var13 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var15 = var13.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var18 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var19 = var18.getTickLabelPaint();
        var13.setFillPaint(var19, true);
        var12.setLabelPaint(var19);
        var10.setDomainGridlinePaint(var19);
        var9.setHighlightPaint(var19);
        boolean var25 = var0.equals(var19);
        var0.setDefaultEntityRadius((-334));
        int var28 = var0.getPassCount();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var5 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var5,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var5.equals("org.jfree.chart.ChartPanel[,0,0,0var5,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 3);

    }

    public void test381() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test381"); }


        org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
        org.jfree.data.general.PieDataset var2 = org.jfree.data.general.DatasetUtilities.createPieDatasetForRow(var0, 10);
        org.jfree.data.statistics.SimpleHistogramBin var5 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
        org.jfree.data.general.PieDataset var7 = org.jfree.data.general.DatasetUtilities.createConsolidatedPieDataset(var2, 0.05d, 175.0d);
        org.jfree.chart.plot.RingPlot var8 = new org.jfree.chart.plot.RingPlot(var7);
        var8.setSectionDepth(0.02d);
        var8.setInnerSeparatorExtension(0.02d);
        var8.setSectionDepth(175.0d);
        double var16 = var8.getExplodePercent(Double.NaN);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var16 == 0.0d);

    }

    public void test382() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test382"); }


        org.jfree.chart.axis.CategoryLabelPositions var1 = org.jfree.chart.axis.CategoryLabelPositions.createUpRotationLabelPositions(100.0d);
        org.jfree.chart.title.TextTitle var3 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var4 = var3.isVisible();
        java.lang.Object var5 = var3.clone();
        org.jfree.ui.RectangleEdge var6 = var3.getPosition();
        org.jfree.chart.axis.CategoryLabelPosition var7 = var1.getLabelPosition(var6);
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var14 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var17 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var18 = var17.getItemLabelFont();
        double var19 = var17.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var22 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var23 = var22.getItemLabelFont();
        java.awt.Shape var24 = var22.getBaseLegendShape();
        var17.setShape(var24);
        var14.setLegendBar(var24);
        org.jfree.chart.plot.dial.DialValueIndicator var27 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var28 = var27.getInsets();
        java.awt.Stroke var29 = var27.getOutlineStroke();
        javax.swing.JPanel var30 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var31 = var30.getPreferredSize();
        javax.swing.JPanel var32 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var30.setNextFocusableComponent(var32);
        java.util.Locale var34 = var32.getLocale();
        javax.swing.JPanel var35 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var36 = var35.getPreferredSize();
        java.awt.Dimension var37 = var32.getSize(var36);
        java.awt.event.ContainerListener[] var38 = var32.getContainerListeners();
        javax.swing.JPanel var39 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var40 = var39.getPreferredSize();
        java.awt.image.ColorModel var41 = var39.getColorModel();
        var39.updateUI();
        java.lang.String var43 = var39.toString();
        java.awt.Color var44 = var39.getForeground();
        var32.setBackground(var44);
        var27.setOutlinePaint(var44);
        java.awt.Color var47 = var44.brighter();
        org.jfree.chart.renderer.category.BarRenderer3D var50 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var51 = var50.getItemLabelFont();
        java.awt.Shape var52 = var50.getBaseLegendShape();
        double var53 = var50.getItemMargin();
        org.jfree.chart.plot.CombinedRangeXYPlot var54 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var55 = var54.getRangeZeroBaselineStroke();
        var50.setStroke(var55, false);
        org.jfree.chart.renderer.xy.StackedXYAreaRenderer var58 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
        boolean var59 = var58.isOutline();
        var58.setUseFillPaint(true);
        org.jfree.chart.StandardChartTheme var64 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var65 = var64.getLegendItemPaint();
        var58.setShapePaint(var65);
        org.jfree.chart.LegendItem var67 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var24, var47, var55, var65);
        var67.setShapeVisible(false);
        var67.setSeriesIndex(15);
        boolean var72 = var7.equals(var67);
        boolean var73 = var67.isShapeFilled();
        javax.swing.JPanel var74 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var75 = var74.getPreferredSize();
        javax.swing.JPanel var76 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var74.setNextFocusableComponent(var76);
        java.util.Locale var78 = var76.getLocale();
        javax.swing.JPanel var79 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var80 = var79.getPreferredSize();
        java.awt.Dimension var81 = var76.getSize(var80);
        java.awt.event.ContainerListener[] var82 = var76.getContainerListeners();
        boolean var85 = var76.inside(2147483647, 10);
        java.awt.Dimension var86 = var76.getMinimumSize();
        int var87 = var76.getY();
        java.lang.String var88 = var76.getUIClassID();
        java.awt.Color var89 = var76.getForeground();
        var67.setFillPaint(var89);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var34);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var41);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var43 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var43,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var43.equals("org.jfree.chart.ChartPanel[,0,0,0var43,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var47);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var51);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var52);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == 0.2d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var55);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var59 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var65);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var72 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var73 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var74);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var75);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var76);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var78);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var79);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var80);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var81);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var82);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var85 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var86);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var87 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var88 + "' != '" + "PanelUI"+ "'", var88.equals("PanelUI"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var89);

    }

    public void test383() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test383"); }


        org.jfree.data.time.Year var3 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var4 = new org.jfree.data.time.Month(1, var3);
        org.jfree.data.time.RegularTimePeriod var5 = var4.previous();
        long var6 = var4.getSerialIndex();
        org.jfree.data.time.TimeTableXYDataset var7 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var9 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var10 = new org.jfree.data.gantt.Task("hi!", var9);
        var7.remove(var9, 100, false);
        org.jfree.chart.axis.PeriodAxis var14 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", var4, var9);
        java.util.Date var15 = var9.getEnd();
        org.jfree.data.time.Quarter var16 = new org.jfree.data.time.Quarter(var15);
        org.jfree.data.time.Day var17 = new org.jfree.data.time.Day(var15);
        org.jfree.data.time.Minute var18 = new org.jfree.data.time.Minute();
        int var19 = var18.getMinute();
        org.jfree.data.time.Hour var20 = var18.getHour();
        org.jfree.chart.renderer.xy.XYBlockRenderer var21 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.chart.renderer.PaintScale var22 = var21.getPaintScale();
        org.jfree.chart.renderer.PaintScale var23 = var21.getPaintScale();
        boolean var24 = var21.getDataBoundsIncludesVisibleSeriesOnly();
        org.jfree.ui.RectangleAnchor var25 = var21.getBlockAnchor();
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var28 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var31 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var32 = var31.getItemLabelFont();
        double var33 = var31.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var36 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var37 = var36.getItemLabelFont();
        java.awt.Shape var38 = var36.getBaseLegendShape();
        var31.setShape(var38);
        var28.setLegendBar(var38);
        var28.setDrawBarOutline(true);
        org.jfree.data.xy.CategoryTableXYDataset var43 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var44 = var28.findDomainBounds(var43);
        org.jfree.data.xy.XYIntervalSeriesCollection var45 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.xy.XYBarDataset var47 = new org.jfree.data.xy.XYBarDataset(var45, 10.0d);
        var47.setBarWidth(2.0d);
        org.jfree.chart.axis.AxisCollection var50 = new org.jfree.chart.axis.AxisCollection();
        java.util.List var51 = var50.getAxesAtLeft();
        org.jfree.data.general.DefaultKeyedValues2DDataset var52 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var52.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        boolean var57 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(var52);
        org.jfree.data.Range var59 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(var52, true);
        org.jfree.data.Range var61 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(var47, var51, var59, true);
        org.jfree.data.Range var63 = org.jfree.data.general.DatasetUtilities.findDomainBounds(var43, var51, true);
        java.lang.Number var64 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue(var43);
        org.jfree.data.Range var65 = var21.findRangeBounds(var43);
        org.jfree.data.time.Year var68 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var69 = new org.jfree.data.time.Month(1, var68);
        org.jfree.data.time.RegularTimePeriod var70 = var69.previous();
        long var71 = var69.getSerialIndex();
        org.jfree.data.time.Year var72 = var69.getYear();
        boolean var73 = var43.equals(var69);
        org.jfree.data.time.Minute var74 = new org.jfree.data.time.Minute();
        int var75 = var74.getMinute();
        org.jfree.data.time.Hour var76 = var74.getHour();
        org.jfree.data.time.Day var77 = var76.getDay();
        org.jfree.data.time.Minute var78 = new org.jfree.data.time.Minute();
        int var79 = var78.getMinute();
        org.jfree.data.time.Hour var80 = var78.getHour();
        org.jfree.data.time.Year var83 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var84 = new org.jfree.data.time.Month(1, var83);
        java.util.Locale var85 = javax.swing.JComponent.getDefaultLocale();
        org.jfree.chart.axis.MonthDateFormat var87 = new org.jfree.chart.axis.MonthDateFormat(var85, 2147483647);
        java.util.Calendar var88 = var87.getCalendar();
        long var89 = var84.getLastMillisecond(var88);
        long var90 = var80.getLastMillisecond(var88);
        long var91 = var77.getLastMillisecond(var88);
        long var92 = var69.getFirstMillisecond(var88);
        long var93 = var18.getFirstMillisecond(var88);
        long var94 = var17.getFirstMillisecond(var88);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 1201L);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var51);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var57 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var59);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var61);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var63);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var64 + "' != '" + Double.NaN+ "'", var64.equals(Double.NaN));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var65);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var70);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var71 == 1201L);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var72);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var73 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var75 == 19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var76);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var77);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var79 == 19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var80);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var85);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var88);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var89 == (-59008924800001L));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var90 == 1378965599999L);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var91 == 1378969199999L);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var92 == (-59011603200000L));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var93 == 1378963140000L);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var94 == 1379142000000L);

    }

    public void test384() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test384"); }


        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var6 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var9 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var10 = var9.getItemLabelFont();
        double var11 = var9.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var14 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var15 = var14.getItemLabelFont();
        java.awt.Shape var16 = var14.getBaseLegendShape();
        var9.setShape(var16);
        var6.setLegendBar(var16);
        org.jfree.chart.plot.dial.DialValueIndicator var19 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var20 = var19.getInsets();
        java.awt.Stroke var21 = var19.getOutlineStroke();
        javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var23 = var22.getPreferredSize();
        javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var22.setNextFocusableComponent(var24);
        java.util.Locale var26 = var24.getLocale();
        javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var28 = var27.getPreferredSize();
        java.awt.Dimension var29 = var24.getSize(var28);
        java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
        javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var32 = var31.getPreferredSize();
        java.awt.image.ColorModel var33 = var31.getColorModel();
        var31.updateUI();
        java.lang.String var35 = var31.toString();
        java.awt.Color var36 = var31.getForeground();
        var24.setBackground(var36);
        var19.setOutlinePaint(var36);
        java.awt.Color var39 = var36.brighter();
        org.jfree.chart.renderer.category.BarRenderer3D var42 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var43 = var42.getItemLabelFont();
        java.awt.Shape var44 = var42.getBaseLegendShape();
        double var45 = var42.getItemMargin();
        org.jfree.chart.plot.CombinedRangeXYPlot var46 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var47 = var46.getRangeZeroBaselineStroke();
        var42.setStroke(var47, false);
        org.jfree.chart.renderer.xy.StackedXYAreaRenderer var50 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer();
        boolean var51 = var50.isOutline();
        var50.setUseFillPaint(true);
        org.jfree.chart.StandardChartTheme var56 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var57 = var56.getLegendItemPaint();
        var50.setShapePaint(var57);
        org.jfree.chart.LegendItem var59 = new org.jfree.chart.LegendItem("Compass Plot", "Combined Range XYPlot", "d", "jfreechart-onetime-", var16, var39, var47, var57);
        var59.setShapeVisible(false);
        var59.setURLText("0x00000001");
        java.awt.Font var64 = var59.getLabelFont();
        org.jfree.chart.renderer.category.GanttRenderer var65 = new org.jfree.chart.renderer.category.GanttRenderer();
        java.lang.String[] var68 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var69 = new org.jfree.chart.axis.SymbolAxis("hi!", var68);
        org.jfree.chart.plot.CompassPlot var70 = new org.jfree.chart.plot.CompassPlot();
        boolean var71 = var69.equals(var70);
        java.lang.String var72 = var70.getPlotType();
        java.awt.Paint var73 = var70.getRoseCenterPaint();
        var65.setIncompletePaint(var73);
        org.jfree.chart.labels.CategorySeriesLabelGenerator var75 = var65.getLegendItemLabelGenerator();
        java.awt.Paint var76 = var65.getCompletePaint();
        org.jfree.ui.GradientPaintTransformer var77 = var65.getGradientPaintTransformer();
        var59.setFillPaintTransformer(var77);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var43);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0.2d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var47);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var51 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var57);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var64);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var68);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var71 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var72 + "' != '" + "Compass Plot"+ "'", var72.equals("Compass Plot"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var73);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var75);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var76);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var77);

    }

    public void test385() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test385"); }


        org.jfree.chart.plot.PolarPlot var0 = new org.jfree.chart.plot.PolarPlot();
        boolean var1 = var0.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var6 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var6.setUpperMargin(10.0d);
        var6.setAxisLineVisible(true);
        javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var12 = var11.getLocation();
        java.awt.Dimension var13 = var11.preferredSize();
        java.awt.Rectangle var14 = var11.bounds();
        java.awt.Point var15 = var0.translateToJava2D(Double.NaN, Double.NaN, var6, var14);
        org.jfree.data.xy.DefaultXYZDataset var17 = new org.jfree.data.xy.DefaultXYZDataset();
        org.jfree.data.DomainOrder var18 = var17.getDomainOrder();
        var0.setDataset(1, var17);
        org.jfree.data.general.DefaultKeyedValues2DDataset var21 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var21.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        boolean var26 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(var21);
        java.util.List var27 = var21.getColumnKeys();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.mapDatasetToAxes(19, var27);
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

    }

    public void test386() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test386"); }


        org.jfree.data.time.Second var0 = new org.jfree.data.time.Second();
        org.jfree.data.time.TimeSeries var1 = new org.jfree.data.time.TimeSeries(var0);
        var1.setMaximumItemCount(0);
        boolean var4 = var1.getNotify();
        double var5 = var1.getMaxY();
        var1.clear();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == Double.NaN);

    }

    public void test387() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test387"); }


        org.jfree.chart.renderer.OutlierListCollection var0 = new org.jfree.chart.renderer.OutlierListCollection();
        boolean var1 = var0.isHighFarOut();
        org.jfree.chart.renderer.Outlier var5 = new org.jfree.chart.renderer.Outlier((-170.0d), (-1.0d), (-0.7853981633974483d));
        javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var7 = var6.getLocation();
        java.awt.Dimension var8 = var6.preferredSize();
        var6.paintImmediately(100, 100, 10, (-1));
        org.jfree.chart.plot.PolarPlot var14 = new org.jfree.chart.plot.PolarPlot();
        boolean var15 = var14.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var20 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var20.setUpperMargin(10.0d);
        var20.setAxisLineVisible(true);
        javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var26 = var25.getLocation();
        java.awt.Dimension var27 = var25.preferredSize();
        java.awt.Rectangle var28 = var25.bounds();
        java.awt.Point var29 = var14.translateToJava2D(Double.NaN, Double.NaN, var20, var28);
        boolean var30 = var6.contains(var29);
        var5.setPoint(var29);
        boolean var32 = var0.add(var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);

    }

    public void test388() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test388"); }


        org.jfree.chart.plot.MultiplePiePlot var0 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var1 = var0.getPieChart();
        org.jfree.chart.plot.dial.DialValueIndicator var2 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var3 = var2.getInsets();
        java.awt.Stroke var4 = var2.getOutlineStroke();
        javax.swing.JPanel var5 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var6 = var5.getPreferredSize();
        javax.swing.JPanel var7 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var5.setNextFocusableComponent(var7);
        java.util.Locale var9 = var7.getLocale();
        javax.swing.JPanel var10 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var11 = var10.getPreferredSize();
        java.awt.Dimension var12 = var7.getSize(var11);
        java.awt.event.ContainerListener[] var13 = var7.getContainerListeners();
        javax.swing.JPanel var14 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var15 = var14.getPreferredSize();
        java.awt.image.ColorModel var16 = var14.getColorModel();
        var14.updateUI();
        java.lang.String var18 = var14.toString();
        java.awt.Color var19 = var14.getForeground();
        var7.setBackground(var19);
        var2.setOutlinePaint(var19);
        javax.swing.JPanel var22 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var23 = var22.getPreferredSize();
        javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var22.setNextFocusableComponent(var24);
        java.util.Locale var26 = var24.getLocale();
        javax.swing.JPanel var27 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var28 = var27.getPreferredSize();
        java.awt.Dimension var29 = var24.getSize(var28);
        java.awt.event.ContainerListener[] var30 = var24.getContainerListeners();
        javax.swing.JPanel var31 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var32 = var31.getPreferredSize();
        java.awt.image.ColorModel var33 = var31.getColorModel();
        var31.updateUI();
        java.lang.String var35 = var31.toString();
        java.awt.Color var36 = var31.getForeground();
        var24.setBackground(var36);
        var2.setOutlinePaint(var36);
        var1.setBorderPaint(var36);
        org.jfree.chart.plot.CategoryPlot var40 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var42 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var43 = new org.jfree.data.gantt.Task("hi!", var42);
        org.jfree.data.time.TimePeriodValue var45 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var42, (java.lang.Number)10);
        var40.setDomainCrosshairColumnKey(10);
        boolean var47 = var40.getDrawSharedDomainAxis();
        boolean var48 = var40.getDrawSharedDomainAxis();
        var40.clearRangeMarkers(0);
        org.jfree.chart.plot.CombinedRangeXYPlot var51 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var40.addChangeListener(var51);
        org.jfree.chart.event.PlotChangeEvent var53 = new org.jfree.chart.event.PlotChangeEvent(var51);
        org.jfree.chart.plot.Plot var54 = var53.getPlot();
        var1.plotChanged(var53);
        org.jfree.chart.plot.CombinedDomainCategoryPlot var64 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        java.util.List var65 = var64.getSubplots();
        org.jfree.data.statistics.BoxAndWhiskerItem var66 = new org.jfree.data.statistics.BoxAndWhiskerItem((java.lang.Number)(-2208960000000L), (java.lang.Number)Double.NaN, (java.lang.Number)51, (java.lang.Number)0.05d, (java.lang.Number)(byte)100, (java.lang.Number)2.0f, (java.lang.Number)15, (java.lang.Number)1.0f, var65);
        java.lang.Number var67 = var66.getQ1();
        java.util.List var68 = var66.getOutliers();
        var1.setSubtitles(var68);
        boolean var70 = var1.isBorderVisible();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var18 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var18.equals("org.jfree.chart.ChartPanel[,0,0,0var18,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var35 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var35.equals("org.jfree.chart.ChartPanel[,0,0,0var35,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var47 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var54);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var65);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var67 + "' != '" + 51+ "'", var67.equals(51));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var68);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var70 == false);

    }

    public void test389() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test389"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        boolean var5 = var2.getAntiAlias();
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
        org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
        java.awt.Paint var9 = var8.getZoomOutlinePaint();
        java.io.File var10 = var8.getDefaultDirectoryForSaveAs();
        double var11 = var8.getZoomOutFactor();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 2.0d);

    }

    public void test390() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test390"); }


        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        java.lang.Boolean var1 = var0.getBaseItemLabelsVisible();
        boolean var2 = var0.getDrawOutlines();
        org.jfree.chart.renderer.category.BarRenderer3D var6 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var7 = var6.getItemLabelFont();
        double var8 = var6.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var11 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var12 = var11.getItemLabelFont();
        java.awt.Shape var13 = var11.getBaseLegendShape();
        var6.setShape(var13);
        var0.setLegendShape(8, var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var1 + "' != '" + false+ "'", var1.equals(false));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

    }

    public void test391() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test391"); }


        org.jfree.data.time.TimeTableXYDataset var0 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        var0.remove(var2, 100, false);
        double var8 = var0.getDomainLowerBound(false);
        int var9 = var0.getItemCount();
        org.jfree.data.time.Year var12 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var13 = new org.jfree.data.time.Month(1, var12);
        var0.add(var13, 0.3d, "org.jfree.chart.renderer.NotOutlierException: hi!");
        org.jfree.data.time.Year var18 = new org.jfree.data.time.Year(100);
        org.jfree.chart.plot.CombinedDomainCategoryPlot var19 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        int var20 = var18.compareTo(var19);
        java.lang.String var21 = var18.toString();
        org.jfree.chart.axis.TickUnits var23 = new org.jfree.chart.axis.TickUnits();
        java.lang.Object var24 = var23.clone();
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var27 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var30 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var31 = var30.getItemLabelFont();
        double var32 = var30.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var35 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var36 = var35.getItemLabelFont();
        java.awt.Shape var37 = var35.getBaseLegendShape();
        var30.setShape(var37);
        var27.setLegendBar(var37);
        org.jfree.data.general.DefaultKeyedValues2DDataset var42 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        org.jfree.chart.entity.CategoryItemEntity var45 = new org.jfree.chart.entity.CategoryItemEntity(var37, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", var42, 0.0f, true);
        var45.setToolTipText("Combined Range XYPlot");
        boolean var48 = var23.equals("Combined Range XYPlot");
        org.jfree.chart.axis.StandardTickUnitSource var49 = new org.jfree.chart.axis.StandardTickUnitSource();
        org.jfree.chart.axis.TickUnit var51 = var49.getCeilingTickUnit((-170.0d));
        var23.add(var51);
        var0.add(var18, (short)100, var51, false);
        org.jfree.data.time.Year var57 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var58 = new org.jfree.data.time.Month(1, var57);
        org.jfree.data.time.RegularTimePeriod var59 = var58.previous();
        long var60 = var58.getSerialIndex();
        org.jfree.data.time.Year var61 = var58.getYear();
        var0.remove(var61, 0.5d);
        int[] var66 = new int[] { 0, 10};
        org.jfree.data.general.SubSeriesDataset var67 = new org.jfree.data.general.SubSeriesDataset(var0, var66);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            double var70 = var0.getStartXValue(1043495433, 100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == Double.NaN);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var21 + "' != '" + "100"+ "'", var21.equals("100"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var51);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var59);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var60 == 1201L);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var61);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var66);

    }

    public void test392() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test392"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
        java.lang.String var2 = var0.getPlotType();
        org.jfree.chart.plot.CategoryMarker var4 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var5 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var7 = var5.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var10 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var11 = var10.getTickLabelPaint();
        var5.setFillPaint(var11, true);
        var4.setLabelPaint(var11);
        boolean var15 = var0.removeRangeMarker(var4);
        java.awt.Paint var17 = var0.getQuadrantPaint(1);
        org.jfree.chart.axis.CyclicNumberAxis var20 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        boolean var21 = var20.isAxisLineVisible();
        var20.setAxisLineVisible(true);
        var20.setMinorTickMarksVisible(true);
        org.jfree.chart.plot.CombinedRangeXYPlot var26 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var27 = var26.getRangeZeroBaselineStroke();
        org.jfree.chart.plot.CombinedRangeXYPlot var28 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var29 = var28.getRangeZeroBaselineStroke();
        var26.setRangeGridlineStroke(var29);
        var26.setDomainMinorGridlinesVisible(true);
        var26.setRangeZeroBaselineVisible(true);
        var20.setPlot(var26);
        var0.setDomainAxis(var20);
        var0.mapDatasetToRangeAxis(2013, 2013);
        org.jfree.chart.axis.ValueAxis var40 = var0.getRangeAxis();
        boolean var41 = var0.isDomainMinorGridlinesVisible();
        org.jfree.chart.plot.SeriesRenderingOrder var42 = var0.getSeriesRenderingOrder();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var2 + "' != '" + "Combined Range XYPlot"+ "'", var2.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var42);

    }

    public void test393() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test393"); }


        java.lang.String[] var2 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
        org.jfree.chart.plot.CompassPlot var4 = new org.jfree.chart.plot.CompassPlot();
        boolean var5 = var3.equals(var4);
        java.lang.String var6 = var4.getPlotType();
        java.awt.Paint var7 = var4.getRoseCenterPaint();
        java.awt.Paint var8 = var4.getBackgroundPaint();
        javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var10 = var9.getPreferredSize();
        java.awt.image.ColorModel var11 = var9.getColorModel();
        var9.updateUI();
        java.lang.String var13 = var9.toString();
        boolean var14 = var9.getInheritsPopupMenu();
        javax.swing.InputMap var15 = var9.getInputMap();
        var9.nextFocus();
        boolean var17 = var9.getInheritsPopupMenu();
        javax.swing.JPanel var18 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var19 = var18.getPreferredSize();
        java.awt.image.ColorModel var20 = var18.getColorModel();
        var18.firePropertyChange("", 0.0f, 0.0f);
        java.awt.Color var25 = var18.getForeground();
        var9.setForeground(var25);
        org.jfree.chart.renderer.xy.XYDifferenceRenderer var28 = new org.jfree.chart.renderer.xy.XYDifferenceRenderer(var8, var25, true);
        org.jfree.chart.labels.StandardXYSeriesLabelGenerator var29 = new org.jfree.chart.labels.StandardXYSeriesLabelGenerator();
        var28.setLegendItemLabelGenerator(var29);
        java.awt.Paint var32 = var28.getLegendTextPaint((-2));
        java.awt.Paint var33 = var28.getPositivePaint();
        org.jfree.chart.labels.XYToolTipGenerator var35 = var28.getSeriesToolTipGenerator(1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var6 + "' != '" + "Compass Plot"+ "'", var6.equals("Compass Plot"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var13 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var13.equals("org.jfree.chart.ChartPanel[,0,0,0var13,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var17 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var35);

    }

    public void test394() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test394"); }


        org.jfree.data.xy.XYInterval var5 = new org.jfree.data.xy.XYInterval(0.02d, 174.49d, 2.0d, 0.48d, 0.02d);

    }

    public void test395() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test395"); }


        org.jfree.chart.renderer.xy.StackedXYAreaRenderer2 var0 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer2();
        int var1 = var0.getPassCount();
        int var2 = var0.getPassCount();
        org.jfree.chart.renderer.xy.XYLineAndShapeRenderer var4 = new org.jfree.chart.renderer.xy.XYLineAndShapeRenderer();
        org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var8 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
        java.lang.Object var9 = var8.clone();
        org.jfree.chart.urls.TimeSeriesURLGenerator var10 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
        org.jfree.chart.renderer.xy.XYStepAreaRenderer var11 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, var8, var10);
        org.jfree.chart.renderer.xy.StandardXYItemRenderer var12 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, var8);
        java.text.NumberFormat var13 = var8.getYFormat();
        org.jfree.chart.urls.StandardXYURLGenerator var17 = new org.jfree.chart.urls.StandardXYURLGenerator("hi!", "hi!", "hi!");
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var18 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer(15, var8, var17);
        java.lang.String var19 = var8.getNullYString();
        var4.setBaseToolTipGenerator(var8);
        var0.setSeriesToolTipGenerator(22, var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var19 + "' != '" + "null"+ "'", var19.equals("null"));

    }

    public void test396() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test396"); }


        org.jfree.chart.labels.HighLowItemLabelGenerator var0 = new org.jfree.chart.labels.HighLowItemLabelGenerator();
        org.jfree.data.time.TimeTableXYDataset var1 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var3 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var4 = new org.jfree.data.gantt.Task("hi!", var3);
        var1.remove(var3, 100, false);
        org.jfree.data.xy.XYBarDataset var9 = new org.jfree.data.xy.XYBarDataset(var1, Double.NaN);
        boolean var10 = var1.getDomainIsPointsInTime();
        java.lang.String var13 = var0.generateToolTip(var1, 52, 1043495433);
        org.jfree.chart.plot.PolarPlot var14 = new org.jfree.chart.plot.PolarPlot();
        boolean var15 = var14.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var20 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var20.setUpperMargin(10.0d);
        var20.setAxisLineVisible(true);
        javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var26 = var25.getLocation();
        java.awt.Dimension var27 = var25.preferredSize();
        java.awt.Rectangle var28 = var25.bounds();
        java.awt.Point var29 = var14.translateToJava2D(Double.NaN, Double.NaN, var20, var28);
        org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var32 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((short)10);
        double var33 = var32.getOutlierCoefficient();
        var14.setDataset(100, var32);
        java.lang.Comparable var36 = var32.getSeriesKey(100);
        java.lang.String var39 = var0.generateLabel(var32, (-13421773), 20);
        org.jfree.data.xy.IntervalXYDelegate var41 = new org.jfree.data.xy.IntervalXYDelegate(var32, false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var33 == 1.5d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var36 + "' != '" + (short)10+ "'", var36.equals((short)10));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var39);

    }

    public void test397() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test397"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        org.jfree.chart.plot.CategoryMarker var2 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        java.lang.String var3 = var2.getLabel();
        boolean var4 = var0.removeDomainMarker(var2);
        var0.clearDomainMarkers();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == false);

    }

    public void test398() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test398"); }


        org.jfree.data.general.DatasetGroup var1 = new org.jfree.data.general.DatasetGroup(" href=\"SeriesRenderingOrder.REVERSE\"");

    }

    public void test399() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test399"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        org.jfree.chart.annotations.XYPointerAnnotation var5 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
        double var6 = var5.getLabelOffset();
        org.jfree.ui.TextAnchor var7 = var5.getRotationAnchor();
        boolean var8 = var0.removeAnnotation(var5);
        org.jfree.chart.plot.SeriesRenderingOrder var9 = var0.getSeriesRenderingOrder();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 3.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

    }

    public void test400() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test400"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        boolean var2 = var0.getIgnoreRepaint();
        org.jfree.chart.plot.ContourPlot var4 = new org.jfree.chart.plot.ContourPlot();
        var4.setOutlineVisible(false);
        var0.addPropertyChangeListener("Combined Range XYPlot", var4);
        javax.swing.JPopupMenu var8 = var0.getComponentPopupMenu();
        var0.reshape((-13421773), 2147483647, 2013, 2013);
        org.jfree.data.xy.XYSeries var16 = new org.jfree.data.xy.XYSeries((byte)100, true);
        java.lang.Object var17 = var16.clone();
        int var18 = var16.getMaximumItemCount();
        javax.swing.JPanel var19 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var20 = var19.getPreferredSize();
        boolean var21 = var19.getIgnoreRepaint();
        org.jfree.chart.plot.ContourPlot var23 = new org.jfree.chart.plot.ContourPlot();
        var23.setOutlineVisible(false);
        var19.addPropertyChangeListener("Combined Range XYPlot", var23);
        org.jfree.chart.urls.XYURLGenerator var27 = var23.getURLGenerator();
        var16.removePropertyChangeListener(var23);
        float var29 = var23.getForegroundAlpha();
        double var30 = var23.getRangeCrosshairValue();
        java.lang.String[] var33 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var34 = new org.jfree.chart.axis.SymbolAxis("hi!", var33);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var35 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var37 = var35.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var40 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var41 = var40.getTickLabelPaint();
        var35.setFillPaint(var41, true);
        var34.setGridBandAlternatePaint(var41);
        boolean var45 = var23.isCompatibleDomainAxis(var34);
        var0.addPropertyChangeListener(var23);

        // Checks the contract:  equals-hashcode on var4 and var23
        assertTrue("Contract failed: equals-hashcode on var4 and var23", var4.equals(var23) ? var4.hashCode() == var23.hashCode() : true);

        // Checks the contract:  equals-hashcode on var23 and var4
        assertTrue("Contract failed: equals-hashcode on var23 and var4", var23.equals(var4) ? var23.hashCode() == var4.hashCode() : true);

    }

    public void test401() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test401"); }


        org.jfree.chart.axis.SegmentedTimeline var0 = org.jfree.chart.axis.SegmentedTimeline.newMondayThroughFridayTimeline();
        javax.swing.JPanel var1 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        float var2 = var1.getAlignmentX();
        javax.accessibility.AccessibleContext var3 = var1.getAccessibleContext();
        boolean var4 = var0.equals(var3);
        java.util.Date var6 = var0.getDate((-2208960000000L));
        boolean var9 = var0.containsDomainRange(996724L, 1378962000000L);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == 0.5f);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == false);

    }

    public void test402() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test402"); }


        org.jfree.data.KeyedObjects var0 = new org.jfree.data.KeyedObjects();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            java.lang.Object var2 = var0.getObject((-0.21460183660255172d));
            fail("Expected exception of type org.jfree.data.UnknownKeyException");
        } catch (org.jfree.data.UnknownKeyException e) {
            // Expected exception.
        }

    }

    public void test403() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test403"); }


        org.jfree.chart.labels.HighLowItemLabelGenerator var2 = new org.jfree.chart.labels.HighLowItemLabelGenerator();
        org.jfree.data.time.TimeTableXYDataset var3 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var5 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var6 = new org.jfree.data.gantt.Task("hi!", var5);
        var3.remove(var5, 100, false);
        org.jfree.data.xy.XYBarDataset var11 = new org.jfree.data.xy.XYBarDataset(var3, Double.NaN);
        boolean var12 = var3.getDomainIsPointsInTime();
        java.lang.String var15 = var2.generateToolTip(var3, 52, 1043495433);
        org.jfree.chart.renderer.xy.CandlestickRenderer var16 = new org.jfree.chart.renderer.xy.CandlestickRenderer((-170.0d), false, var2);
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var19 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var22 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var23 = var22.getItemLabelFont();
        double var24 = var22.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var27 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var28 = var27.getItemLabelFont();
        java.awt.Shape var29 = var27.getBaseLegendShape();
        var22.setShape(var29);
        var19.setLegendBar(var29);
        var19.setDrawBarOutline(true);
        org.jfree.data.xy.CategoryTableXYDataset var34 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var35 = var19.findDomainBounds(var34);
        org.jfree.data.xy.XYIntervalSeriesCollection var36 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.xy.XYBarDataset var38 = new org.jfree.data.xy.XYBarDataset(var36, 10.0d);
        var38.setBarWidth(2.0d);
        org.jfree.chart.axis.AxisCollection var41 = new org.jfree.chart.axis.AxisCollection();
        java.util.List var42 = var41.getAxesAtLeft();
        org.jfree.data.general.DefaultKeyedValues2DDataset var43 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var43.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        boolean var48 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(var43);
        org.jfree.data.Range var50 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(var43, true);
        org.jfree.data.Range var52 = org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds(var38, var42, var50, true);
        org.jfree.data.Range var54 = org.jfree.data.general.DatasetUtilities.findDomainBounds(var34, var42, true);
        java.lang.Number var55 = org.jfree.data.general.DatasetUtilities.findMinimumDomainValue(var34);
        org.jfree.data.Range var56 = org.jfree.data.general.DatasetUtilities.findStackedRangeBounds(var34);
        java.lang.String var59 = var2.generateLabel(var34, 2013, 10);
        org.jfree.chart.urls.TimeSeriesURLGenerator var60 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
        org.jfree.chart.renderer.xy.StackedXYAreaRenderer2 var61 = new org.jfree.chart.renderer.xy.StackedXYAreaRenderer2(var2, var60);
        int var62 = var61.getPassCount();
        boolean var63 = var61.getRoundXCoordinates();
        var61.setRoundXCoordinates(false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var42);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var48 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var50);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var52);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var54);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var55 + "' != '" + Double.NaN+ "'", var55.equals(Double.NaN));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var56);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var59);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var62 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var63 == true);

    }

    public void test404() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test404"); }


        org.jfree.data.xy.XYDatasetTableModel var0 = new org.jfree.data.xy.XYDatasetTableModel();
        java.lang.String var2 = var0.getColumnName(4);
        java.lang.Object var5 = var0.getValueAt(2, (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var2 + "' != '" + "E"+ "'", var2.equals("E"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

    }

    public void test405() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test405"); }


        org.jfree.chart.plot.CategoryPlot var0 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        org.jfree.data.time.TimePeriodValue var5 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var2, (java.lang.Number)10);
        var0.setDomainCrosshairColumnKey(10);
        boolean var7 = var0.getDrawSharedDomainAxis();
        boolean var8 = var0.getDrawSharedDomainAxis();
        var0.clearRangeMarkers(0);
        org.jfree.chart.plot.CombinedRangeXYPlot var11 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var0.addChangeListener(var11);
        org.jfree.chart.event.PlotChangeEvent var13 = new org.jfree.chart.event.PlotChangeEvent(var11);
        org.jfree.data.xy.CategoryTableXYDataset var14 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.general.DefaultKeyedValues2DDataset var15 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var15.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        boolean var20 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(var15);
        java.util.List var21 = var15.getColumnKeys();
        org.jfree.data.Range var23 = org.jfree.data.general.DatasetUtilities.findDomainBounds(var14, var21, true);
        double var25 = var14.getDomainLowerBound(true);
        int var26 = var11.indexOf(var14);
        org.jfree.data.xy.XYDatasetTableModel var27 = new org.jfree.data.xy.XYDatasetTableModel(var14);
        org.jfree.data.Range var28 = org.jfree.data.general.DatasetUtilities.findDomainBounds(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == Double.NaN);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var26 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var28);

    }

    public void test406() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test406"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        boolean var5 = var2.getAntiAlias();
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
        java.lang.String var7 = var6.getWarningString();
        javax.accessibility.AccessibleContext var8 = var6.getAccessibleContext();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

    }

    public void test407() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test407"); }


        javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var3 = var2.getPreferredSize();
        javax.swing.JPanel var4 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var2.setNextFocusableComponent(var4);
        java.util.Locale var6 = var4.getLocale();
        org.jfree.chart.axis.TickUnitSource var7 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var6);
        java.text.NumberFormat var8 = java.text.NumberFormat.getPercentInstance(var6);
        org.jfree.chart.axis.TickUnitSource var9 = org.jfree.chart.axis.NumberAxis.createIntegerTickUnits(var6);
        org.jfree.chart.StandardChartTheme var12 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        org.jfree.chart.plot.DrawingSupplier var13 = var12.getDrawingSupplier();
        org.jfree.chart.plot.dial.StandardDialScale var14 = new org.jfree.chart.plot.dial.StandardDialScale();
        var14.setMajorTickIncrement(10.0d);
        java.awt.Paint var17 = var14.getMinorTickPaint();
        var12.setTickLabelPaint(var17);
        java.awt.Font var19 = var12.getSmallFont();
        org.jfree.chart.renderer.xy.StackedXYBarRenderer var20 = new org.jfree.chart.renderer.xy.StackedXYBarRenderer();
        javax.swing.JPanel var21 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var22 = var21.getPreferredSize();
        java.awt.image.ColorModel var23 = var21.getColorModel();
        var21.updateUI();
        java.lang.String var25 = var21.toString();
        var21.setFocusable(true);
        boolean var28 = var20.equals(var21);
        java.awt.Paint var30 = var20.lookupSeriesOutlinePaint((-1));
        org.jfree.chart.title.DateTitle var31 = new org.jfree.chart.title.DateTitle(2, var6, var19, var30);
        javax.swing.JPanel var32 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var33 = var32.getPreferredSize();
        javax.swing.JPanel var34 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var32.setNextFocusableComponent(var34);
        java.util.Locale var36 = var34.getLocale();
        javax.swing.JPanel var37 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var38 = var37.getPreferredSize();
        java.awt.Dimension var39 = var34.getSize(var38);
        java.awt.event.ContainerListener[] var40 = var34.getContainerListeners();
        boolean var43 = var34.inside(2147483647, 10);
        java.awt.Dimension var44 = var34.getMinimumSize();
        int var45 = var34.getY();
        java.lang.String var46 = var34.getUIClassID();
        java.awt.Color var47 = var34.getForeground();
        org.jfree.chart.block.LabelBlock var48 = new org.jfree.chart.block.LabelBlock("org.jfree.chart.renderer.NotOutlierException: hi!", var19, var47);
        java.awt.Font var49 = var48.getFont();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var25 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var25,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var25.equals("org.jfree.chart.ChartPanel[,0,0,0var25,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var34);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var43 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var45 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var46 + "' != '" + "PanelUI"+ "'", var46.equals("PanelUI"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var47);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var49);

    }

    public void test408() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test408"); }


        org.jfree.chart.renderer.xy.XYSplineRenderer var1 = new org.jfree.chart.renderer.xy.XYSplineRenderer(2147483647);
        var1.setLinesVisible(true);
        java.awt.Shape var5 = var1.lookupLegendShape(22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

    }

    public void test409() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test409"); }


        org.jfree.chart.plot.ValueMarker var1 = new org.jfree.chart.plot.ValueMarker((-0.7853981633974483d));
        org.jfree.chart.plot.ThermometerPlot var2 = new org.jfree.chart.plot.ThermometerPlot();
        boolean var3 = var2.isDomainZoomable();
        int var4 = var2.getAxisLocation();
        org.jfree.data.general.ValueDataset var5 = var2.getDataset();
        org.jfree.chart.plot.MeterPlot var6 = new org.jfree.chart.plot.MeterPlot(var5);
        java.awt.Paint var7 = var6.getDialOutlinePaint();
        org.jfree.data.Range var8 = var6.getRange();
        var1.addChangeListener(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

    }

    public void test410() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test410"); }


        org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
        boolean var1 = var0.getSectionOutlinesVisible();
        var0.setExplodePercent("[size=0x00000000]", 0.25d);
        org.jfree.data.time.Year var7 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var8 = new org.jfree.data.time.Month(1, var7);
        org.jfree.data.time.RegularTimePeriod var9 = var8.previous();
        int var10 = var8.getMonth();
        java.awt.Stroke var11 = var0.getSectionOutlineStroke(var8);
        org.jfree.util.Rotation var12 = var0.getDirection();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 1);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

    }

    public void test411() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test411"); }


        org.jfree.chart.labels.HighLowItemLabelGenerator var2 = new org.jfree.chart.labels.HighLowItemLabelGenerator();
        org.jfree.data.time.TimeTableXYDataset var3 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var5 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var6 = new org.jfree.data.gantt.Task("hi!", var5);
        var3.remove(var5, 100, false);
        org.jfree.data.xy.XYBarDataset var11 = new org.jfree.data.xy.XYBarDataset(var3, Double.NaN);
        boolean var12 = var3.getDomainIsPointsInTime();
        java.lang.String var15 = var2.generateToolTip(var3, 52, 1043495433);
        org.jfree.chart.renderer.xy.CandlestickRenderer var16 = new org.jfree.chart.renderer.xy.CandlestickRenderer((-170.0d), false, var2);
        var16.setAutoWidthMethod(19);
        double var19 = var16.getAutoWidthFactor();
        var16.setDrawVolume(true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 0.6428571428571429d);

    }

    public void test412() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test412"); }


        java.util.Locale var1 = javax.swing.JComponent.getDefaultLocale();
        org.jfree.chart.axis.TickUnitSource var2 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var1);
        org.jfree.chart.labels.StandardPieSectionLabelGenerator var3 = new org.jfree.chart.labels.StandardPieSectionLabelGenerator(" onMouseOver=\"return overlib('[size=0x00000000]');\" onMouseOut=\"return nd();\"", var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

    }

    public void test413() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test413"); }


        org.jfree.chart.util.LogFormat var4 = new org.jfree.chart.util.LogFormat(0.0d, "hi!", true);
        java.lang.Object var5 = var4.clone();
        org.jfree.chart.util.HexNumberFormat var8 = new org.jfree.chart.util.HexNumberFormat();
        javax.swing.JPanel var9 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var10 = var9.getPreferredSize();
        javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var9.setNextFocusableComponent(var11);
        java.util.Locale var13 = var11.getLocale();
        org.jfree.chart.axis.MonthDateFormat var14 = new org.jfree.chart.axis.MonthDateFormat(var13);
        org.jfree.chart.labels.IntervalXYItemLabelGenerator var15 = new org.jfree.chart.labels.IntervalXYItemLabelGenerator("", var8, var14);
        org.jfree.chart.util.LogFormat var20 = new org.jfree.chart.util.LogFormat(0.0d, "hi!", true);
        javax.swing.JPanel var21 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var22 = var21.getPreferredSize();
        javax.swing.JPanel var23 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var21.setNextFocusableComponent(var23);
        java.util.Locale var25 = var23.getLocale();
        org.jfree.chart.axis.TickUnitSource var26 = org.jfree.chart.axis.LogAxis.createLogTickUnits(var25);
        java.text.NumberFormat var27 = java.text.NumberFormat.getPercentInstance(var25);
        org.jfree.chart.labels.StandardXYItemLabelGenerator var28 = new org.jfree.chart.labels.StandardXYItemLabelGenerator("d", var20, var27);
        org.jfree.chart.labels.StandardPieToolTipGenerator var29 = new org.jfree.chart.labels.StandardPieToolTipGenerator("Combined Range XYPlot", var8, var27);
        org.jfree.chart.labels.StandardCategoryItemLabelGenerator var30 = new org.jfree.chart.labels.StandardCategoryItemLabelGenerator("Combined Range XYPlot", var4, var27);
        boolean var31 = var4.isGroupingUsed();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var31 == true);

    }

    public void test414() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test414"); }


        org.jfree.chart.renderer.xy.XYShapeRenderer var0 = new org.jfree.chart.renderer.xy.XYShapeRenderer();
        org.jfree.chart.axis.CyclicNumberAxis var3 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        boolean var4 = var3.isAxisLineVisible();
        var3.setAxisLineVisible(true);
        var3.setMinorTickMarksVisible(true);
        org.jfree.ui.RectangleInsets var9 = var3.getTickLabelInsets();
        boolean var10 = var0.equals(var3);
        javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var12 = var11.getPreferredSize();
        java.awt.image.ColorModel var13 = var11.getColorModel();
        var11.firePropertyChange("", 0.0f, 0.0f);
        java.awt.Color var18 = var11.getForeground();
        boolean var19 = var0.equals(var11);
        var0.setGuideLinesVisible(true);
        org.jfree.chart.renderer.category.ScatterRenderer var23 = new org.jfree.chart.renderer.category.ScatterRenderer();
        var23.setUseFillPaint(true);
        var23.setUseFillPaint(false);
        org.jfree.chart.plot.dial.StandardDialScale var28 = new org.jfree.chart.plot.dial.StandardDialScale();
        var28.setMajorTickIncrement(10.0d);
        double var32 = var28.valueToAngle(0.0d);
        java.awt.Stroke var33 = var28.getMajorTickStroke();
        var23.setOutlineStroke(var33, true);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.setSeriesOutlineStroke((-1), var33, false);
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == 175.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

    }

    public void test415() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test415"); }


        org.jfree.chart.title.CompositeTitle var0 = new org.jfree.chart.title.CompositeTitle();
        org.jfree.chart.renderer.xy.XYBlockRenderer var1 = new org.jfree.chart.renderer.xy.XYBlockRenderer();
        org.jfree.data.xy.CategoryTableXYDataset var2 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var3 = var1.findDomainBounds(var2);
        org.jfree.chart.renderer.category.BarRenderer3D var6 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var7 = var6.getItemLabelFont();
        double var8 = var6.getItemLabelAnchorOffset();
        org.jfree.chart.labels.ItemLabelPosition var11 = var6.getNegativeItemLabelPosition(0, 0);
        double var12 = var11.getAngle();
        var1.setNegativeItemLabelPosition(var11);
        org.jfree.chart.labels.XYSeriesLabelGenerator var14 = var1.getLegendItemToolTipGenerator();
        org.jfree.chart.title.LegendTitle var15 = new org.jfree.chart.title.LegendTitle(var1);
        org.jfree.chart.block.BlockContainer var16 = var15.getItemContainer();
        org.jfree.chart.block.CenterArrangement var17 = new org.jfree.chart.block.CenterArrangement();
        var16.setArrangement(var17);
        org.jfree.chart.plot.dial.ArcDialFrame var19 = new org.jfree.chart.plot.dial.ArcDialFrame();
        double var20 = var19.getOuterRadius();
        double var21 = var19.getExtent();
        double var22 = var19.getStartAngle();
        java.lang.Object var23 = var19.clone();
        boolean var24 = var16.equals(var23);
        var0.setTitleContainer(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == 0.75d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == 180.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == false);

    }

    public void test416() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test416"); }


        org.jfree.chart.plot.MultiplePiePlot var1 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var2 = var1.getPieChart();
        var2.setBackgroundImageAlpha(1.0f);
        boolean var5 = var2.getAntiAlias();
        org.jfree.chart.ChartFrame var6 = new org.jfree.chart.ChartFrame("Range[0.0,0.0]", var2);
        org.jfree.chart.ChartPanel var8 = new org.jfree.chart.ChartPanel(var2, false);
        java.awt.Paint var9 = var8.getZoomOutlinePaint();
        var8.setMaximumDrawHeight(252);
        int var12 = var8.getZoomTriggerDistance();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == 10);

    }

    public void test417() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test417"); }


        org.jfree.chart.plot.PiePlot3D var0 = new org.jfree.chart.plot.PiePlot3D();
        boolean var1 = var0.getSectionOutlinesVisible();
        org.jfree.chart.util.DefaultShadowGenerator var2 = new org.jfree.chart.util.DefaultShadowGenerator();
        float var3 = var2.getShadowOpacity();
        var0.setShadowGenerator(var2);
        java.awt.Stroke var5 = var0.getBaseSectionOutlineStroke();
        org.jfree.chart.plot.dial.StandardDialScale var6 = new org.jfree.chart.plot.dial.StandardDialScale();
        var6.setMajorTickIncrement(10.0d);
        double var10 = var6.valueToAngle(0.0d);
        java.awt.Stroke var11 = var6.getMajorTickStroke();
        var0.setLabelOutlineStroke(var11);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0.5f);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 175.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

    }

    public void test418() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test418"); }


        org.jfree.chart.ChartRenderingInfo var1 = new org.jfree.chart.ChartRenderingInfo();
        org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator var2 = new org.jfree.chart.imagemap.StandardToolTipTagFragmentGenerator();
        org.jfree.chart.imagemap.StandardURLTagFragmentGenerator var3 = new org.jfree.chart.imagemap.StandardURLTagFragmentGenerator();
        java.lang.String var4 = org.jfree.chart.imagemap.ImageMapUtilities.getImageMap("org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]", var1, var2, var3);
        java.awt.geom.Rectangle2D var5 = var1.getChartArea();
        org.jfree.chart.plot.MultiplePiePlot var6 = new org.jfree.chart.plot.MultiplePiePlot();
        org.jfree.chart.JFreeChart var7 = var6.getPieChart();
        org.jfree.chart.plot.dial.DialValueIndicator var8 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var9 = var8.getInsets();
        java.awt.Stroke var10 = var8.getOutlineStroke();
        javax.swing.JPanel var11 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var12 = var11.getPreferredSize();
        javax.swing.JPanel var13 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var11.setNextFocusableComponent(var13);
        java.util.Locale var15 = var13.getLocale();
        javax.swing.JPanel var16 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var17 = var16.getPreferredSize();
        java.awt.Dimension var18 = var13.getSize(var17);
        java.awt.event.ContainerListener[] var19 = var13.getContainerListeners();
        javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var21 = var20.getPreferredSize();
        java.awt.image.ColorModel var22 = var20.getColorModel();
        var20.updateUI();
        java.lang.String var24 = var20.toString();
        java.awt.Color var25 = var20.getForeground();
        var13.setBackground(var25);
        var8.setOutlinePaint(var25);
        javax.swing.JPanel var28 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var29 = var28.getPreferredSize();
        javax.swing.JPanel var30 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var28.setNextFocusableComponent(var30);
        java.util.Locale var32 = var30.getLocale();
        javax.swing.JPanel var33 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var34 = var33.getPreferredSize();
        java.awt.Dimension var35 = var30.getSize(var34);
        java.awt.event.ContainerListener[] var36 = var30.getContainerListeners();
        javax.swing.JPanel var37 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var38 = var37.getPreferredSize();
        java.awt.image.ColorModel var39 = var37.getColorModel();
        var37.updateUI();
        java.lang.String var41 = var37.toString();
        java.awt.Color var42 = var37.getForeground();
        var30.setBackground(var42);
        var8.setOutlinePaint(var42);
        var7.setBorderPaint(var42);
        org.jfree.chart.plot.CategoryPlot var46 = new org.jfree.chart.plot.CategoryPlot();
        org.jfree.data.time.Week var48 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var49 = new org.jfree.data.gantt.Task("hi!", var48);
        org.jfree.data.time.TimePeriodValue var51 = new org.jfree.data.time.TimePeriodValue((org.jfree.data.time.TimePeriod)var48, (java.lang.Number)10);
        var46.setDomainCrosshairColumnKey(10);
        boolean var53 = var46.getDrawSharedDomainAxis();
        boolean var54 = var46.getDrawSharedDomainAxis();
        var46.clearRangeMarkers(0);
        org.jfree.chart.plot.CombinedRangeXYPlot var57 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var46.addChangeListener(var57);
        org.jfree.chart.event.PlotChangeEvent var59 = new org.jfree.chart.event.PlotChangeEvent(var57);
        org.jfree.chart.plot.Plot var60 = var59.getPlot();
        var7.plotChanged(var59);
        org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset var63 = new org.jfree.data.statistics.DefaultBoxAndWhiskerXYDataset((short)10);
        boolean var64 = var7.equals(var63);
        org.jfree.chart.entity.JFreeChartEntity var67 = new org.jfree.chart.entity.JFreeChartEntity(var5, var7, "null", "hi!?hi!=15&amp;hi!=10");
        var7.setNotify(true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var4 + "' != '" + "<map id=\"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]\" name=\"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]\">\r\n</map>"+ "'", var4.equals("<map id=\"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]\" name=\"org.jfree.chart.event.AnnotationChangeEvent[source=org.jfree.chart.ChartPanel[,0,0,0var4,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]]\">\r\n</map>"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var24 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var24,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var24.equals("org.jfree.chart.ChartPanel[,0,0,0var24,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var34);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var41 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var41,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var41.equals("org.jfree.chart.ChartPanel[,0,0,0var41,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var42);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var53 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var54 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var60);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var64 == false);

    }

    public void test419() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test419"); }


        org.jfree.chart.plot.CombinedRangeXYPlot var0 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var1 = var0.getRangeZeroBaselineStroke();
        org.jfree.chart.plot.CombinedRangeXYPlot var2 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var3 = var2.getRangeZeroBaselineStroke();
        var0.setRangeGridlineStroke(var3);
        org.jfree.chart.renderer.xy.XYShapeRenderer var5 = new org.jfree.chart.renderer.xy.XYShapeRenderer();
        var5.setGuideLinesVisible(true);
        org.jfree.chart.renderer.category.BarRenderer3D var10 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        boolean var13 = var10.getItemVisible(0, 0);
        org.jfree.chart.renderer.category.BarPainter var14 = var10.getBarPainter();
        double var15 = var10.getMinimumBarLength();
        java.awt.Stroke var17 = var10.lookupSeriesStroke(2013);
        var5.setGuideLineStroke(var17);
        var0.setDomainGridlineStroke(var17);
        boolean var20 = var0.isDomainMinorGridlinesVisible();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var20 == false);

    }

    public void test420() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test420"); }


        org.jfree.chart.renderer.category.LineRenderer3D var0 = new org.jfree.chart.renderer.category.LineRenderer3D();
        var0.setYOffset(0.05d);
        double var3 = var0.getYOffset();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var3 == 0.05d);

    }

    public void test421() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test421"); }


        org.jfree.data.function.NormalDistributionFunction2D var2 = new org.jfree.data.function.NormalDistributionFunction2D(4.0d, 10.0d);
        double var4 = var2.getValue(100.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == 3.8781119317469613E-22d);

    }

    public void test422() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test422"); }


        org.jfree.chart.renderer.category.BarRenderer3D var4 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var5 = var4.getItemLabelFont();
        double var6 = var4.getItemLabelAnchorOffset();
        org.jfree.chart.labels.ItemLabelPosition var9 = var4.getNegativeItemLabelPosition(0, 0);
        double var10 = var9.getAngle();
        org.jfree.ui.TextAnchor var11 = var9.getTextAnchor();
        org.jfree.chart.plot.dial.DialValueIndicator var12 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var13 = var12.getInsets();
        java.awt.Stroke var14 = var12.getOutlineStroke();
        javax.swing.JPanel var15 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var16 = var15.getPreferredSize();
        javax.swing.JPanel var17 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var15.setNextFocusableComponent(var17);
        java.util.Locale var19 = var17.getLocale();
        javax.swing.JPanel var20 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var21 = var20.getPreferredSize();
        java.awt.Dimension var22 = var17.getSize(var21);
        java.awt.event.ContainerListener[] var23 = var17.getContainerListeners();
        javax.swing.JPanel var24 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var25 = var24.getPreferredSize();
        java.awt.image.ColorModel var26 = var24.getColorModel();
        var24.updateUI();
        java.lang.String var28 = var24.toString();
        java.awt.Color var29 = var24.getForeground();
        var17.setBackground(var29);
        var12.setOutlinePaint(var29);
        boolean var32 = var12.isClippedToWindow();
        org.jfree.ui.TextAnchor var33 = var12.getTextAnchor();
        org.jfree.chart.axis.NumberTick var35 = new org.jfree.chart.axis.NumberTick((short)0, "jfreechart-onetime-", var11, var33, 1.0d);
        java.lang.String var36 = var35.toString();
        java.lang.String var37 = var35.getText();
        java.lang.String var38 = var35.toString();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 0.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var28 + "' != '" + "org.jfree.chart.ChartPanel[,0,0,0var28,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"+ "'", var28.equals("org.jfree.chart.ChartPanel[,0,0,0var28,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var32 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var36 + "' != '" + "jfreechart-onetime-"+ "'", var36.equals("jfreechart-onetime-"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var37 + "' != '" + "jfreechart-onetime-"+ "'", var37.equals("jfreechart-onetime-"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var38 + "' != '" + "jfreechart-onetime-"+ "'", var38.equals("jfreechart-onetime-"));

    }

    public void test423() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test423"); }


        org.jfree.data.statistics.SimpleHistogramBin var2 = new org.jfree.data.statistics.SimpleHistogramBin(0.05d, 2.0d);
        var2.setItemCount(2);
        double var5 = var2.getUpperBound();
        int var6 = var2.getItemCount();
        java.lang.Object var7 = var2.clone();
        org.jfree.chart.axis.CyclicNumberAxis var11 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        boolean var12 = var11.isAxisLineVisible();
        var11.setAxisLineVisible(true);
        org.jfree.data.general.DefaultKeyedValues2DDataset var15 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var15.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        org.jfree.data.Range var20 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(var15);
        var11.setDefaultAutoRange(var20);
        org.jfree.chart.block.RectangleConstraint var22 = new org.jfree.chart.block.RectangleConstraint(0.04d, var20);
        java.lang.String var23 = var22.toString();
        org.jfree.chart.block.RectangleConstraint var24 = var22.toUnconstrainedHeight();
        boolean var25 = var2.equals(var24);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == 2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var12 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var23 + "' != '" + "RectangleConstraint[LengthConstraintType.FIXED: width=0.04, height=0.0]"+ "'", var23.equals("RectangleConstraint[LengthConstraintType.FIXED: width=0.04, height=0.0]"));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var25 == false);

    }

    public void test424() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test424"); }


        javax.swing.JPanel var0 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var1 = var0.getPreferredSize();
        javax.swing.JPanel var2 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        var0.setNextFocusableComponent(var2);
        var0.show();
        var0.show(false);
        var0.enable();
        var0.setEnabled(false);
        var0.resetKeyboardActions();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

    }

    public void test425() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test425"); }


        org.jfree.data.time.ohlc.OHLCSeries var1 = new org.jfree.data.time.ohlc.OHLCSeries("hi!?hi!=100&amp;amp;hi!=1");
        org.jfree.data.time.Year var5 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var6 = new org.jfree.data.time.Month(1, var5);
        org.jfree.data.time.Month var7 = new org.jfree.data.time.Month(2, var5);
        var1.add(var5, 2.0d, 0.2d, (-170.0d), (-90.0d));
        org.jfree.data.time.Year var16 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var17 = new org.jfree.data.time.Month(1, var16);
        org.jfree.data.time.RegularTimePeriod var18 = var17.previous();
        long var19 = var17.getSerialIndex();
        org.jfree.data.time.TimeTableXYDataset var20 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var22 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var23 = new org.jfree.data.gantt.Task("hi!", var22);
        var20.remove(var22, 100, false);
        org.jfree.chart.axis.PeriodAxis var27 = new org.jfree.chart.axis.PeriodAxis("Compass Plot", var17, var22);
        java.util.Date var28 = var22.getEnd();
        org.jfree.data.time.Quarter var29 = new org.jfree.data.time.Quarter(var28);
        org.jfree.chart.plot.CombinedRangeXYPlot var30 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        var30.clearDomainMarkers();
        java.awt.Paint var32 = var30.getRangeGridlinePaint();
        var30.clearRangeAxes();
        org.jfree.chart.title.TextTitle var35 = new org.jfree.chart.title.TextTitle("hi!");
        boolean var36 = var35.isVisible();
        java.lang.Object var37 = var35.clone();
        org.jfree.ui.RectangleInsets var38 = var35.getMargin();
        var30.setInsets(var38, true);
        boolean var41 = var29.equals(var38);
        org.jfree.data.time.Year var42 = var29.getYear();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var1.add(var29, 175.0d, 174.49d, 175.0d, (-0.4636476090008061d));
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == 1201L);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var36 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var38);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var42);

    }

    public void test426() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test426"); }


        org.jfree.chart.plot.dial.DialPlot var0 = new org.jfree.chart.plot.dial.DialPlot();
        org.jfree.chart.plot.dial.StandardDialScale var1 = new org.jfree.chart.plot.dial.StandardDialScale();
        int var2 = var0.getLayerIndex(var1);
        org.jfree.chart.plot.dial.DialValueIndicator var3 = new org.jfree.chart.plot.dial.DialValueIndicator();
        org.jfree.ui.RectangleInsets var4 = var3.getInsets();
        int var5 = var0.getLayerIndex(var3);
        java.awt.Stroke var6 = var3.getOutlineStroke();
        double var7 = var3.getAngle();
        double var8 = var3.getRadius();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var5 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == (-90.0d));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == 0.3d);

    }

    public void test427() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test427"); }


        org.jfree.data.time.TimeTableXYDataset var0 = new org.jfree.data.time.TimeTableXYDataset();
        org.jfree.data.time.Week var2 = new org.jfree.data.time.Week();
        org.jfree.data.gantt.Task var3 = new org.jfree.data.gantt.Task("hi!", var2);
        var0.remove(var2, 100, false);
        double var8 = var0.getDomainLowerBound(false);
        int var9 = var0.getItemCount();
        org.jfree.data.time.Year var12 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var13 = new org.jfree.data.time.Month(1, var12);
        var0.add(var13, 0.3d, "org.jfree.chart.renderer.NotOutlierException: hi!");
        org.jfree.data.Range var18 = var0.getDomainBounds(true);
        java.lang.Object var19 = var0.clone();
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            double var22 = var0.getXValue(1, 100);
            fail("Expected exception of type java.lang.IndexOutOfBoundsException");
        } catch (java.lang.IndexOutOfBoundsException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == Double.NaN);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var9 == 0);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

    }

    public void test428() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test428"); }


        org.jfree.chart.annotations.XYPointerAnnotation var4 = new org.jfree.chart.annotations.XYPointerAnnotation("-4,-4,4,4", (-0.7853981633974483d), (-90.0d), 0.05d);
        org.jfree.chart.plot.CombinedRangeXYPlot var5 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        org.jfree.chart.annotations.XYPointerAnnotation var10 = new org.jfree.chart.annotations.XYPointerAnnotation("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", (-1.0d), 0.2d, 4.0d);
        double var11 = var10.getLabelOffset();
        org.jfree.ui.TextAnchor var12 = var10.getRotationAnchor();
        boolean var13 = var5.removeAnnotation(var10);
        org.jfree.chart.StandardChartTheme var16 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var17 = var16.getLegendItemPaint();
        java.awt.Paint var18 = var16.getSubtitlePaint();
        java.awt.Font var19 = var16.getLargeFont();
        var10.setFont(var19);
        var4.setFont(var19);
        double var22 = var4.getBaseRadius();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == 3.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var19);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var22 == 30.0d);

    }

    public void test429() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test429"); }


        org.jfree.chart.axis.SegmentedTimeline var0 = org.jfree.chart.axis.SegmentedTimeline.newMondayThroughFridayTimeline();
        org.jfree.chart.axis.SegmentedTimeline var1 = var0.getBaseTimeline();
        long var2 = var0.getSegmentSize();
        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer var3 = new org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer();
        org.jfree.chart.StandardChartTheme var6 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var7 = var6.getLegendItemPaint();
        var3.setBoxPaint(var7);
        java.lang.Number[][] var9 = new java.lang.Number[][] { };
        java.lang.Number[][] var10 = new java.lang.Number[][] { };
        org.jfree.data.category.DefaultIntervalCategoryDataset var11 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var9, var10);
        int var13 = var11.getRowIndex('a');
        boolean var14 = var3.equals(var11);
        java.util.List var15 = var11.getCategories();
        var0.addExceptions(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var0);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == 86400000L);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var13 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

    }

    public void test430() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test430"); }


        org.jfree.data.time.TimePeriodValues var3 = new org.jfree.data.time.TimePeriodValues("Compass Plot", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]");
        var3.setRangeDescription("d");
        int var6 = var3.getMaxStartIndex();
        int var7 = var3.getMinMiddleIndex();

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var6 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == (-1));

    }

    public void test431() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test431"); }


        java.lang.String[] var2 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var3 = new org.jfree.chart.axis.SymbolAxis("hi!", var2);
        java.lang.String[] var7 = new java.lang.String[] { "hi!"};
        org.jfree.chart.axis.SymbolAxis var8 = new org.jfree.chart.axis.SymbolAxis("hi!", var7);
        java.lang.Number[][] var9 = new java.lang.Number[][] { };
        java.lang.Number[][] var10 = new java.lang.Number[][] { };
        org.jfree.data.category.DefaultIntervalCategoryDataset var11 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var9, var10);
        java.lang.Object[][][] var12 = new java.lang.Object[][][] { var10};
        org.jfree.data.xy.DefaultWindDataset var13 = new org.jfree.data.xy.DefaultWindDataset(var7, var12);
        org.jfree.chart.axis.SymbolAxis var14 = new org.jfree.chart.axis.SymbolAxis("d", var7);
        org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var17 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
        java.lang.Object var18 = var17.clone();
        org.jfree.chart.urls.TimeSeriesURLGenerator var19 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
        org.jfree.chart.renderer.xy.XYStepAreaRenderer var20 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, var17, var19);
        org.jfree.chart.renderer.xy.StandardXYItemRenderer var21 = new org.jfree.chart.renderer.xy.StandardXYItemRenderer(15, var17);
        double[] var24 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var25 = new org.jfree.chart.annotations.XYPolygonAnnotation(var24);
        double[] var28 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var29 = new org.jfree.chart.annotations.XYPolygonAnnotation(var28);
        org.jfree.chart.ClipPath var30 = new org.jfree.chart.ClipPath(var24, var28);
        double[][] var31 = new double[][] { var24};
        double[] var36 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var37 = new org.jfree.chart.annotations.XYPolygonAnnotation(var36);
        double[] var40 = new double[] { 1.0d, 0.0d};
        org.jfree.chart.annotations.XYPolygonAnnotation var41 = new org.jfree.chart.annotations.XYPolygonAnnotation(var40);
        org.jfree.chart.ClipPath var42 = new org.jfree.chart.ClipPath(var36, var40);
        double[][] var43 = new double[][] { var36};
        org.jfree.data.category.CategoryDataset var44 = org.jfree.data.general.DatasetUtilities.createCategoryDataset("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", "jfreechart-onetime-", var43);
        org.jfree.data.category.DefaultIntervalCategoryDataset var45 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var31, var43);
        boolean var46 = var21.equals(var31);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            org.jfree.data.category.CategoryDataset var47 = org.jfree.data.general.DatasetUtilities.createCategoryDataset(var2, var7, var31);
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var24);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var31);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var36);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var43);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == false);

    }

    public void test432() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test432"); }


        org.jfree.data.time.DateRange var0 = new org.jfree.data.time.DateRange();
        long var1 = var0.getUpperMillis();
        org.jfree.data.general.DefaultKeyedValues2DDataset var2 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var2.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        boolean var7 = org.jfree.data.general.DatasetUtilities.isEmptyOrNull(var2);
        org.jfree.data.Range var9 = org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds(var2, true);
        org.jfree.chart.block.RectangleConstraint var10 = new org.jfree.chart.block.RectangleConstraint(var0, var9);
        org.jfree.data.time.DateRange var13 = new org.jfree.data.time.DateRange((-1.0d), 1.0d);
        org.jfree.chart.block.RectangleConstraint var14 = var10.toRangeHeight(var13);
        org.jfree.chart.block.RectangleConstraint var16 = var14.toFixedHeight(3.0d);
        org.jfree.chart.block.LengthConstraintType var17 = var16.getWidthConstraintType();
        org.jfree.data.general.DefaultKeyedValues2DDataset var18 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var18.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        org.jfree.data.Range var23 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(var18);
        org.jfree.data.Range var25 = org.jfree.data.Range.shift(var23, (-1.0d));
        org.jfree.data.Range var27 = org.jfree.data.Range.scale(var25, 100.0d);
        org.jfree.data.general.DefaultKeyedValues2DDataset var28 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        var28.addValue((java.lang.Number)1.0f, (java.lang.Comparable)(-1.0f), (java.lang.Comparable)(-1.0f));
        org.jfree.data.Range var33 = org.jfree.data.general.DatasetUtilities.iterateRangeBounds(var28);
        org.jfree.data.Range var35 = org.jfree.data.Range.shift(var33, (-1.0d));
        org.jfree.data.Range var37 = org.jfree.data.Range.scale(var35, 100.0d);
        boolean var38 = var27.intersects(var37);
        org.jfree.data.Range var40 = org.jfree.data.Range.shift(var37, (-1.0d));
        org.jfree.data.Range var42 = org.jfree.data.Range.scale(var40, 0.3d);
        org.jfree.chart.block.RectangleConstraint var43 = var16.toRangeWidth(var42);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 1L);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var7 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var16);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var23);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var35);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var37);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var38 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var40);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var42);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var43);

    }

    public void test433() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test433"); }


        org.jfree.data.xy.XYIntervalSeriesCollection var0 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.xy.XYBarDataset var2 = new org.jfree.data.xy.XYBarDataset(var0, 10.0d);
        java.lang.Number var3 = org.jfree.data.general.DatasetUtilities.findMinimumRangeValue(var0);
        org.jfree.chart.plot.CombinedRangeXYPlot var4 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var5 = var4.getRangeZeroBaselineStroke();
        java.lang.String var6 = var4.getPlotType();
        org.jfree.chart.plot.CategoryMarker var8 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var9 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var11 = var9.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var14 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var15 = var14.getTickLabelPaint();
        var9.setFillPaint(var15, true);
        var8.setLabelPaint(var15);
        boolean var19 = var4.removeRangeMarker(var8);
        org.jfree.chart.axis.AxisLocation var20 = var4.getDomainAxisLocation();
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var23 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var26 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var27 = var26.getItemLabelFont();
        double var28 = var26.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var31 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var32 = var31.getItemLabelFont();
        java.awt.Shape var33 = var31.getBaseLegendShape();
        var26.setShape(var33);
        var23.setLegendBar(var33);
        var23.setDrawBarOutline(true);
        org.jfree.data.xy.CategoryTableXYDataset var38 = new org.jfree.data.xy.CategoryTableXYDataset();
        org.jfree.data.Range var39 = var23.findDomainBounds(var38);
        int var40 = var4.getIndexOf(var23);
        boolean var41 = var0.equals(var23);
        org.jfree.chart.needle.LineNeedle var46 = new org.jfree.chart.needle.LineNeedle();
        java.awt.Stroke var47 = var46.getOutlineStroke();
        org.jfree.chart.StandardChartTheme var50 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var51 = var50.getLegendItemPaint();
        org.jfree.chart.annotations.XYBoxAnnotation var52 = new org.jfree.chart.annotations.XYBoxAnnotation(0.0d, 0.2d, 0.05d, (-90.0d), var47, var51);
        var23.addAnnotation(var52);
        java.lang.Boolean var54 = var23.getCreateEntities();
        java.lang.Object var55 = var23.clone();
        var23.setBarAlignmentFactor((-170.0d));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var6 + "' != '" + "Combined Range XYPlot"+ "'", var6.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var11);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var19 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var20);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var28 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var32);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var39);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var40 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var41 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var47);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var51);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var54);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var55);

    }

    public void test434() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test434"); }


        org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer var0 = new org.jfree.chart.renderer.xy.XYBoxAndWhiskerRenderer();
        org.jfree.chart.StandardChartTheme var3 = new org.jfree.chart.StandardChartTheme("org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", true);
        java.awt.Paint var4 = var3.getLegendItemPaint();
        var0.setBoxPaint(var4);
        java.lang.Number[][] var6 = new java.lang.Number[][] { };
        java.lang.Number[][] var7 = new java.lang.Number[][] { };
        org.jfree.data.category.DefaultIntervalCategoryDataset var8 = new org.jfree.data.category.DefaultIntervalCategoryDataset(var6, var7);
        int var10 = var8.getRowIndex('a');
        boolean var11 = var0.equals(var8);
        java.awt.Paint var12 = var0.getArtifactPaint();
        java.awt.Paint var13 = var0.getArtifactPaint();
        java.awt.Paint var14 = var0.getBoxPaint();

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == (-1));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

    }

    public void test435() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test435"); }


        org.jfree.chart.plot.GreyPalette var0 = new org.jfree.chart.plot.GreyPalette();
        double var1 = var0.getMaxZ();
        org.jfree.chart.editor.PaletteSample var2 = new org.jfree.chart.editor.PaletteSample(var0);
        var2.setFocusTraversalKeysEnabled(false);
        java.awt.Dimension var5 = var2.getPreferredSize();
        javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var7 = var6.getPreferredSize();
        java.awt.image.ColorModel var8 = var6.getColorModel();
        var6.firePropertyChange("", 0.0f, 0.0f);
        java.awt.Color var13 = var6.getForeground();
        boolean var14 = javax.swing.JComponent.isLightweightComponent(var6);
        java.awt.Rectangle var15 = var6.getBounds();
        org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator var17 = new org.jfree.chart.labels.BoxAndWhiskerXYToolTipGenerator();
        java.lang.Object var18 = var17.clone();
        org.jfree.chart.urls.TimeSeriesURLGenerator var19 = new org.jfree.chart.urls.TimeSeriesURLGenerator();
        org.jfree.chart.renderer.xy.XYStepAreaRenderer var20 = new org.jfree.chart.renderer.xy.XYStepAreaRenderer(0, var17, var19);
        boolean var21 = var20.getPlotArea();
        org.jfree.chart.labels.HighLowItemLabelGenerator var22 = new org.jfree.chart.labels.HighLowItemLabelGenerator();
        var20.setBaseItemLabelGenerator(var22);
        org.jfree.data.xy.XYSeries var26 = new org.jfree.data.xy.XYSeries((byte)100, true);
        var26.add((-1.0d), (-1.0d), false);
        org.jfree.data.xy.XYSeries var33 = new org.jfree.data.xy.XYSeries((byte)100, true);
        var33.clear();
        double var35 = var33.getMinX();
        org.jfree.data.xy.XYSeriesCollection var36 = new org.jfree.data.xy.XYSeriesCollection(var33);
        var26.addVetoableChangeListener(var36);
        java.lang.String var40 = var22.generateLabel(var36, 100, 2147483647);
        var6.addVetoableChangeListener(var36);
        var2.removeVetoableChangeListener(var36);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var36.setIntervalWidth((-170.0d));
            fail("Expected exception of type java.lang.IllegalArgumentException");
        } catch (java.lang.IllegalArgumentException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == (-1.0d));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var13);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var14 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var18);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var21 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var35 == Double.NaN);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var40);

    }

    public void test436() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test436"); }


        org.jfree.data.general.DefaultKeyedValueDataset var2 = new org.jfree.data.general.DefaultKeyedValueDataset("Time", 500);

    }

    public void test437() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test437"); }


        org.jfree.chart.renderer.category.StackedBarRenderer var1 = new org.jfree.chart.renderer.category.StackedBarRenderer(false);
        org.jfree.chart.renderer.category.BarRenderer3D var2 = new org.jfree.chart.renderer.category.BarRenderer3D();
        org.jfree.chart.renderer.xy.ClusteredXYBarRenderer var5 = new org.jfree.chart.renderer.xy.ClusteredXYBarRenderer(1.0d, false);
        org.jfree.chart.renderer.category.BarRenderer3D var8 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var9 = var8.getItemLabelFont();
        double var10 = var8.getItemLabelAnchorOffset();
        org.jfree.chart.renderer.category.BarRenderer3D var13 = new org.jfree.chart.renderer.category.BarRenderer3D(10.0d, 0.0d);
        java.awt.Font var14 = var13.getItemLabelFont();
        java.awt.Shape var15 = var13.getBaseLegendShape();
        var8.setShape(var15);
        var5.setLegendBar(var15);
        org.jfree.data.general.DefaultKeyedValues2DDataset var20 = new org.jfree.data.general.DefaultKeyedValues2DDataset();
        org.jfree.chart.entity.CategoryItemEntity var23 = new org.jfree.chart.entity.CategoryItemEntity(var15, "hi!", "org.jfree.chart.ChartPanel[,0,0,0x0,invalid,layout=java.awt.FlowLayout,alignmentX=0.0,alignmentY=0.0,border=,flags=9,maximumSize=,minimumSize=,preferredSize=java.awt.Dimension[width=680,height=420]]", var20, 0.0f, true);
        org.jfree.data.Range var25 = var2.findRangeBounds(var20, true);
        org.jfree.data.Range var26 = var1.findRangeBounds(var20);
        var1.setRenderAsPercentages(false);
        int var29 = var1.getPassCount();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var15);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var29 == 3);

    }

    public void test438() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test438"); }


        org.jfree.data.xy.VectorSeries var1 = new org.jfree.data.xy.VectorSeries(2147483647);

    }

    public void test439() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test439"); }


        org.jfree.data.statistics.DefaultStatisticalCategoryDataset var0 = new org.jfree.data.statistics.DefaultStatisticalCategoryDataset();
        var0.clear();
        java.util.List var2 = var0.getRowKeys();
        java.lang.Object var3 = var0.clone();
        org.jfree.data.Range var5 = var0.getRangeBounds(false);
        javax.swing.JPanel var6 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var7 = var6.getLocation();
        java.awt.Dimension var8 = var6.preferredSize();
        var6.paintImmediately(100, 100, 10, (-1));
        org.jfree.chart.plot.PolarPlot var14 = new org.jfree.chart.plot.PolarPlot();
        boolean var15 = var14.isRadiusGridlinesVisible();
        org.jfree.chart.axis.CyclicNumberAxis var20 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        var20.setUpperMargin(10.0d);
        var20.setAxisLineVisible(true);
        javax.swing.JPanel var25 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Point var26 = var25.getLocation();
        java.awt.Dimension var27 = var25.preferredSize();
        java.awt.Rectangle var28 = var25.bounds();
        java.awt.Point var29 = var14.translateToJava2D(Double.NaN, Double.NaN, var20, var28);
        boolean var30 = var6.contains(var29);
        var6.show(true);
        javax.swing.ActionMap var33 = var6.getActionMap();
        boolean var34 = var0.equals(var33);
        org.jfree.data.time.Second var36 = new org.jfree.data.time.Second();
        org.jfree.data.time.Year var39 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var40 = new org.jfree.data.time.Month(1, var39);
        java.util.Locale var41 = javax.swing.JComponent.getDefaultLocale();
        org.jfree.chart.axis.MonthDateFormat var43 = new org.jfree.chart.axis.MonthDateFormat(var41, 2147483647);
        java.util.Calendar var44 = var43.getCalendar();
        var40.peg(var44);
        long var46 = var36.getFirstMillisecond(var44);
        // The following exception was thrown during execution.
        // This behavior will recorded for regression testing.
        try {
            var0.remove(0.0f, var44);
            fail("Expected exception of type org.jfree.data.UnknownKeyException");
        } catch (org.jfree.data.UnknownKeyException e) {
            // Expected exception.
        }


        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var2);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var6);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var25);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var27);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var28);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var29);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var30 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var33);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var34 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var41);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var44);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var46 == 1378963175000L);

    }

    public void test440() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test440"); }


        org.jfree.data.KeyToGroupMap var0 = new org.jfree.data.KeyToGroupMap();
        int var2 = var0.getGroupIndex((-1.0d));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var2 == (-1));

    }

    public void test441() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test441"); }


        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var0 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        var0.setUseSeriesOffset(true);
        var0.setBaseSeriesVisible(true);
        var0.setAutoPopulateSeriesShape(false);
        org.jfree.chart.labels.ItemLabelPosition var7 = var0.getPositiveItemLabelPosition();
        var0.setShapesFilled(false);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var7);

    }

    public void test442() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test442"); }


        org.jfree.data.time.Year var2 = new org.jfree.data.time.Year(100);
        org.jfree.data.time.Month var3 = new org.jfree.data.time.Month(1, var2);
        java.util.Locale var4 = javax.swing.JComponent.getDefaultLocale();
        org.jfree.chart.axis.MonthDateFormat var6 = new org.jfree.chart.axis.MonthDateFormat(var4, 2147483647);
        java.util.Calendar var7 = var6.getCalendar();
        long var8 = var3.getLastMillisecond(var7);
        org.jfree.data.time.RegularTimePeriod var9 = var3.previous();
        org.jfree.chart.axis.CyclicNumberAxis var13 = new org.jfree.chart.axis.CyclicNumberAxis(0.0d, 3.0d, "hi!?hi!=15&amp;hi!=10");
        org.jfree.data.Range var14 = var13.getDefaultAutoRange();
        int var15 = var3.compareTo(var13);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var8 == (-59008924800001L));

        // Regression assertion (captures the current behavior of the code)
        assertNull(var9);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var14);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var15 == 1);

    }

    public void test443() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test443"); }


        org.jfree.chart.renderer.category.LevelRenderer var0 = new org.jfree.chart.renderer.category.LevelRenderer();
        double var1 = var0.getItemMargin();
        org.jfree.chart.StrokeMap var2 = new org.jfree.chart.StrokeMap();
        java.lang.Object var3 = var2.clone();
        boolean var4 = var0.equals(var2);
        org.jfree.data.xy.XIntervalDataItem var9 = new org.jfree.data.xy.XIntervalDataItem(1.0d, 0.05d, 0.2d, 2.0d);
        double var10 = var9.getYValue();
        java.lang.Number var11 = var9.getX();
        org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer var12 = new org.jfree.chart.renderer.category.StatisticalLineAndShapeRenderer();
        java.lang.Boolean var13 = var12.getBaseItemLabelsVisible();
        var12.setSeriesShapesFilled(1, (java.lang.Boolean)false);
        var12.setDrawOutlines(true);
        org.jfree.chart.renderer.category.StackedAreaRenderer var20 = new org.jfree.chart.renderer.category.StackedAreaRenderer(false);
        org.jfree.chart.plot.CombinedRangeXYPlot var21 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var22 = var21.getRangeZeroBaselineStroke();
        java.lang.String var23 = var21.getPlotType();
        boolean var24 = var21.isDomainZoomable();
        org.jfree.chart.plot.CombinedRangeXYPlot var25 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var26 = var25.getRangeZeroBaselineStroke();
        var21.setDomainCrosshairStroke(var26);
        var20.setBaseOutlineStroke(var26, true);
        var12.setStroke(var26);
        var2.put(var9, var26);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == 0.2d);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var4 == false);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var10 == 2.0d);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var11 + "' != '" + 1.0d+ "'", var11.equals(1.0d));

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var13 + "' != '" + false+ "'", var13.equals(false));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var22);

        // Regression assertion (captures the current behavior of the code)
        assertTrue("'" + var23 + "' != '" + "Combined Range XYPlot"+ "'", var23.equals("Combined Range XYPlot"));

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var24 == true);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var26);

    }

    public void test444() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test444"); }


        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var0 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.LegendItem var3 = var0.getLegendItem(1, 0);
        org.jfree.data.xy.XYIntervalSeriesCollection var4 = new org.jfree.data.xy.XYIntervalSeriesCollection();
        org.jfree.data.Range var5 = var0.findRangeBounds(var4);
        var4.removeAllSeries();
        org.jfree.chart.plot.CombinedRangeXYPlot var7 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var8 = var7.getRangeZeroBaselineStroke();
        org.jfree.chart.title.TextTitle var10 = new org.jfree.chart.title.TextTitle("hi!");
        org.jfree.ui.RectangleInsets var11 = var10.getMargin();
        var7.setAxisOffset(var11);
        var7.setRangeMinorGridlinesVisible(false);
        var4.removeChangeListener(var7);
        var4.removeAllSeries();

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var8);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var11);

    }

    public void test445() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test445"); }


        org.jfree.chart.plot.CombinedDomainCategoryPlot var0 = new org.jfree.chart.plot.CombinedDomainCategoryPlot();
        java.util.List var1 = var0.getSubplots();
        org.jfree.chart.plot.CategoryPlot var2 = new org.jfree.chart.plot.CategoryPlot();
        java.lang.Comparable var3 = var2.getDomainCrosshairColumnKey();
        var2.setCrosshairDatasetIndex(100);
        org.jfree.chart.plot.CombinedRangeXYPlot var6 = new org.jfree.chart.plot.CombinedRangeXYPlot();
        java.awt.Stroke var7 = var6.getRangeZeroBaselineStroke();
        org.jfree.chart.title.TextTitle var9 = new org.jfree.chart.title.TextTitle("hi!");
        org.jfree.ui.RectangleInsets var10 = var9.getMargin();
        var6.setAxisOffset(var10);
        var2.setAxisOffset(var10);
        org.jfree.chart.plot.CategoryMarker var14 = new org.jfree.chart.plot.CategoryMarker(10.0f);
        org.jfree.chart.renderer.xy.CyclicXYItemRenderer var15 = new org.jfree.chart.renderer.xy.CyclicXYItemRenderer();
        org.jfree.chart.labels.XYItemLabelGenerator var17 = var15.getSeriesItemLabelGenerator(0);
        org.jfree.chart.axis.CyclicNumberAxis var20 = new org.jfree.chart.axis.CyclicNumberAxis(10.0d, 100.0d);
        java.awt.Paint var21 = var20.getTickLabelPaint();
        var15.setFillPaint(var21, true);
        var14.setLabelPaint(var21);
        org.jfree.chart.plot.CompassPlot var25 = new org.jfree.chart.plot.CompassPlot();
        var14.addChangeListener(var25);
        boolean var27 = var2.removeRangeMarker(var14);
        var0.remove(var2);
        org.jfree.chart.plot.ValueMarker var30 = new org.jfree.chart.plot.ValueMarker((-0.7853981633974483d));
        var30.setLabel("0x00000001");
        var30.setValue(180.0d);
        var0.addRangeMarker(var30);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var1);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var7);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertNull(var17);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var21);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var27 == false);

    }

    public void test446() throws Throwable {

        if (debug) { System.out.println(); System.out.print("RandoopTest4.test446"); }


        org.jfree.chart.plot.GreyPalette var0 = new org.jfree.chart.plot.GreyPalette();
        double var1 = var0.getMaxZ();
        org.jfree.chart.editor.PaletteSample var2 = new org.jfree.chart.editor.PaletteSample(var0);
        javax.swing.JPanel var3 = org.jfree.chart.demo.PieChartDemo1.createDemoPanel();
        java.awt.Dimension var4 = var3.getPreferredSize();
        java.awt.image.ColorModel var5 = var3.getColorModel();
        var3.firePropertyChange("", 0.0f, 0.0f);
        java.awt.Color var10 = var3.getForeground();
        boolean var11 = javax.swing.JComponent.isLightweightComponent(var3);
        java.awt.Rectangle var12 = var3.getBounds();
        var2.paintImmediately(var12);
        var2.setVerifyInputWhenFocusTarget(true);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var1 == (-1.0d));

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var3);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var4);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var5);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var10);

        // Regression assertion (captures the current behavior of the code)
        assertTrue(var11 == false);

        // Regression assertion (captures the current behavior of the code)
        assertNotNull(var12);

    }

}
