org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : r3 = newarray (double)[2] >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : d0 = 0.0
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : d0 = 0.0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $z0 = r0.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean renderAsPercentages>
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $z0 = r0.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean renderAsPercentages> >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if $z0 == 0
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if $z0 == 0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : d0 = staticinvoke <org.jfree.data.DataUtilities: double calculateColumnTotal(org.jfree.data.Values2D,int,int[])>(r1, i1, r2)
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if $z0 == 0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : i2 = 0
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : i2 = 0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if i2 >= i0
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if i2 >= i0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $z1 = virtualinvoke r0.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean isSeriesVisible(int)>(i2)
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if i2 >= i0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : return r3
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $z1 = virtualinvoke r0.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean isSeriesVisible(int)>(i2) >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if $z1 == 0
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if $z1 == 0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : d1 = 0.0
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if $z1 == 0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : i2 = i2 + 1
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : i2 = i2 + 1 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : goto [?= (branch)]
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : goto [?= (branch)] >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if i2 >= i0
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : d1 = 0.0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : r4 = interfaceinvoke r1.<org.jfree.data.category.CategoryDataset: java.lang.Number getValue(int,int)>(i2, i1)
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : r4 = interfaceinvoke r1.<org.jfree.data.category.CategoryDataset: java.lang.Number getValue(int,int)>(i2, i1) >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if r4 == null
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if r4 == null >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : d1 = virtualinvoke r4.<java.lang.Number: double doubleValue()>()
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if r4 == null >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1)
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1) >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if $z3 != 0
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if $z3 != 0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $b3 = d1 cmpl 0.0
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if $z3 != 0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : i2 = i2 + 1
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $b3 = d1 cmpl 0.0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if $b3 < 0
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if $b3 < 0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $b4 = 1
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if $b3 < 0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $b5 = 0
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $b5 = 0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $d4 = r3[$b5]
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $d4 = r3[$b5] >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $d5 = $d4 + d1
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $d5 = $d4 + d1 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : r3[$b5] = $d5
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : r3[$b5] = $d5 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : i2 = i2 + 1
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $b4 = 1 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $d2 = r3[$b4]
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $d2 = r3[$b4] >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $d3 = $d2 + d1
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $d3 = $d2 + d1 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : r3[$b4] = $d3
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : r3[$b4] = $d3 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : goto [?= i2 = i2 + 1]
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : goto [?= i2 = i2 + 1] >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : i2 = i2 + 1
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : d1 = virtualinvoke r4.<java.lang.Number: double doubleValue()>() >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $z2 = r0.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean renderAsPercentages>
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $z2 = r0.<org.jfree.chart.renderer.category.StackedAreaRenderer: boolean renderAsPercentages> >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if $z2 == 0
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if $z2 == 0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : d1 = d1 / d0
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : if $z2 == 0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1)
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : d1 = d1 / d0 >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1)
org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : d0 = staticinvoke <org.jfree.data.DataUtilities: double calculateColumnTotal(org.jfree.data.Values2D,int,int[])>(r1, i1, r2) >>>>>>>> org.jfree.chart.renderer.category.StackedAreaRenderer.getStackValues : i2 = 0
