org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : d0 = #NaN >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : i0 = virtualinvoke r0.<org.jfree.data.xy.XYSeriesCollection: int getSeriesCount()>()
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : i0 = virtualinvoke r0.<org.jfree.data.xy.XYSeriesCollection: int getSeriesCount()>() >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : i1 = 0
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : i1 = 0 >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : if i1 >= i0
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : if i1 >= i0 >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : r1 = virtualinvoke r0.<org.jfree.data.xy.XYSeriesCollection: org.jfree.data.xy.XYSeries getSeries(int)>(i1)
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : if i1 >= i0 >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : return d0
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : r1 = virtualinvoke r0.<org.jfree.data.xy.XYSeriesCollection: org.jfree.data.xy.XYSeries getSeries(int)>(i1) >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : d1 = virtualinvoke r1.<org.jfree.data.xy.XYSeries: double getMaxY()>()
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : d1 = virtualinvoke r1.<org.jfree.data.xy.XYSeries: double getMaxY()>() >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0)
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0) >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : if $z1 == 0
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : if $z1 == 0 >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : d0 = d1
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : if $z1 == 0 >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1)
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1) >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : if $z2 != 0
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : if $z2 != 0 >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : d0 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1)
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : if $z2 != 0 >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : i1 = i1 + 1
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : i1 = i1 + 1 >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : goto [?= (branch)]
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : goto [?= (branch)] >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : if i1 >= i0
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : d0 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1) >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : i1 = i1 + 1
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : d0 = d1 >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : goto [?= i1 = i1 + 1]
org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : goto [?= i1 = i1 + 1] >>>>>>>> org.jfree.data.xy.XYSeriesCollection.getRangeUpperBound : i1 = i1 + 1
