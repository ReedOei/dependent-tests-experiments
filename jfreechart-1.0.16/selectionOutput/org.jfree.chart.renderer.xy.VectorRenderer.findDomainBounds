org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "dataset") >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d0 = #Infinity
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d0 = #Infinity >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d1 = #-Infinity
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d1 = #-Infinity >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i0 = interfaceinvoke r1.<org.jfree.data.xy.XYDataset: int getSeriesCount()>()
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i0 = interfaceinvoke r1.<org.jfree.data.xy.XYDataset: int getSeriesCount()>() >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : $z0 = r1 instanceof org.jfree.data.xy.VectorXYDataset
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : $z0 = r1 instanceof org.jfree.data.xy.VectorXYDataset >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if $z0 == 0
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if $z0 == 0 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : r2 = (org.jfree.data.xy.VectorXYDataset) r1
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if $z0 == 0 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i5 = 0
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i5 = 0 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if i5 >= i0
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if i5 >= i0 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i6 = interfaceinvoke r1.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(i5)
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if i5 >= i0 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : $b8 = d0 cmpl d1
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : $b8 = d0 cmpl d1 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if $b8 <= 0
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if $b8 <= 0 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : return null
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if $b8 <= 0 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : $r3 = new org.jfree.data.Range
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : $r3 = new org.jfree.data.Range >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : specialinvoke $r3.<org.jfree.data.Range: void <init>(double,double)>(d0, d1)
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : specialinvoke $r3.<org.jfree.data.Range: void <init>(double,double)>(d0, d1) >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : return $r3
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i6 = interfaceinvoke r1.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(i5) >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i7 = 0
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i7 = 0 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if i7 >= i6
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if i7 >= i6 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d5 = interfaceinvoke r1.<org.jfree.data.xy.XYDataset: double getXValue(int,int)>(i5, i7)
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if i7 >= i6 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i5 = i5 + 1
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i5 = i5 + 1 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : goto [?= (branch)]
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : goto [?= (branch)] >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if i5 >= i0
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d5 = interfaceinvoke r1.<org.jfree.data.xy.XYDataset: double getXValue(int,int)>(i5, i7) >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d6 = d5
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d6 = d5 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d5)
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d5) >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d6)
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d6) >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i7 = i7 + 1
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i7 = i7 + 1 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : goto [?= (branch)]
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : goto [?= (branch)] >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if i7 >= i6
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : r2 = (org.jfree.data.xy.VectorXYDataset) r1 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i1 = 0
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i1 = 0 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if i1 >= i0
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if i1 >= i0 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i2 = interfaceinvoke r1.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(i1)
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if i1 >= i0 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : goto [?= $b8 = d0 cmpl d1]
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : goto [?= $b8 = d0 cmpl d1] >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : $b8 = d0 cmpl d1
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i2 = interfaceinvoke r1.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(i1) >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i3 = 0
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i3 = 0 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if i3 >= i2
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if i3 >= i2 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d2 = interfaceinvoke r2.<org.jfree.data.xy.VectorXYDataset: double getVectorXValue(int,int)>(i1, i3)
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if i3 >= i2 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i1 = i1 + 1
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i1 = i1 + 1 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : goto [?= (branch)]
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : goto [?= (branch)] >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if i1 >= i0
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d2 = interfaceinvoke r2.<org.jfree.data.xy.VectorXYDataset: double getVectorXValue(int,int)>(i1, i3) >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : $b4 = d2 cmpg 0.0
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : $b4 = d2 cmpg 0.0 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if $b4 >= 0
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if $b4 >= 0 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d3 = interfaceinvoke r2.<org.jfree.data.xy.VectorXYDataset: double getXValue(int,int)>(i1, i3)
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if $b4 >= 0 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d4 = interfaceinvoke r2.<org.jfree.data.xy.VectorXYDataset: double getXValue(int,int)>(i1, i3)
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d4 = interfaceinvoke r2.<org.jfree.data.xy.VectorXYDataset: double getXValue(int,int)>(i1, i3) >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d3 = d4 + d2
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d3 = d4 + d2 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d4)
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d4) >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d3)
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d3) >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i3 = i3 + 1
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : i3 = i3 + 1 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : goto [?= (branch)]
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : goto [?= (branch)] >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : if i3 >= i2
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d3 = interfaceinvoke r2.<org.jfree.data.xy.VectorXYDataset: double getXValue(int,int)>(i1, i3) >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d4 = d3 + d2
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d4 = d3 + d2 >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : goto [?= d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d4)]
org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : goto [?= d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d4)] >>>>>>>> org.jfree.chart.renderer.xy.VectorRenderer.findDomainBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d4)
