org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r3, "radialAxis") >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $r11 = virtualinvoke r3.<org.jfree.chart.axis.ValueAxis: java.awt.Font getTickLabelFont()>()
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $r11 = virtualinvoke r3.<org.jfree.chart.axis.ValueAxis: java.awt.Font getTickLabelFont()>() >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : virtualinvoke r1.<java.awt.Graphics2D: void setFont(java.awt.Font)>($r11)
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : virtualinvoke r1.<java.awt.Graphics2D: void setFont(java.awt.Font)>($r11) >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $r12 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: java.awt.Paint getRadiusGridlinePaint()>()
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $r12 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: java.awt.Paint getRadiusGridlinePaint()>() >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : virtualinvoke r1.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r12)
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : virtualinvoke r1.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r12) >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $r13 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: java.awt.Stroke getRadiusGridlineStroke()>()
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $r13 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: java.awt.Stroke getRadiusGridlineStroke()>() >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : virtualinvoke r1.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r13)
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : virtualinvoke r1.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r13) >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $z0 = virtualinvoke r3.<org.jfree.chart.axis.ValueAxis: boolean isInverted()>()
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $z0 = virtualinvoke r3.<org.jfree.chart.axis.ValueAxis: boolean isInverted()>() >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : if $z0 == 0
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : if $z0 == 0 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : d0 = virtualinvoke r3.<org.jfree.chart.axis.ValueAxis: double getUpperBound()>()
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : if $z0 == 0 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : d0 = virtualinvoke r3.<org.jfree.chart.axis.ValueAxis: double getLowerBound()>()
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : d0 = virtualinvoke r3.<org.jfree.chart.axis.ValueAxis: double getLowerBound()>() >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : r6 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: java.awt.Point translateToJava2D(double,double,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>(0.0, d0, r3, r5)
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : r6 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: java.awt.Point translateToJava2D(double,double,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>(0.0, d0, r3, r5) >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : r7 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>()
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : r7 = interfaceinvoke r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : if $z1 == 0
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : if $z1 == 0 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $r14 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : if $z1 == 0 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : return
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $r14 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : r8 = (org.jfree.chart.axis.NumberTick) $r14
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : r8 = (org.jfree.chart.axis.NumberTick) $r14 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $z2 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: boolean isCounterClockwise()>()
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $z2 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: boolean isCounterClockwise()>() >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : if $z2 == 0
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : if $z2 == 0 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $d2 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: double getAngleOffset()>()
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : if $z2 == 0 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $d3 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: double getAngleOffset()>()
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $d3 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: double getAngleOffset()>() >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $d2 = neg $d3
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $d2 = neg $d3 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : d1 = $d2
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : d1 = $d2 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $r15 = virtualinvoke r8.<org.jfree.chart.axis.NumberTick: java.lang.Number getNumber()>()
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $r15 = virtualinvoke r8.<org.jfree.chart.axis.NumberTick: java.lang.Number getNumber()>() >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $d4 = virtualinvoke $r15.<java.lang.Number: double doubleValue()>()
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $d4 = virtualinvoke $r15.<java.lang.Number: double doubleValue()>() >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : r9 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: java.awt.Point translateToJava2D(double,double,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>(d1, $d4, r3, r5)
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : r9 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: java.awt.Point translateToJava2D(double,double,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>(d1, $d4, r3, r5) >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $i4 = r9.<java.awt.Point: int x>
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $i4 = r9.<java.awt.Point: int x> >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $i5 = r6.<java.awt.Point: int x>
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $i5 = r6.<java.awt.Point: int x> >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : i0 = $i4 - $i5
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : i0 = $i4 - $i5 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $i6 = r6.<java.awt.Point: int x>
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $i6 = r6.<java.awt.Point: int x> >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : i1 = $i6 - i0
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : i1 = $i6 - i0 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $i7 = r6.<java.awt.Point: int y>
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $i7 = r6.<java.awt.Point: int y> >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : i2 = $i7 - i0
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : i2 = $i7 - i0 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : i3 = 2 * i0
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : i3 = 2 * i0 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $r16 = new java.awt.geom.Ellipse2D$Double
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $r16 = new java.awt.geom.Ellipse2D$Double >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $d5 = (double) i1
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $d5 = (double) i1 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $d6 = (double) i2
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $d6 = (double) i2 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $d7 = (double) i3
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $d7 = (double) i3 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $d8 = (double) i3
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $d8 = (double) i3 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : specialinvoke $r16.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($d5, $d6, $d7, $d8)
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : specialinvoke $r16.<java.awt.geom.Ellipse2D$Double: void <init>(double,double,double,double)>($d5, $d6, $d7, $d8) >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : r10 = $r16
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : r10 = $r16 >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $r17 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: java.awt.Paint getRadiusGridlinePaint()>()
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $r17 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: java.awt.Paint getRadiusGridlinePaint()>() >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : virtualinvoke r1.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r17)
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : virtualinvoke r1.<java.awt.Graphics2D: void setPaint(java.awt.Paint)>($r17) >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : virtualinvoke r1.<java.awt.Graphics2D: void draw(java.awt.Shape)>(r10)
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : virtualinvoke r1.<java.awt.Graphics2D: void draw(java.awt.Shape)>(r10) >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : goto [?= $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : goto [?= $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $z1 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : $d2 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: double getAngleOffset()>() >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : goto [?= d1 = $d2]
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : goto [?= d1 = $d2] >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : d1 = $d2
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : d0 = virtualinvoke r3.<org.jfree.chart.axis.ValueAxis: double getUpperBound()>() >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : goto [?= r6 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: java.awt.Point translateToJava2D(double,double,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>(0.0, d0, r3, r5)]
org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : goto [?= r6 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: java.awt.Point translateToJava2D(double,double,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>(0.0, d0, r3, r5)] >>>>>>>> org.jfree.chart.renderer.DefaultPolarItemRenderer.drawRadialGridLines : r6 = virtualinvoke r2.<org.jfree.chart.plot.PolarPlot: java.awt.Point translateToJava2D(double,double,org.jfree.chart.axis.ValueAxis,java.awt.geom.Rectangle2D)>(0.0, d0, r3, r5)
