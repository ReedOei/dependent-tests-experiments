org.jfree.data.KeyToGroupMap.getGroups : $r1 = new java.util.ArrayList >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : specialinvoke $r1.<java.util.ArrayList: void <init>()>()
org.jfree.data.KeyToGroupMap.getGroups : specialinvoke $r1.<java.util.ArrayList: void <init>()>() >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : r2 = $r1
org.jfree.data.KeyToGroupMap.getGroups : r2 = $r1 >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : $r5 = r0.<org.jfree.data.KeyToGroupMap: java.lang.Comparable defaultGroup>
org.jfree.data.KeyToGroupMap.getGroups : $r5 = r0.<org.jfree.data.KeyToGroupMap: java.lang.Comparable defaultGroup> >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r5)
org.jfree.data.KeyToGroupMap.getGroups : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r5) >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : $r6 = r0.<org.jfree.data.KeyToGroupMap: java.util.List groups>
org.jfree.data.KeyToGroupMap.getGroups : $r6 = r0.<org.jfree.data.KeyToGroupMap: java.util.List groups> >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>()
org.jfree.data.KeyToGroupMap.getGroups : r3 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.jfree.data.KeyToGroupMap.getGroups : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : if $z1 == 0
org.jfree.data.KeyToGroupMap.getGroups : if $z1 == 0 >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.jfree.data.KeyToGroupMap.getGroups : if $z1 == 0 >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : return r2
org.jfree.data.KeyToGroupMap.getGroups : $r7 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : r4 = (java.lang.Comparable) $r7
org.jfree.data.KeyToGroupMap.getGroups : r4 = (java.lang.Comparable) $r7 >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : $z2 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>(r4)
org.jfree.data.KeyToGroupMap.getGroups : $z2 = interfaceinvoke r2.<java.util.List: boolean contains(java.lang.Object)>(r4) >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : if $z2 != 0
org.jfree.data.KeyToGroupMap.getGroups : if $z2 != 0 >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4)
org.jfree.data.KeyToGroupMap.getGroups : if $z2 != 0 >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.jfree.data.KeyToGroupMap.getGroups : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.jfree.data.KeyToGroupMap.getGroups : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r4) >>>>>>>> org.jfree.data.KeyToGroupMap.getGroups : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
