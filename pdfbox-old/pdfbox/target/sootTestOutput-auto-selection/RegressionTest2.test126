org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : $r1 = new org.apache.pdfbox.io.ScratchFile >>>>>>>> org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : $r2 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly()>()
org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : $r2 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly()>() >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly(long)>(-1L)
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly(long)>(-1L) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 0, l0, l0)
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 0, l0, l0) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : return $r0
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : return $r0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFile: void <init>(org.apache.pdfbox.io.MemoryUsageSetting)>($r2)
org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFile: void <init>(org.apache.pdfbox.io.MemoryUsageSetting)>($r2) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useMainMemory>
org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useMainMemory> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes>
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $b1 = $l0 cmp 0L
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : if $b1 < 0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : if $b1 < 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $z0 = 0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxStorageBytes>
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxStorageBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $b1 = $l0 cmp 0L
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : if $b1 <= 0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : if $b1 <= 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $z0 = 0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : return $z0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : return $r1
org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : r29 = null
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : r29 = null >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if r0 == null
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if r0 == null >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName S>
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName S> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getNameAsString(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getNameAsString(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : r5 = null
org.apache.pdfbox.cos.COSDictionary.getNameAsString : r5 = null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.getNameAsString : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null
org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 1
org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : goto [?= return $z0]
org.apache.pdfbox.util.SmallMap.isEmpty : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : return $z0
org.apache.pdfbox.util.SmallMap.isEmpty : return $z0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0
org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : return -1
org.apache.pdfbox.util.SmallMap.findKey : return -1 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : if i0 >= 0
org.apache.pdfbox.util.SmallMap.get : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r3 = null
org.apache.pdfbox.util.SmallMap.get : $r3 = null >>>>>>>> org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3]
org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3] >>>>>>>> org.apache.pdfbox.util.SmallMap.get : return $r3
org.apache.pdfbox.util.SmallMap.get : return $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSDictionary.getNameAsString : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getNameAsString : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : $z1 = r2 instanceof org.apache.pdfbox.cos.COSString
org.apache.pdfbox.cos.COSDictionary.getNameAsString : $z1 = r2 instanceof org.apache.pdfbox.cos.COSString >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : if $z1 == 0
org.apache.pdfbox.cos.COSDictionary.getNameAsString : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : return r5
org.apache.pdfbox.cos.COSDictionary.getNameAsString : return r5 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r3 = "JavaScript"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r3 = "JavaScript" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z0 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r4 = "GoTo"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r4 = "GoTo" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z1 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r5 = "Launch"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r5 = "Launch" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z2 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r6 = "GoToR"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r6 = "GoToR" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z3 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r7 = "URI"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r7 = "URI" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z4 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r8 = "Named"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r8 = "Named" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z5 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z5 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z5 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z5 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r9 = "Sound"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r9 = "Sound" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z6 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z6 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z6 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z6 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r10 = "Movie"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r10 = "Movie" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z7 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z7 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z7 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z7 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r11 = "ImportData"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r11 = "ImportData" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z8 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z8 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z8 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z8 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r12 = "ResetForm"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r12 = "ResetForm" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z9 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z9 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z9 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z9 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r13 = "Hide"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r13 = "Hide" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z10 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z10 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z10 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z10 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r14 = "SubmitForm"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r14 = "SubmitForm" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z11 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z11 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z11 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z11 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r15 = "Thread"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r15 = "Thread" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z12 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z12 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z12 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z12 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : return r29
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : return r29 >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>()
org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.checkClosed : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.checkClosed : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.checkClosed : if $r1 == null
org.apache.pdfbox.cos.COSStream.checkClosed : if $r1 == null >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting>
org.apache.pdfbox.cos.COSStream.createInputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : if $z0 == 0
org.apache.pdfbox.cos.COSStream.createInputStream : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void ensureRandomAccessExists(boolean)>(1)
org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void ensureRandomAccessExists(boolean)>(1) >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : if $r1 != null
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : if $r1 != null >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : if z0 == 0
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : if z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r2 = <org.apache.pdfbox.cos.COSStream: org.apache.commons.logging.Log LOG>
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r2 = <org.apache.pdfbox.cos.COSStream: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $z1 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $z1 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : if $z1 == 0
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r4 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r4 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r5 = virtualinvoke $r4.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer()>()
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r5 = virtualinvoke $r4.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : $r1 = new org.apache.pdfbox.io.ScratchFileBuffer
org.apache.pdfbox.io.ScratchFile.createBuffer : $r1 = new org.apache.pdfbox.io.ScratchFileBuffer >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFileBuffer: void <init>(org.apache.pdfbox.io.ScratchFile)>(r0)
org.apache.pdfbox.io.ScratchFile.createBuffer : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFileBuffer: void <init>(org.apache.pdfbox.io.ScratchFile)>(r0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.checkClosed : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed>
org.apache.pdfbox.io.ScratchFile.checkClosed : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> >>>>>>>> org.apache.pdfbox.io.ScratchFile.checkClosed : if $z0 == 0
org.apache.pdfbox.io.ScratchFile.checkClosed : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getPageSize : return 4096
org.apache.pdfbox.io.ScratchFile.getPageSize : return 4096 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i2 = $i0 + 1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i2 = $i0 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i1 = lengthof $r2
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i1 = lengthof $r2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : if $i2 < $i1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : if $i2 < $i1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r8 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r8 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : i8 = virtualinvoke $r8.<org.apache.pdfbox.io.ScratchFile: int getNewPage()>()
org.apache.pdfbox.io.ScratchFileBuffer.addPage : i8 = virtualinvoke $r8.<org.apache.pdfbox.io.ScratchFile: int getNewPage()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r3 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r3 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : entermonitor $r3
org.apache.pdfbox.io.ScratchFile.getNewPage : entermonitor $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : i3 = virtualinvoke $r4.<java.util.BitSet: int nextSetBit(int)>(0)
org.apache.pdfbox.io.ScratchFile.getNewPage : i3 = virtualinvoke $r4.<java.util.BitSet: int nextSetBit(int)>(0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 >= 0
org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 >= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : virtualinvoke $r5.<java.util.BitSet: void clear(int)>(i3)
org.apache.pdfbox.io.ScratchFile.getNewPage : virtualinvoke $r5.<java.util.BitSet: void clear(int)>(i3) >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.getNewPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 < $i0
org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 < $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $i1 = i3 + 1
org.apache.pdfbox.io.ScratchFile.getNewPage : $i1 = i3 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = $i1
org.apache.pdfbox.io.ScratchFile.getNewPage : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = $i1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : exitmonitor $r3
org.apache.pdfbox.io.ScratchFile.getNewPage : exitmonitor $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : return i3
org.apache.pdfbox.io.ScratchFile.getNewPage : return i3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9[$i9] = i8
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9[$i9] = i8 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i10 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i10 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = $i10
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = $i10 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l12 = (long) $i11
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l12 = (long) $i11 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l14 = (long) $i13
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l14 = (long) $i13 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l15 = $l12 * $l14
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l15 = $l12 * $l14 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l15
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l15 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i17 = $i16 + 1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i17 = $i16 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> = $i17
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> = $i17 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r11 = newarray (byte)[$i18]
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r11 = newarray (byte)[$i18] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r11
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r11 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : return $r1
org.apache.pdfbox.io.ScratchFile.createBuffer : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> = $r5
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> = $r5 >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $r2 = new org.apache.pdfbox.io.RandomAccessInputStream
org.apache.pdfbox.cos.COSStream.createInputStream : $r2 = new org.apache.pdfbox.io.RandomAccessInputStream >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $r3 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.createInputStream : $r3 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke $r2.<org.apache.pdfbox.io.RandomAccessInputStream: void <init>(org.apache.pdfbox.io.RandomAccessRead)>($r3)
org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke $r2.<org.apache.pdfbox.io.RandomAccessInputStream: void <init>(org.apache.pdfbox.io.RandomAccessRead)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $r4 = specialinvoke r0.<org.apache.pdfbox.cos.COSStream: java.util.List getFilterList()>()
org.apache.pdfbox.cos.COSStream.createInputStream : $r4 = specialinvoke r0.<org.apache.pdfbox.cos.COSStream: java.util.List getFilterList()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : $r5 = new java.util.ArrayList
org.apache.pdfbox.cos.COSStream.getFilterList : $r5 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.cos.COSStream.getFilterList : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getFilters()>()
org.apache.pdfbox.cos.COSStream.getFilterList : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getFilters()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilters : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FILTER>
org.apache.pdfbox.cos.COSStream.getFilters : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FILTER> >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilters : $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r1)
org.apache.pdfbox.cos.COSStream.getFilters : $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r1) >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilters : return $r2
org.apache.pdfbox.cos.COSStream.getFilters : return $r2 >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSStream.getFilterList : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : if $z0 == 0
org.apache.pdfbox.cos.COSStream.getFilterList : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : $z1 = r2 instanceof org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.cos.COSStream.getFilterList : $z1 = r2 instanceof org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : if $z1 == 0
org.apache.pdfbox.cos.COSStream.getFilterList : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : return $r5
org.apache.pdfbox.cos.COSStream.getFilterList : return $r5 >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $r5 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSStream.createInputStream : $r5 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $r6 = staticinvoke <org.apache.pdfbox.cos.COSInputStream: org.apache.pdfbox.cos.COSInputStream create(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.InputStream,org.apache.pdfbox.io.ScratchFile)>($r4, r0, $r2, $r5)
org.apache.pdfbox.cos.COSStream.createInputStream : $r6 = staticinvoke <org.apache.pdfbox.cos.COSInputStream: org.apache.pdfbox.cos.COSInputStream create(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.InputStream,org.apache.pdfbox.io.ScratchFile)>($r4, r0, $r2, $r5) >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : $r5 = new java.util.ArrayList
org.apache.pdfbox.cos.COSInputStream.create : $r5 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.cos.COSInputStream.create : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : r16 = r2
org.apache.pdfbox.cos.COSInputStream.create : r16 = r2 >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>()
org.apache.pdfbox.cos.COSInputStream.create : $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : if $z0 == 0
org.apache.pdfbox.cos.COSInputStream.create : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : goto [?= $r6 = new org.apache.pdfbox.cos.COSInputStream]
org.apache.pdfbox.cos.COSInputStream.create : goto [?= $r6 = new org.apache.pdfbox.cos.COSInputStream] >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : $r6 = new org.apache.pdfbox.cos.COSInputStream
org.apache.pdfbox.cos.COSInputStream.create : $r6 = new org.apache.pdfbox.cos.COSInputStream >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : specialinvoke $r6.<org.apache.pdfbox.cos.COSInputStream: void <init>(java.io.InputStream,java.util.List)>(r16, $r5)
org.apache.pdfbox.cos.COSInputStream.create : specialinvoke $r6.<org.apache.pdfbox.cos.COSInputStream: void <init>(java.io.InputStream,java.util.List)>(r16, $r5) >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : return $r6
org.apache.pdfbox.cos.COSInputStream.create : return $r6 >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : return $r6
org.apache.pdfbox.cos.COSStream.createInputStream : return $r6 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.skip : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessInputStream: void restorePosition()>()
org.apache.pdfbox.io.RandomAccessInputStream.skip : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessInputStream: void restorePosition()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : $r1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input>
org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : $r1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : $l0 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position>
org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : $l0 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>($l0)
org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>($l0) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.seek : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : if $r1 != null
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : if $r1 != null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : virtualinvoke $r2.<org.apache.pdfbox.io.ScratchFile: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : virtualinvoke $r2.<org.apache.pdfbox.io.ScratchFile: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b3 = l0 cmp $l2
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b3 = l0 cmp $l2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b3 <= 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b3 <= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b4 = l0 cmp 0L
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b4 = l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b4 >= 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b4 >= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b6 = l0 cmp $l5
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b6 = l0 cmp $l5 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b6 < 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b6 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l23 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l23 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i21 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i21 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l22 = (long) $i21
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l22 = (long) $i21 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l24 = $l23 + $l22
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l24 = $l23 + $l22 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b25 = l0 cmp $l24
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b25 = l0 cmp $l24 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b25 > 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b25 > 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l26 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l26 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l27 = l0 - $l26
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l27 = l0 - $l26 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i28 = (int) $l27
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i28 = (int) $l27 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i28
org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i28 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : goto [?= return]
org.apache.pdfbox.io.ScratchFileBuffer.seek : goto [?= return] >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.skip : $r1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input>
org.apache.pdfbox.io.RandomAccessInputStream.skip : $r1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.skip : $l1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position>
org.apache.pdfbox.io.RandomAccessInputStream.skip : $l1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.skip : $l2 = $l1 + l0
org.apache.pdfbox.io.RandomAccessInputStream.skip : $l2 = $l1 + l0 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.skip : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>($l2)
org.apache.pdfbox.io.RandomAccessInputStream.skip : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>($l2) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $r12 = new java.io.EOFException
org.apache.pdfbox.io.ScratchFileBuffer.seek : $r12 = new java.io.EOFException >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : specialinvoke $r12.<java.io.EOFException: void <init>()>()
org.apache.pdfbox.io.ScratchFileBuffer.seek : specialinvoke $r12.<java.io.EOFException: void <init>()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : throw $r12
