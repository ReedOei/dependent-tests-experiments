org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : $r1 = new org.apache.pdfbox.io.ScratchFile >>>>>>>> org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : $r2 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly()>()
org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : $r2 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly()>() >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly(long)>(-1L)
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly(long)>(-1L) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 0, l0, l0)
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 0, l0, l0) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : return $r0
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : return $r0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFile: void <init>(org.apache.pdfbox.io.MemoryUsageSetting)>($r2)
org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFile: void <init>(org.apache.pdfbox.io.MemoryUsageSetting)>($r2) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useMainMemory>
org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useMainMemory> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes>
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $b1 = $l0 cmp 0L
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : if $b1 < 0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : if $b1 < 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $z0 = 0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxStorageBytes>
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxStorageBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $b1 = $l0 cmp 0L
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : if $b1 <= 0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : if $b1 <= 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $z0 = 0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : return $z0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : return $r1
org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = null
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = null >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : if r1 == null
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : if r1 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : if r7 != null
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : if r7 != null >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r2 = new org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r2 = new org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : specialinvoke $r2.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null)
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : specialinvoke $r2.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null) >>>>>>>> org.apache.pdfbox.cos.COSObject.setObject : r0.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase baseObject> = r1
org.apache.pdfbox.cos.COSObject.setObject : r0.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase baseObject> = r1 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = $r2
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = $r2 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : return r7
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : return r7 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $r7 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool>
org.apache.pdfbox.cos.COSDocument.getObjectByType : $r7 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>()
org.apache.pdfbox.cos.COSDocument.getObjectByType : $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSDocument.getObjectByType : r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.cos.COSDocument.getObjectByType : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z0 == 0
org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : return null
org.apache.pdfbox.cos.COSDocument.getObjectByType : return null >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PDField.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.interactive.form.PDField: org.apache.pdfbox.cos.COSDictionary dictionary>
org.apache.pdfbox.pdmodel.interactive.form.PDField.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.interactive.form.PDField: org.apache.pdfbox.cos.COSDictionary dictionary> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PDField.getCOSObject : return $r1
org.apache.pdfbox.pdmodel.interactive.form.PDField.getCOSObject : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : if r2 != null
org.apache.pdfbox.cos.COSDictionary.setItem : if r2 != null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
org.apache.pdfbox.cos.COSDictionary.setItem : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if r1 == null
org.apache.pdfbox.util.SmallMap.put : if r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if r2 != null
org.apache.pdfbox.util.SmallMap.put : if r2 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if $r5 != null
org.apache.pdfbox.util.SmallMap.put : if $r5 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10 = newarray (java.lang.Object)[2]
org.apache.pdfbox.util.SmallMap.put : $r10 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10[0] = r1
org.apache.pdfbox.util.SmallMap.put : $r10[0] = r1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10[1] = r2
org.apache.pdfbox.util.SmallMap.put : $r10[1] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r10
org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r10 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : return null
org.apache.pdfbox.util.SmallMap.put : return null >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.putAll : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : if $r3 == null
org.apache.pdfbox.util.SmallMap.putAll : if $r3 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $i1 = interfaceinvoke r1.<java.util.Map: int size()>()
org.apache.pdfbox.util.SmallMap.putAll : $i1 = interfaceinvoke r1.<java.util.Map: int size()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.size : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.size : if $r1 != null
org.apache.pdfbox.util.SmallMap.size : if $r1 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.size : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.size : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $i1 = $i0 >> 1
org.apache.pdfbox.util.SmallMap.size : $i1 = $i0 >> 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.size : return $i1
org.apache.pdfbox.util.SmallMap.size : return $i1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $i2 = $i1 << 1
org.apache.pdfbox.util.SmallMap.putAll : $i2 = $i1 << 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r4 = newarray (java.lang.Object)[$i2]
org.apache.pdfbox.util.SmallMap.putAll : $r4 = newarray (java.lang.Object)[$i2] >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r4
org.apache.pdfbox.util.SmallMap.putAll : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r4 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : i9 = 0
org.apache.pdfbox.util.SmallMap.putAll : i9 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()
org.apache.pdfbox.util.SmallMap.putAll : $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.entrySet : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null
org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.isEmpty : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $i0 != 0
org.apache.pdfbox.util.SmallMap.isEmpty : if $i0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 0
org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : return $z0
org.apache.pdfbox.util.SmallMap.isEmpty : return $z0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : if $z0 == 0
org.apache.pdfbox.util.SmallMap.entrySet : if $z0 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r2 = new java.util.LinkedHashSet
org.apache.pdfbox.util.SmallMap.entrySet : $r2 = new java.util.LinkedHashSet >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>()
org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : i1 = 0
org.apache.pdfbox.util.SmallMap.entrySet : i1 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.entrySet : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $i0 = lengthof $r3
org.apache.pdfbox.util.SmallMap.entrySet : $i0 = lengthof $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : if i1 >= $i0
org.apache.pdfbox.util.SmallMap.entrySet : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r5 = new org.apache.pdfbox.util.SmallMap$SmallMapEntry
org.apache.pdfbox.util.SmallMap.entrySet : $r5 = new org.apache.pdfbox.util.SmallMap$SmallMapEntry >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r5.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: void <init>(org.apache.pdfbox.util.SmallMap,int)>(r0, i1)
org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r5.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: void <init>(org.apache.pdfbox.util.SmallMap,int)>(r0, i1) >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r5)
org.apache.pdfbox.util.SmallMap.entrySet : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r5) >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $r1 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: java.lang.Object getKey()>()
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $r1 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1)
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.access$000 : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.access$000 : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.access$000 : return $r1
org.apache.pdfbox.util.SmallMap.access$000 : return $r1 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r3 = $r2[$i0]
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r3 = $r2[$i0] >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : return $r3
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : return $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>()
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.apache.pdfbox.cos.COSName.hashCode : $i0 = r0.<org.apache.pdfbox.cos.COSName: int hashCode>
org.apache.pdfbox.cos.COSName.hashCode : $i0 = r0.<org.apache.pdfbox.cos.COSName: int hashCode> >>>>>>>> org.apache.pdfbox.cos.COSName.hashCode : return $i0
org.apache.pdfbox.cos.COSName.hashCode : return $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : return $i0
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : return $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : i1 = i1 + 2
org.apache.pdfbox.util.SmallMap.entrySet : i1 = i1 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : goto [?= $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.entrySet : goto [?= $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2)
org.apache.pdfbox.util.SmallMap.entrySet : $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : return $r4
org.apache.pdfbox.util.SmallMap.entrySet : return $r4 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : r26 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
org.apache.pdfbox.util.SmallMap.putAll : r26 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.util.SmallMap.putAll : $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : if $z1 == 0
org.apache.pdfbox.util.SmallMap.putAll : if $z1 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r6 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.util.SmallMap.putAll : $r6 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : r27 = (java.util.Map$Entry) $r6
org.apache.pdfbox.util.SmallMap.putAll : r27 = (java.util.Map$Entry) $r6 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r7 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.util.SmallMap.putAll : $r7 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : if $r7 == null
org.apache.pdfbox.util.SmallMap.putAll : if $r7 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r9 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.pdfbox.util.SmallMap.putAll : $r9 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1)
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1) >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i1 = $i0 + 1
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i1 = $i0 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r3 = $r2[$i1]
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r3 = $r2[$i1] >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : return $r3
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : return $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : if $r9 != null
org.apache.pdfbox.util.SmallMap.putAll : if $r9 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r10 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.putAll : $r10 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : i10 = i9 + 1
org.apache.pdfbox.util.SmallMap.putAll : i10 = i9 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r11 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.util.SmallMap.putAll : $r11 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r10[i9] = $r11
org.apache.pdfbox.util.SmallMap.putAll : $r10[i9] = $r11 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r12 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.putAll : $r12 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : i9 = i10 + 1
org.apache.pdfbox.util.SmallMap.putAll : i9 = i10 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r13 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.pdfbox.util.SmallMap.putAll : $r13 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r12[i10] = $r13
org.apache.pdfbox.util.SmallMap.putAll : $r12[i10] = $r13 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : goto [?= $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.util.SmallMap.putAll : goto [?= $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : goto [?= return]
org.apache.pdfbox.util.SmallMap.putAll : goto [?= return] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.put : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0
org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if r1 != null
org.apache.pdfbox.util.SmallMap.findKey : if r1 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : i1 = 0
org.apache.pdfbox.util.SmallMap.findKey : i1 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findKey : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.findKey : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if i1 >= $i0
org.apache.pdfbox.util.SmallMap.findKey : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findKey : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r4 = $r3[i1]
org.apache.pdfbox.util.SmallMap.findKey : $r4 = $r3[i1] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4)
org.apache.pdfbox.util.SmallMap.findKey : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSName.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSName.equals : if $z0 == 0
org.apache.pdfbox.cos.COSName.equals : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r4 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.equals : $r4 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r2 = (org.apache.pdfbox.cos.COSName) r1
org.apache.pdfbox.cos.COSName.equals : $r2 = (org.apache.pdfbox.cos.COSName) r1 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r3 = $r2.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.equals : $r3 = $r2.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3)
org.apache.pdfbox.cos.COSName.equals : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : if $z1 == 0
org.apache.pdfbox.cos.COSName.equals : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z2 = 0
org.apache.pdfbox.cos.COSName.equals : $z2 = 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : return $z2
org.apache.pdfbox.cos.COSName.equals : return $z2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z1 == 0
org.apache.pdfbox.util.SmallMap.findKey : if $z1 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : i1 = i1 + 2
org.apache.pdfbox.util.SmallMap.findKey : i1 = i1 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.findKey : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : return -1
org.apache.pdfbox.util.SmallMap.findKey : return -1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if i0 >= 0
org.apache.pdfbox.util.SmallMap.put : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r8 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r8 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : i5 = lengthof $r8
org.apache.pdfbox.util.SmallMap.put : i5 = lengthof $r8 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i3 = i5 + 2
org.apache.pdfbox.util.SmallMap.put : $i3 = i5 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3 = newarray (java.lang.Object)[$i3]
org.apache.pdfbox.util.SmallMap.put : r3 = newarray (java.lang.Object)[$i3] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r9 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r9 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r3, 0, i5)
org.apache.pdfbox.util.SmallMap.put : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r3, 0, i5) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3[i5] = r1
org.apache.pdfbox.util.SmallMap.put : r3[i5] = r1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i4 = i5 + 1
org.apache.pdfbox.util.SmallMap.put : $i4 = i5 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3[$i4] = r2
org.apache.pdfbox.util.SmallMap.put : r3[$i4] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = r3
org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : $r2 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1)
org.apache.pdfbox.cos.COSDictionary.getLong : $r2 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = null
org.apache.pdfbox.cos.COSName.getPDFName : r6 = null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : if r0 == null
org.apache.pdfbox.cos.COSName.getPDFName : if r0 == null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r1 = <org.apache.pdfbox.cos.COSName: java.util.Map commonNameMap>
org.apache.pdfbox.cos.COSName.getPDFName : $r1 = <org.apache.pdfbox.cos.COSName: java.util.Map commonNameMap> >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.apache.pdfbox.cos.COSName.getPDFName : $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r2
org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r2 >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : if r6 != null
org.apache.pdfbox.cos.COSName.getPDFName : if r6 != null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r3 = <org.apache.pdfbox.cos.COSName: java.util.Map nameMap>
org.apache.pdfbox.cos.COSName.getPDFName : $r3 = <org.apache.pdfbox.cos.COSName: java.util.Map nameMap> >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.apache.pdfbox.cos.COSName.getPDFName : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r4
org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r4 >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : return r6
org.apache.pdfbox.cos.COSName.getPDFName : return r6 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : $l0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName,long)>($r2, -1L)
org.apache.pdfbox.cos.COSDictionary.getLong : $l0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName,long)>($r2, -1L) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : l1 = l0
org.apache.pdfbox.cos.COSDictionary.getLong : l1 = l0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.getLong : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.get : if i0 >= 0
org.apache.pdfbox.util.SmallMap.get : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r3 = null
org.apache.pdfbox.util.SmallMap.get : $r3 = null >>>>>>>> org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3]
org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3] >>>>>>>> org.apache.pdfbox.util.SmallMap.get : return $r3
org.apache.pdfbox.util.SmallMap.get : return $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : $z0 = r2 instanceof org.apache.pdfbox.cos.COSNumber
org.apache.pdfbox.cos.COSDictionary.getLong : $z0 = r2 instanceof org.apache.pdfbox.cos.COSNumber >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getLong : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : return l1
org.apache.pdfbox.cos.COSDictionary.getLong : return l1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : return $l0
org.apache.pdfbox.cos.COSDictionary.getLong : return $l0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : $r3 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r2)
org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : $r3 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : $r4 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getEmbeddedString(java.lang.String,org.apache.pdfbox.cos.COSName,java.lang.String)>(r1, $r3, null)
org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : $r4 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getEmbeddedString(java.lang.String,org.apache.pdfbox.cos.COSName,java.lang.String)>(r1, $r3, null) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : r6 = r3
org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : r6 = r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : $r5 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(java.lang.String)>(r1)
org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : $r5 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r5 = new org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSName.getPDFName : $r5 = new org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : specialinvoke $r5.<org.apache.pdfbox.cos.COSName: void <init>(java.lang.String,boolean)>(r0, 0)
org.apache.pdfbox.cos.COSName.getPDFName : specialinvoke $r5.<org.apache.pdfbox.cos.COSName: void <init>(java.lang.String,boolean)>(r0, 0) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = $r5
org.apache.pdfbox.cos.COSName.getPDFName : r6 = $r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return $r3
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : r4 = (org.apache.pdfbox.cos.COSDictionary) $r5
org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : r4 = (org.apache.pdfbox.cos.COSDictionary) $r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : if r4 == null
org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : if r4 == null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : return r6
org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : return r6 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : return $r4
org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : return $r4 >>>>>>>> org.apache.pdfbox.cos.COSDocument.setTrailer : r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer> = r1
org.apache.pdfbox.cos.COSDocument.setTrailer : r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer> = r1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGB : specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: void init()>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGB : specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: void init()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: java.awt.color.ColorSpace awtColorSpace>
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: java.awt.color.ColorSpace awtColorSpace> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : if $r3 == null
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : if $r3 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : entermonitor r0
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : entermonitor r0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r5 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: java.awt.color.ColorSpace awtColorSpace>
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r5 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: java.awt.color.ColorSpace awtColorSpace> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : if $r5 == null
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : if $r5 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r6 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r6 = staticinvoke <java.awt.color.ColorSpace: java.awt.color.ColorSpace getInstance(int)>(1000) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: java.awt.color.ColorSpace awtColorSpace> = $r6
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: java.awt.color.ColorSpace awtColorSpace> = $r6 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r8 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: java.awt.color.ColorSpace awtColorSpace>
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r8 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: java.awt.color.ColorSpace awtColorSpace> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r7 = newarray (float)[4]
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r7 = newarray (float)[4] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r7[0] = 0.0F
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r7[0] = 0.0F >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r7[1] = 0.0F
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r7[1] = 0.0F >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r7[2] = 0.0F
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r7[2] = 0.0F >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r7[3] = 0.0F
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r7[3] = 0.0F >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : virtualinvoke $r8.<java.awt.color.ColorSpace: float[] toRGB(float[])>($r7)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : virtualinvoke $r8.<java.awt.color.ColorSpace: float[] toRGB(float[])>($r7) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : exitmonitor r0
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : exitmonitor r0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : goto [?= return]
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : goto [?= return] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGB : $r2 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: java.awt.color.ColorSpace awtColorSpace>
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGB : $r2 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: java.awt.color.ColorSpace awtColorSpace> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGB : $r3 = virtualinvoke $r2.<java.awt.color.ColorSpace: float[] toRGB(float[])>(r1)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGB : $r3 = virtualinvoke $r2.<java.awt.color.ColorSpace: float[] toRGB(float[])>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGB : return $r3
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGB : return $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.mergeInto : $r4 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Set entrySet()>()
org.apache.pdfbox.cos.COSDictionary.mergeInto : $r4 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Set entrySet()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.entrySet : $r1 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.entrySet : $r1 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.entrySet : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>()
org.apache.pdfbox.cos.COSDictionary.entrySet : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 1
org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : goto [?= return $z0]
org.apache.pdfbox.util.SmallMap.isEmpty : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r6 = staticinvoke <java.util.Collections: java.util.Set emptySet()>()
org.apache.pdfbox.util.SmallMap.entrySet : $r6 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : return $r6
org.apache.pdfbox.util.SmallMap.entrySet : return $r6 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.entrySet : return $r2
org.apache.pdfbox.cos.COSDictionary.entrySet : return $r2 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.mergeInto : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSDictionary.mergeInto : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.mergeInto : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.cos.COSDictionary.mergeInto : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.mergeInto : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.mergeInto : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>()
org.apache.pdfbox.cos.COSStream.createRawInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.checkClosed : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.checkClosed : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.checkClosed : if $r1 == null
org.apache.pdfbox.cos.COSStream.checkClosed : if $r1 == null >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawInputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting>
org.apache.pdfbox.cos.COSStream.createRawInputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawInputStream : if $z0 == 0
org.apache.pdfbox.cos.COSStream.createRawInputStream : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void ensureRandomAccessExists(boolean)>(1)
org.apache.pdfbox.cos.COSStream.createRawInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void ensureRandomAccessExists(boolean)>(1) >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : if $r1 != null
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : if $r1 != null >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : if z0 == 0
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : if z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r2 = <org.apache.pdfbox.cos.COSStream: org.apache.commons.logging.Log LOG>
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r2 = <org.apache.pdfbox.cos.COSStream: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $z1 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $z1 = interfaceinvoke $r2.<org.apache.commons.logging.Log: boolean isDebugEnabled()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : if $z1 == 0
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r4 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r4 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r5 = virtualinvoke $r4.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer()>()
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r5 = virtualinvoke $r4.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : $r1 = new org.apache.pdfbox.io.ScratchFileBuffer
org.apache.pdfbox.io.ScratchFile.createBuffer : $r1 = new org.apache.pdfbox.io.ScratchFileBuffer >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFileBuffer: void <init>(org.apache.pdfbox.io.ScratchFile)>(r0)
org.apache.pdfbox.io.ScratchFile.createBuffer : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFileBuffer: void <init>(org.apache.pdfbox.io.ScratchFile)>(r0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.checkClosed : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed>
org.apache.pdfbox.io.ScratchFile.checkClosed : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> >>>>>>>> org.apache.pdfbox.io.ScratchFile.checkClosed : if $z0 == 0
org.apache.pdfbox.io.ScratchFile.checkClosed : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getPageSize : return 4096
org.apache.pdfbox.io.ScratchFile.getPageSize : return 4096 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i2 = $i0 + 1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i2 = $i0 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i1 = lengthof $r2
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i1 = lengthof $r2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : if $i2 < $i1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : if $i2 < $i1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r8 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r8 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : i8 = virtualinvoke $r8.<org.apache.pdfbox.io.ScratchFile: int getNewPage()>()
org.apache.pdfbox.io.ScratchFileBuffer.addPage : i8 = virtualinvoke $r8.<org.apache.pdfbox.io.ScratchFile: int getNewPage()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r3 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r3 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : entermonitor $r3
org.apache.pdfbox.io.ScratchFile.getNewPage : entermonitor $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : i3 = virtualinvoke $r4.<java.util.BitSet: int nextSetBit(int)>(0)
org.apache.pdfbox.io.ScratchFile.getNewPage : i3 = virtualinvoke $r4.<java.util.BitSet: int nextSetBit(int)>(0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 >= 0
org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 >= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : virtualinvoke $r5.<java.util.BitSet: void clear(int)>(i3)
org.apache.pdfbox.io.ScratchFile.getNewPage : virtualinvoke $r5.<java.util.BitSet: void clear(int)>(i3) >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.getNewPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 < $i0
org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 < $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $i1 = i3 + 1
org.apache.pdfbox.io.ScratchFile.getNewPage : $i1 = i3 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = $i1
org.apache.pdfbox.io.ScratchFile.getNewPage : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = $i1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : exitmonitor $r3
org.apache.pdfbox.io.ScratchFile.getNewPage : exitmonitor $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : return i3
org.apache.pdfbox.io.ScratchFile.getNewPage : return i3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9[$i9] = i8
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9[$i9] = i8 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i10 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i10 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = $i10
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = $i10 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l12 = (long) $i11
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l12 = (long) $i11 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l14 = (long) $i13
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l14 = (long) $i13 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l15 = $l12 * $l14
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l15 = $l12 * $l14 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l15
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l15 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i17 = $i16 + 1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i17 = $i16 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> = $i17
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> = $i17 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r11 = newarray (byte)[$i18]
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r11 = newarray (byte)[$i18] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r11
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r11 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : return $r1
org.apache.pdfbox.io.ScratchFile.createBuffer : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> = $r5
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> = $r5 >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawInputStream : $r1 = new org.apache.pdfbox.io.RandomAccessInputStream
org.apache.pdfbox.cos.COSStream.createRawInputStream : $r1 = new org.apache.pdfbox.io.RandomAccessInputStream >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawInputStream : $r2 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.createRawInputStream : $r2 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawInputStream : specialinvoke $r1.<org.apache.pdfbox.io.RandomAccessInputStream: void <init>(org.apache.pdfbox.io.RandomAccessRead)>($r2)
org.apache.pdfbox.cos.COSStream.createRawInputStream : specialinvoke $r1.<org.apache.pdfbox.io.RandomAccessInputStream: void <init>(org.apache.pdfbox.io.RandomAccessRead)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawInputStream : return $r1
org.apache.pdfbox.cos.COSStream.createRawInputStream : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType0Font.load : $r2 = new org.apache.pdfbox.pdmodel.font.PDType0Font
org.apache.pdfbox.pdmodel.font.PDType0Font.load : $r2 = new org.apache.pdfbox.pdmodel.font.PDType0Font >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType0Font.load : $r3 = new org.apache.fontbox.ttf.TTFParser
org.apache.pdfbox.pdmodel.font.PDType0Font.load : $r3 = new org.apache.fontbox.ttf.TTFParser >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType0Font.load : specialinvoke $r3.<org.apache.fontbox.ttf.TTFParser: void <init>()>()
org.apache.pdfbox.pdmodel.font.PDType0Font.load : specialinvoke $r3.<org.apache.fontbox.ttf.TTFParser: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType0Font.load : $r4 = virtualinvoke $r3.<org.apache.fontbox.ttf.TTFParser: org.apache.fontbox.ttf.TrueTypeFont parse(java.io.InputStream)>(r1)
org.apache.pdfbox.pdmodel.font.PDType0Font.load : $r4 = virtualinvoke $r3.<org.apache.fontbox.ttf.TTFParser: org.apache.fontbox.ttf.TrueTypeFont parse(java.io.InputStream)>(r1) >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.available : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessInputStream: void restorePosition()>()
org.apache.pdfbox.io.RandomAccessInputStream.available : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessInputStream: void restorePosition()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : $r1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input>
org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : $r1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : $l0 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position>
org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : $l0 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>($l0)
org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>($l0) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.seek : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : if $r1 != null
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : if $r1 != null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : virtualinvoke $r2.<org.apache.pdfbox.io.ScratchFile: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : virtualinvoke $r2.<org.apache.pdfbox.io.ScratchFile: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b3 = l0 cmp $l2
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b3 = l0 cmp $l2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b3 <= 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b3 <= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b4 = l0 cmp 0L
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b4 = l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b4 >= 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b4 >= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b6 = l0 cmp $l5
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b6 = l0 cmp $l5 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b6 < 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b6 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l23 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l23 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i21 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i21 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l22 = (long) $i21
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l22 = (long) $i21 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l24 = $l23 + $l22
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l24 = $l23 + $l22 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b25 = l0 cmp $l24
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b25 = l0 cmp $l24 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b25 > 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b25 > 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l26 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l26 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l27 = l0 - $l26
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l27 = l0 - $l26 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i28 = (int) $l27
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i28 = (int) $l27 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i28
org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i28 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : goto [?= return]
org.apache.pdfbox.io.ScratchFileBuffer.seek : goto [?= return] >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.available : $r1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input>
org.apache.pdfbox.io.RandomAccessInputStream.available : $r1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.available : $l1 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: long length()>()
org.apache.pdfbox.io.RandomAccessInputStream.available : $l1 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: long length()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.length : $l0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.length : $l0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.length : return $l0
org.apache.pdfbox.io.ScratchFileBuffer.length : return $l0 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.available : $r2 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input>
org.apache.pdfbox.io.RandomAccessInputStream.available : $r2 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.available : $l2 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>()
org.apache.pdfbox.io.RandomAccessInputStream.available : $l2 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.getPosition : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.getPosition : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.getPosition : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.getPosition : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.getPosition : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.getPosition : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.getPosition : $l1 = (long) $i0
org.apache.pdfbox.io.ScratchFileBuffer.getPosition : $l1 = (long) $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.getPosition : $l3 = $l2 + $l1
org.apache.pdfbox.io.ScratchFileBuffer.getPosition : $l3 = $l2 + $l1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.getPosition : return $l3
org.apache.pdfbox.io.ScratchFileBuffer.getPosition : return $l3 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.available : l0 = $l1 - $l2
org.apache.pdfbox.io.RandomAccessInputStream.available : l0 = $l1 - $l2 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.available : $b3 = l0 cmp 2147483647L
org.apache.pdfbox.io.RandomAccessInputStream.available : $b3 = l0 cmp 2147483647L >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.available : if $b3 <= 0
org.apache.pdfbox.io.RandomAccessInputStream.available : if $b3 <= 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.available : $i4 = (int) l0
org.apache.pdfbox.io.RandomAccessInputStream.available : $i4 = (int) l0 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.available : return $i4
org.apache.pdfbox.io.RandomAccessInputStream.available : return $i4 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessInputStream: void restorePosition()>()
org.apache.pdfbox.io.RandomAccessInputStream.read : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessInputStream: void restorePosition()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $r2 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input>
org.apache.pdfbox.io.RandomAccessInputStream.read : $r2 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $z0 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>()
org.apache.pdfbox.io.RandomAccessInputStream.read : $z0 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l1 = (long) $i0
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l1 = (long) $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l4 = $l2 + $l1
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l4 = $l2 + $l1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $b5 = $l4 cmp $l3
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $b5 = $l4 cmp $l3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : if $b5 < 0
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : if $b5 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $z0 = 1
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $z0 = 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : goto [?= return $z0]
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : return $z0
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : return $z0 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : if $z0 == 0
org.apache.pdfbox.io.RandomAccessInputStream.read : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : return -1
