org.apache.pdfbox.io.MemoryUsageSetting.setupMixed : $r0 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMixed(long,long)>(l0, -1L) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMixed : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting
org.apache.pdfbox.io.MemoryUsageSetting.setupMixed : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMixed : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 1, l0, l1)
org.apache.pdfbox.io.MemoryUsageSetting.setupMixed : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 1, l0, l1) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMixed : return $r0
org.apache.pdfbox.io.MemoryUsageSetting.setupMixed : return $r0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r3 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.io.InputStream,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.MemoryUsageSetting)>(r0, r1, null, null, r2)
org.apache.pdfbox.pdmodel.PDDocument.load : $r3 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.io.InputStream,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.MemoryUsageSetting)>(r0, r1, null, null, r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r7 = new org.apache.pdfbox.io.ScratchFile
org.apache.pdfbox.pdmodel.PDDocument.load : $r7 = new org.apache.pdfbox.io.ScratchFile >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r7.<org.apache.pdfbox.io.ScratchFile: void <init>(org.apache.pdfbox.io.MemoryUsageSetting)>(r4)
org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r7.<org.apache.pdfbox.io.ScratchFile: void <init>(org.apache.pdfbox.io.MemoryUsageSetting)>(r4) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useMainMemory>
org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useMainMemory> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes>
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $b1 = $l0 cmp 0L
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : if $b1 < 0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : if $b1 < 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $z0 = 1
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $z0 = 1 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : goto [?= return $z0]
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useTempFile : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useTempFile>
org.apache.pdfbox.io.MemoryUsageSetting.useTempFile : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useTempFile> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useTempFile : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.useTempFile : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.getTempDir : $r1 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: java.io.File tempDir>
org.apache.pdfbox.io.MemoryUsageSetting.getTempDir : $r1 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: java.io.File tempDir> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.getTempDir : return $r1
org.apache.pdfbox.io.MemoryUsageSetting.getTempDir : return $r1 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxStorageBytes>
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxStorageBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $b1 = $l0 cmp 0L
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : if $b1 <= 0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : if $b1 <= 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $z0 = 0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.getMaxMainMemoryBytes : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes>
org.apache.pdfbox.io.MemoryUsageSetting.getMaxMainMemoryBytes : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.getMaxMainMemoryBytes : return $l0
org.apache.pdfbox.io.MemoryUsageSetting.getMaxMainMemoryBytes : return $l0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : r11 = virtualinvoke $r7.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer(java.io.InputStream)>(r0)
org.apache.pdfbox.pdmodel.PDDocument.load : r11 = virtualinvoke $r7.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer(java.io.InputStream)>(r0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : $r4 = new org.apache.pdfbox.io.ScratchFileBuffer
org.apache.pdfbox.io.ScratchFile.createBuffer : $r4 = new org.apache.pdfbox.io.ScratchFileBuffer >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : specialinvoke $r4.<org.apache.pdfbox.io.ScratchFileBuffer: void <init>(org.apache.pdfbox.io.ScratchFile)>(r0)
org.apache.pdfbox.io.ScratchFile.createBuffer : specialinvoke $r4.<org.apache.pdfbox.io.ScratchFileBuffer: void <init>(org.apache.pdfbox.io.ScratchFile)>(r0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.checkClosed : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed>
org.apache.pdfbox.io.ScratchFile.checkClosed : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> >>>>>>>> org.apache.pdfbox.io.ScratchFile.checkClosed : if $z0 == 0
org.apache.pdfbox.io.ScratchFile.checkClosed : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getPageSize : return 4096
org.apache.pdfbox.io.ScratchFile.getPageSize : return 4096 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i2 = $i0 + 1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i2 = $i0 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i1 = lengthof $r2
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i1 = lengthof $r2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : if $i2 < $i1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : if $i2 < $i1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r8 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r8 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : i8 = virtualinvoke $r8.<org.apache.pdfbox.io.ScratchFile: int getNewPage()>()
org.apache.pdfbox.io.ScratchFileBuffer.addPage : i8 = virtualinvoke $r8.<org.apache.pdfbox.io.ScratchFile: int getNewPage()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r3 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r3 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : entermonitor $r3
org.apache.pdfbox.io.ScratchFile.getNewPage : entermonitor $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : i3 = virtualinvoke $r4.<java.util.BitSet: int nextSetBit(int)>(0)
org.apache.pdfbox.io.ScratchFile.getNewPage : i3 = virtualinvoke $r4.<java.util.BitSet: int nextSetBit(int)>(0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 >= 0
org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 >= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : specialinvoke r0.<org.apache.pdfbox.io.ScratchFile: void enlarge()>()
org.apache.pdfbox.io.ScratchFile.getNewPage : specialinvoke r0.<org.apache.pdfbox.io.ScratchFile: void enlarge()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $r3 = r0.<org.apache.pdfbox.io.ScratchFile: java.lang.Object ioLock>
org.apache.pdfbox.io.ScratchFile.enlarge : $r3 = r0.<org.apache.pdfbox.io.ScratchFile: java.lang.Object ioLock> >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : entermonitor $r3
org.apache.pdfbox.io.ScratchFile.enlarge : entermonitor $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFile: void checkClosed()>()
org.apache.pdfbox.io.ScratchFile.enlarge : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFile: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $i2 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.enlarge : $i2 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $i1 = r0.<org.apache.pdfbox.io.ScratchFile: int maxPageCount>
org.apache.pdfbox.io.ScratchFile.enlarge : $i1 = r0.<org.apache.pdfbox.io.ScratchFile: int maxPageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : if $i2 < $i1
org.apache.pdfbox.io.ScratchFile.enlarge : if $i2 < $i1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean useScratchFile>
org.apache.pdfbox.io.ScratchFile.enlarge : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean useScratchFile> >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : if $z0 == 0
org.apache.pdfbox.io.ScratchFile.enlarge : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf>
org.apache.pdfbox.io.ScratchFile.enlarge : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf> >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : if $r7 != null
org.apache.pdfbox.io.ScratchFile.enlarge : if $r7 != null >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $r18 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.File scratchFileDirectory>
org.apache.pdfbox.io.ScratchFile.enlarge : $r18 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.File scratchFileDirectory> >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $r19 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("PDFBox", ".tmp", $r18)
org.apache.pdfbox.io.ScratchFile.enlarge : $r19 = staticinvoke <java.io.File: java.io.File createTempFile(java.lang.String,java.lang.String,java.io.File)>("PDFBox", ".tmp", $r18) >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : r0.<org.apache.pdfbox.io.ScratchFile: java.io.File file> = $r19
org.apache.pdfbox.io.ScratchFile.enlarge : r0.<org.apache.pdfbox.io.ScratchFile: java.io.File file> = $r19 >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $r20 = new java.io.RandomAccessFile
org.apache.pdfbox.io.ScratchFile.enlarge : $r20 = new java.io.RandomAccessFile >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $r21 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.File file>
org.apache.pdfbox.io.ScratchFile.enlarge : $r21 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.File file> >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : specialinvoke $r20.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r21, "rw")
org.apache.pdfbox.io.ScratchFile.enlarge : specialinvoke $r20.<java.io.RandomAccessFile: void <init>(java.io.File,java.lang.String)>($r21, "rw") >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf> = $r20
org.apache.pdfbox.io.ScratchFile.enlarge : r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf> = $r20 >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : goto [?= $r8 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf>]
org.apache.pdfbox.io.ScratchFile.enlarge : goto [?= $r8 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf>] >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $r8 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf>
org.apache.pdfbox.io.ScratchFile.enlarge : $r8 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf> >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : l18 = virtualinvoke $r8.<java.io.RandomAccessFile: long length()>()
org.apache.pdfbox.io.ScratchFile.enlarge : l18 = virtualinvoke $r8.<java.io.RandomAccessFile: long length()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $i6 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.enlarge : $i6 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $l9 = (long) $i6
org.apache.pdfbox.io.ScratchFile.enlarge : $l9 = (long) $i6 >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $i7 = r0.<org.apache.pdfbox.io.ScratchFile: int inMemoryMaxPageCount>
org.apache.pdfbox.io.ScratchFile.enlarge : $i7 = r0.<org.apache.pdfbox.io.ScratchFile: int inMemoryMaxPageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $l8 = (long) $i7
org.apache.pdfbox.io.ScratchFile.enlarge : $l8 = (long) $i7 >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $l10 = $l9 - $l8
org.apache.pdfbox.io.ScratchFile.enlarge : $l10 = $l9 - $l8 >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : l19 = $l10 * 4096L
org.apache.pdfbox.io.ScratchFile.enlarge : l19 = $l10 * 4096L >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $b11 = l19 cmp l18
org.apache.pdfbox.io.ScratchFile.enlarge : $b11 = l19 cmp l18 >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : if $b11 == 0
org.apache.pdfbox.io.ScratchFile.enlarge : if $b11 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $i12 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.enlarge : $i12 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $i14 = $i12 + 16
org.apache.pdfbox.io.ScratchFile.enlarge : $i14 = $i12 + 16 >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $i13 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.enlarge : $i13 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : if $i14 <= $i13
org.apache.pdfbox.io.ScratchFile.enlarge : if $i14 <= $i13 >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : l20 = l18 + 65536L
org.apache.pdfbox.io.ScratchFile.enlarge : l20 = l18 + 65536L >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $r9 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf>
org.apache.pdfbox.io.ScratchFile.enlarge : $r9 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf> >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : virtualinvoke $r9.<java.io.RandomAccessFile: void setLength(long)>(l20)
org.apache.pdfbox.io.ScratchFile.enlarge : virtualinvoke $r9.<java.io.RandomAccessFile: void setLength(long)>(l20) >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $r10 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.enlarge : $r10 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $i17 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.enlarge : $i17 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $i15 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.enlarge : $i15 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : $i16 = $i15 + 16
org.apache.pdfbox.io.ScratchFile.enlarge : $i16 = $i15 + 16 >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : virtualinvoke $r10.<java.util.BitSet: void set(int,int)>($i17, $i16)
org.apache.pdfbox.io.ScratchFile.enlarge : virtualinvoke $r10.<java.util.BitSet: void set(int,int)>($i17, $i16) >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : goto [?= exitmonitor $r3]
org.apache.pdfbox.io.ScratchFile.enlarge : goto [?= exitmonitor $r3] >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : exitmonitor $r3
org.apache.pdfbox.io.ScratchFile.enlarge : exitmonitor $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.enlarge : goto [?= return]
org.apache.pdfbox.io.ScratchFile.enlarge : goto [?= return] >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : i3 = virtualinvoke $r6.<java.util.BitSet: int nextSetBit(int)>(0)
org.apache.pdfbox.io.ScratchFile.getNewPage : i3 = virtualinvoke $r6.<java.util.BitSet: int nextSetBit(int)>(0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : virtualinvoke $r5.<java.util.BitSet: void clear(int)>(i3)
org.apache.pdfbox.io.ScratchFile.getNewPage : virtualinvoke $r5.<java.util.BitSet: void clear(int)>(i3) >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.getNewPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 < $i0
org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 < $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $i1 = i3 + 1
org.apache.pdfbox.io.ScratchFile.getNewPage : $i1 = i3 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = $i1
org.apache.pdfbox.io.ScratchFile.getNewPage : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = $i1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : exitmonitor $r3
org.apache.pdfbox.io.ScratchFile.getNewPage : exitmonitor $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : return i3
org.apache.pdfbox.io.ScratchFile.getNewPage : return i3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9[$i9] = i8
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9[$i9] = i8 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i10 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i10 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = $i10
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = $i10 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l12 = (long) $i11
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l12 = (long) $i11 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l14 = (long) $i13
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l14 = (long) $i13 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l15 = $l12 * $l14
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l15 = $l12 * $l14 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l15
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l15 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i17 = $i16 + 1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i17 = $i16 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> = $i17
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> = $i17 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r11 = newarray (byte)[$i18]
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r11 = newarray (byte)[$i18] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r11
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r11 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : r3 = newarray (byte)[8192]
org.apache.pdfbox.io.ScratchFile.createBuffer : r3 = newarray (byte)[8192] >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r3)
org.apache.pdfbox.io.ScratchFile.createBuffer : $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.read : $i0 = lengthof r1
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.read : $i0 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.read : $i1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: int read(byte[],int,int)>(r1, 0, $i0)
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.read : $i1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: int read(byte[],int,int)>(r1, 0, $i0) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.read : if i1 != 0
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.read : if i1 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.read : i5 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: int read()>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.read : i5 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: int read()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.read : specialinvoke r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: void nextAvailable()>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.read : specialinvoke r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: void nextAvailable()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.nextAvailable : $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: boolean inRange()>()
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.nextAvailable : $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: boolean inRange()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : l0 = r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: long position>
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : l0 = r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: long position> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : i15 = 0
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : i15 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : $r1 = r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: int[] byteRange>
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : $r1 = r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: int[] byteRange> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : $i1 = lengthof $r1
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : $i1 = lengthof $r1 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : $i2 = $i1 / 2
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : $i2 = $i1 / 2 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : if i15 >= $i2
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : if i15 >= $i2 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : $r2 = r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: int[] byteRange>
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : $r2 = r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: int[] byteRange> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : $i3 = i15 * 2
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : $i3 = i15 * 2 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : $i4 = $r2[$i3]
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : $i4 = $r2[$i3] >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : $l5 = (long) $i4
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : $l5 = (long) $i4 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : $b6 = $l5 cmp l0
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : $b6 = $l5 cmp l0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : if $b6 > 0
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : if $b6 > 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : i15 = i15 + 1
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : i15 = i15 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : goto [?= $r1 = r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: int[] byteRange>]
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : goto [?= $r1 = r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: int[] byteRange>] >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : return 0
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.inRange : return 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.nextAvailable : if $z0 != 0
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.nextAvailable : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.nextAvailable : $l0 = r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: long position>
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.nextAvailable : $l0 = r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: long position> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.nextAvailable : $l1 = $l0 + 1L
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.nextAvailable : $l1 = $l0 + 1L >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.nextAvailable : r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: long position> = $l1
org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.nextAvailable : r0.<org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream: long position> = $l1 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.digitalsignature.COSFilterInputStream.nextAvailable : $i2 = specialinvoke r0.<java.io.FilterInputStream: int read()>()
