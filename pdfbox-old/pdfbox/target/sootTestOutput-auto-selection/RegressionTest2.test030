org.apache.pdfbox.pdmodel.interactive.form.PDField.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.interactive.form.PDField: org.apache.pdfbox.cos.COSDictionary dictionary> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PDField.getCOSObject : return $r1
org.apache.pdfbox.pdmodel.interactive.form.PDField.getCOSObject : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : if r2 != null
org.apache.pdfbox.cos.COSDictionary.setItem : if r2 != null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
org.apache.pdfbox.cos.COSDictionary.setItem : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if r1 == null
org.apache.pdfbox.util.SmallMap.put : if r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if r2 != null
org.apache.pdfbox.util.SmallMap.put : if r2 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if $r5 != null
org.apache.pdfbox.util.SmallMap.put : if $r5 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10 = newarray (java.lang.Object)[2]
org.apache.pdfbox.util.SmallMap.put : $r10 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10[0] = r1
org.apache.pdfbox.util.SmallMap.put : $r10[0] = r1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10[1] = r2
org.apache.pdfbox.util.SmallMap.put : $r10[1] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r10
org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r10 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : return null
org.apache.pdfbox.util.SmallMap.put : return null >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.putAll : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : if $r3 == null
org.apache.pdfbox.util.SmallMap.putAll : if $r3 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $i1 = interfaceinvoke r1.<java.util.Map: int size()>()
org.apache.pdfbox.util.SmallMap.putAll : $i1 = interfaceinvoke r1.<java.util.Map: int size()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.size : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.size : if $r1 != null
org.apache.pdfbox.util.SmallMap.size : if $r1 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.size : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.size : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $i1 = $i0 >> 1
org.apache.pdfbox.util.SmallMap.size : $i1 = $i0 >> 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.size : return $i1
org.apache.pdfbox.util.SmallMap.size : return $i1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $i2 = $i1 << 1
org.apache.pdfbox.util.SmallMap.putAll : $i2 = $i1 << 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r4 = newarray (java.lang.Object)[$i2]
org.apache.pdfbox.util.SmallMap.putAll : $r4 = newarray (java.lang.Object)[$i2] >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r4
org.apache.pdfbox.util.SmallMap.putAll : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r4 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : i9 = 0
org.apache.pdfbox.util.SmallMap.putAll : i9 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()
org.apache.pdfbox.util.SmallMap.putAll : $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.entrySet : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null
org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.isEmpty : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $i0 != 0
org.apache.pdfbox.util.SmallMap.isEmpty : if $i0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 0
org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : return $z0
org.apache.pdfbox.util.SmallMap.isEmpty : return $z0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : if $z0 == 0
org.apache.pdfbox.util.SmallMap.entrySet : if $z0 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r2 = new java.util.LinkedHashSet
org.apache.pdfbox.util.SmallMap.entrySet : $r2 = new java.util.LinkedHashSet >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>()
org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : i1 = 0
org.apache.pdfbox.util.SmallMap.entrySet : i1 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.entrySet : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $i0 = lengthof $r3
org.apache.pdfbox.util.SmallMap.entrySet : $i0 = lengthof $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : if i1 >= $i0
org.apache.pdfbox.util.SmallMap.entrySet : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r5 = new org.apache.pdfbox.util.SmallMap$SmallMapEntry
org.apache.pdfbox.util.SmallMap.entrySet : $r5 = new org.apache.pdfbox.util.SmallMap$SmallMapEntry >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r5.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: void <init>(org.apache.pdfbox.util.SmallMap,int)>(r0, i1)
org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r5.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: void <init>(org.apache.pdfbox.util.SmallMap,int)>(r0, i1) >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r5)
org.apache.pdfbox.util.SmallMap.entrySet : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r5) >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $r1 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: java.lang.Object getKey()>()
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $r1 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1)
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.access$000 : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.access$000 : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.access$000 : return $r1
org.apache.pdfbox.util.SmallMap.access$000 : return $r1 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r3 = $r2[$i0]
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r3 = $r2[$i0] >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : return $r3
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : return $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>()
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.apache.pdfbox.cos.COSName.hashCode : $i0 = r0.<org.apache.pdfbox.cos.COSName: int hashCode>
org.apache.pdfbox.cos.COSName.hashCode : $i0 = r0.<org.apache.pdfbox.cos.COSName: int hashCode> >>>>>>>> org.apache.pdfbox.cos.COSName.hashCode : return $i0
org.apache.pdfbox.cos.COSName.hashCode : return $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : return $i0
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : return $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : i1 = i1 + 2
org.apache.pdfbox.util.SmallMap.entrySet : i1 = i1 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : goto [?= $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.entrySet : goto [?= $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2)
org.apache.pdfbox.util.SmallMap.entrySet : $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : return $r4
org.apache.pdfbox.util.SmallMap.entrySet : return $r4 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : r26 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
org.apache.pdfbox.util.SmallMap.putAll : r26 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.util.SmallMap.putAll : $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : if $z1 == 0
org.apache.pdfbox.util.SmallMap.putAll : if $z1 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r6 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.util.SmallMap.putAll : $r6 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : r27 = (java.util.Map$Entry) $r6
org.apache.pdfbox.util.SmallMap.putAll : r27 = (java.util.Map$Entry) $r6 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r7 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.util.SmallMap.putAll : $r7 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : if $r7 == null
org.apache.pdfbox.util.SmallMap.putAll : if $r7 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r9 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.pdfbox.util.SmallMap.putAll : $r9 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1)
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1) >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i1 = $i0 + 1
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i1 = $i0 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r3 = $r2[$i1]
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r3 = $r2[$i1] >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : return $r3
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : return $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : if $r9 != null
org.apache.pdfbox.util.SmallMap.putAll : if $r9 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r10 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.putAll : $r10 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : i10 = i9 + 1
org.apache.pdfbox.util.SmallMap.putAll : i10 = i9 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r11 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.util.SmallMap.putAll : $r11 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r10[i9] = $r11
org.apache.pdfbox.util.SmallMap.putAll : $r10[i9] = $r11 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r12 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.putAll : $r12 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : i9 = i10 + 1
org.apache.pdfbox.util.SmallMap.putAll : i9 = i10 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r13 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.pdfbox.util.SmallMap.putAll : $r13 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r12[i10] = $r13
org.apache.pdfbox.util.SmallMap.putAll : $r12[i10] = $r13 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : goto [?= $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.util.SmallMap.putAll : goto [?= $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : goto [?= return]
org.apache.pdfbox.util.SmallMap.putAll : goto [?= return] >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = null
org.apache.pdfbox.cos.COSName.getPDFName : r6 = null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : if r0 == null
org.apache.pdfbox.cos.COSName.getPDFName : if r0 == null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r1 = <org.apache.pdfbox.cos.COSName: java.util.Map commonNameMap>
org.apache.pdfbox.cos.COSName.getPDFName : $r1 = <org.apache.pdfbox.cos.COSName: java.util.Map commonNameMap> >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.apache.pdfbox.cos.COSName.getPDFName : $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r2
org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r2 >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : if r6 != null
org.apache.pdfbox.cos.COSName.getPDFName : if r6 != null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r3 = <org.apache.pdfbox.cos.COSName: java.util.Map nameMap>
org.apache.pdfbox.cos.COSName.getPDFName : $r3 = <org.apache.pdfbox.cos.COSName: java.util.Map nameMap> >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.apache.pdfbox.cos.COSName.getPDFName : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r4
org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r4 >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r5 = new org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSName.getPDFName : $r5 = new org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : specialinvoke $r5.<org.apache.pdfbox.cos.COSName: void <init>(java.lang.String,boolean)>(r0, 0)
org.apache.pdfbox.cos.COSName.getPDFName : specialinvoke $r5.<org.apache.pdfbox.cos.COSName: void <init>(java.lang.String,boolean)>(r0, 0) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = $r5
org.apache.pdfbox.cos.COSName.getPDFName : r6 = $r5 >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : return r6
org.apache.pdfbox.cos.COSName.getPDFName : return r6 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0
org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if r1 != null
org.apache.pdfbox.util.SmallMap.findKey : if r1 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : i1 = 0
org.apache.pdfbox.util.SmallMap.findKey : i1 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findKey : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.findKey : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if i1 >= $i0
org.apache.pdfbox.util.SmallMap.findKey : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findKey : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r4 = $r3[i1]
org.apache.pdfbox.util.SmallMap.findKey : $r4 = $r3[i1] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4)
org.apache.pdfbox.util.SmallMap.findKey : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSName.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSName.equals : if $z0 == 0
org.apache.pdfbox.cos.COSName.equals : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r4 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.equals : $r4 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r2 = (org.apache.pdfbox.cos.COSName) r1
org.apache.pdfbox.cos.COSName.equals : $r2 = (org.apache.pdfbox.cos.COSName) r1 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r3 = $r2.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.equals : $r3 = $r2.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3)
org.apache.pdfbox.cos.COSName.equals : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : if $z1 == 0
org.apache.pdfbox.cos.COSName.equals : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z2 = 0
org.apache.pdfbox.cos.COSName.equals : $z2 = 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : return $z2
org.apache.pdfbox.cos.COSName.equals : return $z2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z1 == 0
org.apache.pdfbox.util.SmallMap.findKey : if $z1 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : i1 = i1 + 2
org.apache.pdfbox.util.SmallMap.findKey : i1 = i1 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.findKey : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : return -1
org.apache.pdfbox.util.SmallMap.findKey : return -1 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : if i0 >= 0
org.apache.pdfbox.util.SmallMap.get : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r3 = null
org.apache.pdfbox.util.SmallMap.get : $r3 = null >>>>>>>> org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3]
org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3] >>>>>>>> org.apache.pdfbox.util.SmallMap.get : return $r3
org.apache.pdfbox.util.SmallMap.get : return $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return $r3
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return $r3 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.registerHandler : $r4 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory: java.util.Map nameToHandler>
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.registerHandler : $r4 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory: java.util.Map nameToHandler> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.registerHandler : $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.registerHandler : $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.registerHandler : if $z0 == 0
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.registerHandler : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.registerHandler : $r5 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory: java.util.Map nameToHandler>
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.registerHandler : $r5 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory: java.util.Map nameToHandler> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.registerHandler : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.registerHandler : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.registerHandler : $r7 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory: java.util.Map policyToHandler>
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.registerHandler : $r7 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory: java.util.Map policyToHandler> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.registerHandler : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2)
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.registerHandler : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r3, r2) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.PDEncryption.getFilter : $r2 = r0.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: org.apache.pdfbox.cos.COSDictionary dictionary>
org.apache.pdfbox.pdmodel.encryption.PDEncryption.getFilter : $r2 = r0.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: org.apache.pdfbox.cos.COSDictionary dictionary> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.PDEncryption.getFilter : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FILTER>
org.apache.pdfbox.pdmodel.encryption.PDEncryption.getFilter : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FILTER> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.PDEncryption.getFilter : $r3 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getNameAsString(org.apache.pdfbox.cos.COSName)>($r1)
org.apache.pdfbox.pdmodel.encryption.PDEncryption.getFilter : $r3 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getNameAsString(org.apache.pdfbox.cos.COSName)>($r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : r5 = null
org.apache.pdfbox.cos.COSDictionary.getNameAsString : r5 = null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.getNameAsString : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSDictionary.getNameAsString : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getNameAsString : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : $z1 = r2 instanceof org.apache.pdfbox.cos.COSString
org.apache.pdfbox.cos.COSDictionary.getNameAsString : $z1 = r2 instanceof org.apache.pdfbox.cos.COSString >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : if $z1 == 0
org.apache.pdfbox.cos.COSDictionary.getNameAsString : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : return r5
org.apache.pdfbox.cos.COSDictionary.getNameAsString : return r5 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.PDEncryption.getFilter : return $r3
org.apache.pdfbox.pdmodel.encryption.PDEncryption.getFilter : return $r3 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.newSecurityHandlerForFilter : $r5 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory: java.util.Map nameToHandler>
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.newSecurityHandlerForFilter : $r5 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory: java.util.Map nameToHandler> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.newSecurityHandlerForFilter : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.newSecurityHandlerForFilter : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.newSecurityHandlerForFilter : r2 = (java.lang.Class) $r6
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.newSecurityHandlerForFilter : r2 = (java.lang.Class) $r6 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.newSecurityHandlerForFilter : if r2 != null
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.newSecurityHandlerForFilter : if r2 != null >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.newSecurityHandlerForFilter : return null
org.apache.pdfbox.pdmodel.encryption.SecurityHandlerFactory.newSecurityHandlerForFilter : return null >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.addOperator : virtualinvoke r1.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: void setContext(org.apache.pdfbox.contentstream.PDFStreamEngine)>(r0)
org.apache.pdfbox.contentstream.PDFStreamEngine.addOperator : virtualinvoke r1.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: void setContext(org.apache.pdfbox.contentstream.PDFStreamEngine)>(r0) >>>>>>>> org.apache.pdfbox.contentstream.operator.OperatorProcessor.setContext : r0.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: org.apache.pdfbox.contentstream.PDFStreamEngine context> = r1
org.apache.pdfbox.contentstream.operator.OperatorProcessor.setContext : r0.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: org.apache.pdfbox.contentstream.PDFStreamEngine context> = r1 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.addOperator : $r2 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Map operators>
org.apache.pdfbox.contentstream.PDFStreamEngine.addOperator : $r2 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Map operators> >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.addOperator : $r3 = virtualinvoke r1.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: java.lang.String getName()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.addOperator : $r3 = virtualinvoke r1.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.text.BeginText.getName : return "BT"
org.apache.pdfbox.contentstream.operator.text.BeginText.getName : return "BT" >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.addOperator : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1)
org.apache.pdfbox.contentstream.PDFStreamEngine.addOperator : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.getName : return "cm"
org.apache.pdfbox.contentstream.operator.state.Concatenate.getName : return "cm" >>>>>>>> org.apache.pdfbox.contentstream.operator.DrawObject.getName : return "Do"
org.apache.pdfbox.contentstream.operator.DrawObject.getName : return "Do" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.EndText.getName : return "ET"
org.apache.pdfbox.contentstream.operator.text.EndText.getName : return "ET" >>>>>>>> org.apache.pdfbox.contentstream.operator.state.SetGraphicsStateParameters.getName : return "gs"
org.apache.pdfbox.contentstream.operator.state.SetGraphicsStateParameters.getName : return "gs" >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Save.getName : return "q"
org.apache.pdfbox.contentstream.operator.state.Save.getName : return "q" >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Restore.getName : return "Q"
org.apache.pdfbox.contentstream.operator.state.Restore.getName : return "Q" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.NextLine.getName : return "T*"
org.apache.pdfbox.contentstream.operator.text.NextLine.getName : return "T*" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.SetCharSpacing.getName : return "Tc"
org.apache.pdfbox.contentstream.operator.text.SetCharSpacing.getName : return "Tc" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.MoveText.getName : return "Td"
org.apache.pdfbox.contentstream.operator.text.MoveText.getName : return "Td" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.MoveTextSetLeading.getName : return "TD"
org.apache.pdfbox.contentstream.operator.text.MoveTextSetLeading.getName : return "TD" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.getName : return "Tf"
org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.getName : return "Tf" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.ShowText.getName : return "Tj"
org.apache.pdfbox.contentstream.operator.text.ShowText.getName : return "Tj" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted.getName : return "TJ"
org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted.getName : return "TJ" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.SetTextLeading.getName : return "TL"
org.apache.pdfbox.contentstream.operator.text.SetTextLeading.getName : return "TL" >>>>>>>> org.apache.pdfbox.contentstream.operator.state.SetMatrix.getName : return "Tm"
org.apache.pdfbox.contentstream.operator.state.SetMatrix.getName : return "Tm" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.SetTextRenderingMode.getName : return "Tr"
org.apache.pdfbox.contentstream.operator.text.SetTextRenderingMode.getName : return "Tr" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.SetTextRise.getName : return "Ts"
org.apache.pdfbox.contentstream.operator.text.SetTextRise.getName : return "Ts" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.SetWordSpacing.getName : return "Tw"
org.apache.pdfbox.contentstream.operator.text.SetWordSpacing.getName : return "Tw" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.SetTextHorizontalScaling.getName : return "Tz"
org.apache.pdfbox.contentstream.operator.text.SetTextHorizontalScaling.getName : return "Tz" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.ShowTextLine.getName : return "\'"
org.apache.pdfbox.contentstream.operator.text.ShowTextLine.getName : return "\'" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.ShowTextLineAndSpace.getName : return "\""
org.apache.pdfbox.contentstream.operator.text.ShowTextLineAndSpace.getName : return "\"" >>>>>>>> org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : $r4 = class "Lorg/apache/pdfbox/pdmodel/font/encoding/GlyphList;"
org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : $r4 = class "Lorg/apache/pdfbox/pdmodel/font/encoding/GlyphList;" >>>>>>>> org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : r1 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : r1 = virtualinvoke $r4.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : $r5 = new org.apache.pdfbox.pdmodel.font.encoding.GlyphList
org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : $r5 = new org.apache.pdfbox.pdmodel.font.encoding.GlyphList >>>>>>>> org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : $r6 = new java.lang.StringBuilder
org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org/apache/pdfbox/resources/glyphlist/")
org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org/apache/pdfbox/resources/glyphlist/") >>>>>>>> org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : $r10 = virtualinvoke r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r9)
org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : $r10 = virtualinvoke r1.<java.lang.ClassLoader: java.io.InputStream getResourceAsStream(java.lang.String)>($r9) >>>>>>>> org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : specialinvoke $r5.<org.apache.pdfbox.pdmodel.font.encoding.GlyphList: void <init>(java.io.InputStream,int)>($r10, i0)
org.apache.pdfbox.pdmodel.font.encoding.GlyphList.load : specialinvoke $r5.<org.apache.pdfbox.pdmodel.font.encoding.GlyphList: void <init>(java.io.InputStream,int)>($r10, i0) >>>>>>>> org.apache.pdfbox.pdmodel.font.encoding.GlyphList.loadList : $r10 = new java.io.BufferedReader
org.apache.pdfbox.pdmodel.font.encoding.GlyphList.loadList : $r10 = new java.io.BufferedReader >>>>>>>> org.apache.pdfbox.pdmodel.font.encoding.GlyphList.loadList : $r11 = new java.io.InputStreamReader
org.apache.pdfbox.pdmodel.font.encoding.GlyphList.loadList : $r11 = new java.io.InputStreamReader >>>>>>>> org.apache.pdfbox.pdmodel.font.encoding.GlyphList.loadList : specialinvoke $r11.<java.io.InputStreamReader: void <init>(java.io.InputStream,java.lang.String)>(r1, "ISO-8859-1")
