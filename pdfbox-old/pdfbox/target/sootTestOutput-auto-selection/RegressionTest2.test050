org.apache.pdfbox.cos.COSDictionary.setItem : if r2 != null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
org.apache.pdfbox.cos.COSDictionary.setItem : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if r1 == null
org.apache.pdfbox.util.SmallMap.put : if r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if r2 != null
org.apache.pdfbox.util.SmallMap.put : if r2 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if $r5 != null
org.apache.pdfbox.util.SmallMap.put : if $r5 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10 = newarray (java.lang.Object)[2]
org.apache.pdfbox.util.SmallMap.put : $r10 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10[0] = r1
org.apache.pdfbox.util.SmallMap.put : $r10[0] = r1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10[1] = r2
org.apache.pdfbox.util.SmallMap.put : $r10[1] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r10
org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r10 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : return null
org.apache.pdfbox.util.SmallMap.put : return null >>>>>>>> org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : $r1 = new org.apache.pdfbox.io.ScratchFile
org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : $r1 = new org.apache.pdfbox.io.ScratchFile >>>>>>>> org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : $r2 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly()>()
org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : $r2 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly()>() >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly(long)>(-1L)
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly(long)>(-1L) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 0, l0, l0)
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 0, l0, l0) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : return $r0
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : return $r0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFile: void <init>(org.apache.pdfbox.io.MemoryUsageSetting)>($r2)
org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFile: void <init>(org.apache.pdfbox.io.MemoryUsageSetting)>($r2) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useMainMemory>
org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useMainMemory> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes>
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $b1 = $l0 cmp 0L
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : if $b1 < 0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : if $b1 < 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $z0 = 0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxStorageBytes>
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxStorageBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $b1 = $l0 cmp 0L
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : if $b1 <= 0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : if $b1 <= 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $z0 = 0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : return $z0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : return $r1
org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : r29 = null
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : r29 = null >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if r0 == null
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if r0 == null >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName S>
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName S> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getNameAsString(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getNameAsString(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : r5 = null
org.apache.pdfbox.cos.COSDictionary.getNameAsString : r5 = null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.getNameAsString : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null
org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 1
org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : goto [?= return $z0]
org.apache.pdfbox.util.SmallMap.isEmpty : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : return $z0
org.apache.pdfbox.util.SmallMap.isEmpty : return $z0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0
org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : return -1
org.apache.pdfbox.util.SmallMap.findKey : return -1 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : if i0 >= 0
org.apache.pdfbox.util.SmallMap.get : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r3 = null
org.apache.pdfbox.util.SmallMap.get : $r3 = null >>>>>>>> org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3]
org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3] >>>>>>>> org.apache.pdfbox.util.SmallMap.get : return $r3
org.apache.pdfbox.util.SmallMap.get : return $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSDictionary.getNameAsString : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getNameAsString : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : $z1 = r2 instanceof org.apache.pdfbox.cos.COSString
org.apache.pdfbox.cos.COSDictionary.getNameAsString : $z1 = r2 instanceof org.apache.pdfbox.cos.COSString >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : if $z1 == 0
org.apache.pdfbox.cos.COSDictionary.getNameAsString : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : return r5
org.apache.pdfbox.cos.COSDictionary.getNameAsString : return r5 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r3 = "JavaScript"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r3 = "JavaScript" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z0 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r4 = "GoTo"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r4 = "GoTo" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z1 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r5 = "Launch"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r5 = "Launch" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z2 = virtualinvoke $r5.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z2 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r6 = "GoToR"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r6 = "GoToR" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z3 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z3 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r7 = "URI"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r7 = "URI" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z4 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z4 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r8 = "Named"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r8 = "Named" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z5 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z5 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z5 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z5 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r9 = "Sound"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r9 = "Sound" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z6 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z6 = virtualinvoke $r9.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z6 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z6 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r10 = "Movie"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r10 = "Movie" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z7 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z7 = virtualinvoke $r10.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z7 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z7 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r11 = "ImportData"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r11 = "ImportData" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z8 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z8 = virtualinvoke $r11.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z8 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z8 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r12 = "ResetForm"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r12 = "ResetForm" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z9 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z9 = virtualinvoke $r12.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z9 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z9 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r13 = "Hide"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r13 = "Hide" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z10 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z10 = virtualinvoke $r13.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z10 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z10 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r14 = "SubmitForm"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r14 = "SubmitForm" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z11 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z11 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z11 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z11 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r15 = "Thread"
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $r15 = "Thread" >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z12 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : $z12 = virtualinvoke $r15.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z12 == 0
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : if $z12 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : return r29
org.apache.pdfbox.pdmodel.interactive.action.PDActionFactory.createAction : return r29 >>>>>>>> org.apache.pdfbox.cos.COSName.getName : $r1 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.getName : $r1 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.getName : return $r1
org.apache.pdfbox.cos.COSName.getName : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setName : r3 = null
org.apache.pdfbox.cos.COSDictionary.setName : r3 = null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setName : if r2 == null
org.apache.pdfbox.cos.COSDictionary.setName : if r2 == null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setName : r3 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r2)
org.apache.pdfbox.cos.COSDictionary.setName : r3 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r2) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = null
org.apache.pdfbox.cos.COSName.getPDFName : r6 = null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : if r0 == null
org.apache.pdfbox.cos.COSName.getPDFName : if r0 == null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r1 = <org.apache.pdfbox.cos.COSName: java.util.Map commonNameMap>
org.apache.pdfbox.cos.COSName.getPDFName : $r1 = <org.apache.pdfbox.cos.COSName: java.util.Map commonNameMap> >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.apache.pdfbox.cos.COSName.getPDFName : $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r2
org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r2 >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : if r6 != null
org.apache.pdfbox.cos.COSName.getPDFName : if r6 != null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : return r6
org.apache.pdfbox.cos.COSName.getPDFName : return r6 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setName : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, r3)
org.apache.pdfbox.cos.COSDictionary.setName : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, r3) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.put : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.isEmpty : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $i0 != 0
org.apache.pdfbox.util.SmallMap.isEmpty : if $i0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 0
org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if r1 != null
org.apache.pdfbox.util.SmallMap.findKey : if r1 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : i1 = 0
org.apache.pdfbox.util.SmallMap.findKey : i1 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findKey : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.findKey : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if i1 >= $i0
org.apache.pdfbox.util.SmallMap.findKey : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findKey : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r4 = $r3[i1]
org.apache.pdfbox.util.SmallMap.findKey : $r4 = $r3[i1] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4)
org.apache.pdfbox.util.SmallMap.findKey : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSName.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSName.equals : if $z0 == 0
org.apache.pdfbox.cos.COSName.equals : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r4 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.equals : $r4 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r2 = (org.apache.pdfbox.cos.COSName) r1
org.apache.pdfbox.cos.COSName.equals : $r2 = (org.apache.pdfbox.cos.COSName) r1 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r3 = $r2.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.equals : $r3 = $r2.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3)
org.apache.pdfbox.cos.COSName.equals : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : if $z1 == 0
org.apache.pdfbox.cos.COSName.equals : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z2 = 0
org.apache.pdfbox.cos.COSName.equals : $z2 = 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : return $z2
org.apache.pdfbox.cos.COSName.equals : return $z2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z1 == 0
org.apache.pdfbox.util.SmallMap.findKey : if $z1 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : i1 = i1 + 2
org.apache.pdfbox.util.SmallMap.findKey : i1 = i1 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.findKey : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if i0 >= 0
org.apache.pdfbox.util.SmallMap.put : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r8 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r8 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : i5 = lengthof $r8
org.apache.pdfbox.util.SmallMap.put : i5 = lengthof $r8 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i3 = i5 + 2
org.apache.pdfbox.util.SmallMap.put : $i3 = i5 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3 = newarray (java.lang.Object)[$i3]
org.apache.pdfbox.util.SmallMap.put : r3 = newarray (java.lang.Object)[$i3] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r9 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r9 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r3, 0, i5)
org.apache.pdfbox.util.SmallMap.put : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r3, 0, i5) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3[i5] = r1
org.apache.pdfbox.util.SmallMap.put : r3[i5] = r1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i4 = i5 + 1
org.apache.pdfbox.util.SmallMap.put : $i4 = i5 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3[$i4] = r2
org.apache.pdfbox.util.SmallMap.put : r3[$i4] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = r3
org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = r3 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary.setNormalAppearance : $r3 = r0.<org.apache.pdfbox.pdmodel.interactive.'annotation'.PDAppearanceDictionary: org.apache.pdfbox.cos.COSDictionary dictionary>
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary.setNormalAppearance : $r3 = r0.<org.apache.pdfbox.pdmodel.interactive.'annotation'.PDAppearanceDictionary: org.apache.pdfbox.cos.COSDictionary dictionary> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary.setNormalAppearance : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName N>
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary.setNormalAppearance : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName N> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary.setNormalAppearance : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>($r2, r1)
org.apache.pdfbox.pdmodel.interactive.annotation.PDAppearanceDictionary.setNormalAppearance : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>($r2, r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : r3 = null
org.apache.pdfbox.cos.COSDictionary.setItem : r3 = null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : if r2 == null
org.apache.pdfbox.cos.COSDictionary.setItem : if r2 == null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : r3 = interfaceinvoke r2.<org.apache.pdfbox.pdmodel.common.COSObjectable: org.apache.pdfbox.cos.COSBase getCOSObject()>()
org.apache.pdfbox.cos.COSDictionary.setItem : r3 = interfaceinvoke r2.<org.apache.pdfbox.pdmodel.common.COSObjectable: org.apache.pdfbox.cos.COSBase getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.PDXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.PDXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.PDXObject: org.apache.pdfbox.pdmodel.common.PDStream stream>
org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.PDXObject: org.apache.pdfbox.pdmodel.common.PDStream stream> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream>
org.apache.pdfbox.pdmodel.common.PDStream.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getCOSObject : return $r1
org.apache.pdfbox.pdmodel.common.PDStream.getCOSObject : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : return $r2
org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : return $r1
org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, r3)
org.apache.pdfbox.cos.COSDictionary.setItem : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, r3) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z2 = 1
org.apache.pdfbox.cos.COSName.equals : $z2 = 1 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : goto [?= return $z2]
org.apache.pdfbox.cos.COSName.equals : goto [?= return $z2] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : return i1
org.apache.pdfbox.util.SmallMap.findKey : return i1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r6 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r6 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i1 = i0 + 1
org.apache.pdfbox.util.SmallMap.put : $i1 = i0 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r11 = $r6[$i1]
org.apache.pdfbox.util.SmallMap.put : r11 = $r6[$i1] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r7 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r7 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i2 = i0 + 1
org.apache.pdfbox.util.SmallMap.put : $i2 = i0 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r7[$i2] = r2
org.apache.pdfbox.util.SmallMap.put : $r7[$i2] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : return r11
org.apache.pdfbox.util.SmallMap.put : return r11 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.getStream : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.PDXObject: org.apache.pdfbox.pdmodel.common.PDStream stream>
org.apache.pdfbox.pdmodel.graphics.PDXObject.getStream : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.PDXObject: org.apache.pdfbox.pdmodel.common.PDStream stream> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.getStream : return $r1
org.apache.pdfbox.pdmodel.graphics.PDXObject.getStream : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createOutputStream : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream>
org.apache.pdfbox.pdmodel.common.PDStream.createOutputStream : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createOutputStream : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createOutputStream()>()
org.apache.pdfbox.pdmodel.common.PDStream.createOutputStream : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createOutputStream()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createOutputStream(org.apache.pdfbox.cos.COSBase)>(null)
org.apache.pdfbox.cos.COSStream.createOutputStream : $r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createOutputStream(org.apache.pdfbox.cos.COSBase)>(null) >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>()
org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.checkClosed : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.checkClosed : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.checkClosed : if $r1 == null
org.apache.pdfbox.cos.COSStream.checkClosed : if $r1 == null >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting>
org.apache.pdfbox.cos.COSStream.createOutputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : if $z0 == 0
org.apache.pdfbox.cos.COSStream.createOutputStream : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : if r1 == null
org.apache.pdfbox.cos.COSStream.createOutputStream : if r1 == null >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r4 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSStream.createOutputStream : $r4 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r5 = virtualinvoke $r4.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer()>()
org.apache.pdfbox.cos.COSStream.createOutputStream : $r5 = virtualinvoke $r4.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : $r1 = new org.apache.pdfbox.io.ScratchFileBuffer
org.apache.pdfbox.io.ScratchFile.createBuffer : $r1 = new org.apache.pdfbox.io.ScratchFileBuffer >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFileBuffer: void <init>(org.apache.pdfbox.io.ScratchFile)>(r0)
org.apache.pdfbox.io.ScratchFile.createBuffer : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFileBuffer: void <init>(org.apache.pdfbox.io.ScratchFile)>(r0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.checkClosed : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed>
org.apache.pdfbox.io.ScratchFile.checkClosed : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> >>>>>>>> org.apache.pdfbox.io.ScratchFile.checkClosed : if $z0 == 0
org.apache.pdfbox.io.ScratchFile.checkClosed : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getPageSize : return 4096
org.apache.pdfbox.io.ScratchFile.getPageSize : return 4096 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i2 = $i0 + 1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i2 = $i0 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i1 = lengthof $r2
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i1 = lengthof $r2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : if $i2 < $i1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : if $i2 < $i1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r8 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r8 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : i8 = virtualinvoke $r8.<org.apache.pdfbox.io.ScratchFile: int getNewPage()>()
org.apache.pdfbox.io.ScratchFileBuffer.addPage : i8 = virtualinvoke $r8.<org.apache.pdfbox.io.ScratchFile: int getNewPage()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r3 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r3 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : entermonitor $r3
org.apache.pdfbox.io.ScratchFile.getNewPage : entermonitor $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : i3 = virtualinvoke $r4.<java.util.BitSet: int nextSetBit(int)>(0)
org.apache.pdfbox.io.ScratchFile.getNewPage : i3 = virtualinvoke $r4.<java.util.BitSet: int nextSetBit(int)>(0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 >= 0
org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 >= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : virtualinvoke $r5.<java.util.BitSet: void clear(int)>(i3)
org.apache.pdfbox.io.ScratchFile.getNewPage : virtualinvoke $r5.<java.util.BitSet: void clear(int)>(i3) >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.getNewPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 < $i0
org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 < $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $i1 = i3 + 1
org.apache.pdfbox.io.ScratchFile.getNewPage : $i1 = i3 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = $i1
org.apache.pdfbox.io.ScratchFile.getNewPage : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = $i1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : exitmonitor $r3
org.apache.pdfbox.io.ScratchFile.getNewPage : exitmonitor $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : return i3
org.apache.pdfbox.io.ScratchFile.getNewPage : return i3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9[$i9] = i8
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9[$i9] = i8 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i10 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i10 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = $i10
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = $i10 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l12 = (long) $i11
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l12 = (long) $i11 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l14 = (long) $i13
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l14 = (long) $i13 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l15 = $l12 * $l14
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l15 = $l12 * $l14 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l15
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l15 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i17 = $i16 + 1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i17 = $i16 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> = $i17
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> = $i17 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r11 = newarray (byte)[$i18]
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r11 = newarray (byte)[$i18] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r11
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r11 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : return $r1
org.apache.pdfbox.io.ScratchFile.createBuffer : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> = $r5
org.apache.pdfbox.cos.COSStream.createOutputStream : r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> = $r5 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r6 = new org.apache.pdfbox.io.RandomAccessOutputStream
org.apache.pdfbox.cos.COSStream.createOutputStream : $r6 = new org.apache.pdfbox.io.RandomAccessOutputStream >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r7 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.createOutputStream : $r7 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r6.<org.apache.pdfbox.io.RandomAccessOutputStream: void <init>(org.apache.pdfbox.io.RandomAccessWrite)>($r7)
org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r6.<org.apache.pdfbox.io.RandomAccessOutputStream: void <init>(org.apache.pdfbox.io.RandomAccessWrite)>($r7) >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r8 = new org.apache.pdfbox.cos.COSOutputStream
org.apache.pdfbox.cos.COSStream.createOutputStream : $r8 = new org.apache.pdfbox.cos.COSOutputStream >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r9 = specialinvoke r0.<org.apache.pdfbox.cos.COSStream: java.util.List getFilterList()>()
org.apache.pdfbox.cos.COSStream.createOutputStream : $r9 = specialinvoke r0.<org.apache.pdfbox.cos.COSStream: java.util.List getFilterList()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : $r5 = new java.util.ArrayList
org.apache.pdfbox.cos.COSStream.getFilterList : $r5 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.cos.COSStream.getFilterList : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getFilters()>()
org.apache.pdfbox.cos.COSStream.getFilterList : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getFilters()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilters : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FILTER>
org.apache.pdfbox.cos.COSStream.getFilters : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FILTER> >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilters : $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r1)
org.apache.pdfbox.cos.COSStream.getFilters : $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r1) >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilters : return $r2
org.apache.pdfbox.cos.COSStream.getFilters : return $r2 >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSStream.getFilterList : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : if $z0 == 0
org.apache.pdfbox.cos.COSStream.getFilterList : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : $z1 = r2 instanceof org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.cos.COSStream.getFilterList : $z1 = r2 instanceof org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : if $z1 == 0
org.apache.pdfbox.cos.COSStream.getFilterList : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : return $r5
org.apache.pdfbox.cos.COSStream.getFilterList : return $r5 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r10 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSStream.createOutputStream : $r10 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r8.<org.apache.pdfbox.cos.COSOutputStream: void <init>(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.OutputStream,org.apache.pdfbox.io.ScratchFile)>($r9, r0, $r6, $r10)
org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r8.<org.apache.pdfbox.cos.COSOutputStream: void <init>(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.OutputStream,org.apache.pdfbox.io.ScratchFile)>($r9, r0, $r6, $r10) >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> = 1
org.apache.pdfbox.cos.COSStream.createOutputStream : r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> = 1 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r11 = new org.apache.pdfbox.cos.COSStream$1
org.apache.pdfbox.cos.COSStream.createOutputStream : $r11 = new org.apache.pdfbox.cos.COSStream$1 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r11.<org.apache.pdfbox.cos.COSStream$1: void <init>(org.apache.pdfbox.cos.COSStream,java.io.OutputStream)>(r0, $r8)
org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r11.<org.apache.pdfbox.cos.COSStream$1: void <init>(org.apache.pdfbox.cos.COSStream,java.io.OutputStream)>(r0, $r8) >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : return $r11
org.apache.pdfbox.cos.COSStream.createOutputStream : return $r11 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : return $r1
org.apache.pdfbox.cos.COSStream.createOutputStream : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createOutputStream : return $r2
org.apache.pdfbox.pdmodel.common.PDStream.createOutputStream : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject.getResources : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject.getResources : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject.getResources : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName RESOURCES>
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject.getResources : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName RESOURCES> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject.getResources : $r4 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r3)
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject.getResources : $r4 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject.getResources : r1 = (org.apache.pdfbox.cos.COSDictionary) $r4
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject.getResources : r1 = (org.apache.pdfbox.cos.COSDictionary) $r4 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject.getResources : if r1 == null
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject.getResources : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject.getResources : return null
org.apache.pdfbox.pdmodel.graphics.form.PDFormXObject.getResources : return null >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setResources : r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: org.apache.pdfbox.pdmodel.PDResources resources> = r1
org.apache.pdfbox.contentstream.PDAbstractContentStream.setResources : r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: org.apache.pdfbox.pdmodel.PDResources resources> = r1 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.moveTo : $z0 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: boolean inTextMode>
org.apache.pdfbox.contentstream.PDAbstractContentStream.moveTo : $z0 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: boolean inTextMode> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.moveTo : if $z0 == 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.moveTo : if $z0 == 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.moveTo : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperand(float)>(f0)
org.apache.pdfbox.contentstream.PDAbstractContentStream.moveTo : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperand(float)>(f0) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r1 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.text.NumberFormat formatDecimal>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r1 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.text.NumberFormat formatDecimal> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $i1 = virtualinvoke $r1.<java.text.NumberFormat: int getMaximumFractionDigits()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $i1 = virtualinvoke $r1.<java.text.NumberFormat: int getMaximumFractionDigits()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r2 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: byte[] formatBuffer>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r2 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: byte[] formatBuffer> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : i0 = staticinvoke <org.apache.pdfbox.util.NumberFormatUtil: int formatFloatFast(float,int,byte[])>(f0, $i1, $r2)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : i0 = staticinvoke <org.apache.pdfbox.util.NumberFormatUtil: int formatFloatFast(float,int,byte[])>(f0, $i1, $r2) >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0)
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0) >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $z0 != 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $z0 != 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $z1 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0)
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $z1 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0) >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $z1 != 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $z1 != 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b1 = f0 cmpl 9.223372E18F
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b1 = f0 cmpl 9.223372E18F >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b1 > 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b1 > 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b2 = f0 cmpg -9.223372E18F
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b2 = f0 cmpg -9.223372E18F >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b2 <= 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b2 <= 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if i0 <= 5
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if i0 <= 5 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : i12 = 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : i12 = 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : l13 = (long) f0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : l13 = (long) f0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b3 = f0 cmpg 0.0F
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b3 = f0 cmpg 0.0F >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b3 >= 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b3 >= 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d0 = (double) f0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d0 = (double) f0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0)
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0) >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d2 = (double) l13
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d2 = (double) l13 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d4 = $d1 - $d2
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d4 = $d1 - $d2 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $r1 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS>
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $r1 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS> >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $l4 = $r1[i0]
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $l4 = $r1[i0] >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d3 = (double) $l4
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d3 = (double) $l4 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d5 = $d4 * $d3
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d5 = $d4 * $d3 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d6 = $d5 + 0.5
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d6 = $d5 + 0.5 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : l14 = (long) $d6
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : l14 = (long) $d6 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $r2 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS>
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $r2 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS> >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $l5 = $r2[i0]
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $l5 = $r2[i0] >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b6 = l14 cmp $l5
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b6 = l14 cmp $l5 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b6 < 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b6 < 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $i7 = staticinvoke <org.apache.pdfbox.util.NumberFormatUtil: int getExponent(long)>(l13)
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $i7 = staticinvoke <org.apache.pdfbox.util.NumberFormatUtil: int getExponent(long)>(l13) >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : i8 = 0
org.apache.pdfbox.util.NumberFormatUtil.getExponent : i8 = 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : $r0 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS>
org.apache.pdfbox.util.NumberFormatUtil.getExponent : $r0 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS> >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : $i1 = lengthof $r0
org.apache.pdfbox.util.NumberFormatUtil.getExponent : $i1 = lengthof $r0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : $i2 = $i1 - 1
org.apache.pdfbox.util.NumberFormatUtil.getExponent : $i2 = $i1 - 1 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : if i8 >= $i2
org.apache.pdfbox.util.NumberFormatUtil.getExponent : if i8 >= $i2 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : $r2 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS>
org.apache.pdfbox.util.NumberFormatUtil.getExponent : $r2 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS> >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : $i5 = i8 + 1
org.apache.pdfbox.util.NumberFormatUtil.getExponent : $i5 = i8 + 1 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : $l6 = $r2[$i5]
org.apache.pdfbox.util.NumberFormatUtil.getExponent : $l6 = $r2[$i5] >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : $b7 = l0 cmp $l6
org.apache.pdfbox.util.NumberFormatUtil.getExponent : $b7 = l0 cmp $l6 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : if $b7 >= 0
org.apache.pdfbox.util.NumberFormatUtil.getExponent : if $b7 >= 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : return i8
org.apache.pdfbox.util.NumberFormatUtil.getExponent : return i8 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : i15 = staticinvoke <org.apache.pdfbox.util.NumberFormatUtil: int formatPositiveNumber(long,int,boolean,byte[],int)>(l13, $i7, 0, r0, i12)
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : i15 = staticinvoke <org.apache.pdfbox.util.NumberFormatUtil: int formatPositiveNumber(long,int,boolean,byte[],int)>(l13, $i7, 0, r0, i12) >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i19 = i1
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i19 = i1 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : l20 = l0
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : l20 = l0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $b3 = l20 cmp 2147483647L
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $b3 = l20 cmp 2147483647L >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : if $b3 <= 0
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : if $b3 <= 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i22 = (int) l20
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i22 = (int) l20 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : if i18 < 0
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : if i18 < 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : if z0 == 0
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : if z0 == 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $r1 = <org.apache.pdfbox.util.NumberFormatUtil: int[] POWER_OF_TENS_INT>
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $r1 = <org.apache.pdfbox.util.NumberFormatUtil: int[] POWER_OF_TENS_INT> >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i4 = $r1[i18]
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i4 = $r1[i18] >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i2 = i22 / $i4
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i2 = i22 / $i4 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $r2 = <org.apache.pdfbox.util.NumberFormatUtil: int[] POWER_OF_TENS_INT>
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $r2 = <org.apache.pdfbox.util.NumberFormatUtil: int[] POWER_OF_TENS_INT> >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i5 = $r2[i18]
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i5 = $r2[i18] >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i6 = i2 * $i5
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i6 = i2 * $i5 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i22 = i22 - $i6
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i22 = i22 - $i6 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i7 = i19
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i7 = i19 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i19 = i19 + 1
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i19 = i19 + 1 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i8 = 48 + i2
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i8 = 48 + i2 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $b9 = (byte) $i8
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $b9 = (byte) $i8 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : r0[$i7] = $b9
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : r0[$i7] = $b9 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i18 = i18 + -1
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i18 = i18 + -1 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : goto [?= (branch)]
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : return i19
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : return i19 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b8 = l14 cmp 0L
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b8 = l14 cmp 0L >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b8 <= 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b8 <= 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : return i15
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : return i15 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : if i0 != -1
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : if i0 != -1 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r4 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r4 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r3 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: byte[] formatBuffer>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r3 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: byte[] formatBuffer> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, i0)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, i0) >>>>>>>> org.apache.pdfbox.cos.COSStream$1.write : $r2 = r0.<org.apache.pdfbox.cos.COSStream$1: java.io.OutputStream out>
org.apache.pdfbox.cos.COSStream$1.write : $r2 = r0.<org.apache.pdfbox.cos.COSStream$1: java.io.OutputStream out> >>>>>>>> org.apache.pdfbox.cos.COSStream$1.write : virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1)
org.apache.pdfbox.cos.COSStream$1.write : virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.write : $r2 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.ByteArrayOutputStream buffer>
org.apache.pdfbox.cos.COSOutputStream.write : $r2 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.ByteArrayOutputStream buffer> >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.write : virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i0, i1)
org.apache.pdfbox.cos.COSOutputStream.write : virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i0, i1) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r5 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r5 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : virtualinvoke $r5.<java.io.OutputStream: void write(int)>(32)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : virtualinvoke $r5.<java.io.OutputStream: void write(int)>(32) >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.write : $r1 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.ByteArrayOutputStream buffer>
org.apache.pdfbox.cos.COSOutputStream.write : $r1 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.ByteArrayOutputStream buffer> >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.write : virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>(i0)
org.apache.pdfbox.cos.COSOutputStream.write : virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>(i0) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.moveTo : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperand(float)>(f1)
org.apache.pdfbox.contentstream.PDAbstractContentStream.moveTo : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperand(float)>(f1) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.moveTo : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperator(java.lang.String)>("m")
org.apache.pdfbox.contentstream.PDAbstractContentStream.moveTo : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperator(java.lang.String)>("m") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : $r3 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : $r3 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : $r2 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset US_ASCII>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : $r2 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset US_ASCII> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : $r4 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : $r4 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>($r4)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>($r4) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : $r5 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : $r5 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : virtualinvoke $r5.<java.io.OutputStream: void write(int)>(10)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : virtualinvoke $r5.<java.io.OutputStream: void write(int)>(10) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.getStrokingColorSpaceStack : $r1 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.util.Stack strokingColorSpaceStack>
org.apache.pdfbox.contentstream.PDAbstractContentStream.getStrokingColorSpaceStack : $r1 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.util.Stack strokingColorSpaceStack> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.getStrokingColorSpaceStack : return $r1
org.apache.pdfbox.contentstream.PDAbstractContentStream.getStrokingColorSpaceStack : return $r1 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : $z0 = virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: boolean isOutside255Interval(int)>(i0)
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : $z0 = virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: boolean isOutside255Interval(int)>(i0) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutside255Interval : if i0 < 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutside255Interval : if i0 < 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutside255Interval : if i0 <= 255
org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutside255Interval : if i0 <= 255 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutside255Interval : $z0 = 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutside255Interval : $z0 = 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutside255Interval : return $z0
org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutside255Interval : return $z0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : if $z0 == 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : if $z0 == 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : $f0 = (float) i0
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : $f0 = (float) i0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : $f1 = $f0 / 255.0F
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : $f1 = $f0 / 255.0F >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : $d0 = (double) $f1
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : $d0 = (double) $f1 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void setNonStrokingColor(double)>($d0)
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void setNonStrokingColor(double)>($d0) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : $z0 = specialinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: boolean isOutsideOneInterval(double)>(d0)
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : $z0 = specialinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: boolean isOutsideOneInterval(double)>(d0) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutsideOneInterval : $b0 = d0 cmpg 0.0
org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutsideOneInterval : $b0 = d0 cmpg 0.0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutsideOneInterval : if $b0 < 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutsideOneInterval : if $b0 < 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutsideOneInterval : $b1 = d0 cmpl 1.0
org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutsideOneInterval : $b1 = d0 cmpl 1.0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutsideOneInterval : if $b1 <= 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutsideOneInterval : if $b1 <= 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutsideOneInterval : $z0 = 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutsideOneInterval : $z0 = 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutsideOneInterval : return $z0
org.apache.pdfbox.contentstream.PDAbstractContentStream.isOutsideOneInterval : return $z0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : $f0 = (float) d0
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : $f0 = (float) d0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperand(float)>($f0)
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperand(float)>($f0) >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if i0 <= 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if i0 <= 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : i16 = i15 + 1
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : i16 = i15 + 1 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : r0[i15] = 46
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : r0[i15] = 46 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $i9 = i0 - 1
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $i9 = i0 - 1 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : i15 = staticinvoke <org.apache.pdfbox.util.NumberFormatUtil: int formatPositiveNumber(long,int,boolean,byte[],int)>(l14, $i9, 1, r0, i16)
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : i15 = staticinvoke <org.apache.pdfbox.util.NumberFormatUtil: int formatPositiveNumber(long,int,boolean,byte[],int)>(l14, $i9, 1, r0, i16) >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : if i22 <= 0
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : if i22 <= 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperator(java.lang.String)>("g")
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperator(java.lang.String)>("g") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : $r1 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray INSTANCE>
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : $r1 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray INSTANCE> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void setNonStrokingColorSpaceStack(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>($r1)
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColor : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void setNonStrokingColorSpaceStack(org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>($r1) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColorSpaceStack : $r2 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.util.Stack nonStrokingColorSpaceStack>
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColorSpaceStack : $r2 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.util.Stack nonStrokingColorSpaceStack> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColorSpaceStack : $z0 = virtualinvoke $r2.<java.util.Stack: boolean isEmpty()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColorSpaceStack : $z0 = virtualinvoke $r2.<java.util.Stack: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColorSpaceStack : if $z0 == 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColorSpaceStack : if $z0 == 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColorSpaceStack : $r5 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.util.Stack nonStrokingColorSpaceStack>
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColorSpaceStack : $r5 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.util.Stack nonStrokingColorSpaceStack> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColorSpaceStack : virtualinvoke $r5.<java.util.Stack: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColorSpaceStack : virtualinvoke $r5.<java.util.Stack: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColorSpaceStack : goto [?= return]
org.apache.pdfbox.contentstream.PDAbstractContentStream.setNonStrokingColorSpaceStack : goto [?= return] >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = null
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = null >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : if r1 == null
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : if r1 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : if r7 != null
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : if r7 != null >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r2 = new org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r2 = new org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : specialinvoke $r2.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null)
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : specialinvoke $r2.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null) >>>>>>>> org.apache.pdfbox.cos.COSObject.setObject : r0.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase baseObject> = r1
org.apache.pdfbox.cos.COSObject.setObject : r0.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase baseObject> = r1 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = $r2
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = $r2 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : return r7
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : return r7 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $r7 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool>
org.apache.pdfbox.cos.COSDocument.getObjectByType : $r7 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>()
org.apache.pdfbox.cos.COSDocument.getObjectByType : $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSDocument.getObjectByType : r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.cos.COSDocument.getObjectByType : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z0 == 0
org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : return null
org.apache.pdfbox.cos.COSDocument.getObjectByType : return null >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PDField.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.interactive.form.PDField: org.apache.pdfbox.cos.COSDictionary dictionary>
org.apache.pdfbox.pdmodel.interactive.form.PDField.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.interactive.form.PDField: org.apache.pdfbox.cos.COSDictionary dictionary> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PDField.getCOSObject : return $r1
org.apache.pdfbox.pdmodel.interactive.form.PDField.getCOSObject : return $r1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.putAll : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : if $r3 == null
org.apache.pdfbox.util.SmallMap.putAll : if $r3 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $i1 = interfaceinvoke r1.<java.util.Map: int size()>()
org.apache.pdfbox.util.SmallMap.putAll : $i1 = interfaceinvoke r1.<java.util.Map: int size()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.size : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.size : if $r1 != null
org.apache.pdfbox.util.SmallMap.size : if $r1 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.size : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.size : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $i1 = $i0 >> 1
org.apache.pdfbox.util.SmallMap.size : $i1 = $i0 >> 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.size : return $i1
org.apache.pdfbox.util.SmallMap.size : return $i1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $i2 = $i1 << 1
org.apache.pdfbox.util.SmallMap.putAll : $i2 = $i1 << 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r4 = newarray (java.lang.Object)[$i2]
org.apache.pdfbox.util.SmallMap.putAll : $r4 = newarray (java.lang.Object)[$i2] >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r4
org.apache.pdfbox.util.SmallMap.putAll : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r4 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : i9 = 0
org.apache.pdfbox.util.SmallMap.putAll : i9 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()
org.apache.pdfbox.util.SmallMap.putAll : $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.entrySet : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : if $z0 == 0
org.apache.pdfbox.util.SmallMap.entrySet : if $z0 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r2 = new java.util.LinkedHashSet
org.apache.pdfbox.util.SmallMap.entrySet : $r2 = new java.util.LinkedHashSet >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>()
org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : i1 = 0
org.apache.pdfbox.util.SmallMap.entrySet : i1 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.entrySet : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $i0 = lengthof $r3
org.apache.pdfbox.util.SmallMap.entrySet : $i0 = lengthof $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : if i1 >= $i0
org.apache.pdfbox.util.SmallMap.entrySet : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r5 = new org.apache.pdfbox.util.SmallMap$SmallMapEntry
org.apache.pdfbox.util.SmallMap.entrySet : $r5 = new org.apache.pdfbox.util.SmallMap$SmallMapEntry >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r5.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: void <init>(org.apache.pdfbox.util.SmallMap,int)>(r0, i1)
org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r5.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: void <init>(org.apache.pdfbox.util.SmallMap,int)>(r0, i1) >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r5)
org.apache.pdfbox.util.SmallMap.entrySet : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r5) >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $r1 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: java.lang.Object getKey()>()
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $r1 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1)
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.access$000 : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.access$000 : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.access$000 : return $r1
org.apache.pdfbox.util.SmallMap.access$000 : return $r1 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r3 = $r2[$i0]
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r3 = $r2[$i0] >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : return $r3
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : return $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>()
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.apache.pdfbox.cos.COSName.hashCode : $i0 = r0.<org.apache.pdfbox.cos.COSName: int hashCode>
org.apache.pdfbox.cos.COSName.hashCode : $i0 = r0.<org.apache.pdfbox.cos.COSName: int hashCode> >>>>>>>> org.apache.pdfbox.cos.COSName.hashCode : return $i0
org.apache.pdfbox.cos.COSName.hashCode : return $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : return $i0
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : return $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : i1 = i1 + 2
org.apache.pdfbox.util.SmallMap.entrySet : i1 = i1 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : goto [?= $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.entrySet : goto [?= $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2)
org.apache.pdfbox.util.SmallMap.entrySet : $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : return $r4
org.apache.pdfbox.util.SmallMap.entrySet : return $r4 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : r26 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
org.apache.pdfbox.util.SmallMap.putAll : r26 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.util.SmallMap.putAll : $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : if $z1 == 0
org.apache.pdfbox.util.SmallMap.putAll : if $z1 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r6 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.util.SmallMap.putAll : $r6 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : r27 = (java.util.Map$Entry) $r6
org.apache.pdfbox.util.SmallMap.putAll : r27 = (java.util.Map$Entry) $r6 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r7 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.util.SmallMap.putAll : $r7 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : if $r7 == null
org.apache.pdfbox.util.SmallMap.putAll : if $r7 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r9 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.pdfbox.util.SmallMap.putAll : $r9 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1)
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1) >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i1 = $i0 + 1
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i1 = $i0 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r3 = $r2[$i1]
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r3 = $r2[$i1] >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : return $r3
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : return $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : if $r9 != null
org.apache.pdfbox.util.SmallMap.putAll : if $r9 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r10 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.putAll : $r10 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : i10 = i9 + 1
org.apache.pdfbox.util.SmallMap.putAll : i10 = i9 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r11 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.util.SmallMap.putAll : $r11 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r10[i9] = $r11
org.apache.pdfbox.util.SmallMap.putAll : $r10[i9] = $r11 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r12 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.putAll : $r12 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : i9 = i10 + 1
org.apache.pdfbox.util.SmallMap.putAll : i9 = i10 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r13 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.pdfbox.util.SmallMap.putAll : $r13 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r12[i10] = $r13
org.apache.pdfbox.util.SmallMap.putAll : $r12[i10] = $r13 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : goto [?= $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.util.SmallMap.putAll : goto [?= $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : goto [?= return]
org.apache.pdfbox.util.SmallMap.putAll : goto [?= return] >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : $r2 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1)
org.apache.pdfbox.cos.COSDictionary.getLong : $r2 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r3 = <org.apache.pdfbox.cos.COSName: java.util.Map nameMap>
org.apache.pdfbox.cos.COSName.getPDFName : $r3 = <org.apache.pdfbox.cos.COSName: java.util.Map nameMap> >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.apache.pdfbox.cos.COSName.getPDFName : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r4
org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r4 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : $l0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName,long)>($r2, -1L)
org.apache.pdfbox.cos.COSDictionary.getLong : $l0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName,long)>($r2, -1L) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : l1 = l0
org.apache.pdfbox.cos.COSDictionary.getLong : l1 = l0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.getLong : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : $z0 = r2 instanceof org.apache.pdfbox.cos.COSNumber
org.apache.pdfbox.cos.COSDictionary.getLong : $z0 = r2 instanceof org.apache.pdfbox.cos.COSNumber >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getLong : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : return l1
org.apache.pdfbox.cos.COSDictionary.getLong : return l1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : return $l0
org.apache.pdfbox.cos.COSDictionary.getLong : return $l0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : $r3 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r2)
org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : $r3 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : $r4 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getEmbeddedString(java.lang.String,org.apache.pdfbox.cos.COSName,java.lang.String)>(r1, $r3, null)
org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : $r4 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getEmbeddedString(java.lang.String,org.apache.pdfbox.cos.COSName,java.lang.String)>(r1, $r3, null) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : r6 = r3
org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : r6 = r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : $r5 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(java.lang.String)>(r1)
org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : $r5 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return $r3
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : r4 = (org.apache.pdfbox.cos.COSDictionary) $r5
org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : r4 = (org.apache.pdfbox.cos.COSDictionary) $r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : if r4 == null
org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : if r4 == null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : return r6
org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : return r6 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : return $r4
org.apache.pdfbox.cos.COSDictionary.getEmbeddedString : return $r4 >>>>>>>> org.apache.pdfbox.cos.COSDocument.setTrailer : r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer> = r1
org.apache.pdfbox.cos.COSDocument.setTrailer : r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer> = r1 >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r5 = new org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSName.getPDFName : $r5 = new org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : specialinvoke $r5.<org.apache.pdfbox.cos.COSName: void <init>(java.lang.String,boolean)>(r0, 0)
org.apache.pdfbox.cos.COSName.getPDFName : specialinvoke $r5.<org.apache.pdfbox.cos.COSName: void <init>(java.lang.String,boolean)>(r0, 0) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = $r5
org.apache.pdfbox.cos.COSName.getPDFName : r6 = $r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setEmbeddedInt : $r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(java.lang.String)>(r1)
org.apache.pdfbox.cos.COSDictionary.setEmbeddedInt : $r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setEmbeddedInt : r5 = (org.apache.pdfbox.cos.COSDictionary) $r3
org.apache.pdfbox.cos.COSDictionary.setEmbeddedInt : r5 = (org.apache.pdfbox.cos.COSDictionary) $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setEmbeddedInt : if r5 != null
org.apache.pdfbox.cos.COSDictionary.setEmbeddedInt : if r5 != null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setEmbeddedInt : $r4 = new org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.cos.COSDictionary.setEmbeddedInt : $r4 = new org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setEmbeddedInt : specialinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: void <init>()>()
org.apache.pdfbox.cos.COSDictionary.setEmbeddedInt : specialinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: void <init>()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setEmbeddedInt : r5 = $r4
org.apache.pdfbox.cos.COSDictionary.setEmbeddedInt : r5 = $r4 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setEmbeddedInt : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(java.lang.String,org.apache.pdfbox.cos.COSBase)>(r1, $r4)
org.apache.pdfbox.cos.COSDictionary.setEmbeddedInt : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(java.lang.String,org.apache.pdfbox.cos.COSBase)>(r1, $r4) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1)
org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r3, r2)
org.apache.pdfbox.cos.COSDictionary.setItem : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r3, r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setEmbeddedInt : virtualinvoke r5.<org.apache.pdfbox.cos.COSDictionary: void setInt(org.apache.pdfbox.cos.COSName,int)>(r2, i0)
org.apache.pdfbox.cos.COSDictionary.setEmbeddedInt : virtualinvoke r5.<org.apache.pdfbox.cos.COSDictionary: void setInt(org.apache.pdfbox.cos.COSName,int)>(r2, i0) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setInt : $l1 = (long) i0
org.apache.pdfbox.cos.COSDictionary.setInt : $l1 = (long) i0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setInt : $r2 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l1)
org.apache.pdfbox.cos.COSDictionary.setInt : $r2 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l1) >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $b2 = -100L cmp l0
org.apache.pdfbox.cos.COSInteger.get : $b2 = -100L cmp l0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : if $b2 > 0
org.apache.pdfbox.cos.COSInteger.get : if $b2 > 0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $b3 = l0 cmp 256L
org.apache.pdfbox.cos.COSInteger.get : $b3 = l0 cmp 256L >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : if $b3 > 0
org.apache.pdfbox.cos.COSInteger.get : if $b3 > 0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $i4 = (int) l0
org.apache.pdfbox.cos.COSInteger.get : $i4 = (int) l0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : i1 = $i4 - -100
org.apache.pdfbox.cos.COSInteger.get : i1 = $i4 - -100 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r1 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC>
org.apache.pdfbox.cos.COSInteger.get : $r1 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC> >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r2 = $r1[i1]
org.apache.pdfbox.cos.COSInteger.get : $r2 = $r1[i1] >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : if $r2 != null
org.apache.pdfbox.cos.COSInteger.get : if $r2 != null >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r6 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC>
org.apache.pdfbox.cos.COSInteger.get : $r6 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC> >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r5 = new org.apache.pdfbox.cos.COSInteger
org.apache.pdfbox.cos.COSInteger.get : $r5 = new org.apache.pdfbox.cos.COSInteger >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : specialinvoke $r5.<org.apache.pdfbox.cos.COSInteger: void <init>(long)>(l0)
org.apache.pdfbox.cos.COSInteger.get : specialinvoke $r5.<org.apache.pdfbox.cos.COSInteger: void <init>(long)>(l0) >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r6[i1] = $r5
org.apache.pdfbox.cos.COSInteger.get : $r6[i1] = $r5 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r3 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC>
org.apache.pdfbox.cos.COSInteger.get : $r3 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC> >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r4 = $r3[i1]
org.apache.pdfbox.cos.COSInteger.get : $r4 = $r3[i1] >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : return $r4
org.apache.pdfbox.cos.COSInteger.get : return $r4 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setInt : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, $r2)
org.apache.pdfbox.cos.COSDictionary.setInt : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, $r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setBoolean : $r2 = staticinvoke <org.apache.pdfbox.cos.COSBoolean: org.apache.pdfbox.cos.COSBoolean getBoolean(boolean)>(z0)
org.apache.pdfbox.cos.COSDictionary.setBoolean : $r2 = staticinvoke <org.apache.pdfbox.cos.COSBoolean: org.apache.pdfbox.cos.COSBoolean getBoolean(boolean)>(z0) >>>>>>>> org.apache.pdfbox.cos.COSBoolean.getBoolean : if z0 == 0
org.apache.pdfbox.cos.COSBoolean.getBoolean : if z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSBoolean.getBoolean : $r0 = <org.apache.pdfbox.cos.COSBoolean: org.apache.pdfbox.cos.COSBoolean FALSE>
org.apache.pdfbox.cos.COSBoolean.getBoolean : $r0 = <org.apache.pdfbox.cos.COSBoolean: org.apache.pdfbox.cos.COSBoolean FALSE> >>>>>>>> org.apache.pdfbox.cos.COSBoolean.getBoolean : return $r0
org.apache.pdfbox.cos.COSBoolean.getBoolean : return $r0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setBoolean : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, $r2)
org.apache.pdfbox.cos.COSDictionary.setBoolean : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, $r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setNeedToBeUpdated : r0.<org.apache.pdfbox.cos.COSDictionary: boolean needToBeUpdated> = z0
org.apache.pdfbox.cos.COSDictionary.setNeedToBeUpdated : r0.<org.apache.pdfbox.cos.COSDictionary: boolean needToBeUpdated> = z0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBuffer.isClosed : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBuffer: byte[] currentBuffer>
org.apache.pdfbox.io.RandomAccessBuffer.isClosed : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBuffer: byte[] currentBuffer> >>>>>>>> org.apache.pdfbox.io.RandomAccessBuffer.isClosed : if $r1 != null
org.apache.pdfbox.io.RandomAccessBuffer.isClosed : if $r1 != null >>>>>>>> org.apache.pdfbox.io.RandomAccessBuffer.isClosed : $z0 = 0
org.apache.pdfbox.io.RandomAccessBuffer.isClosed : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBuffer.isClosed : return $z0
org.apache.pdfbox.io.RandomAccessBuffer.isClosed : return $z0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBuffer.read : specialinvoke r0.<org.apache.pdfbox.io.RandomAccessBuffer: void checkClosed()>()
org.apache.pdfbox.io.RandomAccessBuffer.read : specialinvoke r0.<org.apache.pdfbox.io.RandomAccessBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBuffer.checkClosed : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBuffer: byte[] currentBuffer>
org.apache.pdfbox.io.RandomAccessBuffer.checkClosed : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBuffer: byte[] currentBuffer> >>>>>>>> org.apache.pdfbox.io.RandomAccessBuffer.checkClosed : if $r1 != null
org.apache.pdfbox.io.RandomAccessBuffer.checkClosed : if $r1 != null >>>>>>>> org.apache.pdfbox.io.RandomAccessBuffer.read : $l3 = r0.<org.apache.pdfbox.io.RandomAccessBuffer: long pointer>
org.apache.pdfbox.io.RandomAccessBuffer.read : $l3 = r0.<org.apache.pdfbox.io.RandomAccessBuffer: long pointer> >>>>>>>> org.apache.pdfbox.io.RandomAccessBuffer.read : $l2 = r0.<org.apache.pdfbox.io.RandomAccessBuffer: long size>
org.apache.pdfbox.io.RandomAccessBuffer.read : $l2 = r0.<org.apache.pdfbox.io.RandomAccessBuffer: long size> >>>>>>>> org.apache.pdfbox.io.RandomAccessBuffer.read : $b4 = $l3 cmp $l2
org.apache.pdfbox.io.RandomAccessBuffer.read : $b4 = $l3 cmp $l2 >>>>>>>> org.apache.pdfbox.io.RandomAccessBuffer.read : if $b4 < 0
org.apache.pdfbox.io.RandomAccessBuffer.read : if $b4 < 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBuffer.read : return 0
org.apache.pdfbox.io.RandomAccessBuffer.read : return 0 >>>>>>>> org.apache.pdfbox.util.Hex.getString : $r3 = new java.lang.StringBuilder
org.apache.pdfbox.util.Hex.getString : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.util.Hex.getString : $i2 = lengthof r0
org.apache.pdfbox.util.Hex.getString : $i2 = lengthof r0 >>>>>>>> org.apache.pdfbox.util.Hex.getString : $i3 = $i2 * 2
org.apache.pdfbox.util.Hex.getString : $i3 = $i2 * 2 >>>>>>>> org.apache.pdfbox.util.Hex.getString : specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i3)
org.apache.pdfbox.util.Hex.getString : specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>($i3) >>>>>>>> org.apache.pdfbox.util.Hex.getString : i0 = lengthof r0
org.apache.pdfbox.util.Hex.getString : i0 = lengthof r0 >>>>>>>> org.apache.pdfbox.util.Hex.getString : i8 = 0
org.apache.pdfbox.util.Hex.getString : i8 = 0 >>>>>>>> org.apache.pdfbox.util.Hex.getString : if i8 >= i0
org.apache.pdfbox.util.Hex.getString : if i8 >= i0 >>>>>>>> org.apache.pdfbox.util.Hex.getString : b1 = r0[i8]
org.apache.pdfbox.util.Hex.getString : b1 = r0[i8] >>>>>>>> org.apache.pdfbox.util.Hex.getString : $r5 = <org.apache.pdfbox.util.Hex: char[] HEX_CHARS>
org.apache.pdfbox.util.Hex.getString : $r5 = <org.apache.pdfbox.util.Hex: char[] HEX_CHARS> >>>>>>>> org.apache.pdfbox.util.Hex.getString : $i4 = staticinvoke <org.apache.pdfbox.util.Hex: int getHighNibble(byte)>(b1)
org.apache.pdfbox.util.Hex.getString : $i4 = staticinvoke <org.apache.pdfbox.util.Hex: int getHighNibble(byte)>(b1) >>>>>>>> org.apache.pdfbox.util.Hex.getHighNibble : $s1 = b0 & 240
org.apache.pdfbox.util.Hex.getHighNibble : $s1 = b0 & 240 >>>>>>>> org.apache.pdfbox.util.Hex.getHighNibble : $s2 = $s1 >> 4
org.apache.pdfbox.util.Hex.getHighNibble : $s2 = $s1 >> 4 >>>>>>>> org.apache.pdfbox.util.Hex.getHighNibble : return $s2
org.apache.pdfbox.util.Hex.getHighNibble : return $s2 >>>>>>>> org.apache.pdfbox.util.Hex.getString : $c5 = $r5[$i4]
org.apache.pdfbox.util.Hex.getString : $c5 = $r5[$i4] >>>>>>>> org.apache.pdfbox.util.Hex.getString : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5)
org.apache.pdfbox.util.Hex.getString : $r6 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c5) >>>>>>>> org.apache.pdfbox.util.Hex.getString : $r7 = <org.apache.pdfbox.util.Hex: char[] HEX_CHARS>
org.apache.pdfbox.util.Hex.getString : $r7 = <org.apache.pdfbox.util.Hex: char[] HEX_CHARS> >>>>>>>> org.apache.pdfbox.util.Hex.getString : $i6 = staticinvoke <org.apache.pdfbox.util.Hex: int getLowNibble(byte)>(b1)
org.apache.pdfbox.util.Hex.getString : $i6 = staticinvoke <org.apache.pdfbox.util.Hex: int getLowNibble(byte)>(b1) >>>>>>>> org.apache.pdfbox.util.Hex.getLowNibble : $b1 = b0 & 15
org.apache.pdfbox.util.Hex.getLowNibble : $b1 = b0 & 15 >>>>>>>> org.apache.pdfbox.util.Hex.getLowNibble : return $b1
org.apache.pdfbox.util.Hex.getLowNibble : return $b1 >>>>>>>> org.apache.pdfbox.util.Hex.getString : $c7 = $r7[$i6]
org.apache.pdfbox.util.Hex.getString : $c7 = $r7[$i6] >>>>>>>> org.apache.pdfbox.util.Hex.getString : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7)
org.apache.pdfbox.util.Hex.getString : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7) >>>>>>>> org.apache.pdfbox.util.Hex.getString : i8 = i8 + 1
org.apache.pdfbox.util.Hex.getString : i8 = i8 + 1 >>>>>>>> org.apache.pdfbox.util.Hex.getString : goto [?= (branch)]
org.apache.pdfbox.util.Hex.getString : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.util.Hex.getString : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.util.Hex.getString : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.util.Hex.getString : return $r4
org.apache.pdfbox.util.Hex.getString : return $r4 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : r11 = null
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : r11 = null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : $r5 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.cos.COSDictionary parameters>
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : $r5 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.cos.COSDictionary parameters> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName F>
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName F> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FILTER>
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FILTER> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : r1 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r4, $r3)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : r1 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r4, $r3) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if r3 != null
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if r3 != null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if r2 == null
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if r2 == null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r2)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r3
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : if $z0 == 0
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : $z1 = r1 instanceof org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : $z1 = r1 instanceof org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : if $z1 == 0
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : return r11
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getFilters : return r11 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $z0 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: boolean inTextMode>
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $z0 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: boolean inTextMode> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $z0 == 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $z0 == 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void saveGraphicsState()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void saveGraphicsState()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $r1 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.util.Stack fontStack>
org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $r1 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.util.Stack fontStack> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $z0 = virtualinvoke $r1.<java.util.Stack: boolean isEmpty()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $z0 = virtualinvoke $r1.<java.util.Stack: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : if $z0 != 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : if $z0 != 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $r2 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.util.Stack strokingColorSpaceStack>
org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $r2 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.util.Stack strokingColorSpaceStack> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $z1 = virtualinvoke $r2.<java.util.Stack: boolean isEmpty()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $z1 = virtualinvoke $r2.<java.util.Stack: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : if $z1 != 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : if $z1 != 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $r3 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.util.Stack nonStrokingColorSpaceStack>
org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $r3 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.util.Stack nonStrokingColorSpaceStack> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $z2 = virtualinvoke $r3.<java.util.Stack: boolean isEmpty()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $z2 = virtualinvoke $r3.<java.util.Stack: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : if $z2 != 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : if $z2 != 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $r5 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.util.Stack nonStrokingColorSpaceStack>
org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $r5 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.util.Stack nonStrokingColorSpaceStack> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $r4 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.util.Stack nonStrokingColorSpaceStack>
org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $r4 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.util.Stack nonStrokingColorSpaceStack> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $r6 = virtualinvoke $r4.<java.util.Stack: java.lang.Object peek()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : $r6 = virtualinvoke $r4.<java.util.Stack: java.lang.Object peek()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : virtualinvoke $r5.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r6)
org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : virtualinvoke $r5.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r6) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperator(java.lang.String)>("q")
org.apache.pdfbox.contentstream.PDAbstractContentStream.saveGraphicsState : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperator(java.lang.String)>("q") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r5 = new org.apache.pdfbox.util.Matrix
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r5 = new org.apache.pdfbox.util.Matrix >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : specialinvoke $r5.<org.apache.pdfbox.util.Matrix: void <init>(float,float,float,float,float,float)>(f2, 0.0F, 0.0F, f3, f0, f1)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : specialinvoke $r5.<org.apache.pdfbox.util.Matrix: void <init>(float,float,float,float,float,float)>(f2, 0.0F, 0.0F, f3, f0, f1) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void transform(org.apache.pdfbox.util.Matrix)>($r5)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void transform(org.apache.pdfbox.util.Matrix)>($r5) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.transform : $r2 = virtualinvoke r1.<org.apache.pdfbox.util.Matrix: java.awt.geom.AffineTransform createAffineTransform()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.transform : $r2 = virtualinvoke r1.<org.apache.pdfbox.util.Matrix: java.awt.geom.AffineTransform createAffineTransform()>() >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $r1 = new java.awt.geom.AffineTransform
org.apache.pdfbox.util.Matrix.createAffineTransform : $r1 = new java.awt.geom.AffineTransform >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $r2 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.createAffineTransform : $r2 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $f5 = $r2[0]
org.apache.pdfbox.util.Matrix.createAffineTransform : $f5 = $r2[0] >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $r3 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.createAffineTransform : $r3 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $f4 = $r3[1]
org.apache.pdfbox.util.Matrix.createAffineTransform : $f4 = $r3[1] >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $r4 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.createAffineTransform : $r4 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $f3 = $r4[3]
org.apache.pdfbox.util.Matrix.createAffineTransform : $f3 = $r4[3] >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $r5 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.createAffineTransform : $r5 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $f2 = $r5[4]
org.apache.pdfbox.util.Matrix.createAffineTransform : $f2 = $r5[4] >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $r6 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.createAffineTransform : $r6 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $f1 = $r6[6]
org.apache.pdfbox.util.Matrix.createAffineTransform : $f1 = $r6[6] >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $r7 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.createAffineTransform : $r7 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $f0 = $r7[7]
org.apache.pdfbox.util.Matrix.createAffineTransform : $f0 = $r7[7] >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>(float,float,float,float,float,float)>($f5, $f4, $f3, $f2, $f1, $f0)
org.apache.pdfbox.util.Matrix.createAffineTransform : specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>(float,float,float,float,float,float)>($f5, $f4, $f3, $f2, $f1, $f0) >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : return $r1
org.apache.pdfbox.util.Matrix.createAffineTransform : return $r1 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.transform : specialinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeAffineTransform(java.awt.geom.AffineTransform)>($r2)
org.apache.pdfbox.contentstream.PDAbstractContentStream.transform : specialinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeAffineTransform(java.awt.geom.AffineTransform)>($r2) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : r2 = newarray (double)[6]
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : r2 = newarray (double)[6] >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : virtualinvoke r1.<java.awt.geom.AffineTransform: void getMatrix(double[])>(r2)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : virtualinvoke r1.<java.awt.geom.AffineTransform: void getMatrix(double[])>(r2) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : i0 = lengthof r2
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : i0 = lengthof r2 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : i1 = 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : i1 = 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : if i1 >= i0
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : if i1 >= i0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : d0 = r2[i1]
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : d0 = r2[i1] >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : $f0 = (float) d0
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : $f0 = (float) d0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperand(float)>($f0)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperand(float)>($f0) >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : i8 = i8 + 1
org.apache.pdfbox.util.NumberFormatUtil.getExponent : i8 = i8 + 1 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : goto [?= $r0 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS>]
org.apache.pdfbox.util.NumberFormatUtil.getExponent : goto [?= $r0 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS>] >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : i1 = i1 + 1
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : i1 = i1 + 1 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : goto [?= (branch)]
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : i12 = 0 + 1
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : i12 = 0 + 1 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : r0[0] = 45
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : r0[0] = 45 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : l13 = neg l13
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : l13 = neg l13 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.transform : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperator(java.lang.String)>("cm")
org.apache.pdfbox.contentstream.PDAbstractContentStream.transform : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperator(java.lang.String)>("cm") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r6 = new java.lang.StringBuilder
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BI")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BI") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /W ")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /W ") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $i0 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: int getWidth()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $i0 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getWidth : $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.cos.COSDictionary parameters>
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getWidth : $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.cos.COSDictionary parameters> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getWidth : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName W>
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getWidth : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName W> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getWidth : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName WIDTH>
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getWidth : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName WIDTH> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getWidth : $i0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,int)>($r2, $r1, -1)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getWidth : $i0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,int)>($r2, $r1, -1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : i1 = i0
org.apache.pdfbox.cos.COSDictionary.getInt : i1 = i0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>(r1, r2)
org.apache.pdfbox.cos.COSDictionary.getInt : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>(r1, r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : $z0 = r3 instanceof org.apache.pdfbox.cos.COSNumber
org.apache.pdfbox.cos.COSDictionary.getInt : $z0 = r3 instanceof org.apache.pdfbox.cos.COSNumber >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getInt : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : return i1
org.apache.pdfbox.cos.COSDictionary.getInt : return i1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getWidth : return $i0
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getWidth : return $i0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /H ")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /H ") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $i1 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: int getHeight()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $i1 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getHeight : $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.cos.COSDictionary parameters>
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getHeight : $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.cos.COSDictionary parameters> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getHeight : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName H>
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getHeight : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName H> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getHeight : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName HEIGHT>
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getHeight : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName HEIGHT> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getHeight : $i0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,int)>($r2, $r1, -1)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getHeight : $i0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,int)>($r2, $r1, -1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getHeight : return $i0
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getHeight : return $i0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /CS ")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /CS ") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r14 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r14 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : $r4 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.cos.COSDictionary parameters>
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : $r4 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.cos.COSDictionary parameters> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CS>
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CS> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORSPACE>
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORSPACE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : r1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r3, $r2)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : r1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r3, $r2) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : if r1 == null
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: boolean isStencil()>()
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: boolean isStencil()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.isStencil : $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.cos.COSDictionary parameters>
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.isStencil : $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.cos.COSDictionary parameters> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.isStencil : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName IM>
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.isStencil : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName IM> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.isStencil : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName IMAGE_MASK>
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.isStencil : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName IMAGE_MASK> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.isStencil : $z0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: boolean getBoolean(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,boolean)>($r2, $r1, 0)
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.isStencil : $z0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: boolean getBoolean(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,boolean)>($r2, $r1, 0) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getBoolean : z2 = z0
org.apache.pdfbox.cos.COSDictionary.getBoolean : z2 = z0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getBoolean : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>(r1, r2)
org.apache.pdfbox.cos.COSDictionary.getBoolean : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>(r1, r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getBoolean : $z1 = r3 instanceof org.apache.pdfbox.cos.COSBoolean
org.apache.pdfbox.cos.COSDictionary.getBoolean : $z1 = r3 instanceof org.apache.pdfbox.cos.COSBoolean >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getBoolean : if $z1 == 0
org.apache.pdfbox.cos.COSDictionary.getBoolean : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getBoolean : return z2
org.apache.pdfbox.cos.COSDictionary.getBoolean : return z2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.isStencil : return $z0
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.isStencil : return $z0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : if $z0 == 0
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : $r5 = new java.io.IOException
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : $r5 = new java.io.IOException >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("could not determine inline image color space")
org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : specialinvoke $r5.<java.io.IOException: void <init>(java.lang.String)>("could not determine inline image color space") >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage.getColorSpace : throw $r5
