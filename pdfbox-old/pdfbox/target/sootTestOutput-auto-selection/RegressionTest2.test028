org.apache.pdfbox.pdmodel.interactive.form.PDField.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.interactive.form.PDField: org.apache.pdfbox.cos.COSDictionary dictionary> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PDField.getCOSObject : return $r1
org.apache.pdfbox.pdmodel.interactive.form.PDField.getCOSObject : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : if r2 != null
org.apache.pdfbox.cos.COSDictionary.setItem : if r2 != null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
org.apache.pdfbox.cos.COSDictionary.setItem : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if r1 == null
org.apache.pdfbox.util.SmallMap.put : if r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if r2 != null
org.apache.pdfbox.util.SmallMap.put : if r2 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if $r5 != null
org.apache.pdfbox.util.SmallMap.put : if $r5 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10 = newarray (java.lang.Object)[2]
org.apache.pdfbox.util.SmallMap.put : $r10 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10[0] = r1
org.apache.pdfbox.util.SmallMap.put : $r10[0] = r1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10[1] = r2
org.apache.pdfbox.util.SmallMap.put : $r10[1] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r10
org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r10 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : return null
org.apache.pdfbox.util.SmallMap.put : return null >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.putAll : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : if $r3 == null
org.apache.pdfbox.util.SmallMap.putAll : if $r3 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $i1 = interfaceinvoke r1.<java.util.Map: int size()>()
org.apache.pdfbox.util.SmallMap.putAll : $i1 = interfaceinvoke r1.<java.util.Map: int size()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.size : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.size : if $r1 != null
org.apache.pdfbox.util.SmallMap.size : if $r1 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.size : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.size : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $i1 = $i0 >> 1
org.apache.pdfbox.util.SmallMap.size : $i1 = $i0 >> 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.size : return $i1
org.apache.pdfbox.util.SmallMap.size : return $i1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $i2 = $i1 << 1
org.apache.pdfbox.util.SmallMap.putAll : $i2 = $i1 << 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r4 = newarray (java.lang.Object)[$i2]
org.apache.pdfbox.util.SmallMap.putAll : $r4 = newarray (java.lang.Object)[$i2] >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r4
org.apache.pdfbox.util.SmallMap.putAll : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r4 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : i9 = 0
org.apache.pdfbox.util.SmallMap.putAll : i9 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()
org.apache.pdfbox.util.SmallMap.putAll : $r5 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.entrySet : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null
org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.isEmpty : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $i0 != 0
org.apache.pdfbox.util.SmallMap.isEmpty : if $i0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 0
org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : return $z0
org.apache.pdfbox.util.SmallMap.isEmpty : return $z0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : if $z0 == 0
org.apache.pdfbox.util.SmallMap.entrySet : if $z0 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r2 = new java.util.LinkedHashSet
org.apache.pdfbox.util.SmallMap.entrySet : $r2 = new java.util.LinkedHashSet >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>()
org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : i1 = 0
org.apache.pdfbox.util.SmallMap.entrySet : i1 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.entrySet : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $i0 = lengthof $r3
org.apache.pdfbox.util.SmallMap.entrySet : $i0 = lengthof $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : if i1 >= $i0
org.apache.pdfbox.util.SmallMap.entrySet : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r5 = new org.apache.pdfbox.util.SmallMap$SmallMapEntry
org.apache.pdfbox.util.SmallMap.entrySet : $r5 = new org.apache.pdfbox.util.SmallMap$SmallMapEntry >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r5.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: void <init>(org.apache.pdfbox.util.SmallMap,int)>(r0, i1)
org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r5.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: void <init>(org.apache.pdfbox.util.SmallMap,int)>(r0, i1) >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r5)
org.apache.pdfbox.util.SmallMap.entrySet : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r5) >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $r1 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: java.lang.Object getKey()>()
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $r1 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1)
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.access$000 : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.access$000 : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.access$000 : return $r1
org.apache.pdfbox.util.SmallMap.access$000 : return $r1 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r3 = $r2[$i0]
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r3 = $r2[$i0] >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : return $r3
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : return $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>()
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.apache.pdfbox.cos.COSName.hashCode : $i0 = r0.<org.apache.pdfbox.cos.COSName: int hashCode>
org.apache.pdfbox.cos.COSName.hashCode : $i0 = r0.<org.apache.pdfbox.cos.COSName: int hashCode> >>>>>>>> org.apache.pdfbox.cos.COSName.hashCode : return $i0
org.apache.pdfbox.cos.COSName.hashCode : return $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : return $i0
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : return $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : i1 = i1 + 2
org.apache.pdfbox.util.SmallMap.entrySet : i1 = i1 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : goto [?= $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.entrySet : goto [?= $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2)
org.apache.pdfbox.util.SmallMap.entrySet : $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : return $r4
org.apache.pdfbox.util.SmallMap.entrySet : return $r4 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : r26 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
org.apache.pdfbox.util.SmallMap.putAll : r26 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.util.SmallMap.putAll : $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : if $z1 == 0
org.apache.pdfbox.util.SmallMap.putAll : if $z1 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r6 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.util.SmallMap.putAll : $r6 = interfaceinvoke r26.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : r27 = (java.util.Map$Entry) $r6
org.apache.pdfbox.util.SmallMap.putAll : r27 = (java.util.Map$Entry) $r6 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r7 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.util.SmallMap.putAll : $r7 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : if $r7 == null
org.apache.pdfbox.util.SmallMap.putAll : if $r7 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r9 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.pdfbox.util.SmallMap.putAll : $r9 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1)
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1) >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i1 = $i0 + 1
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i1 = $i0 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r3 = $r2[$i1]
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r3 = $r2[$i1] >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : return $r3
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : return $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : if $r9 != null
org.apache.pdfbox.util.SmallMap.putAll : if $r9 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r10 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.putAll : $r10 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : i10 = i9 + 1
org.apache.pdfbox.util.SmallMap.putAll : i10 = i9 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r11 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.util.SmallMap.putAll : $r11 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r10[i9] = $r11
org.apache.pdfbox.util.SmallMap.putAll : $r10[i9] = $r11 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r12 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.putAll : $r12 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : i9 = i10 + 1
org.apache.pdfbox.util.SmallMap.putAll : i9 = i10 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r13 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.pdfbox.util.SmallMap.putAll : $r13 = interfaceinvoke r27.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : $r12[i10] = $r13
org.apache.pdfbox.util.SmallMap.putAll : $r12[i10] = $r13 >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : goto [?= $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.util.SmallMap.putAll : goto [?= $z1 = interfaceinvoke r26.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.util.SmallMap.putAll : goto [?= return]
org.apache.pdfbox.util.SmallMap.putAll : goto [?= return] >>>>>>>> org.apache.pdfbox.cos.COSDictionary.removeItem : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.removeItem : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.removeItem : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.removeItem : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.remove : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.remove : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0
org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if r1 != null
org.apache.pdfbox.util.SmallMap.findKey : if r1 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : i1 = 0
org.apache.pdfbox.util.SmallMap.findKey : i1 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findKey : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.findKey : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if i1 >= $i0
org.apache.pdfbox.util.SmallMap.findKey : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findKey : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r4 = $r3[i1]
org.apache.pdfbox.util.SmallMap.findKey : $r4 = $r3[i1] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4)
org.apache.pdfbox.util.SmallMap.findKey : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSName.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSName.equals : if $z0 == 0
org.apache.pdfbox.cos.COSName.equals : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r4 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.equals : $r4 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r2 = (org.apache.pdfbox.cos.COSName) r1
org.apache.pdfbox.cos.COSName.equals : $r2 = (org.apache.pdfbox.cos.COSName) r1 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r3 = $r2.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.equals : $r3 = $r2.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3)
org.apache.pdfbox.cos.COSName.equals : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : if $z1 == 0
org.apache.pdfbox.cos.COSName.equals : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z2 = 0
org.apache.pdfbox.cos.COSName.equals : $z2 = 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : return $z2
org.apache.pdfbox.cos.COSName.equals : return $z2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z1 == 0
org.apache.pdfbox.util.SmallMap.findKey : if $z1 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : i1 = i1 + 2
org.apache.pdfbox.util.SmallMap.findKey : i1 = i1 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.findKey : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : return -1
org.apache.pdfbox.util.SmallMap.findKey : return -1 >>>>>>>> org.apache.pdfbox.util.SmallMap.remove : if i0 >= 0
org.apache.pdfbox.util.SmallMap.remove : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.remove : return null
org.apache.pdfbox.util.SmallMap.remove : return null >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths : $r4 = new java.util.HashMap
org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths : $r4 = new java.util.HashMap >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths : specialinvoke $r4.<java.util.HashMap: void <init>()>()
org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths : specialinvoke $r4.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths : r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: java.util.Map widths> = $r4
org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths : r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: java.util.Map widths> = $r4 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths : $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: org.apache.pdfbox.cos.COSDictionary dict>
org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths : $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: org.apache.pdfbox.cos.COSDictionary dict> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName W>
org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName W> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths : $r7 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths : $r7 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.get : if i0 >= 0
org.apache.pdfbox.util.SmallMap.get : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r3 = null
org.apache.pdfbox.util.SmallMap.get : $r3 = null >>>>>>>> org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3]
org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3] >>>>>>>> org.apache.pdfbox.util.SmallMap.get : return $r3
org.apache.pdfbox.util.SmallMap.get : return $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths : r1 = (org.apache.pdfbox.cos.COSArray) $r7
org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths : r1 = (org.apache.pdfbox.cos.COSArray) $r7 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths : if r1 == null
org.apache.pdfbox.pdmodel.font.PDCIDFont.readWidths : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: org.apache.pdfbox.cos.COSDictionary dict>
org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r6 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: org.apache.pdfbox.cos.COSDictionary dict> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DW2>
org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DW2> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r7 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r7 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : r1 = (org.apache.pdfbox.cos.COSArray) $r7
org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : r1 = (org.apache.pdfbox.cos.COSArray) $r7 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : if r1 == null
org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r8 = newarray (float)[2]
org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r8 = newarray (float)[2] >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r8[0] = 880.0F
org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r8[0] = 880.0F >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r8[1] = -1000.0F
org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r8[1] = -1000.0F >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: float[] dw2> = $r8
org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: float[] dw2> = $r8 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r10 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: org.apache.pdfbox.cos.COSDictionary dict>
org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r10 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: org.apache.pdfbox.cos.COSDictionary dict> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName W2>
org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName W2> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r11 = virtualinvoke $r10.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r9)
org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : $r11 = virtualinvoke $r10.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r9) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : r2 = (org.apache.pdfbox.cos.COSArray) $r11
org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : r2 = (org.apache.pdfbox.cos.COSArray) $r11 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : if r2 == null
org.apache.pdfbox.pdmodel.font.PDCIDFont.readVerticalDisplacements : if r2 == null >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor fontDescriptor>
org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : $r2 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor fontDescriptor> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : if $r2 != null
org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : if $r2 != null >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: org.apache.pdfbox.cos.COSDictionary dict>
org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: org.apache.pdfbox.cos.COSDictionary dict> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FONT_DESC>
org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FONT_DESC> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : $r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r3)
org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : $r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : r1 = (org.apache.pdfbox.cos.COSDictionary) $r5
org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : r1 = (org.apache.pdfbox.cos.COSDictionary) $r5 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : if r1 == null
org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : $r7 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor fontDescriptor>
org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : $r7 = r0.<org.apache.pdfbox.pdmodel.font.PDCIDFont: org.apache.pdfbox.pdmodel.font.PDFontDescriptor fontDescriptor> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : return $r7
org.apache.pdfbox.pdmodel.font.PDCIDFont.getFontDescriptor : return $r7 >>>>>>>> org.apache.pdfbox.pdmodel.font.FontMappers.instance : $r0 = <org.apache.pdfbox.pdmodel.font.FontMappers: org.apache.pdfbox.pdmodel.font.FontMapper instance>
org.apache.pdfbox.pdmodel.font.FontMappers.instance : $r0 = <org.apache.pdfbox.pdmodel.font.FontMappers: org.apache.pdfbox.pdmodel.font.FontMapper instance> >>>>>>>> org.apache.pdfbox.pdmodel.font.FontMappers.instance : if $r0 != null
org.apache.pdfbox.pdmodel.font.FontMappers.instance : if $r0 != null >>>>>>>> org.apache.pdfbox.pdmodel.font.FontMappers.instance : $r2 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontMappers$DefaultFontMapper: org.apache.pdfbox.pdmodel.font.FontMapper access$000()>()
org.apache.pdfbox.pdmodel.font.FontMappers.instance : $r2 = staticinvoke <org.apache.pdfbox.pdmodel.font.FontMappers$DefaultFontMapper: org.apache.pdfbox.pdmodel.font.FontMapper access$000()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : staticinvoke <org.apache.pdfbox.pdmodel.font.Standard14Fonts: void addAFM(java.lang.String,java.lang.String)>(r0, r0)
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : staticinvoke <org.apache.pdfbox.pdmodel.font.Standard14Fonts: void addAFM(java.lang.String,java.lang.String)>(r0, r0) >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r8 = <org.apache.pdfbox.pdmodel.font.Standard14Fonts: java.util.Set STANDARD_14_NAMES>
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r8 = <org.apache.pdfbox.pdmodel.font.Standard14Fonts: java.util.Set STANDARD_14_NAMES> >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r0)
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : interfaceinvoke $r8.<java.util.Set: boolean add(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r9 = <org.apache.pdfbox.pdmodel.font.Standard14Fonts: java.util.Map STANDARD_14_MAPPING>
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r9 = <org.apache.pdfbox.pdmodel.font.Standard14Fonts: java.util.Map STANDARD_14_MAPPING> >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1)
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r1) >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r11 = <org.apache.pdfbox.pdmodel.font.Standard14Fonts: java.util.Map STANDARD14_AFM_MAP>
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r11 = <org.apache.pdfbox.pdmodel.font.Standard14Fonts: java.util.Map STANDARD14_AFM_MAP> >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $z1 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $z1 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : if $z1 == 0
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r12 = new java.lang.StringBuilder
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r12 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org/apache/pdfbox/resources/afm/")
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("org/apache/pdfbox/resources/afm/") >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".afm")
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".afm") >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : r2 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : r2 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r16 = class "Lorg/apache/pdfbox/pdmodel/font/PDType1Font;"
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r16 = class "Lorg/apache/pdfbox/pdmodel/font/PDType1Font;" >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r17 = virtualinvoke $r16.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : r3 = virtualinvoke $r17.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r2)
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : r3 = virtualinvoke $r17.<java.lang.ClassLoader: java.net.URL getResource(java.lang.String)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : if r3 == null
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : if r3 == null >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r18 = new java.io.IOException
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r18 = new java.io.IOException >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r19 = new java.lang.StringBuilder
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r19 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found")
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" not found") >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r22)
org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : specialinvoke $r18.<java.io.IOException: void <init>(java.lang.String)>($r22) >>>>>>>> org.apache.pdfbox.pdmodel.font.Standard14Fonts.addAFM : throw $r18
