org.apache.pdfbox.util.QuickSort.partition : i8 = i1 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : i9 = i2 - 2
org.apache.pdfbox.util.QuickSort.partition : i9 = i2 - 2 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0)
org.apache.pdfbox.util.QuickSort.partition : r2 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $i3 = i2 - 1
org.apache.pdfbox.util.QuickSort.partition : $i3 = i2 - 1 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : staticinvoke <org.apache.pdfbox.util.QuickSort: void swap(java.util.List,int,int)>(r0, i0, $i3)
org.apache.pdfbox.util.QuickSort.partition : staticinvoke <org.apache.pdfbox.util.QuickSort: void swap(java.util.List,int,int)>(r0, i0, $i3) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : if i8 >= i9
org.apache.pdfbox.util.QuickSort.partition : if i8 >= i9 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i8)
org.apache.pdfbox.util.QuickSort.partition : if i8 >= i9 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : i10 = i9
org.apache.pdfbox.util.QuickSort.partition : i10 = i9 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i9)
org.apache.pdfbox.util.QuickSort.partition : $r3 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i9) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $i4 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, r2)
org.apache.pdfbox.util.QuickSort.partition : $i4 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r3, r2) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : if $i4 >= 0
org.apache.pdfbox.util.QuickSort.partition : if $i4 >= 0 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : i10 = i9 + 1
org.apache.pdfbox.util.QuickSort.partition : if $i4 >= 0 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $i5 = i2 - 1
org.apache.pdfbox.util.QuickSort.partition : $i5 = i2 - 1 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : staticinvoke <org.apache.pdfbox.util.QuickSort: void swap(java.util.List,int,int)>(r0, $i5, i10)
org.apache.pdfbox.util.QuickSort.partition : staticinvoke <org.apache.pdfbox.util.QuickSort: void swap(java.util.List,int,int)>(r0, $i5, i10) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : return i10
org.apache.pdfbox.util.QuickSort.partition : i10 = i9 + 1 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $i5 = i2 - 1
org.apache.pdfbox.util.QuickSort.partition : $r4 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i8) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $i6 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, r2)
org.apache.pdfbox.util.QuickSort.partition : $i6 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>($r4, r2) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : if $i6 > 0
org.apache.pdfbox.util.QuickSort.partition : if $i6 > 0 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : i8 = i8 + 1
org.apache.pdfbox.util.QuickSort.partition : if $i6 > 0 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i9)
org.apache.pdfbox.util.QuickSort.partition : $r5 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i9) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : $i7 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r2, $r5)
org.apache.pdfbox.util.QuickSort.partition : $i7 = interfaceinvoke r1.<java.util.Comparator: int compare(java.lang.Object,java.lang.Object)>(r2, $r5) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : if $i7 > 0
org.apache.pdfbox.util.QuickSort.partition : if $i7 > 0 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : i9 = i9 + -1
org.apache.pdfbox.util.QuickSort.partition : if $i7 > 0 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : staticinvoke <org.apache.pdfbox.util.QuickSort: void swap(java.util.List,int,int)>(r0, i8, i9)
org.apache.pdfbox.util.QuickSort.partition : staticinvoke <org.apache.pdfbox.util.QuickSort: void swap(java.util.List,int,int)>(r0, i8, i9) >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : goto [?= (branch)]
org.apache.pdfbox.util.QuickSort.partition : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : if i8 >= i9
org.apache.pdfbox.util.QuickSort.partition : i9 = i9 + -1 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : goto [?= (branch)]
org.apache.pdfbox.util.QuickSort.partition : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : if i8 >= i9
org.apache.pdfbox.util.QuickSort.partition : i8 = i8 + 1 >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : goto [?= (branch)]
org.apache.pdfbox.util.QuickSort.partition : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.util.QuickSort.partition : if i8 >= i9
