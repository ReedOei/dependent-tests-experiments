org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r6 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace alternateColorSpace> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $z0 = $r6 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDLab
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $z0 = $r6 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDLab >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if $z0 == 0
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r17 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: java.awt.image.BufferedImage toRGBImage2(java.awt.image.WritableRaster)>(r1)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $i3 = virtualinvoke r1.<java.awt.image.WritableRaster: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $i3 = virtualinvoke r1.<java.awt.image.WritableRaster: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $i4 = virtualinvoke r1.<java.awt.image.WritableRaster: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $i4 = virtualinvoke r1.<java.awt.image.WritableRaster: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r7 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace alternateColorSpace>
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r7 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace alternateColorSpace> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $i5 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: int getNumberOfComponents()>()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $i5 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: int getNumberOfComponents()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r8 = new java.awt.Point
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r8 = new java.awt.Point >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : specialinvoke $r8.<java.awt.Point: void <init>(int,int)>(0, 0)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : specialinvoke $r8.<java.awt.Point: void <init>(int,int)>(0, 0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r2 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createBandedRaster(int,int,int,int,java.awt.Point)>(0, $i3, $i4, $i5, $r8)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r2 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createBandedRaster(int,int,int,int,java.awt.Point)>(0, $i3, $i4, $i5, $r8) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r9 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace alternateColorSpace>
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r9 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace alternateColorSpace> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i0 = virtualinvoke $r9.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: int getNumberOfComponents()>()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i0 = virtualinvoke $r9.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: int getNumberOfComponents()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i1 = virtualinvoke r1.<java.awt.image.WritableRaster: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i1 = virtualinvoke r1.<java.awt.image.WritableRaster: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i2 = virtualinvoke r1.<java.awt.image.WritableRaster: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i2 = virtualinvoke r1.<java.awt.image.WritableRaster: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r3 = newarray (float)[1]
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r3 = newarray (float)[1] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r10 = new java.util.HashMap
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r10 = new java.util.HashMap >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : specialinvoke $r10.<java.util.HashMap: void <init>()>()
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : specialinvoke $r10.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i7 = 0
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i7 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if i7 >= i2
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if i7 >= i2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i8 = 0
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if i7 >= i2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r11 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace alternateColorSpace>
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r11 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace alternateColorSpace> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r12 = virtualinvoke $r11.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.awt.image.BufferedImage toRGBImage(java.awt.image.WritableRaster)>(r2)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r12 = virtualinvoke $r11.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.awt.image.BufferedImage toRGBImage(java.awt.image.WritableRaster)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : return $r12
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i8 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if i8 >= i1
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if i8 >= i1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : virtualinvoke r1.<java.awt.image.WritableRaster: float[] getPixel(int,int,float[])>(i8, i7, r3)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if i8 >= i1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i7 = i7 + 1
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i7 = i7 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if i7 >= i2
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : virtualinvoke r1.<java.awt.image.WritableRaster: float[] getPixel(int,int,float[])>(i8, i7, r3) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $f0 = r3[0]
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $f0 = r3[0] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $i6 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $i6 = staticinvoke <java.lang.Float: int floatToIntBits(float)>($f0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r14 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i6) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r15 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r15 = interfaceinvoke $r10.<java.util.Map: java.lang.Object get(java.lang.Object)>($r14) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r18 = (int[]) $r15
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r18 = (int[]) $r15 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if r18 != null
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if r18 != null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r18 = newarray (int)[i0]
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if r18 != null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : virtualinvoke r2.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i8, i7, r18)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : virtualinvoke r2.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i8, i7, r18) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i8 = i8 + 1
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : i8 = i8 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : if i8 >= i1
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : r18 = newarray (int)[i0] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: void tintTransform(float[],int[])>(r3, r18)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: void tintTransform(float[],int[])>(r3, r18) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r18)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r14, r18) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : virtualinvoke r2.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i8, i7, r18)
org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : $r17 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDSeparation: java.awt.image.BufferedImage toRGBImage2(java.awt.image.WritableRaster)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDSeparation.toRGBImage : return $r17
