org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $z0 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: boolean inTextMode> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $z0 == 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $z0 == 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r32 = new java.lang.IllegalStateException
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $z0 == 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void saveGraphicsState()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void saveGraphicsState()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r5 = new org.apache.pdfbox.util.Matrix
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r5 = new org.apache.pdfbox.util.Matrix >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : specialinvoke $r5.<org.apache.pdfbox.util.Matrix: void <init>(float,float,float,float,float,float)>(f2, 0.0F, 0.0F, f3, f0, f1)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : specialinvoke $r5.<org.apache.pdfbox.util.Matrix: void <init>(float,float,float,float,float,float)>(f2, 0.0F, 0.0F, f3, f0, f1) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void transform(org.apache.pdfbox.util.Matrix)>($r5)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void transform(org.apache.pdfbox.util.Matrix)>($r5) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r6 = new java.lang.StringBuilder
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r6 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BI")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("BI") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /W ")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /W ") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $i0 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: int getWidth()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $i0 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /H ")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /H ") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $i1 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: int getHeight()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $i1 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /CS ")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /CS ") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("/") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r14 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r14 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r15 = virtualinvoke $r14.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.lang.String getName()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r15 = virtualinvoke $r14.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r15) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r17 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.cos.COSArray getDecode()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r17 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.cos.COSArray getDecode()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $r17 == null
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $r17 == null >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r23 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.cos.COSArray getDecode()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $r17 == null >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $z2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: boolean isStencil()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $z2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: boolean isStencil()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $z2 == 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $z2 == 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /IM true")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $z2 == 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /BPC ")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /BPC ") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $i2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: int getBitsPerComponent()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $i2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: int getBitsPerComponent()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i2) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r20 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r20 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void write(java.lang.String)>($r20)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void write(java.lang.String)>($r20) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeLine()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeLine()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperator(java.lang.String)>("ID")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperator(java.lang.String)>("ID") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r21 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: byte[] getData()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r21 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: byte[] getData()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeBytes(byte[])>($r21)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeBytes(byte[])>($r21) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeLine()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeLine()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperator(java.lang.String)>("EI")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperator(java.lang.String)>("EI") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void restoreGraphicsState()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void restoreGraphicsState()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : return
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /IM true") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /BPC ")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r23 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.cos.COSArray getDecode()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $i3 = virtualinvoke $r23.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $i3 = virtualinvoke $r23.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $i3 <= 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $i3 <= 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /D ")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $i3 <= 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $z2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: boolean isStencil()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n /D ") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("[") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r26 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.cos.COSArray getDecode()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r26 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: org.apache.pdfbox.cos.COSArray getDecode()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : r3 = virtualinvoke $r26.<org.apache.pdfbox.cos.COSArray: java.util.Iterator iterator()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : r3 = virtualinvoke $r26.<org.apache.pdfbox.cos.COSArray: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $z1 == 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $z1 == 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r28 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $z1 == 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $z2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDInlineImage: boolean isStencil()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r28 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : r4 = (org.apache.pdfbox.cos.COSBase) $r28
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : r4 = (org.apache.pdfbox.cos.COSBase) $r28 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r29 = (org.apache.pdfbox.cos.COSNumber) r4
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r29 = (org.apache.pdfbox.cos.COSNumber) r4 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $i4 = virtualinvoke $r29.<org.apache.pdfbox.cos.COSNumber: int intValue()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $i4 = virtualinvoke $r29.<org.apache.pdfbox.cos.COSNumber: int intValue()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i4) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : goto [?= $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r32 = new java.lang.IllegalStateException >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : specialinvoke $r32.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Error: drawImage is not allowed within a text block.")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : specialinvoke $r32.<java.lang.IllegalStateException: void <init>(java.lang.String)>("Error: drawImage is not allowed within a text block.") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : throw $r32
