org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r5 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $z0 = virtualinvoke $r5.<java.awt.image.ColorModel: boolean hasAlpha()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $z0 = virtualinvoke $r5.<java.awt.image.ColorModel: boolean hasAlpha()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $z0 != 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : return null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r2 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getAlphaRaster()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r2 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getAlphaRaster()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r2 != null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r2 != null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r11 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject createAlphaFromARGBImage2(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage)>(r0, r1)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r2 != null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i2 = virtualinvoke r2.<java.awt.image.WritableRaster: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i2 = virtualinvoke r2.<java.awt.image.WritableRaster: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i3 = virtualinvoke r2.<java.awt.image.WritableRaster: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i3 = virtualinvoke r2.<java.awt.image.WritableRaster: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r6 = (int[]) null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r6 = (int[]) null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r3 = virtualinvoke r2.<java.awt.image.WritableRaster: int[] getPixels(int,int,int,int,int[])>(0, 0, $i2, $i3, $r6)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r3 = virtualinvoke r2.<java.awt.image.WritableRaster: int[] getPixels(int,int,int,int,int[])>(0, 0, $i2, $i3, $r6) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r7 = new java.io.ByteArrayOutputStream
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r7 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i4 = virtualinvoke r1.<java.awt.image.BufferedImage: int getTransparency()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i4 = virtualinvoke r1.<java.awt.image.BufferedImage: int getTransparency()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i4 != 2
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i4 != 2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : b9 = 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i4 != 2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : b9 = 8
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : b9 = 8 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i13 = lengthof r3
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i13 = lengthof r3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i14 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i14 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i14 >= i13
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i14 >= i13 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i15 = r3[i14]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i14 >= i13 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r8 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r8 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i5 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i5 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i6 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i6 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r9 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray INSTANCE>
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r9 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray INSTANCE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r15 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject prepareImageXObject(org.apache.pdfbox.pdmodel.PDDocument,byte[],int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>(r0, $r8, $i5, $i6, b9, $r9)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r15 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject prepareImageXObject(org.apache.pdfbox.pdmodel.PDDocument,byte[],int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>(r0, $r8, $i5, $i6, b9, $r9) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : return r15
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i15 = r3[i14] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r7.<java.io.ByteArrayOutputStream: void write(int)>(i15)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r7.<java.io.ByteArrayOutputStream: void write(int)>(i15) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i14 = i14 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i14 = i14 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i14 >= i13
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : b9 = 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r10 = new javax.imageio.stream.MemoryCacheImageOutputStream
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r10 = new javax.imageio.stream.MemoryCacheImageOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : specialinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void <init>(java.io.OutputStream)>($r7)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : specialinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void <init>(java.io.OutputStream)>($r7) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i10 = virtualinvoke r2.<java.awt.image.WritableRaster: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i10 = virtualinvoke r2.<java.awt.image.WritableRaster: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i11 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i11 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i0 = lengthof r3
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i0 = lengthof r3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i12 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i12 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i12 >= i0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i12 >= i0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i1 = r3[i12]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i12 >= i0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void flush()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void flush()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= $r8 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= $r8 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r8 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i1 = r3[i12] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(i1)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(i1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i11 = i11 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i11 = i11 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i7 = i11 % i10
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i7 = i11 % i10 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i7 != 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i7 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i8 = virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i7 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i12 = i12 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i12 = i12 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i12 >= i0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i8 = virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i8 == 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i8 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(0)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i8 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i12 = i12 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= $i8 = virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= $i8 = virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i8 = virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r11 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject createAlphaFromARGBImage2(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage)>(r0, r1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : return $r11
