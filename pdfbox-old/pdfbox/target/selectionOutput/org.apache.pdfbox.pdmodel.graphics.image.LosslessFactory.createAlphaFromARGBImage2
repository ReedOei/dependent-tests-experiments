org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r3 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getTransparency()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getTransparency()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if $i1 != 2
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if $i1 != 2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : b7 = 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if $i1 != 2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : b7 = 8
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : b7 = 8 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i12 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i12 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i13 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i13 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i12 >= i13
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i12 >= i13 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i14 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i12 >= i13 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i2 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i2 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i3 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i3 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r5 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray INSTANCE>
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r5 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray INSTANCE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r8 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject prepareImageXObject(org.apache.pdfbox.pdmodel.PDDocument,byte[],int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>(r0, $r4, $i2, $i3, b7, $r5)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : r8 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject prepareImageXObject(org.apache.pdfbox.pdmodel.PDDocument,byte[],int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>(r0, $r4, $i2, $i3, b7, $r5) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : return r8
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i14 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i15 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i15 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i14 >= i15
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i14 >= i15 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i4 = virtualinvoke r1.<java.awt.image.BufferedImage: int getRGB(int,int)>(i14, i12)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i14 >= i15 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i12 = i12 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i12 = i12 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i12 >= i13
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i4 = virtualinvoke r1.<java.awt.image.BufferedImage: int getRGB(int,int)>(i14, i12) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i16 = $i4 >>> 24
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i16 = $i4 >>> 24 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(int)>(i16)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke $r3.<java.io.ByteArrayOutputStream: void write(int)>(i16) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i14 = i14 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i14 = i14 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i14 >= i15
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : b7 = 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r6 = new javax.imageio.stream.MemoryCacheImageOutputStream
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r6 = new javax.imageio.stream.MemoryCacheImageOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : specialinvoke $r6.<javax.imageio.stream.MemoryCacheImageOutputStream: void <init>(java.io.OutputStream)>($r3)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : specialinvoke $r6.<javax.imageio.stream.MemoryCacheImageOutputStream: void <init>(java.io.OutputStream)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i8 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i8 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i9 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i9 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i8 >= i9
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i8 >= i9 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i10 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i8 >= i9 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke $r6.<javax.imageio.stream.MemoryCacheImageOutputStream: void flush()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke $r6.<javax.imageio.stream.MemoryCacheImageOutputStream: void flush()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke $r6.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke $r6.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i10 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i11 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i11 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i10 >= i11
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i10 >= i11 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i6 = virtualinvoke r1.<java.awt.image.BufferedImage: int getRGB(int,int)>(i10, i8)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i10 >= i11 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i5 = virtualinvoke $r6.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i5 = virtualinvoke $r6.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if $i5 == 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if $i5 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke $r6.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(0)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if $i5 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i8 = i8 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i8 = i8 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i8 >= i9
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke $r6.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= $i5 = virtualinvoke $r6.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= $i5 = virtualinvoke $r6.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i5 = virtualinvoke $r6.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : $i6 = virtualinvoke r1.<java.awt.image.BufferedImage: int getRGB(int,int)>(i10, i8) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i0 = $i6 >>> 24
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i0 = $i6 >>> 24 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke $r6.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(i0)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : virtualinvoke $r6.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(i0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i10 = i10 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : i10 = i10 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage2 : if i10 >= i11
