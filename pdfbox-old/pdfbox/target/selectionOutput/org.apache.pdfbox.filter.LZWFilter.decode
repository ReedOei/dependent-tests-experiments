org.apache.pdfbox.filter.LZWFilter.decode : i5 = -1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : i6 = 1
org.apache.pdfbox.filter.LZWFilter.decode : i6 = 1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : r4 = virtualinvoke r0.<org.apache.pdfbox.filter.LZWFilter: org.apache.pdfbox.cos.COSDictionary getDecodeParams(org.apache.pdfbox.cos.COSDictionary,int)>(r3, i0)
org.apache.pdfbox.filter.LZWFilter.decode : r4 = virtualinvoke r0.<org.apache.pdfbox.filter.LZWFilter: org.apache.pdfbox.cos.COSDictionary getDecodeParams(org.apache.pdfbox.cos.COSDictionary,int)>(r3, i0) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : if r4 == null
org.apache.pdfbox.filter.LZWFilter.decode : if r4 == null >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : $r14 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREDICTOR>
org.apache.pdfbox.filter.LZWFilter.decode : if r4 == null >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : if i5 <= 1
org.apache.pdfbox.filter.LZWFilter.decode : if i5 <= 1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORS>
org.apache.pdfbox.filter.LZWFilter.decode : if i5 <= 1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: void doLZWDecode(java.io.InputStream,java.io.OutputStream,int)>(r1, r2, i6)
org.apache.pdfbox.filter.LZWFilter.decode : specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: void doLZWDecode(java.io.InputStream,java.io.OutputStream,int)>(r1, r2, i6) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : $r7 = new org.apache.pdfbox.filter.DecodeResult
org.apache.pdfbox.filter.LZWFilter.decode : $r7 = new org.apache.pdfbox.filter.DecodeResult >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : specialinvoke $r7.<org.apache.pdfbox.filter.DecodeResult: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r3)
org.apache.pdfbox.filter.LZWFilter.decode : specialinvoke $r7.<org.apache.pdfbox.filter.DecodeResult: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r3) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : return $r7
org.apache.pdfbox.filter.LZWFilter.decode : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORS> >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : $i4 = virtualinvoke r4.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r8, 1)
org.apache.pdfbox.filter.LZWFilter.decode : $i4 = virtualinvoke r4.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r8, 1) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : i1 = staticinvoke <java.lang.Math: int min(int,int)>($i4, 32)
org.apache.pdfbox.filter.LZWFilter.decode : i1 = staticinvoke <java.lang.Math: int min(int,int)>($i4, 32) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BITS_PER_COMPONENT>
org.apache.pdfbox.filter.LZWFilter.decode : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BITS_PER_COMPONENT> >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : i2 = virtualinvoke r4.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r9, 8)
org.apache.pdfbox.filter.LZWFilter.decode : i2 = virtualinvoke r4.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r9, 8) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLUMNS>
org.apache.pdfbox.filter.LZWFilter.decode : $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLUMNS> >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : i3 = virtualinvoke r4.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r10, 1)
org.apache.pdfbox.filter.LZWFilter.decode : i3 = virtualinvoke r4.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r10, 1) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : $r11 = new java.io.ByteArrayOutputStream
org.apache.pdfbox.filter.LZWFilter.decode : $r11 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : specialinvoke $r11.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.filter.LZWFilter.decode : specialinvoke $r11.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: void doLZWDecode(java.io.InputStream,java.io.OutputStream,int)>(r1, $r11, i6)
org.apache.pdfbox.filter.LZWFilter.decode : specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: void doLZWDecode(java.io.InputStream,java.io.OutputStream,int)>(r1, $r11, i6) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : $r12 = new java.io.ByteArrayInputStream
org.apache.pdfbox.filter.LZWFilter.decode : $r12 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : $r13 = virtualinvoke $r11.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.filter.LZWFilter.decode : $r13 = virtualinvoke $r11.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : specialinvoke $r12.<java.io.ByteArrayInputStream: void <init>(byte[])>($r13)
org.apache.pdfbox.filter.LZWFilter.decode : specialinvoke $r12.<java.io.ByteArrayInputStream: void <init>(byte[])>($r13) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : staticinvoke <org.apache.pdfbox.filter.Predictor: void decodePredictor(int,int,int,int,java.io.InputStream,java.io.OutputStream)>(i5, i1, i2, i3, $r12, r2)
org.apache.pdfbox.filter.LZWFilter.decode : staticinvoke <org.apache.pdfbox.filter.Predictor: void decodePredictor(int,int,int,int,java.io.InputStream,java.io.OutputStream)>(i5, i1, i2, i3, $r12, r2) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : virtualinvoke r2.<java.io.OutputStream: void flush()>()
org.apache.pdfbox.filter.LZWFilter.decode : virtualinvoke r2.<java.io.OutputStream: void flush()>() >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : virtualinvoke $r11.<java.io.ByteArrayOutputStream: void reset()>()
org.apache.pdfbox.filter.LZWFilter.decode : virtualinvoke $r11.<java.io.ByteArrayOutputStream: void reset()>() >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : virtualinvoke $r12.<java.io.ByteArrayInputStream: void reset()>()
org.apache.pdfbox.filter.LZWFilter.decode : virtualinvoke $r12.<java.io.ByteArrayInputStream: void reset()>() >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : goto [?= $r7 = new org.apache.pdfbox.filter.DecodeResult]
org.apache.pdfbox.filter.LZWFilter.decode : goto [?= $r7 = new org.apache.pdfbox.filter.DecodeResult] >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : $r7 = new org.apache.pdfbox.filter.DecodeResult
org.apache.pdfbox.filter.LZWFilter.decode : $r14 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREDICTOR> >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : i5 = virtualinvoke r4.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName)>($r14)
org.apache.pdfbox.filter.LZWFilter.decode : i5 = virtualinvoke r4.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName)>($r14) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName EARLY_CHANGE>
org.apache.pdfbox.filter.LZWFilter.decode : $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName EARLY_CHANGE> >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : i6 = virtualinvoke r4.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r15, 1)
org.apache.pdfbox.filter.LZWFilter.decode : i6 = virtualinvoke r4.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r15, 1) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : if i6 == 0
org.apache.pdfbox.filter.LZWFilter.decode : if i6 == 0 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : if i6 == 1
org.apache.pdfbox.filter.LZWFilter.decode : if i6 == 0 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : if i5 <= 1
org.apache.pdfbox.filter.LZWFilter.decode : if i6 == 1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : i6 = 1
org.apache.pdfbox.filter.LZWFilter.decode : if i6 == 1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : if i5 <= 1
org.apache.pdfbox.filter.LZWFilter.decode : i6 = 1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.decode : if i5 <= 1
