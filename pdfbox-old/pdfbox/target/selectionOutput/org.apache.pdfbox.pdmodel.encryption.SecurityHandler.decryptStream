org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSName getCOSName(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSName getCOSName(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $z0 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: boolean decryptMetadata>
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $z0 = r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: boolean decryptMetadata> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : if $z0 != 0
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName METADATA>
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF>
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $z1 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r2)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $z1 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : if $z1 == 0
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : return
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName METADATA>
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName METADATA> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $z2 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r2)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $z2 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : if $z2 == 0
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : r17 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: java.io.InputStream createRawInputStream()>()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void decryptDictionary(org.apache.pdfbox.cos.COSDictionary,long,long)>(r1, l0, l1)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void decryptDictionary(org.apache.pdfbox.cos.COSDictionary,long,long)>(r1, l0, l1) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r8 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: java.io.InputStream createRawInputStream()>()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r8 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: java.io.InputStream createRawInputStream()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : r19 = staticinvoke <org.apache.pdfbox.io.IOUtils: byte[] toByteArray(java.io.InputStream)>($r8)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : r19 = staticinvoke <org.apache.pdfbox.io.IOUtils: byte[] toByteArray(java.io.InputStream)>($r8) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r9 = new java.io.ByteArrayInputStream
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r9 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>(r19)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>(r19) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : r3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createRawOutputStream()>()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : r3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createRawOutputStream()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void encryptData(long,long,java.io.InputStream,java.io.OutputStream,boolean)>(l0, l1, $r9, r3, 1)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : r3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createRawOutputStream()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : virtualinvoke r3.<java.io.OutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : throw $r16
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void encryptData(long,long,java.io.InputStream,java.io.OutputStream,boolean)>(l0, l1, $r9, r3, 1) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : virtualinvoke r3.<java.io.OutputStream: void close()>()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void encryptData(long,long,java.io.InputStream,java.io.OutputStream,boolean)>(l0, l1, $r9, r3, 1) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r16 := @caughtexception
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : virtualinvoke r3.<java.io.OutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : goto [?= return]
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : goto [?= return] >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : return
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : r17 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: java.io.InputStream createRawInputStream()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : r18 = newarray (byte)[10]
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : r18 = newarray (byte)[10] >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : virtualinvoke r17.<java.io.InputStream: int read(byte[])>(r18)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : virtualinvoke r17.<java.io.InputStream: int read(byte[])>(r18) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : virtualinvoke r17.<java.io.InputStream: void close()>()
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : virtualinvoke r17.<java.io.InputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r11 = "<?xpacket "
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r11 = "<?xpacket " >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r10 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r10 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r12 = virtualinvoke $r11.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r10)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r12 = virtualinvoke $r11.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r10) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r18, $r12)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $z3 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r18, $r12) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : if $z3 == 0
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r13 = <org.apache.pdfbox.pdmodel.encryption.SecurityHandler: org.apache.commons.logging.Log LOG>
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.SecurityHandler: void decryptDictionary(org.apache.pdfbox.cos.COSDictionary,long,long)>(r1, l0, l1)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r13 = <org.apache.pdfbox.pdmodel.encryption.SecurityHandler: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : interfaceinvoke $r13.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Metadata is not encrypted, but was expected to be")
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : interfaceinvoke $r13.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Metadata is not encrypted, but was expected to be") >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r14 = <org.apache.pdfbox.pdmodel.encryption.SecurityHandler: org.apache.commons.logging.Log LOG>
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r14 = <org.apache.pdfbox.pdmodel.encryption.SecurityHandler: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : interfaceinvoke $r14.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Read PDF specification about EncryptMetadata (default value: true)")
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : interfaceinvoke $r14.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Read PDF specification about EncryptMetadata (default value: true)") >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : return
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName METADATA> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $z4 = virtualinvoke $r15.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r2)
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $z4 = virtualinvoke $r15.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : if $z4 == 0
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : return
org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.SecurityHandler.decryptStream : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF>
