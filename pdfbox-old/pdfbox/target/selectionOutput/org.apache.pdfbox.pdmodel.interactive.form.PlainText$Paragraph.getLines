org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : r2 = staticinvoke <java.text.BreakIterator: java.text.BreakIterator getLineInstance()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r6 = r0.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph: java.lang.String textContent>
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r6 = r0.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph: java.lang.String textContent> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : virtualinvoke r2.<java.text.BreakIterator: void setText(java.lang.String)>($r6)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : virtualinvoke r2.<java.text.BreakIterator: void setText(java.lang.String)>($r6) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : f2 = f0 / 1000.0F
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : f2 = f0 / 1000.0F >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : i6 = virtualinvoke r2.<java.text.BreakIterator: int first()>()
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : i6 = virtualinvoke r2.<java.text.BreakIterator: int first()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : i7 = virtualinvoke r2.<java.text.BreakIterator: int next()>()
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : i7 = virtualinvoke r2.<java.text.BreakIterator: int next()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : f9 = 0.0F
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : f9 = 0.0F >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r7 = new java.util.ArrayList
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r7 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : specialinvoke $r7.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : specialinvoke $r7.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r8 = new org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r8 = new org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : specialinvoke $r8.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line: void <init>()>()
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : specialinvoke $r8.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : r16 = $r8
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : r16 = $r8 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : if i7 == -1
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : if i7 == -1 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r9 = r0.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph: java.lang.String textContent>
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : if i7 == -1 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $f4 = virtualinvoke r16.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line: float calculateWidth(org.apache.pdfbox.pdmodel.font.PDFont,float)>(r1, f0)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $f4 = virtualinvoke r16.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line: float calculateWidth(org.apache.pdfbox.pdmodel.font.PDFont,float)>(r1, f0) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : virtualinvoke r16.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line: void setWidth(float)>($f4)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : virtualinvoke r16.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line: void setWidth(float)>($f4) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r16)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r16) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : return $r7
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r9 = r0.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph: java.lang.String textContent> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : r4 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>(i6, i7)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : r4 = virtualinvoke $r9.<java.lang.String: java.lang.String substring(int,int)>(i6, i7) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $f5 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.font.PDFont: float getStringWidth(java.lang.String)>(r4)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $f5 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.font.PDFont: float getStringWidth(java.lang.String)>(r4) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : f3 = $f5 * f2
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : f3 = $f5 * f2 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : f9 = f9 + f3
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : f9 = f9 + f3 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $b0 = f9 cmpl f1
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $b0 = f9 cmpl f1 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : if $b0 < 0
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : if $b0 < 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $i1 = virtualinvoke r4.<java.lang.String: int length()>()
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : if $b0 < 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $b8 = f9 cmpl f1
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $b8 = f9 cmpl f1 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : if $b8 < 0
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : if $b8 < 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $f6 = virtualinvoke r16.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line: float calculateWidth(org.apache.pdfbox.pdmodel.font.PDFont,float)>(r1, f0)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : if $b8 < 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r10 = new java.text.AttributedString
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r10 = new java.text.AttributedString >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : specialinvoke $r10.<java.text.AttributedString: void <init>(java.lang.String)>(r4)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : specialinvoke $r10.<java.text.AttributedString: void <init>(java.lang.String)>(r4) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r11 = <org.apache.pdfbox.pdmodel.interactive.form.PlainText$TextAttribute: java.text.AttributedCharacterIterator$Attribute WIDTH>
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r11 = <org.apache.pdfbox.pdmodel.interactive.form.PlainText$TextAttribute: java.text.AttributedCharacterIterator$Attribute WIDTH> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r12 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f3)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r12 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f3) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : virtualinvoke $r10.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>($r11, $r12)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : virtualinvoke $r10.<java.text.AttributedString: void addAttribute(java.text.AttributedCharacterIterator$Attribute,java.lang.Object)>($r11, $r12) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r13 = new org.apache.pdfbox.pdmodel.interactive.form.PlainText$Word
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r13 = new org.apache.pdfbox.pdmodel.interactive.form.PlainText$Word >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : specialinvoke $r13.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Word: void <init>(java.lang.String)>(r4)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : specialinvoke $r13.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Word: void <init>(java.lang.String)>(r4) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : virtualinvoke $r13.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Word: void setAttributes(java.text.AttributedString)>($r10)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : virtualinvoke $r13.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Word: void setAttributes(java.text.AttributedString)>($r10) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : virtualinvoke r16.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line: void addWord(org.apache.pdfbox.pdmodel.interactive.form.PlainText$Word)>($r13)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : virtualinvoke r16.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line: void addWord(org.apache.pdfbox.pdmodel.interactive.form.PlainText$Word)>($r13) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : i6 = i7
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : i6 = i7 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : i7 = virtualinvoke r2.<java.text.BreakIterator: int next()>()
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : i7 = virtualinvoke r2.<java.text.BreakIterator: int next()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : goto [?= (branch)]
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : if i7 == -1
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $f6 = virtualinvoke r16.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line: float calculateWidth(org.apache.pdfbox.pdmodel.font.PDFont,float)>(r1, f0) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : virtualinvoke r16.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line: void setWidth(float)>($f6)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : virtualinvoke r16.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line: void setWidth(float)>($f6) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r16)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r16) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r14 = new org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r14 = new org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : specialinvoke $r14.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line: void <init>()>()
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : specialinvoke $r14.<org.apache.pdfbox.pdmodel.interactive.form.PlainText$Line: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : r16 = $r14
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : r16 = $r14 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $f7 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.font.PDFont: float getStringWidth(java.lang.String)>(r4)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $f7 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.font.PDFont: float getStringWidth(java.lang.String)>(r4) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : f9 = $f7 * f2
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : f9 = $f7 * f2 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r10 = new java.text.AttributedString
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $i1 = virtualinvoke r4.<java.lang.String: int length()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $i2 = $i1 - 1
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $i2 = $i1 - 1 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $c3 = virtualinvoke r4.<java.lang.String: char charAt(int)>($i2)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $c3 = virtualinvoke r4.<java.lang.String: char charAt(int)>($i2) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $z2 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $z2 = staticinvoke <java.lang.Character: boolean isWhitespace(char)>($c3) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : if $z2 == 0
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $i4 = virtualinvoke r4.<java.lang.String: int length()>()
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $b8 = f9 cmpl f1
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $i4 = virtualinvoke r4.<java.lang.String: int length()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $i5 = $i4 - 1
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $i5 = $i4 - 1 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r15 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i5)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $r15 = virtualinvoke r4.<java.lang.String: java.lang.String substring(int)>($i5) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $f8 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.font.PDFont: float getStringWidth(java.lang.String)>($r15)
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $f8 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.font.PDFont: float getStringWidth(java.lang.String)>($r15) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : f10 = $f8 * f2
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : f10 = $f8 * f2 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : f9 = f9 - f10
org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : f9 = f9 - f10 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.form.PlainText$Paragraph.getLines : $b8 = f9 cmpl f1
