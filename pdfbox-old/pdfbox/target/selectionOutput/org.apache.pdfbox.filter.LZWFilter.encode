org.apache.pdfbox.filter.LZWFilter.encode : r8 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: java.util.List createCodeTable()>() >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : r9 = null
org.apache.pdfbox.filter.LZWFilter.encode : r9 = null >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $r5 = new javax.imageio.stream.MemoryCacheImageOutputStream
org.apache.pdfbox.filter.LZWFilter.encode : $r5 = new javax.imageio.stream.MemoryCacheImageOutputStream >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : specialinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void <init>(java.io.OutputStream)>(r2)
org.apache.pdfbox.filter.LZWFilter.encode : specialinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void <init>(java.io.OutputStream)>(r2) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : virtualinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>(256L, 9)
org.apache.pdfbox.filter.LZWFilter.encode : virtualinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>(256L, 9) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : i17 = -1
org.apache.pdfbox.filter.LZWFilter.encode : i17 = -1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $i3 = virtualinvoke r1.<java.io.InputStream: int read()>()
org.apache.pdfbox.filter.LZWFilter.encode : $i3 = virtualinvoke r1.<java.io.InputStream: int read()>() >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : if $i3 == -1
org.apache.pdfbox.filter.LZWFilter.encode : if $i3 == -1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : b1 = (byte) $i3
org.apache.pdfbox.filter.LZWFilter.encode : if $i3 == -1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : if i17 == -1
org.apache.pdfbox.filter.LZWFilter.encode : if i17 == -1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $i5 = interfaceinvoke r8.<java.util.List: int size()>()
org.apache.pdfbox.filter.LZWFilter.encode : if i17 == -1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $i4 = interfaceinvoke r8.<java.util.List: int size()>()
org.apache.pdfbox.filter.LZWFilter.encode : $i4 = interfaceinvoke r8.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : i20 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: int calculateChunk(int,int)>($i4, 1)
org.apache.pdfbox.filter.LZWFilter.encode : i20 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: int calculateChunk(int,int)>($i4, 1) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : virtualinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>(257L, i20)
org.apache.pdfbox.filter.LZWFilter.encode : virtualinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>(257L, i20) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : virtualinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>(0L, 7)
org.apache.pdfbox.filter.LZWFilter.encode : virtualinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>(0L, 7) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : virtualinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void flush()>()
org.apache.pdfbox.filter.LZWFilter.encode : virtualinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void flush()>() >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : virtualinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>()
org.apache.pdfbox.filter.LZWFilter.encode : virtualinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : return
org.apache.pdfbox.filter.LZWFilter.encode : $i5 = interfaceinvoke r8.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $i6 = $i5 - 1
org.apache.pdfbox.filter.LZWFilter.encode : $i6 = $i5 - 1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : i19 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: int calculateChunk(int,int)>($i6, 1)
org.apache.pdfbox.filter.LZWFilter.encode : i19 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: int calculateChunk(int,int)>($i6, 1) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $l7 = (long) i17
org.apache.pdfbox.filter.LZWFilter.encode : $l7 = (long) i17 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : virtualinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>($l7, i19)
org.apache.pdfbox.filter.LZWFilter.encode : virtualinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>($l7, i19) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $i4 = interfaceinvoke r8.<java.util.List: int size()>()
org.apache.pdfbox.filter.LZWFilter.encode : b1 = (byte) $i3 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : if r9 != null
org.apache.pdfbox.filter.LZWFilter.encode : if r9 != null >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $r7 = newarray (byte)[1]
org.apache.pdfbox.filter.LZWFilter.encode : if r9 != null >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $i8 = lengthof r9
org.apache.pdfbox.filter.LZWFilter.encode : $i8 = lengthof r9 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $i9 = $i8 + 1
org.apache.pdfbox.filter.LZWFilter.encode : $i9 = $i8 + 1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : r9 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r9, $i9)
org.apache.pdfbox.filter.LZWFilter.encode : r9 = staticinvoke <java.util.Arrays: byte[] copyOf(byte[],int)>(r9, $i9) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $i10 = lengthof r9
org.apache.pdfbox.filter.LZWFilter.encode : $i10 = lengthof r9 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $i11 = $i10 - 1
org.apache.pdfbox.filter.LZWFilter.encode : $i11 = $i10 - 1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : r9[$i11] = b1
org.apache.pdfbox.filter.LZWFilter.encode : r9[$i11] = b1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : i2 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: int findPatternCode(java.util.List,byte[])>(r8, r9)
org.apache.pdfbox.filter.LZWFilter.encode : i2 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: int findPatternCode(java.util.List,byte[])>(r8, r9) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : if i2 != -1
org.apache.pdfbox.filter.LZWFilter.encode : if i2 != -1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $i12 = interfaceinvoke r8.<java.util.List: int size()>()
org.apache.pdfbox.filter.LZWFilter.encode : if i2 != -1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : i17 = i2
org.apache.pdfbox.filter.LZWFilter.encode : i17 = i2 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : goto [?= $i3 = virtualinvoke r1.<java.io.InputStream: int read()>()]
org.apache.pdfbox.filter.LZWFilter.encode : goto [?= $i3 = virtualinvoke r1.<java.io.InputStream: int read()>()] >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $i3 = virtualinvoke r1.<java.io.InputStream: int read()>()
org.apache.pdfbox.filter.LZWFilter.encode : $i12 = interfaceinvoke r8.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $i13 = $i12 - 1
org.apache.pdfbox.filter.LZWFilter.encode : $i13 = $i12 - 1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : i18 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: int calculateChunk(int,int)>($i13, 1)
org.apache.pdfbox.filter.LZWFilter.encode : i18 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: int calculateChunk(int,int)>($i13, 1) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $l14 = (long) i17
org.apache.pdfbox.filter.LZWFilter.encode : $l14 = (long) i17 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : virtualinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>($l14, i18)
org.apache.pdfbox.filter.LZWFilter.encode : virtualinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>($l14, i18) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>(r9)
org.apache.pdfbox.filter.LZWFilter.encode : interfaceinvoke r8.<java.util.List: boolean add(java.lang.Object)>(r9) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $i15 = interfaceinvoke r8.<java.util.List: int size()>()
org.apache.pdfbox.filter.LZWFilter.encode : $i15 = interfaceinvoke r8.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : if $i15 != 4096
org.apache.pdfbox.filter.LZWFilter.encode : if $i15 != 4096 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : virtualinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>(256L, i18)
org.apache.pdfbox.filter.LZWFilter.encode : if $i15 != 4096 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $r6 = newarray (byte)[1]
org.apache.pdfbox.filter.LZWFilter.encode : $r6 = newarray (byte)[1] >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $r6[0] = b1
org.apache.pdfbox.filter.LZWFilter.encode : $r6[0] = b1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : r9 = $r6
org.apache.pdfbox.filter.LZWFilter.encode : r9 = $r6 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : i17 = b1 & 255
org.apache.pdfbox.filter.LZWFilter.encode : i17 = b1 & 255 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : goto [?= (branch)]
org.apache.pdfbox.filter.LZWFilter.encode : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : goto [?= $i3 = virtualinvoke r1.<java.io.InputStream: int read()>()]
org.apache.pdfbox.filter.LZWFilter.encode : virtualinvoke $r5.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBits(long,int)>(256L, i18) >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : r8 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: java.util.List createCodeTable()>()
org.apache.pdfbox.filter.LZWFilter.encode : r8 = specialinvoke r0.<org.apache.pdfbox.filter.LZWFilter: java.util.List createCodeTable()>() >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $r6 = newarray (byte)[1]
org.apache.pdfbox.filter.LZWFilter.encode : $r7 = newarray (byte)[1] >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : $r7[0] = b1
org.apache.pdfbox.filter.LZWFilter.encode : $r7[0] = b1 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : r9 = $r7
org.apache.pdfbox.filter.LZWFilter.encode : r9 = $r7 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : i17 = b1 & 255
org.apache.pdfbox.filter.LZWFilter.encode : i17 = b1 & 255 >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : goto [?= (branch)]
org.apache.pdfbox.filter.LZWFilter.encode : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.filter.LZWFilter.encode : goto [?= $i3 = virtualinvoke r1.<java.io.InputStream: int read()>()]
