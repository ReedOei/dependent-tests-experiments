org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : f1 = 0.0F >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : i3 = 0
org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : i3 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : $i1 = virtualinvoke r1.<java.lang.String: int length()>()
org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : $i1 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : if i3 >= $i1
org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : if i3 >= $i1 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : i0 = virtualinvoke r1.<java.lang.String: int codePointAt(int)>(i3)
org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : if i3 >= $i1 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : return f1
org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : i0 = virtualinvoke r1.<java.lang.String: int codePointAt(int)>(i3) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.pdfbox.pdmodel.font.encoding.GlyphList getGlyphList()>()
org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.pdfbox.pdmodel.font.encoding.GlyphList getGlyphList()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : r2 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.font.encoding.GlyphList: java.lang.String codePointToName(int)>(i0)
org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : r2 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.font.encoding.GlyphList: java.lang.String codePointToName(int)>(i0) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFType1Font cffFont>
org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : $r4 = r0.<org.apache.pdfbox.pdmodel.font.PDType1CFont: org.apache.fontbox.cff.CFFType1Font cffFont> >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : $r5 = virtualinvoke $r4.<org.apache.fontbox.cff.CFFType1Font: org.apache.fontbox.cff.Type1CharString getType1CharString(java.lang.String)>(r2)
org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : $r5 = virtualinvoke $r4.<org.apache.fontbox.cff.CFFType1Font: org.apache.fontbox.cff.Type1CharString getType1CharString(java.lang.String)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : $i2 = virtualinvoke $r5.<org.apache.fontbox.cff.Type1CharString: int getWidth()>()
org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : $i2 = virtualinvoke $r5.<org.apache.fontbox.cff.Type1CharString: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : $f0 = (float) $i2
org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : $f0 = (float) $i2 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : f1 = f1 + $f0
org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : f1 = f1 + $f0 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : i3 = i3 + 1
org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : i3 = i3 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : goto [?= $i1 = virtualinvoke r1.<java.lang.String: int length()>()]
org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : goto [?= $i1 = virtualinvoke r1.<java.lang.String: int length()>()] >>>>>>>> org.apache.pdfbox.pdmodel.font.PDType1CFont.getStringWidth : $i1 = virtualinvoke r1.<java.lang.String: int length()>()
