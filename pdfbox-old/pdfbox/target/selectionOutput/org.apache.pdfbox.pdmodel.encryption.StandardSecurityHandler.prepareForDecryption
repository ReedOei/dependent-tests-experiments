org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $z1 = r3 instanceof org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $z1 != 0
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r19 = new java.io.IOException
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $z2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: boolean isEncryptMetaData()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $z2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: boolean isEncryptMetaData()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void setDecryptMetadata(boolean)>($z2)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void setDecryptMetadata(boolean)>($z2) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r4 = (org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial) r3
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r4 = (org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial) r3 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r20 = virtualinvoke r4.<org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial: java.lang.String getPassword()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r20 = virtualinvoke r4.<org.apache.pdfbox.pdmodel.encryption.StandardDecryptionMaterial: java.lang.String getPassword()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if r20 != null
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if r20 != null >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r20 = ""
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if r20 != null >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : i0 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: int getPermissions()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : i0 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: int getPermissions()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : i1 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: int getRevision()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : i1 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: int getRevision()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $i3 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: int getVersion()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $i3 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: int getVersion()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $i3 != 1
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $i3 != 1 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $i6 = 5
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $i3 != 1 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $i4 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: int getLength()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $i4 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: int getLength()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $i6 = $i4 / 8
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $i6 = $i4 / 8 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : i2 = $i6
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : i2 = $i6 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r5 = specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] getDocumentIDBytes(org.apache.pdfbox.cos.COSArray)>(r2)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r5 = specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] getDocumentIDBytes(org.apache.pdfbox.cos.COSArray)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : z0 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: boolean isEncryptMetaData()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : z0 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: boolean isEncryptMetaData()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r6 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: byte[] getUserKey()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r6 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: byte[] getUserKey()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r7 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: byte[] getOwnerKey()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r7 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: byte[] getOwnerKey()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r21 = null
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r21 = null >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r22 = null
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r22 = null >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r23 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r23 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 == 6
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 == 6 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 != 5
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 == 6 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r23 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset UTF_8>
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r23 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r21 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: byte[] getUserEncryptionKey()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r21 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: byte[] getUserEncryptionKey()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r22 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: byte[] getOwnerEncryptionKey()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r22 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: byte[] getOwnerEncryptionKey()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r24 = virtualinvoke r20.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(r23)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r24 = virtualinvoke r20.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(r23) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $z6 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: boolean isOwnerPassword(byte[],byte[],byte[],int,byte[],int,int,boolean)>($r24, r6, r7, i0, r5, i1, i2, z0)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $z6 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: boolean isOwnerPassword(byte[],byte[],byte[],int,byte[],int,int,boolean)>($r24, r6, r7, i0, r5, i1, i2, z0) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $z6 == 0
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $z6 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r25 = staticinvoke <org.apache.pdfbox.pdmodel.encryption.AccessPermission: org.apache.pdfbox.pdmodel.encryption.AccessPermission getOwnerAccessPermission()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $z6 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r9 = virtualinvoke r20.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(r23)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r9 = virtualinvoke r20.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(r23) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $z3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: boolean isUserPassword(byte[],byte[],byte[],int,byte[],int,int,boolean)>($r9, r6, r7, i0, r5, i1, i2, z0)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $z3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: boolean isUserPassword(byte[],byte[],byte[],int,byte[],int,int,boolean)>($r9, r6, r7, i0, r5, i1, i2, z0) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $z3 == 0
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r11 = new org.apache.pdfbox.pdmodel.encryption.AccessPermission
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r10 = new org.apache.pdfbox.pdmodel.encryption.InvalidPasswordException
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r10 = new org.apache.pdfbox.pdmodel.encryption.InvalidPasswordException >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : specialinvoke $r10.<org.apache.pdfbox.pdmodel.encryption.InvalidPasswordException: void <init>(java.lang.String)>("Cannot decrypt PDF, the password is incorrect")
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : specialinvoke $r10.<org.apache.pdfbox.pdmodel.encryption.InvalidPasswordException: void <init>(java.lang.String)>("Cannot decrypt PDF, the password is incorrect") >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : throw $r10
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r11 = new org.apache.pdfbox.pdmodel.encryption.AccessPermission >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : specialinvoke $r11.<org.apache.pdfbox.pdmodel.encryption.AccessPermission: void <init>(int)>(i0)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : specialinvoke $r11.<org.apache.pdfbox.pdmodel.encryption.AccessPermission: void <init>(int)>(i0) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : virtualinvoke $r11.<org.apache.pdfbox.pdmodel.encryption.AccessPermission: void setReadOnly()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : virtualinvoke $r11.<org.apache.pdfbox.pdmodel.encryption.AccessPermission: void setReadOnly()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void setCurrentAccessPermission(org.apache.pdfbox.pdmodel.encryption.AccessPermission)>($r11)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void setCurrentAccessPermission(org.apache.pdfbox.pdmodel.encryption.AccessPermission)>($r11) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r12 = virtualinvoke r20.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(r23)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r12 = virtualinvoke r20.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(r23) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r13 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] computeEncryptedKey(byte[],byte[],byte[],byte[],byte[],int,byte[],int,int,boolean,boolean)>($r12, r7, r6, r22, r21, i0, r5, i1, i2, z0, 0)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r13 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] computeEncryptedKey(byte[],byte[],byte[],byte[],byte[],int,byte[],int,int,boolean,boolean)>($r12, r7, r6, r22, r21, i0, r5, i1, i2, z0, 0) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] encryptionKey> = $r13
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] encryptionKey> = $r13 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : goto [?= (branch)]
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 == 6
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 == 6 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 != 5
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 == 6 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void validatePerms(org.apache.pdfbox.pdmodel.encryption.PDEncryption,int,boolean)>(r1, i0, z0)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void validatePerms(org.apache.pdfbox.pdmodel.encryption.PDEncryption,int,boolean)>(r1, i0, z0) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $i7 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: int getVersion()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $i7 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: int getVersion()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $i7 == 4
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $i7 == 4 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $i5 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: int getVersion()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $i7 == 4 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r28 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary getStdCryptFilterDictionary()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r28 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary getStdCryptFilterDictionary()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if r28 == null
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if r28 == null >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r8 = virtualinvoke r28.<org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary: org.apache.pdfbox.cos.COSName getCryptFilterMethod()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if r28 == null >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : return
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r8 = virtualinvoke r28.<org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary: org.apache.pdfbox.cos.COSName getCryptFilterMethod()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r14 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName AESV2>
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r14 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName AESV2> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $z4 = virtualinvoke $r14.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r8)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $z4 = virtualinvoke $r14.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r8) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $z4 != 0
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $z4 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName AESV3>
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $z4 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $z7 = 1
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $z7 = 1 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : goto [?= virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void setAES(boolean)>($z7)]
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : goto [?= virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void setAES(boolean)>($z7)] >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void setAES(boolean)>($z7)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void setAES(boolean)>($z7) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : return
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName AESV3> >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $z5 = virtualinvoke $r15.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r8)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $z5 = virtualinvoke $r15.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r8) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $z5 == 0
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $z5 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $z7 = 1
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $z5 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $z7 = 0
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $z7 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void setAES(boolean)>($z7)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $i5 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: int getVersion()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $i5 != 5
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $i5 != 5 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r28 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: org.apache.pdfbox.pdmodel.encryption.PDCryptFilterDictionary getStdCryptFilterDictionary()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if $i5 != 5 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : return
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 != 5 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : specialinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void validatePerms(org.apache.pdfbox.pdmodel.encryption.PDEncryption,int,boolean)>(r1, i0, z0)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 != 5 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $i7 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: int getVersion()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r25 = staticinvoke <org.apache.pdfbox.pdmodel.encryption.AccessPermission: org.apache.pdfbox.pdmodel.encryption.AccessPermission getOwnerAccessPermission()>() >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void setCurrentAccessPermission(org.apache.pdfbox.pdmodel.encryption.AccessPermission)>(r25)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: void setCurrentAccessPermission(org.apache.pdfbox.pdmodel.encryption.AccessPermission)>(r25) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 == 6
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 == 6 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 != 5
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 == 6 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r26 = virtualinvoke r20.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(r23)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r26 = virtualinvoke r20.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(r23) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : goto [?= $r17 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] computeEncryptedKey(byte[],byte[],byte[],byte[],byte[],int,byte[],int,int,boolean,boolean)>(r26, r7, r6, r22, r21, i0, r5, i1, i2, z0, 1)]
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : goto [?= $r17 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] computeEncryptedKey(byte[],byte[],byte[],byte[],byte[],int,byte[],int,int,boolean,boolean)>(r26, r7, r6, r22, r21, i0, r5, i1, i2, z0, 1)] >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r17 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] computeEncryptedKey(byte[],byte[],byte[],byte[],byte[],int,byte[],int,int,boolean,boolean)>(r26, r7, r6, r22, r21, i0, r5, i1, i2, z0, 1)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r17 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] computeEncryptedKey(byte[],byte[],byte[],byte[],byte[],int,byte[],int,int,boolean,boolean)>(r26, r7, r6, r22, r21, i0, r5, i1, i2, z0, 1) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] encryptionKey> = $r17
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] encryptionKey> = $r17 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : goto [?= (branch)]
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 == 6
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 != 5 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r26 = virtualinvoke r20.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(r23)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 != 5 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r18 = virtualinvoke r20.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(r23)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r18 = virtualinvoke r20.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(r23) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r26 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] getUserPassword(byte[],byte[],int,int)>($r18, r7, i1, i2)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r26 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] getUserPassword(byte[],byte[],int,int)>($r18, r7, i1, i2) >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r17 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler: byte[] computeEncryptedKey(byte[],byte[],byte[],byte[],byte[],int,byte[],int,int,boolean,boolean)>(r26, r7, r6, r22, r21, i0, r5, i1, i2, z0, 1)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 != 5 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r23 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset UTF_8>
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : if i1 != 5 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r24 = virtualinvoke r20.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>(r23)
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $i6 = 5 >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : goto [?= i2 = $i6]
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : goto [?= i2 = $i6] >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : i2 = $i6
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : r20 = "" >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : i0 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.encryption.PDEncryption: int getPermissions()>()
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : $r19 = new java.io.IOException >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>("Decryption material is not compatible with the document")
org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : specialinvoke $r19.<java.io.IOException: void <init>(java.lang.String)>("Decryption material is not compatible with the document") >>>>>>>> org.apache.pdfbox.pdmodel.encryption.StandardSecurityHandler.prepareForDecryption : throw $r19
