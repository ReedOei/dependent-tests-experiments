org.apache.pdfbox.filter.ASCIIHexFilter.decode : $i2 = virtualinvoke r1.<java.io.InputStream: int read()>() >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : i9 = $i2
org.apache.pdfbox.filter.ASCIIHexFilter.decode : i9 = $i2 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $i2 == -1
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $i2 == -1 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $z0 = specialinvoke r0.<org.apache.pdfbox.filter.ASCIIHexFilter: boolean isWhitespace(int)>(i9)
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $i2 == -1 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : virtualinvoke r2.<java.io.OutputStream: void flush()>()
org.apache.pdfbox.filter.ASCIIHexFilter.decode : virtualinvoke r2.<java.io.OutputStream: void flush()>() >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r22 = new org.apache.pdfbox.filter.DecodeResult
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r22 = new org.apache.pdfbox.filter.DecodeResult >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : specialinvoke $r22.<org.apache.pdfbox.filter.DecodeResult: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r3)
org.apache.pdfbox.filter.ASCIIHexFilter.decode : specialinvoke $r22.<org.apache.pdfbox.filter.DecodeResult: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r3) >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : return $r22
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $z0 = specialinvoke r0.<org.apache.pdfbox.filter.ASCIIHexFilter: boolean isWhitespace(int)>(i9) >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $z0 == 0
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $z0 == 0 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : i9 = virtualinvoke r1.<java.io.InputStream: int read()>()
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $z0 == 0 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : if i9 == -1
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if i9 == -1 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $z1 = specialinvoke r0.<org.apache.pdfbox.filter.ASCIIHexFilter: boolean isEOD(int)>(i9)
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if i9 == -1 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : virtualinvoke r2.<java.io.OutputStream: void flush()>()
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $z1 = specialinvoke r0.<org.apache.pdfbox.filter.ASCIIHexFilter: boolean isEOD(int)>(i9) >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $z1 == 0
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $z1 == 0 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : goto [?= virtualinvoke r2.<java.io.OutputStream: void flush()>()]
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $z1 == 0 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r4 = <org.apache.pdfbox.filter.ASCIIHexFilter: int[] REVERSE_HEX>
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r4 = <org.apache.pdfbox.filter.ASCIIHexFilter: int[] REVERSE_HEX> >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $i3 = $r4[i9]
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $i3 = $r4[i9] >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $i3 != -1
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $i3 != -1 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r16 = <org.apache.pdfbox.filter.ASCIIHexFilter: org.apache.commons.logging.Log LOG>
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $i3 != -1 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r5 = <org.apache.pdfbox.filter.ASCIIHexFilter: int[] REVERSE_HEX>
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r5 = <org.apache.pdfbox.filter.ASCIIHexFilter: int[] REVERSE_HEX> >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $i4 = $r5[i9]
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $i4 = $r5[i9] >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : i10 = $i4 * 16
org.apache.pdfbox.filter.ASCIIHexFilter.decode : i10 = $i4 * 16 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : i1 = virtualinvoke r1.<java.io.InputStream: int read()>()
org.apache.pdfbox.filter.ASCIIHexFilter.decode : i1 = virtualinvoke r1.<java.io.InputStream: int read()>() >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : if i1 == -1
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if i1 == -1 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $z2 = specialinvoke r0.<org.apache.pdfbox.filter.ASCIIHexFilter: boolean isEOD(int)>(i1)
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if i1 == -1 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : virtualinvoke r2.<java.io.OutputStream: void write(int)>(i10)
org.apache.pdfbox.filter.ASCIIHexFilter.decode : virtualinvoke r2.<java.io.OutputStream: void write(int)>(i10) >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : goto [?= virtualinvoke r2.<java.io.OutputStream: void flush()>()]
org.apache.pdfbox.filter.ASCIIHexFilter.decode : goto [?= virtualinvoke r2.<java.io.OutputStream: void flush()>()] >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : virtualinvoke r2.<java.io.OutputStream: void flush()>()
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $z2 = specialinvoke r0.<org.apache.pdfbox.filter.ASCIIHexFilter: boolean isEOD(int)>(i1) >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $z2 == 0
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $z2 == 0 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : virtualinvoke r2.<java.io.OutputStream: void write(int)>(i10)
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $z2 == 0 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : if i1 < 0
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if i1 < 0 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r6 = <org.apache.pdfbox.filter.ASCIIHexFilter: int[] REVERSE_HEX>
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if i1 < 0 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : virtualinvoke r2.<java.io.OutputStream: void write(int)>(i10)
org.apache.pdfbox.filter.ASCIIHexFilter.decode : virtualinvoke r2.<java.io.OutputStream: void write(int)>(i10) >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : goto [?= $i2 = virtualinvoke r1.<java.io.InputStream: int read()>()]
org.apache.pdfbox.filter.ASCIIHexFilter.decode : goto [?= $i2 = virtualinvoke r1.<java.io.InputStream: int read()>()] >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $i2 = virtualinvoke r1.<java.io.InputStream: int read()>()
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r6 = <org.apache.pdfbox.filter.ASCIIHexFilter: int[] REVERSE_HEX> >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $i5 = $r6[i1]
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $i5 = $r6[i1] >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $i5 != -1
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $i5 != -1 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r9 = <org.apache.pdfbox.filter.ASCIIHexFilter: org.apache.commons.logging.Log LOG>
org.apache.pdfbox.filter.ASCIIHexFilter.decode : if $i5 != -1 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r7 = <org.apache.pdfbox.filter.ASCIIHexFilter: int[] REVERSE_HEX>
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r7 = <org.apache.pdfbox.filter.ASCIIHexFilter: int[] REVERSE_HEX> >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $i6 = $r7[i1]
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $i6 = $r7[i1] >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : i10 = i10 + $i6
org.apache.pdfbox.filter.ASCIIHexFilter.decode : i10 = i10 + $i6 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : virtualinvoke r2.<java.io.OutputStream: void write(int)>(i10)
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r9 = <org.apache.pdfbox.filter.ASCIIHexFilter: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r8 = new java.lang.StringBuilder
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.filter.ASCIIHexFilter.decode : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid hex, int: ")
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid hex, int: ") >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1)
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i1) >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" char: ")
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" char: ") >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $c7 = (char) i1
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $c7 = (char) i1 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7)
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c7) >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : interfaceinvoke $r9.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r14)
org.apache.pdfbox.filter.ASCIIHexFilter.decode : interfaceinvoke $r9.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r14) >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r7 = <org.apache.pdfbox.filter.ASCIIHexFilter: int[] REVERSE_HEX>
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r16 = <org.apache.pdfbox.filter.ASCIIHexFilter: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r15 = new java.lang.StringBuilder
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r15 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.filter.ASCIIHexFilter.decode : specialinvoke $r15.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid hex, int: ")
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r17 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Invalid hex, int: ") >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9)
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i9) >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" char: ")
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" char: ") >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $c8 = (char) i9
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $c8 = (char) i9 >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8)
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c8) >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : interfaceinvoke $r16.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r21)
org.apache.pdfbox.filter.ASCIIHexFilter.decode : interfaceinvoke $r16.<org.apache.commons.logging.Log: void error(java.lang.Object)>($r21) >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $r5 = <org.apache.pdfbox.filter.ASCIIHexFilter: int[] REVERSE_HEX>
org.apache.pdfbox.filter.ASCIIHexFilter.decode : goto [?= virtualinvoke r2.<java.io.OutputStream: void flush()>()] >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : virtualinvoke r2.<java.io.OutputStream: void flush()>()
org.apache.pdfbox.filter.ASCIIHexFilter.decode : i9 = virtualinvoke r1.<java.io.InputStream: int read()>() >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : goto [?= $z0 = specialinvoke r0.<org.apache.pdfbox.filter.ASCIIHexFilter: boolean isWhitespace(int)>(i9)]
org.apache.pdfbox.filter.ASCIIHexFilter.decode : goto [?= $z0 = specialinvoke r0.<org.apache.pdfbox.filter.ASCIIHexFilter: boolean isWhitespace(int)>(i9)] >>>>>>>> org.apache.pdfbox.filter.ASCIIHexFilter.decode : $z0 = specialinvoke r0.<org.apache.pdfbox.filter.ASCIIHexFilter: boolean isWhitespace(int)>(i9)
