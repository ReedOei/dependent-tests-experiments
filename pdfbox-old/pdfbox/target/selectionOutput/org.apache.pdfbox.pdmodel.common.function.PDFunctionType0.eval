org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: org.apache.pdfbox.cos.COSArray getSize()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r2 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSArray: float[] toFloatArray()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r2 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSArray: float[] toFloatArray()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : i0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: int getBitsPerSample()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : i0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: int getBitsPerSample()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $d0 = (double) i0
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $d0 = (double) i0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d0)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $d1 = staticinvoke <java.lang.Math: double pow(double,double)>(2.0, $d0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $d2 = $d1 - 1.0
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $d2 = $d1 - 1.0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : f0 = (float) $d2
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : f0 = (float) $d2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : i1 = lengthof r1
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : i1 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : i2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: int getNumberOfOutputParameters()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : i2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: int getNumberOfOutputParameters()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r3 = newarray (int)[i1]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r3 = newarray (int)[i1] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r4 = newarray (int)[i1]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r4 = newarray (int)[i1] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : i5 = 0
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : i5 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : if i5 >= i1
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : if i5 >= i1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r8 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: org.apache.pdfbox.pdmodel.common.PDRange getDomainForInput(int)>(i5)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : if i5 >= i1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $r7 = new org.apache.pdfbox.pdmodel.common.function.PDFunctionType0$Rinterpol
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $r7 = new org.apache.pdfbox.pdmodel.common.function.PDFunctionType0$Rinterpol >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : specialinvoke $r7.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0$Rinterpol: void <init>(org.apache.pdfbox.pdmodel.common.function.PDFunctionType0,float[],int[],int[])>(r0, r1, r3, r4)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : specialinvoke $r7.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0$Rinterpol: void <init>(org.apache.pdfbox.pdmodel.common.function.PDFunctionType0,float[],int[],int[])>(r0, r1, r3, r4) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r10 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0$Rinterpol: float[] rinterpolate()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r10 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0$Rinterpol: float[] rinterpolate()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : i6 = 0
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : i6 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : if i6 >= i2
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : if i6 >= i2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r11 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: org.apache.pdfbox.pdmodel.common.PDRange getRangeForOutput(int)>(i6)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : if i6 >= i2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : return r10
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r11 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: org.apache.pdfbox.pdmodel.common.PDRange getRangeForOutput(int)>(i6) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r5 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: org.apache.pdfbox.pdmodel.common.PDRange getDecodeForParameter(int)>(i6)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r5 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: org.apache.pdfbox.pdmodel.common.PDRange getDecodeForParameter(int)>(i6) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f1 = r10[i6]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f1 = r10[i6] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f2 = virtualinvoke r5.<org.apache.pdfbox.pdmodel.common.PDRange: float getMin()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f2 = virtualinvoke r5.<org.apache.pdfbox.pdmodel.common.PDRange: float getMin()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f3 = virtualinvoke r5.<org.apache.pdfbox.pdmodel.common.PDRange: float getMax()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f3 = virtualinvoke r5.<org.apache.pdfbox.pdmodel.common.PDRange: float getMax()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: float interpolate(float,float,float,float,float)>($f1, 0.0F, f0, $f2, $f3)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: float interpolate(float,float,float,float,float)>($f1, 0.0F, f0, $f2, $f3) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r10[i6] = $f4
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r10[i6] = $f4 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f5 = r10[i6]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f5 = r10[i6] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f6 = virtualinvoke r11.<org.apache.pdfbox.pdmodel.common.PDRange: float getMin()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f6 = virtualinvoke r11.<org.apache.pdfbox.pdmodel.common.PDRange: float getMin()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f7 = virtualinvoke r11.<org.apache.pdfbox.pdmodel.common.PDRange: float getMax()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f7 = virtualinvoke r11.<org.apache.pdfbox.pdmodel.common.PDRange: float getMax()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f8 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: float clipToRange(float,float,float)>($f5, $f6, $f7)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f8 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: float clipToRange(float,float,float)>($f5, $f6, $f7) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r10[i6] = $f8
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r10[i6] = $f8 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : i6 = i6 + 1
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : i6 = i6 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : goto [?= (branch)]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : if i6 >= i2
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r8 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: org.apache.pdfbox.pdmodel.common.PDRange getDomainForInput(int)>(i5) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r9 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: org.apache.pdfbox.pdmodel.common.PDRange getEncodeForParameter(int)>(i5)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r9 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: org.apache.pdfbox.pdmodel.common.PDRange getEncodeForParameter(int)>(i5) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f9 = r1[i5]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f9 = r1[i5] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f10 = virtualinvoke r8.<org.apache.pdfbox.pdmodel.common.PDRange: float getMin()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f10 = virtualinvoke r8.<org.apache.pdfbox.pdmodel.common.PDRange: float getMin()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f11 = virtualinvoke r8.<org.apache.pdfbox.pdmodel.common.PDRange: float getMax()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f11 = virtualinvoke r8.<org.apache.pdfbox.pdmodel.common.PDRange: float getMax()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f12 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: float clipToRange(float,float,float)>($f9, $f10, $f11)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f12 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: float clipToRange(float,float,float)>($f9, $f10, $f11) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r1[i5] = $f12
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r1[i5] = $f12 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f13 = r1[i5]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f13 = r1[i5] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f14 = virtualinvoke r8.<org.apache.pdfbox.pdmodel.common.PDRange: float getMin()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f14 = virtualinvoke r8.<org.apache.pdfbox.pdmodel.common.PDRange: float getMin()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f15 = virtualinvoke r8.<org.apache.pdfbox.pdmodel.common.PDRange: float getMax()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f15 = virtualinvoke r8.<org.apache.pdfbox.pdmodel.common.PDRange: float getMax()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f16 = virtualinvoke r9.<org.apache.pdfbox.pdmodel.common.PDRange: float getMin()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f16 = virtualinvoke r9.<org.apache.pdfbox.pdmodel.common.PDRange: float getMin()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f17 = virtualinvoke r9.<org.apache.pdfbox.pdmodel.common.PDRange: float getMax()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f17 = virtualinvoke r9.<org.apache.pdfbox.pdmodel.common.PDRange: float getMax()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f18 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: float interpolate(float,float,float,float,float)>($f13, $f14, $f15, $f16, $f17)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f18 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: float interpolate(float,float,float,float,float)>($f13, $f14, $f15, $f16, $f17) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r1[i5] = $f18
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r1[i5] = $f18 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f21 = r1[i5]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f21 = r1[i5] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f19 = r2[i5]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f19 = r2[i5] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f20 = $f19 - 1.0F
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f20 = $f19 - 1.0F >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f22 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: float clipToRange(float,float,float)>($f21, 0.0F, $f20)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f22 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType0: float clipToRange(float,float,float)>($f21, 0.0F, $f20) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r1[i5] = $f22
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r1[i5] = $f22 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f23 = r1[i5]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f23 = r1[i5] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $d3 = (double) $f23
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $d3 = (double) $f23 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $d4 = staticinvoke <java.lang.Math: double floor(double)>($d3)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $d4 = staticinvoke <java.lang.Math: double floor(double)>($d3) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $i3 = (int) $d4
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $i3 = (int) $d4 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r3[i5] = $i3
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r3[i5] = $i3 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f24 = r1[i5]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $f24 = r1[i5] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $d5 = (double) $f24
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $d5 = (double) $f24 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $d6 = staticinvoke <java.lang.Math: double ceil(double)>($d5)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $d6 = staticinvoke <java.lang.Math: double ceil(double)>($d5) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $i4 = (int) $d6
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : $i4 = (int) $d6 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r4[i5] = $i4
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : r4[i5] = $i4 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : i5 = i5 + 1
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : i5 = i5 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : goto [?= (branch)]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType0.eval : if i5 >= i1
