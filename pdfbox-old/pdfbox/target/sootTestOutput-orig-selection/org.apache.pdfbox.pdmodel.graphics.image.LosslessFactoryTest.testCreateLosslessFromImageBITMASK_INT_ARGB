org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly(long)>(-1L) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 0, l0, l0)
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 0, l0, l0) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : return $r0
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : return $r0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useMainMemory>
org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useMainMemory> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes>
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $b1 = $l0 cmp 0L
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : if $b1 < 0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : if $b1 < 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $z0 = 0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxStorageBytes>
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxStorageBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $b1 = $l0 cmp 0L
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : if $b1 <= 0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : if $b1 <= 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $z0 = 0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : return $z0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.setTrailer : r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer> = r1
org.apache.pdfbox.cos.COSDocument.setTrailer : r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer> = r1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : if r2 != null
org.apache.pdfbox.cos.COSDictionary.setItem : if r2 != null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
org.apache.pdfbox.cos.COSDictionary.setItem : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if r1 == null
org.apache.pdfbox.util.SmallMap.put : if r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if r2 != null
org.apache.pdfbox.util.SmallMap.put : if r2 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if $r5 != null
org.apache.pdfbox.util.SmallMap.put : if $r5 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10 = newarray (java.lang.Object)[2]
org.apache.pdfbox.util.SmallMap.put : $r10 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10[0] = r1
org.apache.pdfbox.util.SmallMap.put : $r10[0] = r1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10[1] = r2
org.apache.pdfbox.util.SmallMap.put : $r10[1] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r10
org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r10 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : return null
org.apache.pdfbox.util.SmallMap.put : return null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = null
org.apache.pdfbox.cos.COSName.getPDFName : r6 = null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : if r0 == null
org.apache.pdfbox.cos.COSName.getPDFName : if r0 == null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r1 = <org.apache.pdfbox.cos.COSName: java.util.Map commonNameMap>
org.apache.pdfbox.cos.COSName.getPDFName : $r1 = <org.apache.pdfbox.cos.COSName: java.util.Map commonNameMap> >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.apache.pdfbox.cos.COSName.getPDFName : $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r2
org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r2 >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : if r6 != null
org.apache.pdfbox.cos.COSName.getPDFName : if r6 != null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r3 = <org.apache.pdfbox.cos.COSName: java.util.Map nameMap>
org.apache.pdfbox.cos.COSName.getPDFName : $r3 = <org.apache.pdfbox.cos.COSName: java.util.Map nameMap> >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.apache.pdfbox.cos.COSName.getPDFName : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r4
org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r4 >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : return r6
org.apache.pdfbox.cos.COSName.getPDFName : return r6 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.put : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null
org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.isEmpty : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $i0 != 0
org.apache.pdfbox.util.SmallMap.isEmpty : if $i0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 0
org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : return $z0
org.apache.pdfbox.util.SmallMap.isEmpty : return $z0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0
org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if r1 != null
org.apache.pdfbox.util.SmallMap.findKey : if r1 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : i1 = 0
org.apache.pdfbox.util.SmallMap.findKey : i1 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findKey : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.findKey : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if i1 >= $i0
org.apache.pdfbox.util.SmallMap.findKey : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findKey : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r4 = $r3[i1]
org.apache.pdfbox.util.SmallMap.findKey : $r4 = $r3[i1] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4)
org.apache.pdfbox.util.SmallMap.findKey : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSName.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSName.equals : if $z0 == 0
org.apache.pdfbox.cos.COSName.equals : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r4 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.equals : $r4 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r2 = (org.apache.pdfbox.cos.COSName) r1
org.apache.pdfbox.cos.COSName.equals : $r2 = (org.apache.pdfbox.cos.COSName) r1 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r3 = $r2.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.equals : $r3 = $r2.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3)
org.apache.pdfbox.cos.COSName.equals : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : if $z1 == 0
org.apache.pdfbox.cos.COSName.equals : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z2 = 0
org.apache.pdfbox.cos.COSName.equals : $z2 = 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : return $z2
org.apache.pdfbox.cos.COSName.equals : return $z2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z1 == 0
org.apache.pdfbox.util.SmallMap.findKey : if $z1 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : i1 = i1 + 2
org.apache.pdfbox.util.SmallMap.findKey : i1 = i1 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.findKey : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : return -1
org.apache.pdfbox.util.SmallMap.findKey : return -1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if i0 >= 0
org.apache.pdfbox.util.SmallMap.put : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r8 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r8 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : i5 = lengthof $r8
org.apache.pdfbox.util.SmallMap.put : i5 = lengthof $r8 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i3 = i5 + 2
org.apache.pdfbox.util.SmallMap.put : $i3 = i5 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3 = newarray (java.lang.Object)[$i3]
org.apache.pdfbox.util.SmallMap.put : r3 = newarray (java.lang.Object)[$i3] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r9 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r9 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r3, 0, i5)
org.apache.pdfbox.util.SmallMap.put : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r3, 0, i5) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3[i5] = r1
org.apache.pdfbox.util.SmallMap.put : r3[i5] = r1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i4 = i5 + 1
org.apache.pdfbox.util.SmallMap.put : $i4 = i5 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3[$i4] = r2
org.apache.pdfbox.util.SmallMap.put : r3[$i4] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = r3
org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = r3 >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed>
org.apache.pdfbox.cos.COSDocument.finalize : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : if $z0 != 0
org.apache.pdfbox.cos.COSDocument.finalize : if $z0 != 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.finalize : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : if $r2 == null
org.apache.pdfbox.io.ScratchFileBuffer.finalize : if $r2 == null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void close()>()
org.apache.pdfbox.io.ScratchFileBuffer.finalize : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void close()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.close : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : if $r1 == null
org.apache.pdfbox.io.ScratchFileBuffer.close : if $r1 == null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : specialinvoke r0.<java.lang.Object: void finalize()>()
org.apache.pdfbox.io.ScratchFileBuffer.finalize : specialinvoke r0.<java.lang.Object: void finalize()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : goto [?= return]
org.apache.pdfbox.io.ScratchFileBuffer.finalize : goto [?= return] >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : $z1 = r0.<org.apache.pdfbox.cos.COSDocument: boolean warnMissingClose>
org.apache.pdfbox.cos.COSDocument.finalize : $z1 = r0.<org.apache.pdfbox.cos.COSDocument: boolean warnMissingClose> >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : if $z1 == 0
org.apache.pdfbox.cos.COSDocument.finalize : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : $r1 = <org.apache.pdfbox.cos.COSDocument: org.apache.commons.logging.Log LOG>
org.apache.pdfbox.cos.COSDocument.finalize : $r1 = <org.apache.pdfbox.cos.COSDocument: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : interfaceinvoke $r1.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Warning: You did not close a PDF Document")
org.apache.pdfbox.cos.COSDocument.finalize : interfaceinvoke $r1.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Warning: You did not close a PDF Document") >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: void close()>()
org.apache.pdfbox.cos.COSDocument.finalize : virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed>
org.apache.pdfbox.cos.COSDocument.close : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $z0 != 0
org.apache.pdfbox.cos.COSDocument.close : if $z0 != 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: java.util.List getObjects()>()
org.apache.pdfbox.cos.COSDocument.close : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: java.util.List getObjects()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : $r1 = new java.util.ArrayList
org.apache.pdfbox.cos.COSDocument.getObjects : $r1 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : $r2 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool>
org.apache.pdfbox.cos.COSDocument.getObjects : $r2 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>()
org.apache.pdfbox.cos.COSDocument.getObjects : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3)
org.apache.pdfbox.cos.COSDocument.getObjects : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : return $r1
org.apache.pdfbox.cos.COSDocument.getObjects : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if r1 == null
org.apache.pdfbox.cos.COSDocument.close : if r1 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r10 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSDocument.close : r10 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.cos.COSDocument.close : $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $z2 == 0
org.apache.pdfbox.cos.COSDocument.close : if $z2 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams>
org.apache.pdfbox.cos.COSDocument.close : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $r3 == null
org.apache.pdfbox.cos.COSDocument.close : if $r3 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r6 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams>
org.apache.pdfbox.cos.COSDocument.close : $r6 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r12 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSDocument.close : r12 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.cos.COSDocument.close : $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $z1 == 0
org.apache.pdfbox.cos.COSDocument.close : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r4 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSDocument.close : $r4 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $r4 == null
org.apache.pdfbox.cos.COSDocument.close : if $r4 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r5 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSDocument.close : $r5 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : virtualinvoke $r5.<org.apache.pdfbox.io.ScratchFile: void close()>()
org.apache.pdfbox.cos.COSDocument.close : virtualinvoke $r5.<org.apache.pdfbox.io.ScratchFile: void close()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : r21 = null
org.apache.pdfbox.io.ScratchFile.close : r21 = null >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.lang.Object ioLock>
org.apache.pdfbox.io.ScratchFile.close : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.lang.Object ioLock> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : entermonitor $r4
org.apache.pdfbox.io.ScratchFile.close : entermonitor $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed>
org.apache.pdfbox.io.ScratchFile.close : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : if $z0 == 0
org.apache.pdfbox.io.ScratchFile.close : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> = 1
org.apache.pdfbox.io.ScratchFile.close : r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> = 1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf>
org.apache.pdfbox.io.ScratchFile.close : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : if $r5 == null
org.apache.pdfbox.io.ScratchFile.close : if $r5 == null >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r23 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.File file>
org.apache.pdfbox.io.ScratchFile.close : $r23 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.File file> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : if $r23 == null
org.apache.pdfbox.io.ScratchFile.close : if $r23 == null >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : exitmonitor $r4
org.apache.pdfbox.io.ScratchFile.close : exitmonitor $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : goto [?= $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>]
org.apache.pdfbox.io.ScratchFile.close : goto [?= $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>] >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.close : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : entermonitor $r6
org.apache.pdfbox.io.ScratchFile.close : entermonitor $r6 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.close : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : virtualinvoke $r7.<java.util.BitSet: void clear()>()
org.apache.pdfbox.io.ScratchFile.close : virtualinvoke $r7.<java.util.BitSet: void clear()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = 0
org.apache.pdfbox.io.ScratchFile.close : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : exitmonitor $r6
org.apache.pdfbox.io.ScratchFile.close : exitmonitor $r6 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : goto [?= (branch)]
org.apache.pdfbox.io.ScratchFile.close : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : if r21 == null
org.apache.pdfbox.io.ScratchFile.close : if r21 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> = 1
org.apache.pdfbox.cos.COSDocument.close : r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> = 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i0 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i1 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r2 = newarray (int)[i1]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r2 = newarray (int)[i1] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i3 = virtualinvoke r1.<java.awt.image.BufferedImage: int getType()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i3 = virtualinvoke r1.<java.awt.image.BufferedImage: int getType()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : if $i3 != 10
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : if $i3 != 10 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i4 = virtualinvoke r1.<java.awt.image.BufferedImage: int getType()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i4 = virtualinvoke r1.<java.awt.image.BufferedImage: int getType()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : if $i4 != 12
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : if $i4 != 12 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i28 = 8
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i28 = 8 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r10 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB INSTANCE>
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r10 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB INSTANCE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i5 = i1 * i0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i5 = i1 * i0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i6 = $i5 * 3
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i6 = $i5 * 3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r14 = newarray (byte)[$i6]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r14 = newarray (byte)[$i6] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i34 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i34 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i35 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i35 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : if i35 >= i0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : if i35 >= i0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r15 = virtualinvoke r1.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, i35, i1, 1, r2, 0, i1)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r15 = virtualinvoke r1.<java.awt.image.BufferedImage: int[] getRGB(int,int,int,int,int[],int,int)>(0, i35, i1, 1, r2, 0, i1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i36 = lengthof r15
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i36 = lengthof r15 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i37 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i37 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : if i37 >= i36
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : if i37 >= i36 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i38 = r15[i37]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i38 = r15[i37] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i39 = i34 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i39 = i34 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i9 = i38 >> 16
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i9 = i38 >> 16 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i10 = $i9 & 255
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i10 = $i9 & 255 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $b11 = (byte) $i10
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $b11 = (byte) $i10 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r14[i34] = $b11
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r14[i34] = $b11 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i40 = i39 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i40 = i39 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i12 = i38 >> 8
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i12 = i38 >> 8 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i13 = $i12 & 255
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i13 = $i12 & 255 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $b14 = (byte) $i13
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $b14 = (byte) $i13 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r14[i39] = $b14
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r14[i39] = $b14 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i34 = i40 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i34 = i40 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i15 = i38 & 255
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i15 = i38 & 255 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $b16 = (byte) $i15
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $b16 = (byte) $i15 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r14[i40] = $b16
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r14[i40] = $b16 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i37 = i37 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i37 = i37 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i35 = i35 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : i35 = i35 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i7 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i7 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i8 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $i8 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r16 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject prepareImageXObject(org.apache.pdfbox.pdmodel.PDDocument,byte[],int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>(r0, r14, $i7, $i8, i28, r10)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r16 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject prepareImageXObject(org.apache.pdfbox.pdmodel.PDDocument,byte[],int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>(r0, r14, $i7, $i8, i28, r10) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r6 = new java.io.ByteArrayOutputStream
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r6 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $i3 = lengthof r1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $i3 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $i4 = $i3 / 2
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $i4 = $i3 / 2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>(int)>($i4)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : specialinvoke $r6.<java.io.ByteArrayOutputStream: void <init>(int)>($i4) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r8 = <org.apache.pdfbox.filter.FilterFactory: org.apache.pdfbox.filter.FilterFactory INSTANCE>
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r8 = <org.apache.pdfbox.filter.FilterFactory: org.apache.pdfbox.filter.FilterFactory INSTANCE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FLATE_DECODE>
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FLATE_DECODE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : r4 = virtualinvoke $r8.<org.apache.pdfbox.filter.FilterFactory: org.apache.pdfbox.filter.Filter getFilter(org.apache.pdfbox.cos.COSName)>($r7)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : r4 = virtualinvoke $r8.<org.apache.pdfbox.filter.FilterFactory: org.apache.pdfbox.filter.Filter getFilter(org.apache.pdfbox.cos.COSName)>($r7) >>>>>>>> org.apache.pdfbox.filter.FilterFactory.getFilter : $r3 = r0.<org.apache.pdfbox.filter.FilterFactory: java.util.Map filters>
org.apache.pdfbox.filter.FilterFactory.getFilter : $r3 = r0.<org.apache.pdfbox.filter.FilterFactory: java.util.Map filters> >>>>>>>> org.apache.pdfbox.filter.FilterFactory.getFilter : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.filter.FilterFactory.getFilter : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSName.hashCode : $i0 = r0.<org.apache.pdfbox.cos.COSName: int hashCode>
org.apache.pdfbox.cos.COSName.hashCode : $i0 = r0.<org.apache.pdfbox.cos.COSName: int hashCode> >>>>>>>> org.apache.pdfbox.cos.COSName.hashCode : return $i0
org.apache.pdfbox.cos.COSName.hashCode : return $i0 >>>>>>>> org.apache.pdfbox.filter.FilterFactory.getFilter : r2 = (org.apache.pdfbox.filter.Filter) $r4
org.apache.pdfbox.filter.FilterFactory.getFilter : r2 = (org.apache.pdfbox.filter.Filter) $r4 >>>>>>>> org.apache.pdfbox.filter.FilterFactory.getFilter : if r2 != null
org.apache.pdfbox.filter.FilterFactory.getFilter : if r2 != null >>>>>>>> org.apache.pdfbox.filter.FilterFactory.getFilter : return r2
org.apache.pdfbox.filter.FilterFactory.getFilter : return r2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r9 = new java.io.ByteArrayInputStream
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r9 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : specialinvoke $r9.<java.io.ByteArrayInputStream: void <init>(byte[])>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r10 = new org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r10 = new org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : specialinvoke $r10.<org.apache.pdfbox.cos.COSDictionary: void <init>()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : specialinvoke $r10.<org.apache.pdfbox.cos.COSDictionary: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : virtualinvoke r4.<org.apache.pdfbox.filter.Filter: void encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)>($r9, $r6, $r10, 0)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : virtualinvoke r4.<org.apache.pdfbox.filter.Filter: void encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)>($r9, $r6, $r10, 0) >>>>>>>> org.apache.pdfbox.filter.Filter.encode : $r4 = virtualinvoke r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSDictionary asUnmodifiableDictionary()>()
org.apache.pdfbox.filter.Filter.encode : $r4 = virtualinvoke r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSDictionary asUnmodifiableDictionary()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.asUnmodifiableDictionary : $r1 = new org.apache.pdfbox.cos.UnmodifiableCOSDictionary
org.apache.pdfbox.cos.COSDictionary.asUnmodifiableDictionary : $r1 = new org.apache.pdfbox.cos.UnmodifiableCOSDictionary >>>>>>>> org.apache.pdfbox.cos.COSDictionary.asUnmodifiableDictionary : specialinvoke $r1.<org.apache.pdfbox.cos.UnmodifiableCOSDictionary: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r0)
org.apache.pdfbox.cos.COSDictionary.asUnmodifiableDictionary : specialinvoke $r1.<org.apache.pdfbox.cos.UnmodifiableCOSDictionary: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.asUnmodifiableDictionary : return $r1
org.apache.pdfbox.cos.COSDictionary.asUnmodifiableDictionary : return $r1 >>>>>>>> org.apache.pdfbox.filter.Filter.encode : virtualinvoke r0.<org.apache.pdfbox.filter.Filter: void encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)>(r1, r2, $r4)
org.apache.pdfbox.filter.Filter.encode : virtualinvoke r0.<org.apache.pdfbox.filter.Filter: void encode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary)>(r1, r2, $r4) >>>>>>>> org.apache.pdfbox.filter.FlateFilter.encode : $r6 = new java.util.zip.DeflaterOutputStream
org.apache.pdfbox.filter.FlateFilter.encode : $r6 = new java.util.zip.DeflaterOutputStream >>>>>>>> org.apache.pdfbox.filter.FlateFilter.encode : specialinvoke $r6.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream)>(r2)
org.apache.pdfbox.filter.FlateFilter.encode : specialinvoke $r6.<java.util.zip.DeflaterOutputStream: void <init>(java.io.OutputStream)>(r2) >>>>>>>> org.apache.pdfbox.filter.FlateFilter.encode : i1 = virtualinvoke r1.<java.io.InputStream: int available()>()
org.apache.pdfbox.filter.FlateFilter.encode : i1 = virtualinvoke r1.<java.io.InputStream: int available()>() >>>>>>>> org.apache.pdfbox.filter.FlateFilter.encode : if i1 <= 0
org.apache.pdfbox.filter.FlateFilter.encode : if i1 <= 0 >>>>>>>> org.apache.pdfbox.filter.FlateFilter.encode : $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i1, 16348)
org.apache.pdfbox.filter.FlateFilter.encode : $i2 = staticinvoke <java.lang.Math: int min(int,int)>(i1, 16348) >>>>>>>> org.apache.pdfbox.filter.FlateFilter.encode : r5 = newarray (byte)[$i2]
org.apache.pdfbox.filter.FlateFilter.encode : r5 = newarray (byte)[$i2] >>>>>>>> org.apache.pdfbox.filter.FlateFilter.encode : $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i1, 16348)
org.apache.pdfbox.filter.FlateFilter.encode : $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i1, 16348) >>>>>>>> org.apache.pdfbox.filter.FlateFilter.encode : $i4 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r5, 0, $i3)
org.apache.pdfbox.filter.FlateFilter.encode : $i4 = virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r5, 0, $i3) >>>>>>>> org.apache.pdfbox.filter.FlateFilter.encode : if $i4 == -1
org.apache.pdfbox.filter.FlateFilter.encode : if $i4 == -1 >>>>>>>> org.apache.pdfbox.filter.FlateFilter.encode : virtualinvoke $r6.<java.util.zip.DeflaterOutputStream: void write(byte[],int,int)>(r5, 0, $i4)
org.apache.pdfbox.filter.FlateFilter.encode : virtualinvoke $r6.<java.util.zip.DeflaterOutputStream: void write(byte[],int,int)>(r5, 0, $i4) >>>>>>>> org.apache.pdfbox.filter.FlateFilter.encode : goto [?= $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i1, 16348)]
org.apache.pdfbox.filter.FlateFilter.encode : goto [?= $i3 = staticinvoke <java.lang.Math: int min(int,int)>(i1, 16348)] >>>>>>>> org.apache.pdfbox.filter.FlateFilter.encode : virtualinvoke $r6.<java.util.zip.DeflaterOutputStream: void close()>()
org.apache.pdfbox.filter.FlateFilter.encode : virtualinvoke $r6.<java.util.zip.DeflaterOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.filter.FlateFilter.encode : virtualinvoke r2.<java.io.OutputStream: void flush()>()
org.apache.pdfbox.filter.FlateFilter.encode : virtualinvoke r2.<java.io.OutputStream: void flush()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r11 = new java.io.ByteArrayInputStream
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r11 = new java.io.ByteArrayInputStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r12 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r12 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : specialinvoke $r11.<java.io.ByteArrayInputStream: void <init>(byte[])>($r12)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : specialinvoke $r11.<java.io.ByteArrayInputStream: void <init>(byte[])>($r12) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r13 = new org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r13 = new org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r14 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FLATE_DECODE>
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : $r14 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FLATE_DECODE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : specialinvoke $r13.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: void <init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.cos.COSBase,int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>(r0, $r11, $r14, i0, i1, i2, r2)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : specialinvoke $r13.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: void <init>(org.apache.pdfbox.pdmodel.PDDocument,java.io.InputStream,org.apache.pdfbox.cos.COSBase,int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>(r0, $r11, $r14, i0, i1, i2, r2) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocument : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdmodel.PDDocument.getDocument : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocument : return $r1
org.apache.pdfbox.pdmodel.PDDocument.getDocument : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : r2 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSStream createCOSStream()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : r2 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSStream createCOSStream()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : $r2 = new org.apache.pdfbox.cos.COSStream
org.apache.pdfbox.cos.COSDocument.createCOSStream : $r2 = new org.apache.pdfbox.cos.COSStream >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSDocument.createCOSStream : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : specialinvoke $r2.<org.apache.pdfbox.cos.COSStream: void <init>(org.apache.pdfbox.io.ScratchFile)>($r3)
org.apache.pdfbox.cos.COSDocument.createCOSStream : specialinvoke $r2.<org.apache.pdfbox.cos.COSStream: void <init>(org.apache.pdfbox.io.ScratchFile)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : $r4 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams>
org.apache.pdfbox.cos.COSDocument.createCOSStream : $r4 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams> >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r2)
org.apache.pdfbox.cos.COSDocument.createCOSStream : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : return $r2
org.apache.pdfbox.cos.COSDocument.createCOSStream : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : r6 = null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : r6 = null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : r6 = virtualinvoke r2.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createRawOutputStream()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : r6 = virtualinvoke r2.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createRawOutputStream()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawOutputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>()
org.apache.pdfbox.cos.COSStream.createRawOutputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.checkClosed : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.checkClosed : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.checkClosed : if $r1 == null
org.apache.pdfbox.cos.COSStream.checkClosed : if $r1 == null >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawOutputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting>
org.apache.pdfbox.cos.COSStream.createRawOutputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawOutputStream : if $z0 == 0
org.apache.pdfbox.cos.COSStream.createRawOutputStream : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawOutputStream : $r2 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSStream.createRawOutputStream : $r2 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawOutputStream : $r3 = virtualinvoke $r2.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer()>()
org.apache.pdfbox.cos.COSStream.createRawOutputStream : $r3 = virtualinvoke $r2.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : $r1 = new org.apache.pdfbox.io.ScratchFileBuffer
org.apache.pdfbox.io.ScratchFile.createBuffer : $r1 = new org.apache.pdfbox.io.ScratchFileBuffer >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFileBuffer: void <init>(org.apache.pdfbox.io.ScratchFile)>(r0)
org.apache.pdfbox.io.ScratchFile.createBuffer : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFileBuffer: void <init>(org.apache.pdfbox.io.ScratchFile)>(r0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.checkClosed : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed>
org.apache.pdfbox.io.ScratchFile.checkClosed : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> >>>>>>>> org.apache.pdfbox.io.ScratchFile.checkClosed : if $z0 == 0
org.apache.pdfbox.io.ScratchFile.checkClosed : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getPageSize : return 4096
org.apache.pdfbox.io.ScratchFile.getPageSize : return 4096 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i2 = $i0 + 1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i2 = $i0 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i1 = lengthof $r2
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i1 = lengthof $r2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : if $i2 < $i1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : if $i2 < $i1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r8 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r8 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : i8 = virtualinvoke $r8.<org.apache.pdfbox.io.ScratchFile: int getNewPage()>()
org.apache.pdfbox.io.ScratchFileBuffer.addPage : i8 = virtualinvoke $r8.<org.apache.pdfbox.io.ScratchFile: int getNewPage()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r3 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r3 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : entermonitor $r3
org.apache.pdfbox.io.ScratchFile.getNewPage : entermonitor $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : i3 = virtualinvoke $r4.<java.util.BitSet: int nextSetBit(int)>(0)
org.apache.pdfbox.io.ScratchFile.getNewPage : i3 = virtualinvoke $r4.<java.util.BitSet: int nextSetBit(int)>(0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 >= 0
org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 >= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : virtualinvoke $r5.<java.util.BitSet: void clear(int)>(i3)
org.apache.pdfbox.io.ScratchFile.getNewPage : virtualinvoke $r5.<java.util.BitSet: void clear(int)>(i3) >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.getNewPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 < $i0
org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 < $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $i1 = i3 + 1
org.apache.pdfbox.io.ScratchFile.getNewPage : $i1 = i3 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = $i1
org.apache.pdfbox.io.ScratchFile.getNewPage : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = $i1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : exitmonitor $r3
org.apache.pdfbox.io.ScratchFile.getNewPage : exitmonitor $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : return i3
org.apache.pdfbox.io.ScratchFile.getNewPage : return i3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9[$i9] = i8
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9[$i9] = i8 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i10 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i10 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = $i10
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = $i10 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l12 = (long) $i11
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l12 = (long) $i11 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l14 = (long) $i13
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l14 = (long) $i13 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l15 = $l12 * $l14
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l15 = $l12 * $l14 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l15
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l15 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i17 = $i16 + 1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i17 = $i16 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> = $i17
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> = $i17 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r11 = newarray (byte)[$i18]
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r11 = newarray (byte)[$i18] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r11
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r11 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : return $r1
org.apache.pdfbox.io.ScratchFile.createBuffer : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawOutputStream : r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> = $r3
org.apache.pdfbox.cos.COSStream.createRawOutputStream : r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> = $r3 >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawOutputStream : $r4 = new org.apache.pdfbox.io.RandomAccessOutputStream
org.apache.pdfbox.cos.COSStream.createRawOutputStream : $r4 = new org.apache.pdfbox.io.RandomAccessOutputStream >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawOutputStream : $r5 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.createRawOutputStream : $r5 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawOutputStream : specialinvoke $r4.<org.apache.pdfbox.io.RandomAccessOutputStream: void <init>(org.apache.pdfbox.io.RandomAccessWrite)>($r5)
org.apache.pdfbox.cos.COSStream.createRawOutputStream : specialinvoke $r4.<org.apache.pdfbox.io.RandomAccessOutputStream: void <init>(org.apache.pdfbox.io.RandomAccessWrite)>($r5) >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawOutputStream : r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> = 1
org.apache.pdfbox.cos.COSStream.createRawOutputStream : r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> = 1 >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawOutputStream : $r6 = new org.apache.pdfbox.cos.COSStream$2
org.apache.pdfbox.cos.COSStream.createRawOutputStream : $r6 = new org.apache.pdfbox.cos.COSStream$2 >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawOutputStream : specialinvoke $r6.<org.apache.pdfbox.cos.COSStream$2: void <init>(org.apache.pdfbox.cos.COSStream,java.io.OutputStream)>(r0, $r4)
org.apache.pdfbox.cos.COSStream.createRawOutputStream : specialinvoke $r6.<org.apache.pdfbox.cos.COSStream$2: void <init>(org.apache.pdfbox.cos.COSStream,java.io.OutputStream)>(r0, $r4) >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawOutputStream : return $r6
org.apache.pdfbox.cos.COSStream.createRawOutputStream : return $r6 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : staticinvoke <org.apache.pdfbox.io.IOUtils: long copy(java.io.InputStream,java.io.OutputStream)>(r1, r6)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : staticinvoke <org.apache.pdfbox.io.IOUtils: long copy(java.io.InputStream,java.io.OutputStream)>(r1, r6) >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : r2 = newarray (byte)[4096]
org.apache.pdfbox.io.IOUtils.copy : r2 = newarray (byte)[4096] >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : l2 = 0L
org.apache.pdfbox.io.IOUtils.copy : l2 = 0L >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : $i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2)
org.apache.pdfbox.io.IOUtils.copy : $i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2) >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : if -1 == $i0
org.apache.pdfbox.io.IOUtils.copy : if -1 == $i0 >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i0)
org.apache.pdfbox.io.IOUtils.copy : virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i0) >>>>>>>> org.apache.pdfbox.cos.COSStream$2.write : $r2 = r0.<org.apache.pdfbox.cos.COSStream$2: java.io.OutputStream out>
org.apache.pdfbox.cos.COSStream$2.write : $r2 = r0.<org.apache.pdfbox.cos.COSStream$2: java.io.OutputStream out> >>>>>>>> org.apache.pdfbox.cos.COSStream$2.write : virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1)
org.apache.pdfbox.cos.COSStream$2.write : virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) >>>>>>>> org.apache.pdfbox.io.RandomAccessOutputStream.write : $r2 = r0.<org.apache.pdfbox.io.RandomAccessOutputStream: org.apache.pdfbox.io.RandomAccessWrite writer>
org.apache.pdfbox.io.RandomAccessOutputStream.write : $r2 = r0.<org.apache.pdfbox.io.RandomAccessOutputStream: org.apache.pdfbox.io.RandomAccessWrite writer> >>>>>>>> org.apache.pdfbox.io.RandomAccessOutputStream.write : interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessWrite: void write(byte[],int,int)>(r1, i0, i1)
org.apache.pdfbox.io.RandomAccessOutputStream.write : interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessWrite: void write(byte[],int,int)>(r1, i0, i1) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.write : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : if $r1 != null
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : if $r1 != null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : virtualinvoke $r2.<org.apache.pdfbox.io.ScratchFile: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : virtualinvoke $r2.<org.apache.pdfbox.io.ScratchFile: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : i19 = i1
org.apache.pdfbox.io.ScratchFileBuffer.write : i19 = i1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : i20 = i0
org.apache.pdfbox.io.ScratchFileBuffer.write : i20 = i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : if i19 <= 0
org.apache.pdfbox.io.ScratchFileBuffer.write : if i19 <= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean ensureAvailableBytesInPage(boolean)>(1)
org.apache.pdfbox.io.ScratchFileBuffer.write : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean ensureAvailableBytesInPage(boolean)>(1) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : if $i1 < $i0
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : if $i1 < $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : return 1
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : return 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i14 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i14 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i15 = $i14 - $i13
org.apache.pdfbox.io.ScratchFileBuffer.write : $i15 = $i14 - $i13 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : i2 = staticinvoke <java.lang.Math: int min(int,int)>(i19, $i15)
org.apache.pdfbox.io.ScratchFileBuffer.write : i2 = staticinvoke <java.lang.Math: int min(int,int)>(i19, $i15) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i20, $r2, $i16, i2)
org.apache.pdfbox.io.ScratchFileBuffer.write : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i20, $r2, $i16, i2) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i17 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i17 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i18 = $i17 + i2
org.apache.pdfbox.io.ScratchFileBuffer.write : $i18 = $i17 + i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i18
org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i18 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean currentPageContentChanged> = 1
org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean currentPageContentChanged> = 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : i20 = i20 + i2
org.apache.pdfbox.io.ScratchFileBuffer.write : i20 = i20 + i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : i19 = i19 - i2
org.apache.pdfbox.io.ScratchFileBuffer.write : i19 = i19 - i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : goto [?= (branch)]
org.apache.pdfbox.io.ScratchFileBuffer.write : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.write : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l4 = (long) $i3
org.apache.pdfbox.io.ScratchFileBuffer.write : $l4 = (long) $i3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l7 = $l5 + $l4
org.apache.pdfbox.io.ScratchFileBuffer.write : $l7 = $l5 + $l4 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.write : $l6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $b8 = $l7 cmp $l6
org.apache.pdfbox.io.ScratchFileBuffer.write : $b8 = $l7 cmp $l6 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : if $b8 <= 0
org.apache.pdfbox.io.ScratchFileBuffer.write : if $b8 <= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.write : $l11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l10 = (long) $i9
org.apache.pdfbox.io.ScratchFileBuffer.write : $l10 = (long) $i9 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l12 = $l11 + $l10
org.apache.pdfbox.io.ScratchFileBuffer.write : $l12 = $l11 + $l10 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> = $l12
org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> = $l12 >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : $l1 = (long) $i0
org.apache.pdfbox.io.IOUtils.copy : $l1 = (long) $i0 >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : l2 = l2 + $l1
org.apache.pdfbox.io.IOUtils.copy : l2 = l2 + $l1 >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : goto [?= $i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2)]
org.apache.pdfbox.io.IOUtils.copy : goto [?= $i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2)] >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : return l2
org.apache.pdfbox.io.IOUtils.copy : return l2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : if r6 == null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : if r6 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : virtualinvoke r6.<java.io.OutputStream: void close()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : virtualinvoke r6.<java.io.OutputStream: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSStream$2.close : specialinvoke r0.<java.io.FilterOutputStream: void close()>()
org.apache.pdfbox.cos.COSStream$2.close : specialinvoke r0.<java.io.FilterOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSStream$2.close : $r2 = r0.<org.apache.pdfbox.cos.COSStream$2: org.apache.pdfbox.cos.COSStream this$0>
org.apache.pdfbox.cos.COSStream$2.close : $r2 = r0.<org.apache.pdfbox.cos.COSStream$2: org.apache.pdfbox.cos.COSStream this$0> >>>>>>>> org.apache.pdfbox.cos.COSStream$2.close : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LENGTH>
org.apache.pdfbox.cos.COSStream$2.close : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LENGTH> >>>>>>>> org.apache.pdfbox.cos.COSStream$2.close : $r1 = r0.<org.apache.pdfbox.cos.COSStream$2: org.apache.pdfbox.cos.COSStream this$0>
org.apache.pdfbox.cos.COSStream$2.close : $r1 = r0.<org.apache.pdfbox.cos.COSStream$2: org.apache.pdfbox.cos.COSStream this$0> >>>>>>>> org.apache.pdfbox.cos.COSStream$2.close : $r4 = staticinvoke <org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess access$000(org.apache.pdfbox.cos.COSStream)>($r1)
org.apache.pdfbox.cos.COSStream$2.close : $r4 = staticinvoke <org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess access$000(org.apache.pdfbox.cos.COSStream)>($r1) >>>>>>>> org.apache.pdfbox.cos.COSStream.access$000 : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.access$000 : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.access$000 : return $r1
org.apache.pdfbox.cos.COSStream.access$000 : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSStream$2.close : $l0 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccess: long length()>()
org.apache.pdfbox.cos.COSStream$2.close : $l0 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccess: long length()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.length : $l0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.length : $l0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.length : return $l0
org.apache.pdfbox.io.ScratchFileBuffer.length : return $l0 >>>>>>>> org.apache.pdfbox.cos.COSStream$2.close : $i1 = (int) $l0
org.apache.pdfbox.cos.COSStream$2.close : $i1 = (int) $l0 >>>>>>>> org.apache.pdfbox.cos.COSStream$2.close : virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: void setInt(org.apache.pdfbox.cos.COSName,int)>($r3, $i1)
org.apache.pdfbox.cos.COSStream$2.close : virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: void setInt(org.apache.pdfbox.cos.COSName,int)>($r3, $i1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setInt : $l1 = (long) i0
org.apache.pdfbox.cos.COSDictionary.setInt : $l1 = (long) i0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setInt : $r2 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l1)
org.apache.pdfbox.cos.COSDictionary.setInt : $r2 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l1) >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $b2 = -100L cmp l0
org.apache.pdfbox.cos.COSInteger.get : $b2 = -100L cmp l0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : if $b2 > 0
org.apache.pdfbox.cos.COSInteger.get : if $b2 > 0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $b3 = l0 cmp 256L
org.apache.pdfbox.cos.COSInteger.get : $b3 = l0 cmp 256L >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : if $b3 > 0
org.apache.pdfbox.cos.COSInteger.get : if $b3 > 0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $i4 = (int) l0
org.apache.pdfbox.cos.COSInteger.get : $i4 = (int) l0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : i1 = $i4 - -100
org.apache.pdfbox.cos.COSInteger.get : i1 = $i4 - -100 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r1 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC>
org.apache.pdfbox.cos.COSInteger.get : $r1 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC> >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r2 = $r1[i1]
org.apache.pdfbox.cos.COSInteger.get : $r2 = $r1[i1] >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : if $r2 != null
org.apache.pdfbox.cos.COSInteger.get : if $r2 != null >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r3 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC>
org.apache.pdfbox.cos.COSInteger.get : $r3 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC> >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r4 = $r3[i1]
org.apache.pdfbox.cos.COSInteger.get : $r4 = $r3[i1] >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : return $r4
org.apache.pdfbox.cos.COSInteger.get : return $r4 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setInt : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, $r2)
org.apache.pdfbox.cos.COSDictionary.setInt : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, $r2) >>>>>>>> org.apache.pdfbox.cos.COSStream$2.close : $r5 = r0.<org.apache.pdfbox.cos.COSStream$2: org.apache.pdfbox.cos.COSStream this$0>
org.apache.pdfbox.cos.COSStream$2.close : $r5 = r0.<org.apache.pdfbox.cos.COSStream$2: org.apache.pdfbox.cos.COSStream this$0> >>>>>>>> org.apache.pdfbox.cos.COSStream$2.close : staticinvoke <org.apache.pdfbox.cos.COSStream: boolean access$102(org.apache.pdfbox.cos.COSStream,boolean)>($r5, 0)
org.apache.pdfbox.cos.COSStream$2.close : staticinvoke <org.apache.pdfbox.cos.COSStream: boolean access$102(org.apache.pdfbox.cos.COSStream,boolean)>($r5, 0) >>>>>>>> org.apache.pdfbox.cos.COSStream.access$102 : r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> = z0
org.apache.pdfbox.cos.COSStream.access$102 : r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> = z0 >>>>>>>> org.apache.pdfbox.cos.COSStream.access$102 : return z0
org.apache.pdfbox.cos.COSStream.access$102 : return z0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : goto [?= return r2]
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : goto [?= return r2] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : return r2
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createRawStream : return r2 >>>>>>>> org.apache.pdfbox.cos.COSName.getName : $r1 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.getName : $r1 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.getName : return $r1
org.apache.pdfbox.cos.COSName.getName : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setName : r3 = null
org.apache.pdfbox.cos.COSDictionary.setName : r3 = null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setName : if r2 == null
org.apache.pdfbox.cos.COSDictionary.setName : if r2 == null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setName : r3 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r2)
org.apache.pdfbox.cos.COSDictionary.setName : r3 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setName : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, r3)
org.apache.pdfbox.cos.COSDictionary.setName : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, r3) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.PDXObject: org.apache.pdfbox.pdmodel.common.PDStream stream>
org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.PDXObject: org.apache.pdfbox.pdmodel.common.PDStream stream> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream>
org.apache.pdfbox.pdmodel.common.PDStream.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getCOSObject : return $r1
org.apache.pdfbox.pdmodel.common.PDStream.getCOSObject : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : return $r2
org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setBitsPerComponent : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setBitsPerComponent : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setBitsPerComponent : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BITS_PER_COMPONENT>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setBitsPerComponent : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BITS_PER_COMPONENT> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setBitsPerComponent : virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: void setInt(org.apache.pdfbox.cos.COSName,int)>($r2, i0)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setBitsPerComponent : virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: void setInt(org.apache.pdfbox.cos.COSName,int)>($r2, i0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setWidth : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setWidth : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setWidth : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName WIDTH>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setWidth : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName WIDTH> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setWidth : virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: void setInt(org.apache.pdfbox.cos.COSName,int)>($r2, i0)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setWidth : virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: void setInt(org.apache.pdfbox.cos.COSName,int)>($r2, i0) >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r0 = new org.apache.pdfbox.cos.COSInteger
org.apache.pdfbox.cos.COSInteger.get : $r0 = new org.apache.pdfbox.cos.COSInteger >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : specialinvoke $r0.<org.apache.pdfbox.cos.COSInteger: void <init>(long)>(l0)
org.apache.pdfbox.cos.COSInteger.get : specialinvoke $r0.<org.apache.pdfbox.cos.COSInteger: void <init>(long)>(l0) >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : return $r0
org.apache.pdfbox.cos.COSInteger.get : return $r0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setHeight : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setHeight : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setHeight : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName HEIGHT>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setHeight : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName HEIGHT> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setHeight : virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: void setInt(org.apache.pdfbox.cos.COSName,int)>($r2, i0)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setHeight : virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: void setInt(org.apache.pdfbox.cos.COSName,int)>($r2, i0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setColorSpace : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setColorSpace : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setColorSpace : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORSPACE>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setColorSpace : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORSPACE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setColorSpace : if r1 == null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setColorSpace : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setColorSpace : $r4 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: org.apache.pdfbox.cos.COSBase getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setColorSpace : $r4 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: org.apache.pdfbox.cos.COSBase getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceColorSpace.getCOSObject : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceColorSpace: java.lang.String getName()>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceColorSpace.getCOSObject : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceColorSpace: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getName : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICERGB>
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getName : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICERGB> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getName : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getName : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getName : return $r2
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getName : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceColorSpace.getCOSObject : $r2 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>($r1)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceColorSpace.getCOSObject : $r2 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>($r1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceColorSpace.getCOSObject : return $r2
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceColorSpace.getCOSObject : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setColorSpace : goto [?= virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r3, $r4)]
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setColorSpace : goto [?= virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r3, $r4)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setColorSpace : virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r3, $r4)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.setColorSpace : virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r3, $r4) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : return $r13
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.prepareImageXObject : return $r13 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r17 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject createAlphaFromARGBImage(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage)>(r0, r1)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : r17 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject createAlphaFromARGBImage(org.apache.pdfbox.pdmodel.PDDocument,java.awt.image.BufferedImage)>(r0, r1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r5 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r5 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.ColorModel getColorModel()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $z0 = virtualinvoke $r5.<java.awt.image.ColorModel: boolean hasAlpha()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $z0 = virtualinvoke $r5.<java.awt.image.ColorModel: boolean hasAlpha()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $z0 != 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r2 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getAlphaRaster()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r2 = virtualinvoke r1.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getAlphaRaster()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r2 != null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if r2 != null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i2 = virtualinvoke r2.<java.awt.image.WritableRaster: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i2 = virtualinvoke r2.<java.awt.image.WritableRaster: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i3 = virtualinvoke r2.<java.awt.image.WritableRaster: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i3 = virtualinvoke r2.<java.awt.image.WritableRaster: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r6 = (int[]) null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r6 = (int[]) null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r3 = virtualinvoke r2.<java.awt.image.WritableRaster: int[] getPixels(int,int,int,int,int[])>(0, 0, $i2, $i3, $r6)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r3 = virtualinvoke r2.<java.awt.image.WritableRaster: int[] getPixels(int,int,int,int,int[])>(0, 0, $i2, $i3, $r6) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r7 = new java.io.ByteArrayOutputStream
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r7 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : specialinvoke $r7.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i4 = virtualinvoke r1.<java.awt.image.BufferedImage: int getTransparency()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i4 = virtualinvoke r1.<java.awt.image.BufferedImage: int getTransparency()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i4 != 2
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i4 != 2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : b9 = 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : b9 = 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r10 = new javax.imageio.stream.MemoryCacheImageOutputStream
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r10 = new javax.imageio.stream.MemoryCacheImageOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : specialinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void <init>(java.io.OutputStream)>($r7)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : specialinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void <init>(java.io.OutputStream)>($r7) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i10 = virtualinvoke r2.<java.awt.image.WritableRaster: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i10 = virtualinvoke r2.<java.awt.image.WritableRaster: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i11 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i11 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i0 = lengthof r3
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i0 = lengthof r3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i12 = 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i12 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i12 >= i0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if i12 >= i0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i1 = r3[i12]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i1 = r3[i12] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(i1)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(i1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i11 = i11 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i11 = i11 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i7 = i11 % i10
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i7 = i11 % i10 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i7 != 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i7 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i12 = i12 + 1
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : i12 = i12 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i8 = virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i8 = virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i8 == 0
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : if $i8 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(0)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void writeBit(int)>(0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= $i8 = virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= $i8 = virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: int getBitOffset()>()] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void flush()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void flush()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : virtualinvoke $r10.<javax.imageio.stream.MemoryCacheImageOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= $r8 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()]
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : goto [?= $r8 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r8 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r8 = virtualinvoke $r7.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i5 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i5 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i6 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $i6 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r9 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray INSTANCE>
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : $r9 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray INSTANCE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r15 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject prepareImageXObject(org.apache.pdfbox.pdmodel.PDDocument,byte[],int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>(r0, $r8, $i5, $i6, b9, $r9)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : r15 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject prepareImageXObject(org.apache.pdfbox.pdmodel.PDDocument,byte[],int,int,int,org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace)>(r0, $r8, $i5, $i6, b9, $r9) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getName : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICEGRAY>
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getName : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICEGRAY> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getName : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getName : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getName : return $r2
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getName : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : return r15
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : return r15 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : if r17 == null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : if r17 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $r3 = virtualinvoke r16.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $r3 = virtualinvoke r16.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SMASK>
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SMASK> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : virtualinvoke $r3.<org.apache.pdfbox.cos.COSStream: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>($r4, r17)
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : virtualinvoke $r3.<org.apache.pdfbox.cos.COSStream: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>($r4, r17) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : r3 = null
org.apache.pdfbox.cos.COSDictionary.setItem : r3 = null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : if r2 == null
org.apache.pdfbox.cos.COSDictionary.setItem : if r2 == null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : r3 = interfaceinvoke r2.<org.apache.pdfbox.pdmodel.common.COSObjectable: org.apache.pdfbox.cos.COSBase getCOSObject()>()
org.apache.pdfbox.cos.COSDictionary.setItem : r3 = interfaceinvoke r2.<org.apache.pdfbox.pdmodel.common.COSObjectable: org.apache.pdfbox.cos.COSBase getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.PDXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.PDXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : return $r1
org.apache.pdfbox.pdmodel.graphics.PDXObject.getCOSObject : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, r3)
org.apache.pdfbox.cos.COSDictionary.setItem : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, r3) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : return r16
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createFromImage : return r16 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertNotNull(java.lang.Object)>(r0)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertNotNull(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertNotNull(java.lang.Object)>(r3)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertNotNull(java.lang.Object)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XOBJECT>
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XOBJECT> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r6 = virtualinvoke r3.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r4)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r6 = virtualinvoke r3.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r4) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getItem : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.getItem : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getItem : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.getItem : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z2 = 1
org.apache.pdfbox.cos.COSName.equals : $z2 = 1 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : goto [?= return $z2]
org.apache.pdfbox.cos.COSName.equals : goto [?= return $z2] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : return i1
org.apache.pdfbox.util.SmallMap.findKey : return i1 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : if i0 >= 0
org.apache.pdfbox.util.SmallMap.get : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.get : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $i1 = i0 + 1
org.apache.pdfbox.util.SmallMap.get : $i1 = i0 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r3 = $r2[$i1]
org.apache.pdfbox.util.SmallMap.get : $r3 = $r2[$i1] >>>>>>>> org.apache.pdfbox.util.SmallMap.get : return $r3
org.apache.pdfbox.util.SmallMap.get : return $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getItem : $r4 = (org.apache.pdfbox.cos.COSBase) $r3
org.apache.pdfbox.cos.COSDictionary.getItem : $r4 = (org.apache.pdfbox.cos.COSBase) $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getItem : return $r4
org.apache.pdfbox.cos.COSDictionary.getItem : return $r4 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r5, $r6) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName IMAGE>
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName IMAGE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SUBTYPE>
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SUBTYPE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r9 = virtualinvoke r3.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r7)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r9 = virtualinvoke r3.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r7) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.Object,java.lang.Object)>($r8, $r9) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r10 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r10 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $l3 = virtualinvoke $r10.<org.apache.pdfbox.cos.COSStream: long getLength()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $l3 = virtualinvoke $r10.<org.apache.pdfbox.cos.COSStream: long getLength()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.getLength : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting>
org.apache.pdfbox.cos.COSStream.getLength : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> >>>>>>>> org.apache.pdfbox.cos.COSStream.getLength : if $z0 == 0
org.apache.pdfbox.cos.COSStream.getLength : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.getLength : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LENGTH>
org.apache.pdfbox.cos.COSStream.getLength : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LENGTH> >>>>>>>> org.apache.pdfbox.cos.COSStream.getLength : $i0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: int getInt(org.apache.pdfbox.cos.COSName,int)>($r1, 0)
org.apache.pdfbox.cos.COSStream.getLength : $i0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: int getInt(org.apache.pdfbox.cos.COSName,int)>($r1, 0) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : $i1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,int)>(r1, null, i0)
org.apache.pdfbox.cos.COSDictionary.getInt : $i1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,int)>(r1, null, i0) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : i1 = i0
org.apache.pdfbox.cos.COSDictionary.getInt : i1 = i0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>(r1, r2)
org.apache.pdfbox.cos.COSDictionary.getInt : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>(r1, r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if r3 != null
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if r3 != null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r3
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : $z0 = r3 instanceof org.apache.pdfbox.cos.COSNumber
org.apache.pdfbox.cos.COSDictionary.getInt : $z0 = r3 instanceof org.apache.pdfbox.cos.COSNumber >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getInt : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : $r4 = (org.apache.pdfbox.cos.COSNumber) r3
org.apache.pdfbox.cos.COSDictionary.getInt : $r4 = (org.apache.pdfbox.cos.COSNumber) r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : i1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSNumber: int intValue()>()
org.apache.pdfbox.cos.COSDictionary.getInt : i1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSNumber: int intValue()>() >>>>>>>> org.apache.pdfbox.cos.COSInteger.intValue : $l0 = r0.<org.apache.pdfbox.cos.COSInteger: long value>
org.apache.pdfbox.cos.COSInteger.intValue : $l0 = r0.<org.apache.pdfbox.cos.COSInteger: long value> >>>>>>>> org.apache.pdfbox.cos.COSInteger.intValue : $i1 = (int) $l0
org.apache.pdfbox.cos.COSInteger.intValue : $i1 = (int) $l0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.intValue : return $i1
org.apache.pdfbox.cos.COSInteger.intValue : return $i1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : return i1
org.apache.pdfbox.cos.COSDictionary.getInt : return i1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : return $i1
org.apache.pdfbox.cos.COSDictionary.getInt : return $i1 >>>>>>>> org.apache.pdfbox.cos.COSStream.getLength : $l1 = (long) $i0
org.apache.pdfbox.cos.COSStream.getLength : $l1 = (long) $i0 >>>>>>>> org.apache.pdfbox.cos.COSStream.getLength : return $l1
org.apache.pdfbox.cos.COSStream.getLength : return $l1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $b4 = $l3 cmp 0L
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $b4 = $l3 cmp 0L >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : if $b4 <= 0
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : if $b4 <= 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $z0 = 1
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : goto [?= staticinvoke <junit.framework.TestCase: void assertTrue(boolean)>($z0)]
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : goto [?= staticinvoke <junit.framework.TestCase: void assertTrue(boolean)>($z0)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertTrue(boolean)>($z0)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertTrue(boolean)>($z0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $i5 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: int getBitsPerComponent()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $i5 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: int getBitsPerComponent()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getBitsPerComponent : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: boolean isStencil()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getBitsPerComponent : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: boolean isStencil()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isStencil : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isStencil : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isStencil : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName IMAGE_MASK>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isStencil : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName IMAGE_MASK> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isStencil : $z0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: boolean getBoolean(org.apache.pdfbox.cos.COSName,boolean)>($r2, 0)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isStencil : $z0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: boolean getBoolean(org.apache.pdfbox.cos.COSName,boolean)>($r2, 0) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getBoolean : $z1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: boolean getBoolean(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,boolean)>(r1, null, z0)
org.apache.pdfbox.cos.COSDictionary.getBoolean : $z1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: boolean getBoolean(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,boolean)>(r1, null, z0) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getBoolean : z2 = z0
org.apache.pdfbox.cos.COSDictionary.getBoolean : z2 = z0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getBoolean : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>(r1, r2)
org.apache.pdfbox.cos.COSDictionary.getBoolean : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>(r1, r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r3 = null
org.apache.pdfbox.util.SmallMap.get : $r3 = null >>>>>>>> org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3]
org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3] >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if r2 == null
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if r2 == null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getBoolean : $z1 = r3 instanceof org.apache.pdfbox.cos.COSBoolean
org.apache.pdfbox.cos.COSDictionary.getBoolean : $z1 = r3 instanceof org.apache.pdfbox.cos.COSBoolean >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getBoolean : if $z1 == 0
org.apache.pdfbox.cos.COSDictionary.getBoolean : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getBoolean : return z2
org.apache.pdfbox.cos.COSDictionary.getBoolean : return z2 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getBoolean : return $z1
org.apache.pdfbox.cos.COSDictionary.getBoolean : return $z1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isStencil : return $z0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isStencil : return $z0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getBitsPerComponent : if $z0 == 0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getBitsPerComponent : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getBitsPerComponent : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getBitsPerComponent : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getBitsPerComponent : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BITS_PER_COMPONENT>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getBitsPerComponent : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BITS_PER_COMPONENT> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getBitsPerComponent : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BPC>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getBitsPerComponent : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName BPC> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getBitsPerComponent : $i0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: int getInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r3, $r2)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getBitsPerComponent : $i0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: int getInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r3, $r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : $i0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,int)>(r1, r2, -1)
org.apache.pdfbox.cos.COSDictionary.getInt : $i0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,int)>(r1, r2, -1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : return $i0
org.apache.pdfbox.cos.COSDictionary.getInt : return $i0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getBitsPerComponent : return $i0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getBitsPerComponent : return $i0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(int,int)>(i0, $i5)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(int,int)>(i0, $i5) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $i6 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $i6 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getWidth : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getWidth : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getWidth : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName WIDTH>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getWidth : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName WIDTH> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getWidth : $i0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: int getInt(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getWidth : $i0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: int getInt(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : $i0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>(r1, -1)
org.apache.pdfbox.cos.COSDictionary.getInt : $i0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>(r1, -1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getWidth : return $i0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getWidth : return $i0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(int,int)>(i1, $i6)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(int,int)>(i1, $i6) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $i7 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $i7 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getHeight : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getHeight : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getHeight : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName HEIGHT>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getHeight : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName HEIGHT> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getHeight : $i0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: int getInt(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getHeight : $i0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: int getInt(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getHeight : return $i0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getHeight : return $i0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(int,int)>(i2, $i7)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(int,int)>(i2, $i7) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r11 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.lang.String getSuffix()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r11 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.lang.String getSuffix()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.common.PDStream getStream()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.common.PDStream getStream()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.getStream : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.PDXObject: org.apache.pdfbox.pdmodel.common.PDStream stream>
org.apache.pdfbox.pdmodel.graphics.PDXObject.getStream : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.PDXObject: org.apache.pdfbox.pdmodel.common.PDStream stream> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.getStream : return $r1
org.apache.pdfbox.pdmodel.graphics.PDXObject.getStream : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : r1 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.common.PDStream: java.util.List getFilters()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : r1 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.common.PDStream: java.util.List getFilters()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getFilters : r8 = null
org.apache.pdfbox.pdmodel.common.PDStream.getFilters : r8 = null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getFilters : $r3 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream>
org.apache.pdfbox.pdmodel.common.PDStream.getFilters : $r3 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getFilters : r1 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getFilters()>()
org.apache.pdfbox.pdmodel.common.PDStream.getFilters : r1 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getFilters()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilters : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FILTER>
org.apache.pdfbox.cos.COSStream.getFilters : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FILTER> >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilters : $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r1)
org.apache.pdfbox.cos.COSStream.getFilters : $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r1) >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilters : return $r2
org.apache.pdfbox.cos.COSStream.getFilters : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getFilters : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.pdmodel.common.PDStream.getFilters : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getFilters : if $z0 == 0
org.apache.pdfbox.pdmodel.common.PDStream.getFilters : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getFilters : r2 = (org.apache.pdfbox.cos.COSName) r1
org.apache.pdfbox.pdmodel.common.PDStream.getFilters : r2 = (org.apache.pdfbox.cos.COSName) r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getFilters : $r5 = new org.apache.pdfbox.pdmodel.common.COSArrayList
org.apache.pdfbox.pdmodel.common.PDStream.getFilters : $r5 = new org.apache.pdfbox.pdmodel.common.COSArrayList >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getFilters : $r7 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream>
org.apache.pdfbox.pdmodel.common.PDStream.getFilters : $r7 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getFilters : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FILTER>
org.apache.pdfbox.pdmodel.common.PDStream.getFilters : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FILTER> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getFilters : specialinvoke $r5.<org.apache.pdfbox.pdmodel.common.COSArrayList: void <init>(java.lang.Object,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)>(r2, r2, $r7, $r6)
org.apache.pdfbox.pdmodel.common.PDStream.getFilters : specialinvoke $r5.<org.apache.pdfbox.pdmodel.common.COSArrayList: void <init>(java.lang.Object,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)>(r2, r2, $r7, $r6) >>>>>>>> org.apache.pdfbox.cos.COSArray.add : $r2 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.add : $r2 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.add : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSArray.add : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getFilters : r8 = $r5
org.apache.pdfbox.pdmodel.common.PDStream.getFilters : r8 = $r5 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getFilters : goto [?= return r8]
org.apache.pdfbox.pdmodel.common.PDStream.getFilters : goto [?= return r8] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getFilters : return r8
org.apache.pdfbox.pdmodel.common.PDStream.getFilters : return r8 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : if r1 != null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : if r1 != null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DCT_DECODE>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DCT_DECODE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $z0 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>($r3)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $z0 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.contains : $r2 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: java.util.List actual>
org.apache.pdfbox.pdmodel.common.COSArrayList.contains : $r2 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: java.util.List actual> >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.contains : $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.common.COSArrayList.contains : $z0 = interfaceinvoke $r2.<java.util.List: boolean contains(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.contains : return $z0
org.apache.pdfbox.pdmodel.common.COSArrayList.contains : return $z0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : if $z0 == 0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName JPX_DECODE>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName JPX_DECODE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $z1 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>($r4)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $z1 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>($r4) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : if $z1 == 0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CCITTFAX_DECODE>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CCITTFAX_DECODE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $z2 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>($r5)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $z2 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : if $z2 == 0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FLATE_DECODE>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FLATE_DECODE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $z3 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>($r6)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : $z3 = interfaceinvoke r1.<java.util.List: boolean contains(java.lang.Object)>($r6) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : if $z3 != 0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : if $z3 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : return "png"
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSuffix : return "png" >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.String)>(r1, $r11)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.String)>(r1, $r11) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : $r2 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace colorSpace>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : $r2 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace colorSpace> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : if $r2 != null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : if $r2 != null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORSPACE>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORSPACE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CS>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CS> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : r1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r6, $r5)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : r1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r6, $r5) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : if r1 == null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : $r9 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.PDResources resources>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : $r9 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.PDResources resources> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : $r10 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace create(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.pdmodel.PDResources)>(r1, $r9)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : $r10 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace create(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.pdmodel.PDResources)>(r1, $r9) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r2 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace create(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.pdmodel.PDResources,boolean)>(r0, r1, 0)
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r2 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace create(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.pdmodel.PDResources,boolean)>(r0, r1, 0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $z1 = r0 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $z1 = r0 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if $z1 == 0
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $z2 = r0 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $z2 = r0 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if $z2 == 0
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : r65 = (org.apache.pdfbox.cos.COSName) r0
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : r65 = (org.apache.pdfbox.cos.COSName) r0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if r1 == null
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r67 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICECMYK>
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r67 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICECMYK> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if r65 != $r67
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if r65 != $r67 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r35 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICERGB>
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r35 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICERGB> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if r65 != $r35
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if r65 != $r35 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r53 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB INSTANCE>
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r53 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB INSTANCE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : return $r53
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : return $r53 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : return $r2
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace colorSpace> = $r10
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace colorSpace> = $r10 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : goto [?= $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace colorSpace>]
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : goto [?= $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace colorSpace>] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace colorSpace>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace colorSpace> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : return $r3
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorSpace : return $r3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r13 = virtualinvoke $r12.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.lang.String getName()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r13 = virtualinvoke $r12.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.String)>(r2, $r13)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.String)>(r2, $r13) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r14 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.awt.image.BufferedImage getImage()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r14 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.awt.image.BufferedImage getImage()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.lang.ref.SoftReference cachedImage>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.lang.ref.SoftReference cachedImage> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : if $r3 == null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : if $r3 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSArray getColorKeyMask()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSArray getColorKeyMask()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorKeyMask : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorKeyMask : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorKeyMask : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName MASK>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorKeyMask : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName MASK> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorKeyMask : r1 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r3)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorKeyMask : r1 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorKeyMask : $z0 = r1 instanceof org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorKeyMask : $z0 = r1 instanceof org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorKeyMask : if $z0 == 0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorKeyMask : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorKeyMask : return null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getColorKeyMask : return null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : r10 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader: java.awt.image.BufferedImage getRGBImage(org.apache.pdfbox.pdmodel.graphics.image.PDImage,org.apache.pdfbox.cos.COSArray)>(r0, $r4)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : r10 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader: java.awt.image.BufferedImage getRGBImage(org.apache.pdfbox.pdmodel.graphics.image.PDImage,org.apache.pdfbox.cos.COSArray)>(r0, $r4) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : $z0 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: boolean isEmpty()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : $z0 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isEmpty : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.common.PDStream getStream()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isEmpty : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.common.PDStream getStream()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isEmpty : $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isEmpty : $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isEmpty : $l0 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: long getLength()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isEmpty : $l0 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: long getLength()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isEmpty : $b1 = $l0 cmp 0L
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isEmpty : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isEmpty : if $b1 != 0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isEmpty : if $b1 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isEmpty : $z0 = 0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isEmpty : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isEmpty : return $z0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.isEmpty : return $z0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : if $z0 == 0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : r2 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : r2 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : i0 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: int getNumberOfComponents()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : i0 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: int getNumberOfComponents()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getNumberOfComponents : return 3
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getNumberOfComponents : return 3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : i1 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : i1 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : i2 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : i2 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : i3 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getBitsPerComponent()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : i3 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getBitsPerComponent()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : r3 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader: float[] getDecodeArray(org.apache.pdfbox.pdmodel.graphics.image.PDImage)>(r0)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : r3 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader: float[] getDecodeArray(org.apache.pdfbox.pdmodel.graphics.image.PDImage)>(r0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getDecodeArray : r1 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: org.apache.pdfbox.cos.COSArray getDecode()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getDecodeArray : r1 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: org.apache.pdfbox.cos.COSArray getDecode()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getDecode : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getDecode : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getDecode : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DECODE>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getDecode : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DECODE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getDecode : r1 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r3)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getDecode : r1 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getDecode : $z0 = r1 instanceof org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getDecode : $z0 = r1 instanceof org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getDecode : if $z0 == 0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getDecode : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getDecode : return null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getDecode : return null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getDecodeArray : r18 = null
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getDecodeArray : r18 = null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getDecodeArray : if r1 == null
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getDecodeArray : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getDecodeArray : if r18 != null
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getDecodeArray : if r18 != null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getDecodeArray : $r2 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getDecodeArray : $r2 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getDecodeArray : $i1 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getBitsPerComponent()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getDecodeArray : $i1 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getBitsPerComponent()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getDecodeArray : $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: float[] getDefaultDecode(int)>($i1)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getDecodeArray : $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: float[] getDefaultDecode(int)>($i1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getDefaultDecode : $r1 = newarray (float)[6]
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getDefaultDecode : $r1 = newarray (float)[6] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getDefaultDecode : $r1[0] = 0.0F
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getDefaultDecode : $r1[0] = 0.0F >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getDefaultDecode : $r1[1] = 1.0F
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getDefaultDecode : $r1[1] = 1.0F >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getDefaultDecode : $r1[2] = 0.0F
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getDefaultDecode : $r1[2] = 0.0F >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getDefaultDecode : $r1[3] = 1.0F
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getDefaultDecode : $r1[3] = 1.0F >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getDefaultDecode : $r1[4] = 0.0F
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getDefaultDecode : $r1[4] = 0.0F >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getDefaultDecode : $r1[5] = 1.0F
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getDefaultDecode : $r1[5] = 1.0F >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getDefaultDecode : return $r1
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.getDefaultDecode : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getDecodeArray : return $r3
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getDecodeArray : return $r3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : if i1 <= 0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : if i1 <= 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : if i2 > 0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : if i2 > 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : $r7 = new java.awt.Point
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : $r7 = new java.awt.Point >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : specialinvoke $r7.<java.awt.Point: void <init>(int,int)>(0, 0)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : specialinvoke $r7.<java.awt.Point: void <init>(int,int)>(0, 0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : r4 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createBandedRaster(int,int,int,int,java.awt.Point)>(0, i1, i2, i0, $r7)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : r4 = staticinvoke <java.awt.image.Raster: java.awt.image.WritableRaster createBandedRaster(int,int,int,int,java.awt.Point)>(0, i1, i2, i0, $r7) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : $r8 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : $r8 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : r5 = virtualinvoke $r8.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: float[] getDefaultDecode(int)>(8)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : r5 = virtualinvoke $r8.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: float[] getDefaultDecode(int)>(8) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : if i3 != 8
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : if i3 != 8 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : $z1 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>(r3, r5)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : $z1 = staticinvoke <java.util.Arrays: boolean equals(float[],float[])>(r3, r5) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : if $z1 == 0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : if r1 != null
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : if r1 != null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : $r10 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader: java.awt.image.BufferedImage from8bit(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.image.WritableRaster)>(r0, r4)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : $r10 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader: java.awt.image.BufferedImage from8bit(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.image.WritableRaster)>(r0, r4) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : r2 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: java.io.InputStream createInputStream()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : r2 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: java.io.InputStream createInputStream()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createInputStream : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.common.PDStream getStream()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createInputStream : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.common.PDStream getStream()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createInputStream : $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSInputStream createInputStream()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createInputStream : $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSInputStream createInputStream()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream>
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSInputStream createInputStream()>()
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSInputStream createInputStream()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>()
org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.checkClosed : $r2 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.checkClosed : $r2 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.checkClosed : $z0 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccess: boolean isClosed()>()
org.apache.pdfbox.cos.COSStream.checkClosed : $z0 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccess: boolean isClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isClosed : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.isClosed : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isClosed : if $r1 != null
org.apache.pdfbox.io.ScratchFileBuffer.isClosed : if $r1 != null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isClosed : $z0 = 0
org.apache.pdfbox.io.ScratchFileBuffer.isClosed : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isClosed : return $z0
org.apache.pdfbox.io.ScratchFileBuffer.isClosed : return $z0 >>>>>>>> org.apache.pdfbox.cos.COSStream.checkClosed : if $z0 == 0
org.apache.pdfbox.cos.COSStream.checkClosed : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting>
org.apache.pdfbox.cos.COSStream.createInputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : if $z0 == 0
org.apache.pdfbox.cos.COSStream.createInputStream : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void ensureRandomAccessExists(boolean)>(1)
org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void ensureRandomAccessExists(boolean)>(1) >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : if $r1 != null
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : if $r1 != null >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $r2 = new org.apache.pdfbox.io.RandomAccessInputStream
org.apache.pdfbox.cos.COSStream.createInputStream : $r2 = new org.apache.pdfbox.io.RandomAccessInputStream >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $r3 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.createInputStream : $r3 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke $r2.<org.apache.pdfbox.io.RandomAccessInputStream: void <init>(org.apache.pdfbox.io.RandomAccessRead)>($r3)
org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke $r2.<org.apache.pdfbox.io.RandomAccessInputStream: void <init>(org.apache.pdfbox.io.RandomAccessRead)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $r4 = specialinvoke r0.<org.apache.pdfbox.cos.COSStream: java.util.List getFilterList()>()
org.apache.pdfbox.cos.COSStream.createInputStream : $r4 = specialinvoke r0.<org.apache.pdfbox.cos.COSStream: java.util.List getFilterList()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : $r5 = new java.util.ArrayList
org.apache.pdfbox.cos.COSStream.getFilterList : $r5 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.cos.COSStream.getFilterList : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getFilters()>()
org.apache.pdfbox.cos.COSStream.getFilterList : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getFilters()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSStream.getFilterList : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : if $z0 == 0
org.apache.pdfbox.cos.COSStream.getFilterList : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : $r10 = <org.apache.pdfbox.filter.FilterFactory: org.apache.pdfbox.filter.FilterFactory INSTANCE>
org.apache.pdfbox.cos.COSStream.getFilterList : $r10 = <org.apache.pdfbox.filter.FilterFactory: org.apache.pdfbox.filter.FilterFactory INSTANCE> >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : $r9 = (org.apache.pdfbox.cos.COSName) r2
org.apache.pdfbox.cos.COSStream.getFilterList : $r9 = (org.apache.pdfbox.cos.COSName) r2 >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : $r11 = virtualinvoke $r10.<org.apache.pdfbox.filter.FilterFactory: org.apache.pdfbox.filter.Filter getFilter(org.apache.pdfbox.cos.COSName)>($r9)
org.apache.pdfbox.cos.COSStream.getFilterList : $r11 = virtualinvoke $r10.<org.apache.pdfbox.filter.FilterFactory: org.apache.pdfbox.filter.Filter getFilter(org.apache.pdfbox.cos.COSName)>($r9) >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r11)
org.apache.pdfbox.cos.COSStream.getFilterList : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r11) >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : goto [?= return $r5]
org.apache.pdfbox.cos.COSStream.getFilterList : goto [?= return $r5] >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : return $r5
org.apache.pdfbox.cos.COSStream.getFilterList : return $r5 >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $r5 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSStream.createInputStream : $r5 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $r6 = staticinvoke <org.apache.pdfbox.cos.COSInputStream: org.apache.pdfbox.cos.COSInputStream create(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.InputStream,org.apache.pdfbox.io.ScratchFile)>($r4, r0, $r2, $r5)
org.apache.pdfbox.cos.COSStream.createInputStream : $r6 = staticinvoke <org.apache.pdfbox.cos.COSInputStream: org.apache.pdfbox.cos.COSInputStream create(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.InputStream,org.apache.pdfbox.io.ScratchFile)>($r4, r0, $r2, $r5) >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : $r5 = new java.util.ArrayList
org.apache.pdfbox.cos.COSInputStream.create : $r5 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.cos.COSInputStream.create : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : r16 = r2
org.apache.pdfbox.cos.COSInputStream.create : r16 = r2 >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>()
org.apache.pdfbox.cos.COSInputStream.create : $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : if $z0 == 0
org.apache.pdfbox.cos.COSInputStream.create : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : i1 = 0
org.apache.pdfbox.cos.COSInputStream.create : i1 = 0 >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : $i0 = interfaceinvoke r0.<java.util.List: int size()>()
org.apache.pdfbox.cos.COSInputStream.create : $i0 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : if i1 >= $i0
org.apache.pdfbox.cos.COSInputStream.create : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : if r3 == null
org.apache.pdfbox.cos.COSInputStream.create : if r3 == null >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : r17 = virtualinvoke r3.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer()>()
org.apache.pdfbox.cos.COSInputStream.create : r17 = virtualinvoke r3.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer()>() >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : $r12 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1)
org.apache.pdfbox.cos.COSInputStream.create : $r12 = interfaceinvoke r0.<java.util.List: java.lang.Object get(int)>(i1) >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : $r14 = (org.apache.pdfbox.filter.Filter) $r12
org.apache.pdfbox.cos.COSInputStream.create : $r14 = (org.apache.pdfbox.filter.Filter) $r12 >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : $r13 = new org.apache.pdfbox.io.RandomAccessOutputStream
org.apache.pdfbox.cos.COSInputStream.create : $r13 = new org.apache.pdfbox.io.RandomAccessOutputStream >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : specialinvoke $r13.<org.apache.pdfbox.io.RandomAccessOutputStream: void <init>(org.apache.pdfbox.io.RandomAccessWrite)>(r17)
org.apache.pdfbox.cos.COSInputStream.create : specialinvoke $r13.<org.apache.pdfbox.io.RandomAccessOutputStream: void <init>(org.apache.pdfbox.io.RandomAccessWrite)>(r17) >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : r18 = virtualinvoke $r14.<org.apache.pdfbox.filter.Filter: org.apache.pdfbox.filter.DecodeResult decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)>(r16, $r13, r1, i1)
org.apache.pdfbox.cos.COSInputStream.create : r18 = virtualinvoke $r14.<org.apache.pdfbox.filter.Filter: org.apache.pdfbox.filter.DecodeResult decode(java.io.InputStream,java.io.OutputStream,org.apache.pdfbox.cos.COSDictionary,int)>(r16, $r13, r1, i1) >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decode : i4 = -1
org.apache.pdfbox.filter.FlateFilter.decode : i4 = -1 >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decode : r4 = virtualinvoke r0.<org.apache.pdfbox.filter.FlateFilter: org.apache.pdfbox.cos.COSDictionary getDecodeParams(org.apache.pdfbox.cos.COSDictionary,int)>(r3, i0)
org.apache.pdfbox.filter.FlateFilter.decode : r4 = virtualinvoke r0.<org.apache.pdfbox.filter.FlateFilter: org.apache.pdfbox.cos.COSDictionary getDecodeParams(org.apache.pdfbox.cos.COSDictionary,int)>(r3, i0) >>>>>>>> org.apache.pdfbox.filter.Filter.getDecodeParams : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DECODE_PARMS>
org.apache.pdfbox.filter.Filter.getDecodeParams : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DECODE_PARMS> >>>>>>>> org.apache.pdfbox.filter.Filter.getDecodeParams : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DP>
org.apache.pdfbox.filter.Filter.getDecodeParams : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DP> >>>>>>>> org.apache.pdfbox.filter.Filter.getDecodeParams : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r5, $r4)
org.apache.pdfbox.filter.Filter.getDecodeParams : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r5, $r4) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r2)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r2) >>>>>>>> org.apache.pdfbox.filter.Filter.getDecodeParams : $z0 = r2 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.filter.Filter.getDecodeParams : $z0 = r2 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.filter.Filter.getDecodeParams : if $z0 == 0
org.apache.pdfbox.filter.Filter.getDecodeParams : if $z0 == 0 >>>>>>>> org.apache.pdfbox.filter.Filter.getDecodeParams : $z1 = r2 instanceof org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.filter.Filter.getDecodeParams : $z1 = r2 instanceof org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.filter.Filter.getDecodeParams : if $z1 == 0
org.apache.pdfbox.filter.Filter.getDecodeParams : if $z1 == 0 >>>>>>>> org.apache.pdfbox.filter.Filter.getDecodeParams : if r2 == null
org.apache.pdfbox.filter.Filter.getDecodeParams : if r2 == null >>>>>>>> org.apache.pdfbox.filter.Filter.getDecodeParams : $r16 = new org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.filter.Filter.getDecodeParams : $r16 = new org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.filter.Filter.getDecodeParams : specialinvoke $r16.<org.apache.pdfbox.cos.COSDictionary: void <init>()>()
org.apache.pdfbox.filter.Filter.getDecodeParams : specialinvoke $r16.<org.apache.pdfbox.cos.COSDictionary: void <init>()>() >>>>>>>> org.apache.pdfbox.filter.Filter.getDecodeParams : return $r16
org.apache.pdfbox.filter.Filter.getDecodeParams : return $r16 >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decode : if r4 == null
org.apache.pdfbox.filter.FlateFilter.decode : if r4 == null >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decode : $r14 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREDICTOR>
org.apache.pdfbox.filter.FlateFilter.decode : $r14 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREDICTOR> >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decode : i4 = virtualinvoke r4.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName)>($r14)
org.apache.pdfbox.filter.FlateFilter.decode : i4 = virtualinvoke r4.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName)>($r14) >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 1
org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : goto [?= return $z0]
org.apache.pdfbox.util.SmallMap.isEmpty : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decode : if i4 <= 1
org.apache.pdfbox.filter.FlateFilter.decode : if i4 <= 1 >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decode : specialinvoke r0.<org.apache.pdfbox.filter.FlateFilter: void decompress(java.io.InputStream,java.io.OutputStream)>(r1, r2)
org.apache.pdfbox.filter.FlateFilter.decode : specialinvoke r0.<org.apache.pdfbox.filter.FlateFilter: void decompress(java.io.InputStream,java.io.OutputStream)>(r1, r2) >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : r3 = newarray (byte)[2048]
org.apache.pdfbox.filter.FlateFilter.decompress : r3 = newarray (byte)[2048] >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r3, 0, 2)
org.apache.pdfbox.filter.FlateFilter.decompress : virtualinvoke r1.<java.io.InputStream: int read(byte[],int,int)>(r3, 0, 2) >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessInputStream: void restorePosition()>()
org.apache.pdfbox.io.RandomAccessInputStream.read : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessInputStream: void restorePosition()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : $r1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input>
org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : $r1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : $l0 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position>
org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : $l0 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>($l0)
org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>($l0) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.seek : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b3 = l0 cmp $l2
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b3 = l0 cmp $l2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b3 <= 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b3 <= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b4 = l0 cmp 0L
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b4 = l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b4 >= 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b4 >= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b6 = l0 cmp $l5
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b6 = l0 cmp $l5 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b6 < 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b6 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l23 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l23 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i21 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i21 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l22 = (long) $i21
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l22 = (long) $i21 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l24 = $l23 + $l22
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l24 = $l23 + $l22 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b25 = l0 cmp $l24
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b25 = l0 cmp $l24 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b25 > 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b25 > 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l26 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l26 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l27 = l0 - $l26
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l27 = l0 - $l26 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i28 = (int) $l27
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i28 = (int) $l27 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i28
org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i28 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : goto [?= return]
org.apache.pdfbox.io.ScratchFileBuffer.seek : goto [?= return] >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $r2 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input>
org.apache.pdfbox.io.RandomAccessInputStream.read : $r2 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $z0 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>()
org.apache.pdfbox.io.RandomAccessInputStream.read : $z0 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l1 = (long) $i0
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l1 = (long) $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l4 = $l2 + $l1
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l4 = $l2 + $l1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $b5 = $l4 cmp $l3
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $b5 = $l4 cmp $l3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : if $b5 < 0
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : if $b5 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $z0 = 0
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : return $z0
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : return $z0 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : if $z0 == 0
org.apache.pdfbox.io.RandomAccessInputStream.read : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $r3 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input>
org.apache.pdfbox.io.RandomAccessInputStream.read : $r3 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : i2 = interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: int read(byte[],int,int)>(r1, i0, i1)
org.apache.pdfbox.io.RandomAccessInputStream.read : i2 = interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: int read(byte[],int,int)>(r1, i0, i1) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.read : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.read : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l4 = (long) $i3
org.apache.pdfbox.io.ScratchFileBuffer.read : $l4 = (long) $i3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l7 = $l5 + $l4
org.apache.pdfbox.io.ScratchFileBuffer.read : $l7 = $l5 + $l4 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.read : $l6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $b8 = $l7 cmp $l6
org.apache.pdfbox.io.ScratchFileBuffer.read : $b8 = $l7 cmp $l6 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : if $b8 < 0
org.apache.pdfbox.io.ScratchFileBuffer.read : if $b8 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l15 = (long) i1
org.apache.pdfbox.io.ScratchFileBuffer.read : $l15 = (long) i1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.read : $l13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.read : $l11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l10 = (long) $i9
org.apache.pdfbox.io.ScratchFileBuffer.read : $l10 = (long) $i9 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l12 = $l11 + $l10
org.apache.pdfbox.io.ScratchFileBuffer.read : $l12 = $l11 + $l10 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l14 = $l13 - $l12
org.apache.pdfbox.io.ScratchFileBuffer.read : $l14 = $l13 - $l12 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l16 = staticinvoke <java.lang.Math: long min(long,long)>($l15, $l14)
org.apache.pdfbox.io.ScratchFileBuffer.read : $l16 = staticinvoke <java.lang.Math: long min(long,long)>($l15, $l14) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i23 = (int) $l16
org.apache.pdfbox.io.ScratchFileBuffer.read : i23 = (int) $l16 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i24 = 0
org.apache.pdfbox.io.ScratchFileBuffer.read : i24 = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i25 = i0
org.apache.pdfbox.io.ScratchFileBuffer.read : i25 = i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : if i23 <= 0
org.apache.pdfbox.io.ScratchFileBuffer.read : if i23 <= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $z0 = specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean ensureAvailableBytesInPage(boolean)>(0)
org.apache.pdfbox.io.ScratchFileBuffer.read : $z0 = specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean ensureAvailableBytesInPage(boolean)>(0) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : if $z0 != 0
org.apache.pdfbox.io.ScratchFileBuffer.read : if $z0 != 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i17 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i17 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i19 = $i18 - $i17
org.apache.pdfbox.io.ScratchFileBuffer.read : $i19 = $i18 - $i17 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i2 = staticinvoke <java.lang.Math: int min(int,int)>(i23, $i19)
org.apache.pdfbox.io.ScratchFileBuffer.read : i2 = staticinvoke <java.lang.Math: int min(int,int)>(i23, $i19) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i20 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i20 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i20, r1, i25, i2)
org.apache.pdfbox.io.ScratchFileBuffer.read : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i20, r1, i25, i2) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i21 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i21 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i22 = $i21 + i2
org.apache.pdfbox.io.ScratchFileBuffer.read : $i22 = $i21 + i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i22
org.apache.pdfbox.io.ScratchFileBuffer.read : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i22 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i24 = i24 + i2
org.apache.pdfbox.io.ScratchFileBuffer.read : i24 = i24 + i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i25 = i25 + i2
org.apache.pdfbox.io.ScratchFileBuffer.read : i25 = i25 + i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i23 = i23 - i2
org.apache.pdfbox.io.ScratchFileBuffer.read : i23 = i23 - i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : goto [?= (branch)]
org.apache.pdfbox.io.ScratchFileBuffer.read : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : return i24
org.apache.pdfbox.io.ScratchFileBuffer.read : return i24 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $l4 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position>
org.apache.pdfbox.io.RandomAccessInputStream.read : $l4 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $l3 = (long) i2
org.apache.pdfbox.io.RandomAccessInputStream.read : $l3 = (long) i2 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $l5 = $l4 + $l3
org.apache.pdfbox.io.RandomAccessInputStream.read : $l5 = $l4 + $l3 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position> = $l5
org.apache.pdfbox.io.RandomAccessInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position> = $l5 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : return i2
org.apache.pdfbox.io.RandomAccessInputStream.read : return i2 >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : i2 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r3)
org.apache.pdfbox.filter.FlateFilter.decompress : i2 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r3) >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : if i2 <= 0
org.apache.pdfbox.filter.FlateFilter.decompress : if i2 <= 0 >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : $r7 = new java.util.zip.Inflater
org.apache.pdfbox.filter.FlateFilter.decompress : $r7 = new java.util.zip.Inflater >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : specialinvoke $r7.<java.util.zip.Inflater: void <init>(boolean)>(1)
org.apache.pdfbox.filter.FlateFilter.decompress : specialinvoke $r7.<java.util.zip.Inflater: void <init>(boolean)>(1) >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : virtualinvoke $r7.<java.util.zip.Inflater: void setInput(byte[],int,int)>(r3, 0, i2)
org.apache.pdfbox.filter.FlateFilter.decompress : virtualinvoke $r7.<java.util.zip.Inflater: void setInput(byte[],int,int)>(r3, 0, i2) >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : r5 = newarray (byte)[1024]
org.apache.pdfbox.filter.FlateFilter.decompress : r5 = newarray (byte)[1024] >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : z2 = 0
org.apache.pdfbox.filter.FlateFilter.decompress : z2 = 0 >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : i3 = virtualinvoke $r7.<java.util.zip.Inflater: int inflate(byte[])>(r5)
org.apache.pdfbox.filter.FlateFilter.decompress : i3 = virtualinvoke $r7.<java.util.zip.Inflater: int inflate(byte[])>(r5) >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : goto [?= (branch)]
org.apache.pdfbox.filter.FlateFilter.decompress : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : if i3 == 0
org.apache.pdfbox.filter.FlateFilter.decompress : if i3 == 0 >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r5, 0, i3)
org.apache.pdfbox.filter.FlateFilter.decompress : virtualinvoke r2.<java.io.OutputStream: void write(byte[],int,int)>(r5, 0, i3) >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : z2 = 1
org.apache.pdfbox.filter.FlateFilter.decompress : z2 = 1 >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : goto [?= i3 = virtualinvoke $r7.<java.util.zip.Inflater: int inflate(byte[])>(r5)]
org.apache.pdfbox.filter.FlateFilter.decompress : goto [?= i3 = virtualinvoke $r7.<java.util.zip.Inflater: int inflate(byte[])>(r5)] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $z1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean currentPageContentChanged>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $z1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean currentPageContentChanged> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : if $z1 == 0
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : if $z1 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $r6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $r6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i14 = $r4[$i13]
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i14 = $r4[$i13] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : virtualinvoke $r6.<org.apache.pdfbox.io.ScratchFile: void writePage(int,byte[])>($i14, $r5)
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : virtualinvoke $r6.<org.apache.pdfbox.io.ScratchFile: void writePage(int,byte[])>($i14, $r5) >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : if i0 < 0
org.apache.pdfbox.io.ScratchFile.writePage : if i0 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : $i3 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.writePage : $i3 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : if i0 < $i3
org.apache.pdfbox.io.ScratchFile.writePage : if i0 < $i3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : $i4 = lengthof r1
org.apache.pdfbox.io.ScratchFile.writePage : $i4 = lengthof r1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : if $i4 == 4096
org.apache.pdfbox.io.ScratchFile.writePage : if $i4 == 4096 >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : $i5 = r0.<org.apache.pdfbox.io.ScratchFile: int inMemoryMaxPageCount>
org.apache.pdfbox.io.ScratchFile.writePage : $i5 = r0.<org.apache.pdfbox.io.ScratchFile: int inMemoryMaxPageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : if i0 >= $i5
org.apache.pdfbox.io.ScratchFile.writePage : if i0 >= $i5 >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean maxMainMemoryIsRestricted>
org.apache.pdfbox.io.ScratchFile.writePage : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean maxMainMemoryIsRestricted> >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : if $z0 == 0
org.apache.pdfbox.io.ScratchFile.writePage : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : $r14 = r0.<org.apache.pdfbox.io.ScratchFile: java.lang.Object ioLock>
org.apache.pdfbox.io.ScratchFile.writePage : $r14 = r0.<org.apache.pdfbox.io.ScratchFile: java.lang.Object ioLock> >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : entermonitor $r14
org.apache.pdfbox.io.ScratchFile.writePage : entermonitor $r14 >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : $r15 = r0.<org.apache.pdfbox.io.ScratchFile: byte[][] inMemoryPages>
org.apache.pdfbox.io.ScratchFile.writePage : $r15 = r0.<org.apache.pdfbox.io.ScratchFile: byte[][] inMemoryPages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : $r15[i0] = r1
org.apache.pdfbox.io.ScratchFile.writePage : $r15[i0] = r1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : exitmonitor $r14
org.apache.pdfbox.io.ScratchFile.writePage : exitmonitor $r14 >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : goto [?= virtualinvoke r0.<org.apache.pdfbox.io.ScratchFile: void checkClosed()>()]
org.apache.pdfbox.io.ScratchFile.writePage : goto [?= virtualinvoke r0.<org.apache.pdfbox.io.ScratchFile: void checkClosed()>()] >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFile: void checkClosed()>()
org.apache.pdfbox.io.ScratchFile.writePage : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFile: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.writePage : goto [?= return]
org.apache.pdfbox.io.ScratchFile.writePage : goto [?= return] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean currentPageContentChanged> = 0
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean currentPageContentChanged> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i4 = $i2 + 1
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i4 = $i2 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : if $i4 >= $i3
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : if $i4 >= $i3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : if z0 == 0
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : if z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void addPage()>()
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void addPage()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : goto [?= return 1]
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : goto [?= return 1] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i3 = lengthof $r3
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i3 = lengthof $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : i7 = $i3 * 2
org.apache.pdfbox.io.ScratchFileBuffer.addPage : i7 = $i3 * 2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i4 = lengthof $r4
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i4 = lengthof $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : if i7 >= $i4
org.apache.pdfbox.io.ScratchFileBuffer.addPage : if i7 >= $i4 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r1 = newarray (int)[i7]
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r1 = newarray (int)[i7] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, 0, $i5)
org.apache.pdfbox.io.ScratchFileBuffer.addPage : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r5, 0, r1, 0, $i5) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> = r1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> = r1 >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : $z0 = virtualinvoke $r7.<java.util.zip.Inflater: boolean finished()>()
org.apache.pdfbox.filter.FlateFilter.decompress : $z0 = virtualinvoke $r7.<java.util.zip.Inflater: boolean finished()>() >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : if $z0 != 0
org.apache.pdfbox.filter.FlateFilter.decompress : if $z0 != 0 >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : virtualinvoke $r7.<java.util.zip.Inflater: void end()>()
org.apache.pdfbox.filter.FlateFilter.decompress : virtualinvoke $r7.<java.util.zip.Inflater: void end()>() >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decompress : virtualinvoke r2.<java.io.OutputStream: void flush()>()
org.apache.pdfbox.filter.FlateFilter.decompress : virtualinvoke r2.<java.io.OutputStream: void flush()>() >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decode : goto [?= $r7 = new org.apache.pdfbox.filter.DecodeResult]
org.apache.pdfbox.filter.FlateFilter.decode : goto [?= $r7 = new org.apache.pdfbox.filter.DecodeResult] >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decode : $r7 = new org.apache.pdfbox.filter.DecodeResult
org.apache.pdfbox.filter.FlateFilter.decode : $r7 = new org.apache.pdfbox.filter.DecodeResult >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decode : specialinvoke $r7.<org.apache.pdfbox.filter.DecodeResult: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r3)
org.apache.pdfbox.filter.FlateFilter.decode : specialinvoke $r7.<org.apache.pdfbox.filter.DecodeResult: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r3) >>>>>>>> org.apache.pdfbox.filter.FlateFilter.decode : return $r7
org.apache.pdfbox.filter.FlateFilter.decode : return $r7 >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r18)
org.apache.pdfbox.cos.COSInputStream.create : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>(r18) >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : $r15 = new org.apache.pdfbox.cos.COSInputStream$1
org.apache.pdfbox.cos.COSInputStream.create : $r15 = new org.apache.pdfbox.cos.COSInputStream$1 >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : specialinvoke $r15.<org.apache.pdfbox.cos.COSInputStream$1: void <init>(org.apache.pdfbox.io.RandomAccessRead,org.apache.pdfbox.io.RandomAccess)>(r17, r17)
org.apache.pdfbox.cos.COSInputStream.create : specialinvoke $r15.<org.apache.pdfbox.cos.COSInputStream$1: void <init>(org.apache.pdfbox.io.RandomAccessRead,org.apache.pdfbox.io.RandomAccess)>(r17, r17) >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : r16 = $r15
org.apache.pdfbox.cos.COSInputStream.create : r16 = $r15 >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : goto [?= i1 = i1 + 1]
org.apache.pdfbox.cos.COSInputStream.create : goto [?= i1 = i1 + 1] >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : i1 = i1 + 1
org.apache.pdfbox.cos.COSInputStream.create : i1 = i1 + 1 >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : goto [?= $i0 = interfaceinvoke r0.<java.util.List: int size()>()]
org.apache.pdfbox.cos.COSInputStream.create : goto [?= $i0 = interfaceinvoke r0.<java.util.List: int size()>()] >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : $r6 = new org.apache.pdfbox.cos.COSInputStream
org.apache.pdfbox.cos.COSInputStream.create : $r6 = new org.apache.pdfbox.cos.COSInputStream >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : specialinvoke $r6.<org.apache.pdfbox.cos.COSInputStream: void <init>(java.io.InputStream,java.util.List)>(r16, $r5)
org.apache.pdfbox.cos.COSInputStream.create : specialinvoke $r6.<org.apache.pdfbox.cos.COSInputStream: void <init>(java.io.InputStream,java.util.List)>(r16, $r5) >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : return $r6
org.apache.pdfbox.cos.COSInputStream.create : return $r6 >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : return $r6
org.apache.pdfbox.cos.COSStream.createInputStream : return $r6 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : return $r2
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createInputStream : return $r2
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.createInputStream : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : $r6 = virtualinvoke r1.<java.awt.image.WritableRaster: java.awt.image.DataBuffer getDataBuffer()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : $r6 = virtualinvoke r1.<java.awt.image.WritableRaster: java.awt.image.DataBuffer getDataBuffer()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : $r7 = (java.awt.image.DataBufferByte) $r6
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : $r7 = (java.awt.image.DataBufferByte) $r6 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : r3 = virtualinvoke $r7.<java.awt.image.DataBufferByte: byte[][] getBankData()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : r3 = virtualinvoke $r7.<java.awt.image.DataBufferByte: byte[][] getBankData()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : i0 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : i0 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : i1 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : i1 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : $r8 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : $r8 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : i2 = virtualinvoke $r8.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: int getNumberOfComponents()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : i2 = virtualinvoke $r8.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: int getNumberOfComponents()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : i3 = i0 * i1
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : i3 = i0 * i1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : r4 = newarray (byte)[i2]
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : r4 = newarray (byte)[i2] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : i7 = 0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : i7 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : if i7 >= i3
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : if i7 >= i3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : virtualinvoke r2.<java.io.InputStream: int read(byte[])>(r4)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : virtualinvoke r2.<java.io.InputStream: int read(byte[])>(r4) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $z0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean currentPageContentChanged>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $z0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean currentPageContentChanged> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $z0 == 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $r6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $r6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $r4 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $r4 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i19 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i19 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i20 = $r4[$i19]
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i20 = $r4[$i19] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $r5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $r5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : virtualinvoke $r6.<org.apache.pdfbox.io.ScratchFile: void writePage(int,byte[])>($i20, $r5)
org.apache.pdfbox.io.ScratchFileBuffer.seek : virtualinvoke $r6.<org.apache.pdfbox.io.ScratchFile: void writePage(int,byte[])>($i20, $r5) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean currentPageContentChanged> = 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean currentPageContentChanged> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i7 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i7 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l8 = (long) $i7
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l8 = (long) $i7 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l9 = l0 / $l8
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l9 = l0 / $l8 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : i1 = (int) $l9
org.apache.pdfbox.io.ScratchFileBuffer.seek : i1 = (int) $l9 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i10 = $r1[i1]
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i10 = $r1[i1] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $r3 = virtualinvoke $r2.<org.apache.pdfbox.io.ScratchFile: byte[] readPage(int)>($i10)
org.apache.pdfbox.io.ScratchFileBuffer.seek : $r3 = virtualinvoke $r2.<org.apache.pdfbox.io.ScratchFile: byte[] readPage(int)>($i10) >>>>>>>> org.apache.pdfbox.io.ScratchFile.readPage : if i0 < 0
org.apache.pdfbox.io.ScratchFile.readPage : if i0 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.readPage : $i3 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.readPage : $i3 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.readPage : if i0 < $i3
org.apache.pdfbox.io.ScratchFile.readPage : if i0 < $i3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.readPage : $i4 = r0.<org.apache.pdfbox.io.ScratchFile: int inMemoryMaxPageCount>
org.apache.pdfbox.io.ScratchFile.readPage : $i4 = r0.<org.apache.pdfbox.io.ScratchFile: int inMemoryMaxPageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.readPage : if i0 >= $i4
org.apache.pdfbox.io.ScratchFile.readPage : if i0 >= $i4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.readPage : $r20 = r0.<org.apache.pdfbox.io.ScratchFile: byte[][] inMemoryPages>
org.apache.pdfbox.io.ScratchFile.readPage : $r20 = r0.<org.apache.pdfbox.io.ScratchFile: byte[][] inMemoryPages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.readPage : r28 = $r20[i0]
org.apache.pdfbox.io.ScratchFile.readPage : r28 = $r20[i0] >>>>>>>> org.apache.pdfbox.io.ScratchFile.readPage : if r28 != null
org.apache.pdfbox.io.ScratchFile.readPage : if r28 != null >>>>>>>> org.apache.pdfbox.io.ScratchFile.readPage : return r28
org.apache.pdfbox.io.ScratchFile.readPage : return r28 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r3
org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = i1
org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = i1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l14 = (long) $i11
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l14 = (long) $i11 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i12 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i12 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l13 = (long) $i12
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l13 = (long) $i12 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l15 = $l14 * $l13
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l15 = $l14 * $l13 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l15
org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l15 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l17 = l0 - $l16
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l17 = l0 - $l16 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i18 = (int) $l17
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i18 = (int) $l17 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i18
org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i18 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : i8 = 0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : i8 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : if i8 >= i2
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : if i8 >= i2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : $r10 = r3[i8]
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : $r10 = r3[i8] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : $i5 = 0 + i8
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : $i5 = 0 + i8 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : $b6 = r4[$i5]
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : $b6 = r4[$i5] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : $r10[i7] = $b6
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : $r10[i7] = $b6 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : i8 = i8 + 1
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : i8 = i8 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : i7 = i7 + 1
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : i7 = i7 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i6 = $i5 + 1
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i6 = $i5 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = $i6
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = $i6 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i7 = $r2[$i6]
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i7 = $r2[$i6] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $r3 = virtualinvoke $r1.<org.apache.pdfbox.io.ScratchFile: byte[] readPage(int)>($i7)
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $r3 = virtualinvoke $r1.<org.apache.pdfbox.io.ScratchFile: byte[] readPage(int)>($i7) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r3
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i8 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i8 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $l11 = (long) $i8
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $l11 = (long) $i8 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $l10 = (long) $i9
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $l10 = (long) $i9 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $l12 = $l11 * $l10
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $l12 = $l11 * $l10 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l12
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l12 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : $r9 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : $r9 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : r12 = virtualinvoke $r9.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.awt.image.BufferedImage toRGBImage(java.awt.image.WritableRaster)>(r1)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : r12 = virtualinvoke $r9.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.awt.image.BufferedImage toRGBImage(java.awt.image.WritableRaster)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: void init()>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: void init()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: java.awt.color.ColorSpace awtColorSpace>
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: java.awt.color.ColorSpace awtColorSpace> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : if $r3 == null
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.init : if $r3 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : $r3 = new java.awt.image.ComponentColorModel
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : $r3 = new java.awt.image.ComponentColorModel >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : $r4 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: java.awt.color.ColorSpace awtColorSpace>
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : $r4 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB: java.awt.color.ColorSpace awtColorSpace> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : $r5 = virtualinvoke r1.<java.awt.image.WritableRaster: java.awt.image.DataBuffer getDataBuffer()>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : $r5 = virtualinvoke r1.<java.awt.image.WritableRaster: java.awt.image.DataBuffer getDataBuffer()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : $i0 = virtualinvoke $r5.<java.awt.image.DataBuffer: int getDataType()>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : $i0 = virtualinvoke $r5.<java.awt.image.DataBuffer: int getDataType()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : specialinvoke $r3.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,boolean,boolean,int,int)>($r4, 0, 0, 1, $i0)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : specialinvoke $r3.<java.awt.image.ComponentColorModel: void <init>(java.awt.color.ColorSpace,boolean,boolean,int,int)>($r4, 0, 0, 1, $i0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : $r6 = new java.awt.image.BufferedImage
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : $r6 = new java.awt.image.BufferedImage >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : specialinvoke $r6.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r3, r1, 0, null)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : specialinvoke $r6.<java.awt.image.BufferedImage: void <init>(java.awt.image.ColorModel,java.awt.image.WritableRaster,boolean,java.util.Hashtable)>($r3, r1, 0, null) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : return $r6
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceRGB.toRGBImage : return $r6 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.Closeable)>(r2)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.Closeable)>(r2) >>>>>>>> org.apache.pdfbox.io.IOUtils.closeQuietly : if r0 == null
org.apache.pdfbox.io.IOUtils.closeQuietly : if r0 == null >>>>>>>> org.apache.pdfbox.io.IOUtils.closeQuietly : interfaceinvoke r0.<java.io.Closeable: void close()>()
org.apache.pdfbox.io.IOUtils.closeQuietly : interfaceinvoke r0.<java.io.Closeable: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSInputStream$1.close : $r1 = r0.<org.apache.pdfbox.cos.COSInputStream$1: org.apache.pdfbox.io.RandomAccess val$buffer>
org.apache.pdfbox.cos.COSInputStream$1.close : $r1 = r0.<org.apache.pdfbox.cos.COSInputStream$1: org.apache.pdfbox.io.RandomAccess val$buffer> >>>>>>>> org.apache.pdfbox.cos.COSInputStream$1.close : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccess: void close()>()
org.apache.pdfbox.cos.COSInputStream$1.close : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccess: void close()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : $r3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.close : $r3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.close : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.close : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : virtualinvoke $r3.<org.apache.pdfbox.io.ScratchFile: void markPagesAsFree(int[],int,int)>($r2, 0, $i0)
org.apache.pdfbox.io.ScratchFileBuffer.close : virtualinvoke $r3.<org.apache.pdfbox.io.ScratchFile: void markPagesAsFree(int[],int,int)>($r2, 0, $i0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : entermonitor $r4
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : entermonitor $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i5 = i0
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i5 = i0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i5 >= i1
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i5 >= i1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i2 = r1[i5]
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i2 = r1[i5] >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 < 0
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $i3 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $i3 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 >= $i3
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 >= $i3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $z0 = virtualinvoke $r5.<java.util.BitSet: boolean get(int)>(i2)
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $z0 = virtualinvoke $r5.<java.util.BitSet: boolean get(int)>(i2) >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if $z0 != 0
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if $z0 != 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : virtualinvoke $r6.<java.util.BitSet: void set(int)>(i2)
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : virtualinvoke $r6.<java.util.BitSet: void set(int)>(i2) >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $i4 = r0.<org.apache.pdfbox.io.ScratchFile: int inMemoryMaxPageCount>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $i4 = r0.<org.apache.pdfbox.io.ScratchFile: int inMemoryMaxPageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 >= $i4
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 >= $i4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: byte[][] inMemoryPages>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: byte[][] inMemoryPages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r7[i2] = null
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r7[i2] = null >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i5 = i5 + 1
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i5 = i5 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : goto [?= (branch)]
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : exitmonitor $r4
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : exitmonitor $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : goto [?= return]
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : goto [?= return] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> = null
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> = null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> = null
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> = null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = null
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = 0L
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = 0L >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = -1
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = -1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> = 0L
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> = 0L >>>>>>>> org.apache.pdfbox.io.IOUtils.closeQuietly : goto [?= return]
org.apache.pdfbox.io.IOUtils.closeQuietly : goto [?= return] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : return r12
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from8bit : return r12 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : return $r10
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : return $r10 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject getSoftMask()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject getSoftMask()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SMASK>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SMASK> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : $r4 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r3)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : $r4 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : r1 = (org.apache.pdfbox.cos.COSStream) $r4
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : r1 = (org.apache.pdfbox.cos.COSStream) $r4 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : if r1 == null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : $r5 = new org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : $r5 = new org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : $r6 = new org.apache.pdfbox.pdmodel.common.PDStream
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : $r6 = new org.apache.pdfbox.pdmodel.common.PDStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : specialinvoke $r6.<org.apache.pdfbox.pdmodel.common.PDStream: void <init>(org.apache.pdfbox.cos.COSStream)>(r1)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : specialinvoke $r6.<org.apache.pdfbox.pdmodel.common.PDStream: void <init>(org.apache.pdfbox.cos.COSStream)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : specialinvoke $r5.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: void <init>(org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.PDResources)>($r6, null)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : specialinvoke $r5.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: void <init>(org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.PDResources)>($r6, null) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.repair : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.repair : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.repair : $r3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSInputStream: org.apache.pdfbox.filter.DecodeResult getDecodeResult()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.repair : $r3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSInputStream: org.apache.pdfbox.filter.DecodeResult getDecodeResult()>() >>>>>>>> org.apache.pdfbox.cos.COSInputStream.getDecodeResult : $r1 = r0.<org.apache.pdfbox.cos.COSInputStream: java.util.List decodeResults>
org.apache.pdfbox.cos.COSInputStream.getDecodeResult : $r1 = r0.<org.apache.pdfbox.cos.COSInputStream: java.util.List decodeResults> >>>>>>>> org.apache.pdfbox.cos.COSInputStream.getDecodeResult : $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>()
org.apache.pdfbox.cos.COSInputStream.getDecodeResult : $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.cos.COSInputStream.getDecodeResult : if $z0 == 0
org.apache.pdfbox.cos.COSInputStream.getDecodeResult : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSInputStream.getDecodeResult : $r3 = r0.<org.apache.pdfbox.cos.COSInputStream: java.util.List decodeResults>
org.apache.pdfbox.cos.COSInputStream.getDecodeResult : $r3 = r0.<org.apache.pdfbox.cos.COSInputStream: java.util.List decodeResults> >>>>>>>> org.apache.pdfbox.cos.COSInputStream.getDecodeResult : $r2 = r0.<org.apache.pdfbox.cos.COSInputStream: java.util.List decodeResults>
org.apache.pdfbox.cos.COSInputStream.getDecodeResult : $r2 = r0.<org.apache.pdfbox.cos.COSInputStream: java.util.List decodeResults> >>>>>>>> org.apache.pdfbox.cos.COSInputStream.getDecodeResult : $i0 = interfaceinvoke $r2.<java.util.List: int size()>()
org.apache.pdfbox.cos.COSInputStream.getDecodeResult : $i0 = interfaceinvoke $r2.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.cos.COSInputStream.getDecodeResult : $i1 = $i0 - 1
org.apache.pdfbox.cos.COSInputStream.getDecodeResult : $i1 = $i0 - 1 >>>>>>>> org.apache.pdfbox.cos.COSInputStream.getDecodeResult : $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1)
org.apache.pdfbox.cos.COSInputStream.getDecodeResult : $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>($i1) >>>>>>>> org.apache.pdfbox.cos.COSInputStream.getDecodeResult : $r5 = (org.apache.pdfbox.filter.DecodeResult) $r4
org.apache.pdfbox.cos.COSInputStream.getDecodeResult : $r5 = (org.apache.pdfbox.filter.DecodeResult) $r4 >>>>>>>> org.apache.pdfbox.cos.COSInputStream.getDecodeResult : return $r5
org.apache.pdfbox.cos.COSInputStream.getDecodeResult : return $r5 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.repair : $r4 = virtualinvoke $r3.<org.apache.pdfbox.filter.DecodeResult: org.apache.pdfbox.cos.COSDictionary getParameters()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.repair : $r4 = virtualinvoke $r3.<org.apache.pdfbox.filter.DecodeResult: org.apache.pdfbox.cos.COSDictionary getParameters()>() >>>>>>>> org.apache.pdfbox.filter.DecodeResult.getParameters : $r1 = r0.<org.apache.pdfbox.filter.DecodeResult: org.apache.pdfbox.cos.COSDictionary parameters>
org.apache.pdfbox.filter.DecodeResult.getParameters : $r1 = r0.<org.apache.pdfbox.filter.DecodeResult: org.apache.pdfbox.cos.COSDictionary parameters> >>>>>>>> org.apache.pdfbox.filter.DecodeResult.getParameters : return $r1
org.apache.pdfbox.filter.DecodeResult.getParameters : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.repair : virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: void addAll(org.apache.pdfbox.cos.COSDictionary)>($r4)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.repair : virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: void addAll(org.apache.pdfbox.cos.COSDictionary)>($r4) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r4 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Set entrySet()>()
org.apache.pdfbox.cos.COSDictionary.addAll : $r4 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Set entrySet()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.entrySet : $r1 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.entrySet : $r1 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.entrySet : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>()
org.apache.pdfbox.cos.COSDictionary.entrySet : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.entrySet : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : if $z0 == 0
org.apache.pdfbox.util.SmallMap.entrySet : if $z0 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r2 = new java.util.LinkedHashSet
org.apache.pdfbox.util.SmallMap.entrySet : $r2 = new java.util.LinkedHashSet >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>()
org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : i1 = 0
org.apache.pdfbox.util.SmallMap.entrySet : i1 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.entrySet : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $i0 = lengthof $r3
org.apache.pdfbox.util.SmallMap.entrySet : $i0 = lengthof $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : if i1 >= $i0
org.apache.pdfbox.util.SmallMap.entrySet : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r5 = new org.apache.pdfbox.util.SmallMap$SmallMapEntry
org.apache.pdfbox.util.SmallMap.entrySet : $r5 = new org.apache.pdfbox.util.SmallMap$SmallMapEntry >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r5.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: void <init>(org.apache.pdfbox.util.SmallMap,int)>(r0, i1)
org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r5.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: void <init>(org.apache.pdfbox.util.SmallMap,int)>(r0, i1) >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r5)
org.apache.pdfbox.util.SmallMap.entrySet : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r5) >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $r1 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: java.lang.Object getKey()>()
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $r1 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1)
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.access$000 : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.access$000 : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.access$000 : return $r1
org.apache.pdfbox.util.SmallMap.access$000 : return $r1 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r3 = $r2[$i0]
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r3 = $r2[$i0] >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : return $r3
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : return $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>()
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : return $i0
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : return $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : i1 = i1 + 2
org.apache.pdfbox.util.SmallMap.entrySet : i1 = i1 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : goto [?= $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.entrySet : goto [?= $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2)
org.apache.pdfbox.util.SmallMap.entrySet : $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : return $r4
org.apache.pdfbox.util.SmallMap.entrySet : return $r4 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.entrySet : return $r2
org.apache.pdfbox.cos.COSDictionary.entrySet : return $r2 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSDictionary.addAll : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.cos.COSDictionary.addAll : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.addAll : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.cos.COSDictionary.addAll : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : r3 = (java.util.Map$Entry) $r5
org.apache.pdfbox.cos.COSDictionary.addAll : r3 = (java.util.Map$Entry) $r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.cos.COSDictionary.addAll : $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r7 = (org.apache.pdfbox.cos.COSName) $r6
org.apache.pdfbox.cos.COSDictionary.addAll : $r7 = (org.apache.pdfbox.cos.COSName) $r6 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r8 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>()
org.apache.pdfbox.cos.COSDictionary.addAll : $r8 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("Size")
org.apache.pdfbox.cos.COSDictionary.addAll : $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("Size") >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : if $z1 == 0
org.apache.pdfbox.cos.COSDictionary.addAll : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.cos.COSDictionary.addAll : $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r10 = (org.apache.pdfbox.cos.COSName) $r9
org.apache.pdfbox.cos.COSDictionary.addAll : $r10 = (org.apache.pdfbox.cos.COSName) $r9 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.pdfbox.cos.COSDictionary.addAll : $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1)
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1) >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i1 = $i0 + 1
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i1 = $i0 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r3 = $r2[$i1]
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r3 = $r2[$i1] >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : return $r3
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : return $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r12 = (org.apache.pdfbox.cos.COSBase) $r11
org.apache.pdfbox.cos.COSDictionary.addAll : $r12 = (org.apache.pdfbox.cos.COSBase) $r11 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r10, $r12)
org.apache.pdfbox.cos.COSDictionary.addAll : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r10, $r12) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r6 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r6 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i1 = i0 + 1
org.apache.pdfbox.util.SmallMap.put : $i1 = i0 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r11 = $r6[$i1]
org.apache.pdfbox.util.SmallMap.put : r11 = $r6[$i1] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r7 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r7 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i2 = i0 + 1
org.apache.pdfbox.util.SmallMap.put : $i2 = i0 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r7[$i2] = r2
org.apache.pdfbox.util.SmallMap.put : $r7[$i2] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : return r11
org.apache.pdfbox.util.SmallMap.put : return r11 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.cos.COSDictionary.addAll : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.repair : return r0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.repair : return r0 >>>>>>>> org.apache.pdfbox.filter.DecodeResult.getJPXColorSpace : $r1 = r0.<org.apache.pdfbox.filter.DecodeResult: org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace colorSpace>
org.apache.pdfbox.filter.DecodeResult.getJPXColorSpace : $r1 = r0.<org.apache.pdfbox.filter.DecodeResult: org.apache.pdfbox.pdmodel.graphics.color.PDJPXColorSpace colorSpace> >>>>>>>> org.apache.pdfbox.filter.DecodeResult.getJPXColorSpace : return $r1
org.apache.pdfbox.filter.DecodeResult.getJPXColorSpace : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : return $r5
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : return $r5 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : if r1 == null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : $r6 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.awt.image.BufferedImage getOpaqueImage()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : $r6 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.awt.image.BufferedImage getOpaqueImage()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getOpaqueImage : $r1 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader: java.awt.image.BufferedImage getRGBImage(org.apache.pdfbox.pdmodel.graphics.image.PDImage,org.apache.pdfbox.cos.COSArray)>(r0, null)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getOpaqueImage : $r1 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader: java.awt.image.BufferedImage getRGBImage(org.apache.pdfbox.pdmodel.graphics.image.PDImage,org.apache.pdfbox.cos.COSArray)>(r0, null) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r36 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICEGRAY>
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r36 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICEGRAY> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if r65 != $r36
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if r65 != $r36 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r52 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray INSTANCE>
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r52 = <org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray INSTANCE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : return $r52
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : return $r52 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getNumberOfComponents : return 1
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getNumberOfComponents : return 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getDefaultDecode : $r1 = newarray (float)[2]
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getDefaultDecode : $r1 = newarray (float)[2] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getDefaultDecode : $r1[0] = 0.0F
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getDefaultDecode : $r1[0] = 0.0F >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getDefaultDecode : $r1[1] = 1.0F
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getDefaultDecode : $r1[1] = 1.0F >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getDefaultDecode : return $r1
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getDefaultDecode : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : if i3 != 1
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : if i3 != 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : if i0 != 1
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : if i0 != 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : $r9 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader: java.awt.image.BufferedImage from1Bit(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.image.WritableRaster)>(r0, r4)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : $r9 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader: java.awt.image.BufferedImage from1Bit(org.apache.pdfbox.pdmodel.graphics.image.PDImage,java.awt.image.WritableRaster)>(r0, r4) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : r2 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : r2 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace getColorSpace()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i0 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i0 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i1 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i1 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : r3 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader: float[] getDecodeArray(org.apache.pdfbox.pdmodel.graphics.image.PDImage)>(r0)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : r3 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader: float[] getDecodeArray(org.apache.pdfbox.pdmodel.graphics.image.PDImage)>(r0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $r7 = virtualinvoke r1.<java.awt.image.WritableRaster: java.awt.image.DataBuffer getDataBuffer()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $r7 = virtualinvoke r1.<java.awt.image.WritableRaster: java.awt.image.DataBuffer getDataBuffer()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $r8 = (java.awt.image.DataBufferByte) $r7
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $r8 = (java.awt.image.DataBufferByte) $r7 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : r4 = virtualinvoke $r8.<java.awt.image.DataBufferByte: byte[] getData()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : r4 = virtualinvoke $r8.<java.awt.image.DataBufferByte: byte[] getData()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : r12 = null
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : r12 = null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : r12 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: java.io.InputStream createInputStream()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : r12 = interfaceinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: java.io.InputStream createInputStream()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : z0 = r2 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDIndexed
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : z0 = r2 instanceof org.apache.pdfbox.pdmodel.graphics.color.PDIndexed >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i8 = i0 / 8
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i8 = i0 / 8 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $i5 = i0 % 8
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $i5 = i0 % 8 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if $i5 <= 0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if $i5 <= 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i8 = i8 + 1
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i8 = i8 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if z0 != 0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $f1 = r3[0]
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $f1 = r3[0] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $f0 = r3[1]
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $f0 = r3[1] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $b7 = $f1 cmpg $f0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $b7 = $f1 cmpg $f0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if $b7 >= 0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if $b7 >= 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : b9 = 0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : b9 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : b10 = -1
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : b10 = -1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : goto [?= r5 = newarray (byte)[i8]]
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : goto [?= r5 = newarray (byte)[i8]] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : r5 = newarray (byte)[i8]
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : r5 = newarray (byte)[i8] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i11 = 0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i11 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i12 = 0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i12 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if i12 >= i1
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if i12 >= i1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i13 = 0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i13 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i2 = virtualinvoke r12.<java.io.InputStream: int read(byte[])>(r5)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i2 = virtualinvoke r12.<java.io.InputStream: int read(byte[])>(r5) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i14 = 0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i14 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if i14 >= i8
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if i14 >= i8 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if i14 >= i2
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if i14 >= i2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : b3 = r5[i14]
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : b3 = r5[i14] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : s15 = 128
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : s15 = 128 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i16 = 0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i16 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if i16 >= 8
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if i16 >= 8 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : s4 = b3 & s15
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : s4 = b3 & s15 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : s15 = s15 >> 1
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : s15 = s15 >> 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $i6 = i11
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $i6 = i11 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i11 = i11 + 1
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i11 = i11 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if s4 != 0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if s4 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $b17 = b9
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $b17 = b9 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : goto [?= r4[$i6] = $b17]
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : goto [?= r4[$i6] = $b17] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : r4[$i6] = $b17
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : r4[$i6] = $b17 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i13 = i13 + 1
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i13 = i13 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if i13 != i0
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if i13 != i0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i16 = i16 + 1
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i16 = i16 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i14 = i14 + 1
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i14 = i14 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $b17 = b10
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : $b17 = b10 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : goto [?= i14 = i14 + 1]
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : goto [?= i14 = i14 + 1] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if i2 == i8
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if i2 == i8 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i12 = i12 + 1
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : i12 = i12 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : $r3 = <org.apache.pdfbox.io.ScratchFileBuffer: org.apache.commons.logging.Log LOG>
org.apache.pdfbox.io.ScratchFileBuffer.finalize : $r3 = <org.apache.pdfbox.io.ScratchFileBuffer: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()
org.apache.pdfbox.io.ScratchFileBuffer.finalize : $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : if $z0 == 0
org.apache.pdfbox.io.ScratchFileBuffer.finalize : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : r13 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.awt.image.BufferedImage toRGBImage(java.awt.image.WritableRaster)>(r1)
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : r13 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace: java.awt.image.BufferedImage toRGBImage(java.awt.image.WritableRaster)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : i0 = virtualinvoke r1.<java.awt.image.WritableRaster: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : i0 = virtualinvoke r1.<java.awt.image.WritableRaster: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : i1 = virtualinvoke r1.<java.awt.image.WritableRaster: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : i1 = virtualinvoke r1.<java.awt.image.WritableRaster: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : $r5 = new java.awt.image.BufferedImage
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : $r5 = new java.awt.image.BufferedImage >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : specialinvoke $r5.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 1)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : specialinvoke $r5.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i0, i1, 1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : r3 = newarray (int)[1]
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : r3 = newarray (int)[1] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : r4 = newarray (int)[3]
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : r4 = newarray (int)[3] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : i5 = 0
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : i5 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : if i5 >= i1
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : if i5 >= i1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : i6 = 0
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : i6 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : if i6 >= i0
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : if i6 >= i0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : virtualinvoke r1.<java.awt.image.WritableRaster: int[] getPixel(int,int,int[])>(i6, i5, r3)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : virtualinvoke r1.<java.awt.image.WritableRaster: int[] getPixel(int,int,int[])>(i6, i5, r3) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : $i2 = r3[0]
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : $i2 = r3[0] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : r4[0] = $i2
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : r4[0] = $i2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : $i3 = r3[0]
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : $i3 = r3[0] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : r4[1] = $i3
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : r4[1] = $i3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : $i4 = r3[0]
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : $i4 = r3[0] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : r4[2] = $i4
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : r4[2] = $i4 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : $r7 = virtualinvoke $r5.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>()
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : $r7 = virtualinvoke $r5.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : virtualinvoke $r7.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i6, i5, r4)
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : virtualinvoke $r7.<java.awt.image.WritableRaster: void setPixel(int,int,int[])>(i6, i5, r4) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : i6 = i6 + 1
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : i6 = i6 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : i5 = i5 + 1
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : i5 = i5 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : return $r5
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.toRGBImage : return $r5 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if r12 == null
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : if r12 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : virtualinvoke r12.<java.io.InputStream: void close()>()
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : virtualinvoke r12.<java.io.InputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : return r13
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.from1Bit : return r13 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : return $r9
org.apache.pdfbox.pdmodel.graphics.image.SampledImageReader.getRGBImage : return $r9 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getOpaqueImage : return $r1
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getOpaqueImage : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : r10 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.awt.image.BufferedImage applyMask(java.awt.image.BufferedImage,java.awt.image.BufferedImage,boolean)>(r10, $r6, 1)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : r10 = specialinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.awt.image.BufferedImage applyMask(java.awt.image.BufferedImage,java.awt.image.BufferedImage,boolean)>(r10, $r6, 1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : if r9 != null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : if r9 != null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : i4 = virtualinvoke r8.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : i4 = virtualinvoke r8.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : i5 = virtualinvoke r8.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : i5 = virtualinvoke r8.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $i0 = virtualinvoke r9.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $i0 = virtualinvoke r9.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : if $i0 < i4
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : if $i0 < i4 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $i1 = virtualinvoke r9.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $i1 = virtualinvoke r9.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : if $i1 >= i5
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : if $i1 >= i5 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $i2 = virtualinvoke r9.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $i2 = virtualinvoke r9.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : if $i2 > i4
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : if $i2 > i4 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $i3 = virtualinvoke r9.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $i3 = virtualinvoke r9.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : if $i3 <= i5
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : if $i3 <= i5 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $r10 = new java.awt.image.BufferedImage
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $r10 = new java.awt.image.BufferedImage >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : specialinvoke $r10.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i4, i5, 2)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : specialinvoke $r10.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i4, i5, 2) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r2 = virtualinvoke r8.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r2 = virtualinvoke r8.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r3 = virtualinvoke $r10.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r3 = virtualinvoke $r10.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r4 = virtualinvoke r9.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r4 = virtualinvoke r9.<java.awt.image.BufferedImage: java.awt.image.WritableRaster getRaster()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r5 = newarray (float)[4]
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r5 = newarray (float)[4] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r6 = newarray (float)[4]
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r6 = newarray (float)[4] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r11 = null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r11 = null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : i6 = 0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : i6 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : if i6 >= i5
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : if i6 >= i5 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : i7 = 0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : i7 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : if i7 >= i4
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : if i7 >= i4 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : virtualinvoke r2.<java.awt.image.WritableRaster: float[] getPixel(int,int,float[])>(i7, i6, r5)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : virtualinvoke r2.<java.awt.image.WritableRaster: float[] getPixel(int,int,float[])>(i7, i6, r5) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $f0 = r5[0]
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $f0 = r5[0] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r6[0] = $f0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r6[0] = $f0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $f1 = r5[1]
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $f1 = r5[1] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r6[1] = $f1
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r6[1] = $f1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $f2 = r5[2]
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $f2 = r5[2] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r6[2] = $f2
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r6[2] = $f2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r11 = virtualinvoke r4.<java.awt.image.WritableRaster: float[] getPixel(int,int,float[])>(i7, i6, r11)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r11 = virtualinvoke r4.<java.awt.image.WritableRaster: float[] getPixel(int,int,float[])>(i7, i6, r11) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : if z0 == 0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : if z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $f5 = r11[0]
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : $f5 = r11[0] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r6[3] = $f5
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : r6[3] = $f5 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : goto [?= virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,float[])>(i7, i6, r6)]
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : goto [?= virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,float[])>(i7, i6, r6)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,float[])>(i7, i6, r6)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : virtualinvoke r3.<java.awt.image.WritableRaster: void setPixel(int,int,float[])>(i7, i6, r6) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : i7 = i7 + 1
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : i7 = i7 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : i6 = i6 + 1
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : i6 = i6 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : return $r10
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.applyMask : return $r10 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : goto [?= $r11 = new java.lang.ref.SoftReference]
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : goto [?= $r11 = new java.lang.ref.SoftReference] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : $r11 = new java.lang.ref.SoftReference
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : $r11 = new java.lang.ref.SoftReference >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : specialinvoke $r11.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r10)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : specialinvoke $r11.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r10) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.lang.ref.SoftReference cachedImage> = $r11
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.lang.ref.SoftReference cachedImage> = $r11 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : return r10
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : return r10 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertNotNull(java.lang.Object)>($r14)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertNotNull(java.lang.Object)>($r14) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $i8 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $i8 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r15 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.awt.image.BufferedImage getImage()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r15 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.awt.image.BufferedImage getImage()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : $r7 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.lang.ref.SoftReference cachedImage>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : $r7 = r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.lang.ref.SoftReference cachedImage> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : $r8 = virtualinvoke $r7.<java.lang.ref.SoftReference: java.lang.Object get()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : $r8 = virtualinvoke $r7.<java.lang.ref.SoftReference: java.lang.Object get()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : r9 = (java.awt.image.BufferedImage) $r8
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : r9 = (java.awt.image.BufferedImage) $r8 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : if r9 == null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : if r9 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : return r9
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : return r9 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $i9 = virtualinvoke $r15.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $i9 = virtualinvoke $r15.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(int,int)>($i8, $i9)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(int,int)>($i8, $i9) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $i10 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $i10 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r16 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.awt.image.BufferedImage getImage()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r16 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.awt.image.BufferedImage getImage()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $i11 = virtualinvoke $r16.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $i11 = virtualinvoke $r16.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(int,int)>($i10, $i11)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertEquals(int,int)>($i10, $i11) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r17 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.awt.image.BufferedImage getImage()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r17 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.awt.image.BufferedImage getImage()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r18 = new java.io.ByteArrayOutputStream
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r18 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : specialinvoke $r18.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : specialinvoke $r18.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : z1 = staticinvoke <javax.imageio.ImageIO: boolean write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream)>($r17, r1, $r18)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : z1 = staticinvoke <javax.imageio.ImageIO: boolean write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream)>($r17, r1, $r18) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertTrue(boolean)>(z1)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertTrue(boolean)>(z1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r19 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.awt.image.BufferedImage getOpaqueImage()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r19 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: java.awt.image.BufferedImage getOpaqueImage()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r20 = new java.io.ByteArrayOutputStream
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : $r20 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : specialinvoke $r20.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : specialinvoke $r20.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : z2 = staticinvoke <javax.imageio.ImageIO: boolean write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream)>($r19, r1, $r20)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : z2 = staticinvoke <javax.imageio.ImageIO: boolean write(java.awt.image.RenderedImage,java.lang.String,java.io.OutputStream)>($r19, r1, $r20) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertTrue(boolean)>(z2)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.validate : staticinvoke <junit.framework.TestCase: void assertTrue(boolean)>(z2) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : r7 = ""
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : r7 = "" >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : $i2 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : $i2 = virtualinvoke r1.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : staticinvoke <junit.framework.TestCase: void assertEquals(int,int)>(i0, $i2)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : staticinvoke <junit.framework.TestCase: void assertEquals(int,int)>(i0, $i2) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : $i3 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : $i3 = virtualinvoke r1.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : staticinvoke <junit.framework.TestCase: void assertEquals(int,int)>(i1, $i3)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : staticinvoke <junit.framework.TestCase: void assertEquals(int,int)>(i1, $i3) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : i10 = 0
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : i10 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : if i10 >= i1
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : if i10 >= i1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : i11 = 0
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : i11 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : if i11 >= i0
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : if i11 >= i0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : $i4 = virtualinvoke r0.<java.awt.image.BufferedImage: int getRGB(int,int)>(i11, i10)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : $i4 = virtualinvoke r0.<java.awt.image.BufferedImage: int getRGB(int,int)>(i11, i10) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : $i5 = virtualinvoke r1.<java.awt.image.BufferedImage: int getRGB(int,int)>(i11, i10)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : $i5 = virtualinvoke r1.<java.awt.image.BufferedImage: int getRGB(int,int)>(i11, i10) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : if $i4 == $i5
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : if $i4 == $i5 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : $i6 = virtualinvoke r0.<java.awt.image.BufferedImage: int getRGB(int,int)>(i11, i10)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : $i6 = virtualinvoke r0.<java.awt.image.BufferedImage: int getRGB(int,int)>(i11, i10) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : $i7 = virtualinvoke r1.<java.awt.image.BufferedImage: int getRGB(int,int)>(i11, i10)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : $i7 = virtualinvoke r1.<java.awt.image.BufferedImage: int getRGB(int,int)>(i11, i10) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.String,int,int)>(r7, $i6, $i7)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.String,int,int)>(r7, $i6, $i7) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : i11 = i11 + 1
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : i11 = i11 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : i10 = i10 + 1
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.checkIdent : i10 = i10 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : return null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getSoftMask : return null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject getMask()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject getMask()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName MASK>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName MASK> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : r1 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r4)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : r1 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r4) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : $z0 = r1 instanceof org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : $z0 = r1 instanceof org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : if $z0 == 0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName MASK>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName MASK> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : $r7 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r6)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : $r7 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r6) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : r2 = (org.apache.pdfbox.cos.COSStream) $r7
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : r2 = (org.apache.pdfbox.cos.COSStream) $r7 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : if r2 == null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : if r2 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : return null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getMask : return null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : if r2 == null
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getImage : if r2 == null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : $r2 = new java.util.HashSet
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : $r2 = new java.util.HashSet >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : specialinvoke $r2.<java.util.HashSet: void <init>()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : specialinvoke $r2.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : i0 = virtualinvoke r0.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : i1 = virtualinvoke r0.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : i4 = 0
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : i4 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : if i4 >= i1
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : if i4 >= i1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : i5 = 0
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : i5 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : if i5 >= i0
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : if i5 >= i0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : $i3 = virtualinvoke r0.<java.awt.image.BufferedImage: int getRGB(int,int)>(i5, i4)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : $i3 = virtualinvoke r0.<java.awt.image.BufferedImage: int getRGB(int,int)>(i5, i4) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : $r3 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i3) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3)
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : i5 = i5 + 1
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : i5 = i5 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : goto [?= (branch)]
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : i4 = i4 + 1
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : i4 = i4 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : $i2 = interfaceinvoke $r2.<java.util.Set: int size()>()
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : $i2 = interfaceinvoke $r2.<java.util.Set: int size()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : return $i2
org.apache.pdfbox.pdmodel.graphics.image.ValidateXImage.colorCount : return $i2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : return null
org.apache.pdfbox.pdmodel.graphics.image.LosslessFactory.createAlphaFromARGBImage : return null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: org.apache.pdfbox.cos.COSArray rectArray>
org.apache.pdfbox.pdmodel.common.PDRectangle.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: org.apache.pdfbox.cos.COSArray rectArray> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getCOSObject : return $r1
org.apache.pdfbox.pdmodel.common.PDRectangle.getCOSObject : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.addPage : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDPageTree getPages()>()
org.apache.pdfbox.pdmodel.PDDocument.addPage : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDPageTree getPages()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getPages : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog getDocumentCatalog()>()
org.apache.pdfbox.pdmodel.PDDocument.getPages : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog getDocumentCatalog()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r3 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog documentCatalog>
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r3 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog documentCatalog> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : if $r3 != null
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : if $r3 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r4 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r4 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : r1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>()
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : r1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getTrailer : $r1 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.cos.COSDocument.getTrailer : $r1 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getTrailer : return $r1
org.apache.pdfbox.cos.COSDocument.getTrailer : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROOT>
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROOT> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $z0 = r2 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $z0 = r2 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : if $z0 == 0
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r7 = new org.apache.pdfbox.pdmodel.PDDocumentCatalog
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r7 = new org.apache.pdfbox.pdmodel.PDDocumentCatalog >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r8 = (org.apache.pdfbox.cos.COSDictionary) r2
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r8 = (org.apache.pdfbox.cos.COSDictionary) r2 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : specialinvoke $r7.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: void <init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary)>(r0, $r8)
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : specialinvoke $r7.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: void <init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary)>(r0, $r8) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog documentCatalog> = $r7
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog documentCatalog> = $r7 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : goto [?= $r9 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog documentCatalog>]
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : goto [?= $r9 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog documentCatalog>] >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r9 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog documentCatalog>
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r9 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog documentCatalog> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : return $r9
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : return $r9 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getPages : $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: org.apache.pdfbox.pdmodel.PDPageTree getPages()>()
org.apache.pdfbox.pdmodel.PDDocument.getPages : $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: org.apache.pdfbox.pdmodel.PDPageTree getPages()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r1 = new org.apache.pdfbox.pdmodel.PDPageTree
org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r1 = new org.apache.pdfbox.pdmodel.PDPageTree >>>>>>>> org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r3 = r0.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: org.apache.pdfbox.cos.COSDictionary root>
org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r3 = r0.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: org.apache.pdfbox.cos.COSDictionary root> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PAGES>
org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PAGES> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r6 = (org.apache.pdfbox.cos.COSDictionary) $r4
org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r6 = (org.apache.pdfbox.cos.COSDictionary) $r4 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r5 = r0.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: org.apache.pdfbox.pdmodel.PDDocument document>
org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r5 = r0.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: org.apache.pdfbox.pdmodel.PDDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : specialinvoke $r1.<org.apache.pdfbox.pdmodel.PDPageTree: void <init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.PDDocument)>($r6, $r5)
org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : specialinvoke $r1.<org.apache.pdfbox.pdmodel.PDPageTree: void <init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.PDDocument)>($r6, $r5) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getCOSName : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.getCOSName : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getCOSName : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSDictionary.getCOSName : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getCOSName : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getCOSName : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getCOSName : $r3 = (org.apache.pdfbox.cos.COSName) r2
org.apache.pdfbox.cos.COSDictionary.getCOSName : $r3 = (org.apache.pdfbox.cos.COSName) r2 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getCOSName : return $r3
org.apache.pdfbox.cos.COSDictionary.getCOSName : return $r3 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : return $r1
org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getPages : return $r2
org.apache.pdfbox.pdmodel.PDDocument.getPages : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.addPage : virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDPageTree: void add(org.apache.pdfbox.pdmodel.PDPage)>(r1)
org.apache.pdfbox.pdmodel.PDDocument.addPage : virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDPageTree: void add(org.apache.pdfbox.pdmodel.PDPage)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : r13 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary getCOSObject()>()
org.apache.pdfbox.pdmodel.PDPageTree.add : r13 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page>
org.apache.pdfbox.pdmodel.PDPage.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getCOSObject : return $r1
org.apache.pdfbox.pdmodel.PDPage.getCOSObject : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PARENT>
org.apache.pdfbox.pdmodel.PDPageTree.add : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PARENT> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary root>
org.apache.pdfbox.pdmodel.PDPageTree.add : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary root> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r4, $r3)
org.apache.pdfbox.pdmodel.PDPageTree.add : virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r4, $r3) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r6 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary root>
org.apache.pdfbox.pdmodel.PDPageTree.add : $r6 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary root> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS>
org.apache.pdfbox.pdmodel.PDPageTree.add : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r7 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdmodel.PDPageTree.add : $r7 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : r2 = (org.apache.pdfbox.cos.COSArray) $r7
org.apache.pdfbox.pdmodel.PDPageTree.add : r2 = (org.apache.pdfbox.cos.COSArray) $r7 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : virtualinvoke r2.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>(r13)
org.apache.pdfbox.pdmodel.PDPageTree.add : virtualinvoke r2.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>(r13) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PARENT>
org.apache.pdfbox.pdmodel.PDPageTree.add : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PARENT> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName P>
org.apache.pdfbox.pdmodel.PDPageTree.add : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName P> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r10 = virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r9, $r8)
org.apache.pdfbox.pdmodel.PDPageTree.add : $r10 = virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r9, $r8) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : r13 = (org.apache.pdfbox.cos.COSDictionary) $r10
org.apache.pdfbox.pdmodel.PDPageTree.add : r13 = (org.apache.pdfbox.cos.COSDictionary) $r10 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : if r13 == null
org.apache.pdfbox.pdmodel.PDPageTree.add : if r13 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r12 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COUNT>
org.apache.pdfbox.pdmodel.PDPageTree.add : $r12 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COUNT> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COUNT>
org.apache.pdfbox.pdmodel.PDPageTree.add : $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COUNT> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $i0 = virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName)>($r11)
org.apache.pdfbox.pdmodel.PDPageTree.add : $i0 = virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName)>($r11) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $i1 = $i0 + 1
org.apache.pdfbox.pdmodel.PDPageTree.add : $i1 = $i0 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: void setInt(org.apache.pdfbox.cos.COSName,int)>($r12, $i1)
org.apache.pdfbox.pdmodel.PDPageTree.add : virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: void setInt(org.apache.pdfbox.cos.COSName,int)>($r12, $i1) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : if r13 != null
org.apache.pdfbox.pdmodel.PDPageTree.add : if r13 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode.isOverwrite : $r1 = <org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode: org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode OVERWRITE>
org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode.isOverwrite : $r1 = <org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode: org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode OVERWRITE> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode.isOverwrite : if r0 != $r1
org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode.isOverwrite : if r0 != $r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode.isOverwrite : $z0 = 0
org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode.isOverwrite : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode.isOverwrite : return $z0
org.apache.pdfbox.pdmodel.PDPageContentStream$AppendMode.isOverwrite : return $z0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.hasContents : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page>
org.apache.pdfbox.pdmodel.PDPage.hasContents : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.hasContents : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CONTENTS>
org.apache.pdfbox.pdmodel.PDPage.hasContents : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CONTENTS> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.hasContents : r1 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.pdmodel.PDPage.hasContents : r1 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.hasContents : $z0 = r1 instanceof org.apache.pdfbox.cos.COSStream
org.apache.pdfbox.pdmodel.PDPage.hasContents : $z0 = r1 instanceof org.apache.pdfbox.cos.COSStream >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.hasContents : if $z0 == 0
org.apache.pdfbox.pdmodel.PDPage.hasContents : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.hasContents : $z1 = r1 instanceof org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.pdmodel.PDPage.hasContents : $z1 = r1 instanceof org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.hasContents : if $z1 == 0
org.apache.pdfbox.pdmodel.PDPage.hasContents : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.hasContents : return 0
org.apache.pdfbox.pdmodel.PDPage.hasContents : return 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setContents : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page>
org.apache.pdfbox.pdmodel.PDPage.setContents : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setContents : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CONTENTS>
org.apache.pdfbox.pdmodel.PDPage.setContents : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CONTENTS> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setContents : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>($r2, r1)
org.apache.pdfbox.pdmodel.PDPage.setContents : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>($r2, r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getCOSObject : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.common.PDStream.getCOSObject : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createOutputStream : $r2 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream>
org.apache.pdfbox.pdmodel.common.PDStream.createOutputStream : $r2 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createOutputStream : $r3 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createOutputStream(org.apache.pdfbox.cos.COSBase)>(r1)
org.apache.pdfbox.pdmodel.common.PDStream.createOutputStream : $r3 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createOutputStream(org.apache.pdfbox.cos.COSBase)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>()
org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting>
org.apache.pdfbox.cos.COSStream.createOutputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : if $z0 == 0
org.apache.pdfbox.cos.COSStream.createOutputStream : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : if r1 == null
org.apache.pdfbox.cos.COSStream.createOutputStream : if r1 == null >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r4 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSStream.createOutputStream : $r4 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r5 = virtualinvoke $r4.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer()>()
org.apache.pdfbox.cos.COSStream.createOutputStream : $r5 = virtualinvoke $r4.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> = $r5
org.apache.pdfbox.cos.COSStream.createOutputStream : r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> = $r5 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r6 = new org.apache.pdfbox.io.RandomAccessOutputStream
org.apache.pdfbox.cos.COSStream.createOutputStream : $r6 = new org.apache.pdfbox.io.RandomAccessOutputStream >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r7 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.createOutputStream : $r7 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r6.<org.apache.pdfbox.io.RandomAccessOutputStream: void <init>(org.apache.pdfbox.io.RandomAccessWrite)>($r7)
org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r6.<org.apache.pdfbox.io.RandomAccessOutputStream: void <init>(org.apache.pdfbox.io.RandomAccessWrite)>($r7) >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r8 = new org.apache.pdfbox.cos.COSOutputStream
org.apache.pdfbox.cos.COSStream.createOutputStream : $r8 = new org.apache.pdfbox.cos.COSOutputStream >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r9 = specialinvoke r0.<org.apache.pdfbox.cos.COSStream: java.util.List getFilterList()>()
org.apache.pdfbox.cos.COSStream.createOutputStream : $r9 = specialinvoke r0.<org.apache.pdfbox.cos.COSStream: java.util.List getFilterList()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : $z1 = r2 instanceof org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.cos.COSStream.getFilterList : $z1 = r2 instanceof org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : if $z1 == 0
org.apache.pdfbox.cos.COSStream.getFilterList : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r10 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSStream.createOutputStream : $r10 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r8.<org.apache.pdfbox.cos.COSOutputStream: void <init>(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.OutputStream,org.apache.pdfbox.io.ScratchFile)>($r9, r0, $r6, $r10)
org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r8.<org.apache.pdfbox.cos.COSOutputStream: void <init>(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.OutputStream,org.apache.pdfbox.io.ScratchFile)>($r9, r0, $r6, $r10) >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> = 1
org.apache.pdfbox.cos.COSStream.createOutputStream : r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> = 1 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r11 = new org.apache.pdfbox.cos.COSStream$1
org.apache.pdfbox.cos.COSStream.createOutputStream : $r11 = new org.apache.pdfbox.cos.COSStream$1 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r11.<org.apache.pdfbox.cos.COSStream$1: void <init>(org.apache.pdfbox.cos.COSStream,java.io.OutputStream)>(r0, $r8)
org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r11.<org.apache.pdfbox.cos.COSStream$1: void <init>(org.apache.pdfbox.cos.COSStream,java.io.OutputStream)>(r0, $r8) >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : return $r11
org.apache.pdfbox.cos.COSStream.createOutputStream : return $r11 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createOutputStream : return $r3
org.apache.pdfbox.pdmodel.common.PDStream.createOutputStream : return $r3 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setOutput : r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output> = r1
org.apache.pdfbox.contentstream.PDAbstractContentStream.setOutput : r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output> = r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getResources : $r2 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.PDResources pageResources>
org.apache.pdfbox.pdmodel.PDPage.getResources : $r2 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.PDResources pageResources> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getResources : if $r2 != null
org.apache.pdfbox.pdmodel.PDPage.getResources : if $r2 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getResources : $r4 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page>
org.apache.pdfbox.pdmodel.PDPage.getResources : $r4 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getResources : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName RESOURCES>
org.apache.pdfbox.pdmodel.PDPage.getResources : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName RESOURCES> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getResources : $r5 = staticinvoke <org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSBase getInheritableAttribute(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)>($r4, $r3)
org.apache.pdfbox.pdmodel.PDPage.getResources : $r5 = staticinvoke <org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSBase getInheritableAttribute(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)>($r4, $r3) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : if r2 == null
org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : if r2 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PARENT>
org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PARENT> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName P>
org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName P> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : $r6 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r5, $r4)
org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : $r6 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r5, $r4) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : r3 = (org.apache.pdfbox.cos.COSDictionary) $r6
org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : r3 = (org.apache.pdfbox.cos.COSDictionary) $r6 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : if r3 == null
org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : if r3 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : $r7 = staticinvoke <org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSBase getInheritableAttribute(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)>(r3, r1)
org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : $r7 = staticinvoke <org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSBase getInheritableAttribute(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)>(r3, r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : return null
org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : return null >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : return $r7
org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : return $r7 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getResources : r1 = (org.apache.pdfbox.cos.COSDictionary) $r5
org.apache.pdfbox.pdmodel.PDPage.getResources : r1 = (org.apache.pdfbox.cos.COSDictionary) $r5 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getResources : if r1 == null
org.apache.pdfbox.pdmodel.PDPage.getResources : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getResources : $r8 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.PDResources pageResources>
org.apache.pdfbox.pdmodel.PDPage.getResources : $r8 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.PDResources pageResources> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getResources : return $r8
org.apache.pdfbox.pdmodel.PDPage.getResources : return $r8 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setResources : r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.PDResources pageResources> = r1
org.apache.pdfbox.pdmodel.PDPage.setResources : r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.PDResources pageResources> = r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setResources : if r1 == null
org.apache.pdfbox.pdmodel.PDPage.setResources : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setResources : $r5 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page>
org.apache.pdfbox.pdmodel.PDPage.setResources : $r5 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setResources : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName RESOURCES>
org.apache.pdfbox.pdmodel.PDPage.setResources : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName RESOURCES> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setResources : virtualinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>($r4, r1)
org.apache.pdfbox.pdmodel.PDPage.setResources : virtualinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>($r4, r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getCOSObject : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary getCOSObject()>()
org.apache.pdfbox.pdmodel.PDResources.getCOSObject : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary resources>
org.apache.pdfbox.pdmodel.PDResources.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary resources> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getCOSObject : return $r1
org.apache.pdfbox.pdmodel.PDResources.getCOSObject : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setResources : goto [?= return]
org.apache.pdfbox.pdmodel.PDPage.setResources : goto [?= return] >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setResources : r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: org.apache.pdfbox.pdmodel.PDResources resources> = r1
org.apache.pdfbox.contentstream.PDAbstractContentStream.setResources : r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: org.apache.pdfbox.pdmodel.PDResources resources> = r1 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setMaximumFractionDigits : $r1 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.text.NumberFormat formatDecimal>
org.apache.pdfbox.contentstream.PDAbstractContentStream.setMaximumFractionDigits : $r1 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.text.NumberFormat formatDecimal> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.setMaximumFractionDigits : virtualinvoke $r1.<java.text.NumberFormat: void setMaximumFractionDigits(int)>(i0)
org.apache.pdfbox.contentstream.PDAbstractContentStream.setMaximumFractionDigits : virtualinvoke $r1.<java.text.NumberFormat: void setMaximumFractionDigits(int)>(i0) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $z0 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: boolean inTextMode>
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $z0 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: boolean inTextMode> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $z0 == 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : if $z0 == 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void saveGraphicsState()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void saveGraphicsState()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : $r1 = r0.<org.apache.pdfbox.pdmodel.PDPageContentStream: java.util.Stack fontStack>
org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : $r1 = r0.<org.apache.pdfbox.pdmodel.PDPageContentStream: java.util.Stack fontStack> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : $z0 = virtualinvoke $r1.<java.util.Stack: boolean isEmpty()>()
org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : $z0 = virtualinvoke $r1.<java.util.Stack: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : if $z0 != 0
org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : $r2 = r0.<org.apache.pdfbox.pdmodel.PDPageContentStream: java.util.Stack strokingColorSpaceStack>
org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : $r2 = r0.<org.apache.pdfbox.pdmodel.PDPageContentStream: java.util.Stack strokingColorSpaceStack> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : $z1 = virtualinvoke $r2.<java.util.Stack: boolean isEmpty()>()
org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : $z1 = virtualinvoke $r2.<java.util.Stack: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : if $z1 != 0
org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPageContentStream: java.util.Stack nonStrokingColorSpaceStack>
org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPageContentStream: java.util.Stack nonStrokingColorSpaceStack> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : $z2 = virtualinvoke $r3.<java.util.Stack: boolean isEmpty()>()
org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : $z2 = virtualinvoke $r3.<java.util.Stack: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : if $z2 != 0
org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : if $z2 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDPageContentStream: void writeOperator(java.lang.String)>("q")
org.apache.pdfbox.pdmodel.PDPageContentStream.saveGraphicsState : virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDPageContentStream: void writeOperator(java.lang.String)>("q") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : $r3 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : $r3 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : $r2 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset US_ASCII>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : $r2 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset US_ASCII> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : $r4 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : $r4 = virtualinvoke r1.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r2) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>($r4)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : virtualinvoke $r3.<java.io.OutputStream: void write(byte[])>($r4) >>>>>>>> org.apache.pdfbox.cos.COSStream$1.write : $r2 = r0.<org.apache.pdfbox.cos.COSStream$1: java.io.OutputStream out>
org.apache.pdfbox.cos.COSStream$1.write : $r2 = r0.<org.apache.pdfbox.cos.COSStream$1: java.io.OutputStream out> >>>>>>>> org.apache.pdfbox.cos.COSStream$1.write : virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1)
org.apache.pdfbox.cos.COSStream$1.write : virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.write : $r2 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.ByteArrayOutputStream buffer>
org.apache.pdfbox.cos.COSOutputStream.write : $r2 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.ByteArrayOutputStream buffer> >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.write : virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i0, i1)
org.apache.pdfbox.cos.COSOutputStream.write : virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i0, i1) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : $r5 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : $r5 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : virtualinvoke $r5.<java.io.OutputStream: void write(int)>(10)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperator : virtualinvoke $r5.<java.io.OutputStream: void write(int)>(10) >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.write : $r1 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.ByteArrayOutputStream buffer>
org.apache.pdfbox.cos.COSOutputStream.write : $r1 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.ByteArrayOutputStream buffer> >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.write : virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>(i0)
org.apache.pdfbox.cos.COSOutputStream.write : virtualinvoke $r1.<java.io.ByteArrayOutputStream: void write(int)>(i0) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r3 = new java.awt.geom.AffineTransform
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r3 = new java.awt.geom.AffineTransform >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : specialinvoke $r3.<java.awt.geom.AffineTransform: void <init>(float,float,float,float,float,float)>(f2, 0.0F, 0.0F, f3, f0, f1)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : specialinvoke $r3.<java.awt.geom.AffineTransform: void <init>(float,float,float,float,float,float)>(f2, 0.0F, 0.0F, f3, f0, f1) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r4 = new org.apache.pdfbox.util.Matrix
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r4 = new org.apache.pdfbox.util.Matrix >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : specialinvoke $r4.<org.apache.pdfbox.util.Matrix: void <init>(java.awt.geom.AffineTransform)>($r3)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : specialinvoke $r4.<org.apache.pdfbox.util.Matrix: void <init>(java.awt.geom.AffineTransform)>($r3) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void transform(org.apache.pdfbox.util.Matrix)>($r4)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void transform(org.apache.pdfbox.util.Matrix)>($r4) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.transform : $r2 = virtualinvoke r1.<org.apache.pdfbox.util.Matrix: java.awt.geom.AffineTransform createAffineTransform()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.transform : $r2 = virtualinvoke r1.<org.apache.pdfbox.util.Matrix: java.awt.geom.AffineTransform createAffineTransform()>() >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $r1 = new java.awt.geom.AffineTransform
org.apache.pdfbox.util.Matrix.createAffineTransform : $r1 = new java.awt.geom.AffineTransform >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $r2 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.createAffineTransform : $r2 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $f5 = $r2[0]
org.apache.pdfbox.util.Matrix.createAffineTransform : $f5 = $r2[0] >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $r3 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.createAffineTransform : $r3 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $f4 = $r3[1]
org.apache.pdfbox.util.Matrix.createAffineTransform : $f4 = $r3[1] >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $r4 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.createAffineTransform : $r4 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $f3 = $r4[3]
org.apache.pdfbox.util.Matrix.createAffineTransform : $f3 = $r4[3] >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $r5 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.createAffineTransform : $r5 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $f2 = $r5[4]
org.apache.pdfbox.util.Matrix.createAffineTransform : $f2 = $r5[4] >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $r6 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.createAffineTransform : $r6 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $f1 = $r6[6]
org.apache.pdfbox.util.Matrix.createAffineTransform : $f1 = $r6[6] >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $r7 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.createAffineTransform : $r7 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : $f0 = $r7[7]
org.apache.pdfbox.util.Matrix.createAffineTransform : $f0 = $r7[7] >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>(float,float,float,float,float,float)>($f5, $f4, $f3, $f2, $f1, $f0)
org.apache.pdfbox.util.Matrix.createAffineTransform : specialinvoke $r1.<java.awt.geom.AffineTransform: void <init>(float,float,float,float,float,float)>($f5, $f4, $f3, $f2, $f1, $f0) >>>>>>>> org.apache.pdfbox.util.Matrix.createAffineTransform : return $r1
org.apache.pdfbox.util.Matrix.createAffineTransform : return $r1 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.transform : specialinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeAffineTransform(java.awt.geom.AffineTransform)>($r2)
org.apache.pdfbox.contentstream.PDAbstractContentStream.transform : specialinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeAffineTransform(java.awt.geom.AffineTransform)>($r2) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : r2 = newarray (double)[6]
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : r2 = newarray (double)[6] >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : virtualinvoke r1.<java.awt.geom.AffineTransform: void getMatrix(double[])>(r2)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : virtualinvoke r1.<java.awt.geom.AffineTransform: void getMatrix(double[])>(r2) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : i0 = lengthof r2
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : i0 = lengthof r2 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : i1 = 0
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : i1 = 0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : if i1 >= i0
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : if i1 >= i0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : d0 = r2[i1]
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : d0 = r2[i1] >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : $f0 = (float) d0
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : $f0 = (float) d0 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperand(float)>($f0)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperand(float)>($f0) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r1 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.text.NumberFormat formatDecimal>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r1 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.text.NumberFormat formatDecimal> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $i1 = virtualinvoke $r1.<java.text.NumberFormat: int getMaximumFractionDigits()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $i1 = virtualinvoke $r1.<java.text.NumberFormat: int getMaximumFractionDigits()>() >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r2 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: byte[] formatBuffer>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r2 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: byte[] formatBuffer> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : i0 = staticinvoke <org.apache.pdfbox.util.NumberFormatUtil: int formatFloatFast(float,int,byte[])>(f0, $i1, $r2)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : i0 = staticinvoke <org.apache.pdfbox.util.NumberFormatUtil: int formatFloatFast(float,int,byte[])>(f0, $i1, $r2) >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0)
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $z0 = staticinvoke <java.lang.Float: boolean isNaN(float)>(f0) >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $z0 != 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $z0 != 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $z1 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0)
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $z1 = staticinvoke <java.lang.Float: boolean isInfinite(float)>(f0) >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $z1 != 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $z1 != 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b1 = f0 cmpl 9.223372E18F
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b1 = f0 cmpl 9.223372E18F >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b1 > 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b1 > 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b2 = f0 cmpg -9.223372E18F
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b2 = f0 cmpg -9.223372E18F >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b2 <= 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b2 <= 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if i0 <= 5
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if i0 <= 5 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : i12 = 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : i12 = 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : l13 = (long) f0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : l13 = (long) f0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b3 = f0 cmpg 0.0F
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b3 = f0 cmpg 0.0F >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b3 >= 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b3 >= 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d0 = (double) f0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d0 = (double) f0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0)
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d1 = staticinvoke <java.lang.Math: double abs(double)>($d0) >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d2 = (double) l13
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d2 = (double) l13 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d4 = $d1 - $d2
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d4 = $d1 - $d2 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $r1 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS>
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $r1 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS> >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $l4 = $r1[i0]
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $l4 = $r1[i0] >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d3 = (double) $l4
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d3 = (double) $l4 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d5 = $d4 * $d3
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d5 = $d4 * $d3 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d6 = $d5 + 0.5
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $d6 = $d5 + 0.5 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : l14 = (long) $d6
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : l14 = (long) $d6 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $r2 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS>
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $r2 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS> >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $l5 = $r2[i0]
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $l5 = $r2[i0] >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b6 = l14 cmp $l5
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b6 = l14 cmp $l5 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b6 < 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b6 < 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $i7 = staticinvoke <org.apache.pdfbox.util.NumberFormatUtil: int getExponent(long)>(l13)
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $i7 = staticinvoke <org.apache.pdfbox.util.NumberFormatUtil: int getExponent(long)>(l13) >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : i8 = 0
org.apache.pdfbox.util.NumberFormatUtil.getExponent : i8 = 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : $r0 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS>
org.apache.pdfbox.util.NumberFormatUtil.getExponent : $r0 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS> >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : $i1 = lengthof $r0
org.apache.pdfbox.util.NumberFormatUtil.getExponent : $i1 = lengthof $r0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : $i2 = $i1 - 1
org.apache.pdfbox.util.NumberFormatUtil.getExponent : $i2 = $i1 - 1 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : if i8 >= $i2
org.apache.pdfbox.util.NumberFormatUtil.getExponent : if i8 >= $i2 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : $r2 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS>
org.apache.pdfbox.util.NumberFormatUtil.getExponent : $r2 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS> >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : $i5 = i8 + 1
org.apache.pdfbox.util.NumberFormatUtil.getExponent : $i5 = i8 + 1 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : $l6 = $r2[$i5]
org.apache.pdfbox.util.NumberFormatUtil.getExponent : $l6 = $r2[$i5] >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : $b7 = l0 cmp $l6
org.apache.pdfbox.util.NumberFormatUtil.getExponent : $b7 = l0 cmp $l6 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : if $b7 >= 0
org.apache.pdfbox.util.NumberFormatUtil.getExponent : if $b7 >= 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : i8 = i8 + 1
org.apache.pdfbox.util.NumberFormatUtil.getExponent : i8 = i8 + 1 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : goto [?= $r0 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS>]
org.apache.pdfbox.util.NumberFormatUtil.getExponent : goto [?= $r0 = <org.apache.pdfbox.util.NumberFormatUtil: long[] POWER_OF_TENS>] >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.getExponent : return i8
org.apache.pdfbox.util.NumberFormatUtil.getExponent : return i8 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : i15 = staticinvoke <org.apache.pdfbox.util.NumberFormatUtil: int formatPositiveNumber(long,int,boolean,byte[],int)>(l13, $i7, 0, r0, i12)
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : i15 = staticinvoke <org.apache.pdfbox.util.NumberFormatUtil: int formatPositiveNumber(long,int,boolean,byte[],int)>(l13, $i7, 0, r0, i12) >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i19 = i1
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i19 = i1 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : l20 = l0
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : l20 = l0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $b3 = l20 cmp 2147483647L
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $b3 = l20 cmp 2147483647L >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : if $b3 <= 0
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : if $b3 <= 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i22 = (int) l20
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i22 = (int) l20 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : if i18 < 0
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : if i18 < 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : if z0 == 0
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : if z0 == 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $r1 = <org.apache.pdfbox.util.NumberFormatUtil: int[] POWER_OF_TENS_INT>
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $r1 = <org.apache.pdfbox.util.NumberFormatUtil: int[] POWER_OF_TENS_INT> >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i4 = $r1[i18]
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i4 = $r1[i18] >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i2 = i22 / $i4
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i2 = i22 / $i4 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $r2 = <org.apache.pdfbox.util.NumberFormatUtil: int[] POWER_OF_TENS_INT>
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $r2 = <org.apache.pdfbox.util.NumberFormatUtil: int[] POWER_OF_TENS_INT> >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i5 = $r2[i18]
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i5 = $r2[i18] >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i6 = i2 * $i5
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i6 = i2 * $i5 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i22 = i22 - $i6
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i22 = i22 - $i6 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i7 = i19
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i7 = i19 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i19 = i19 + 1
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i19 = i19 + 1 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i8 = 48 + i2
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $i8 = 48 + i2 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $b9 = (byte) $i8
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : $b9 = (byte) $i8 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : r0[$i7] = $b9
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : r0[$i7] = $b9 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i18 = i18 + -1
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : i18 = i18 + -1 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : goto [?= (branch)]
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : return i19
org.apache.pdfbox.util.NumberFormatUtil.formatPositiveNumber : return i19 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b8 = l14 cmp 0L
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : $b8 = l14 cmp 0L >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b8 <= 0
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : if $b8 <= 0 >>>>>>>> org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : return i15
org.apache.pdfbox.util.NumberFormatUtil.formatFloatFast : return i15 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : if i0 != -1
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : if i0 != -1 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r4 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r4 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r3 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: byte[] formatBuffer>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r3 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: byte[] formatBuffer> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, i0)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : virtualinvoke $r4.<java.io.OutputStream: void write(byte[],int,int)>($r3, 0, i0) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r5 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r5 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : virtualinvoke $r5.<java.io.OutputStream: void write(int)>(32)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : virtualinvoke $r5.<java.io.OutputStream: void write(int)>(32) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : i1 = i1 + 1
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : i1 = i1 + 1 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : goto [?= (branch)]
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeAffineTransform : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.transform : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperator(java.lang.String)>("cm")
org.apache.pdfbox.contentstream.PDAbstractContentStream.transform : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperator(java.lang.String)>("cm") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r5 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: org.apache.pdfbox.pdmodel.PDResources resources>
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r5 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: org.apache.pdfbox.pdmodel.PDResources resources> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r6 = virtualinvoke $r5.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSName add(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject)>(r1)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : $r6 = virtualinvoke $r5.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSName add(org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.add : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XOBJECT>
org.apache.pdfbox.pdmodel.PDResources.add : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XOBJECT> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.add : $r3 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSName add(org.apache.pdfbox.cos.COSName,java.lang.String,org.apache.pdfbox.pdmodel.common.COSObjectable)>($r2, "Im", r1)
org.apache.pdfbox.pdmodel.PDResources.add : $r3 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSName add(org.apache.pdfbox.cos.COSName,java.lang.String,org.apache.pdfbox.pdmodel.common.COSObjectable)>($r2, "Im", r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.add : $r6 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary resources>
org.apache.pdfbox.pdmodel.PDResources.add : $r6 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary resources> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.add : $r7 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.pdmodel.PDResources.add : $r7 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.add : r4 = (org.apache.pdfbox.cos.COSDictionary) $r7
org.apache.pdfbox.pdmodel.PDResources.add : r4 = (org.apache.pdfbox.cos.COSDictionary) $r7 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.add : if r4 == null
org.apache.pdfbox.pdmodel.PDResources.add : if r4 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.add : r5 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSName createKey(org.apache.pdfbox.cos.COSName,java.lang.String)>(r1, r2)
org.apache.pdfbox.pdmodel.PDResources.add : r5 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSName createKey(org.apache.pdfbox.cos.COSName,java.lang.String)>(r1, r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : $r5 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary resources>
org.apache.pdfbox.pdmodel.PDResources.createKey : $r5 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary resources> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : $r6 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.pdmodel.PDResources.createKey : $r6 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : r3 = (org.apache.pdfbox.cos.COSDictionary) $r6
org.apache.pdfbox.pdmodel.PDResources.createKey : r3 = (org.apache.pdfbox.cos.COSDictionary) $r6 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : if r3 != null
org.apache.pdfbox.pdmodel.PDResources.createKey : if r3 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : $r12 = new java.lang.StringBuilder
org.apache.pdfbox.pdmodel.PDResources.createKey : $r12 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdmodel.PDResources.createKey : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.pdfbox.pdmodel.PDResources.createKey : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(1)
org.apache.pdfbox.pdmodel.PDResources.createKey : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(1) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdmodel.PDResources.createKey : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : $r16 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>($r15)
org.apache.pdfbox.pdmodel.PDResources.createKey : $r16 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>($r15) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : return $r16
org.apache.pdfbox.pdmodel.PDResources.createKey : return $r16 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.add : specialinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: void put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>(r1, r5, r3)
org.apache.pdfbox.pdmodel.PDResources.add : specialinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: void put(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>(r1, r5, r3) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.put : $r4 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary resources>
org.apache.pdfbox.pdmodel.PDResources.put : $r4 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary resources> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.put : $r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.pdmodel.PDResources.put : $r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.put : r8 = (org.apache.pdfbox.cos.COSDictionary) $r5
org.apache.pdfbox.pdmodel.PDResources.put : r8 = (org.apache.pdfbox.cos.COSDictionary) $r5 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.put : if r8 != null
org.apache.pdfbox.pdmodel.PDResources.put : if r8 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.put : $r6 = new org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdmodel.PDResources.put : $r6 = new org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.put : specialinvoke $r6.<org.apache.pdfbox.cos.COSDictionary: void <init>()>()
org.apache.pdfbox.pdmodel.PDResources.put : specialinvoke $r6.<org.apache.pdfbox.cos.COSDictionary: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.put : r8 = $r6
org.apache.pdfbox.pdmodel.PDResources.put : r8 = $r6 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.put : $r7 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary resources>
org.apache.pdfbox.pdmodel.PDResources.put : $r7 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary resources> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.put : virtualinvoke $r7.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, $r6)
org.apache.pdfbox.pdmodel.PDResources.put : virtualinvoke $r7.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, $r6) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.put : virtualinvoke r8.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>(r2, r3)
org.apache.pdfbox.pdmodel.PDResources.put : virtualinvoke r8.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>(r2, r3) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.add : return r5
org.apache.pdfbox.pdmodel.PDResources.add : return r5 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.add : return $r3
org.apache.pdfbox.pdmodel.PDResources.add : return $r3 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperand(org.apache.pdfbox.cos.COSName)>($r6)
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperand(org.apache.pdfbox.cos.COSName)>($r6) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r2 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r2 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : virtualinvoke r1.<org.apache.pdfbox.cos.COSName: void writePDF(java.io.OutputStream)>($r2)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : virtualinvoke r1.<org.apache.pdfbox.cos.COSName: void writePDF(java.io.OutputStream)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(int)>(47)
org.apache.pdfbox.cos.COSName.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(int)>(47) >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : $r4 = virtualinvoke r0.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>()
org.apache.pdfbox.cos.COSName.writePDF : $r4 = virtualinvoke r0.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : $r5 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset US_ASCII>
org.apache.pdfbox.cos.COSName.writePDF : $r5 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset US_ASCII> >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : r2 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r5)
org.apache.pdfbox.cos.COSName.writePDF : r2 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r5) >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : i0 = lengthof r2
org.apache.pdfbox.cos.COSName.writePDF : i0 = lengthof r2 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : i4 = 0
org.apache.pdfbox.cos.COSName.writePDF : i4 = 0 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i4 >= i0
org.apache.pdfbox.cos.COSName.writePDF : if i4 >= i0 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : b1 = r2[i4]
org.apache.pdfbox.cos.COSName.writePDF : b1 = r2[i4] >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : $i3 = b1 + 256
org.apache.pdfbox.cos.COSName.writePDF : $i3 = b1 + 256 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : i2 = $i3 % 256
org.apache.pdfbox.cos.COSName.writePDF : i2 = $i3 % 256 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 < 65
org.apache.pdfbox.cos.COSName.writePDF : if i2 < 65 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 <= 90
org.apache.pdfbox.cos.COSName.writePDF : if i2 <= 90 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(int)>(i2)
org.apache.pdfbox.cos.COSName.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(int)>(i2) >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : goto [?= i4 = i4 + 1]
org.apache.pdfbox.cos.COSName.writePDF : goto [?= i4 = i4 + 1] >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : i4 = i4 + 1
org.apache.pdfbox.cos.COSName.writePDF : i4 = i4 + 1 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : goto [?= (branch)]
org.apache.pdfbox.cos.COSName.writePDF : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 < 97
org.apache.pdfbox.cos.COSName.writePDF : if i2 < 97 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 <= 122
org.apache.pdfbox.cos.COSName.writePDF : if i2 <= 122 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 < 48
org.apache.pdfbox.cos.COSName.writePDF : if i2 < 48 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 <= 57
org.apache.pdfbox.cos.COSName.writePDF : if i2 <= 57 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r3 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output>
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : $r3 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : virtualinvoke $r3.<java.io.OutputStream: void write(int)>(32)
org.apache.pdfbox.contentstream.PDAbstractContentStream.writeOperand : virtualinvoke $r3.<java.io.OutputStream: void write(int)>(32) >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperator(java.lang.String)>("Do")
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void writeOperator(java.lang.String)>("Do") >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void restoreGraphicsState()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.drawImage : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: void restoreGraphicsState()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : $r1 = r0.<org.apache.pdfbox.pdmodel.PDPageContentStream: java.util.Stack fontStack>
org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : $r1 = r0.<org.apache.pdfbox.pdmodel.PDPageContentStream: java.util.Stack fontStack> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : $z0 = virtualinvoke $r1.<java.util.Stack: boolean isEmpty()>()
org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : $z0 = virtualinvoke $r1.<java.util.Stack: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : if $z0 != 0
org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : $r2 = r0.<org.apache.pdfbox.pdmodel.PDPageContentStream: java.util.Stack strokingColorSpaceStack>
org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : $r2 = r0.<org.apache.pdfbox.pdmodel.PDPageContentStream: java.util.Stack strokingColorSpaceStack> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : $z1 = virtualinvoke $r2.<java.util.Stack: boolean isEmpty()>()
org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : $z1 = virtualinvoke $r2.<java.util.Stack: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : if $z1 != 0
org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPageContentStream: java.util.Stack nonStrokingColorSpaceStack>
org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPageContentStream: java.util.Stack nonStrokingColorSpaceStack> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : $z2 = virtualinvoke $r3.<java.util.Stack: boolean isEmpty()>()
org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : $z2 = virtualinvoke $r3.<java.util.Stack: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : if $z2 != 0
org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : if $z2 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDPageContentStream: void writeOperator(java.lang.String)>("Q")
org.apache.pdfbox.pdmodel.PDPageContentStream.restoreGraphicsState : virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDPageContentStream: void writeOperator(java.lang.String)>("Q") >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.add : $r8 = interfaceinvoke r3.<org.apache.pdfbox.pdmodel.common.COSObjectable: org.apache.pdfbox.cos.COSBase getCOSObject()>()
org.apache.pdfbox.pdmodel.PDResources.add : $r8 = interfaceinvoke r3.<org.apache.pdfbox.pdmodel.common.COSObjectable: org.apache.pdfbox.cos.COSBase getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.add : $z0 = virtualinvoke r4.<org.apache.pdfbox.cos.COSDictionary: boolean containsValue(java.lang.Object)>($r8)
org.apache.pdfbox.pdmodel.PDResources.add : $z0 = virtualinvoke r4.<org.apache.pdfbox.cos.COSDictionary: boolean containsValue(java.lang.Object)>($r8) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.containsValue : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.containsValue : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.containsValue : z1 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.containsValue : z1 = interfaceinvoke $r2.<java.util.Map: boolean containsValue(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.containsValue : $i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findValue(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.containsValue : $i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findValue(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.findValue : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.findValue : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.findValue : if $z0 != 0
org.apache.pdfbox.util.SmallMap.findValue : if $z0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findValue : if r1 != null
org.apache.pdfbox.util.SmallMap.findValue : if r1 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.findValue : i1 = 1
org.apache.pdfbox.util.SmallMap.findValue : i1 = 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.findValue : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findValue : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findValue : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.findValue : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findValue : if i1 >= $i0
org.apache.pdfbox.util.SmallMap.findValue : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findValue : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findValue : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findValue : $r4 = $r3[i1]
org.apache.pdfbox.util.SmallMap.findValue : $r4 = $r3[i1] >>>>>>>> org.apache.pdfbox.util.SmallMap.findValue : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4)
org.apache.pdfbox.util.SmallMap.findValue : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.apache.pdfbox.util.SmallMap.findValue : if $z1 == 0
org.apache.pdfbox.util.SmallMap.findValue : if $z1 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findValue : i1 = i1 + 2
org.apache.pdfbox.util.SmallMap.findValue : i1 = i1 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findValue : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.findValue : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.findValue : return -1
org.apache.pdfbox.util.SmallMap.findValue : return -1 >>>>>>>> org.apache.pdfbox.util.SmallMap.containsValue : if $i0 < 0
org.apache.pdfbox.util.SmallMap.containsValue : if $i0 < 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.containsValue : $z0 = 0
org.apache.pdfbox.util.SmallMap.containsValue : $z0 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.containsValue : return $z0
org.apache.pdfbox.util.SmallMap.containsValue : return $z0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.containsValue : if z1 != 0
org.apache.pdfbox.cos.COSDictionary.containsValue : if z1 != 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.containsValue : $z0 = r1 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSDictionary.containsValue : $z0 = r1 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSDictionary.containsValue : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.containsValue : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.containsValue : return z1
org.apache.pdfbox.cos.COSDictionary.containsValue : return z1 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.add : if $z0 == 0
org.apache.pdfbox.pdmodel.PDResources.add : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : $r7 = virtualinvoke r3.<org.apache.pdfbox.cos.COSDictionary: java.util.Set keySet()>()
org.apache.pdfbox.pdmodel.PDResources.createKey : $r7 = virtualinvoke r3.<org.apache.pdfbox.cos.COSDictionary: java.util.Set keySet()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.keySet : $r1 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.keySet : $r1 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.keySet : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>()
org.apache.pdfbox.cos.COSDictionary.keySet : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.keySet : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.keySet : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.keySet : if $z0 == 0
org.apache.pdfbox.util.SmallMap.keySet : if $z0 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.keySet : $r2 = new java.util.LinkedHashSet
org.apache.pdfbox.util.SmallMap.keySet : $r2 = new java.util.LinkedHashSet >>>>>>>> org.apache.pdfbox.util.SmallMap.keySet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>()
org.apache.pdfbox.util.SmallMap.keySet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.keySet : i1 = 0
org.apache.pdfbox.util.SmallMap.keySet : i1 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.keySet : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.keySet : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.keySet : $i0 = lengthof $r3
org.apache.pdfbox.util.SmallMap.keySet : $i0 = lengthof $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap.keySet : if i1 >= $i0
org.apache.pdfbox.util.SmallMap.keySet : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.keySet : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.keySet : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.keySet : $r6 = $r5[i1]
org.apache.pdfbox.util.SmallMap.keySet : $r6 = $r5[i1] >>>>>>>> org.apache.pdfbox.util.SmallMap.keySet : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r6)
org.apache.pdfbox.util.SmallMap.keySet : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r6) >>>>>>>> org.apache.pdfbox.util.SmallMap.keySet : i1 = i1 + 2
org.apache.pdfbox.util.SmallMap.keySet : i1 = i1 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.keySet : goto [?= $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.keySet : goto [?= $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.keySet : $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2)
org.apache.pdfbox.util.SmallMap.keySet : $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.keySet : return $r4
org.apache.pdfbox.util.SmallMap.keySet : return $r4 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.keySet : return $r2
org.apache.pdfbox.cos.COSDictionary.keySet : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : i0 = interfaceinvoke $r7.<java.util.Set: int size()>()
org.apache.pdfbox.pdmodel.PDResources.createKey : i0 = interfaceinvoke $r7.<java.util.Set: int size()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : i0 = i0 + 1
org.apache.pdfbox.pdmodel.PDResources.createKey : i0 = i0 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : $r8 = new java.lang.StringBuilder
org.apache.pdfbox.pdmodel.PDResources.createKey : $r8 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdmodel.PDResources.createKey : specialinvoke $r8.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.pdfbox.pdmodel.PDResources.createKey : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.apache.pdfbox.pdmodel.PDResources.createKey : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdmodel.PDResources.createKey : r4 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : $z0 = virtualinvoke r3.<org.apache.pdfbox.cos.COSDictionary: boolean containsKey(java.lang.String)>(r4)
org.apache.pdfbox.pdmodel.PDResources.createKey : $z0 = virtualinvoke r3.<org.apache.pdfbox.cos.COSDictionary: boolean containsKey(java.lang.String)>(r4) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.containsKey : $r2 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1)
org.apache.pdfbox.cos.COSDictionary.containsKey : $r2 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r5 = new org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSName.getPDFName : $r5 = new org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : specialinvoke $r5.<org.apache.pdfbox.cos.COSName: void <init>(java.lang.String,boolean)>(r0, 0)
org.apache.pdfbox.cos.COSName.getPDFName : specialinvoke $r5.<org.apache.pdfbox.cos.COSName: void <init>(java.lang.String,boolean)>(r0, 0) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = $r5
org.apache.pdfbox.cos.COSName.getPDFName : r6 = $r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.containsKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: boolean containsKey(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.cos.COSDictionary.containsKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: boolean containsKey(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.containsKey : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.containsKey : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.containsKey : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.containsKey : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.containsKey : $i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.containsKey : $i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.containsKey : if $i0 < 0
org.apache.pdfbox.util.SmallMap.containsKey : if $i0 < 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.containsKey : $z0 = 0
org.apache.pdfbox.util.SmallMap.containsKey : $z0 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.containsKey : return $z0
org.apache.pdfbox.util.SmallMap.containsKey : return $z0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.containsKey : return $z0
org.apache.pdfbox.cos.COSDictionary.containsKey : return $z0 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : if $z0 != 0
org.apache.pdfbox.pdmodel.PDResources.createKey : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : $r11 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r4)
org.apache.pdfbox.pdmodel.PDResources.createKey : $r11 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r4) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.createKey : return $r11
org.apache.pdfbox.pdmodel.PDResources.createKey : return $r11 >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.close : $r1 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output>
org.apache.pdfbox.contentstream.PDAbstractContentStream.close : $r1 = r0.<org.apache.pdfbox.contentstream.PDAbstractContentStream: java.io.OutputStream output> >>>>>>>> org.apache.pdfbox.contentstream.PDAbstractContentStream.close : virtualinvoke $r1.<java.io.OutputStream: void close()>()
org.apache.pdfbox.contentstream.PDAbstractContentStream.close : virtualinvoke $r1.<java.io.OutputStream: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : specialinvoke r0.<java.io.FilterOutputStream: void close()>()
org.apache.pdfbox.cos.COSStream$1.close : specialinvoke r0.<java.io.FilterOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : $r2 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.util.List filters>
org.apache.pdfbox.cos.COSOutputStream.close : $r2 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.util.List filters> >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : $i0 = interfaceinvoke $r2.<java.util.List: int size()>()
org.apache.pdfbox.cos.COSOutputStream.close : $i0 = interfaceinvoke $r2.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : i1 = $i0 - 1
org.apache.pdfbox.cos.COSOutputStream.close : i1 = $i0 - 1 >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : if i1 < 0
org.apache.pdfbox.cos.COSOutputStream.close : if i1 < 0 >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : $r4 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.OutputStream out>
org.apache.pdfbox.cos.COSOutputStream.close : $r4 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.OutputStream out> >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : $r3 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.ByteArrayOutputStream buffer>
org.apache.pdfbox.cos.COSOutputStream.close : $r3 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.ByteArrayOutputStream buffer> >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : $r5 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.cos.COSOutputStream.close : $r5 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : virtualinvoke $r4.<java.io.OutputStream: void write(byte[])>($r5)
org.apache.pdfbox.cos.COSOutputStream.close : virtualinvoke $r4.<java.io.OutputStream: void write(byte[])>($r5) >>>>>>>> org.apache.pdfbox.io.RandomAccessOutputStream.write : interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessWrite: void write(byte[])>(r1)
org.apache.pdfbox.io.RandomAccessOutputStream.write : interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessWrite: void write(byte[])>(r1) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i0 = lengthof r1
org.apache.pdfbox.io.ScratchFileBuffer.write : $i0 = lengthof r1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void write(byte[],int,int)>(r1, 0, $i0)
org.apache.pdfbox.io.ScratchFileBuffer.write : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void write(byte[],int,int)>(r1, 0, $i0) >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : specialinvoke r0.<java.io.FilterOutputStream: void close()>()
org.apache.pdfbox.cos.COSOutputStream.close : specialinvoke r0.<java.io.FilterOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : $r2 = r0.<org.apache.pdfbox.cos.COSStream$1: org.apache.pdfbox.cos.COSStream this$0>
org.apache.pdfbox.cos.COSStream$1.close : $r2 = r0.<org.apache.pdfbox.cos.COSStream$1: org.apache.pdfbox.cos.COSStream this$0> >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LENGTH>
org.apache.pdfbox.cos.COSStream$1.close : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LENGTH> >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : $r1 = r0.<org.apache.pdfbox.cos.COSStream$1: org.apache.pdfbox.cos.COSStream this$0>
org.apache.pdfbox.cos.COSStream$1.close : $r1 = r0.<org.apache.pdfbox.cos.COSStream$1: org.apache.pdfbox.cos.COSStream this$0> >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : $r4 = staticinvoke <org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess access$000(org.apache.pdfbox.cos.COSStream)>($r1)
org.apache.pdfbox.cos.COSStream$1.close : $r4 = staticinvoke <org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess access$000(org.apache.pdfbox.cos.COSStream)>($r1) >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : $l0 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccess: long length()>()
org.apache.pdfbox.cos.COSStream$1.close : $l0 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccess: long length()>() >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : $i1 = (int) $l0
org.apache.pdfbox.cos.COSStream$1.close : $i1 = (int) $l0 >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: void setInt(org.apache.pdfbox.cos.COSName,int)>($r3, $i1)
org.apache.pdfbox.cos.COSStream$1.close : virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: void setInt(org.apache.pdfbox.cos.COSName,int)>($r3, $i1) >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : $r5 = r0.<org.apache.pdfbox.cos.COSStream$1: org.apache.pdfbox.cos.COSStream this$0>
org.apache.pdfbox.cos.COSStream$1.close : $r5 = r0.<org.apache.pdfbox.cos.COSStream$1: org.apache.pdfbox.cos.COSStream this$0> >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : staticinvoke <org.apache.pdfbox.cos.COSStream: boolean access$102(org.apache.pdfbox.cos.COSStream,boolean)>($r5, 0)
org.apache.pdfbox.cos.COSStream$1.close : staticinvoke <org.apache.pdfbox.cos.COSStream: boolean access$102(org.apache.pdfbox.cos.COSStream,boolean)>($r5, 0) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : $r2 = new java.io.BufferedOutputStream
org.apache.pdfbox.pdmodel.PDDocument.save : $r2 = new java.io.BufferedOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : $r3 = new java.io.FileOutputStream
org.apache.pdfbox.pdmodel.PDDocument.save : $r3 = new java.io.FileOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>(r1)
org.apache.pdfbox.pdmodel.PDDocument.save : specialinvoke $r3.<java.io.FileOutputStream: void <init>(java.io.File)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : specialinvoke $r2.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r3)
org.apache.pdfbox.pdmodel.PDDocument.save : specialinvoke $r2.<java.io.BufferedOutputStream: void <init>(java.io.OutputStream)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: void save(java.io.OutputStream)>($r2)
org.apache.pdfbox.pdmodel.PDDocument.save : virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: void save(java.io.OutputStream)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : $r4 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdmodel.PDDocument.save : $r4 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : $z0 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDocument: boolean isClosed()>()
org.apache.pdfbox.pdmodel.PDDocument.save : $z0 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDocument: boolean isClosed()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.isClosed : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed>
org.apache.pdfbox.cos.COSDocument.isClosed : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> >>>>>>>> org.apache.pdfbox.cos.COSDocument.isClosed : return $z0
org.apache.pdfbox.cos.COSDocument.isClosed : return $z0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : if $z0 == 0
org.apache.pdfbox.pdmodel.PDDocument.save : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : $r5 = r0.<org.apache.pdfbox.pdmodel.PDDocument: java.util.Set fontsToSubset>
org.apache.pdfbox.pdmodel.PDDocument.save : $r5 = r0.<org.apache.pdfbox.pdmodel.PDDocument: java.util.Set fontsToSubset> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : r11 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
org.apache.pdfbox.pdmodel.PDDocument.save : r11 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdmodel.PDDocument.save : $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : if $z1 == 0
org.apache.pdfbox.pdmodel.PDDocument.save : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : $r6 = r0.<org.apache.pdfbox.pdmodel.PDDocument: java.util.Set fontsToSubset>
org.apache.pdfbox.pdmodel.PDDocument.save : $r6 = r0.<org.apache.pdfbox.pdmodel.PDDocument: java.util.Set fontsToSubset> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : interfaceinvoke $r6.<java.util.Set: void clear()>()
org.apache.pdfbox.pdmodel.PDDocument.save : interfaceinvoke $r6.<java.util.Set: void clear()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : $r7 = new org.apache.pdfbox.pdfwriter.COSWriter
org.apache.pdfbox.pdmodel.PDDocument.save : $r7 = new org.apache.pdfbox.pdfwriter.COSWriter >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : specialinvoke $r7.<org.apache.pdfbox.pdfwriter.COSWriter: void <init>(java.io.OutputStream)>(r1)
org.apache.pdfbox.pdmodel.PDDocument.save : specialinvoke $r7.<org.apache.pdfbox.pdfwriter.COSWriter: void <init>(java.io.OutputStream)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.setOutput : r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream output> = r1
org.apache.pdfbox.pdfwriter.COSWriter.setOutput : r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream output> = r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.setStandardOutput : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput> = r1
org.apache.pdfbox.pdfwriter.COSWriter.setStandardOutput : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput> = r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSWriter: void write(org.apache.pdfbox.pdmodel.PDDocument)>(r0)
org.apache.pdfbox.pdmodel.PDDocument.save : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSWriter: void write(org.apache.pdfbox.pdmodel.PDDocument)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void write(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface)>(r1, null)
org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void write(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface)>(r1, null) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r6 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDDocument: java.lang.Long getDocumentId()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : $r6 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDDocument: java.lang.Long getDocumentId()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentId : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: java.lang.Long documentId>
org.apache.pdfbox.pdmodel.PDDocument.getDocumentId : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: java.lang.Long documentId> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentId : return $r1
org.apache.pdfbox.pdmodel.PDDocument.getDocumentId : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if $r6 != null
org.apache.pdfbox.pdfwriter.COSWriter.write : if $r6 != null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : goto [?= r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)]
org.apache.pdfbox.pdfwriter.COSWriter.write : goto [?= r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.pdfbox.pdfwriter.COSWriter.write : r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument pdDocument> = r1
org.apache.pdfbox.pdfwriter.COSWriter.write : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument pdDocument> = r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface signatureInterface> = r2
org.apache.pdfbox.pdfwriter.COSWriter.write : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface signatureInterface> = r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>
org.apache.pdfbox.pdfwriter.COSWriter.write : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if $z0 == 0
org.apache.pdfbox.pdfwriter.COSWriter.write : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $z1 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDDocument: boolean isAllSecurityToBeRemoved()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : $z1 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDDocument: boolean isAllSecurityToBeRemoved()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.isAllSecurityToBeRemoved : $z0 = r0.<org.apache.pdfbox.pdmodel.PDDocument: boolean allSecurityToBeRemoved>
org.apache.pdfbox.pdmodel.PDDocument.isAllSecurityToBeRemoved : $z0 = r0.<org.apache.pdfbox.pdmodel.PDDocument: boolean allSecurityToBeRemoved> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.isAllSecurityToBeRemoved : return $z0
org.apache.pdfbox.pdmodel.PDDocument.isAllSecurityToBeRemoved : return $z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if $z1 == 0
org.apache.pdfbox.pdfwriter.COSWriter.write : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r8 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument pdDocument>
org.apache.pdfbox.pdfwriter.COSWriter.write : $r8 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument pdDocument> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r9 = virtualinvoke $r8.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryption getEncryption()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : $r9 = virtualinvoke $r8.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryption getEncryption()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getEncryption : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryption encryption>
org.apache.pdfbox.pdmodel.PDDocument.getEncryption : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryption encryption> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getEncryption : if $r1 != null
org.apache.pdfbox.pdmodel.PDDocument.getEncryption : if $r1 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getEncryption : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: boolean isEncrypted()>()
org.apache.pdfbox.pdmodel.PDDocument.getEncryption : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: boolean isEncrypted()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.isEncrypted : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdmodel.PDDocument.isEncrypted : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.isEncrypted : $z0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSDocument: boolean isEncrypted()>()
org.apache.pdfbox.pdmodel.PDDocument.isEncrypted : $z0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSDocument: boolean isEncrypted()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : z0 = 0
org.apache.pdfbox.cos.COSDocument.isEncrypted : z0 = 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : $r1 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.cos.COSDocument.isEncrypted : $r1 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : if $r1 == null
org.apache.pdfbox.cos.COSDocument.isEncrypted : if $r1 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.cos.COSDocument.isEncrypted : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCRYPT>
org.apache.pdfbox.cos.COSDocument.isEncrypted : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCRYPT> >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.cos.COSDocument.isEncrypted : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : if $r4 == null
org.apache.pdfbox.cos.COSDocument.isEncrypted : if $r4 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : $z1 = 0
org.apache.pdfbox.cos.COSDocument.isEncrypted : $z1 = 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : z0 = $z1
org.apache.pdfbox.cos.COSDocument.isEncrypted : z0 = $z1 >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : return z0
org.apache.pdfbox.cos.COSDocument.isEncrypted : return z0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.isEncrypted : return $z0
org.apache.pdfbox.pdmodel.PDDocument.isEncrypted : return $z0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getEncryption : if $z0 == 0
org.apache.pdfbox.pdmodel.PDDocument.getEncryption : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getEncryption : $r5 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryption encryption>
org.apache.pdfbox.pdmodel.PDDocument.getEncryption : $r5 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryption encryption> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getEncryption : return $r5
org.apache.pdfbox.pdmodel.PDDocument.getEncryption : return $r5 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if $r9 == null
org.apache.pdfbox.pdfwriter.COSWriter.write : if $r9 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> = 0
org.apache.pdfbox.pdfwriter.COSWriter.write : r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r36 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument pdDocument>
org.apache.pdfbox.pdfwriter.COSWriter.write : $r36 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument pdDocument> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r37 = virtualinvoke $r36.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : r37 = virtualinvoke $r36.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r38 = virtualinvoke r37.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : r38 = virtualinvoke r37.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r39 = null
org.apache.pdfbox.pdfwriter.COSWriter.write : r39 = null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : z6 = 1
org.apache.pdfbox.pdfwriter.COSWriter.write : z6 = 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r40 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ID>
org.apache.pdfbox.pdfwriter.COSWriter.write : $r40 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ID> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r4 = virtualinvoke r38.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r40)
org.apache.pdfbox.pdfwriter.COSWriter.write : r4 = virtualinvoke r38.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r40) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $z7 = r4 instanceof org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.pdfwriter.COSWriter.write : $z7 = r4 instanceof org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if $z7 == 0
org.apache.pdfbox.pdfwriter.COSWriter.write : if $z7 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if r39 == null
org.apache.pdfbox.pdfwriter.COSWriter.write : if r39 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if z6 != 0
org.apache.pdfbox.pdfwriter.COSWriter.write : if z6 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5")
org.apache.pdfbox.pdfwriter.COSWriter.write : r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5") >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : goto [?= $l0 = virtualinvoke r3.<java.lang.Long: long longValue()>()]
org.apache.pdfbox.pdfwriter.COSWriter.write : goto [?= $l0 = virtualinvoke r3.<java.lang.Long: long longValue()>()] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $l0 = virtualinvoke r3.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : $l0 = virtualinvoke r3.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0)
org.apache.pdfbox.pdfwriter.COSWriter.write : $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r11 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.write : $r11 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r12 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11)
org.apache.pdfbox.pdfwriter.COSWriter.write : $r12 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke r5.<java.security.MessageDigest: void update(byte[])>($r12)
org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke r5.<java.security.MessageDigest: void update(byte[])>($r12) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r13 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INFO>
org.apache.pdfbox.pdfwriter.COSWriter.write : $r13 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INFO> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r14 = virtualinvoke r38.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r13)
org.apache.pdfbox.pdfwriter.COSWriter.write : $r14 = virtualinvoke r38.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r13) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r42 = (org.apache.pdfbox.cos.COSDictionary) $r14
org.apache.pdfbox.pdfwriter.COSWriter.write : r42 = (org.apache.pdfbox.cos.COSDictionary) $r14 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if r42 == null
org.apache.pdfbox.pdfwriter.COSWriter.write : if r42 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if z6 == 0
org.apache.pdfbox.pdfwriter.COSWriter.write : if z6 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r45 = new org.apache.pdfbox.cos.COSString
org.apache.pdfbox.pdfwriter.COSWriter.write : $r45 = new org.apache.pdfbox.cos.COSString >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r20 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : $r20 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : specialinvoke $r45.<org.apache.pdfbox.cos.COSString: void <init>(byte[])>($r20)
org.apache.pdfbox.pdfwriter.COSWriter.write : specialinvoke $r45.<org.apache.pdfbox.cos.COSString: void <init>(byte[])>($r20) >>>>>>>> org.apache.pdfbox.cos.COSString.setValue : $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>()
org.apache.pdfbox.cos.COSString.setValue : $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.pdfbox.cos.COSString.setValue : $r3 = (byte[]) $r2
org.apache.pdfbox.cos.COSString.setValue : $r3 = (byte[]) $r2 >>>>>>>> org.apache.pdfbox.cos.COSString.setValue : r0.<org.apache.pdfbox.cos.COSString: byte[] bytes> = $r3
org.apache.pdfbox.cos.COSString.setValue : r0.<org.apache.pdfbox.cos.COSString: byte[] bytes> = $r3 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : goto [?= r46 = $r45]
org.apache.pdfbox.pdfwriter.COSWriter.write : goto [?= r46 = $r45] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r46 = $r45
org.apache.pdfbox.pdfwriter.COSWriter.write : r46 = $r45 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r47 = $r45
org.apache.pdfbox.pdfwriter.COSWriter.write : $r47 = $r45 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : goto [?= $r17 = new org.apache.pdfbox.cos.COSArray]
org.apache.pdfbox.pdfwriter.COSWriter.write : goto [?= $r17 = new org.apache.pdfbox.cos.COSArray] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r17 = new org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.pdfwriter.COSWriter.write : $r17 = new org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : specialinvoke $r17.<org.apache.pdfbox.cos.COSArray: void <init>()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : specialinvoke $r17.<org.apache.pdfbox.cos.COSArray: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke $r17.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>(r46)
org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke $r17.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>(r46) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke $r17.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r47)
org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke $r17.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r47) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r18 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ID>
org.apache.pdfbox.pdfwriter.COSWriter.write : $r18 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ID> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke r38.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r18, $r17)
org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke r38.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r18, $r17) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke r37.<org.apache.pdfbox.cos.COSDocument: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0)
org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke r37.<org.apache.pdfbox.cos.COSDocument: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSDocument.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromDocument(org.apache.pdfbox.cos.COSDocument)>(r0)
org.apache.pdfbox.cos.COSDocument.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromDocument(org.apache.pdfbox.cos.COSDocument)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if $z0 != 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteHeader(org.apache.pdfbox.cos.COSDocument)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteHeader(org.apache.pdfbox.cos.COSDocument)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.fdf.FDFDocument fdfDocument>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.fdf.FDFDocument fdfDocument> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : if $r2 == null
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : if $r2 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r3 = new java.lang.StringBuilder
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%PDF-")
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%PDF-") >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument pdDocument>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument pdDocument> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r6 = virtualinvoke $r5.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r6 = virtualinvoke $r5.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $f0 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDocument: float getVersion()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $f0 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDocument: float getVersion()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getVersion : $f0 = r0.<org.apache.pdfbox.cos.COSDocument: float version>
org.apache.pdfbox.cos.COSDocument.getVersion : $f0 = r0.<org.apache.pdfbox.cos.COSDocument: float version> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getVersion : return $f0
org.apache.pdfbox.cos.COSDocument.getVersion : return $f0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r7 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r7 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : r24 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : r24 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getStandardOutput : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput>
org.apache.pdfbox.pdfwriter.COSWriter.getStandardOutput : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getStandardOutput : return $r1
org.apache.pdfbox.pdfwriter.COSWriter.getStandardOutput : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r10 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r10 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r11 = virtualinvoke r24.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r10)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r11 = virtualinvoke r24.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r10) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r9.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r11)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r9.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r11) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setOnNewLine(boolean)>(0)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setOnNewLine(boolean)>(0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.setOnNewLine : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean onNewLine> = z0
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.setOnNewLine : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean onNewLine> = z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.OutputStream out>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.OutputStream out> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l3 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l3 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l2 = (long) i1
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l2 = (long) i1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l4 = $l3 + $l2
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l4 = $l3 + $l2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> = $l4
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> = $l4 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean isOnNewLine()>()
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean isOnNewLine()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.isOnNewLine : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean onNewLine>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.isOnNewLine : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean onNewLine> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.isOnNewLine : return $z0
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.isOnNewLine : return $z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : if $z0 != 0
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : $r1 = <org.apache.pdfbox.pdfwriter.COSStandardOutputStream: byte[] EOL>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : $r1 = <org.apache.pdfbox.pdfwriter.COSStandardOutputStream: byte[] EOL> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r1)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setOnNewLine(boolean)>(1)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setOnNewLine(boolean)>(1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r13 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r13 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r14 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] COMMENT>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r14 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] COMMENT> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r13.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r14)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r13.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r14) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r15 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r15 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r16 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] GARBAGE>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r16 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] GARBAGE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r15.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r16)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r15.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r16) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r17 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r17 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r17.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r17.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : goto [?= virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteBody(org.apache.pdfbox.cos.COSDocument)>(r1)]
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : goto [?= virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteBody(org.apache.pdfbox.cos.COSDocument)>(r1)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteBody(org.apache.pdfbox.cos.COSDocument)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteBody(org.apache.pdfbox.cos.COSDocument)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROOT>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROOT> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r7 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r6)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r7 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r6) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r3 = (org.apache.pdfbox.cos.COSDictionary) $r7
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r3 = (org.apache.pdfbox.cos.COSDictionary) $r7 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INFO>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INFO> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r9 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r8)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r9 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r8) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r4 = (org.apache.pdfbox.cos.COSDictionary) $r9
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r4 = (org.apache.pdfbox.cos.COSDictionary) $r9 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCRYPT>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCRYPT> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r11 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r10)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r11 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r10) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r5 = (org.apache.pdfbox.cos.COSDictionary) $r11
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r5 = (org.apache.pdfbox.cos.COSDictionary) $r11 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : if r3 == null
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : if r3 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r3)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : r14 = r1
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : r14 = r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z0 = r1 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z0 = r1 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z0 == 0
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set writtenObjects>
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set writtenObjects> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z1 != 0
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set objectsToWriteSet>
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set objectsToWriteSet> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z2 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z2 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z2 != 0
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z2 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r4 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set actualsAdded>
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r4 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set actualsAdded> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z3 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r14)
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z3 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r14) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z3 != 0
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z3 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : r15 = null
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : r15 = null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : r16 = null
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : r16 = null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if r14 == null
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if r14 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r11 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r11 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r14)
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r14) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : r16 = (org.apache.pdfbox.cos.COSObjectKey) $r12
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : r16 = (org.apache.pdfbox.cos.COSObjectKey) $r12 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if r16 == null
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if r16 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r6 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r6 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z7 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r14)
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z7 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r14) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z7 == 0
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z7 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r17 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Deque objectsToWrite>
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r17 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Deque objectsToWrite> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : interfaceinvoke $r17.<java.util.Deque: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : interfaceinvoke $r17.<java.util.Deque: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r18 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set objectsToWriteSet>
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r18 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set objectsToWriteSet> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set actualsAdded>
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set actualsAdded> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r14)
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r14) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : if r4 == null
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : if r4 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteObjects()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteObjects()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Deque objectsToWrite>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Deque objectsToWrite> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $i0 = interfaceinvoke $r2.<java.util.Deque: int size()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $i0 = interfaceinvoke $r2.<java.util.Deque: int size()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : if $i0 <= 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : if $i0 <= 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Deque objectsToWrite>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Deque objectsToWrite> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $r4 = interfaceinvoke $r3.<java.util.Deque: java.lang.Object removeFirst()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $r4 = interfaceinvoke $r3.<java.util.Deque: java.lang.Object removeFirst()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : r1 = (org.apache.pdfbox.cos.COSBase) $r4
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : r1 = (org.apache.pdfbox.cos.COSBase) $r4 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set objectsToWriteSet>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set objectsToWriteSet> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteObject(org.apache.pdfbox.cos.COSBase)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteObject(org.apache.pdfbox.cos.COSBase)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set writtenObjects>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set writtenObjects> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r3 = specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey getObjectKey(org.apache.pdfbox.cos.COSBase)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r3 = specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey getObjectKey(org.apache.pdfbox.cos.COSBase)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r12 = r1
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r12 = r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $z0 = r1 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $z0 = r1 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : if $z0 == 0
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r13 = null
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r13 = null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : if r12 == null
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : if r12 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r9 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r9 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12)
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r13 = (org.apache.pdfbox.cos.COSObjectKey) $r10
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r13 = (org.apache.pdfbox.cos.COSObjectKey) $r10 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : if r13 != null
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : if r13 != null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r7 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r7 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r13 = (org.apache.pdfbox.cos.COSObjectKey) $r8
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r13 = (org.apache.pdfbox.cos.COSObjectKey) $r8 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $l0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $l0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getNumber : $l0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: long number>
org.apache.pdfbox.pdfwriter.COSWriter.getNumber : $l0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: long number> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getNumber : return $l0
org.apache.pdfbox.pdfwriter.COSWriter.getNumber : return $l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $l1 = $l0 + 1L
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $l1 = $l0 + 1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void setNumber(long)>($l1)
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void setNumber(long)>($l1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.setNumber : r0.<org.apache.pdfbox.pdfwriter.COSWriter: long number> = l0
org.apache.pdfbox.pdfwriter.COSWriter.setNumber : r0.<org.apache.pdfbox.pdfwriter.COSWriter: long number> = l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r2 = new org.apache.pdfbox.cos.COSObjectKey
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r2 = new org.apache.pdfbox.cos.COSObjectKey >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $l2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $l2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : specialinvoke $r2.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>($l2, 0)
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : specialinvoke $r2.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>($l2, 0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r13 = $r2
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r13 = $r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2)
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r2)
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : return r13
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : return r13 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey currentObjectKey> = $r3
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey currentObjectKey> = $r3 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r4 = new org.apache.pdfbox.pdfwriter.COSWriterXRefEntry
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r4 = new org.apache.pdfbox.pdfwriter.COSWriterXRefEntry >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $l0 = virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $l0 = virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.getPos : $l0 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.getPos : $l0 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.getPos : return $l0
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.getPos : return $l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r6 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey currentObjectKey>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r6 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey currentObjectKey> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : specialinvoke $r4.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: void <init>(long,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSObjectKey)>($l0, r1, $r6)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : specialinvoke $r4.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: void <init>(long,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSObjectKey)>($l0, r1, $r6) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.setOffset : r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: long offset> = l0
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.setOffset : r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: long offset> = l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.setObject : r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSBase object> = r1
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.setObject : r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSBase object> = r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.setKey : r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey key> = r1
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.setKey : r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey key> = r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addXRefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r4)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addXRefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r4) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addXRefEntry : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>()
org.apache.pdfbox.pdfwriter.COSWriter.addXRefEntry : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefEntries : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List xRefEntries>
org.apache.pdfbox.pdfwriter.COSWriter.getXRefEntries : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List xRefEntries> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefEntries : return $r1
org.apache.pdfbox.pdfwriter.COSWriter.getXRefEntries : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addXRefEntry : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.addXRefEntry : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r8 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey currentObjectKey>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r8 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey currentObjectKey> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $l1 = virtualinvoke $r8.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $l1 = virtualinvoke $r8.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.getNumber : $l0 = r0.<org.apache.pdfbox.cos.COSObjectKey: long number>
org.apache.pdfbox.cos.COSObjectKey.getNumber : $l0 = r0.<org.apache.pdfbox.cos.COSObjectKey: long number> >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.getNumber : return $l0
org.apache.pdfbox.cos.COSObjectKey.getNumber : return $l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l1)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r10 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r10 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r11 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r10)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r11 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r10) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r11)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r11) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r13 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r13 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r14 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r14 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r15 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey currentObjectKey>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r15 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey currentObjectKey> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $i2 = virtualinvoke $r15.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $i2 = virtualinvoke $r15.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>() >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.getGeneration : $i0 = r0.<org.apache.pdfbox.cos.COSObjectKey: int generation>
org.apache.pdfbox.cos.COSObjectKey.getGeneration : $i0 = r0.<org.apache.pdfbox.cos.COSObjectKey: int generation> >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.getGeneration : return $i0
org.apache.pdfbox.cos.COSObjectKey.getGeneration : return $i0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r17 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r17 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r18 = virtualinvoke $r16.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r17)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r18 = virtualinvoke $r16.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r17) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r14.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r18)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r14.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r18) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r19 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r19 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r20 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r20 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r19.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r20)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r19.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r20) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r21 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r21 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r22 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] OBJ>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r22 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] OBJ> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r21.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r22)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r21.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r22) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r23 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r23 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r23.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r23.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke r1.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke r1.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromDictionary(org.apache.pdfbox.cos.COSDictionary)>(r0)
org.apache.pdfbox.cos.COSDictionary.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromDictionary(org.apache.pdfbox.cos.COSDictionary)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z0 != 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r32 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r32 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r35 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r32)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r35 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r32) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r33 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SIG>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r33 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SIG> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z10 = virtualinvoke $r33.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r35)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z10 = virtualinvoke $r33.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r35) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z10 != 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z10 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r34 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DOC_TIME_STAMP>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r34 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DOC_TIME_STAMP> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z11 = virtualinvoke $r34.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r35)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z11 = virtualinvoke $r34.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r35) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z11 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z11 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r36 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r36 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r37 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] DICT_OPEN>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r37 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] DICT_OPEN> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r36.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r37)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r36.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r37) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r38 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r38 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r38.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r38.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r39 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Set entrySet()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r39 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Set entrySet()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z12 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z12 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z12 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z12 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r7 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r7 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r2 = (java.util.Map$Entry) $r7
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r2 = (java.util.Map$Entry) $r7 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r3 = (org.apache.pdfbox.cos.COSBase) $r8
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r3 = (org.apache.pdfbox.cos.COSBase) $r8 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if r3 == null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if r3 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r9 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r9 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r10 = (org.apache.pdfbox.cos.COSName) $r9
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r10 = (org.apache.pdfbox.cos.COSName) $r9 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r10.<org.apache.pdfbox.cos.COSName: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r10.<org.apache.pdfbox.cos.COSName: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSName.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromName(org.apache.pdfbox.cos.COSName)>(r0)
org.apache.pdfbox.cos.COSName.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromName(org.apache.pdfbox.cos.COSName)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromName : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromName : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromName : virtualinvoke r1.<org.apache.pdfbox.cos.COSName: void writePDF(java.io.OutputStream)>($r2)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromName : virtualinvoke r1.<org.apache.pdfbox.cos.COSName: void writePDF(java.io.OutputStream)>($r2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.OutputStream out>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.OutputStream out> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l1 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l1 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l2 = $l1 + 1L
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l2 = $l1 + 1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> = $l2
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> = $l2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromName : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromName : return null >>>>>>>> org.apache.pdfbox.cos.COSName.accept : return $r2
org.apache.pdfbox.cos.COSName.accept : return $r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r13 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r13 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z1 = r3 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z1 = r3 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z1 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z2 = r3 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z2 = r3 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z2 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z3 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z4 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z4 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z4 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke r3.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke r3.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r45 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r45 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r45.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r45.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : goto [?= $z12 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : goto [?= $z12 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 == 43
org.apache.pdfbox.cos.COSName.writePDF : if i2 == 43 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 == 45
org.apache.pdfbox.cos.COSName.writePDF : if i2 == 45 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 == 95
org.apache.pdfbox.cos.COSName.writePDF : if i2 == 95 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 == 64
org.apache.pdfbox.cos.COSName.writePDF : if i2 == 64 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 == 42
org.apache.pdfbox.cos.COSName.writePDF : if i2 == 42 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 == 36
org.apache.pdfbox.cos.COSName.writePDF : if i2 == 36 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 == 59
org.apache.pdfbox.cos.COSName.writePDF : if i2 == 59 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 != 46
org.apache.pdfbox.cos.COSName.writePDF : if i2 != 46 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r41 = (org.apache.pdfbox.cos.COSDictionary) r3
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r41 = (org.apache.pdfbox.cos.COSDictionary) r3 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z9 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z9 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z9 != 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z9 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r30 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XOBJECT>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r30 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XOBJECT> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r42 = virtualinvoke r41.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r30)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r42 = virtualinvoke r41.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r30) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if r42 == null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if r42 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r31 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName RESOURCES>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r31 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName RESOURCES> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r43 = virtualinvoke r41.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r31)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r43 = virtualinvoke r41.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r31) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if r43 == null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if r43 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z13 = virtualinvoke r41.<org.apache.pdfbox.cos.COSDictionary: boolean isDirect()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z13 = virtualinvoke r41.<org.apache.pdfbox.cos.COSDictionary: boolean isDirect()>() >>>>>>>> org.apache.pdfbox.cos.COSBase.isDirect : $z0 = r0.<org.apache.pdfbox.cos.COSBase: boolean direct>
org.apache.pdfbox.cos.COSBase.isDirect : $z0 = r0.<org.apache.pdfbox.cos.COSBase: boolean direct> >>>>>>>> org.apache.pdfbox.cos.COSBase.isDirect : return $z0
org.apache.pdfbox.cos.COSBase.isDirect : return $z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z13 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z13 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r41)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r41) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeReference(org.apache.pdfbox.cos.COSBase)>(r41)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeReference(org.apache.pdfbox.cos.COSBase)>(r41) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : r2 = specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey getObjectKey(org.apache.pdfbox.cos.COSBase)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : r2 = specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey getObjectKey(org.apache.pdfbox.cos.COSBase)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $l0 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $l0 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r5 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r5 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r6 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r5)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r6 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r5) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r3.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r3.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r8 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r8 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r8)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r8) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $i1 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $i1 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r11 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r11 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r12 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r12 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r9.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r12)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r9.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r12) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r13 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r13 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r14 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r14 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r13.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r14)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r13.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r14) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r15 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r15 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r16 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] REFERENCE>
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r16 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] REFERENCE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r15.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r16)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r15.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r16) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : goto [?= $r45 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()]
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : goto [?= $r45 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r5 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] DICT_CLOSE>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r5 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] DICT_CLOSE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r5)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r5) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : return null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.accept : return $r2
org.apache.pdfbox.cos.COSDictionary.accept : return $r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r25 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r25 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r25.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r25.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r26 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r26 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r27 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ENDOBJ>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r27 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ENDOBJ> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r26.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r27)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r26.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r27) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r28 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r28 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r28.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r28.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : goto [?= $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Deque objectsToWrite>]
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : goto [?= $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Deque objectsToWrite>] >>>>>>>> org.apache.pdfbox.cos.COSArray.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromArray(org.apache.pdfbox.cos.COSArray)>(r0)
org.apache.pdfbox.cos.COSArray.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromArray(org.apache.pdfbox.cos.COSArray)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : i1 = 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : i1 = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r6 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ARRAY_OPEN>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r6 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ARRAY_OPEN> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.iterator : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.iterator : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.iterator : $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSArray.iterator : $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.iterator : return $r2
org.apache.pdfbox.cos.COSArray.iterator : return $r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z0 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : r3 = (org.apache.pdfbox.cos.COSBase) $r10
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : r3 = (org.apache.pdfbox.cos.COSBase) $r10 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z1 = r3 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z1 = r3 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z1 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z5 = virtualinvoke r3.<org.apache.pdfbox.cos.COSBase: boolean isDirect()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z5 = virtualinvoke r3.<org.apache.pdfbox.cos.COSBase: boolean isDirect()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z5 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z5 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r3)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeReference(org.apache.pdfbox.cos.COSBase)>(r3)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeReference(org.apache.pdfbox.cos.COSBase)>(r3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : goto [?= i1 = i1 + 1]
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : goto [?= i1 = i1 + 1] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : i1 = i1 + 1
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : i1 = i1 + 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z6 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z6 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z6 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z6 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r8 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ARRAY_CLOSE>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r8 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ARRAY_CLOSE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r8)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r8) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke $r9.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke $r9.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : return null >>>>>>>> org.apache.pdfbox.cos.COSArray.accept : return $r2
org.apache.pdfbox.cos.COSArray.accept : return $r2 >>>>>>>> org.apache.pdfbox.cos.COSInteger.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromInt(org.apache.pdfbox.cos.COSInteger)>(r0)
org.apache.pdfbox.cos.COSInteger.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromInt(org.apache.pdfbox.cos.COSInteger)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromInt : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromInt : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromInt : virtualinvoke r1.<org.apache.pdfbox.cos.COSInteger: void writePDF(java.io.OutputStream)>($r2)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromInt : virtualinvoke r1.<org.apache.pdfbox.cos.COSInteger: void writePDF(java.io.OutputStream)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSInteger.writePDF : $l0 = r0.<org.apache.pdfbox.cos.COSInteger: long value>
org.apache.pdfbox.cos.COSInteger.writePDF : $l0 = r0.<org.apache.pdfbox.cos.COSInteger: long value> >>>>>>>> org.apache.pdfbox.cos.COSInteger.writePDF : $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0)
org.apache.pdfbox.cos.COSInteger.writePDF : $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0) >>>>>>>> org.apache.pdfbox.cos.COSInteger.writePDF : $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1")
org.apache.pdfbox.cos.COSInteger.writePDF : $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1") >>>>>>>> org.apache.pdfbox.cos.COSInteger.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3)
org.apache.pdfbox.cos.COSInteger.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromInt : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromInt : return null >>>>>>>> org.apache.pdfbox.cos.COSInteger.accept : return $r2
org.apache.pdfbox.cos.COSInteger.accept : return $r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z2 = r3 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z2 = r3 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z2 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if r3 != null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if r3 != null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke r3.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke r3.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSFloat.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromFloat(org.apache.pdfbox.cos.COSFloat)>(r0)
org.apache.pdfbox.cos.COSFloat.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromFloat(org.apache.pdfbox.cos.COSFloat)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : virtualinvoke r1.<org.apache.pdfbox.cos.COSFloat: void writePDF(java.io.OutputStream)>($r2)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : virtualinvoke r1.<org.apache.pdfbox.cos.COSFloat: void writePDF(java.io.OutputStream)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSFloat.writePDF : $r2 = r0.<org.apache.pdfbox.cos.COSFloat: java.lang.String valueAsString>
org.apache.pdfbox.cos.COSFloat.writePDF : $r2 = r0.<org.apache.pdfbox.cos.COSFloat: java.lang.String valueAsString> >>>>>>>> org.apache.pdfbox.cos.COSFloat.writePDF : $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1")
org.apache.pdfbox.cos.COSFloat.writePDF : $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1") >>>>>>>> org.apache.pdfbox.cos.COSFloat.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3)
org.apache.pdfbox.cos.COSFloat.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : return null >>>>>>>> org.apache.pdfbox.cos.COSFloat.accept : return $r2
org.apache.pdfbox.cos.COSFloat.accept : return $r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $i0 = i1 % 10
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $i0 = i1 % 10 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $i0 != 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $i0 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r13 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r13 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke r42.<org.apache.pdfbox.cos.COSBase: void setDirect(boolean)>(1)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke r42.<org.apache.pdfbox.cos.COSBase: void setDirect(boolean)>(1) >>>>>>>> org.apache.pdfbox.cos.COSBase.setDirect : r0.<org.apache.pdfbox.cos.COSBase: boolean direct> = z0
org.apache.pdfbox.cos.COSBase.setDirect : r0.<org.apache.pdfbox.cos.COSBase: boolean direct> = z0 >>>>>>>> org.apache.pdfbox.cos.COSStream.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromStream(org.apache.pdfbox.cos.COSStream)>(r0)
org.apache.pdfbox.cos.COSStream.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromStream(org.apache.pdfbox.cos.COSStream)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : if $z0 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : r17 = null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : r17 = null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.lang.Object visitFromDictionary(org.apache.pdfbox.cos.COSDictionary)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.lang.Object visitFromDictionary(org.apache.pdfbox.cos.COSDictionary)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $r4 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] STREAM>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $r4 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] STREAM> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : virtualinvoke $r3.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r4)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : virtualinvoke $r3.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r4) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeCRLF()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeCRLF()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeCRLF : $r1 = <org.apache.pdfbox.pdfwriter.COSStandardOutputStream: byte[] CRLF>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeCRLF : $r1 = <org.apache.pdfbox.pdfwriter.COSStandardOutputStream: byte[] CRLF> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeCRLF : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r1)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeCRLF : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : r17 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: java.io.InputStream createRawInputStream()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : r17 = virtualinvoke r1.<org.apache.pdfbox.cos.COSStream: java.io.InputStream createRawInputStream()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>()
org.apache.pdfbox.cos.COSStream.createRawInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawInputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting>
org.apache.pdfbox.cos.COSStream.createRawInputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawInputStream : if $z0 == 0
org.apache.pdfbox.cos.COSStream.createRawInputStream : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void ensureRandomAccessExists(boolean)>(1)
org.apache.pdfbox.cos.COSStream.createRawInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void ensureRandomAccessExists(boolean)>(1) >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawInputStream : $r1 = new org.apache.pdfbox.io.RandomAccessInputStream
org.apache.pdfbox.cos.COSStream.createRawInputStream : $r1 = new org.apache.pdfbox.io.RandomAccessInputStream >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawInputStream : $r2 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.createRawInputStream : $r2 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawInputStream : specialinvoke $r1.<org.apache.pdfbox.io.RandomAccessInputStream: void <init>(org.apache.pdfbox.io.RandomAccessRead)>($r2)
org.apache.pdfbox.cos.COSStream.createRawInputStream : specialinvoke $r1.<org.apache.pdfbox.io.RandomAccessInputStream: void <init>(org.apache.pdfbox.io.RandomAccessRead)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSStream.createRawInputStream : return $r1
org.apache.pdfbox.cos.COSStream.createRawInputStream : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : staticinvoke <org.apache.pdfbox.io.IOUtils: long copy(java.io.InputStream,java.io.OutputStream)>(r17, $r6)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : staticinvoke <org.apache.pdfbox.io.IOUtils: long copy(java.io.InputStream,java.io.OutputStream)>(r17, $r6) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $z0 = 1
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $z0 = 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : goto [?= return $z0]
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : return -1
org.apache.pdfbox.io.RandomAccessInputStream.read : return -1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeCRLF()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeCRLF()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $r8 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $r8 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $r9 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ENDSTREAM>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $r9 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ENDSTREAM> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : virtualinvoke $r8.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r9)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : virtualinvoke $r8.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r9) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $r10 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : $r10 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : virtualinvoke $r10.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : virtualinvoke $r10.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : if r17 == null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : if r17 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : virtualinvoke r17.<java.io.InputStream: void close()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : virtualinvoke r17.<java.io.InputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromStream : return null >>>>>>>> org.apache.pdfbox.cos.COSStream.accept : return $r2
org.apache.pdfbox.cos.COSStream.accept : return $r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.lang.Object visitFromDictionary(org.apache.pdfbox.cos.COSDictionary)>(r41)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.lang.Object visitFromDictionary(org.apache.pdfbox.cos.COSDictionary)>(r41) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : goto [?= (branch)]
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> = 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : if r5 == null
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : if r5 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : l5 = -1L
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : l5 = -1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if r2 == null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if r2 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF_STM>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF_STM> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : l5 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName)>($r15)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : l5 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName)>($r15) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : $l0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName,long)>(r1, -1L)
org.apache.pdfbox.cos.COSDictionary.getLong : $l0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName,long)>(r1, -1L) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : l1 = l0
org.apache.pdfbox.cos.COSDictionary.getLong : l1 = l0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.getLong : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : $z0 = r2 instanceof org.apache.pdfbox.cos.COSNumber
org.apache.pdfbox.cos.COSDictionary.getLong : $z0 = r2 instanceof org.apache.pdfbox.cos.COSNumber >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getLong : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : return l1
org.apache.pdfbox.cos.COSDictionary.getLong : return l1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : return $l0
org.apache.pdfbox.cos.COSDictionary.getLong : return $l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $z1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $z1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if $z1 != 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $z3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $z3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.isXRefStream : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream>
org.apache.pdfbox.cos.COSDocument.isXRefStream : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream> >>>>>>>> org.apache.pdfbox.cos.COSDocument.isXRefStream : return $z0
org.apache.pdfbox.cos.COSDocument.isXRefStream : return $z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if $z3 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteXRefTable()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteXRefTable()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r2 = staticinvoke <org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.pdfwriter.COSWriterXRefEntry getNullEntry()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r2 = staticinvoke <org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.pdfwriter.COSWriterXRefEntry getNullEntry()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getNullEntry : $r0 = <org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.pdfwriter.COSWriterXRefEntry NULLENTRY>
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getNullEntry : $r0 = <org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.pdfwriter.COSWriterXRefEntry NULLENTRY> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getNullEntry : return $r0
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getNullEntry : return $r0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addXRefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r2)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addXRefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : staticinvoke <java.util.Collections: void sort(java.util.List)>($r3)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : staticinvoke <java.util.Collections: void sort(java.util.List)>($r3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r2 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) r1
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r2 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $i0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: int compareTo(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r2)
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $i0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: int compareTo(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : if r1 == null
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : if r1 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>()
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getKey : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey key>
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getKey : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey key> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getKey : return $r1
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getKey : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $l0 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $l0 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r3 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>()
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r3 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $l1 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $l1 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $b2 = $l0 cmp $l1
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $b2 = $l0 cmp $l1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : if $b2 >= 0
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : if $b2 >= 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>()
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $l3 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $l3 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r5 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>()
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r5 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $l4 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $l4 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $b5 = $l3 cmp $l4
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $b5 = $l3 cmp $l4 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : if $b5 <= 0
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : if $b5 <= 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : return 1
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : return 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : return $i0
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : return $i0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : return -1
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : return -1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l1 = virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l1 = virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void setStartxref(long)>($l1)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void setStartxref(long)>($l1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.setStartxref : r0.<org.apache.pdfbox.pdfwriter.COSWriter: long startxref> = l0
org.apache.pdfbox.pdfwriter.COSWriter.setStartxref : r0.<org.apache.pdfbox.pdfwriter.COSWriter: long startxref> = l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r6 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r6 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r8 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r8 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.lang.Long[] getXRefRanges(java.util.List)>($r8)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.lang.Long[] getXRefRanges(java.util.List)>($r8) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l12 = -2L
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l12 = -2L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l13 = 1L
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l13 = 1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r5 = new java.util.ArrayList
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r5 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : if $z0 == 0
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r11 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) r4
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r11 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) r4 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r12 = virtualinvoke $r11.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>()
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r12 = virtualinvoke $r11.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $l5 = virtualinvoke $r12.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $l5 = virtualinvoke $r12.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $i6 = (int) $l5
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $i6 = (int) $l5 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l0 = (long) $i6
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l0 = (long) $i6 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $l7 = l12 + 1L
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $l7 = l12 + 1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $b8 = l0 cmp $l7
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $b8 = l0 cmp $l7 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : if $b8 != 0
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : if $b8 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $b9 = l12 cmp -2L
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $b9 = l12 cmp -2L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : if $b9 != 0
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : if $b9 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l12 = l0
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l12 = l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : goto [?= (branch)]
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l13 = l13 + 1L
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l13 = l13 + 1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $i1 = interfaceinvoke r1.<java.util.List: int size()>()
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $i1 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : if $i1 <= 0
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : if $i1 <= 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $l3 = l12 - l13
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $l3 = l12 - l13 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $l4 = $l3 + 1L
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $l4 = $l3 + 1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4)
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9)
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l13)
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l13) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r10)
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r10) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $i2 = interfaceinvoke $r5.<java.util.List: int size()>()
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $i2 = interfaceinvoke $r5.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r6 = newarray (java.lang.Long)[$i2]
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r6 = newarray (java.lang.Long)[$i2] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6)
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r8 = (java.lang.Long[]) $r7
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r8 = (java.lang.Long[]) $r7 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : return $r8
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : return $r8 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i0 = lengthof r1
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i0 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i11 = 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i11 = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i12 = 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i12 = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : if i11 >= i0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : if i11 >= i0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $i2 = i0 % 2
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $i2 = i0 % 2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : if $i2 != 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : if $i2 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r9 = r1[i11]
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r9 = r1[i11] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l3 = virtualinvoke $r9.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l3 = virtualinvoke $r9.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $i4 = i11 + 1
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $i4 = i11 + 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r10 = r1[$i4]
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r10 = r1[$i4] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l5 = virtualinvoke $r10.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l5 = virtualinvoke $r10.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeXrefRange(long,long)>($l3, $l5)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeXrefRange(long,long)>($l3, $l5) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r3 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r3 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r4 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r4 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : virtualinvoke $r1.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r4)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : virtualinvoke $r1.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r4) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r6 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r6 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r9 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r9 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r10 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r9)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r10 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r9) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r10)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r10) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r11 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r11 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : virtualinvoke $r11.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : virtualinvoke $r11.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i13 = 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i13 = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l7 = (long) i13
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l7 = (long) i13 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $i6 = i11 + 1
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $i6 = i11 + 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r11 = r1[$i6]
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r11 = r1[$i6] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l8 = virtualinvoke $r11.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l8 = virtualinvoke $r11.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $b9 = $l7 cmp $l8
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $b9 = $l7 cmp $l8 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : if $b9 >= 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : if $b9 >= 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r12 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List xRefEntries>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r12 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List xRefEntries> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $i10 = i12
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $i10 = i12 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i12 = i12 + 1
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i12 = i12 + 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>($i10)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>($i10) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r14 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) $r13
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r14 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) $r13 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeXrefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r14)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeXrefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r14) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r4 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.text.NumberFormat formatXrefOffset>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r4 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.text.NumberFormat formatXrefOffset> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $l0 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: long getOffset()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $l0 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: long getOffset()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getOffset : $l0 = r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: long offset>
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getOffset : $l0 = r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: long offset> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getOffset : return $l0
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getOffset : return $l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : r2 = virtualinvoke $r4.<java.text.NumberFormat: java.lang.String format(long)>($l0)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : r2 = virtualinvoke $r4.<java.text.NumberFormat: java.lang.String format(long)>($l0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.text.NumberFormat formatXrefGeneration>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.text.NumberFormat formatXrefGeneration> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r6 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r6 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $i1 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $i1 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $l2 = (long) $i1
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $l2 = (long) $i1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : r3 = virtualinvoke $r5.<java.text.NumberFormat: java.lang.String format(long)>($l2)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : r3 = virtualinvoke $r5.<java.text.NumberFormat: java.lang.String format(long)>($l2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r8 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r8 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r9 = virtualinvoke r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r9 = virtualinvoke r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r9)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r9) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r10 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r10 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r11 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r11 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r10.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r11)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r10.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r11) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r13 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r13 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r14 = virtualinvoke r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r13)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r14 = virtualinvoke r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r13) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r14)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r14) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r15 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r15 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r16 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r16 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r15.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r16)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r15.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r16) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r17 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r17 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $z0 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: boolean isFree()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $z0 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: boolean isFree()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.isFree : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: boolean free>
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.isFree : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: boolean free> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.isFree : return $z0
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.isFree : return $z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : if $z0 == 0
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r19 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF_FREE>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r19 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF_FREE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : goto [?= virtualinvoke $r17.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r19)]
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : goto [?= virtualinvoke $r17.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r19)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r17.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r19)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r17.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r19) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r18 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r18 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r18.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeCRLF()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r18.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeCRLF()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i13 = i13 + 1
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i13 = i13 + 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : goto [?= $l7 = (long) i13]
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : goto [?= $l7 = (long) i13] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r19 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF_USED>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r19 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF_USED> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i11 = i11 + 2
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i11 = i11 + 2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : goto [?= (branch)]
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteTrailer(org.apache.pdfbox.cos.COSDocument)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteTrailer(org.apache.pdfbox.cos.COSDocument)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r5 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] TRAILER>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r5 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] TRAILER> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r5)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r5) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : staticinvoke <java.util.Collections: void sort(java.util.List)>($r7)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : staticinvoke <java.util.Collections: void sort(java.util.List)>($r7) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r8 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r8 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $i0 = interfaceinvoke $r9.<java.util.List: int size()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $i0 = interfaceinvoke $r9.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $i1 = $i0 - 1
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $i1 = $i0 - 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r10 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i1)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r10 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : r3 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) $r10
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : r3 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) $r10 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SIZE>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SIZE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r12 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r12 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $l2 = virtualinvoke $r12.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $l2 = virtualinvoke $r12.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $l3 = $l2 + 1L
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $l3 = $l2 + 1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: void setLong(org.apache.pdfbox.cos.COSName,long)>($r11, $l3)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: void setLong(org.apache.pdfbox.cos.COSName,long)>($r11, $l3) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setLong : r2 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>(l0)
org.apache.pdfbox.cos.COSDictionary.setLong : r2 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>(l0) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setLong : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, r2)
org.apache.pdfbox.cos.COSDictionary.setLong : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, r2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : if $z0 != 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r16 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r16 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>($r16)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>($r16) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.removeItem : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.removeItem : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.removeItem : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.removeItem : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.remove : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.remove : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.remove : if i0 >= 0
org.apache.pdfbox.util.SmallMap.remove : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.remove : return null
org.apache.pdfbox.util.SmallMap.remove : return null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $z1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $z1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : if $z1 != 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF_STM>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF_STM> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>($r15)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>($r15) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r13 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DOC_CHECKSUM>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r13 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DOC_CHECKSUM> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>($r13)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>($r13) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSString.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromString(org.apache.pdfbox.cos.COSString)>(r0)
org.apache.pdfbox.cos.COSString.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromString(org.apache.pdfbox.cos.COSString)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : if $z0 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : staticinvoke <org.apache.pdfbox.pdfwriter.COSWriter: void writeString(org.apache.pdfbox.cos.COSString,java.io.OutputStream)>(r1, $r2)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : staticinvoke <org.apache.pdfbox.pdfwriter.COSWriter: void writeString(org.apache.pdfbox.cos.COSString,java.io.OutputStream)>(r1, $r2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSString: byte[] getBytes()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeString : $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSString: byte[] getBytes()>() >>>>>>>> org.apache.pdfbox.cos.COSString.getBytes : $r1 = r0.<org.apache.pdfbox.cos.COSString: byte[] bytes>
org.apache.pdfbox.cos.COSString.getBytes : $r1 = r0.<org.apache.pdfbox.cos.COSString: byte[] bytes> >>>>>>>> org.apache.pdfbox.cos.COSString.getBytes : return $r1
org.apache.pdfbox.cos.COSString.getBytes : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : $z0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSString: boolean getForceHexForm()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeString : $z0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSString: boolean getForceHexForm()>() >>>>>>>> org.apache.pdfbox.cos.COSString.getForceHexForm : $z0 = r0.<org.apache.pdfbox.cos.COSString: boolean forceHexForm>
org.apache.pdfbox.cos.COSString.getForceHexForm : $z0 = r0.<org.apache.pdfbox.cos.COSString: boolean forceHexForm> >>>>>>>> org.apache.pdfbox.cos.COSString.getForceHexForm : return $z0
org.apache.pdfbox.cos.COSString.getForceHexForm : return $z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : staticinvoke <org.apache.pdfbox.pdfwriter.COSWriter: void writeString(byte[],boolean,java.io.OutputStream)>($r2, $z0, r1)
org.apache.pdfbox.pdfwriter.COSWriter.writeString : staticinvoke <org.apache.pdfbox.pdfwriter.COSWriter: void writeString(byte[],boolean,java.io.OutputStream)>($r2, $z0, r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : z1 = 1
org.apache.pdfbox.pdfwriter.COSWriter.writeString : z1 = 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if z0 != 0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if z0 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : i0 = lengthof r0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : i0 = lengthof r0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : i1 = 0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : i1 = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if i1 >= i0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if i1 >= i0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : b2 = r0[i1]
org.apache.pdfbox.pdfwriter.COSWriter.writeString : b2 = r0[i1] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if b2 >= 0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if b2 >= 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if b2 == 13
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if b2 == 13 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if b2 != 10
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if b2 != 10 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : i1 = i1 + 1
org.apache.pdfbox.pdfwriter.COSWriter.writeString : i1 = i1 + 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : goto [?= (branch)]
org.apache.pdfbox.pdfwriter.COSWriter.writeString : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : z1 = 0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : z1 = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if z1 == 0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if z1 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(60)
org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(60) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : staticinvoke <org.apache.pdfbox.util.Hex: void writeHexBytes(byte[],java.io.OutputStream)>(r0, r1)
org.apache.pdfbox.pdfwriter.COSWriter.writeString : staticinvoke <org.apache.pdfbox.util.Hex: void writeHexBytes(byte[],java.io.OutputStream)>(r0, r1) >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : i0 = lengthof r0
org.apache.pdfbox.util.Hex.writeHexBytes : i0 = lengthof r0 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : i2 = 0
org.apache.pdfbox.util.Hex.writeHexBytes : i2 = 0 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : if i2 >= i0
org.apache.pdfbox.util.Hex.writeHexBytes : if i2 >= i0 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : b1 = r0[i2]
org.apache.pdfbox.util.Hex.writeHexBytes : b1 = r0[i2] >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : staticinvoke <org.apache.pdfbox.util.Hex: void writeHexByte(byte,java.io.OutputStream)>(b1, r1)
org.apache.pdfbox.util.Hex.writeHexBytes : staticinvoke <org.apache.pdfbox.util.Hex: void writeHexByte(byte,java.io.OutputStream)>(b1, r1) >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $r1 = <org.apache.pdfbox.util.Hex: byte[] HEX_BYTES>
org.apache.pdfbox.util.Hex.writeHexByte : $r1 = <org.apache.pdfbox.util.Hex: byte[] HEX_BYTES> >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $i1 = staticinvoke <org.apache.pdfbox.util.Hex: int getHighNibble(byte)>(b0)
org.apache.pdfbox.util.Hex.writeHexByte : $i1 = staticinvoke <org.apache.pdfbox.util.Hex: int getHighNibble(byte)>(b0) >>>>>>>> org.apache.pdfbox.util.Hex.getHighNibble : $s1 = b0 & 240
org.apache.pdfbox.util.Hex.getHighNibble : $s1 = b0 & 240 >>>>>>>> org.apache.pdfbox.util.Hex.getHighNibble : $s2 = $s1 >> 4
org.apache.pdfbox.util.Hex.getHighNibble : $s2 = $s1 >> 4 >>>>>>>> org.apache.pdfbox.util.Hex.getHighNibble : return $s2
org.apache.pdfbox.util.Hex.getHighNibble : return $s2 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $b2 = $r1[$i1]
org.apache.pdfbox.util.Hex.writeHexByte : $b2 = $r1[$i1] >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : virtualinvoke r0.<java.io.OutputStream: void write(int)>($b2)
org.apache.pdfbox.util.Hex.writeHexByte : virtualinvoke r0.<java.io.OutputStream: void write(int)>($b2) >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $r2 = <org.apache.pdfbox.util.Hex: byte[] HEX_BYTES>
org.apache.pdfbox.util.Hex.writeHexByte : $r2 = <org.apache.pdfbox.util.Hex: byte[] HEX_BYTES> >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $i3 = staticinvoke <org.apache.pdfbox.util.Hex: int getLowNibble(byte)>(b0)
org.apache.pdfbox.util.Hex.writeHexByte : $i3 = staticinvoke <org.apache.pdfbox.util.Hex: int getLowNibble(byte)>(b0) >>>>>>>> org.apache.pdfbox.util.Hex.getLowNibble : $b1 = b0 & 15
org.apache.pdfbox.util.Hex.getLowNibble : $b1 = b0 & 15 >>>>>>>> org.apache.pdfbox.util.Hex.getLowNibble : return $b1
org.apache.pdfbox.util.Hex.getLowNibble : return $b1 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $b4 = $r2[$i3]
org.apache.pdfbox.util.Hex.writeHexByte : $b4 = $r2[$i3] >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4)
org.apache.pdfbox.util.Hex.writeHexByte : virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4) >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : i2 = i2 + 1
org.apache.pdfbox.util.Hex.writeHexBytes : i2 = i2 + 1 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : goto [?= (branch)]
org.apache.pdfbox.util.Hex.writeHexBytes : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(62)
org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(62) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : return null >>>>>>>> org.apache.pdfbox.cos.COSString.accept : return $r2
org.apache.pdfbox.cos.COSString.accept : return $r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r5 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] STARTXREF>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r5 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] STARTXREF> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r5)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r5) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $l0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: long getStartxref()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $l0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: long getStartxref()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getStartxref : $l0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: long startxref>
org.apache.pdfbox.pdfwriter.COSWriter.getStartxref : $l0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: long startxref> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getStartxref : return $l0
org.apache.pdfbox.pdfwriter.COSWriter.getStartxref : return $l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r9 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r9 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r10 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r9)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r10 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r9) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r10)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r10) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r11 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r11 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r11.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r11.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r13 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] EOF>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r13 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] EOF> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r14 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r14 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r14.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r14.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $z2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $z2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if $z2 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : return null >>>>>>>> org.apache.pdfbox.cos.COSDocument.accept : return $r2
org.apache.pdfbox.cos.COSDocument.accept : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSWriter: void close()>()
org.apache.pdfbox.pdmodel.PDDocument.save : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSWriter: void close()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.close : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : if $r1 == null
org.apache.pdfbox.pdfwriter.COSWriter.close : if $r1 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.close : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void close()>()
org.apache.pdfbox.pdfwriter.COSWriter.close : virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream getOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.close : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream getOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getOutput : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream output>
org.apache.pdfbox.pdfwriter.COSWriter.getOutput : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream output> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getOutput : return $r1
org.apache.pdfbox.pdfwriter.COSWriter.getOutput : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : if $r2 == null
org.apache.pdfbox.pdfwriter.COSWriter.close : if $r2 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream getOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.close : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream getOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : virtualinvoke $r5.<java.io.OutputStream: void close()>()
org.apache.pdfbox.pdfwriter.COSWriter.close : virtualinvoke $r5.<java.io.OutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream incrementalOutput>
org.apache.pdfbox.pdfwriter.COSWriter.close : $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream incrementalOutput> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : if $r3 == null
org.apache.pdfbox.pdfwriter.COSWriter.close : if $r3 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : goto [?= return]
org.apache.pdfbox.pdmodel.PDDocument.save : goto [?= return] >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdmodel.PDDocument.close : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : $z0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSDocument: boolean isClosed()>()
org.apache.pdfbox.pdmodel.PDDocument.close : $z0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSDocument: boolean isClosed()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : if $z0 != 0
org.apache.pdfbox.pdmodel.PDDocument.close : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : $r2 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.interactive.digitalsignature.SigningSupport signingSupport>
org.apache.pdfbox.pdmodel.PDDocument.close : $r2 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.interactive.digitalsignature.SigningSupport signingSupport> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : if $r2 == null
org.apache.pdfbox.pdmodel.PDDocument.close : if $r2 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : $r3 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdmodel.PDDocument.close : $r3 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: void close()>()
org.apache.pdfbox.pdmodel.PDDocument.close : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r7 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.cos.COSDocument.close : $r7 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r13 = (org.apache.pdfbox.cos.COSStream) $r7
org.apache.pdfbox.cos.COSDocument.close : r13 = (org.apache.pdfbox.cos.COSStream) $r7 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : virtualinvoke r13.<org.apache.pdfbox.cos.COSStream: void close()>()
org.apache.pdfbox.cos.COSDocument.close : virtualinvoke r13.<org.apache.pdfbox.cos.COSStream: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.close : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.close : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.close : if $r1 == null
org.apache.pdfbox.cos.COSStream.close : if $r1 == null >>>>>>>> org.apache.pdfbox.cos.COSStream.close : $r2 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.close : $r2 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.close : interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccess: void close()>()
org.apache.pdfbox.cos.COSStream.close : interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccess: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : goto [?= $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.cos.COSDocument.close : goto [?= $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : $r4 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.io.RandomAccessRead pdfSource>
org.apache.pdfbox.pdmodel.PDDocument.close : $r4 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.io.RandomAccessRead pdfSource> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : if $r4 == null
org.apache.pdfbox.pdmodel.PDDocument.close : if $r4 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r2 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly()>()
org.apache.pdfbox.pdmodel.PDDocument.load : $r2 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r3 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.io.File,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.MemoryUsageSetting)>(r0, r1, null, null, $r2)
org.apache.pdfbox.pdmodel.PDDocument.load : $r3 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.io.File,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.MemoryUsageSetting)>(r0, r1, null, null, $r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r6 = new org.apache.pdfbox.io.RandomAccessBufferedFileInputStream
org.apache.pdfbox.pdmodel.PDDocument.load : $r6 = new org.apache.pdfbox.io.RandomAccessBufferedFileInputStream >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r6.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void <init>(java.io.File)>(r0)
org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r6.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void <init>(java.io.File)>(r0) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $l2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long pageOffsetMask>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $l2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long pageOffsetMask> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : l1 = l0 & $l2
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : l1 = l0 & $l2 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $l3 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long curPageOffset>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $l3 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long curPageOffset> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $b4 = l1 cmp $l3
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $b4 = l1 cmp $l3 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : if $b4 == 0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : if $b4 == 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.util.Map pageCache>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.util.Map pageCache> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r8 = (byte[]) $r3
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r8 = (byte[]) $r3 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : if r8 != null
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : if r8 != null >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r4 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.io.RandomAccessFile raFile>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r4 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.io.RandomAccessFile raFile> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : virtualinvoke $r4.<java.io.RandomAccessFile: void seek(long)>(l1)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : virtualinvoke $r4.<java.io.RandomAccessFile: void seek(long)>(l1) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r8 = specialinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] readPage()>()
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r8 = specialinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] readPage()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] lastRemovedCachePage>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] lastRemovedCachePage> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : if $r1 == null
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : if $r1 == null >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $i1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $i1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : r3 = newarray (byte)[$i1]
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : r3 = newarray (byte)[$i1] >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : i4 = 0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : i4 = 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $i5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $i5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : if i4 >= $i5
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : if i4 >= $i5 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $r2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.io.RandomAccessFile raFile>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $r2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.io.RandomAccessFile raFile> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $i2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $i2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $i3 = $i2 - i4
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $i3 = $i2 - i4 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : i0 = virtualinvoke $r2.<java.io.RandomAccessFile: int read(byte[],int,int)>(r3, i4, $i3)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : i0 = virtualinvoke $r2.<java.io.RandomAccessFile: int read(byte[],int,int)>(r3, i4, $i3) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : if i0 >= 0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : if i0 >= 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : i4 = i4 + i0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : i4 = i4 + i0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : goto [?= $i5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize>]
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : goto [?= $i5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize>] >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : goto [?= return r3]
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : goto [?= return r3] >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : return r3
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : return r3 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.util.Map pageCache>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.util.Map pageCache> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r8)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r8) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : $i0 = virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1: int size()>()
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : $i0 = virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1: int size()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : $r2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1: org.apache.pdfbox.io.RandomAccessBufferedFileInputStream this$0>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : $r2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1: org.apache.pdfbox.io.RandomAccessBufferedFileInputStream this$0> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : $i1 = staticinvoke <org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int access$000(org.apache.pdfbox.io.RandomAccessBufferedFileInputStream)>($r2)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : $i1 = staticinvoke <org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int access$000(org.apache.pdfbox.io.RandomAccessBufferedFileInputStream)>($r2) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.access$000 : $i0 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int maxCachedPages>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.access$000 : $i0 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int maxCachedPages> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.access$000 : return $i0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.access$000 : return $i0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : if $i0 <= $i1
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : if $i0 <= $i1 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : $z1 = 0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : $z1 = 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : z0 = $z1
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : z0 = $z1 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : if $z1 == 0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : if $z1 == 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : return z0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : return z0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long curPageOffset> = l1
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long curPageOffset> = l1 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] curPage> = r8
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] curPage> = r8 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $l5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long curPageOffset>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $l5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long curPageOffset> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $l6 = l0 - $l5
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $l6 = l0 - $l5 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $i7 = (int) $l6
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $i7 = (int) $l6 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> = $i7
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> = $i7 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> = l0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> = l0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r7 = new org.apache.pdfbox.io.ScratchFile
org.apache.pdfbox.pdmodel.PDDocument.load : $r7 = new org.apache.pdfbox.io.ScratchFile >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r7.<org.apache.pdfbox.io.ScratchFile: void <init>(org.apache.pdfbox.io.MemoryUsageSetting)>(r4)
org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r7.<org.apache.pdfbox.io.ScratchFile: void <init>(org.apache.pdfbox.io.MemoryUsageSetting)>(r4) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r8 = new org.apache.pdfbox.pdfparser.PDFParser
org.apache.pdfbox.pdmodel.PDDocument.load : $r8 = new org.apache.pdfbox.pdfparser.PDFParser >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r8.<org.apache.pdfbox.pdfparser.PDFParser: void <init>(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.ScratchFile)>($r6, r1, r2, r3, $r7)
org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r8.<org.apache.pdfbox.pdfparser.PDFParser: void <init>(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.ScratchFile)>($r6, r1, r2, r3, $r7) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.length : $l0 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileLength>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.length : $l0 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileLength> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.length : return $l0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.length : return $l0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.init : r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.pdfbox.pdfparser.nonSequentialPDFParser.eofLookupRange")
org.apache.pdfbox.pdfparser.PDFParser.init : r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.pdfbox.pdfparser.nonSequentialPDFParser.eofLookupRange") >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.init : if r2 == null
org.apache.pdfbox.pdfparser.PDFParser.init : if r2 == null >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.init : $r11 = new org.apache.pdfbox.cos.COSDocument
org.apache.pdfbox.pdfparser.PDFParser.init : $r11 = new org.apache.pdfbox.cos.COSDocument >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.init : specialinvoke $r11.<org.apache.pdfbox.cos.COSDocument: void <init>(org.apache.pdfbox.io.ScratchFile)>(r1)
org.apache.pdfbox.pdfparser.PDFParser.init : specialinvoke $r11.<org.apache.pdfbox.cos.COSDocument: void <init>(org.apache.pdfbox.io.ScratchFile)>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.init : r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> = $r11
org.apache.pdfbox.pdfparser.PDFParser.init : r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> = $r11 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : virtualinvoke $r8.<org.apache.pdfbox.pdfparser.PDFParser: void parse()>()
org.apache.pdfbox.pdmodel.PDDocument.load : virtualinvoke $r8.<org.apache.pdfbox.pdfparser.PDFParser: void parse()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean parsePDFHeader()>()
org.apache.pdfbox.pdfparser.PDFParser.parse : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean parsePDFHeader()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parsePDFHeader : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean parseHeader(java.lang.String,java.lang.String)>("%PDF-", "1.4")
org.apache.pdfbox.pdfparser.COSParser.parsePDFHeader : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean parseHeader(java.lang.String,java.lang.String)>("%PDF-", "1.4") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : r34 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>()
org.apache.pdfbox.pdfparser.COSParser.parseHeader : r34 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $z0 = interfaceinvoke $r2.<org.apache.pdfbox.pdfparser.SequentialSource: boolean isEOF()>()
org.apache.pdfbox.pdfparser.BaseParser.readLine : $z0 = interfaceinvoke $r2.<org.apache.pdfbox.pdfparser.SequentialSource: boolean isEOF()>() >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader>
org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader> >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : $z0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>()
org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : $z0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : i0 = virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int peek()>()
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : i0 = virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int peek()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.peek : i0 = virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int read()>()
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.peek : i0 = virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int read()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l0 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileLength>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l0 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileLength> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $b2 = $l1 cmp $l0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $b2 = $l1 cmp $l0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : if $b2 < 0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : if $b2 < 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i4 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i4 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i3 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i3 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : if $i4 != $i3
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : if $i4 != $i3 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l6 = $l5 + 1L
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l6 = $l5 + 1L >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> = $l6
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> = $l6 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] curPage>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] curPage> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i7 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i7 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i8 = $i7 + 1
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i8 = $i7 + 1 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> = $i8
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> = $i8 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $b9 = $r1[$i7]
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $b9 = $r1[$i7] >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $s10 = $b9 & 255
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $s10 = $b9 & 255 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : return $s10
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : return $s10 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.peek : if i0 == -1
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.peek : if i0 == -1 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.peek : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void rewind(int)>(1)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.peek : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void rewind(int)>(1) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.rewind : $l1 = virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long getPosition()>()
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.rewind : $l1 = virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long getPosition()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.getPosition : $l0 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.getPosition : $l0 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.getPosition : return $l0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.getPosition : return $l0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.rewind : $l2 = (long) i0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.rewind : $l2 = (long) i0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.rewind : $l3 = $l1 - $l2
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.rewind : $l3 = $l1 - $l2 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.rewind : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void seek(long)>($l3)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.rewind : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void seek(long)>($l3) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.peek : return i0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.peek : return i0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : if i0 != -1
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : if i0 != -1 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : $z0 = 0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : return $z0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : return $z0
org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z0 == 0
org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r3 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(11)
org.apache.pdfbox.pdfparser.BaseParser.readLine : specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(11) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $i1 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.readLine : $i1 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.read : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader>
org.apache.pdfbox.pdfparser.RandomAccessSource.read : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader> >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.read : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: int read()>()
org.apache.pdfbox.pdfparser.RandomAccessSource.read : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.read : return $i0
org.apache.pdfbox.pdfparser.RandomAccessSource.read : return $i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : if $i1 == -1
org.apache.pdfbox.pdfparser.BaseParser.readLine : if $i1 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $z3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEOL(int)>($i1)
org.apache.pdfbox.pdfparser.BaseParser.readLine : $z3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEOL(int)>($i1) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isLF(int)>(i0)
org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isLF(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isLF : if 10 != i0
org.apache.pdfbox.pdfparser.BaseParser.isLF : if 10 != i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isLF : $z0 = 0
org.apache.pdfbox.pdfparser.BaseParser.isLF : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isLF : return $z0
org.apache.pdfbox.pdfparser.BaseParser.isLF : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : if $z0 != 0
org.apache.pdfbox.pdfparser.BaseParser.isEOL : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isCR(int)>(i0)
org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isCR(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isCR : if 13 != i0
org.apache.pdfbox.pdfparser.BaseParser.isCR : if 13 != i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isCR : $z0 = 0
org.apache.pdfbox.pdfparser.BaseParser.isCR : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isCR : return $z0
org.apache.pdfbox.pdfparser.BaseParser.isCR : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : if $z1 == 0
org.apache.pdfbox.pdfparser.BaseParser.isEOL : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z2 = 0
org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z2 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : return $z2
org.apache.pdfbox.pdfparser.BaseParser.isEOL : return $z2 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z3 == 0
org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $c4 = (char) $i1
org.apache.pdfbox.pdfparser.BaseParser.readLine : $c4 = (char) $i1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4)
org.apache.pdfbox.pdfparser.BaseParser.readLine : virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : goto [?= $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>]
org.apache.pdfbox.pdfparser.BaseParser.readLine : goto [?= $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isLF : $z0 = 1
org.apache.pdfbox.pdfparser.BaseParser.isLF : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isLF : goto [?= return $z0]
org.apache.pdfbox.pdfparser.BaseParser.isLF : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z2 = 1
org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z2 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : goto [?= return $z2]
org.apache.pdfbox.pdfparser.BaseParser.isEOL : goto [?= return $z2] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : goto [?= $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isCR(int)>($i1)]
org.apache.pdfbox.pdfparser.BaseParser.readLine : goto [?= $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isCR(int)>($i1)] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isCR(int)>($i1)
org.apache.pdfbox.pdfparser.BaseParser.readLine : $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isCR(int)>($i1) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z1 == 0
org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : return $r9
org.apache.pdfbox.pdfparser.BaseParser.readLine : return $r9 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z0 = virtualinvoke r34.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z0 = virtualinvoke r34.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z0 != 0
org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z6 = virtualinvoke r34.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z6 = virtualinvoke r34.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z6 != 0
org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z6 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : i0 = virtualinvoke r34.<java.lang.String: int indexOf(java.lang.String)>(r1)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : i0 = virtualinvoke r34.<java.lang.String: int indexOf(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : if i0 <= 0
org.apache.pdfbox.pdfparser.COSParser.parseHeader : if i0 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z1 = virtualinvoke r34.<java.lang.String: boolean startsWith(java.lang.String)>(r1)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z1 = virtualinvoke r34.<java.lang.String: boolean startsWith(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z1 == 0
org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r11 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r11 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : specialinvoke $r11.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdfparser.COSParser.parseHeader : specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\d.\\d")
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\d.\\d") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z3 = virtualinvoke r34.<java.lang.String: boolean matches(java.lang.String)>($r14)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z3 = virtualinvoke r34.<java.lang.String: boolean matches(java.lang.String)>($r14) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z3 != 0
org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z3 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : f0 = -1.0F
org.apache.pdfbox.pdfparser.COSParser.parseHeader : f0 = -1.0F >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : r36 = virtualinvoke r34.<java.lang.String: java.lang.String[] split(java.lang.String)>("-")
org.apache.pdfbox.pdfparser.COSParser.parseHeader : r36 = virtualinvoke r34.<java.lang.String: java.lang.String[] split(java.lang.String)>("-") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $i14 = lengthof r36
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $i14 = lengthof r36 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $i14 != 2
org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $i14 != 2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r10 = r36[1]
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r10 = r36[1] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r10)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r10) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : goto [?= $b1 = f0 cmpg 0.0F]
org.apache.pdfbox.pdfparser.COSParser.parseHeader : goto [?= $b1 = f0 cmpg 0.0F] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $b1 = f0 cmpg 0.0F
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $b1 = f0 cmpg 0.0F >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $b1 >= 0
org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $b1 >= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: void setVersion(float)>(f0)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: void setVersion(float)>(f0) >>>>>>>> org.apache.pdfbox.cos.COSDocument.setVersion : r0.<org.apache.pdfbox.cos.COSDocument: float version> = f0
org.apache.pdfbox.cos.COSDocument.setVersion : r0.<org.apache.pdfbox.cos.COSDocument: float version> = f0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(0L)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(0L) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : return 1
org.apache.pdfbox.pdfparser.COSParser.parseHeader : return 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parsePDFHeader : return $z0
org.apache.pdfbox.pdfparser.COSParser.parsePDFHeader : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : if $z0 != 0
org.apache.pdfbox.pdfparser.PDFParser.parse : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : $z1 = r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean initialParseDone>
org.apache.pdfbox.pdfparser.PDFParser.parse : $z1 = r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean initialParseDone> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : if $z1 != 0
org.apache.pdfbox.pdfparser.PDFParser.parse : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void initialParse()>()
org.apache.pdfbox.pdfparser.PDFParser.parse : virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void initialParse()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : r21 = null
org.apache.pdfbox.pdfparser.PDFParser.initialParse : r21 = null >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: long getStartxrefOffset()>()
org.apache.pdfbox.pdfparser.PDFParser.initialParse : l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: long getStartxrefOffset()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l4 = r0.<org.apache.pdfbox.pdfparser.COSParser: long fileLen>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l4 = r0.<org.apache.pdfbox.pdfparser.COSParser: long fileLen> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $i2 = r0.<org.apache.pdfbox.pdfparser.COSParser: int readTrailBytes>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $i2 = r0.<org.apache.pdfbox.pdfparser.COSParser: int readTrailBytes> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l3 = (long) $i2
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l3 = (long) $i2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $b5 = $l4 cmp $l3
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $b5 = $l4 cmp $l3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if $b5 >= 0
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if $b5 >= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l12 = r0.<org.apache.pdfbox.pdfparser.COSParser: long fileLen>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l12 = r0.<org.apache.pdfbox.pdfparser.COSParser: long fileLen> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $i13 = (int) $l12
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $i13 = (int) $l12 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : goto [?= i14 = $i13]
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : goto [?= i14 = $i13] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i14 = $i13
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i14 = $i13 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : r1 = newarray (byte)[$i13]
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : r1 = newarray (byte)[$i13] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l7 = r0.<org.apache.pdfbox.pdfparser.COSParser: long fileLen>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l7 = r0.<org.apache.pdfbox.pdfparser.COSParser: long fileLen> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l6 = (long) $i13
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l6 = (long) $i13 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : l0 = $l7 - $l6
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : l0 = $l7 - $l6 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0)
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i15 = 0
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i15 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if i15 >= i14
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if i15 >= i14 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r25 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r25 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $i10 = i14 - i15
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $i10 = i14 - i15 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i1 = interfaceinvoke $r25.<org.apache.pdfbox.io.RandomAccessRead: int read(byte[],int,int)>(r1, i15, $i10)
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i1 = interfaceinvoke $r25.<org.apache.pdfbox.io.RandomAccessRead: int read(byte[],int,int)>(r1, i15, $i10) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l3 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l3 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileLength>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileLength> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $b4 = $l3 cmp $l2
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $b4 = $l3 cmp $l2 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : if $b4 < 0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : if $b4 < 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i6 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i6 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : if $i6 != $i5
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : if $i6 != $i5 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i8 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i8 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i9 = $i8 - $i7
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i9 = $i8 - $i7 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : i27 = staticinvoke <java.lang.Math: int min(int,int)>($i9, i1)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : i27 = staticinvoke <java.lang.Math: int min(int,int)>($i9, i1) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l11 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileLength>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l11 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileLength> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l10 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l10 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l14 = $l11 - $l10
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l14 = $l11 - $l10 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i12 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i12 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l13 = (long) $i12
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l13 = (long) $i12 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $b15 = $l14 cmp $l13
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $b15 = $l14 cmp $l13 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : if $b15 >= 0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : if $b15 >= 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l23 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileLength>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l23 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileLength> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l22 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l22 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l24 = $l23 - $l22
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l24 = $l23 - $l22 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i25 = (int) $l24
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i25 = (int) $l24 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : i27 = staticinvoke <java.lang.Math: int min(int,int)>(i27, $i25)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : i27 = staticinvoke <java.lang.Math: int min(int,int)>(i27, $i25) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $r2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] curPage>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $r2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] curPage> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i16 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i16 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i16, r1, i0, i27)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i16, r1, i0, i27) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i17 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i17 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i18 = $i17 + i27
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i18 = $i17 + i27 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> = $i18
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> = $i18 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l20 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l20 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l19 = (long) i27
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l19 = (long) i27 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l21 = $l20 + $l19
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l21 = $l20 + $l19 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> = $l21
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> = $l21 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : return i27
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : return i27 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if i1 >= 1
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if i1 >= 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i15 = i15 + i1
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i15 = i15 + i1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : goto [?= (branch)]
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(0L)
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(0L) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : goto [?= $r5 = <org.apache.pdfbox.pdfparser.COSParser: char[] EOF_MARKER>]
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : goto [?= $r5 = <org.apache.pdfbox.pdfparser.COSParser: char[] EOF_MARKER>] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r5 = <org.apache.pdfbox.pdfparser.COSParser: char[] EOF_MARKER>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r5 = <org.apache.pdfbox.pdfparser.COSParser: char[] EOF_MARKER> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $i8 = lengthof r1
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $i8 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i16 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: int lastIndexOf(char[],byte[],int)>($r5, r1, $i8)
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i16 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: int lastIndexOf(char[],byte[],int)>($r5, r1, $i8) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : $i2 = lengthof r1
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : $i2 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i1 = $i2 - 1
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i1 = $i2 - 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i4 = i0
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i4 = i0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i5 = i1
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i5 = i1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : c6 = r1[i1]
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : c6 = r1[i1] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i4 = i4 + -1
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i4 = i4 + -1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : if i4 < 0
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : if i4 < 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : $b3 = r2[i4]
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : $b3 = r2[i4] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : if $b3 != c6
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : if $b3 != c6 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : if i5 >= i1
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : if i5 >= i1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i5 = i5 + -1
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i5 = i5 + -1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : if i5 >= 0
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : if i5 >= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : c6 = r1[i5]
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : c6 = r1[i5] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : goto [?= i4 = i4 + -1]
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : goto [?= i4 = i4 + -1] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : return i4
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : return i4 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if i16 >= 0
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if i16 >= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r6 = <org.apache.pdfbox.pdfparser.COSParser: char[] STARTXREF>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r6 = <org.apache.pdfbox.pdfparser.COSParser: char[] STARTXREF> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i17 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: int lastIndexOf(char[],byte[],int)>($r6, r1, i16)
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i17 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: int lastIndexOf(char[],byte[],int)>($r6, r1, i16) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l9 = (long) i17
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l9 = (long) i17 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : l18 = l0 + $l9
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : l18 = l0 + $l9 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if i17 >= 0
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if i17 >= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : return l18
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : return l18 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : z7 = 0
org.apache.pdfbox.pdfparser.PDFParser.initialParse : z7 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $b1 = l0 cmp -1L
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $b1 = l0 cmp -1L >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $b1 <= 0
org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $b1 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : r21 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDictionary parseXref(long)>(l0)
org.apache.pdfbox.pdfparser.PDFParser.initialParse : r21 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDictionary parseXref(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0)
org.apache.pdfbox.pdfparser.COSParser.parseXref : interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $l1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long parseStartXref()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : $l1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long parseStartXref()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseStartXref : l0 = -1L
org.apache.pdfbox.pdfparser.COSParser.parseStartXref : l0 = -1L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseStartXref : $r1 = <org.apache.pdfbox.pdfparser.COSParser: char[] STARTXREF>
org.apache.pdfbox.pdfparser.COSParser.parseStartXref : $r1 = <org.apache.pdfbox.pdfparser.COSParser: char[] STARTXREF> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseStartXref : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isString(char[])>($r1)
org.apache.pdfbox.pdfparser.COSParser.parseStartXref : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isString(char[])>($r1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : z0 = 1
org.apache.pdfbox.pdfparser.COSParser.isString : z0 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.isString : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : l0 = interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>()
org.apache.pdfbox.pdfparser.COSParser.isString : l0 = interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : i1 = lengthof r1
org.apache.pdfbox.pdfparser.COSParser.isString : i1 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : i4 = 0
org.apache.pdfbox.pdfparser.COSParser.isString : i4 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : if i4 >= i1
org.apache.pdfbox.pdfparser.COSParser.isString : if i4 >= i1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : c2 = r1[i4]
org.apache.pdfbox.pdfparser.COSParser.isString : c2 = r1[i4] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.isString : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : $i3 = interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: int read()>()
org.apache.pdfbox.pdfparser.COSParser.isString : $i3 = interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : if $i3 == c2
org.apache.pdfbox.pdfparser.COSParser.isString : if $i3 == c2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : i4 = i4 + 1
org.apache.pdfbox.pdfparser.COSParser.isString : i4 = i4 + 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : goto [?= (branch)]
org.apache.pdfbox.pdfparser.COSParser.isString : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.isString : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0)
org.apache.pdfbox.pdfparser.COSParser.isString : interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : return z0
org.apache.pdfbox.pdfparser.COSParser.isString : return z0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseStartXref : if $z0 == 0
org.apache.pdfbox.pdfparser.COSParser.parseStartXref : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseStartXref : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>()
org.apache.pdfbox.pdfparser.COSParser.parseStartXref : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.readString : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>(i0)
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 0
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 9
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 9 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 12
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 12 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 10
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 10 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 13
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 13 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 != 32
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 != 32 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $z0 = 0
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : return $z0
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if $z1 != 0
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if i0 != 37
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if i0 != 37 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if i0 == -1
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if i0 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i0)
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.unread : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader>
org.apache.pdfbox.pdfparser.RandomAccessSource.unread : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader> >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.unread : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void rewind(int)>(1)
org.apache.pdfbox.pdfparser.RandomAccessSource.unread : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void rewind(int)>(1) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : $r2 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.BaseParser.readString : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdfparser.BaseParser.readString : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readString : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : i2 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.readString : i2 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : $c0 = (char) i2
org.apache.pdfbox.pdfparser.BaseParser.readString : $c0 = (char) i2 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEndOfName(int)>($c0)
org.apache.pdfbox.pdfparser.BaseParser.readString : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEndOfName(int)>($c0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 32
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 32 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 13
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 13 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 10
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 10 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 9
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 9 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 62
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 62 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 60
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 60 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 91
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 91 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 47
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 47 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 93
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 93 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 41
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 41 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 40
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 40 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 0
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 != 12
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 != 12 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : $z0 = 0
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : return $z0
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : if $z0 != 0
org.apache.pdfbox.pdfparser.BaseParser.readString : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : if i2 == -1
org.apache.pdfbox.pdfparser.BaseParser.readString : if i2 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : $c1 = (char) i2
org.apache.pdfbox.pdfparser.BaseParser.readString : $c1 = (char) i2 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
org.apache.pdfbox.pdfparser.BaseParser.readString : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : $r7 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readString : $r7 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : i2 = interfaceinvoke $r7.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.readString : i2 = interfaceinvoke $r7.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : goto [?= $c0 = (char) i2]
org.apache.pdfbox.pdfparser.BaseParser.readString : goto [?= $c0 = (char) i2] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : $z0 = 1
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : goto [?= return $z0]
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readString : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i2)
org.apache.pdfbox.pdfparser.BaseParser.readString : interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i2) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.BaseParser.readString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : return $r4
org.apache.pdfbox.pdfparser.BaseParser.readString : return $r4 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseStartXref : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.COSParser.parseStartXref : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $z0 = 1
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : goto [?= return $z0]
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : i0 = interfaceinvoke $r2.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : i0 = interfaceinvoke $r2.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : goto [?= $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>(i0)]
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : goto [?= $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>(i0)] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseStartXref : l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long readLong()>()
org.apache.pdfbox.pdfparser.COSParser.parseStartXref : l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long readLong()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLong : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.readLong : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLong : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.StringBuilder readStringNumber()>()
org.apache.pdfbox.pdfparser.BaseParser.readLong : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.StringBuilder readStringNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $r2 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $i0 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $i0 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 32
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 32 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 10
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 10 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 13
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 13 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 60
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 60 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 91
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 91 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 40
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 40 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 0
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == -1
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $c1 = (char) $i0
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $c1 = (char) $i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $i2 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>()
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $i2 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $i3 = <org.apache.pdfbox.pdfparser.BaseParser: int MAX_LENGTH_LONG>
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $i3 = <org.apache.pdfbox.pdfparser.BaseParser: int MAX_LENGTH_LONG> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i2 <= $i3
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i2 <= $i3 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>($i0)
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>($i0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : return $r2
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : return $r2 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLong : $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.BaseParser.readLong : $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLong : l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3)
org.apache.pdfbox.pdfparser.BaseParser.readLong : l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLong : goto [?= return l2]
org.apache.pdfbox.pdfparser.BaseParser.readLong : goto [?= return l2] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLong : return l2
org.apache.pdfbox.pdfparser.BaseParser.readLong : return l2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseStartXref : return l0
org.apache.pdfbox.pdfparser.COSParser.parseStartXref : return l0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : l23 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l1)
org.apache.pdfbox.pdfparser.COSParser.parseXref : l23 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : l24 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long checkXRefOffset(long)>(l23)
org.apache.pdfbox.pdfparser.COSParser.parseXref : l24 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long checkXRefOffset(long)>(l23) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $z0 = r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isLenient>
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $z0 = r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isLenient> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : if $z0 != 0
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $r1 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $r1 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0)
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $i2 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $i2 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : if $i2 != 120
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : if $i2 != 120 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $r3 = <org.apache.pdfbox.pdfparser.COSParser: char[] XREF_TABLE>
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $r3 = <org.apache.pdfbox.pdfparser.COSParser: char[] XREF_TABLE> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isString(char[])>($r3)
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isString(char[])>($r3) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : if $z1 == 0
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : return l0
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : return l0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $b2 = l24 cmp -1L
org.apache.pdfbox.pdfparser.COSParser.parseXref : $b2 = l24 cmp -1L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b2 <= 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b2 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : l23 = l24
org.apache.pdfbox.pdfparser.COSParser.parseXref : l23 = l24 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: void setStartXref(long)>(l23)
org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: void setStartXref(long)>(l23) >>>>>>>> org.apache.pdfbox.cos.COSDocument.setStartXref : r0.<org.apache.pdfbox.cos.COSDocument: long startXref> = l0
org.apache.pdfbox.cos.COSDocument.setStartXref : r0.<org.apache.pdfbox.cos.COSDocument: long startXref> = l0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : l25 = l23
org.apache.pdfbox.pdfparser.COSParser.parseXref : l25 = l23 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : l26 = -1L
org.apache.pdfbox.pdfparser.COSParser.parseXref : l26 = -1L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $b27 = l25 cmp 0L
org.apache.pdfbox.pdfparser.COSParser.parseXref : $b27 = l25 cmp 0L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b27 <= 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b27 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $b4 = l25 cmp l26
org.apache.pdfbox.pdfparser.COSParser.parseXref : $b4 = l25 cmp l26 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b4 == 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b4 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : l26 = l25
org.apache.pdfbox.pdfparser.COSParser.parseXref : l26 = l25 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r19 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r19 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : interfaceinvoke $r19.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l25)
org.apache.pdfbox.pdfparser.COSParser.parseXref : interfaceinvoke $r19.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l25) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r20 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r20 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $i5 = interfaceinvoke $r20.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : $i5 = interfaceinvoke $r20.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $i5 != 120
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $i5 != 120 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean parseXrefTable(long)>(l25)
org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean parseXrefTable(long)>(l25) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i3 = interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i3 = interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $i3 == 120
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $i3 == 120 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r6 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r6 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("xref")
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("xref") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z0 != 0
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r7 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r7 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r3 = virtualinvoke r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r7)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r3 = virtualinvoke r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r7) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r8 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r8 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i4 = lengthof r3
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i4 = lengthof r3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : interfaceinvoke $r8.<org.apache.pdfbox.io.RandomAccessRead: void rewind(int)>($i4)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : interfaceinvoke $r8.<org.apache.pdfbox.io.RandomAccessRead: void rewind(int)>($i4) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r10 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r10 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r9 = <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType TABLE>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r9 = <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType TABLE> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : virtualinvoke $r10.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void nextXrefObj(long,org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType)>(l0, $r9)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : virtualinvoke $r10.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void nextXrefObj(long,org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType)>(l0, $r9) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map bytePosToXrefMap>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map bytePosToXrefMap> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : $r4 = new org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj
org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : $r4 = new org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : specialinvoke $r4.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: void <init>(org.apache.pdfbox.pdfparser.XrefTrailerResolver$1)>(null)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : specialinvoke $r4.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: void <init>(org.apache.pdfbox.pdfparser.XrefTrailerResolver$1)>(null) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> = $r4
org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> = $r4 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : $r6 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : $r6 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType access$102(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj,org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType)>($r6, r1)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType access$102(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj,org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType)>($r6, r1) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$102 : r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType xrefType> = r1
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$102 : r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType xrefType> = r1 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$102 : return r1
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$102 : return r1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("trailer")
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("trailer") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z1 == 0
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r40 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r40 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r41 = virtualinvoke r40.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s")
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r41 = virtualinvoke r40.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i5 = lengthof r41
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i5 = lengthof r41 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $i5 == 2
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $i5 == 2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r11 = r41[0]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r11 = r41[0] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : l12 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r11)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : l12 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r11) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r12 = r41[1]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r12 = r41[1] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : i13 = 0
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : i13 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if i13 >= i1
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if i13 >= i1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r13 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r13 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z2 = interfaceinvoke $r13.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z2 = interfaceinvoke $r13.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z2 != 0
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z2 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r14 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r14 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i6 = interfaceinvoke $r14.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i6 = interfaceinvoke $r14.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $c7 = (char) $i6
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $c7 = (char) $i6 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isEndOfName(int)>($c7)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isEndOfName(int)>($c7) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z3 == 0
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r15 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r15 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i8 = interfaceinvoke $r15.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i8 = interfaceinvoke $r15.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $i8 != 116
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $i8 != 116 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r42 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r42 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isCR : $z0 = 1
org.apache.pdfbox.pdfparser.BaseParser.isCR : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isCR : goto [?= return $z0]
org.apache.pdfbox.pdfparser.BaseParser.isCR : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $i2 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.BaseParser.readLine : $i2 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.peek : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader>
org.apache.pdfbox.pdfparser.RandomAccessSource.peek : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader> >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.peek : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.RandomAccessSource.peek : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.peek : return $i0
org.apache.pdfbox.pdfparser.RandomAccessSource.peek : return $i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $z2 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isLF(int)>($i2)
org.apache.pdfbox.pdfparser.BaseParser.readLine : $z2 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isLF(int)>($i2) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z2 == 0
org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r6 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r6 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : interfaceinvoke $r6.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.readLine : interfaceinvoke $r6.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r43 = virtualinvoke r42.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s")
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r43 = virtualinvoke r42.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i9 = lengthof r43
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i9 = lengthof r43 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $i9 >= 3
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $i9 >= 3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i10 = lengthof r43
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i10 = lengthof r43 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i11 = $i10 - 1
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i11 = $i10 - 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r16 = r43[$i11]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r16 = r43[$i11] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("n")
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("n") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z4 == 0
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r17 = r43[2]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r17 = r43[2] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z5 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("f")
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z5 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("f") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z5 != 0
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z5 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : l12 = l12 + 1L
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : l12 = l12 + 1L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : i13 = i13 + 1
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : i13 = i13 + 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : goto [?= (branch)]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r23 = r43[0]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r23 = r43[0] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : l14 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : l14 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r24 = r43[1]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r24 = r43[1] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r24)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r24) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r25 = new org.apache.pdfbox.cos.COSObjectKey
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r25 = new org.apache.pdfbox.cos.COSObjectKey >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : specialinvoke $r25.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>(l12, i2)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : specialinvoke $r25.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>(l12, i2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r26 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r26 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : virtualinvoke $r26.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void setXRef(org.apache.pdfbox.cos.COSObjectKey,long)>($r25, l14)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : virtualinvoke $r26.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void setXRef(org.apache.pdfbox.cos.COSObjectKey,long)>($r25, l14) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : if $r2 != null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : if $r2 != null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r3 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r3 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r4 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r3)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r4 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r3) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$200 : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map xrefTable>
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$200 : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map xrefTable> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$200 : return $r1
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$200 : return $r1 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.hashCode : $l2 = r0.<org.apache.pdfbox.cos.COSObjectKey: long number>
org.apache.pdfbox.cos.COSObjectKey.hashCode : $l2 = r0.<org.apache.pdfbox.cos.COSObjectKey: long number> >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.hashCode : $i0 = r0.<org.apache.pdfbox.cos.COSObjectKey: int generation>
org.apache.pdfbox.cos.COSObjectKey.hashCode : $i0 = r0.<org.apache.pdfbox.cos.COSObjectKey: int generation> >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.hashCode : $l1 = (long) $i0
org.apache.pdfbox.cos.COSObjectKey.hashCode : $l1 = (long) $i0 >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.hashCode : $l3 = $l2 + $l1
org.apache.pdfbox.cos.COSObjectKey.hashCode : $l3 = $l2 + $l1 >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.hashCode : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.pdfbox.cos.COSObjectKey.hashCode : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.hashCode : $i4 = virtualinvoke $r1.<java.lang.Long: int hashCode()>()
org.apache.pdfbox.cos.COSObjectKey.hashCode : $i4 = virtualinvoke $r1.<java.lang.Long: int hashCode()>() >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.hashCode : return $i4
org.apache.pdfbox.cos.COSObjectKey.hashCode : return $i4 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : if $z0 != 0
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r5 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r5 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r6 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r5)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r6 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r5) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : goto [?= l12 = l12 + 1L]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : goto [?= l12 = l12 + 1L] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z6 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isDigit()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z6 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isDigit()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.isDigit : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.BaseParser.isDigit : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : $z0 = staticinvoke <org.apache.pdfbox.pdfparser.BaseParser: boolean isDigit(int)>($i0)
org.apache.pdfbox.pdfparser.BaseParser.isDigit : $z0 = staticinvoke <org.apache.pdfbox.pdfparser.BaseParser: boolean isDigit(int)>($i0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : if i0 < 48
org.apache.pdfbox.pdfparser.BaseParser.isDigit : if i0 < 48 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : if i0 > 57
org.apache.pdfbox.pdfparser.BaseParser.isDigit : if i0 > 57 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : $z0 = 0
org.apache.pdfbox.pdfparser.BaseParser.isDigit : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : return $z0
org.apache.pdfbox.pdfparser.BaseParser.isDigit : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z6 != 0
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z6 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : goto [?= return 1]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : goto [?= return 1] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : return 1
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : return 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r23 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r23 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $l9 = interfaceinvoke $r23.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : $l9 = interfaceinvoke $r23.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : r0.<org.apache.pdfbox.pdfparser.COSParser: long trailerOffset> = $l9
org.apache.pdfbox.pdfparser.COSParser.parseXref : r0.<org.apache.pdfbox.pdfparser.COSParser: long trailerOffset> = $l9 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $z1 = r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isLenient>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $z1 = r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isLenient> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $z1 == 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r53 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r53 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : i28 = interfaceinvoke $r53.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : i28 = interfaceinvoke $r53.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if i28 == 116
org.apache.pdfbox.pdfparser.COSParser.parseXref : if i28 == 116 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $z6 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean parseTrailer()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : $z6 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean parseTrailer()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $i1 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $i1 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : if $i1 == 116
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : if $i1 == 116 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : l0 = interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : l0 = interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $r4 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $r4 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("trailer")
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("trailer") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : if $z0 != 0
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : r8 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDictionary parseCOSDictionary()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : r8 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDictionary parseCOSDictionary()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(60)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(60) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedChar : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readExpectedChar : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedChar : $i2 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.readExpectedChar : $i2 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedChar : c1 = (char) $i2
org.apache.pdfbox.pdfparser.BaseParser.readExpectedChar : c1 = (char) $i2 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedChar : if c1 == c0
org.apache.pdfbox.pdfparser.BaseParser.readExpectedChar : if c1 == c0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : $r2 = new org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : $r2 = new org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : specialinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: void <init>()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : specialinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : z1 = 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : z1 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : if z1 != 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : if z1 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : $i1 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : $i1 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : c0 = (char) $i1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : c0 = (char) $i1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : if c0 != 62
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : if c0 != 62 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : if c0 != 47
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : if c0 != 47 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void parseCOSDictionaryNameValuePair(org.apache.pdfbox.cos.COSDictionary)>($r2)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void parseCOSDictionaryNameValuePair(org.apache.pdfbox.cos.COSDictionary)>($r2) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSName parseCOSName()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSName parseCOSName()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(47)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(47) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r4 = new java.io.ByteArrayOutputStream
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r4 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : i6 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : i6 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : if i6 == -1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : if i6 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : i7 = i6
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : i7 = i6 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : if i6 != 35
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : if i6 != 35 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEndOfName(int)>(i6)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEndOfName(int)>(i6) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : if $z1 == 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>(i6)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>(i6) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r14 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r14 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : i6 = interfaceinvoke $r14.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : i6 = interfaceinvoke $r14.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : goto [?= (branch)]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r13 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r13 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : interfaceinvoke $r13.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i6)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : interfaceinvoke $r13.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i6) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : r31 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : r31 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isValidUTF8(byte[])>(r31)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isValidUTF8(byte[])>(r31) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : $r4 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset UTF_8>
org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : $r4 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : r2 = virtualinvoke $r4.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>()
org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : r2 = virtualinvoke $r4.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1)
org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : virtualinvoke r2.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r5)
org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : virtualinvoke r2.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r5) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : return 1
org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : return 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : if $z0 == 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r10 = new java.lang.String
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r10 = new java.lang.String >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r11 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r11 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r12 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset UTF_8>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r12 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : specialinvoke $r10.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r11, $r12)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : specialinvoke $r10.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r11, $r12) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : r32 = $r10
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : r32 = $r10 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : goto [?= $r9 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r32)]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : goto [?= $r9 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r32)] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r9 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r32)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r9 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r32) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : return $r9
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : return $r9 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : r3 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseCOSDictionaryValue()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : r3 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseCOSDictionaryValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : l0 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: long getPosition()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : l0 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: long getPosition()>() >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.getPosition : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader>
org.apache.pdfbox.pdfparser.RandomAccessSource.getPosition : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader> >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.getPosition : $l0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>()
org.apache.pdfbox.pdfparser.RandomAccessSource.getPosition : $l0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>() >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.getPosition : return $l0
org.apache.pdfbox.pdfparser.RandomAccessSource.getPosition : return $l0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseDirObject()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseDirObject()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = null
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = null >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : c8 = (char) i0
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : c8 = (char) i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : lookupswitch(c8) {     case 40:
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : lookupswitch(c8) {     case 40: >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c8)
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c8) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if $z2 != 0
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if $z2 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r63 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r63 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : specialinvoke $r63.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : specialinvoke $r63.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r65 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r65 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : i11 = interfaceinvoke $r65.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : i11 = interfaceinvoke $r65.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : c12 = (char) i11
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : c12 = (char) i11 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $z5 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c12)
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $z5 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c12) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if $z5 != 0
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if $z5 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c12)
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c12) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r66 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r66 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : i11 = interfaceinvoke $r66.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : i11 = interfaceinvoke $r66.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : goto [?= $z5 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c12)]
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : goto [?= $z5 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c12)] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 == 45
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 == 45 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 == 43
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 == 43 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 == 46
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 == 46 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 == 69
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 == 69 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 != 101
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 != 101 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if i11 == -1
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if i11 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r39 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r39 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : interfaceinvoke $r39.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i11)
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : interfaceinvoke $r39.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i11) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r38 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r38 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = staticinvoke <org.apache.pdfbox.cos.COSNumber: org.apache.pdfbox.cos.COSNumber get(java.lang.String)>($r38)
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = staticinvoke <org.apache.pdfbox.cos.COSNumber: org.apache.pdfbox.cos.COSNumber get(java.lang.String)>($r38) >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $i0 = virtualinvoke r0.<java.lang.String: int length()>()
org.apache.pdfbox.cos.COSNumber.get : $i0 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : if $i0 != 1
org.apache.pdfbox.cos.COSNumber.get : if $i0 != 1 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)
org.apache.pdfbox.cos.COSNumber.get : c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : if 48 > c8
org.apache.pdfbox.cos.COSNumber.get : if 48 > c8 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : if c8 > 57
org.apache.pdfbox.cos.COSNumber.get : if c8 > 57 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $i6 = c8 - 48
org.apache.pdfbox.cos.COSNumber.get : $i6 = c8 - 48 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $l7 = (long) $i6
org.apache.pdfbox.cos.COSNumber.get : $l7 = (long) $i6 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $r12 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l7)
org.apache.pdfbox.cos.COSNumber.get : $r12 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l7) >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : return $r12
org.apache.pdfbox.cos.COSNumber.get : return $r12 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : goto [?= return r60]
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : goto [?= return r60] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : return r60
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : return r60 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isDigit()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isDigit()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : $z0 = 1
org.apache.pdfbox.pdfparser.BaseParser.isDigit : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : goto [?= return $z0]
org.apache.pdfbox.pdfparser.BaseParser.isDigit : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : if $z0 != 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : l1 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: long getPosition()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : l1 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: long getPosition()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseDirObject()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseDirObject()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(82)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(82) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $z1 = r1 instanceof org.apache.pdfbox.cos.COSInteger
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $z1 = r1 instanceof org.apache.pdfbox.cos.COSInteger >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : if $z1 != 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $z2 = r2 instanceof org.apache.pdfbox.cos.COSInteger
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $z2 = r2 instanceof org.apache.pdfbox.cos.COSInteger >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : if $z2 != 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : if $z2 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r6 = new org.apache.pdfbox.cos.COSObjectKey
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r6 = new org.apache.pdfbox.cos.COSObjectKey >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r7 = (org.apache.pdfbox.cos.COSInteger) r1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r7 = (org.apache.pdfbox.cos.COSInteger) r1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $l2 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSInteger: long longValue()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $l2 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSInteger: long longValue()>() >>>>>>>> org.apache.pdfbox.cos.COSInteger.longValue : $l0 = r0.<org.apache.pdfbox.cos.COSInteger: long value>
org.apache.pdfbox.cos.COSInteger.longValue : $l0 = r0.<org.apache.pdfbox.cos.COSInteger: long value> >>>>>>>> org.apache.pdfbox.cos.COSInteger.longValue : return $l0
org.apache.pdfbox.cos.COSInteger.longValue : return $l0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r8 = (org.apache.pdfbox.cos.COSInteger) r2
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r8 = (org.apache.pdfbox.cos.COSInteger) r2 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $i3 = virtualinvoke $r8.<org.apache.pdfbox.cos.COSInteger: int intValue()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $i3 = virtualinvoke $r8.<org.apache.pdfbox.cos.COSInteger: int intValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : specialinvoke $r6.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>($l2, $i3)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : specialinvoke $r6.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>($l2, $i3) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r9 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)>($r6)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r9 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)>($r6) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : if $r2 != null
org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : if $r2 != null >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)>(r1)
org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = null
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = null >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : if r1 == null
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : if r1 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r5 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool>
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r5 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = (org.apache.pdfbox.cos.COSObject) $r6
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = (org.apache.pdfbox.cos.COSObject) $r6 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : if r7 != null
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : if r7 != null >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r2 = new org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r2 = new org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : specialinvoke $r2.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null)
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : specialinvoke $r2.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null) >>>>>>>> org.apache.pdfbox.cos.COSObject.setObject : r0.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase baseObject> = r1
org.apache.pdfbox.cos.COSObject.setObject : r0.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase baseObject> = r1 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = $r2
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = $r2 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $l0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $l0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : virtualinvoke $r2.<org.apache.pdfbox.cos.COSObject: void setObjectNumber(long)>($l0)
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : virtualinvoke $r2.<org.apache.pdfbox.cos.COSObject: void setObjectNumber(long)>($l0) >>>>>>>> org.apache.pdfbox.cos.COSObject.setObjectNumber : r0.<org.apache.pdfbox.cos.COSObject: long objectNumber> = l0
org.apache.pdfbox.cos.COSObject.setObjectNumber : r0.<org.apache.pdfbox.cos.COSObject: long objectNumber> = l0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $i1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>()
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $i1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : virtualinvoke $r2.<org.apache.pdfbox.cos.COSObject: void setGenerationNumber(int)>($i1)
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : virtualinvoke $r2.<org.apache.pdfbox.cos.COSObject: void setGenerationNumber(int)>($i1) >>>>>>>> org.apache.pdfbox.cos.COSObject.setGenerationNumber : r0.<org.apache.pdfbox.cos.COSObject: int generationNumber> = i0
org.apache.pdfbox.cos.COSObject.setGenerationNumber : r0.<org.apache.pdfbox.cos.COSObject: int generationNumber> = i0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool>
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2)
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2) >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : return r7
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : return r7 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : return $r4
org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : return $r4 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : return $r9
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : return $r9 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : $i0 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : $i0 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : $c1 = (char) $i0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : $c1 = (char) $i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : if $c1 != 100
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : if $c1 != 100 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : if r3 != null
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : if r3 != null >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : virtualinvoke r3.<org.apache.pdfbox.cos.COSBase: void setDirect(boolean)>(1)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : virtualinvoke r3.<org.apache.pdfbox.cos.COSBase: void setDirect(boolean)>(1) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r2, r3)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r2, r3) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : goto [?= (branch)]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSArray parseCOSArray()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSArray parseCOSArray()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(91)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(91) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r4 = new org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r4 = new org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : specialinvoke $r4.<org.apache.pdfbox.cos.COSArray: void <init>()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : specialinvoke $r4.<org.apache.pdfbox.cos.COSArray: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i1 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i1 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $i1 <= 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $i1 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $c3 = (char) $i1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $c3 = (char) $i1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $c3 == 93
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $c3 == 93 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : r23 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseDirObject()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : r23 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseDirObject()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r34 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r34 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : i9 = interfaceinvoke $r34.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : i9 = interfaceinvoke $r34.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r35 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r35 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $i4 = interfaceinvoke $r35.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $i4 = interfaceinvoke $r35.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : c10 = (char) $i4
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : c10 = (char) $i4 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r36 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r36 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : interfaceinvoke $r36.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i9)
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : interfaceinvoke $r36.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i9) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c10 != 60
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c10 != 60 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSString parseCOSString()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSString parseCOSString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : $i5 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : $i5 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : c0 = (char) $i5
org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : c0 = (char) $i5 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : if c0 != 40
org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : if c0 != 40 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : if c0 != 60
org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : if c0 != 60 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : $r13 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSString parseCOSHexString()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : $r13 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSString parseCOSHexString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $r2 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $r9 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $r9 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : i5 = interfaceinvoke $r9.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : i5 = interfaceinvoke $r9.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $c6 = (char) i5
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $c6 = (char) i5 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $z0 = staticinvoke <org.apache.pdfbox.pdfparser.BaseParser: boolean isHexDigit(char)>($c6)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $z0 = staticinvoke <org.apache.pdfbox.pdfparser.BaseParser: boolean isHexDigit(char)>($c6) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : $z0 = staticinvoke <org.apache.pdfbox.pdfparser.BaseParser: boolean isDigit(int)>(c0)
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : $z0 = staticinvoke <org.apache.pdfbox.pdfparser.BaseParser: boolean isDigit(int)>(c0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : if $z0 != 0
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : $z1 = 1
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : $z1 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : goto [?= return $z1]
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : goto [?= return $z1] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : return $z1
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : return $z1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : if $z0 == 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $c4 = (char) i5
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $c4 = (char) i5 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : goto [?= (branch)]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : goto [?= $r9 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : goto [?= $r9 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : if c0 < 97
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : if c0 < 97 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : if c0 < 65
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : if c0 < 65 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : if c0 > 70
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : if c0 > 70 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : $z1 = 0
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : $z1 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : if i5 != 62
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : if i5 != 62 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : goto [?= $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : goto [?= $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $r4 = staticinvoke <org.apache.pdfbox.cos.COSString: org.apache.pdfbox.cos.COSString parseHex(java.lang.String)>($r3)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $r4 = staticinvoke <org.apache.pdfbox.cos.COSString: org.apache.pdfbox.cos.COSString parseHex(java.lang.String)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $r4 = new java.io.ByteArrayOutputStream
org.apache.pdfbox.cos.COSString.parseHex : $r4 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.cos.COSString.parseHex : specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $r5 = new java.lang.StringBuilder
org.apache.pdfbox.cos.COSString.parseHex : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $r6 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>()
org.apache.pdfbox.cos.COSString.parseHex : $r6 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6)
org.apache.pdfbox.cos.COSString.parseHex : specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6) >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $i1 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>()
org.apache.pdfbox.cos.COSString.parseHex : $i1 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>() >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $i2 = $i1 % 2
org.apache.pdfbox.cos.COSString.parseHex : $i2 = $i1 % 2 >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : if $i2 == 0
org.apache.pdfbox.cos.COSString.parseHex : if $i2 == 0 >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : i0 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>()
org.apache.pdfbox.cos.COSString.parseHex : i0 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>() >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : i5 = 0
org.apache.pdfbox.cos.COSString.parseHex : i5 = 0 >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : if i5 >= i0
org.apache.pdfbox.cos.COSString.parseHex : if i5 >= i0 >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $i3 = i5 + 2
org.apache.pdfbox.cos.COSString.parseHex : $i3 = i5 + 2 >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String substring(int,int)>(i5, $i3)
org.apache.pdfbox.cos.COSString.parseHex : $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String substring(int,int)>(i5, $i3) >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r9, 16)
org.apache.pdfbox.cos.COSString.parseHex : $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r9, 16) >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>($i4)
org.apache.pdfbox.cos.COSString.parseHex : virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>($i4) >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : goto [?= i5 = i5 + 2]
org.apache.pdfbox.cos.COSString.parseHex : goto [?= i5 = i5 + 2] >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : i5 = i5 + 2
org.apache.pdfbox.cos.COSString.parseHex : i5 = i5 + 2 >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : goto [?= (branch)]
org.apache.pdfbox.cos.COSString.parseHex : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $r7 = new org.apache.pdfbox.cos.COSString
org.apache.pdfbox.cos.COSString.parseHex : $r7 = new org.apache.pdfbox.cos.COSString >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $r8 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.cos.COSString.parseHex : $r8 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : specialinvoke $r7.<org.apache.pdfbox.cos.COSString: void <init>(byte[])>($r8)
org.apache.pdfbox.cos.COSString.parseHex : specialinvoke $r7.<org.apache.pdfbox.cos.COSString: void <init>(byte[])>($r8) >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : return $r7
org.apache.pdfbox.cos.COSString.parseHex : return $r7 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : return $r4
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : return $r4 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : return $r13
org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : return $r13 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $z0 = r23 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $z0 = r23 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $z0 == 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if r23 == null
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if r23 == null >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>(r23)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>(r23) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : goto [?= virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : goto [?= virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : goto [?= $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : goto [?= $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r6 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r6 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : interfaceinvoke $r6.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : interfaceinvoke $r6.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : return $r4
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : return $r4 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : return r1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : return r1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : z1 = 1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : z1 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(62)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(62) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : return $r2
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : return $r2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : virtualinvoke $r5.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void setTrailer(org.apache.pdfbox.cos.COSDictionary)>(r8)
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : virtualinvoke $r5.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void setTrailer(org.apache.pdfbox.cos.COSDictionary)>(r8) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setTrailer : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setTrailer : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setTrailer : if $r2 != null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setTrailer : if $r2 != null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setTrailer : $r3 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setTrailer : $r3 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setTrailer : $r3.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> = r1
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setTrailer : $r3.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> = r1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : return 1
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : return 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $z6 != 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $z6 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r24 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r24 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : r69 = virtualinvoke $r24.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.cos.COSDictionary getCurrentTrailer()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : r69 = virtualinvoke $r24.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.cos.COSDictionary getCurrentTrailer()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getCurrentTrailer : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getCurrentTrailer : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getCurrentTrailer : $r2 = $r1.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getCurrentTrailer : $r2 = $r1.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getCurrentTrailer : return $r2
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getCurrentTrailer : return $r2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r25 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF_STM>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r25 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF_STM> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $z2 = virtualinvoke r69.<org.apache.pdfbox.cos.COSDictionary: boolean containsKey(org.apache.pdfbox.cos.COSName)>($r25)
org.apache.pdfbox.pdfparser.COSParser.parseXref : $z2 = virtualinvoke r69.<org.apache.pdfbox.cos.COSDictionary: boolean containsKey(org.apache.pdfbox.cos.COSName)>($r25) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $z2 == 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r70 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r70 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : l25 = virtualinvoke r69.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName)>($r70)
org.apache.pdfbox.pdfparser.COSParser.parseXref : l25 = virtualinvoke r69.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName)>($r70) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $b31 = l25 cmp 0L
org.apache.pdfbox.pdfparser.COSParser.parseXref : $b31 = l25 cmp 0L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b31 <= 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b31 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : goto [?= $b27 = l25 cmp 0L]
org.apache.pdfbox.pdfparser.COSParser.parseXref : goto [?= $b27 = l25 cmp 0L] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $b3 = l25 cmp l26
org.apache.pdfbox.pdfparser.COSParser.parseXref : $b3 = l25 cmp l26 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b3 != 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b3 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r4.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void setStartxref(long)>(l23)
org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r4.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void setStartxref(long)>(l23) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r3 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r3 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $r3 == null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $r3 == null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r4 = new org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r4 = new org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : specialinvoke $r4.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: void <init>(org.apache.pdfbox.pdfparser.XrefTrailerResolver$1)>(null)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : specialinvoke $r4.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: void <init>(org.apache.pdfbox.pdfparser.XrefTrailerResolver$1)>(null) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> = $r4
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> = $r4 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r6 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r6 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r5 = new org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r5 = new org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : specialinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: void <init>()>()
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : specialinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r6.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> = $r5
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r6.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> = $r5 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r7 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map bytePosToXrefMap>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r7 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map bytePosToXrefMap> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r46 = (org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj) $r9
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r46 = (org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj) $r9 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r10 = new java.util.ArrayList
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r10 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : specialinvoke $r10.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : specialinvoke $r10.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if r46 != null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if r46 != null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r11 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r11 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r12 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType access$100(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>(r46)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r12 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType access$100(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>(r46) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$100 : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType xrefType>
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$100 : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType xrefType> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$100 : return $r1
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$100 : return $r1 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType access$102(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj,org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType)>($r11, $r12)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType access$102(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj,org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType)>($r11, $r12) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r14)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r14) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r15 = r46.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r15 = r46.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $r15 == null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $r15 == null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r27 = r46.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r27 = r46.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r26 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r26 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : l4 = virtualinvoke $r27.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName,long)>($r26, -1L)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : l4 = virtualinvoke $r27.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName,long)>($r26, -1L) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $b1 = l4 cmp -1L
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $b1 = l4 cmp -1L >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $b1 != 0
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $b1 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : goto [?= staticinvoke <java.util.Collections: void reverse(java.util.List)>($r10)]
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : goto [?= staticinvoke <java.util.Collections: void reverse(java.util.List)>($r10)] >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : staticinvoke <java.util.Collections: void reverse(java.util.List)>($r10)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : staticinvoke <java.util.Collections: void reverse(java.util.List)>($r10) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r47 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r47 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $z3 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $z3 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $z3 == 0
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r16 = interfaceinvoke r47.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r16 = interfaceinvoke r47.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r2 = (java.lang.Long) $r16
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r2 = (java.lang.Long) $r16 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r17 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map bytePosToXrefMap>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r17 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map bytePosToXrefMap> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r48 = (org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj) $r18
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r48 = (org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj) $r18 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r19 = r48.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r19 = r48.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $r19 == null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $r19 == null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r23 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r23 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r25 = $r23.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r25 = $r23.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r24 = r48.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r24 = r48.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : virtualinvoke $r25.<org.apache.pdfbox.cos.COSDictionary: void addAll(org.apache.pdfbox.cos.COSDictionary)>($r24)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : virtualinvoke $r25.<org.apache.pdfbox.cos.COSDictionary: void addAll(org.apache.pdfbox.cos.COSDictionary)>($r24) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r13 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.addAll : $r13 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r14 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>("Size")
org.apache.pdfbox.cos.COSDictionary.addAll : $r14 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>("Size") >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $z2 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>($r14)
org.apache.pdfbox.cos.COSDictionary.addAll : $z2 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>($r14) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : if $z2 != 0
org.apache.pdfbox.cos.COSDictionary.addAll : if $z2 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r20 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r20 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r21 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r20)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r21 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r20) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r22 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>(r48)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r22 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>(r48) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : interfaceinvoke $r21.<java.util.Map: void putAll(java.util.Map)>($r22)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : interfaceinvoke $r21.<java.util.Map: void putAll(java.util.Map)>($r22) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : goto [?= $z3 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : goto [?= $z3 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : r72 = virtualinvoke $r5.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.cos.COSDictionary getTrailer()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : r72 = virtualinvoke $r5.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.cos.COSDictionary getTrailer()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : if $r1 != null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : if $r1 != null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : $r3 = $r2.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : $r3 = $r2.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : return $r3
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : return $r3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r6 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r6 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r6.<org.apache.pdfbox.cos.COSDocument: void setTrailer(org.apache.pdfbox.cos.COSDictionary)>(r72)
org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r6.<org.apache.pdfbox.cos.COSDocument: void setTrailer(org.apache.pdfbox.cos.COSDictionary)>(r72) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r8 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r8 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r9 = <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType STREAM>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r9 = <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType STREAM> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r7 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r7 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r10 = virtualinvoke $r7.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType getXrefType()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r10 = virtualinvoke $r7.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType getXrefType()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : if $r1 != null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : if $r1 != null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : $r3 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType access$100(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r2)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : $r3 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType access$100(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r2) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : return $r3
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : return $r3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $r9 != $r10
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $r9 != $r10 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $z7 = 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : $z7 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r8.<org.apache.pdfbox.cos.COSDocument: void setIsXRefStream(boolean)>($z7)
org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r8.<org.apache.pdfbox.cos.COSDocument: void setIsXRefStream(boolean)>($z7) >>>>>>>> org.apache.pdfbox.cos.COSDocument.setIsXRefStream : r0.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream> = z0
org.apache.pdfbox.cos.COSDocument.setIsXRefStream : r0.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream> = z0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void checkXrefOffsets()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void checkXrefOffsets()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $z0 = r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isLenient>
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $z0 = r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isLenient> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if $z0 != 0
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r1 = virtualinvoke $r2.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r1 = virtualinvoke $r2.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : if $r1 != null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : if $r1 != null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : $r3 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r2)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : $r3 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r2) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : return $r3
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : return $r3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if r1 == null
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if r1 == null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : z13 = 0
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : z13 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r3 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r3 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r31 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r31 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $z1 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $z1 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if $z1 == 0
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r27 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r27 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r32 = (java.util.Map$Entry) $r27
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r32 = (java.util.Map$Entry) $r27 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r28 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r28 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r33 = (org.apache.pdfbox.cos.COSObjectKey) $r28
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r33 = (org.apache.pdfbox.cos.COSObjectKey) $r28 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r29 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r29 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r34 = (java.lang.Long) $r29
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r34 = (java.lang.Long) $r29 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if r34 == null
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if r34 == null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $l12 = virtualinvoke r34.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $l12 = virtualinvoke r34.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $b13 = $l12 cmp 0L
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $b13 = $l12 cmp 0L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if $b13 < 0
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if $b13 < 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $l14 = virtualinvoke r34.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $l14 = virtualinvoke r34.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $z12 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean checkObjectKeys(org.apache.pdfbox.cos.COSObjectKey,long)>(r33, $l14)
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $z12 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean checkObjectKeys(org.apache.pdfbox.cos.COSObjectKey,long)>(r33, $l14) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $b4 = l0 cmp 6L
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $b4 = l0 cmp 6L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : if $b4 >= 0
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : if $b4 >= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : l1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : l1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : i2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>()
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : i2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : l3 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>()
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : l3 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : r2 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String createObjectString(long,int)>(l1, i2)
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : r2 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String createObjectString(long,int)>(l1, i2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r1 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdfparser.COSParser.createObjectString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0)
org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2)
org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1)
org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" obj")
org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" obj") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : return $r8
org.apache.pdfbox.pdfparser.COSParser.createObjectString : return $r8 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0)
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r6 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r6 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r7 = virtualinvoke r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6)
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r7 = virtualinvoke r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isString(byte[])>($r7)
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isString(byte[])>($r7) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : z1 = 0
org.apache.pdfbox.pdfparser.COSParser.isString : z1 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : $i2 = interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.COSParser.isString : $i2 = interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : $b3 = r1[0]
org.apache.pdfbox.pdfparser.COSParser.isString : $b3 = r1[0] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : if $i2 != $b3
org.apache.pdfbox.pdfparser.COSParser.isString : if $i2 != $b3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : i0 = lengthof r1
org.apache.pdfbox.pdfparser.COSParser.isString : i0 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : r2 = newarray (byte)[i0]
org.apache.pdfbox.pdfparser.COSParser.isString : r2 = newarray (byte)[i0] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : i5 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: int read(byte[],int,int)>(r2, 0, i0)
org.apache.pdfbox.pdfparser.COSParser.isString : i5 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: int read(byte[],int,int)>(r2, 0, i0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : if i5 >= i0
org.apache.pdfbox.pdfparser.COSParser.isString : if i5 >= i0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r1, r2)
org.apache.pdfbox.pdfparser.COSParser.isString : $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r1, r2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : if $z0 == 0
org.apache.pdfbox.pdfparser.COSParser.isString : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : z1 = 1
org.apache.pdfbox.pdfparser.COSParser.isString : z1 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: void rewind(int)>(i5)
org.apache.pdfbox.pdfparser.COSParser.isString : interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: void rewind(int)>(i5) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : return z1
org.apache.pdfbox.pdfparser.COSParser.isString : return z1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : if $z0 == 0
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r9 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r9 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : interfaceinvoke $r9.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l3)
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : interfaceinvoke $r9.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l3) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r10 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r10 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : interfaceinvoke $r10.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l3)
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : interfaceinvoke $r10.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l3) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : return 1
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : return 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if $z12 != 0
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if $z12 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : goto [?= $z1 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : goto [?= $z1 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if z13 == 0
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if z13 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r12 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r12 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r11 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r11 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r13 = virtualinvoke $r11.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r13 = virtualinvoke $r11.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r12.<org.apache.pdfbox.cos.COSDocument: void addXRefTable(java.util.Map)>($r13)
org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r12.<org.apache.pdfbox.cos.COSDocument: void addXRefTable(java.util.Map)>($r13) >>>>>>>> org.apache.pdfbox.cos.COSDocument.addXRefTable : $r2 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map xrefTable>
org.apache.pdfbox.cos.COSDocument.addXRefTable : $r2 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map xrefTable> >>>>>>>> org.apache.pdfbox.cos.COSDocument.addXRefTable : interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1)
org.apache.pdfbox.cos.COSDocument.addXRefTable : interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : return r72
org.apache.pdfbox.pdfparser.COSParser.parseXref : return r72 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : goto [?= (branch)]
org.apache.pdfbox.pdfparser.PDFParser.initialParse : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : if z7 == 0
org.apache.pdfbox.pdfparser.PDFParser.initialParse : if z7 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void prepareDecryption()>()
org.apache.pdfbox.pdfparser.PDFParser.initialParse : specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void prepareDecryption()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : $r3 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : $r3 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>()
org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCRYPT>
org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCRYPT> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : r1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : r1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : if r1 == null
org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : if r1 == null >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : r23 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSBase parseTrailerValuesDynamically(org.apache.pdfbox.cos.COSDictionary)>(r21)
org.apache.pdfbox.pdfparser.PDFParser.initialParse : r23 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSBase parseTrailerValuesDynamically(org.apache.pdfbox.cos.COSDictionary)>(r21) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r4 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Collection getValues()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r4 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Collection getValues()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getValues : $r1 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.getValues : $r1 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getValues : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>()
org.apache.pdfbox.cos.COSDictionary.getValues : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.values : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.values : if $z0 == 0
org.apache.pdfbox.util.SmallMap.values : if $z0 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $r2 = new java.util.ArrayList
org.apache.pdfbox.util.SmallMap.values : $r2 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.values : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $i0 = lengthof $r3
org.apache.pdfbox.util.SmallMap.values : $i0 = lengthof $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $i1 = $i0 >> 1
org.apache.pdfbox.util.SmallMap.values : $i1 = $i0 >> 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.values : specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1)
org.apache.pdfbox.util.SmallMap.values : specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1) >>>>>>>> org.apache.pdfbox.util.SmallMap.values : i3 = 1
org.apache.pdfbox.util.SmallMap.values : i3 = 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $r4 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.values : $r4 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $i2 = lengthof $r4
org.apache.pdfbox.util.SmallMap.values : $i2 = lengthof $r4 >>>>>>>> org.apache.pdfbox.util.SmallMap.values : if i3 >= $i2
org.apache.pdfbox.util.SmallMap.values : if i3 >= $i2 >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $r6 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.values : $r6 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $r7 = $r6[i3]
org.apache.pdfbox.util.SmallMap.values : $r7 = $r6[i3] >>>>>>>> org.apache.pdfbox.util.SmallMap.values : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7)
org.apache.pdfbox.util.SmallMap.values : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) >>>>>>>> org.apache.pdfbox.util.SmallMap.values : i3 = i3 + 2
org.apache.pdfbox.util.SmallMap.values : i3 = i3 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.values : goto [?= $r4 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.values : goto [?= $r4 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2)
org.apache.pdfbox.util.SmallMap.values : $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.values : return $r5
org.apache.pdfbox.util.SmallMap.values : return $r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getValues : return $r2
org.apache.pdfbox.cos.COSDictionary.getValues : return $r2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : r11 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : r11 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : if $z0 == 0
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r9 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r9 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : r2 = (org.apache.pdfbox.cos.COSBase) $r9
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : r2 = (org.apache.pdfbox.cos.COSBase) $r9 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $z1 = r2 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $z1 = r2 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : if $z1 == 0
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : r3 = (org.apache.pdfbox.cos.COSObject) r2
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : r3 = (org.apache.pdfbox.cos.COSObject) r2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseObjectDynamically(org.apache.pdfbox.cos.COSObject,boolean)>(r3, 0)
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseObjectDynamically(org.apache.pdfbox.cos.COSObject,boolean)>(r3, 0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $l0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObject: long getObjectNumber()>()
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $l0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObject: long getObjectNumber()>() >>>>>>>> org.apache.pdfbox.cos.COSObject.getObjectNumber : $l0 = r0.<org.apache.pdfbox.cos.COSObject: long objectNumber>
org.apache.pdfbox.cos.COSObject.getObjectNumber : $l0 = r0.<org.apache.pdfbox.cos.COSObject: long objectNumber> >>>>>>>> org.apache.pdfbox.cos.COSObject.getObjectNumber : return $l0
org.apache.pdfbox.cos.COSObject.getObjectNumber : return $l0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $i1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObject: int getGenerationNumber()>()
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $i1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObject: int getGenerationNumber()>() >>>>>>>> org.apache.pdfbox.cos.COSObject.getGenerationNumber : $i0 = r0.<org.apache.pdfbox.cos.COSObject: int generationNumber>
org.apache.pdfbox.cos.COSObject.getGenerationNumber : $i0 = r0.<org.apache.pdfbox.cos.COSObject: int generationNumber> >>>>>>>> org.apache.pdfbox.cos.COSObject.getGenerationNumber : return $i0
org.apache.pdfbox.cos.COSObject.getGenerationNumber : return $i0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseObjectDynamically(long,int,boolean)>($l0, $i1, z0)
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseObjectDynamically(long,int,boolean)>($l0, $i1, z0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r8 = new org.apache.pdfbox.cos.COSObjectKey
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r8 = new org.apache.pdfbox.cos.COSObjectKey >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : specialinvoke $r8.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>(l0, i1)
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : specialinvoke $r8.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>(l0, i1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r9 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r9 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : r2 = virtualinvoke $r9.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)>($r8)
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : r2 = virtualinvoke $r9.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)>($r8) >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSObjectKey
org.apache.pdfbox.cos.COSObjectKey.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSObjectKey >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : if $z0 == 0
org.apache.pdfbox.cos.COSObjectKey.equals : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : $r3 = (org.apache.pdfbox.cos.COSObjectKey) r1
org.apache.pdfbox.cos.COSObjectKey.equals : $r3 = (org.apache.pdfbox.cos.COSObjectKey) r1 >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : goto [?= (branch)]
org.apache.pdfbox.cos.COSObjectKey.equals : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : if $r3 == null
org.apache.pdfbox.cos.COSObjectKey.equals : if $r3 == null >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : $l0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.cos.COSObjectKey.equals : $l0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : $l1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.cos.COSObjectKey.equals : $l1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : $b2 = $l0 cmp $l1
org.apache.pdfbox.cos.COSObjectKey.equals : $b2 = $l0 cmp $l1 >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : if $b2 != 0
org.apache.pdfbox.cos.COSObjectKey.equals : if $b2 != 0 >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : $i3 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>()
org.apache.pdfbox.cos.COSObjectKey.equals : $i3 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>() >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : $i4 = virtualinvoke r0.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>()
org.apache.pdfbox.cos.COSObjectKey.equals : $i4 = virtualinvoke r0.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>() >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : if $i3 != $i4
org.apache.pdfbox.cos.COSObjectKey.equals : if $i3 != $i4 >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : $z1 = 1
org.apache.pdfbox.cos.COSObjectKey.equals : $z1 = 1 >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : goto [?= return $z1]
org.apache.pdfbox.cos.COSObjectKey.equals : goto [?= return $z1] >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : return $z1
org.apache.pdfbox.cos.COSObjectKey.equals : return $z1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r10 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r10 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>() >>>>>>>> org.apache.pdfbox.cos.COSObject.getObject : $r1 = r0.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase baseObject>
org.apache.pdfbox.cos.COSObject.getObject : $r1 = r0.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase baseObject> >>>>>>>> org.apache.pdfbox.cos.COSObject.getObject : return $r1
org.apache.pdfbox.cos.COSObject.getObject : return $r1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : if $r10 != null
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : if $r10 != null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r11 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r11 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r12 = virtualinvoke $r11.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>()
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r12 = virtualinvoke $r11.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8)
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : r33 = (java.lang.Long) $r13
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : r33 = (java.lang.Long) $r13 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : if z0 == 0
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : if z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : if r33 != null
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : if r33 != null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $l2 = virtualinvoke r33.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $l2 = virtualinvoke r33.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $b3 = $l2 cmp 0L
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $b3 = $l2 cmp 0L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : if $b3 <= 0
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : if $b3 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void parseFileObject(java.lang.Long,org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.COSObject)>(r33, $r8, r2)
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void parseFileObject(java.lang.Long,org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.COSObject)>(r33, $r8, r2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $l2 = virtualinvoke r1.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $l2 = virtualinvoke r1.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>($l2)
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>($l2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long readObjectNumber()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long readObjectNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: long readLong()>()
org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: long readLong()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : $b1 = l0 cmp 0L
org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : $b1 = l0 cmp 0L >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : if $b1 < 0
org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : if $b1 < 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : $b2 = l0 cmp 10000000000L
org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : $b2 = l0 cmp 10000000000L >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : if $b2 < 0
org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : if $b2 < 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : return l0
org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : return l0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : i1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: int readGenerationNumber()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : i1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: int readGenerationNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : i0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: int readInt()>()
org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : i0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: int readInt()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readInt : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.readInt : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readInt : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.StringBuilder readStringNumber()>()
org.apache.pdfbox.pdfparser.BaseParser.readInt : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.StringBuilder readStringNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readInt : $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.BaseParser.readInt : $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readInt : i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3)
org.apache.pdfbox.pdfparser.BaseParser.readInt : i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readInt : goto [?= return i1]
org.apache.pdfbox.pdfparser.BaseParser.readInt : goto [?= return i1] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readInt : return i1
org.apache.pdfbox.pdfparser.BaseParser.readInt : return i1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : if i0 < 0
org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : if i0 < 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : $l1 = (long) i0
org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : $l1 = (long) i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : $b2 = $l1 cmp 65535L
org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : $b2 = $l1 cmp 65535L >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : if $b2 <= 0
org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : if $b2 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : return i0
org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : return i0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r6 = <org.apache.pdfbox.pdfparser.COSParser: char[] OBJ_MARKER>
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r6 = <org.apache.pdfbox.pdfparser.COSParser: char[] OBJ_MARKER> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void readExpectedString(char[],boolean)>($r6, 1)
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void readExpectedString(char[],boolean)>($r6, 1) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : i0 = lengthof r1
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : i0 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : i4 = 0
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : i4 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : if i4 >= i0
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : if i4 >= i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : c1 = r1[i4]
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : c1 = r1[i4] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : $i2 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : $i2 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : if $i2 == c1
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : if $i2 == c1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : i4 = i4 + 1
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : i4 = i4 + 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : goto [?= (branch)]
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $l3 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $l3 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $b4 = l0 cmp $l3
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $b4 = l0 cmp $l3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $b4 != 0
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $b4 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $i7 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $i7 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if i1 == $i7
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if i1 == $i7 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : r59 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseDirObject()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : r59 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseDirObject()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDictionary parseCOSDictionary()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDictionary parseCOSDictionary()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSName parseCOSName()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSName parseCOSName()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $z0 = virtualinvoke r60.<java.lang.String: boolean equals(java.lang.Object)>("stream")
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $z0 = virtualinvoke r60.<java.lang.String: boolean equals(java.lang.Object)>("stream") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $z0 == 0
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r20 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdmodel.encryption.SecurityHandler securityHandler>
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r20 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdmodel.encryption.SecurityHandler securityHandler> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $r20 == null
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $r20 == null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : virtualinvoke r3.<org.apache.pdfbox.cos.COSObject: void setObject(org.apache.pdfbox.cos.COSBase)>(r59)
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : virtualinvoke r3.<org.apache.pdfbox.cos.COSObject: void setObject(org.apache.pdfbox.cos.COSBase)>(r59) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $z5 = virtualinvoke r60.<java.lang.String: boolean startsWith(java.lang.String)>("endobj")
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $z5 = virtualinvoke r60.<java.lang.String: boolean startsWith(java.lang.String)>("endobj") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $z5 != 0
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $z5 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : goto [?= $r34 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()]
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : goto [?= $r34 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r34 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r34 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : return $r34
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : return $r34 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : return $r2
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : return $r2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : goto [?= $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : goto [?= $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROOT>
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROOT> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r6 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r6 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : r12 = (org.apache.pdfbox.cos.COSObject) $r6
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : r12 = (org.apache.pdfbox.cos.COSObject) $r6 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : if r12 != null
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : if r12 != null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseObjectDynamically(org.apache.pdfbox.cos.COSObject,boolean)>(r12, 0)
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseObjectDynamically(org.apache.pdfbox.cos.COSObject,boolean)>(r12, 0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : return $r7
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : return $r7 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z1 = r23 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z1 = r23 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z1 != 0
org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : r1 = (org.apache.pdfbox.cos.COSDictionary) r23
org.apache.pdfbox.pdfparser.PDFParser.initialParse : r1 = (org.apache.pdfbox.cos.COSDictionary) r23 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean isLenient()>()
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean isLenient()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isLenient : $z0 = r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isLenient>
org.apache.pdfbox.pdfparser.COSParser.isLenient : $z0 = r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isLenient> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isLenient : return $z0
org.apache.pdfbox.pdfparser.COSParser.isLenient : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z2 == 0
org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r12 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r12 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z5 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: boolean containsKey(org.apache.pdfbox.cos.COSName)>($r12)
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z5 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: boolean containsKey(org.apache.pdfbox.cos.COSName)>($r12) >>>>>>>> org.apache.pdfbox.util.SmallMap.containsKey : $z0 = 1
org.apache.pdfbox.util.SmallMap.containsKey : $z0 = 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.containsKey : goto [?= return $z0]
org.apache.pdfbox.util.SmallMap.containsKey : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z5 != 0
org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z5 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r24 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r24 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : r2 = virtualinvoke $r24.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getCatalog()>()
org.apache.pdfbox.pdfparser.PDFParser.initialParse : r2 = virtualinvoke $r24.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getCatalog()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getCatalog : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CATALOG>
org.apache.pdfbox.cos.COSDocument.getCatalog : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CATALOG> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getCatalog : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getObjectByType(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.cos.COSDocument.getCatalog : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getObjectByType(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $r7 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool>
org.apache.pdfbox.cos.COSDocument.getObjectByType : $r7 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>()
org.apache.pdfbox.cos.COSDocument.getObjectByType : $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSDocument.getObjectByType : r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.cos.COSDocument.getObjectByType : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z0 == 0
org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.cos.COSDocument.getObjectByType : $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : r3 = (org.apache.pdfbox.cos.COSObject) $r9
org.apache.pdfbox.cos.COSDocument.getObjectByType : r3 = (org.apache.pdfbox.cos.COSObject) $r9 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : r4 = virtualinvoke r3.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()
org.apache.pdfbox.cos.COSDocument.getObjectByType : r4 = virtualinvoke r3.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $z1 = r4 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.cos.COSDocument.getObjectByType : $z1 = r4 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z1 == 0
org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : r19 = (org.apache.pdfbox.cos.COSDictionary) r4
org.apache.pdfbox.cos.COSDocument.getObjectByType : r19 = (org.apache.pdfbox.cos.COSDictionary) r4 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>
org.apache.pdfbox.cos.COSDocument.getObjectByType : $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : r5 = virtualinvoke r19.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r10)
org.apache.pdfbox.cos.COSDocument.getObjectByType : r5 = virtualinvoke r19.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r10) >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $z2 = r5 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSDocument.getObjectByType : $z2 = r5 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z2 == 0
org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z2 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : r6 = (org.apache.pdfbox.cos.COSName) r5
org.apache.pdfbox.cos.COSDocument.getObjectByType : r6 = (org.apache.pdfbox.cos.COSName) r5 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $z3 = virtualinvoke r6.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDocument.getObjectByType : $z3 = virtualinvoke r6.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z3 == 0
org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z3 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : return r3
org.apache.pdfbox.cos.COSDocument.getObjectByType : return r3 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getCatalog : if r1 != null
org.apache.pdfbox.cos.COSDocument.getCatalog : if r1 != null >>>>>>>> org.apache.pdfbox.cos.COSDocument.getCatalog : return r1
org.apache.pdfbox.cos.COSDocument.getCatalog : return r1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : if r2 == null
org.apache.pdfbox.pdfparser.PDFParser.initialParse : if r2 == null >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r4 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r4 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z3 = $r4 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z3 = $r4 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z3 == 0
org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r5 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r5 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r7 = (org.apache.pdfbox.cos.COSDictionary) $r5
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r7 = (org.apache.pdfbox.cos.COSDictionary) $r5 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r6 = (org.apache.pdfbox.cos.COSName[]) null
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r6 = (org.apache.pdfbox.cos.COSName[]) null >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void parseDictObjects(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName[])>($r7, $r6)
org.apache.pdfbox.pdfparser.PDFParser.initialParse : virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void parseDictObjects(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName[])>($r7, $r6) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r10 = new java.util.LinkedList
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r10 = new java.util.LinkedList >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r10.<java.util.LinkedList: void <init>()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r10.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r11 = new java.util.TreeMap
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r11 = new java.util.TreeMap >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r11.<java.util.TreeMap: void <init>()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r11.<java.util.TreeMap: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r12 = new java.util.HashSet
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r12 = new java.util.HashSet >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r12.<java.util.HashSet: void <init>()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r12.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r13 = new java.util.HashSet
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r13 = new java.util.HashSet >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r13.<java.util.HashSet: void <init>()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r13.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addExcludedToList(org.apache.pdfbox.cos.COSName[],org.apache.pdfbox.cos.COSDictionary,java.util.Set)>(r2, r1, $r12)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addExcludedToList(org.apache.pdfbox.cos.COSName[],org.apache.pdfbox.cos.COSDictionary,java.util.Set)>(r2, r1, $r12) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addExcludedToList : if r1 == null
org.apache.pdfbox.pdfparser.COSParser.addExcludedToList : if r1 == null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r14 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Collection getValues()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r14 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Collection getValues()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,java.util.Collection,java.util.Set)>($r10, $r14, $r13)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,java.util.Collection,java.util.Set)>($r10, $r14, $r13) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : r4 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfparser.COSParser.addNewToList : r4 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfparser.COSParser.addNewToList : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : if $z0 == 0
org.apache.pdfbox.pdfparser.COSParser.addNewToList : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfparser.COSParser.addNewToList : $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : r5 = (org.apache.pdfbox.cos.COSBase) $r6
org.apache.pdfbox.pdfparser.COSParser.addNewToList : r5 = (org.apache.pdfbox.cos.COSBase) $r6 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,org.apache.pdfbox.cos.COSBase,java.util.Set)>(r1, r5, r3)
org.apache.pdfbox.pdfparser.COSParser.addNewToList : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,org.apache.pdfbox.cos.COSBase,java.util.Set)>(r1, r5, r3) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : $z0 = r2 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfparser.COSParser.addNewToList : $z0 = r2 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : interfaceinvoke r1.<java.util.Queue: boolean add(java.lang.Object)>(r2)
org.apache.pdfbox.pdfparser.COSParser.addNewToList : interfaceinvoke r1.<java.util.Queue: boolean add(java.lang.Object)>(r2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfparser.COSParser.addNewToList : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : $r4 = (org.apache.pdfbox.cos.COSObject) r2
org.apache.pdfbox.pdfparser.COSParser.addNewToList : $r4 = (org.apache.pdfbox.cos.COSObject) r2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : l0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long getObjectId(org.apache.pdfbox.cos.COSObject)>($r4)
org.apache.pdfbox.pdfparser.COSParser.addNewToList : l0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long getObjectId(org.apache.pdfbox.cos.COSObject)>($r4) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getObjectId : $l0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObject: long getObjectNumber()>()
org.apache.pdfbox.pdfparser.COSParser.getObjectId : $l0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObject: long getObjectNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getObjectId : $l1 = $l0 << 32
org.apache.pdfbox.pdfparser.COSParser.getObjectId : $l1 = $l0 << 32 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getObjectId : $i2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObject: int getGenerationNumber()>()
org.apache.pdfbox.pdfparser.COSParser.getObjectId : $i2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObject: int getGenerationNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getObjectId : $l3 = (long) $i2
org.apache.pdfbox.pdfparser.COSParser.getObjectId : $l3 = (long) $i2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getObjectId : $l4 = $l1 | $l3
org.apache.pdfbox.pdfparser.COSParser.getObjectId : $l4 = $l1 | $l3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getObjectId : return $l4
org.apache.pdfbox.pdfparser.COSParser.getObjectId : return $l4 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.pdfbox.pdfparser.COSParser.addNewToList : $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : $z2 = interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r5)
org.apache.pdfbox.pdfparser.COSParser.addNewToList : $z2 = interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r5) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : if $z2 != 0
org.apache.pdfbox.pdfparser.COSParser.addNewToList : if $z2 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z0 = interfaceinvoke $r10.<java.util.Queue: boolean isEmpty()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z0 = interfaceinvoke $r10.<java.util.Queue: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z0 == 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r47 = interfaceinvoke $r10.<java.util.Queue: java.lang.Object poll()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r47 = interfaceinvoke $r10.<java.util.Queue: java.lang.Object poll()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r48 = (org.apache.pdfbox.cos.COSBase) $r47
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r48 = (org.apache.pdfbox.cos.COSBase) $r47 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $r48 == null
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $r48 == null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z4 = $r48 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z4 = $r48 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z4 == 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z5 = $r48 instanceof org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z5 = $r48 instanceof org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z5 == 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z5 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z6 = $r48 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z6 = $r48 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z6 == 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z6 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r51 = (org.apache.pdfbox.cos.COSObject) $r48
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r51 = (org.apache.pdfbox.cos.COSObject) $r48 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : l13 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long getObjectId(org.apache.pdfbox.cos.COSObject)>(r51)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : l13 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long getObjectId(org.apache.pdfbox.cos.COSObject)>(r51) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r20 = new org.apache.pdfbox.cos.COSObjectKey
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r20 = new org.apache.pdfbox.cos.COSObjectKey >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $l1 = virtualinvoke r51.<org.apache.pdfbox.cos.COSObject: long getObjectNumber()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $l1 = virtualinvoke r51.<org.apache.pdfbox.cos.COSObject: long getObjectNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $i2 = virtualinvoke r51.<org.apache.pdfbox.cos.COSObject: int getGenerationNumber()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $i2 = virtualinvoke r51.<org.apache.pdfbox.cos.COSObject: int getGenerationNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r20.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>($l1, $i2)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r20.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>($l1, $i2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l13)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l13) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z7 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>($r21)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z7 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>($r21) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z7 != 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z7 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r22 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r22 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r23 = virtualinvoke $r22.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r23 = virtualinvoke $r22.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r24 = interfaceinvoke $r23.<java.util.Map: java.lang.Object get(java.lang.Object)>($r20)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r24 = interfaceinvoke $r23.<java.util.Map: java.lang.Object get(java.lang.Object)>($r20) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r52 = (java.lang.Long) $r24
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r52 = (java.lang.Long) $r24 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if r52 == null
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if r52 == null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $l3 = virtualinvoke r52.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $l3 = virtualinvoke r52.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $b4 = $l3 cmp 0L
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $b4 = $l3 cmp 0L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $b4 == 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $b4 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $l5 = virtualinvoke r52.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $l5 = virtualinvoke r52.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $b6 = $l5 cmp 0L
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $b6 = $l5 cmp 0L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $b6 <= 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $b6 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r41 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r51)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r41 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r51) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : virtualinvoke $r11.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r52, $r41)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : virtualinvoke $r11.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r52, $r41) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= (branch)]
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= $r47 = interfaceinvoke $r10.<java.util.Queue: java.lang.Object poll()>()]
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= $r47 = interfaceinvoke $r10.<java.util.Queue: java.lang.Object poll()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z1 = virtualinvoke $r11.<java.util.TreeMap: boolean isEmpty()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z1 = virtualinvoke $r11.<java.util.TreeMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z1 == 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r15 = virtualinvoke $r11.<java.util.TreeMap: java.lang.Object firstKey()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r15 = virtualinvoke $r11.<java.util.TreeMap: java.lang.Object firstKey()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r16 = virtualinvoke $r11.<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>($r15)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r16 = virtualinvoke $r11.<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>($r15) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r17 = (java.util.List) $r16
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r17 = (java.util.List) $r16 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r56 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r56 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z2 == 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r18 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r18 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r57 = (org.apache.pdfbox.cos.COSObject) $r18
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r57 = (org.apache.pdfbox.cos.COSObject) $r18 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r8 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseObjectDynamically(org.apache.pdfbox.cos.COSObject,boolean)>(r57, 0)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r8 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseObjectDynamically(org.apache.pdfbox.cos.COSObject,boolean)>(r57, 0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r32 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r32 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : interfaceinvoke $r32.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : interfaceinvoke $r32.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r33 = new org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r33 = new org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : specialinvoke $r33.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null)
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : specialinvoke $r33.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = $r33
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = $r33 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.size : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.size : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.size : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.apache.pdfbox.cos.COSArray.size : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.size : return $i0
org.apache.pdfbox.cos.COSArray.size : return $i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i6 = $i5 - 1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i6 = $i5 - 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r18 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>($i6)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r18 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>($i6) >>>>>>>> org.apache.pdfbox.cos.COSArray.get : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.get : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.get : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0)
org.apache.pdfbox.cos.COSArray.get : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.apache.pdfbox.cos.COSArray.get : $r3 = (org.apache.pdfbox.cos.COSBase) $r2
org.apache.pdfbox.cos.COSArray.get : $r3 = (org.apache.pdfbox.cos.COSBase) $r2 >>>>>>>> org.apache.pdfbox.cos.COSArray.get : return $r3
org.apache.pdfbox.cos.COSArray.get : return $r3 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $z3 = $r18 instanceof org.apache.pdfbox.cos.COSInteger
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $z3 = $r18 instanceof org.apache.pdfbox.cos.COSInteger >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $z3 == 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i7 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i7 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i8 = $i7 - 1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i8 = $i7 - 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r19 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase remove(int)>($i8)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r19 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase remove(int)>($i8) >>>>>>>> org.apache.pdfbox.cos.COSArray.remove : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.remove : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.remove : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0)
org.apache.pdfbox.cos.COSArray.remove : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0) >>>>>>>> org.apache.pdfbox.cos.COSArray.remove : $r3 = (org.apache.pdfbox.cos.COSBase) $r2
org.apache.pdfbox.cos.COSArray.remove : $r3 = (org.apache.pdfbox.cos.COSBase) $r2 >>>>>>>> org.apache.pdfbox.cos.COSArray.remove : return $r3
org.apache.pdfbox.cos.COSArray.remove : return $r3 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : r24 = (org.apache.pdfbox.cos.COSInteger) $r19
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : r24 = (org.apache.pdfbox.cos.COSInteger) $r19 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i9 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i9 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i10 = $i9 - 1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i10 = $i9 - 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r20 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>($i10)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r20 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>($i10) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $z4 = $r20 instanceof org.apache.pdfbox.cos.COSInteger
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $z4 = $r20 instanceof org.apache.pdfbox.cos.COSInteger >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $z4 == 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i11 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i11 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i12 = $i11 - 1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i12 = $i11 - 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r21 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase remove(int)>($i12)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r21 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase remove(int)>($i12) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : r2 = (org.apache.pdfbox.cos.COSInteger) $r21
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : r2 = (org.apache.pdfbox.cos.COSInteger) $r21 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r22 = new org.apache.pdfbox.cos.COSObjectKey
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r22 = new org.apache.pdfbox.cos.COSObjectKey >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $l13 = virtualinvoke r2.<org.apache.pdfbox.cos.COSInteger: long longValue()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $l13 = virtualinvoke r2.<org.apache.pdfbox.cos.COSInteger: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i14 = virtualinvoke r24.<org.apache.pdfbox.cos.COSInteger: int intValue()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i14 = virtualinvoke r24.<org.apache.pdfbox.cos.COSInteger: int intValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : specialinvoke $r22.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>($l13, $i14)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : specialinvoke $r22.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>($l13, $i14) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : r23 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)>($r22)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : r23 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)>($r22) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : goto [?= (branch)]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if r8 == null
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if r8 == null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : virtualinvoke r57.<org.apache.pdfbox.cos.COSObject: void setObject(org.apache.pdfbox.cos.COSBase)>(r8)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : virtualinvoke r57.<org.apache.pdfbox.cos.COSObject: void setObject(org.apache.pdfbox.cos.COSBase)>(r8) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,org.apache.pdfbox.cos.COSBase,java.util.Set)>($r10, r8, $r13)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,org.apache.pdfbox.cos.COSBase,java.util.Set)>($r10, r8, $r13) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $l0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long getObjectId(org.apache.pdfbox.cos.COSObject)>(r57)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $l0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long getObjectId(org.apache.pdfbox.cos.COSObject)>(r57) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>($r19)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>($r19) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= $z0 = interfaceinvoke $r10.<java.util.Queue: boolean isEmpty()>()]
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= $z0 = interfaceinvoke $r10.<java.util.Queue: boolean isEmpty()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r45 = (org.apache.pdfbox.cos.COSDictionary) $r48
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r45 = (org.apache.pdfbox.cos.COSDictionary) $r48 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r46 = virtualinvoke $r45.<org.apache.pdfbox.cos.COSDictionary: java.util.Collection getValues()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r46 = virtualinvoke $r45.<org.apache.pdfbox.cos.COSDictionary: java.util.Collection getValues()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,java.util.Collection,java.util.Set)>($r10, $r46, $r13)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,java.util.Collection,java.util.Set)>($r10, $r46, $r13) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r43 = (org.apache.pdfbox.cos.COSArray) $r48
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r43 = (org.apache.pdfbox.cos.COSArray) $r48 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r49 = virtualinvoke $r43.<org.apache.pdfbox.cos.COSArray: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r49 = virtualinvoke $r43.<org.apache.pdfbox.cos.COSArray: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z9 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z9 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z9 == 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z9 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r44 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r44 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r50 = (org.apache.pdfbox.cos.COSBase) $r44
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r50 = (org.apache.pdfbox.cos.COSBase) $r44 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,org.apache.pdfbox.cos.COSBase,java.util.Set)>($r10, r50, $r13)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,org.apache.pdfbox.cos.COSBase,java.util.Set)>($r10, r50, $r13) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= $z9 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= $z9 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46)
org.apache.pdfbox.cos.COSNumber.get : $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46) >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : if $i1 != -1
org.apache.pdfbox.cos.COSNumber.get : if $i1 != -1 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $r1 = new org.apache.pdfbox.cos.COSFloat
org.apache.pdfbox.cos.COSNumber.get : $r1 = new org.apache.pdfbox.cos.COSFloat >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : specialinvoke $r1.<org.apache.pdfbox.cos.COSFloat: void <init>(java.lang.String)>(r0)
org.apache.pdfbox.cos.COSNumber.get : specialinvoke $r1.<org.apache.pdfbox.cos.COSFloat: void <init>(java.lang.String)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $r1 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value>
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $r1 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value> >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : f3 = virtualinvoke $r1.<java.math.BigDecimal: float floatValue()>()
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : f3 = virtualinvoke $r1.<java.math.BigDecimal: float floatValue()>() >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $r2 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value>
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $r2 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value> >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : d0 = virtualinvoke $r2.<java.math.BigDecimal: double doubleValue()>()
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : d0 = virtualinvoke $r2.<java.math.BigDecimal: double doubleValue()>() >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : z0 = 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : z0 = 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b0 = f3 cmpl #-InfinityF
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b0 = f3 cmpl #-InfinityF >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b0 == 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b3 = f3 cmpl #InfinityF
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b3 = f3 cmpl #InfinityF >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b3 != 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b3 != 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b4 = f3 cmpl 0.0F
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b4 = f3 cmpl 0.0F >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b4 != 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b4 != 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b5 = d0 cmpl 0.0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b5 = d0 cmpl 0.0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b5 == 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b5 == 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if z0 == 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : return $r1
org.apache.pdfbox.cos.COSNumber.get : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>()
org.apache.pdfbox.cos.COSNumber.get : $r2 = virtualinvoke r0.<java.lang.String: java.lang.String toLowerCase()>() >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $i2 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(101)
org.apache.pdfbox.cos.COSNumber.get : $i2 = virtualinvoke $r2.<java.lang.String: int indexOf(int)>(101) >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : if $i2 != -1
org.apache.pdfbox.cos.COSNumber.get : if $i2 != -1 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)
org.apache.pdfbox.cos.COSNumber.get : $c3 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : if $c3 != 43
org.apache.pdfbox.cos.COSNumber.get : if $c3 != 43 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0)
org.apache.pdfbox.cos.COSNumber.get : $l4 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $r3 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l4)
org.apache.pdfbox.cos.COSNumber.get : $r3 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l4) >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : return $r3
org.apache.pdfbox.cos.COSNumber.get : return $r3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r47 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r47 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r46 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r46 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r48 = virtualinvoke r60.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r46)
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r48 = virtualinvoke r60.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r46) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $i11 = lengthof $r48
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $i11 = lengthof $r48 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : interfaceinvoke $r47.<org.apache.pdfbox.io.RandomAccessRead: void rewind(int)>($i11)
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : interfaceinvoke $r47.<org.apache.pdfbox.io.RandomAccessRead: void rewind(int)>($i11) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $z2 = r59 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $z2 = r59 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $z2 == 0
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r55 = (org.apache.pdfbox.cos.COSDictionary) r59
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r55 = (org.apache.pdfbox.cos.COSDictionary) r59 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : r4 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSStream parseCOSStream(org.apache.pdfbox.cos.COSDictionary)>($r55)
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : r4 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSStream parseCOSStream(org.apache.pdfbox.cos.COSDictionary)>($r55) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : r2 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSStream createCOSStream(org.apache.pdfbox.cos.COSDictionary)>(r1)
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : r2 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSStream createCOSStream(org.apache.pdfbox.cos.COSDictionary)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : $r5 = new org.apache.pdfbox.cos.COSStream
org.apache.pdfbox.cos.COSDocument.createCOSStream : $r5 = new org.apache.pdfbox.cos.COSStream >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : $r6 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSDocument.createCOSStream : $r6 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : specialinvoke $r5.<org.apache.pdfbox.cos.COSStream: void <init>(org.apache.pdfbox.io.ScratchFile)>($r6)
org.apache.pdfbox.cos.COSDocument.createCOSStream : specialinvoke $r5.<org.apache.pdfbox.cos.COSStream: void <init>(org.apache.pdfbox.io.ScratchFile)>($r6) >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : $r7 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Set entrySet()>()
org.apache.pdfbox.cos.COSDocument.createCOSStream : $r7 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Set entrySet()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSDocument.createCOSStream : r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.cos.COSDocument.createCOSStream : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : if $z0 == 0
org.apache.pdfbox.cos.COSDocument.createCOSStream : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.cos.COSDocument.createCOSStream : $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : r4 = (java.util.Map$Entry) $r8
org.apache.pdfbox.cos.COSDocument.createCOSStream : r4 = (java.util.Map$Entry) $r8 >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.cos.COSDocument.createCOSStream : $r9 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : $r10 = (org.apache.pdfbox.cos.COSName) $r9
org.apache.pdfbox.cos.COSDocument.createCOSStream : $r10 = (org.apache.pdfbox.cos.COSName) $r9 >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.pdfbox.cos.COSDocument.createCOSStream : $r11 = interfaceinvoke r4.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : $r12 = (org.apache.pdfbox.cos.COSBase) $r11
org.apache.pdfbox.cos.COSDocument.createCOSStream : $r12 = (org.apache.pdfbox.cos.COSBase) $r11 >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : virtualinvoke $r5.<org.apache.pdfbox.cos.COSStream: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r10, $r12)
org.apache.pdfbox.cos.COSDocument.createCOSStream : virtualinvoke $r5.<org.apache.pdfbox.cos.COSStream: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r10, $r12) >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.cos.COSDocument.createCOSStream : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.cos.COSDocument.createCOSStream : return $r5
org.apache.pdfbox.cos.COSDocument.createCOSStream : return $r5 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>()
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipWhiteSpaces()>()
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipWhiteSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipWhiteSpaces : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.skipWhiteSpaces : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipWhiteSpaces : i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.skipWhiteSpaces : i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipWhiteSpaces : if 32 != i0
org.apache.pdfbox.pdfparser.BaseParser.skipWhiteSpaces : if 32 != i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipWhiteSpaces : if 13 != i0
org.apache.pdfbox.pdfparser.BaseParser.skipWhiteSpaces : if 13 != i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipWhiteSpaces : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.skipWhiteSpaces : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipWhiteSpaces : i1 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.skipWhiteSpaces : i1 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipWhiteSpaces : if 10 == i1
org.apache.pdfbox.pdfparser.BaseParser.skipWhiteSpaces : if 10 == i1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LENGTH>
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LENGTH> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $r8 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r7)
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $r8 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r7) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $r10 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSName getCOSName(org.apache.pdfbox.cos.COSName)>($r9)
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $r10 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSName getCOSName(org.apache.pdfbox.cos.COSName)>($r9) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getCOSName : return null
org.apache.pdfbox.cos.COSDictionary.getCOSName : return null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : r3 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSNumber getLength(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSName)>($r8, $r10)
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : r3 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSNumber getLength(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSName)>($r8, $r10) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getLength : if r1 != null
org.apache.pdfbox.pdfparser.COSParser.getLength : if r1 != null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getLength : $z1 = r1 instanceof org.apache.pdfbox.cos.COSNumber
org.apache.pdfbox.pdfparser.COSParser.getLength : $z1 = r1 instanceof org.apache.pdfbox.cos.COSNumber >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getLength : if $z1 == 0
org.apache.pdfbox.pdfparser.COSParser.getLength : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getLength : r29 = (org.apache.pdfbox.cos.COSNumber) r1
org.apache.pdfbox.pdfparser.COSParser.getLength : r29 = (org.apache.pdfbox.cos.COSNumber) r1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getLength : goto [?= return r29]
org.apache.pdfbox.pdfparser.COSParser.getLength : goto [?= return r29] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getLength : return r29
org.apache.pdfbox.pdfparser.COSParser.getLength : return r29 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : if r3 != null
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : if r3 != null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : r4 = virtualinvoke r2.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createRawOutputStream()>()
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : r4 = virtualinvoke r2.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createRawOutputStream()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : if r3 == null
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : if r3 == null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $l6 = virtualinvoke r3.<org.apache.pdfbox.cos.COSNumber: long longValue()>()
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $l6 = virtualinvoke r3.<org.apache.pdfbox.cos.COSNumber: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $z4 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean validateStreamLength(long)>($l6)
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $z4 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean validateStreamLength(long)>($l6) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : z1 = 1
org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : z1 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : $r1 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : $r1 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : l1 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>()
org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : l1 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : l2 = l1 + l0
org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : l2 = l1 + l0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : $l3 = r0.<org.apache.pdfbox.pdfparser.COSParser: long fileLen>
org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : $l3 = r0.<org.apache.pdfbox.pdfparser.COSParser: long fileLen> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : $b4 = l2 cmp $l3
org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : $b4 = l2 cmp $l3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : if $b4 <= 0
org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : if $b4 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l2)
org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : $r3 = <org.apache.pdfbox.pdfparser.COSParser: byte[] ENDSTREAM>
org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : $r3 = <org.apache.pdfbox.pdfparser.COSParser: byte[] ENDSTREAM> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isString(byte[])>($r3)
org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isString(byte[])>($r3) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : if $z0 != 0
org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l1)
org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : return z1
org.apache.pdfbox.pdfparser.COSParser.validateStreamLength : return z1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : if $z4 == 0
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void readValidStream(java.io.OutputStream,org.apache.pdfbox.cos.COSNumber)>(r4, r3)
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void readValidStream(java.io.OutputStream,org.apache.pdfbox.cos.COSNumber)>(r4, r3) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.readValidStream : l6 = virtualinvoke r2.<org.apache.pdfbox.cos.COSNumber: long longValue()>()
org.apache.pdfbox.pdfparser.COSParser.readValidStream : l6 = virtualinvoke r2.<org.apache.pdfbox.cos.COSNumber: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.readValidStream : $b2 = l6 cmp 0L
org.apache.pdfbox.pdfparser.COSParser.readValidStream : $b2 = l6 cmp 0L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.readValidStream : if $b2 <= 0
org.apache.pdfbox.pdfparser.COSParser.readValidStream : if $b2 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.readValidStream : $b3 = l6 cmp 8192L
org.apache.pdfbox.pdfparser.COSParser.readValidStream : $b3 = l6 cmp 8192L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.readValidStream : if $b3 <= 0
org.apache.pdfbox.pdfparser.COSParser.readValidStream : if $b3 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.readValidStream : $i7 = (int) l6
org.apache.pdfbox.pdfparser.COSParser.readValidStream : $i7 = (int) l6 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.readValidStream : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.readValidStream : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.readValidStream : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: byte[] streamCopyBuf>
org.apache.pdfbox.pdfparser.COSParser.readValidStream : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: byte[] streamCopyBuf> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.readValidStream : i1 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: int read(byte[],int,int)>($r3, 0, $i7)
org.apache.pdfbox.pdfparser.COSParser.readValidStream : i1 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: int read(byte[],int,int)>($r3, 0, $i7) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.readValidStream : if i1 > 0
org.apache.pdfbox.pdfparser.COSParser.readValidStream : if i1 > 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.readValidStream : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: byte[] streamCopyBuf>
org.apache.pdfbox.pdfparser.COSParser.readValidStream : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: byte[] streamCopyBuf> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.readValidStream : virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>($r5, 0, i1)
org.apache.pdfbox.pdfparser.COSParser.readValidStream : virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>($r5, 0, i1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.readValidStream : $l4 = (long) i1
org.apache.pdfbox.pdfparser.COSParser.readValidStream : $l4 = (long) i1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.readValidStream : l6 = l6 - $l4
org.apache.pdfbox.pdfparser.COSParser.readValidStream : l6 = l6 - $l4 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.readValidStream : goto [?= $b2 = l6 cmp 0L]
org.apache.pdfbox.pdfparser.COSParser.readValidStream : goto [?= $b2 = l6 cmp 0L] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : goto [?= virtualinvoke r4.<java.io.OutputStream: void close()>()]
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : goto [?= virtualinvoke r4.<java.io.OutputStream: void close()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : virtualinvoke r4.<java.io.OutputStream: void close()>()
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : virtualinvoke r4.<java.io.OutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : goto [?= r50 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>()]
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : goto [?= r50 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : r50 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>()
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : r50 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $z0 = virtualinvoke r50.<java.lang.String: boolean equals(java.lang.Object)>("endobj")
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $z0 = virtualinvoke r50.<java.lang.String: boolean equals(java.lang.Object)>("endobj") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : if $z0 == 0
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $i0 = virtualinvoke r50.<java.lang.String: int length()>()
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $i0 = virtualinvoke r50.<java.lang.String: int length()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : if $i0 <= 9
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : if $i0 <= 9 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $z6 = virtualinvoke r50.<java.lang.String: boolean equals(java.lang.Object)>("endstream")
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : $z6 = virtualinvoke r50.<java.lang.String: boolean equals(java.lang.Object)>("endstream") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : if $z6 != 0
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : if $z6 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : return r2
org.apache.pdfbox.pdfparser.COSParser.parseCOSStream : return r2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r56 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdmodel.encryption.SecurityHandler securityHandler>
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r56 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdmodel.encryption.SecurityHandler securityHandler> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $r56 == null
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $r56 == null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : r59 = r4
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : r59 = r4 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : goto [?= virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>()]
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : goto [?= virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $z3 = virtualinvoke r60.<java.lang.String: boolean startsWith(java.lang.String)>("endobj")
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $z3 = virtualinvoke r60.<java.lang.String: boolean startsWith(java.lang.String)>("endobj") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $z3 != 0
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $z3 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= return]
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= return] >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INFO>
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INFO> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : r3 = virtualinvoke r21.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r8)
org.apache.pdfbox.pdfparser.PDFParser.initialParse : r3 = virtualinvoke r21.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r8) >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z4 = r3 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z4 = r3 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z4 == 0
org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r9 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r9 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : virtualinvoke $r9.<org.apache.pdfbox.cos.COSDocument: void setDecrypted()>()
org.apache.pdfbox.pdfparser.PDFParser.initialParse : virtualinvoke $r9.<org.apache.pdfbox.cos.COSDocument: void setDecrypted()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.setDecrypted : r0.<org.apache.pdfbox.cos.COSDocument: boolean isDecrypted> = 1
org.apache.pdfbox.cos.COSDocument.setDecrypted : r0.<org.apache.pdfbox.cos.COSDocument: boolean isDecrypted> = 1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean initialParseDone> = 1
org.apache.pdfbox.pdfparser.PDFParser.initialParse : r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean initialParseDone> = 1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : $r2 = r0.<org.apache.pdfbox.pdfparser.PDFParser: java.io.InputStream keyStoreInputStream>
org.apache.pdfbox.pdfparser.PDFParser.parse : $r2 = r0.<org.apache.pdfbox.pdfparser.PDFParser: java.io.InputStream keyStoreInputStream> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.Closeable)>($r2)
org.apache.pdfbox.pdfparser.PDFParser.parse : staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.Closeable)>($r2) >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : goto [?= return]
org.apache.pdfbox.pdfparser.PDFParser.parse : goto [?= return] >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r9 = virtualinvoke $r8.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdmodel.PDDocument getPDDocument()>()
org.apache.pdfbox.pdmodel.PDDocument.load : $r9 = virtualinvoke $r8.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdmodel.PDDocument getPDDocument()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r2 = new org.apache.pdfbox.pdmodel.PDDocument
org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r2 = new org.apache.pdfbox.pdmodel.PDDocument >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument getDocument()>()
org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument getDocument()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getDocument : $r1 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.getDocument : $r1 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getDocument : if $r1 != null
org.apache.pdfbox.pdfparser.COSParser.getDocument : if $r1 != null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getDocument : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.getDocument : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getDocument : return $r2
org.apache.pdfbox.pdfparser.COSParser.getDocument : return $r2 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r5 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r5 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r4 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdmodel.encryption.AccessPermission accessPermission>
org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r4 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdmodel.encryption.AccessPermission accessPermission> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : specialinvoke $r2.<org.apache.pdfbox.pdmodel.PDDocument: void <init>(org.apache.pdfbox.cos.COSDocument,org.apache.pdfbox.io.RandomAccessRead,org.apache.pdfbox.pdmodel.encryption.AccessPermission)>($r3, $r5, $r4)
org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : specialinvoke $r2.<org.apache.pdfbox.pdmodel.PDDocument: void <init>(org.apache.pdfbox.cos.COSDocument,org.apache.pdfbox.io.RandomAccessRead,org.apache.pdfbox.pdmodel.encryption.AccessPermission)>($r3, $r5, $r4) >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r6 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdmodel.encryption.PDEncryption encryption>
org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r6 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdmodel.encryption.PDEncryption encryption> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDDocument: void setEncryptionDictionary(org.apache.pdfbox.pdmodel.encryption.PDEncryption)>($r6)
org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDDocument: void setEncryptionDictionary(org.apache.pdfbox.pdmodel.encryption.PDEncryption)>($r6) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.setEncryptionDictionary : r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryption encryption> = r1
org.apache.pdfbox.pdmodel.PDDocument.setEncryptionDictionary : r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryption encryption> = r1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : return $r2
org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : return $r9
org.apache.pdfbox.pdmodel.PDDocument.load : return $r9 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : return $r3
org.apache.pdfbox.pdmodel.PDDocument.load : return $r3 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r1 = virtualinvoke r0.<org.apache.pdfbox.rendering.PDFRenderer: java.awt.image.BufferedImage renderImage(int,float)>(i0, 1.0F)
org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r1 = virtualinvoke r0.<org.apache.pdfbox.rendering.PDFRenderer: java.awt.image.BufferedImage renderImage(int,float)>(i0, 1.0F) >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r1 = <org.apache.pdfbox.rendering.ImageType: org.apache.pdfbox.rendering.ImageType RGB>
org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r1 = <org.apache.pdfbox.rendering.ImageType: org.apache.pdfbox.rendering.ImageType RGB> >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r2 = virtualinvoke r0.<org.apache.pdfbox.rendering.PDFRenderer: java.awt.image.BufferedImage renderImage(int,float,org.apache.pdfbox.rendering.ImageType)>(i0, f0, $r1)
org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r2 = virtualinvoke r0.<org.apache.pdfbox.rendering.PDFRenderer: java.awt.image.BufferedImage renderImage(int,float,org.apache.pdfbox.rendering.ImageType)>(i0, f0, $r1) >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r7 = r0.<org.apache.pdfbox.rendering.PDFRenderer: org.apache.pdfbox.pdmodel.PDDocument document>
org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r7 = r0.<org.apache.pdfbox.rendering.PDFRenderer: org.apache.pdfbox.pdmodel.PDDocument document> >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : r2 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDPage getPage(int)>(i0)
org.apache.pdfbox.rendering.PDFRenderer.renderImage : r2 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDPage getPage(int)>(i0) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getPage : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog getDocumentCatalog()>()
org.apache.pdfbox.pdmodel.PDDocument.getPage : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog getDocumentCatalog()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r4 = (org.apache.pdfbox.cos.COSObject) r5
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r4 = (org.apache.pdfbox.cos.COSObject) r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getPage : $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: org.apache.pdfbox.pdmodel.PDPageTree getPages()>()
org.apache.pdfbox.pdmodel.PDDocument.getPage : $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: org.apache.pdfbox.pdmodel.PDPageTree getPages()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getPage : $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.pdmodel.PDPage get(int)>(i0)
org.apache.pdfbox.pdmodel.PDDocument.getPage : $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.pdmodel.PDPage get(int)>(i0) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $i1 = i0 + 1
org.apache.pdfbox.pdmodel.PDPageTree.get : $i1 = i0 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary root>
org.apache.pdfbox.pdmodel.PDPageTree.get : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary root> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : r1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary get(int,org.apache.pdfbox.cos.COSDictionary,int)>($i1, $r3, 0)
org.apache.pdfbox.pdmodel.PDPageTree.get : r1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary get(int,org.apache.pdfbox.cos.COSDictionary,int)>($i1, $r3, 0) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : if i0 >= 0
org.apache.pdfbox.pdmodel.PDPageTree.get : if i0 >= 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: boolean isPageTreeNode(org.apache.pdfbox.cos.COSDictionary)>(r1)
org.apache.pdfbox.pdmodel.PDPageTree.get : $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: boolean isPageTreeNode(org.apache.pdfbox.cos.COSDictionary)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $r3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSName getCOSName(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $r3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSName getCOSName(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PAGES>
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PAGES> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : if $r3 == $r4
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : if $r3 == $r4 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $z1 = 1
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $z1 = 1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : goto [?= return $z1]
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : goto [?= return $z1] >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : return $z1
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : return $z1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : if $z0 == 0
org.apache.pdfbox.pdmodel.PDPageTree.get : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COUNT>
org.apache.pdfbox.pdmodel.PDPageTree.get : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COUNT> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : i1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r5, 0)
org.apache.pdfbox.pdmodel.PDPageTree.get : i1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r5, 0) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $i3 = i5 + i1
org.apache.pdfbox.pdmodel.PDPageTree.get : $i3 = i5 + i1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : if i0 > $i3
org.apache.pdfbox.pdmodel.PDPageTree.get : if i0 > $i3 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r11 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: java.util.List getKids(org.apache.pdfbox.cos.COSDictionary)>(r1)
org.apache.pdfbox.pdmodel.PDPageTree.get : $r11 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: java.util.List getKids(org.apache.pdfbox.cos.COSDictionary)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r4 = new java.util.ArrayList
org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r4 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : specialinvoke $r4.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.pdmodel.PDPageTree.getKids : specialinvoke $r4.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS>
org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r6 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r6 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : r3 = (org.apache.pdfbox.cos.COSArray) $r6
org.apache.pdfbox.pdmodel.PDPageTree.getKids : r3 = (org.apache.pdfbox.cos.COSArray) $r6 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : if r3 != null
org.apache.pdfbox.pdmodel.PDPageTree.getKids : if r3 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : i1 = 0
org.apache.pdfbox.pdmodel.PDPageTree.getKids : i1 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : i0 = virtualinvoke r3.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.pdmodel.PDPageTree.getKids : i0 = virtualinvoke r3.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : if i1 >= i0
org.apache.pdfbox.pdmodel.PDPageTree.getKids : if i1 >= i0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r7 = virtualinvoke r3.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(i1)
org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r7 = virtualinvoke r3.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(i1) >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.getObject : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0)
org.apache.pdfbox.cos.COSArray.getObject : r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $z0 = r4 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSArray.getObject : $z0 = r4 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : if $z0 == 0
org.apache.pdfbox.cos.COSArray.getObject : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $r3 = (org.apache.pdfbox.cos.COSObject) r4
org.apache.pdfbox.cos.COSArray.getObject : $r3 = (org.apache.pdfbox.cos.COSObject) r4 >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()
org.apache.pdfbox.cos.COSArray.getObject : r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $z1 = r4 instanceof org.apache.pdfbox.cos.COSNull
org.apache.pdfbox.cos.COSArray.getObject : $z1 = r4 instanceof org.apache.pdfbox.cos.COSNull >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : if $z1 == 0
org.apache.pdfbox.cos.COSArray.getObject : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $r2 = (org.apache.pdfbox.cos.COSBase) r4
org.apache.pdfbox.cos.COSArray.getObject : $r2 = (org.apache.pdfbox.cos.COSBase) r4 >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : return $r2
org.apache.pdfbox.cos.COSArray.getObject : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r8 = (org.apache.pdfbox.cos.COSDictionary) $r7
org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r8 = (org.apache.pdfbox.cos.COSDictionary) $r7 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r8)
org.apache.pdfbox.pdmodel.PDPageTree.getKids : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r8) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : i1 = i1 + 1
org.apache.pdfbox.pdmodel.PDPageTree.getKids : i1 = i1 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : goto [?= (branch)]
org.apache.pdfbox.pdmodel.PDPageTree.getKids : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : return $r4
org.apache.pdfbox.pdmodel.PDPageTree.getKids : return $r4 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : r2 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.pdmodel.PDPageTree.get : r2 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdmodel.PDPageTree.get : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : if $z1 == 0
org.apache.pdfbox.pdmodel.PDPageTree.get : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdmodel.PDPageTree.get : $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : r3 = (org.apache.pdfbox.cos.COSDictionary) $r13
org.apache.pdfbox.pdmodel.PDPageTree.get : r3 = (org.apache.pdfbox.cos.COSDictionary) $r13 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $z2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: boolean isPageTreeNode(org.apache.pdfbox.cos.COSDictionary)>(r3)
org.apache.pdfbox.pdmodel.PDPageTree.get : $z2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: boolean isPageTreeNode(org.apache.pdfbox.cos.COSDictionary)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS>
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $z0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: boolean containsKey(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $z0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: boolean containsKey(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : if $z0 == 0
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $z1 = 0
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $z1 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : if $z2 == 0
org.apache.pdfbox.pdmodel.PDPageTree.get : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : i5 = i5 + 1
org.apache.pdfbox.pdmodel.PDPageTree.get : i5 = i5 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : if i0 != i5
org.apache.pdfbox.pdmodel.PDPageTree.get : if i0 != i5 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r14 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary get(int,org.apache.pdfbox.cos.COSDictionary,int)>(i0, r3, i5)
org.apache.pdfbox.pdmodel.PDPageTree.get : $r14 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary get(int,org.apache.pdfbox.cos.COSDictionary,int)>(i0, r3, i5) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : if i5 != i0
org.apache.pdfbox.pdmodel.PDPageTree.get : if i5 != i0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : return r1
org.apache.pdfbox.pdmodel.PDPageTree.get : return r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : return $r14
org.apache.pdfbox.pdmodel.PDPageTree.get : return $r14 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : staticinvoke <org.apache.pdfbox.pdmodel.PDPageTree: void sanitizeType(org.apache.pdfbox.cos.COSDictionary)>(r1)
org.apache.pdfbox.pdmodel.PDPageTree.get : staticinvoke <org.apache.pdfbox.pdmodel.PDPageTree: void sanitizeType(org.apache.pdfbox.cos.COSDictionary)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>
org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSName getCOSName(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSName getCOSName(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : if r1 != null
org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : if r1 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PAGE>
org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PAGE> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : $z0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : $z0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : if $z0 != 0
org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r4 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.pdmodel.PDDocument document>
org.apache.pdfbox.pdmodel.PDPageTree.get : $r4 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.pdmodel.PDDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : if $r4 == null
org.apache.pdfbox.pdmodel.PDPageTree.get : if $r4 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r6 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.pdmodel.PDDocument document>
org.apache.pdfbox.pdmodel.PDPageTree.get : $r6 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.pdmodel.PDDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r7 = virtualinvoke $r6.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.ResourceCache getResourceCache()>()
org.apache.pdfbox.pdmodel.PDPageTree.get : $r7 = virtualinvoke $r6.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.ResourceCache getResourceCache()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getResourceCache : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.ResourceCache resourceCache>
org.apache.pdfbox.pdmodel.PDDocument.getResourceCache : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.ResourceCache resourceCache> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getResourceCache : return $r1
org.apache.pdfbox.pdmodel.PDDocument.getResourceCache : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : goto [?= $r5 = new org.apache.pdfbox.pdmodel.PDPage]
org.apache.pdfbox.pdmodel.PDPageTree.get : goto [?= $r5 = new org.apache.pdfbox.pdmodel.PDPage] >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r5 = new org.apache.pdfbox.pdmodel.PDPage
org.apache.pdfbox.pdmodel.PDPageTree.get : $r5 = new org.apache.pdfbox.pdmodel.PDPage >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : specialinvoke $r5.<org.apache.pdfbox.pdmodel.PDPage: void <init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)>(r1, $r7)
org.apache.pdfbox.pdmodel.PDPageTree.get : specialinvoke $r5.<org.apache.pdfbox.pdmodel.PDPage: void <init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)>(r1, $r7) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : return $r5
org.apache.pdfbox.pdmodel.PDPageTree.get : return $r5 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getPage : return $r3
org.apache.pdfbox.pdmodel.PDDocument.getPage : return $r3 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : r3 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle getCropBox()>()
org.apache.pdfbox.rendering.PDFRenderer.renderImage : r3 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle getCropBox()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getCropBox : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page>
org.apache.pdfbox.pdmodel.PDPage.getCropBox : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getCropBox : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CROP_BOX>
org.apache.pdfbox.pdmodel.PDPage.getCropBox : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CROP_BOX> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getCropBox : $r4 = staticinvoke <org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSBase getInheritableAttribute(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)>($r3, $r2)
org.apache.pdfbox.pdmodel.PDPage.getCropBox : $r4 = staticinvoke <org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSBase getInheritableAttribute(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)>($r3, $r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getCropBox : r1 = (org.apache.pdfbox.cos.COSArray) $r4
org.apache.pdfbox.pdmodel.PDPage.getCropBox : r1 = (org.apache.pdfbox.cos.COSArray) $r4 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getCropBox : if r1 == null
org.apache.pdfbox.pdmodel.PDPage.getCropBox : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getCropBox : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle getMediaBox()>()
org.apache.pdfbox.pdmodel.PDPage.getCropBox : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle getMediaBox()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMediaBox : $r2 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle mediaBox>
org.apache.pdfbox.pdmodel.PDPage.getMediaBox : $r2 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle mediaBox> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMediaBox : if $r2 != null
org.apache.pdfbox.pdmodel.PDPage.getMediaBox : if $r2 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMediaBox : $r7 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page>
org.apache.pdfbox.pdmodel.PDPage.getMediaBox : $r7 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMediaBox : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName MEDIA_BOX>
org.apache.pdfbox.pdmodel.PDPage.getMediaBox : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName MEDIA_BOX> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMediaBox : $r8 = staticinvoke <org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSBase getInheritableAttribute(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)>($r7, $r6)
org.apache.pdfbox.pdmodel.PDPage.getMediaBox : $r8 = staticinvoke <org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSBase getInheritableAttribute(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)>($r7, $r6) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : return r2
org.apache.pdfbox.pdmodel.PDPageTree.getInheritableAttribute : return r2 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMediaBox : r1 = (org.apache.pdfbox.cos.COSArray) $r8
org.apache.pdfbox.pdmodel.PDPage.getMediaBox : r1 = (org.apache.pdfbox.cos.COSArray) $r8 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMediaBox : if r1 == null
org.apache.pdfbox.pdmodel.PDPage.getMediaBox : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMediaBox : $r9 = new org.apache.pdfbox.pdmodel.common.PDRectangle
org.apache.pdfbox.pdmodel.PDPage.getMediaBox : $r9 = new org.apache.pdfbox.pdmodel.common.PDRectangle >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMediaBox : specialinvoke $r9.<org.apache.pdfbox.pdmodel.common.PDRectangle: void <init>(org.apache.pdfbox.cos.COSArray)>(r1)
org.apache.pdfbox.pdmodel.PDPage.getMediaBox : specialinvoke $r9.<org.apache.pdfbox.pdmodel.common.PDRectangle: void <init>(org.apache.pdfbox.cos.COSArray)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSArray.toFloatArray : $i0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.cos.COSArray.toFloatArray : $i0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.toFloatArray : r1 = newarray (float)[$i0]
org.apache.pdfbox.cos.COSArray.toFloatArray : r1 = newarray (float)[$i0] >>>>>>>> org.apache.pdfbox.cos.COSArray.toFloatArray : i2 = 0
org.apache.pdfbox.cos.COSArray.toFloatArray : i2 = 0 >>>>>>>> org.apache.pdfbox.cos.COSArray.toFloatArray : $i1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.cos.COSArray.toFloatArray : $i1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.toFloatArray : if i2 >= $i1
org.apache.pdfbox.cos.COSArray.toFloatArray : if i2 >= $i1 >>>>>>>> org.apache.pdfbox.cos.COSArray.toFloatArray : $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(i2)
org.apache.pdfbox.cos.COSArray.toFloatArray : $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(i2) >>>>>>>> org.apache.pdfbox.cos.COSArray.toFloatArray : $r3 = (org.apache.pdfbox.cos.COSNumber) $r2
org.apache.pdfbox.cos.COSArray.toFloatArray : $r3 = (org.apache.pdfbox.cos.COSNumber) $r2 >>>>>>>> org.apache.pdfbox.cos.COSArray.toFloatArray : $f0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSNumber: float floatValue()>()
org.apache.pdfbox.cos.COSArray.toFloatArray : $f0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSNumber: float floatValue()>() >>>>>>>> org.apache.pdfbox.cos.COSFloat.floatValue : $r1 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value>
org.apache.pdfbox.cos.COSFloat.floatValue : $r1 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value> >>>>>>>> org.apache.pdfbox.cos.COSFloat.floatValue : $f0 = virtualinvoke $r1.<java.math.BigDecimal: float floatValue()>()
org.apache.pdfbox.cos.COSFloat.floatValue : $f0 = virtualinvoke $r1.<java.math.BigDecimal: float floatValue()>() >>>>>>>> org.apache.pdfbox.cos.COSFloat.floatValue : return $f0
org.apache.pdfbox.cos.COSFloat.floatValue : return $f0 >>>>>>>> org.apache.pdfbox.cos.COSArray.toFloatArray : r1[i2] = $f0
org.apache.pdfbox.cos.COSArray.toFloatArray : r1[i2] = $f0 >>>>>>>> org.apache.pdfbox.cos.COSArray.toFloatArray : i2 = i2 + 1
org.apache.pdfbox.cos.COSArray.toFloatArray : i2 = i2 + 1 >>>>>>>> org.apache.pdfbox.cos.COSArray.toFloatArray : goto [?= $i1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: int size()>()]
org.apache.pdfbox.cos.COSArray.toFloatArray : goto [?= $i1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: int size()>()] >>>>>>>> org.apache.pdfbox.cos.COSArray.toFloatArray : return r1
org.apache.pdfbox.cos.COSArray.toFloatArray : return r1 >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(46)
org.apache.pdfbox.cos.COSFloat.removeNullDigits : $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(46) >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $i0 <= -1
org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $i0 <= -1 >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".0")
org.apache.pdfbox.cos.COSFloat.removeNullDigits : $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".0") >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $z0 != 0
org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $z0 != 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : return r1
org.apache.pdfbox.cos.COSFloat.removeNullDigits : return r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMediaBox : r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle mediaBox> = $r9
org.apache.pdfbox.pdmodel.PDPage.getMediaBox : r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle mediaBox> = $r9 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMediaBox : $r10 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle mediaBox>
org.apache.pdfbox.pdmodel.PDPage.getMediaBox : $r10 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle mediaBox> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMediaBox : if $r10 != null
org.apache.pdfbox.pdmodel.PDPage.getMediaBox : if $r10 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMediaBox : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle mediaBox>
org.apache.pdfbox.pdmodel.PDPage.getMediaBox : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle mediaBox> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMediaBox : return $r3
org.apache.pdfbox.pdmodel.PDPage.getMediaBox : return $r3 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getCropBox : return $r5
org.apache.pdfbox.pdmodel.PDPage.getCropBox : return $r5 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : f1 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getWidth()>()
org.apache.pdfbox.rendering.PDFRenderer.renderImage : f1 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getWidth()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getWidth : $f0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getUpperRightX()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.getWidth : $f0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getUpperRightX()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightX : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: org.apache.pdfbox.cos.COSArray rectArray>
org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightX : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: org.apache.pdfbox.cos.COSArray rectArray> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightX : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>(2)
org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightX : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>(2) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightX : $r3 = (org.apache.pdfbox.cos.COSNumber) $r2
org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightX : $r3 = (org.apache.pdfbox.cos.COSNumber) $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightX : $f0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSNumber: float floatValue()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightX : $f0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSNumber: float floatValue()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightX : return $f0
org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightX : return $f0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getWidth : $f1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftX()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.getWidth : $f1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftX()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftX : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: org.apache.pdfbox.cos.COSArray rectArray>
org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftX : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: org.apache.pdfbox.cos.COSArray rectArray> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftX : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>(0)
org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftX : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>(0) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftX : $r3 = (org.apache.pdfbox.cos.COSNumber) $r2
org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftX : $r3 = (org.apache.pdfbox.cos.COSNumber) $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftX : $f0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSNumber: float floatValue()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftX : $f0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSNumber: float floatValue()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftX : return $f0
org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftX : return $f0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getWidth : $f2 = $f0 - $f1
org.apache.pdfbox.pdmodel.common.PDRectangle.getWidth : $f2 = $f0 - $f1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getWidth : return $f2
org.apache.pdfbox.pdmodel.common.PDRectangle.getWidth : return $f2 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : f2 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getHeight()>()
org.apache.pdfbox.rendering.PDFRenderer.renderImage : f2 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getHeight()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getHeight : $f0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getUpperRightY()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.getHeight : $f0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getUpperRightY()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightY : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: org.apache.pdfbox.cos.COSArray rectArray>
org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightY : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: org.apache.pdfbox.cos.COSArray rectArray> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightY : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>(3)
org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightY : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>(3) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightY : $r3 = (org.apache.pdfbox.cos.COSNumber) $r2
org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightY : $r3 = (org.apache.pdfbox.cos.COSNumber) $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightY : $f0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSNumber: float floatValue()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightY : $f0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSNumber: float floatValue()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightY : return $f0
org.apache.pdfbox.pdmodel.common.PDRectangle.getUpperRightY : return $f0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getHeight : $f1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftY()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.getHeight : $f1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftY()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftY : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: org.apache.pdfbox.cos.COSArray rectArray>
org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftY : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: org.apache.pdfbox.cos.COSArray rectArray> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftY : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>(1)
org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftY : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>(1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftY : $r3 = (org.apache.pdfbox.cos.COSNumber) $r2
org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftY : $r3 = (org.apache.pdfbox.cos.COSNumber) $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftY : $f0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSNumber: float floatValue()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftY : $f0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSNumber: float floatValue()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftY : return $f0
org.apache.pdfbox.pdmodel.common.PDRectangle.getLowerLeftY : return $f0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getHeight : $f2 = $f0 - $f1
org.apache.pdfbox.pdmodel.common.PDRectangle.getHeight : $f2 = $f0 - $f1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getHeight : return $f2
org.apache.pdfbox.pdmodel.common.PDRectangle.getHeight : return $f2 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : $f3 = f1 * f0
org.apache.pdfbox.rendering.PDFRenderer.renderImage : $f3 = f1 * f0 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : i1 = staticinvoke <java.lang.Math: int round(float)>($f3)
org.apache.pdfbox.rendering.PDFRenderer.renderImage : i1 = staticinvoke <java.lang.Math: int round(float)>($f3) >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : $f4 = f2 * f0
org.apache.pdfbox.rendering.PDFRenderer.renderImage : $f4 = f2 * f0 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : i2 = staticinvoke <java.lang.Math: int round(float)>($f4)
org.apache.pdfbox.rendering.PDFRenderer.renderImage : i2 = staticinvoke <java.lang.Math: int round(float)>($f4) >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : i3 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.PDPage: int getRotation()>()
org.apache.pdfbox.rendering.PDFRenderer.renderImage : i3 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.PDPage: int getRotation()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getRotation : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page>
org.apache.pdfbox.pdmodel.PDPage.getRotation : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getRotation : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROTATE>
org.apache.pdfbox.pdmodel.PDPage.getRotation : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROTATE> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getRotation : r1 = staticinvoke <org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSBase getInheritableAttribute(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)>($r3, $r2)
org.apache.pdfbox.pdmodel.PDPage.getRotation : r1 = staticinvoke <org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSBase getInheritableAttribute(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)>($r3, $r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getRotation : $z0 = r1 instanceof org.apache.pdfbox.cos.COSNumber
org.apache.pdfbox.pdmodel.PDPage.getRotation : $z0 = r1 instanceof org.apache.pdfbox.cos.COSNumber >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getRotation : if $z0 == 0
org.apache.pdfbox.pdmodel.PDPage.getRotation : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getRotation : return 0
org.apache.pdfbox.pdmodel.PDPage.getRotation : return 0 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : if i3 == 90
org.apache.pdfbox.rendering.PDFRenderer.renderImage : if i3 == 90 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : if i3 != 270
org.apache.pdfbox.rendering.PDFRenderer.renderImage : if i3 != 270 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r14 = new java.awt.image.BufferedImage
org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r14 = new java.awt.image.BufferedImage >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : $i7 = virtualinvoke r1.<org.apache.pdfbox.rendering.ImageType: int toBufferedImageType()>()
org.apache.pdfbox.rendering.PDFRenderer.renderImage : $i7 = virtualinvoke r1.<org.apache.pdfbox.rendering.ImageType: int toBufferedImageType()>() >>>>>>>> org.apache.pdfbox.rendering.ImageType$3.toBufferedImageType : return 1
org.apache.pdfbox.rendering.ImageType$3.toBufferedImageType : return 1 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : specialinvoke $r14.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i1, i2, $i7)
org.apache.pdfbox.rendering.PDFRenderer.renderImage : specialinvoke $r14.<java.awt.image.BufferedImage: void <init>(int,int,int)>(i1, i2, $i7) >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : r15 = $r14
org.apache.pdfbox.rendering.PDFRenderer.renderImage : r15 = $r14 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : r4 = virtualinvoke r15.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>()
org.apache.pdfbox.rendering.PDFRenderer.renderImage : r4 = virtualinvoke r15.<java.awt.image.BufferedImage: java.awt.Graphics2D createGraphics()>() >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r9 = <org.apache.pdfbox.rendering.ImageType: org.apache.pdfbox.rendering.ImageType ARGB>
org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r9 = <org.apache.pdfbox.rendering.ImageType: org.apache.pdfbox.rendering.ImageType ARGB> >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : if r1 != $r9
org.apache.pdfbox.rendering.PDFRenderer.renderImage : if r1 != $r9 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r10 = <java.awt.Color: java.awt.Color WHITE>
org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r10 = <java.awt.Color: java.awt.Color WHITE> >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : virtualinvoke r4.<java.awt.Graphics2D: void setBackground(java.awt.Color)>($r10)
org.apache.pdfbox.rendering.PDFRenderer.renderImage : virtualinvoke r4.<java.awt.Graphics2D: void setBackground(java.awt.Color)>($r10) >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : $i5 = virtualinvoke r15.<java.awt.image.BufferedImage: int getWidth()>()
org.apache.pdfbox.rendering.PDFRenderer.renderImage : $i5 = virtualinvoke r15.<java.awt.image.BufferedImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : $i6 = virtualinvoke r15.<java.awt.image.BufferedImage: int getHeight()>()
org.apache.pdfbox.rendering.PDFRenderer.renderImage : $i6 = virtualinvoke r15.<java.awt.image.BufferedImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : virtualinvoke r4.<java.awt.Graphics2D: void clearRect(int,int,int,int)>(0, 0, $i5, $i6)
org.apache.pdfbox.rendering.PDFRenderer.renderImage : virtualinvoke r4.<java.awt.Graphics2D: void clearRect(int,int,int,int)>(0, 0, $i5, $i6) >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : specialinvoke r0.<org.apache.pdfbox.rendering.PDFRenderer: void transform(java.awt.Graphics2D,org.apache.pdfbox.pdmodel.PDPage,float)>(r4, r2, f0)
org.apache.pdfbox.rendering.PDFRenderer.renderImage : specialinvoke r0.<org.apache.pdfbox.rendering.PDFRenderer: void transform(java.awt.Graphics2D,org.apache.pdfbox.pdmodel.PDPage,float)>(r4, r2, f0) >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.transform : $d1 = (double) f0
org.apache.pdfbox.rendering.PDFRenderer.transform : $d1 = (double) f0 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.transform : $d0 = (double) f0
org.apache.pdfbox.rendering.PDFRenderer.transform : $d0 = (double) f0 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.transform : virtualinvoke r1.<java.awt.Graphics2D: void scale(double,double)>($d1, $d0)
org.apache.pdfbox.rendering.PDFRenderer.transform : virtualinvoke r1.<java.awt.Graphics2D: void scale(double,double)>($d1, $d0) >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.transform : i0 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.PDPage: int getRotation()>()
org.apache.pdfbox.rendering.PDFRenderer.transform : i0 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.PDPage: int getRotation()>() >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.transform : r3 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle getCropBox()>()
org.apache.pdfbox.rendering.PDFRenderer.transform : r3 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle getCropBox()>() >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.transform : if i0 == 0
org.apache.pdfbox.rendering.PDFRenderer.transform : if i0 == 0 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r11 = new org.apache.pdfbox.rendering.PageDrawerParameters
org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r11 = new org.apache.pdfbox.rendering.PageDrawerParameters >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : specialinvoke $r11.<org.apache.pdfbox.rendering.PageDrawerParameters: void <init>(org.apache.pdfbox.rendering.PDFRenderer,org.apache.pdfbox.pdmodel.PDPage)>(r0, r2)
org.apache.pdfbox.rendering.PDFRenderer.renderImage : specialinvoke $r11.<org.apache.pdfbox.rendering.PageDrawerParameters: void <init>(org.apache.pdfbox.rendering.PDFRenderer,org.apache.pdfbox.pdmodel.PDPage)>(r0, r2) >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : r6 = virtualinvoke r0.<org.apache.pdfbox.rendering.PDFRenderer: org.apache.pdfbox.rendering.PageDrawer createPageDrawer(org.apache.pdfbox.rendering.PageDrawerParameters)>($r11)
org.apache.pdfbox.rendering.PDFRenderer.renderImage : r6 = virtualinvoke r0.<org.apache.pdfbox.rendering.PDFRenderer: org.apache.pdfbox.rendering.PageDrawer createPageDrawer(org.apache.pdfbox.rendering.PageDrawerParameters)>($r11) >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.createPageDrawer : $r2 = new org.apache.pdfbox.rendering.PageDrawer
org.apache.pdfbox.rendering.PDFRenderer.createPageDrawer : $r2 = new org.apache.pdfbox.rendering.PageDrawer >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.createPageDrawer : specialinvoke $r2.<org.apache.pdfbox.rendering.PageDrawer: void <init>(org.apache.pdfbox.rendering.PageDrawerParameters)>(r1)
org.apache.pdfbox.rendering.PDFRenderer.createPageDrawer : specialinvoke $r2.<org.apache.pdfbox.rendering.PageDrawer: void <init>(org.apache.pdfbox.rendering.PageDrawerParameters)>(r1) >>>>>>>> org.apache.pdfbox.rendering.PageDrawerParameters.getPage : $r1 = r0.<org.apache.pdfbox.rendering.PageDrawerParameters: org.apache.pdfbox.pdmodel.PDPage page>
org.apache.pdfbox.rendering.PageDrawerParameters.getPage : $r1 = r0.<org.apache.pdfbox.rendering.PageDrawerParameters: org.apache.pdfbox.pdmodel.PDPage page> >>>>>>>> org.apache.pdfbox.rendering.PageDrawerParameters.getPage : return $r1
org.apache.pdfbox.rendering.PageDrawerParameters.getPage : return $r1 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.addOperator : virtualinvoke r1.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: void setContext(org.apache.pdfbox.contentstream.PDFStreamEngine)>(r0)
org.apache.pdfbox.contentstream.PDFStreamEngine.addOperator : virtualinvoke r1.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: void setContext(org.apache.pdfbox.contentstream.PDFStreamEngine)>(r0) >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.GraphicsOperatorProcessor.setContext : specialinvoke r0.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: void setContext(org.apache.pdfbox.contentstream.PDFStreamEngine)>(r1)
org.apache.pdfbox.contentstream.operator.graphics.GraphicsOperatorProcessor.setContext : specialinvoke r0.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: void setContext(org.apache.pdfbox.contentstream.PDFStreamEngine)>(r1) >>>>>>>> org.apache.pdfbox.contentstream.operator.OperatorProcessor.setContext : r0.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: org.apache.pdfbox.contentstream.PDFStreamEngine context> = r1
org.apache.pdfbox.contentstream.operator.OperatorProcessor.setContext : r0.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: org.apache.pdfbox.contentstream.PDFStreamEngine context> = r1 >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.GraphicsOperatorProcessor.setContext : $r2 = (org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine) r1
org.apache.pdfbox.contentstream.operator.graphics.GraphicsOperatorProcessor.setContext : $r2 = (org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine) r1 >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.GraphicsOperatorProcessor.setContext : r0.<org.apache.pdfbox.contentstream.operator.graphics.GraphicsOperatorProcessor: org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine context> = $r2
org.apache.pdfbox.contentstream.operator.graphics.GraphicsOperatorProcessor.setContext : r0.<org.apache.pdfbox.contentstream.operator.graphics.GraphicsOperatorProcessor: org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine context> = $r2 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.addOperator : $r2 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Map operators>
org.apache.pdfbox.contentstream.PDFStreamEngine.addOperator : $r2 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Map operators> >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.addOperator : $r3 = virtualinvoke r1.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: java.lang.String getName()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.addOperator : $r3 = virtualinvoke r1.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.CloseFillNonZeroAndStrokePath.getName : return "b"
org.apache.pdfbox.contentstream.operator.graphics.CloseFillNonZeroAndStrokePath.getName : return "b" >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.addOperator : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1)
org.apache.pdfbox.contentstream.PDFStreamEngine.addOperator : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r1) >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroAndStrokePath.getName : return "B"
org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroAndStrokePath.getName : return "B" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.CloseFillEvenOddAndStrokePath.getName : return "b*"
org.apache.pdfbox.contentstream.operator.graphics.CloseFillEvenOddAndStrokePath.getName : return "b*" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddAndStrokePath.getName : return "B*"
org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddAndStrokePath.getName : return "B*" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.BeginInlineImage.getName : return "BI"
org.apache.pdfbox.contentstream.operator.graphics.BeginInlineImage.getName : return "BI" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.BeginText.getName : return "BT"
org.apache.pdfbox.contentstream.operator.text.BeginText.getName : return "BT" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.CurveTo.getName : return "c"
org.apache.pdfbox.contentstream.operator.graphics.CurveTo.getName : return "c" >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.getName : return "cm"
org.apache.pdfbox.contentstream.operator.state.Concatenate.getName : return "cm" >>>>>>>> org.apache.pdfbox.contentstream.operator.color.SetStrokingColorSpace.getName : return "CS"
org.apache.pdfbox.contentstream.operator.color.SetStrokingColorSpace.getName : return "CS" >>>>>>>> org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColorSpace.getName : return "cs"
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColorSpace.getName : return "cs" >>>>>>>> org.apache.pdfbox.contentstream.operator.state.SetLineDashPattern.getName : return "d"
org.apache.pdfbox.contentstream.operator.state.SetLineDashPattern.getName : return "d" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.getName : return "Do"
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.getName : return "Do" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.EndText.getName : return "ET"
org.apache.pdfbox.contentstream.operator.text.EndText.getName : return "ET" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroRule.getName : return "f"
org.apache.pdfbox.contentstream.operator.graphics.FillNonZeroRule.getName : return "f" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.LegacyFillNonZeroRule.getName : return "F"
org.apache.pdfbox.contentstream.operator.graphics.LegacyFillNonZeroRule.getName : return "F" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddRule.getName : return "f*"
org.apache.pdfbox.contentstream.operator.graphics.FillEvenOddRule.getName : return "f*" >>>>>>>> org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceGrayColor.getName : return "G"
org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceGrayColor.getName : return "G" >>>>>>>> org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceGrayColor.getName : return "g"
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceGrayColor.getName : return "g" >>>>>>>> org.apache.pdfbox.contentstream.operator.state.SetGraphicsStateParameters.getName : return "gs"
org.apache.pdfbox.contentstream.operator.state.SetGraphicsStateParameters.getName : return "gs" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.ClosePath.getName : return "h"
org.apache.pdfbox.contentstream.operator.graphics.ClosePath.getName : return "h" >>>>>>>> org.apache.pdfbox.contentstream.operator.state.SetFlatness.getName : return "i"
org.apache.pdfbox.contentstream.operator.state.SetFlatness.getName : return "i" >>>>>>>> org.apache.pdfbox.contentstream.operator.state.SetLineJoinStyle.getName : return "j"
org.apache.pdfbox.contentstream.operator.state.SetLineJoinStyle.getName : return "j" >>>>>>>> org.apache.pdfbox.contentstream.operator.state.SetLineCapStyle.getName : return "J"
org.apache.pdfbox.contentstream.operator.state.SetLineCapStyle.getName : return "J" >>>>>>>> org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceCMYKColor.getName : return "K"
org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceCMYKColor.getName : return "K" >>>>>>>> org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceCMYKColor.getName : return "k"
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceCMYKColor.getName : return "k" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.LineTo.getName : return "l"
org.apache.pdfbox.contentstream.operator.graphics.LineTo.getName : return "l" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.MoveTo.getName : return "m"
org.apache.pdfbox.contentstream.operator.graphics.MoveTo.getName : return "m" >>>>>>>> org.apache.pdfbox.contentstream.operator.state.SetLineMiterLimit.getName : return "M"
org.apache.pdfbox.contentstream.operator.state.SetLineMiterLimit.getName : return "M" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.EndPath.getName : return "n"
org.apache.pdfbox.contentstream.operator.graphics.EndPath.getName : return "n" >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Save.getName : return "q"
org.apache.pdfbox.contentstream.operator.state.Save.getName : return "q" >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Restore.getName : return "Q"
org.apache.pdfbox.contentstream.operator.state.Restore.getName : return "Q" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.AppendRectangleToPath.getName : return "re"
org.apache.pdfbox.contentstream.operator.graphics.AppendRectangleToPath.getName : return "re" >>>>>>>> org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceRGBColor.getName : return "RG"
org.apache.pdfbox.contentstream.operator.color.SetStrokingDeviceRGBColor.getName : return "RG" >>>>>>>> org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceRGBColor.getName : return "rg"
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingDeviceRGBColor.getName : return "rg" >>>>>>>> org.apache.pdfbox.contentstream.operator.state.SetRenderingIntent.getName : return "ri"
org.apache.pdfbox.contentstream.operator.state.SetRenderingIntent.getName : return "ri" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.CloseAndStrokePath.getName : return "s"
org.apache.pdfbox.contentstream.operator.graphics.CloseAndStrokePath.getName : return "s" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.StrokePath.getName : return "S"
org.apache.pdfbox.contentstream.operator.graphics.StrokePath.getName : return "S" >>>>>>>> org.apache.pdfbox.contentstream.operator.color.SetStrokingColor.getName : return "SC"
org.apache.pdfbox.contentstream.operator.color.SetStrokingColor.getName : return "SC" >>>>>>>> org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColor.getName : return "sc"
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColor.getName : return "sc" >>>>>>>> org.apache.pdfbox.contentstream.operator.color.SetStrokingColorN.getName : return "SCN"
org.apache.pdfbox.contentstream.operator.color.SetStrokingColorN.getName : return "SCN" >>>>>>>> org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColorN.getName : return "scn"
org.apache.pdfbox.contentstream.operator.color.SetNonStrokingColorN.getName : return "scn" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.ShadingFill.getName : return "sh"
org.apache.pdfbox.contentstream.operator.graphics.ShadingFill.getName : return "sh" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.NextLine.getName : return "T*"
org.apache.pdfbox.contentstream.operator.text.NextLine.getName : return "T*" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.SetCharSpacing.getName : return "Tc"
org.apache.pdfbox.contentstream.operator.text.SetCharSpacing.getName : return "Tc" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.MoveText.getName : return "Td"
org.apache.pdfbox.contentstream.operator.text.MoveText.getName : return "Td" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.MoveTextSetLeading.getName : return "TD"
org.apache.pdfbox.contentstream.operator.text.MoveTextSetLeading.getName : return "TD" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.getName : return "Tf"
org.apache.pdfbox.contentstream.operator.text.SetFontAndSize.getName : return "Tf" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.ShowText.getName : return "Tj"
org.apache.pdfbox.contentstream.operator.text.ShowText.getName : return "Tj" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted.getName : return "TJ"
org.apache.pdfbox.contentstream.operator.text.ShowTextAdjusted.getName : return "TJ" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.SetTextLeading.getName : return "TL"
org.apache.pdfbox.contentstream.operator.text.SetTextLeading.getName : return "TL" >>>>>>>> org.apache.pdfbox.contentstream.operator.state.SetMatrix.getName : return "Tm"
org.apache.pdfbox.contentstream.operator.state.SetMatrix.getName : return "Tm" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.SetTextRenderingMode.getName : return "Tr"
org.apache.pdfbox.contentstream.operator.text.SetTextRenderingMode.getName : return "Tr" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.SetTextRise.getName : return "Ts"
org.apache.pdfbox.contentstream.operator.text.SetTextRise.getName : return "Ts" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.SetWordSpacing.getName : return "Tw"
org.apache.pdfbox.contentstream.operator.text.SetWordSpacing.getName : return "Tw" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.SetTextHorizontalScaling.getName : return "Tz"
org.apache.pdfbox.contentstream.operator.text.SetTextHorizontalScaling.getName : return "Tz" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateInitialPoint.getName : return "v"
org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateInitialPoint.getName : return "v" >>>>>>>> org.apache.pdfbox.contentstream.operator.state.SetLineWidth.getName : return "w"
org.apache.pdfbox.contentstream.operator.state.SetLineWidth.getName : return "w" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.ClipNonZeroRule.getName : return "W"
org.apache.pdfbox.contentstream.operator.graphics.ClipNonZeroRule.getName : return "W" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.ClipEvenOddRule.getName : return "W*"
org.apache.pdfbox.contentstream.operator.graphics.ClipEvenOddRule.getName : return "W*" >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateFinalPoint.getName : return "y"
org.apache.pdfbox.contentstream.operator.graphics.CurveToReplicateFinalPoint.getName : return "y" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.ShowTextLine.getName : return "\'"
org.apache.pdfbox.contentstream.operator.text.ShowTextLine.getName : return "\'" >>>>>>>> org.apache.pdfbox.contentstream.operator.text.ShowTextLineAndSpace.getName : return "\""
org.apache.pdfbox.contentstream.operator.text.ShowTextLineAndSpace.getName : return "\"" >>>>>>>> org.apache.pdfbox.rendering.PageDrawerParameters.getRenderer : $r1 = r0.<org.apache.pdfbox.rendering.PageDrawerParameters: org.apache.pdfbox.rendering.PDFRenderer renderer>
org.apache.pdfbox.rendering.PageDrawerParameters.getRenderer : $r1 = r0.<org.apache.pdfbox.rendering.PageDrawerParameters: org.apache.pdfbox.rendering.PDFRenderer renderer> >>>>>>>> org.apache.pdfbox.rendering.PageDrawerParameters.getRenderer : return $r1
org.apache.pdfbox.rendering.PageDrawerParameters.getRenderer : return $r1 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.createPageDrawer : return $r2
org.apache.pdfbox.rendering.PDFRenderer.createPageDrawer : return $r2 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r12 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle getCropBox()>()
org.apache.pdfbox.rendering.PDFRenderer.renderImage : $r12 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle getCropBox()>() >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : virtualinvoke r6.<org.apache.pdfbox.rendering.PageDrawer: void drawPage(java.awt.Graphics,org.apache.pdfbox.pdmodel.common.PDRectangle)>(r4, $r12)
org.apache.pdfbox.rendering.PDFRenderer.renderImage : virtualinvoke r6.<org.apache.pdfbox.rendering.PageDrawer: void drawPage(java.awt.Graphics,org.apache.pdfbox.pdmodel.common.PDRectangle)>(r4, $r12) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $r5 = (java.awt.Graphics2D) r1
org.apache.pdfbox.rendering.PageDrawer.drawPage : $r5 = (java.awt.Graphics2D) r1 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics> = $r5
org.apache.pdfbox.rendering.PageDrawer.drawPage : r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics> = $r5 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $r6 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics>
org.apache.pdfbox.rendering.PageDrawer.drawPage : $r6 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $r7 = virtualinvoke $r6.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>()
org.apache.pdfbox.rendering.PageDrawer.drawPage : $r7 = virtualinvoke $r6.<java.awt.Graphics2D: java.awt.geom.AffineTransform getTransform()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.geom.AffineTransform xform> = $r7
org.apache.pdfbox.rendering.PageDrawer.drawPage : r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.geom.AffineTransform xform> = $r7 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.common.PDRectangle pageSize> = r2
org.apache.pdfbox.rendering.PageDrawer.drawPage : r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.common.PDRectangle pageSize> = r2 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $r8 = virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.PDPage getPage()>()
org.apache.pdfbox.rendering.PageDrawer.drawPage : $r8 = virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.PDPage getPage()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine.getPage : $r1 = r0.<org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine: org.apache.pdfbox.pdmodel.PDPage page>
org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine.getPage : $r1 = r0.<org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine: org.apache.pdfbox.pdmodel.PDPage page> >>>>>>>> org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine.getPage : return $r1
org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine.getPage : return $r1 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $i0 = virtualinvoke $r8.<org.apache.pdfbox.pdmodel.PDPage: int getRotation()>()
org.apache.pdfbox.rendering.PageDrawer.drawPage : $i0 = virtualinvoke $r8.<org.apache.pdfbox.pdmodel.PDPage: int getRotation()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $i1 = $i0 % 360
org.apache.pdfbox.rendering.PageDrawer.drawPage : $i1 = $i0 % 360 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : r0.<org.apache.pdfbox.rendering.PageDrawer: int pageRotation> = $i1
org.apache.pdfbox.rendering.PageDrawer.drawPage : r0.<org.apache.pdfbox.rendering.PageDrawer: int pageRotation> = $i1 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : specialinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: void setRenderingHints()>()
org.apache.pdfbox.rendering.PageDrawer.drawPage : specialinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: void setRenderingHints()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r3 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics>
org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r3 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r2 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION>
org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r2 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_INTERPOLATION> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r1 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BICUBIC>
org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r1 = <java.awt.RenderingHints: java.lang.Object VALUE_INTERPOLATION_BICUBIC> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : virtualinvoke $r3.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r2, $r1)
org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : virtualinvoke $r3.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r2, $r1) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r6 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics>
org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r6 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r5 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_RENDERING>
org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r5 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_RENDERING> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r4 = <java.awt.RenderingHints: java.lang.Object VALUE_RENDER_QUALITY>
org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r4 = <java.awt.RenderingHints: java.lang.Object VALUE_RENDER_QUALITY> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : virtualinvoke $r6.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r5, $r4)
org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : virtualinvoke $r6.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r5, $r4) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r9 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics>
org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r9 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r8 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING>
org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r8 = <java.awt.RenderingHints: java.awt.RenderingHints$Key KEY_ANTIALIASING> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r7 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON>
org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : $r7 = <java.awt.RenderingHints: java.lang.Object VALUE_ANTIALIAS_ON> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : virtualinvoke $r9.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r8, $r7)
org.apache.pdfbox.rendering.PageDrawer.setRenderingHints : virtualinvoke $r9.<java.awt.Graphics2D: void setRenderingHint(java.awt.RenderingHints$Key,java.lang.Object)>($r8, $r7) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $r9 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics>
org.apache.pdfbox.rendering.PageDrawer.drawPage : $r9 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $f0 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getHeight()>()
org.apache.pdfbox.rendering.PageDrawer.drawPage : $f0 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getHeight()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $d0 = (double) $f0
org.apache.pdfbox.rendering.PageDrawer.drawPage : $d0 = (double) $f0 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : virtualinvoke $r9.<java.awt.Graphics2D: void translate(double,double)>(0.0, $d0)
org.apache.pdfbox.rendering.PageDrawer.drawPage : virtualinvoke $r9.<java.awt.Graphics2D: void translate(double,double)>(0.0, $d0) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $r10 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics>
org.apache.pdfbox.rendering.PageDrawer.drawPage : $r10 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : virtualinvoke $r10.<java.awt.Graphics2D: void scale(double,double)>(1.0, -1.0)
org.apache.pdfbox.rendering.PageDrawer.drawPage : virtualinvoke $r10.<java.awt.Graphics2D: void scale(double,double)>(1.0, -1.0) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $r12 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics>
org.apache.pdfbox.rendering.PageDrawer.drawPage : $r12 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $r11 = new java.awt.BasicStroke
org.apache.pdfbox.rendering.PageDrawer.drawPage : $r11 = new java.awt.BasicStroke >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : specialinvoke $r11.<java.awt.BasicStroke: void <init>(float,int,int)>(1.0F, 0, 0)
org.apache.pdfbox.rendering.PageDrawer.drawPage : specialinvoke $r11.<java.awt.BasicStroke: void <init>(float,int,int)>(1.0F, 0, 0) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : virtualinvoke $r12.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r11)
org.apache.pdfbox.rendering.PageDrawer.drawPage : virtualinvoke $r12.<java.awt.Graphics2D: void setStroke(java.awt.Stroke)>($r11) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $r13 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics>
org.apache.pdfbox.rendering.PageDrawer.drawPage : $r13 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $f1 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftX()>()
org.apache.pdfbox.rendering.PageDrawer.drawPage : $f1 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftX()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $f2 = neg $f1
org.apache.pdfbox.rendering.PageDrawer.drawPage : $f2 = neg $f1 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $d1 = (double) $f2
org.apache.pdfbox.rendering.PageDrawer.drawPage : $d1 = (double) $f2 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $f3 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftY()>()
org.apache.pdfbox.rendering.PageDrawer.drawPage : $f3 = virtualinvoke r2.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftY()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $f4 = neg $f3
org.apache.pdfbox.rendering.PageDrawer.drawPage : $f4 = neg $f3 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $d2 = (double) $f4
org.apache.pdfbox.rendering.PageDrawer.drawPage : $d2 = (double) $f4 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : virtualinvoke $r13.<java.awt.Graphics2D: void translate(double,double)>($d1, $d2)
org.apache.pdfbox.rendering.PageDrawer.drawPage : virtualinvoke $r13.<java.awt.Graphics2D: void translate(double,double)>($d1, $d2) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $r14 = virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.PDPage getPage()>()
org.apache.pdfbox.rendering.PageDrawer.drawPage : $r14 = virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.PDPage getPage()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: void processPage(org.apache.pdfbox.pdmodel.PDPage)>($r14)
org.apache.pdfbox.rendering.PageDrawer.drawPage : virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: void processPage(org.apache.pdfbox.pdmodel.PDPage)>($r14) >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processPage : specialinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: void initPage(org.apache.pdfbox.pdmodel.PDPage)>(r1)
org.apache.pdfbox.contentstream.PDFStreamEngine.processPage : specialinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: void initPage(org.apache.pdfbox.pdmodel.PDPage)>(r1) >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : if r1 != null
org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : if r1 != null >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDPage currentPage> = r1
org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDPage currentPage> = r1 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : $r2 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack>
org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : $r2 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack> >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : virtualinvoke $r2.<java.util.Stack: void clear()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : virtualinvoke $r2.<java.util.Stack: void clear()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : $r4 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack>
org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : $r4 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack> >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : $r3 = new org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState
org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : $r3 = new org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : $r5 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle getCropBox()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : $r5 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle getCropBox()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : specialinvoke $r3.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: void <init>(org.apache.pdfbox.pdmodel.common.PDRectangle)>($r5)
org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : specialinvoke $r3.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: void <init>(org.apache.pdfbox.pdmodel.common.PDRectangle)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getInitialColor : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: org.apache.pdfbox.pdmodel.graphics.color.PDColor initialColor>
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getInitialColor : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray: org.apache.pdfbox.pdmodel.graphics.color.PDColor initialColor> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getInitialColor : return $r1
org.apache.pdfbox.pdmodel.graphics.color.PDDeviceGray.getInitialColor : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.RenderingMode.values : $r0 = <org.apache.pdfbox.pdmodel.graphics.state.RenderingMode: org.apache.pdfbox.pdmodel.graphics.state.RenderingMode[] $VALUES>
org.apache.pdfbox.pdmodel.graphics.state.RenderingMode.values : $r0 = <org.apache.pdfbox.pdmodel.graphics.state.RenderingMode: org.apache.pdfbox.pdmodel.graphics.state.RenderingMode[] $VALUES> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.RenderingMode.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.pdfbox.pdmodel.graphics.state.RenderingMode.values : $r1 = virtualinvoke $r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.RenderingMode.values : $r2 = (org.apache.pdfbox.pdmodel.graphics.state.RenderingMode[]) $r1
org.apache.pdfbox.pdmodel.graphics.state.RenderingMode.values : $r2 = (org.apache.pdfbox.pdmodel.graphics.state.RenderingMode[]) $r1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.RenderingMode.values : return $r2
org.apache.pdfbox.pdmodel.graphics.state.RenderingMode.values : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r1 = new java.util.HashMap
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r1 = new java.util.HashMap >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : specialinvoke $r1.<java.util.HashMap: void <init>(int)>(13)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : specialinvoke $r1.<java.util.HashMap: void <init>(int)>(13) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName NORMAL>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName NORMAL> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r2 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode NORMAL>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r2 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode NORMAL> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r2)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r2) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COMPATIBLE>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COMPATIBLE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r5 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode COMPATIBLE>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r5 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode COMPATIBLE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, $r5) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName MULTIPLY>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName MULTIPLY> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r8 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode MULTIPLY>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r8 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode MULTIPLY> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r8)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r9, $r8) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r12 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SCREEN>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r12 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SCREEN> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r11 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode SCREEN>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r11 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode SCREEN> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r11)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r12, $r11) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName OVERLAY>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName OVERLAY> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r14 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode OVERLAY>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r14 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode OVERLAY> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r14)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r15, $r14) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r18 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DARKEN>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r18 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DARKEN> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r17 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode DARKEN>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r17 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode DARKEN> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r17)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, $r17) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r21 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LIGHTEN>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r21 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LIGHTEN> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r20 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode LIGHTEN>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r20 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode LIGHTEN> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r20)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r21, $r20) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r24 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLOR_DODGE>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r24 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLOR_DODGE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r23 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode COLOR_DODGE>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r23 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode COLOR_DODGE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, $r23)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r24, $r23) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r27 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLOR_BURN>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r27 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLOR_BURN> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r26 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode COLOR_BURN>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r26 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode COLOR_BURN> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r26)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r27, $r26) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r30 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName HARD_LIGHT>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r30 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName HARD_LIGHT> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r29 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode HARD_LIGHT>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r29 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode HARD_LIGHT> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r29)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r30, $r29) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r33 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SOFT_LIGHT>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r33 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SOFT_LIGHT> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r32 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode SOFT_LIGHT>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r32 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode SOFT_LIGHT> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, $r32)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r33, $r32) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r36 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DIFFERENCE>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r36 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DIFFERENCE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r35 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode DIFFERENCE>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r35 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode DIFFERENCE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, $r35)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r36, $r35) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r39 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName EXCLUSION>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r39 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName EXCLUSION> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r38 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode EXCLUSION>
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : $r38 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode EXCLUSION> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r39, $r38)
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : interfaceinvoke $r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r39, $r38) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : return $r1
org.apache.pdfbox.pdmodel.graphics.blend.BlendMode.createBlendModeMap : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : f0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftX()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : f0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftX()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : f1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftY()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : f1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftY()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : f2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getUpperRightX()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : f2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getUpperRightX()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : f3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getUpperRightY()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : f3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getUpperRightY()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : $r2 = new java.awt.geom.GeneralPath
org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : $r2 = new java.awt.geom.GeneralPath >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : specialinvoke $r2.<java.awt.geom.GeneralPath: void <init>()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : specialinvoke $r2.<java.awt.geom.GeneralPath: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : virtualinvoke $r2.<java.awt.geom.GeneralPath: void moveTo(float,float)>(f0, f1)
org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : virtualinvoke $r2.<java.awt.geom.GeneralPath: void moveTo(float,float)>(f0, f1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : virtualinvoke $r2.<java.awt.geom.GeneralPath: void lineTo(float,float)>(f2, f1)
org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : virtualinvoke $r2.<java.awt.geom.GeneralPath: void lineTo(float,float)>(f2, f1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : virtualinvoke $r2.<java.awt.geom.GeneralPath: void lineTo(float,float)>(f2, f3)
org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : virtualinvoke $r2.<java.awt.geom.GeneralPath: void lineTo(float,float)>(f2, f3) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : virtualinvoke $r2.<java.awt.geom.GeneralPath: void lineTo(float,float)>(f0, f3)
org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : virtualinvoke $r2.<java.awt.geom.GeneralPath: void lineTo(float,float)>(f0, f3) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : virtualinvoke $r2.<java.awt.geom.GeneralPath: void closePath()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : virtualinvoke $r2.<java.awt.geom.GeneralPath: void closePath()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : return $r2
org.apache.pdfbox.pdmodel.common.PDRectangle.toGeneralPath : return $r2 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : virtualinvoke $r4.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r3)
org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : virtualinvoke $r4.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r3) >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.util.Matrix textMatrix> = null
org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.util.Matrix textMatrix> = null >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.util.Matrix textLineMatrix> = null
org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.util.Matrix textLineMatrix> = null >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDResources resources> = null
org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDResources resources> = null >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : $r7 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.util.Matrix getMatrix()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : $r7 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.util.Matrix getMatrix()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMatrix : $r1 = new org.apache.pdfbox.util.Matrix
org.apache.pdfbox.pdmodel.PDPage.getMatrix : $r1 = new org.apache.pdfbox.util.Matrix >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMatrix : specialinvoke $r1.<org.apache.pdfbox.util.Matrix: void <init>()>()
org.apache.pdfbox.pdmodel.PDPage.getMatrix : specialinvoke $r1.<org.apache.pdfbox.util.Matrix: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getMatrix : return $r1
org.apache.pdfbox.pdmodel.PDPage.getMatrix : return $r1 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.util.Matrix initialMatrix> = $r7
org.apache.pdfbox.contentstream.PDFStreamEngine.initPage : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.util.Matrix initialMatrix> = $r7 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processPage : $z0 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDPage: boolean hasContents()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.processPage : $z0 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDPage: boolean hasContents()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.hasContents : $r5 = (org.apache.pdfbox.cos.COSStream) r1
org.apache.pdfbox.pdmodel.PDPage.hasContents : $r5 = (org.apache.pdfbox.cos.COSStream) r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.hasContents : $i1 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSStream: int size()>()
org.apache.pdfbox.pdmodel.PDPage.hasContents : $i1 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSStream: int size()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.size : $r1 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.size : $r1 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.size : $i0 = interfaceinvoke $r1.<java.util.Map: int size()>()
org.apache.pdfbox.cos.COSDictionary.size : $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.size : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.size : if $r1 != null
org.apache.pdfbox.util.SmallMap.size : if $r1 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.size : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.size : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.size : $i1 = $i0 >> 1
org.apache.pdfbox.util.SmallMap.size : $i1 = $i0 >> 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.size : return $i1
org.apache.pdfbox.util.SmallMap.size : return $i1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.size : return $i0
org.apache.pdfbox.cos.COSDictionary.size : return $i0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.hasContents : if $i1 <= 0
org.apache.pdfbox.pdmodel.PDPage.hasContents : if $i1 <= 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.hasContents : $z2 = 1
org.apache.pdfbox.pdmodel.PDPage.hasContents : $z2 = 1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.hasContents : goto [?= return $z2]
org.apache.pdfbox.pdmodel.PDPage.hasContents : goto [?= return $z2] >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.hasContents : return $z2
org.apache.pdfbox.pdmodel.PDPage.hasContents : return $z2 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processPage : if $z0 == 0
org.apache.pdfbox.contentstream.PDFStreamEngine.processPage : if $z0 == 0 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processPage : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: boolean isProcessingPage> = 1
org.apache.pdfbox.contentstream.PDFStreamEngine.processPage : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: boolean isProcessingPage> = 1 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processPage : specialinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: void processStream(org.apache.pdfbox.contentstream.PDContentStream)>(r1)
org.apache.pdfbox.contentstream.PDFStreamEngine.processPage : specialinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: void processStream(org.apache.pdfbox.contentstream.PDContentStream)>(r1) >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : r2 = specialinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDResources pushResources(org.apache.pdfbox.contentstream.PDContentStream)>(r1)
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : r2 = specialinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDResources pushResources(org.apache.pdfbox.contentstream.PDContentStream)>(r1) >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.pushResources : r2 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDResources resources>
org.apache.pdfbox.contentstream.PDFStreamEngine.pushResources : r2 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDResources resources> >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.pushResources : r3 = interfaceinvoke r1.<org.apache.pdfbox.contentstream.PDContentStream: org.apache.pdfbox.pdmodel.PDResources getResources()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.pushResources : r3 = interfaceinvoke r1.<org.apache.pdfbox.contentstream.PDContentStream: org.apache.pdfbox.pdmodel.PDResources getResources()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getResources : $r6 = new org.apache.pdfbox.pdmodel.PDResources
org.apache.pdfbox.pdmodel.PDPage.getResources : $r6 = new org.apache.pdfbox.pdmodel.PDResources >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getResources : $r7 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.ResourceCache resourceCache>
org.apache.pdfbox.pdmodel.PDPage.getResources : $r7 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.ResourceCache resourceCache> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getResources : specialinvoke $r6.<org.apache.pdfbox.pdmodel.PDResources: void <init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)>(r1, $r7)
org.apache.pdfbox.pdmodel.PDPage.getResources : specialinvoke $r6.<org.apache.pdfbox.pdmodel.PDResources: void <init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)>(r1, $r7) >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getResources : r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.PDResources pageResources> = $r6
org.apache.pdfbox.pdmodel.PDPage.getResources : r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.PDResources pageResources> = $r6 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.pushResources : if r3 == null
org.apache.pdfbox.contentstream.PDFStreamEngine.pushResources : if r3 == null >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.pushResources : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDResources resources> = r3
org.apache.pdfbox.contentstream.PDFStreamEngine.pushResources : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDResources resources> = r3 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.pushResources : goto [?= $r8 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDResources resources>]
org.apache.pdfbox.contentstream.PDFStreamEngine.pushResources : goto [?= $r8 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDResources resources>] >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.pushResources : $r8 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDResources resources>
org.apache.pdfbox.contentstream.PDFStreamEngine.pushResources : $r8 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDResources resources> >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.pushResources : if $r8 != null
org.apache.pdfbox.contentstream.PDFStreamEngine.pushResources : if $r8 != null >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.pushResources : return r2
org.apache.pdfbox.contentstream.PDFStreamEngine.pushResources : return r2 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : r3 = virtualinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack saveGraphicsStack()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : r3 = virtualinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack saveGraphicsStack()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : r1 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack>
org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : r1 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack> >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : $r2 = new java.util.Stack
org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : $r2 = new java.util.Stack >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : specialinvoke $r2.<java.util.Stack: void <init>()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : specialinvoke $r2.<java.util.Stack: void <init>()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack> = $r2
org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack> = $r2 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : $r3 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack>
org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : $r3 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack> >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : $r4 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : $r4 = virtualinvoke r1.<java.util.Stack: java.lang.Object peek()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : $r5 = (org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState) $r4
org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : $r5 = (org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState) $r4 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : $r6 = virtualinvoke $r5.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState clone()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : $r6 = virtualinvoke $r5.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState clone()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : r12 = (org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState) $r1
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : r12 = (org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState) $r1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r2 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.state.PDTextState textState>
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r2 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.state.PDTextState textState> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.graphics.state.PDTextState: org.apache.pdfbox.pdmodel.graphics.state.PDTextState clone()>()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.graphics.state.PDTextState: org.apache.pdfbox.pdmodel.graphics.state.PDTextState clone()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDTextState.clone : $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>()
org.apache.pdfbox.pdmodel.graphics.state.PDTextState.clone : $r2 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDTextState.clone : $r3 = (org.apache.pdfbox.pdmodel.graphics.state.PDTextState) $r2
org.apache.pdfbox.pdmodel.graphics.state.PDTextState.clone : $r3 = (org.apache.pdfbox.pdmodel.graphics.state.PDTextState) $r2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDTextState.clone : return $r3
org.apache.pdfbox.pdmodel.graphics.state.PDTextState.clone : return $r3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : r12.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.state.PDTextState textState> = $r3
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : r12.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.state.PDTextState textState> = $r3 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r4 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.util.Matrix currentTransformationMatrix>
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r4 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.util.Matrix currentTransformationMatrix> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r5 = virtualinvoke $r4.<org.apache.pdfbox.util.Matrix: org.apache.pdfbox.util.Matrix clone()>()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r5 = virtualinvoke $r4.<org.apache.pdfbox.util.Matrix: org.apache.pdfbox.util.Matrix clone()>() >>>>>>>> org.apache.pdfbox.util.Matrix.clone : $r2 = new org.apache.pdfbox.util.Matrix
org.apache.pdfbox.util.Matrix.clone : $r2 = new org.apache.pdfbox.util.Matrix >>>>>>>> org.apache.pdfbox.util.Matrix.clone : specialinvoke $r2.<org.apache.pdfbox.util.Matrix: void <init>()>()
org.apache.pdfbox.util.Matrix.clone : specialinvoke $r2.<org.apache.pdfbox.util.Matrix: void <init>()>() >>>>>>>> org.apache.pdfbox.util.Matrix.clone : $r4 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.clone : $r4 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.clone : $r3 = $r2.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.clone : $r3 = $r2.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.clone : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, 9)
org.apache.pdfbox.util.Matrix.clone : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r4, 0, $r3, 0, 9) >>>>>>>> org.apache.pdfbox.util.Matrix.clone : return $r2
org.apache.pdfbox.util.Matrix.clone : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : r12.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.util.Matrix currentTransformationMatrix> = $r5
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : r12.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.util.Matrix currentTransformationMatrix> = $r5 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r6 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColor strokingColor>
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r6 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColor strokingColor> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : r12.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColor strokingColor> = $r6
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : r12.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColor strokingColor> = $r6 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r7 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColor nonStrokingColor>
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r7 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColor nonStrokingColor> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : r12.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColor nonStrokingColor> = $r7
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : r12.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.color.PDColor nonStrokingColor> = $r7 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r8 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern lineDashPattern>
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r8 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern lineDashPattern> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : r12.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern lineDashPattern> = $r8
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : r12.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.PDLineDashPattern lineDashPattern> = $r8 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r9 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: java.awt.geom.Area clippingPath>
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : $r9 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: java.awt.geom.Area clippingPath> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : r12.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: java.awt.geom.Area clippingPath> = $r9
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : r12.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: java.awt.geom.Area clippingPath> = $r9 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : r12.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: boolean isClippingPathDirty> = 0
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : r12.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: boolean isClippingPathDirty> = 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : return r12
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.clone : return r12 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : virtualinvoke $r3.<java.util.Stack: boolean add(java.lang.Object)>($r6)
org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : virtualinvoke $r3.<java.util.Stack: boolean add(java.lang.Object)>($r6) >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : return r1
org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsStack : return r1 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : r4 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.util.Matrix initialMatrix>
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : r4 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.util.Matrix initialMatrix> >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : $r6 = virtualinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : $r6 = virtualinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.getGraphicsState : $r1 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack>
org.apache.pdfbox.contentstream.PDFStreamEngine.getGraphicsState : $r1 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack> >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.getGraphicsState : $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object peek()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.getGraphicsState : $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object peek()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.getGraphicsState : $r3 = (org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState) $r2
org.apache.pdfbox.contentstream.PDFStreamEngine.getGraphicsState : $r3 = (org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState) $r2 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.getGraphicsState : return $r3
org.apache.pdfbox.contentstream.PDFStreamEngine.getGraphicsState : return $r3 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : $r7 = virtualinvoke $r6.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : $r7 = virtualinvoke $r6.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getCurrentTransformationMatrix : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.util.Matrix currentTransformationMatrix>
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getCurrentTransformationMatrix : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.util.Matrix currentTransformationMatrix> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getCurrentTransformationMatrix : return $r1
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getCurrentTransformationMatrix : return $r1 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : $r8 = interfaceinvoke r1.<org.apache.pdfbox.contentstream.PDContentStream: org.apache.pdfbox.util.Matrix getMatrix()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : $r8 = interfaceinvoke r1.<org.apache.pdfbox.contentstream.PDContentStream: org.apache.pdfbox.util.Matrix getMatrix()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : virtualinvoke $r7.<org.apache.pdfbox.util.Matrix: void concatenate(org.apache.pdfbox.util.Matrix)>($r8)
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : virtualinvoke $r7.<org.apache.pdfbox.util.Matrix: void concatenate(org.apache.pdfbox.util.Matrix)>($r8) >>>>>>>> org.apache.pdfbox.util.Matrix.concatenate : virtualinvoke r1.<org.apache.pdfbox.util.Matrix: org.apache.pdfbox.util.Matrix multiply(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.util.Matrix)>(r0, r0)
org.apache.pdfbox.util.Matrix.concatenate : virtualinvoke r1.<org.apache.pdfbox.util.Matrix: org.apache.pdfbox.util.Matrix multiply(org.apache.pdfbox.util.Matrix,org.apache.pdfbox.util.Matrix)>(r0, r0) >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : if r19 != null
org.apache.pdfbox.util.Matrix.multiply : if r19 != null >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : if r1 == null
org.apache.pdfbox.util.Matrix.multiply : if r1 == null >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r2 = r1.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.multiply : $r2 = r1.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : if $r2 == null
org.apache.pdfbox.util.Matrix.multiply : if $r2 == null >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : r20 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.multiply : r20 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : r21 = r1.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.multiply : r21 = r1.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : if r0 != r19
org.apache.pdfbox.util.Matrix.multiply : if r0 != r19 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : if r1 != r19
org.apache.pdfbox.util.Matrix.multiply : if r1 != r19 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r12 = r1.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.multiply : $r12 = r1.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $i0 = lengthof $r12
org.apache.pdfbox.util.Matrix.multiply : $i0 = lengthof $r12 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : r23 = newarray (float)[$i0]
org.apache.pdfbox.util.Matrix.multiply : r23 = newarray (float)[$i0] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r14 = r1.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.multiply : $r14 = r1.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r13 = r1.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.multiply : $r13 = r1.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $i1 = lengthof $r13
org.apache.pdfbox.util.Matrix.multiply : $i1 = lengthof $r13 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, r23, 0, $i1)
org.apache.pdfbox.util.Matrix.multiply : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r14, 0, r23, 0, $i1) >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : r21 = r23
org.apache.pdfbox.util.Matrix.multiply : r21 = r23 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r3 = r19.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.multiply : $r3 = r19.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f1 = r20[0]
org.apache.pdfbox.util.Matrix.multiply : $f1 = r20[0] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f0 = r21[0]
org.apache.pdfbox.util.Matrix.multiply : $f0 = r21[0] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f5 = $f1 * $f0
org.apache.pdfbox.util.Matrix.multiply : $f5 = $f1 * $f0 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f3 = r20[1]
org.apache.pdfbox.util.Matrix.multiply : $f3 = r20[1] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f2 = r21[3]
org.apache.pdfbox.util.Matrix.multiply : $f2 = r21[3] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f4 = $f3 * $f2
org.apache.pdfbox.util.Matrix.multiply : $f4 = $f3 * $f2 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f9 = $f5 + $f4
org.apache.pdfbox.util.Matrix.multiply : $f9 = $f5 + $f4 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f7 = r20[2]
org.apache.pdfbox.util.Matrix.multiply : $f7 = r20[2] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f6 = r21[6]
org.apache.pdfbox.util.Matrix.multiply : $f6 = r21[6] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f8 = $f7 * $f6
org.apache.pdfbox.util.Matrix.multiply : $f8 = $f7 * $f6 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f10 = $f9 + $f8
org.apache.pdfbox.util.Matrix.multiply : $f10 = $f9 + $f8 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r3[0] = $f10
org.apache.pdfbox.util.Matrix.multiply : $r3[0] = $f10 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r4 = r19.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.multiply : $r4 = r19.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f12 = r20[0]
org.apache.pdfbox.util.Matrix.multiply : $f12 = r20[0] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f11 = r21[1]
org.apache.pdfbox.util.Matrix.multiply : $f11 = r21[1] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f16 = $f12 * $f11
org.apache.pdfbox.util.Matrix.multiply : $f16 = $f12 * $f11 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f14 = r20[1]
org.apache.pdfbox.util.Matrix.multiply : $f14 = r20[1] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f13 = r21[4]
org.apache.pdfbox.util.Matrix.multiply : $f13 = r21[4] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f15 = $f14 * $f13
org.apache.pdfbox.util.Matrix.multiply : $f15 = $f14 * $f13 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f20 = $f16 + $f15
org.apache.pdfbox.util.Matrix.multiply : $f20 = $f16 + $f15 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f18 = r20[2]
org.apache.pdfbox.util.Matrix.multiply : $f18 = r20[2] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f17 = r21[7]
org.apache.pdfbox.util.Matrix.multiply : $f17 = r21[7] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f19 = $f18 * $f17
org.apache.pdfbox.util.Matrix.multiply : $f19 = $f18 * $f17 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f21 = $f20 + $f19
org.apache.pdfbox.util.Matrix.multiply : $f21 = $f20 + $f19 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r4[1] = $f21
org.apache.pdfbox.util.Matrix.multiply : $r4[1] = $f21 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r5 = r19.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.multiply : $r5 = r19.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f23 = r20[0]
org.apache.pdfbox.util.Matrix.multiply : $f23 = r20[0] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f22 = r21[2]
org.apache.pdfbox.util.Matrix.multiply : $f22 = r21[2] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f27 = $f23 * $f22
org.apache.pdfbox.util.Matrix.multiply : $f27 = $f23 * $f22 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f25 = r20[1]
org.apache.pdfbox.util.Matrix.multiply : $f25 = r20[1] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f24 = r21[5]
org.apache.pdfbox.util.Matrix.multiply : $f24 = r21[5] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f26 = $f25 * $f24
org.apache.pdfbox.util.Matrix.multiply : $f26 = $f25 * $f24 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f31 = $f27 + $f26
org.apache.pdfbox.util.Matrix.multiply : $f31 = $f27 + $f26 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f29 = r20[2]
org.apache.pdfbox.util.Matrix.multiply : $f29 = r20[2] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f28 = r21[8]
org.apache.pdfbox.util.Matrix.multiply : $f28 = r21[8] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f30 = $f29 * $f28
org.apache.pdfbox.util.Matrix.multiply : $f30 = $f29 * $f28 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f32 = $f31 + $f30
org.apache.pdfbox.util.Matrix.multiply : $f32 = $f31 + $f30 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r5[2] = $f32
org.apache.pdfbox.util.Matrix.multiply : $r5[2] = $f32 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r6 = r19.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.multiply : $r6 = r19.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f34 = r20[3]
org.apache.pdfbox.util.Matrix.multiply : $f34 = r20[3] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f33 = r21[0]
org.apache.pdfbox.util.Matrix.multiply : $f33 = r21[0] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f38 = $f34 * $f33
org.apache.pdfbox.util.Matrix.multiply : $f38 = $f34 * $f33 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f36 = r20[4]
org.apache.pdfbox.util.Matrix.multiply : $f36 = r20[4] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f35 = r21[3]
org.apache.pdfbox.util.Matrix.multiply : $f35 = r21[3] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f37 = $f36 * $f35
org.apache.pdfbox.util.Matrix.multiply : $f37 = $f36 * $f35 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f42 = $f38 + $f37
org.apache.pdfbox.util.Matrix.multiply : $f42 = $f38 + $f37 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f40 = r20[5]
org.apache.pdfbox.util.Matrix.multiply : $f40 = r20[5] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f39 = r21[6]
org.apache.pdfbox.util.Matrix.multiply : $f39 = r21[6] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f41 = $f40 * $f39
org.apache.pdfbox.util.Matrix.multiply : $f41 = $f40 * $f39 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f43 = $f42 + $f41
org.apache.pdfbox.util.Matrix.multiply : $f43 = $f42 + $f41 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r6[3] = $f43
org.apache.pdfbox.util.Matrix.multiply : $r6[3] = $f43 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r7 = r19.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.multiply : $r7 = r19.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f45 = r20[3]
org.apache.pdfbox.util.Matrix.multiply : $f45 = r20[3] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f44 = r21[1]
org.apache.pdfbox.util.Matrix.multiply : $f44 = r21[1] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f49 = $f45 * $f44
org.apache.pdfbox.util.Matrix.multiply : $f49 = $f45 * $f44 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f47 = r20[4]
org.apache.pdfbox.util.Matrix.multiply : $f47 = r20[4] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f46 = r21[4]
org.apache.pdfbox.util.Matrix.multiply : $f46 = r21[4] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f48 = $f47 * $f46
org.apache.pdfbox.util.Matrix.multiply : $f48 = $f47 * $f46 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f53 = $f49 + $f48
org.apache.pdfbox.util.Matrix.multiply : $f53 = $f49 + $f48 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f51 = r20[5]
org.apache.pdfbox.util.Matrix.multiply : $f51 = r20[5] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f50 = r21[7]
org.apache.pdfbox.util.Matrix.multiply : $f50 = r21[7] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f52 = $f51 * $f50
org.apache.pdfbox.util.Matrix.multiply : $f52 = $f51 * $f50 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f54 = $f53 + $f52
org.apache.pdfbox.util.Matrix.multiply : $f54 = $f53 + $f52 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r7[4] = $f54
org.apache.pdfbox.util.Matrix.multiply : $r7[4] = $f54 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r8 = r19.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.multiply : $r8 = r19.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f56 = r20[3]
org.apache.pdfbox.util.Matrix.multiply : $f56 = r20[3] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f55 = r21[2]
org.apache.pdfbox.util.Matrix.multiply : $f55 = r21[2] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f60 = $f56 * $f55
org.apache.pdfbox.util.Matrix.multiply : $f60 = $f56 * $f55 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f58 = r20[4]
org.apache.pdfbox.util.Matrix.multiply : $f58 = r20[4] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f57 = r21[5]
org.apache.pdfbox.util.Matrix.multiply : $f57 = r21[5] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f59 = $f58 * $f57
org.apache.pdfbox.util.Matrix.multiply : $f59 = $f58 * $f57 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f64 = $f60 + $f59
org.apache.pdfbox.util.Matrix.multiply : $f64 = $f60 + $f59 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f62 = r20[5]
org.apache.pdfbox.util.Matrix.multiply : $f62 = r20[5] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f61 = r21[8]
org.apache.pdfbox.util.Matrix.multiply : $f61 = r21[8] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f63 = $f62 * $f61
org.apache.pdfbox.util.Matrix.multiply : $f63 = $f62 * $f61 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f65 = $f64 + $f63
org.apache.pdfbox.util.Matrix.multiply : $f65 = $f64 + $f63 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r8[5] = $f65
org.apache.pdfbox.util.Matrix.multiply : $r8[5] = $f65 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r9 = r19.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.multiply : $r9 = r19.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f67 = r20[6]
org.apache.pdfbox.util.Matrix.multiply : $f67 = r20[6] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f66 = r21[0]
org.apache.pdfbox.util.Matrix.multiply : $f66 = r21[0] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f71 = $f67 * $f66
org.apache.pdfbox.util.Matrix.multiply : $f71 = $f67 * $f66 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f69 = r20[7]
org.apache.pdfbox.util.Matrix.multiply : $f69 = r20[7] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f68 = r21[3]
org.apache.pdfbox.util.Matrix.multiply : $f68 = r21[3] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f70 = $f69 * $f68
org.apache.pdfbox.util.Matrix.multiply : $f70 = $f69 * $f68 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f75 = $f71 + $f70
org.apache.pdfbox.util.Matrix.multiply : $f75 = $f71 + $f70 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f73 = r20[8]
org.apache.pdfbox.util.Matrix.multiply : $f73 = r20[8] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f72 = r21[6]
org.apache.pdfbox.util.Matrix.multiply : $f72 = r21[6] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f74 = $f73 * $f72
org.apache.pdfbox.util.Matrix.multiply : $f74 = $f73 * $f72 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f76 = $f75 + $f74
org.apache.pdfbox.util.Matrix.multiply : $f76 = $f75 + $f74 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r9[6] = $f76
org.apache.pdfbox.util.Matrix.multiply : $r9[6] = $f76 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r10 = r19.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.multiply : $r10 = r19.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f78 = r20[6]
org.apache.pdfbox.util.Matrix.multiply : $f78 = r20[6] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f77 = r21[1]
org.apache.pdfbox.util.Matrix.multiply : $f77 = r21[1] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f82 = $f78 * $f77
org.apache.pdfbox.util.Matrix.multiply : $f82 = $f78 * $f77 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f80 = r20[7]
org.apache.pdfbox.util.Matrix.multiply : $f80 = r20[7] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f79 = r21[4]
org.apache.pdfbox.util.Matrix.multiply : $f79 = r21[4] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f81 = $f80 * $f79
org.apache.pdfbox.util.Matrix.multiply : $f81 = $f80 * $f79 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f86 = $f82 + $f81
org.apache.pdfbox.util.Matrix.multiply : $f86 = $f82 + $f81 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f84 = r20[8]
org.apache.pdfbox.util.Matrix.multiply : $f84 = r20[8] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f83 = r21[7]
org.apache.pdfbox.util.Matrix.multiply : $f83 = r21[7] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f85 = $f84 * $f83
org.apache.pdfbox.util.Matrix.multiply : $f85 = $f84 * $f83 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f87 = $f86 + $f85
org.apache.pdfbox.util.Matrix.multiply : $f87 = $f86 + $f85 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r10[7] = $f87
org.apache.pdfbox.util.Matrix.multiply : $r10[7] = $f87 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r11 = r19.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.multiply : $r11 = r19.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f89 = r20[6]
org.apache.pdfbox.util.Matrix.multiply : $f89 = r20[6] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f88 = r21[2]
org.apache.pdfbox.util.Matrix.multiply : $f88 = r21[2] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f93 = $f89 * $f88
org.apache.pdfbox.util.Matrix.multiply : $f93 = $f89 * $f88 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f91 = r20[7]
org.apache.pdfbox.util.Matrix.multiply : $f91 = r20[7] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f90 = r21[5]
org.apache.pdfbox.util.Matrix.multiply : $f90 = r21[5] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f92 = $f91 * $f90
org.apache.pdfbox.util.Matrix.multiply : $f92 = $f91 * $f90 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f97 = $f93 + $f92
org.apache.pdfbox.util.Matrix.multiply : $f97 = $f93 + $f92 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f95 = r20[8]
org.apache.pdfbox.util.Matrix.multiply : $f95 = r20[8] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f94 = r21[8]
org.apache.pdfbox.util.Matrix.multiply : $f94 = r21[8] >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f96 = $f95 * $f94
org.apache.pdfbox.util.Matrix.multiply : $f96 = $f95 * $f94 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $f98 = $f97 + $f96
org.apache.pdfbox.util.Matrix.multiply : $f98 = $f97 + $f96 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : $r11[8] = $f98
org.apache.pdfbox.util.Matrix.multiply : $r11[8] = $f98 >>>>>>>> org.apache.pdfbox.util.Matrix.multiply : return r19
org.apache.pdfbox.util.Matrix.multiply : return r19 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : $r9 = virtualinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : $r9 = virtualinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : $r10 = virtualinvoke $r9.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : $r10 = virtualinvoke $r9.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : $r11 = virtualinvoke $r10.<org.apache.pdfbox.util.Matrix: org.apache.pdfbox.util.Matrix clone()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : $r11 = virtualinvoke $r10.<org.apache.pdfbox.util.Matrix: org.apache.pdfbox.util.Matrix clone()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.util.Matrix initialMatrix> = $r11
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.util.Matrix initialMatrix> = $r11 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : r5 = interfaceinvoke r1.<org.apache.pdfbox.contentstream.PDContentStream: org.apache.pdfbox.pdmodel.common.PDRectangle getBBox()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : r5 = interfaceinvoke r1.<org.apache.pdfbox.contentstream.PDContentStream: org.apache.pdfbox.pdmodel.common.PDRectangle getBBox()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getBBox : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle getCropBox()>()
org.apache.pdfbox.pdmodel.PDPage.getBBox : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.pdmodel.common.PDRectangle getCropBox()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getBBox : return $r1
org.apache.pdfbox.pdmodel.PDPage.getBBox : return $r1 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : specialinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: void clipToRect(org.apache.pdfbox.pdmodel.common.PDRectangle)>(r5)
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : specialinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: void clipToRect(org.apache.pdfbox.pdmodel.common.PDRectangle)>(r5) >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.clipToRect : if r1 == null
org.apache.pdfbox.contentstream.PDFStreamEngine.clipToRect : if r1 == null >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.clipToRect : $r3 = virtualinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.clipToRect : $r3 = virtualinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.clipToRect : $r4 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.clipToRect : $r4 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.clipToRect : r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.PDRectangle: java.awt.geom.GeneralPath transform(org.apache.pdfbox.util.Matrix)>($r4)
org.apache.pdfbox.contentstream.PDFStreamEngine.clipToRect : r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.PDRectangle: java.awt.geom.GeneralPath transform(org.apache.pdfbox.util.Matrix)>($r4) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : f0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftX()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : f0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftX()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : f1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftY()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : f1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getLowerLeftY()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : f2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getUpperRightX()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : f2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getUpperRightX()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : f3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getUpperRightY()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : f3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: float getUpperRightY()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : r2 = virtualinvoke r1.<org.apache.pdfbox.util.Matrix: java.awt.geom.Point2D$Float transformPoint(float,float)>(f0, f1)
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : r2 = virtualinvoke r1.<org.apache.pdfbox.util.Matrix: java.awt.geom.Point2D$Float transformPoint(float,float)>(f0, f1) >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : $r1 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.transformPoint : $r1 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : f2 = $r1[0]
org.apache.pdfbox.util.Matrix.transformPoint : f2 = $r1[0] >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : $r2 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.transformPoint : $r2 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : f3 = $r2[1]
org.apache.pdfbox.util.Matrix.transformPoint : f3 = $r2[1] >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : $r3 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.transformPoint : $r3 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : f4 = $r3[3]
org.apache.pdfbox.util.Matrix.transformPoint : f4 = $r3[3] >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : $r4 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.transformPoint : $r4 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : f5 = $r4[4]
org.apache.pdfbox.util.Matrix.transformPoint : f5 = $r4[4] >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : $r5 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.transformPoint : $r5 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : f6 = $r5[6]
org.apache.pdfbox.util.Matrix.transformPoint : f6 = $r5[6] >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : $r6 = r0.<org.apache.pdfbox.util.Matrix: float[] single>
org.apache.pdfbox.util.Matrix.transformPoint : $r6 = r0.<org.apache.pdfbox.util.Matrix: float[] single> >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : f7 = $r6[7]
org.apache.pdfbox.util.Matrix.transformPoint : f7 = $r6[7] >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : $r7 = new java.awt.geom.Point2D$Float
org.apache.pdfbox.util.Matrix.transformPoint : $r7 = new java.awt.geom.Point2D$Float >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : $f9 = f0 * f2
org.apache.pdfbox.util.Matrix.transformPoint : $f9 = f0 * f2 >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : $f8 = f1 * f4
org.apache.pdfbox.util.Matrix.transformPoint : $f8 = f1 * f4 >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : $f10 = $f9 + $f8
org.apache.pdfbox.util.Matrix.transformPoint : $f10 = $f9 + $f8 >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : $f15 = $f10 + f6
org.apache.pdfbox.util.Matrix.transformPoint : $f15 = $f10 + f6 >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : $f12 = f0 * f3
org.apache.pdfbox.util.Matrix.transformPoint : $f12 = f0 * f3 >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : $f11 = f1 * f5
org.apache.pdfbox.util.Matrix.transformPoint : $f11 = f1 * f5 >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : $f13 = $f12 + $f11
org.apache.pdfbox.util.Matrix.transformPoint : $f13 = $f12 + $f11 >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : $f14 = $f13 + f7
org.apache.pdfbox.util.Matrix.transformPoint : $f14 = $f13 + f7 >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : specialinvoke $r7.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f15, $f14)
org.apache.pdfbox.util.Matrix.transformPoint : specialinvoke $r7.<java.awt.geom.Point2D$Float: void <init>(float,float)>($f15, $f14) >>>>>>>> org.apache.pdfbox.util.Matrix.transformPoint : return $r7
org.apache.pdfbox.util.Matrix.transformPoint : return $r7 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : r3 = virtualinvoke r1.<org.apache.pdfbox.util.Matrix: java.awt.geom.Point2D$Float transformPoint(float,float)>(f2, f1)
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : r3 = virtualinvoke r1.<org.apache.pdfbox.util.Matrix: java.awt.geom.Point2D$Float transformPoint(float,float)>(f2, f1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : r4 = virtualinvoke r1.<org.apache.pdfbox.util.Matrix: java.awt.geom.Point2D$Float transformPoint(float,float)>(f2, f3)
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : r4 = virtualinvoke r1.<org.apache.pdfbox.util.Matrix: java.awt.geom.Point2D$Float transformPoint(float,float)>(f2, f3) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : r5 = virtualinvoke r1.<org.apache.pdfbox.util.Matrix: java.awt.geom.Point2D$Float transformPoint(float,float)>(f0, f3)
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : r5 = virtualinvoke r1.<org.apache.pdfbox.util.Matrix: java.awt.geom.Point2D$Float transformPoint(float,float)>(f0, f3) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $r7 = new java.awt.geom.GeneralPath
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $r7 = new java.awt.geom.GeneralPath >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : specialinvoke $r7.<java.awt.geom.GeneralPath: void <init>()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : specialinvoke $r7.<java.awt.geom.GeneralPath: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $d0 = virtualinvoke r2.<java.awt.geom.Point2D$Float: double getX()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $d0 = virtualinvoke r2.<java.awt.geom.Point2D$Float: double getX()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $d1 = virtualinvoke r2.<java.awt.geom.Point2D$Float: double getY()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $d1 = virtualinvoke r2.<java.awt.geom.Point2D$Float: double getY()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : virtualinvoke $r7.<java.awt.geom.GeneralPath: void moveTo(double,double)>($d0, $d1)
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : virtualinvoke $r7.<java.awt.geom.GeneralPath: void moveTo(double,double)>($d0, $d1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $d2 = virtualinvoke r3.<java.awt.geom.Point2D$Float: double getX()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $d2 = virtualinvoke r3.<java.awt.geom.Point2D$Float: double getX()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $d3 = virtualinvoke r3.<java.awt.geom.Point2D$Float: double getY()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $d3 = virtualinvoke r3.<java.awt.geom.Point2D$Float: double getY()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : virtualinvoke $r7.<java.awt.geom.GeneralPath: void lineTo(double,double)>($d2, $d3)
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : virtualinvoke $r7.<java.awt.geom.GeneralPath: void lineTo(double,double)>($d2, $d3) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $d4 = virtualinvoke r4.<java.awt.geom.Point2D$Float: double getX()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $d4 = virtualinvoke r4.<java.awt.geom.Point2D$Float: double getX()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $d5 = virtualinvoke r4.<java.awt.geom.Point2D$Float: double getY()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $d5 = virtualinvoke r4.<java.awt.geom.Point2D$Float: double getY()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : virtualinvoke $r7.<java.awt.geom.GeneralPath: void lineTo(double,double)>($d4, $d5)
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : virtualinvoke $r7.<java.awt.geom.GeneralPath: void lineTo(double,double)>($d4, $d5) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $d6 = virtualinvoke r5.<java.awt.geom.Point2D$Float: double getX()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $d6 = virtualinvoke r5.<java.awt.geom.Point2D$Float: double getX()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $d7 = virtualinvoke r5.<java.awt.geom.Point2D$Float: double getY()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : $d7 = virtualinvoke r5.<java.awt.geom.Point2D$Float: double getY()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : virtualinvoke $r7.<java.awt.geom.GeneralPath: void lineTo(double,double)>($d6, $d7)
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : virtualinvoke $r7.<java.awt.geom.GeneralPath: void lineTo(double,double)>($d6, $d7) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : virtualinvoke $r7.<java.awt.geom.GeneralPath: void closePath()>()
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : virtualinvoke $r7.<java.awt.geom.GeneralPath: void closePath()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.transform : return $r7
org.apache.pdfbox.pdmodel.common.PDRectangle.transform : return $r7 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.clipToRect : $r5 = virtualinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.clipToRect : $r5 = virtualinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.clipToRect : virtualinvoke $r5.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: void intersectClippingPath(java.awt.geom.GeneralPath)>(r2)
org.apache.pdfbox.contentstream.PDFStreamEngine.clipToRect : virtualinvoke $r5.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: void intersectClippingPath(java.awt.geom.GeneralPath)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : $r2 = new java.awt.geom.Area
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : $r2 = new java.awt.geom.Area >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : specialinvoke $r2.<java.awt.geom.Area: void <init>(java.awt.Shape)>(r1)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : specialinvoke $r2.<java.awt.geom.Area: void <init>(java.awt.Shape)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: void intersectClippingPath(java.awt.geom.Area)>($r2)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: void intersectClippingPath(java.awt.geom.Area)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : $z0 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: boolean isClippingPathDirty>
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : $z0 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: boolean isClippingPathDirty> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : if $z0 != 0
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : $r4 = new java.awt.geom.Area
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : $r4 = new java.awt.geom.Area >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : specialinvoke $r4.<java.awt.geom.Area: void <init>()>()
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : specialinvoke $r4.<java.awt.geom.Area: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : $r5 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: java.awt.geom.Area clippingPath>
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : $r5 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: java.awt.geom.Area clippingPath> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : virtualinvoke $r4.<java.awt.geom.Area: void add(java.awt.geom.Area)>($r5)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : virtualinvoke $r4.<java.awt.geom.Area: void add(java.awt.geom.Area)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: java.awt.geom.Area clippingPath> = $r4
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: java.awt.geom.Area clippingPath> = $r4 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: boolean isClippingPathDirty> = 1
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: boolean isClippingPathDirty> = 1 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: java.awt.geom.Area clippingPath>
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : $r3 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: java.awt.geom.Area clippingPath> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : virtualinvoke $r3.<java.awt.geom.Area: void intersect(java.awt.geom.Area)>(r1)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.intersectClippingPath : virtualinvoke $r3.<java.awt.geom.Area: void intersect(java.awt.geom.Area)>(r1) >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : specialinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: void processStreamOperators(org.apache.pdfbox.contentstream.PDContentStream)>(r1)
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : specialinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: void processStreamOperators(org.apache.pdfbox.contentstream.PDContentStream)>(r1) >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : $r3 = new java.util.ArrayList
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : $r3 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : specialinvoke $r3.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : specialinvoke $r3.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : r10 = $r3
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : r10 = $r3 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : $r4 = new org.apache.pdfbox.pdfparser.PDFStreamParser
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : $r4 = new org.apache.pdfbox.pdfparser.PDFStreamParser >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : specialinvoke $r4.<org.apache.pdfbox.pdfparser.PDFStreamParser: void <init>(org.apache.pdfbox.contentstream.PDContentStream)>(r1)
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : specialinvoke $r4.<org.apache.pdfbox.pdfparser.PDFStreamParser: void <init>(org.apache.pdfbox.contentstream.PDContentStream)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getContents : $r7 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page>
org.apache.pdfbox.pdmodel.PDPage.getContents : $r7 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getContents : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CONTENTS>
org.apache.pdfbox.pdmodel.PDPage.getContents : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CONTENTS> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getContents : r1 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r6)
org.apache.pdfbox.pdmodel.PDPage.getContents : r1 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r6) >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getContents : $z0 = r1 instanceof org.apache.pdfbox.cos.COSStream
org.apache.pdfbox.pdmodel.PDPage.getContents : $z0 = r1 instanceof org.apache.pdfbox.cos.COSStream >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getContents : if $z0 == 0
org.apache.pdfbox.pdmodel.PDPage.getContents : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getContents : $r18 = (org.apache.pdfbox.cos.COSStream) r1
org.apache.pdfbox.pdmodel.PDPage.getContents : $r18 = (org.apache.pdfbox.cos.COSStream) r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getContents : $r19 = virtualinvoke $r18.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSInputStream createInputStream()>()
org.apache.pdfbox.pdmodel.PDPage.getContents : $r19 = virtualinvoke $r18.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSInputStream createInputStream()>() >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : goto [?= $r6 = new org.apache.pdfbox.cos.COSInputStream]
org.apache.pdfbox.cos.COSInputStream.create : goto [?= $r6 = new org.apache.pdfbox.cos.COSInputStream] >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getContents : return $r19
org.apache.pdfbox.pdmodel.PDPage.getContents : return $r19 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : r11 = virtualinvoke $r4.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.Object parseNextToken()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : r11 = virtualinvoke $r4.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.Object parseNextToken()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : $r1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input>
org.apache.pdfbox.pdfparser.InputStreamSource.read : $r1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input> >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : i0 = virtualinvoke $r1.<java.io.PushbackInputStream: int read()>()
org.apache.pdfbox.pdfparser.InputStreamSource.read : i0 = virtualinvoke $r1.<java.io.PushbackInputStream: int read()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $r1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input>
org.apache.pdfbox.io.RandomAccessInputStream.read : $r1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $z0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>()
org.apache.pdfbox.io.RandomAccessInputStream.read : $z0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : i0 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: int read()>()
org.apache.pdfbox.io.RandomAccessInputStream.read : i0 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: int read()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.read : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l1 = (long) $i0
org.apache.pdfbox.io.ScratchFileBuffer.read : $l1 = (long) $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l4 = $l2 + $l1
org.apache.pdfbox.io.ScratchFileBuffer.read : $l4 = $l2 + $l1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.read : $l3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $b5 = $l4 cmp $l3
org.apache.pdfbox.io.ScratchFileBuffer.read : $b5 = $l4 cmp $l3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : if $b5 < 0
org.apache.pdfbox.io.ScratchFileBuffer.read : if $b5 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i7 = $i6 + 1
org.apache.pdfbox.io.ScratchFileBuffer.read : $i7 = $i6 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i7
org.apache.pdfbox.io.ScratchFileBuffer.read : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i7 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $b8 = $r1[$i6]
org.apache.pdfbox.io.ScratchFileBuffer.read : $b8 = $r1[$i6] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $s9 = $b8 & 255
org.apache.pdfbox.io.ScratchFileBuffer.read : $s9 = $b8 & 255 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : return $s9
org.apache.pdfbox.io.ScratchFileBuffer.read : return $s9 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $l1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position>
org.apache.pdfbox.io.RandomAccessInputStream.read : $l1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $l2 = $l1 + 1L
org.apache.pdfbox.io.RandomAccessInputStream.read : $l2 = $l1 + 1L >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position> = $l2
org.apache.pdfbox.io.RandomAccessInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position> = $l2 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : return i0
org.apache.pdfbox.io.RandomAccessInputStream.read : return i0 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : $i1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position>
org.apache.pdfbox.pdfparser.InputStreamSource.read : $i1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position> >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : $i2 = $i1 + 1
org.apache.pdfbox.pdfparser.InputStreamSource.read : $i2 = $i1 + 1 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position> = $i2
org.apache.pdfbox.pdfparser.InputStreamSource.read : r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position> = $i2 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : return i0
org.apache.pdfbox.pdfparser.InputStreamSource.read : return i0 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.unread : $r1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input>
org.apache.pdfbox.pdfparser.InputStreamSource.unread : $r1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input> >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.unread : virtualinvoke $r1.<java.io.PushbackInputStream: void unread(int)>(i0)
org.apache.pdfbox.pdfparser.InputStreamSource.unread : virtualinvoke $r1.<java.io.PushbackInputStream: void unread(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.unread : $i1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position>
org.apache.pdfbox.pdfparser.InputStreamSource.unread : $i1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position> >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.unread : $i2 = $i1 - 1
org.apache.pdfbox.pdfparser.InputStreamSource.unread : $i2 = $i1 - 1 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.unread : r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position> = $i2
org.apache.pdfbox.pdfparser.InputStreamSource.unread : r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position> = $i2 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r1 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r1 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.peek : $r1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input>
org.apache.pdfbox.pdfparser.InputStreamSource.peek : $r1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input> >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.peek : i0 = virtualinvoke $r1.<java.io.PushbackInputStream: int read()>()
org.apache.pdfbox.pdfparser.InputStreamSource.peek : i0 = virtualinvoke $r1.<java.io.PushbackInputStream: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.peek : if i0 == -1
org.apache.pdfbox.pdfparser.InputStreamSource.peek : if i0 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.peek : $r2 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input>
org.apache.pdfbox.pdfparser.InputStreamSource.peek : $r2 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input> >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.peek : virtualinvoke $r2.<java.io.PushbackInputStream: void unread(int)>(i0)
org.apache.pdfbox.pdfparser.InputStreamSource.peek : virtualinvoke $r2.<java.io.PushbackInputStream: void unread(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.peek : return i0
org.apache.pdfbox.pdfparser.InputStreamSource.peek : return i0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $b1 = (byte) i0
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $b1 = (byte) i0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $b1 != -1
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $b1 != -1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : c9 = (char) i0
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : c9 = (char) i0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : tableswitch(c9) {     case 40:
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : tableswitch(c9) {     case 40: >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : r54 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.String readOperator()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : r54 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.String readOperator()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r2 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(4)
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(4) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r3 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r3 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : i4 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : i4 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == -1
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isWhitespace(int)>(i4)
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isWhitespace(int)>(i4) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if $z0 != 0
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isClosing(int)>(i4)
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isClosing(int)>(i4) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isClosing : if i0 != 93
org.apache.pdfbox.pdfparser.BaseParser.isClosing : if i0 != 93 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isClosing : $z0 = 0
org.apache.pdfbox.pdfparser.BaseParser.isClosing : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isClosing : return $z0
org.apache.pdfbox.pdfparser.BaseParser.isClosing : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if $z1 != 0
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == 91
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == 91 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == 60
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == 60 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == 40
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == 40 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == 47
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == 47 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 < 48
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 < 48 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 <= 57
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 <= 57 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r4 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r4 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $i1 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $i1 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : c0 = (char) $i1
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : c0 = (char) $i1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r5 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r5 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : i4 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : i4 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0)
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if c0 != 100
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if c0 != 100 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : goto [?= (branch)]
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : return $r10
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : return $r10 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r38 = virtualinvoke r54.<java.lang.String: java.lang.String trim()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r38 = virtualinvoke r54.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $i8 = virtualinvoke $r38.<java.lang.String: int length()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $i8 = virtualinvoke $r38.<java.lang.String: int length()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $i8 != 0
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $i8 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : r39 = staticinvoke <org.apache.pdfbox.contentstream.operator.Operator: org.apache.pdfbox.contentstream.operator.Operator getOperator(java.lang.String)>(r54)
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : r39 = staticinvoke <org.apache.pdfbox.contentstream.operator.Operator: org.apache.pdfbox.contentstream.operator.Operator getOperator(java.lang.String)>(r54) >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("ID")
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("ID") >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : if $z0 != 0
org.apache.pdfbox.contentstream.operator.Operator.getOperator : if $z0 != 0 >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("BI")
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("BI") >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : if $z1 == 0
org.apache.pdfbox.contentstream.operator.Operator.getOperator : if $z1 == 0 >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r2 = <org.apache.pdfbox.contentstream.operator.Operator: java.util.concurrent.ConcurrentMap operators>
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r2 = <org.apache.pdfbox.contentstream.operator.Operator: java.util.concurrent.ConcurrentMap operators> >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0)
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : r9 = (org.apache.pdfbox.contentstream.operator.Operator) $r3
org.apache.pdfbox.contentstream.operator.Operator.getOperator : r9 = (org.apache.pdfbox.contentstream.operator.Operator) $r3 >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : if r9 != null
org.apache.pdfbox.contentstream.operator.Operator.getOperator : if r9 != null >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r5 = <org.apache.pdfbox.contentstream.operator.Operator: java.util.concurrent.ConcurrentMap operators>
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r5 = <org.apache.pdfbox.contentstream.operator.Operator: java.util.concurrent.ConcurrentMap operators> >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r4 = new org.apache.pdfbox.contentstream.operator.Operator
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r4 = new org.apache.pdfbox.contentstream.operator.Operator >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : specialinvoke $r4.<org.apache.pdfbox.contentstream.operator.Operator: void <init>(java.lang.String)>(r0)
org.apache.pdfbox.contentstream.operator.Operator.getOperator : specialinvoke $r4.<org.apache.pdfbox.contentstream.operator.Operator: void <init>(java.lang.String)>(r0) >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r0, $r4)
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r0, $r4) >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : r9 = (org.apache.pdfbox.contentstream.operator.Operator) $r6
org.apache.pdfbox.contentstream.operator.Operator.getOperator : r9 = (org.apache.pdfbox.contentstream.operator.Operator) $r6 >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r7 = <org.apache.pdfbox.contentstream.operator.Operator: java.util.concurrent.ConcurrentMap operators>
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r7 = <org.apache.pdfbox.contentstream.operator.Operator: java.util.concurrent.ConcurrentMap operators> >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0)
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : r9 = (org.apache.pdfbox.contentstream.operator.Operator) $r8
org.apache.pdfbox.contentstream.operator.Operator.getOperator : r9 = (org.apache.pdfbox.contentstream.operator.Operator) $r8 >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : return r9
org.apache.pdfbox.contentstream.operator.Operator.getOperator : return r9 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : return r39
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : return r39 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : if r11 == null
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : if r11 == null >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : $z0 = r11 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : $z0 = r11 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : if $z0 == 0
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : if $z0 == 0 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : $z1 = r11 instanceof org.apache.pdfbox.contentstream.operator.Operator
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : $z1 = r11 instanceof org.apache.pdfbox.contentstream.operator.Operator >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : if $z1 == 0
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : if $z1 == 0 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : $r6 = (org.apache.pdfbox.contentstream.operator.Operator) r11
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : $r6 = (org.apache.pdfbox.contentstream.operator.Operator) r11 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: void processOperator(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)>($r6, r10)
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: void processOperator(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)>($r6, r10) >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator : r3 = virtualinvoke r1.<org.apache.pdfbox.contentstream.operator.Operator: java.lang.String getName()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator : r3 = virtualinvoke r1.<org.apache.pdfbox.contentstream.operator.Operator: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getName : $r1 = r0.<org.apache.pdfbox.contentstream.operator.Operator: java.lang.String theOperator>
org.apache.pdfbox.contentstream.operator.Operator.getName : $r1 = r0.<org.apache.pdfbox.contentstream.operator.Operator: java.lang.String theOperator> >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getName : return $r1
org.apache.pdfbox.contentstream.operator.Operator.getName : return $r1 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator : $r6 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Map operators>
org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator : $r6 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Map operators> >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3)
org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r3) >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator : r4 = (org.apache.pdfbox.contentstream.operator.OperatorProcessor) $r7
org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator : r4 = (org.apache.pdfbox.contentstream.operator.OperatorProcessor) $r7 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator : if r4 == null
org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator : if r4 == null >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator : virtualinvoke r4.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: void setContext(org.apache.pdfbox.contentstream.PDFStreamEngine)>(r0)
org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator : virtualinvoke r4.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: void setContext(org.apache.pdfbox.contentstream.PDFStreamEngine)>(r0) >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator : virtualinvoke r4.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: void process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)>(r1, r2)
org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator : virtualinvoke r4.<org.apache.pdfbox.contentstream.operator.OperatorProcessor: void process(org.apache.pdfbox.contentstream.operator.Operator,java.util.List)>(r1, r2) >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Save.process : $r3 = r0.<org.apache.pdfbox.contentstream.operator.state.Save: org.apache.pdfbox.contentstream.PDFStreamEngine context>
org.apache.pdfbox.contentstream.operator.state.Save.process : $r3 = r0.<org.apache.pdfbox.contentstream.operator.state.Save: org.apache.pdfbox.contentstream.PDFStreamEngine context> >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Save.process : virtualinvoke $r3.<org.apache.pdfbox.contentstream.PDFStreamEngine: void saveGraphicsState()>()
org.apache.pdfbox.contentstream.operator.state.Save.process : virtualinvoke $r3.<org.apache.pdfbox.contentstream.PDFStreamEngine: void saveGraphicsState()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsState : $r2 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack>
org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsState : $r2 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack> >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsState : $r1 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack>
org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsState : $r1 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack> >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsState : $r3 = virtualinvoke $r1.<java.util.Stack: java.lang.Object peek()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsState : $r3 = virtualinvoke $r1.<java.util.Stack: java.lang.Object peek()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsState : $r4 = (org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState) $r3
org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsState : $r4 = (org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState) $r3 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsState : $r5 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState clone()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsState : $r5 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState clone()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsState : virtualinvoke $r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r5)
org.apache.pdfbox.contentstream.PDFStreamEngine.saveGraphicsState : virtualinvoke $r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r5) >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator : goto [?= return]
org.apache.pdfbox.contentstream.PDFStreamEngine.processOperator : goto [?= return] >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : $r7 = new java.util.ArrayList
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : $r7 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : specialinvoke $r7.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : specialinvoke $r7.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : r10 = $r7
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : r10 = $r7 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : goto [?= r11 = virtualinvoke $r4.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.Object parseNextToken()>()]
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : goto [?= r11 = virtualinvoke $r4.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.Object parseNextToken()>()] >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r32 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r32 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : specialinvoke $r32.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : specialinvoke $r32.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9)
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c9) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r33 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r33 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : interfaceinvoke $r33.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : interfaceinvoke $r33.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if c9 != 45
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if c9 != 45 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if c9 == 46
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if c9 == 46 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $z10 = 1
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $z10 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : goto [?= z11 = $z10]
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : goto [?= z11 = $z10] >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : z11 = $z10
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : z11 = $z10 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r44 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r44 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $i12 = interfaceinvoke $r44.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $i12 = interfaceinvoke $r44.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $c13 = (char) $i12
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $c13 = (char) $i12 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $z12 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c13)
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $z12 = staticinvoke <java.lang.Character: boolean isDigit(char)>($c13) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $z12 != 0
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $z12 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c13)
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c13) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r34 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r34 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : interfaceinvoke $r34.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : interfaceinvoke $r34.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if z11 == 0
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if z11 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $c13 != 46
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $c13 != 46 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r35 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : r39 = staticinvoke <org.apache.pdfbox.cos.COSNumber: org.apache.pdfbox.cos.COSNumber get(java.lang.String)>($r35)
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : r39 = staticinvoke <org.apache.pdfbox.cos.COSNumber: org.apache.pdfbox.cos.COSNumber get(java.lang.String)>($r35) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : goto [?= return r39]
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : goto [?= return r39] >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : goto [?= (branch)]
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : $r5 = (org.apache.pdfbox.cos.COSBase) r11
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : $r5 = (org.apache.pdfbox.cos.COSBase) r11 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r5)
org.apache.pdfbox.contentstream.PDFStreamEngine.processStreamOperators : interfaceinvoke r10.<java.util.List: boolean add(java.lang.Object)>($r5) >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $i0 = interfaceinvoke r2.<java.util.List: int size()>()
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $i0 = interfaceinvoke r2.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : if $i0 >= 6
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : if $i0 >= 6 >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $z0 = virtualinvoke r0.<org.apache.pdfbox.contentstream.operator.state.Concatenate: boolean checkArrayTypesClass(java.util.List,java.lang.Class)>(r2, class "Lorg/apache/pdfbox/cos/COSNumber;")
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $z0 = virtualinvoke r0.<org.apache.pdfbox.contentstream.operator.state.Concatenate: boolean checkArrayTypesClass(java.util.List,java.lang.Class)>(r2, class "Lorg/apache/pdfbox/cos/COSNumber;") >>>>>>>> org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : if $z0 == 0
org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : if $z0 == 0 >>>>>>>> org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : r4 = (org.apache.pdfbox.cos.COSBase) $r5
org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : r4 = (org.apache.pdfbox.cos.COSBase) $r5 >>>>>>>> org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : $z1 = virtualinvoke r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r4)
org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : $z1 = virtualinvoke r2.<java.lang.Class: boolean isInstance(java.lang.Object)>(r4) >>>>>>>> org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : if $z1 != 0
org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : if $z1 != 0 >>>>>>>> org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : return 1
org.apache.pdfbox.contentstream.operator.OperatorProcessor.checkArrayTypesClass : return 1 >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : if $z0 != 0
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : if $z0 != 0 >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r10 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0)
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r10 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : r3 = (org.apache.pdfbox.cos.COSNumber) $r10
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : r3 = (org.apache.pdfbox.cos.COSNumber) $r10 >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r11 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1)
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r11 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(1) >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : r4 = (org.apache.pdfbox.cos.COSNumber) $r11
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : r4 = (org.apache.pdfbox.cos.COSNumber) $r11 >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r12 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(2)
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r12 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(2) >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : r5 = (org.apache.pdfbox.cos.COSNumber) $r12
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : r5 = (org.apache.pdfbox.cos.COSNumber) $r12 >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r13 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(3)
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r13 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(3) >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : r6 = (org.apache.pdfbox.cos.COSNumber) $r13
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : r6 = (org.apache.pdfbox.cos.COSNumber) $r13 >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r14 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(4)
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r14 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(4) >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : r7 = (org.apache.pdfbox.cos.COSNumber) $r14
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : r7 = (org.apache.pdfbox.cos.COSNumber) $r14 >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r15 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(5)
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r15 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(5) >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : r8 = (org.apache.pdfbox.cos.COSNumber) $r15
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : r8 = (org.apache.pdfbox.cos.COSNumber) $r15 >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r16 = new org.apache.pdfbox.util.Matrix
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r16 = new org.apache.pdfbox.util.Matrix >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $f0 = virtualinvoke r3.<org.apache.pdfbox.cos.COSNumber: float floatValue()>()
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $f0 = virtualinvoke r3.<org.apache.pdfbox.cos.COSNumber: float floatValue()>() >>>>>>>> org.apache.pdfbox.cos.COSInteger.floatValue : $l0 = r0.<org.apache.pdfbox.cos.COSInteger: long value>
org.apache.pdfbox.cos.COSInteger.floatValue : $l0 = r0.<org.apache.pdfbox.cos.COSInteger: long value> >>>>>>>> org.apache.pdfbox.cos.COSInteger.floatValue : $f0 = (float) $l0
org.apache.pdfbox.cos.COSInteger.floatValue : $f0 = (float) $l0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.floatValue : return $f0
org.apache.pdfbox.cos.COSInteger.floatValue : return $f0 >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $f1 = virtualinvoke r4.<org.apache.pdfbox.cos.COSNumber: float floatValue()>()
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $f1 = virtualinvoke r4.<org.apache.pdfbox.cos.COSNumber: float floatValue()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $f2 = virtualinvoke r5.<org.apache.pdfbox.cos.COSNumber: float floatValue()>()
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $f2 = virtualinvoke r5.<org.apache.pdfbox.cos.COSNumber: float floatValue()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $f3 = virtualinvoke r6.<org.apache.pdfbox.cos.COSNumber: float floatValue()>()
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $f3 = virtualinvoke r6.<org.apache.pdfbox.cos.COSNumber: float floatValue()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $f4 = virtualinvoke r7.<org.apache.pdfbox.cos.COSNumber: float floatValue()>()
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $f4 = virtualinvoke r7.<org.apache.pdfbox.cos.COSNumber: float floatValue()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $f5 = virtualinvoke r8.<org.apache.pdfbox.cos.COSNumber: float floatValue()>()
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $f5 = virtualinvoke r8.<org.apache.pdfbox.cos.COSNumber: float floatValue()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : specialinvoke $r16.<org.apache.pdfbox.util.Matrix: void <init>(float,float,float,float,float,float)>($f0, $f1, $f2, $f3, $f4, $f5)
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : specialinvoke $r16.<org.apache.pdfbox.util.Matrix: void <init>(float,float,float,float,float,float)>($f0, $f1, $f2, $f3, $f4, $f5) >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r17 = r0.<org.apache.pdfbox.contentstream.operator.state.Concatenate: org.apache.pdfbox.contentstream.PDFStreamEngine context>
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r17 = r0.<org.apache.pdfbox.contentstream.operator.state.Concatenate: org.apache.pdfbox.contentstream.PDFStreamEngine context> >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r18 = virtualinvoke $r17.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>()
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r18 = virtualinvoke $r17.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r19 = virtualinvoke $r18.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()>()
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : $r19 = virtualinvoke $r18.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Concatenate.process : virtualinvoke $r19.<org.apache.pdfbox.util.Matrix: void concatenate(org.apache.pdfbox.util.Matrix)>($r16)
org.apache.pdfbox.contentstream.operator.state.Concatenate.process : virtualinvoke $r19.<org.apache.pdfbox.util.Matrix: void concatenate(org.apache.pdfbox.util.Matrix)>($r16) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : r39 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.cos.COSName parseCOSName()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : r39 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.cos.COSName parseCOSName()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : $i0 = interfaceinvoke r2.<java.util.List: int size()>()
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : $i0 = interfaceinvoke r2.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : if $i0 >= 1
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : if $i0 >= 1 >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0)
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : $r7 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : r3 = (org.apache.pdfbox.cos.COSBase) $r7
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : r3 = (org.apache.pdfbox.cos.COSBase) $r7 >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : $z0 = r3 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : $z0 = r3 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : if $z0 != 0
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : if $z0 != 0 >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : r4 = (org.apache.pdfbox.cos.COSName) r3
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : r4 = (org.apache.pdfbox.cos.COSName) r3 >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : $r8 = r0.<org.apache.pdfbox.contentstream.operator.graphics.DrawObject: org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine context>
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : $r8 = r0.<org.apache.pdfbox.contentstream.operator.graphics.DrawObject: org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine context> >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : $r9 = virtualinvoke $r8.<org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine: org.apache.pdfbox.pdmodel.PDResources getResources()>()
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : $r9 = virtualinvoke $r8.<org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine: org.apache.pdfbox.pdmodel.PDResources getResources()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.getResources : $r1 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDResources resources>
org.apache.pdfbox.contentstream.PDFStreamEngine.getResources : $r1 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDResources resources> >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.getResources : return $r1
org.apache.pdfbox.contentstream.PDFStreamEngine.getResources : return $r1 >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : r5 = virtualinvoke $r9.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.pdmodel.graphics.PDXObject getXObject(org.apache.pdfbox.cos.COSName)>(r4)
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : r5 = virtualinvoke $r9.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.pdmodel.graphics.PDXObject getXObject(org.apache.pdfbox.cos.COSName)>(r4) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XOBJECT>
org.apache.pdfbox.pdmodel.PDResources.getXObject : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XOBJECT> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : r2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSObject getIndirect(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r4, r1)
org.apache.pdfbox.pdmodel.PDResources.getXObject : r2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSObject getIndirect(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r4, r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getIndirect : $r5 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary resources>
org.apache.pdfbox.pdmodel.PDResources.getIndirect : $r5 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary resources> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getIndirect : $r6 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.pdmodel.PDResources.getIndirect : $r6 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getIndirect : r3 = (org.apache.pdfbox.cos.COSDictionary) $r6
org.apache.pdfbox.pdmodel.PDResources.getIndirect : r3 = (org.apache.pdfbox.cos.COSDictionary) $r6 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getIndirect : if r3 != null
org.apache.pdfbox.pdmodel.PDResources.getIndirect : if r3 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getIndirect : r4 = virtualinvoke r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>(r2)
org.apache.pdfbox.pdmodel.PDResources.getIndirect : r4 = virtualinvoke r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getIndirect : $z0 = r4 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdmodel.PDResources.getIndirect : $z0 = r4 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getIndirect : if $z0 == 0
org.apache.pdfbox.pdmodel.PDResources.getIndirect : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getIndirect : $r7 = (org.apache.pdfbox.cos.COSObject) r4
org.apache.pdfbox.pdmodel.PDResources.getIndirect : $r7 = (org.apache.pdfbox.cos.COSObject) r4 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getIndirect : return $r7
org.apache.pdfbox.pdmodel.PDResources.getIndirect : return $r7 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : $r5 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.pdmodel.ResourceCache cache>
org.apache.pdfbox.pdmodel.PDResources.getXObject : $r5 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.pdmodel.ResourceCache cache> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : if $r5 == null
org.apache.pdfbox.pdmodel.PDResources.getXObject : if $r5 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : if r2 == null
org.apache.pdfbox.pdmodel.PDResources.getXObject : if r2 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : $r9 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.pdmodel.ResourceCache cache>
org.apache.pdfbox.pdmodel.PDResources.getXObject : $r9 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.pdmodel.ResourceCache cache> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : r10 = interfaceinvoke $r9.<org.apache.pdfbox.pdmodel.ResourceCache: org.apache.pdfbox.pdmodel.graphics.PDXObject getXObject(org.apache.pdfbox.cos.COSObject)>(r2)
org.apache.pdfbox.pdmodel.PDResources.getXObject : r10 = interfaceinvoke $r9.<org.apache.pdfbox.pdmodel.ResourceCache: org.apache.pdfbox.pdmodel.graphics.PDXObject getXObject(org.apache.pdfbox.cos.COSObject)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.DefaultResourceCache.getXObject : $r3 = r0.<org.apache.pdfbox.pdmodel.DefaultResourceCache: java.util.Map xobjects>
org.apache.pdfbox.pdmodel.DefaultResourceCache.getXObject : $r3 = r0.<org.apache.pdfbox.pdmodel.DefaultResourceCache: java.util.Map xobjects> >>>>>>>> org.apache.pdfbox.pdmodel.DefaultResourceCache.getXObject : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.DefaultResourceCache.getXObject : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.DefaultResourceCache.getXObject : r2 = (java.lang.ref.SoftReference) $r4
org.apache.pdfbox.pdmodel.DefaultResourceCache.getXObject : r2 = (java.lang.ref.SoftReference) $r4 >>>>>>>> org.apache.pdfbox.pdmodel.DefaultResourceCache.getXObject : if r2 == null
org.apache.pdfbox.pdmodel.DefaultResourceCache.getXObject : if r2 == null >>>>>>>> org.apache.pdfbox.pdmodel.DefaultResourceCache.getXObject : return null
org.apache.pdfbox.pdmodel.DefaultResourceCache.getXObject : return null >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : if r10 == null
org.apache.pdfbox.pdmodel.PDResources.getXObject : if r10 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XOBJECT>
org.apache.pdfbox.pdmodel.PDResources.getXObject : $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XOBJECT> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : r3 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSBase get(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r11, r1)
org.apache.pdfbox.pdmodel.PDResources.getXObject : r3 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSBase get(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r11, r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.get : $r4 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary resources>
org.apache.pdfbox.pdmodel.PDResources.get : $r4 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSDictionary resources> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.get : $r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.pdmodel.PDResources.get : $r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.get : r3 = (org.apache.pdfbox.cos.COSDictionary) $r5
org.apache.pdfbox.pdmodel.PDResources.get : r3 = (org.apache.pdfbox.cos.COSDictionary) $r5 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.get : if r3 != null
org.apache.pdfbox.pdmodel.PDResources.get : if r3 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.get : $r6 = virtualinvoke r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r2)
org.apache.pdfbox.pdmodel.PDResources.get : $r6 = virtualinvoke r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.get : return $r6
org.apache.pdfbox.pdmodel.PDResources.get : return $r6 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : if r3 != null
org.apache.pdfbox.pdmodel.PDResources.getXObject : if r3 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : $z0 = r3 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdmodel.PDResources.getXObject : $z0 = r3 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : if $z0 == 0
org.apache.pdfbox.pdmodel.PDResources.getXObject : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : r12 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.PDXObject: org.apache.pdfbox.pdmodel.graphics.PDXObject createXObject(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.pdmodel.PDResources)>(r3, r0)
org.apache.pdfbox.pdmodel.PDResources.getXObject : r12 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.PDXObject: org.apache.pdfbox.pdmodel.graphics.PDXObject createXObject(org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.pdmodel.PDResources)>(r3, r0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : if r0 != null
org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : if r0 != null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : $z0 = r0 instanceof org.apache.pdfbox.cos.COSStream
org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : $z0 = r0 instanceof org.apache.pdfbox.cos.COSStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : if $z0 != 0
org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : r2 = (org.apache.pdfbox.cos.COSStream) r0
org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : r2 = (org.apache.pdfbox.cos.COSStream) r0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SUBTYPE>
org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SUBTYPE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : r3 = virtualinvoke r2.<org.apache.pdfbox.cos.COSStream: java.lang.String getNameAsString(org.apache.pdfbox.cos.COSName)>($r6)
org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : r3 = virtualinvoke r2.<org.apache.pdfbox.cos.COSStream: java.lang.String getNameAsString(org.apache.pdfbox.cos.COSName)>($r6) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : r5 = null
org.apache.pdfbox.cos.COSDictionary.getNameAsString : r5 = null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.getNameAsString : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSDictionary.getNameAsString : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getNameAsString : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : $r4 = (org.apache.pdfbox.cos.COSName) r2
org.apache.pdfbox.cos.COSDictionary.getNameAsString : $r4 = (org.apache.pdfbox.cos.COSName) r2 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>()
org.apache.pdfbox.cos.COSDictionary.getNameAsString : r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : goto [?= return r5]
org.apache.pdfbox.cos.COSDictionary.getNameAsString : goto [?= return r5] >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : return r5
org.apache.pdfbox.cos.COSDictionary.getNameAsString : return r5 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName IMAGE>
org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName IMAGE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : $r8 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>()
org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : $r8 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r3)
org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : if $z1 == 0
org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : $r26 = new org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject
org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : $r26 = new org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : $r27 = new org.apache.pdfbox.pdmodel.common.PDStream
org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : $r27 = new org.apache.pdfbox.pdmodel.common.PDStream >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : specialinvoke $r27.<org.apache.pdfbox.pdmodel.common.PDStream: void <init>(org.apache.pdfbox.cos.COSStream)>(r2)
org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : specialinvoke $r27.<org.apache.pdfbox.pdmodel.common.PDStream: void <init>(org.apache.pdfbox.cos.COSStream)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : specialinvoke $r26.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: void <init>(org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.PDResources)>($r27, r1)
org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : specialinvoke $r26.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: void <init>(org.apache.pdfbox.pdmodel.common.PDStream,org.apache.pdfbox.pdmodel.PDResources)>($r27, r1) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : return $r26
org.apache.pdfbox.pdmodel.graphics.PDXObject.createXObject : return $r26 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : $r13 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.pdmodel.ResourceCache cache>
org.apache.pdfbox.pdmodel.PDResources.getXObject : $r13 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.pdmodel.ResourceCache cache> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : if $r13 == null
org.apache.pdfbox.pdmodel.PDResources.getXObject : if $r13 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : $z1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: boolean isAllowedCache(org.apache.pdfbox.pdmodel.graphics.PDXObject)>(r12)
org.apache.pdfbox.pdmodel.PDResources.getXObject : $z1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: boolean isAllowedCache(org.apache.pdfbox.pdmodel.graphics.PDXObject)>(r12) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $z0 = r1 instanceof org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $z0 = r1 instanceof org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : if $z0 == 0
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $r4 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.PDXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $r4 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.graphics.PDXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORSPACE>
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORSPACE> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : r2 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : r2 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $z1 = r2 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $z1 = r2 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : if $z1 == 0
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : r3 = (org.apache.pdfbox.cos.COSName) r2
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : r3 = (org.apache.pdfbox.cos.COSName) r2 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICECMYK>
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICECMYK> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $z2 = virtualinvoke r3.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>($r6)
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $z2 = virtualinvoke r3.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>($r6) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : if $z2 == 0
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICERGB>
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $r7 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICERGB> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $z3 = virtualinvoke r3.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>($r7)
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $z3 = virtualinvoke r3.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>($r7) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : if $z3 == 0
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEFAULT_RGB>
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEFAULT_RGB> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $z7 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: boolean hasColorSpace(org.apache.pdfbox.cos.COSName)>($r10)
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $z7 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: boolean hasColorSpace(org.apache.pdfbox.cos.COSName)>($r10) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.hasColorSpace : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORSPACE>
org.apache.pdfbox.pdmodel.PDResources.hasColorSpace : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COLORSPACE> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.hasColorSpace : $r3 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSBase get(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r2, r1)
org.apache.pdfbox.pdmodel.PDResources.hasColorSpace : $r3 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.cos.COSBase get(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r2, r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.get : return null
org.apache.pdfbox.pdmodel.PDResources.get : return null >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.hasColorSpace : if $r3 == null
org.apache.pdfbox.pdmodel.PDResources.hasColorSpace : if $r3 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.hasColorSpace : $z0 = 0
org.apache.pdfbox.pdmodel.PDResources.hasColorSpace : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.hasColorSpace : return $z0
org.apache.pdfbox.pdmodel.PDResources.hasColorSpace : return $z0 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : if $z7 == 0
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : if $z7 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICEGRAY>
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICEGRAY> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $z4 = virtualinvoke r3.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>($r8)
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $z4 = virtualinvoke r3.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>($r8) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : if $z4 == 0
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $z5 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: boolean hasColorSpace(org.apache.pdfbox.cos.COSName)>(r3)
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : $z5 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDResources: boolean hasColorSpace(org.apache.pdfbox.cos.COSName)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : if $z5 == 0
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : if $z5 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : return 1
org.apache.pdfbox.pdmodel.PDResources.isAllowedCache : return 1 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : if $z1 == 0
org.apache.pdfbox.pdmodel.PDResources.getXObject : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : $r6 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.pdmodel.ResourceCache cache>
org.apache.pdfbox.pdmodel.PDResources.getXObject : $r6 = r0.<org.apache.pdfbox.pdmodel.PDResources: org.apache.pdfbox.pdmodel.ResourceCache cache> >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : interfaceinvoke $r6.<org.apache.pdfbox.pdmodel.ResourceCache: void put(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.graphics.PDXObject)>(r2, r12)
org.apache.pdfbox.pdmodel.PDResources.getXObject : interfaceinvoke $r6.<org.apache.pdfbox.pdmodel.ResourceCache: void put(org.apache.pdfbox.cos.COSObject,org.apache.pdfbox.pdmodel.graphics.PDXObject)>(r2, r12) >>>>>>>> org.apache.pdfbox.pdmodel.DefaultResourceCache.put : $r4 = r0.<org.apache.pdfbox.pdmodel.DefaultResourceCache: java.util.Map xobjects>
org.apache.pdfbox.pdmodel.DefaultResourceCache.put : $r4 = r0.<org.apache.pdfbox.pdmodel.DefaultResourceCache: java.util.Map xobjects> >>>>>>>> org.apache.pdfbox.pdmodel.DefaultResourceCache.put : $r3 = new java.lang.ref.SoftReference
org.apache.pdfbox.pdmodel.DefaultResourceCache.put : $r3 = new java.lang.ref.SoftReference >>>>>>>> org.apache.pdfbox.pdmodel.DefaultResourceCache.put : specialinvoke $r3.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r2)
org.apache.pdfbox.pdmodel.DefaultResourceCache.put : specialinvoke $r3.<java.lang.ref.SoftReference: void <init>(java.lang.Object)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.DefaultResourceCache.put : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3)
org.apache.pdfbox.pdmodel.DefaultResourceCache.put : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r3) >>>>>>>> org.apache.pdfbox.pdmodel.PDResources.getXObject : return r12
org.apache.pdfbox.pdmodel.PDResources.getXObject : return r12 >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : if r5 != null
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : if r5 != null >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : $z1 = r5 instanceof org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : $z1 = r5 instanceof org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : if $z1 == 0
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : if $z1 == 0 >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : r6 = (org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject) r5
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : r6 = (org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject) r5 >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : $r14 = r0.<org.apache.pdfbox.contentstream.operator.graphics.DrawObject: org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine context>
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : $r14 = r0.<org.apache.pdfbox.contentstream.operator.graphics.DrawObject: org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine context> >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : virtualinvoke $r14.<org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine: void drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImage)>(r6)
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : virtualinvoke $r14.<org.apache.pdfbox.contentstream.PDFGraphicsStreamEngine: void drawImage(org.apache.pdfbox.pdmodel.graphics.image.PDImage)>(r6) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $r13 = virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>()
org.apache.pdfbox.rendering.PageDrawer.drawImage : $r13 = virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : r2 = virtualinvoke $r13.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()>()
org.apache.pdfbox.rendering.PageDrawer.drawImage : r2 = virtualinvoke $r13.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.util.Matrix getCurrentTransformationMatrix()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : r3 = virtualinvoke r2.<org.apache.pdfbox.util.Matrix: java.awt.geom.AffineTransform createAffineTransform()>()
org.apache.pdfbox.rendering.PageDrawer.drawImage : r3 = virtualinvoke r2.<org.apache.pdfbox.util.Matrix: java.awt.geom.AffineTransform createAffineTransform()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $z0 = interfaceinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: boolean getInterpolate()>()
org.apache.pdfbox.rendering.PageDrawer.drawImage : $z0 = interfaceinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: boolean getInterpolate()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getInterpolate : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getInterpolate : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getInterpolate : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INTERPOLATE>
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getInterpolate : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INTERPOLATE> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getInterpolate : $z0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: boolean getBoolean(org.apache.pdfbox.cos.COSName,boolean)>($r2, 0)
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getInterpolate : $z0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: boolean getBoolean(org.apache.pdfbox.cos.COSName,boolean)>($r2, 0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getInterpolate : return $z0
org.apache.pdfbox.pdmodel.graphics.image.PDImageXObject.getInterpolate : return $z0 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : if $z0 != 0
org.apache.pdfbox.rendering.PageDrawer.drawImage : if $z0 != 0 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $i11 = interfaceinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getWidth()>()
org.apache.pdfbox.rendering.PageDrawer.drawImage : $i11 = interfaceinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getWidth()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $l12 = (long) $i11
org.apache.pdfbox.rendering.PageDrawer.drawImage : $l12 = (long) $i11 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $d23 = virtualinvoke r3.<java.awt.geom.AffineTransform: double getScaleX()>()
org.apache.pdfbox.rendering.PageDrawer.drawImage : $d23 = virtualinvoke r3.<java.awt.geom.AffineTransform: double getScaleX()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $l13 = staticinvoke <java.lang.Math: long round(double)>($d23)
org.apache.pdfbox.rendering.PageDrawer.drawImage : $l13 = staticinvoke <java.lang.Math: long round(double)>($d23) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $b14 = $l12 cmp $l13
org.apache.pdfbox.rendering.PageDrawer.drawImage : $b14 = $l12 cmp $l13 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : if $b14 < 0
org.apache.pdfbox.rendering.PageDrawer.drawImage : if $b14 < 0 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $i15 = interfaceinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getHeight()>()
org.apache.pdfbox.rendering.PageDrawer.drawImage : $i15 = interfaceinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: int getHeight()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $l16 = (long) $i15
org.apache.pdfbox.rendering.PageDrawer.drawImage : $l16 = (long) $i15 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $d24 = virtualinvoke r3.<java.awt.geom.AffineTransform: double getScaleY()>()
org.apache.pdfbox.rendering.PageDrawer.drawImage : $d24 = virtualinvoke r3.<java.awt.geom.AffineTransform: double getScaleY()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $l17 = staticinvoke <java.lang.Math: long round(double)>($d24)
org.apache.pdfbox.rendering.PageDrawer.drawImage : $l17 = staticinvoke <java.lang.Math: long round(double)>($d24) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $b18 = $l16 cmp $l17
org.apache.pdfbox.rendering.PageDrawer.drawImage : $b18 = $l16 cmp $l17 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : if $b18 >= 0
org.apache.pdfbox.rendering.PageDrawer.drawImage : if $b18 >= 0 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $z5 = 0
org.apache.pdfbox.rendering.PageDrawer.drawImage : $z5 = 0 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : if $z5 != 0
org.apache.pdfbox.rendering.PageDrawer.drawImage : if $z5 != 0 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $z4 = interfaceinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: boolean isStencil()>()
org.apache.pdfbox.rendering.PageDrawer.drawImage : $z4 = interfaceinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: boolean isStencil()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : if $z4 == 0
org.apache.pdfbox.rendering.PageDrawer.drawImage : if $z4 == 0 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $z7 = interfaceinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: boolean isStencil()>()
org.apache.pdfbox.rendering.PageDrawer.drawImage : $z7 = interfaceinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: boolean isStencil()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : if $z7 == 0
org.apache.pdfbox.rendering.PageDrawer.drawImage : if $z7 == 0 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $r14 = interfaceinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: java.awt.image.BufferedImage getImage()>()
org.apache.pdfbox.rendering.PageDrawer.drawImage : $r14 = interfaceinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: java.awt.image.BufferedImage getImage()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : r66 = null
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : r66 = null >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r55 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICECMYK>
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r55 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICECMYK> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $z5 = virtualinvoke r65.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>($r55)
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $z5 = virtualinvoke r65.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>($r55) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if $z5 == 0
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if $z5 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r56 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICERGB>
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r56 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICERGB> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $z6 = virtualinvoke r65.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>($r56)
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $z6 = virtualinvoke r65.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>($r56) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if $z6 == 0
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if $z6 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r60 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEFAULT_RGB>
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r60 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEFAULT_RGB> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $z9 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDResources: boolean hasColorSpace(org.apache.pdfbox.cos.COSName)>($r60)
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $z9 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDResources: boolean hasColorSpace(org.apache.pdfbox.cos.COSName)>($r60) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if $z9 == 0
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if $z9 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r57 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICEGRAY>
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $r57 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DEVICEGRAY> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $z7 = virtualinvoke r65.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>($r57)
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $z7 = virtualinvoke r65.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>($r57) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if $z7 == 0
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if $z7 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $z11 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDResources: boolean hasColorSpace(org.apache.pdfbox.cos.COSName)>(r66)
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : $z11 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDResources: boolean hasColorSpace(org.apache.pdfbox.cos.COSName)>(r66) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if $z11 == 0
org.apache.pdfbox.pdmodel.graphics.color.PDColorSpace.create : if $z11 == 0 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : specialinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: void drawBufferedImage(java.awt.image.BufferedImage,java.awt.geom.AffineTransform)>($r14, r3)
org.apache.pdfbox.rendering.PageDrawer.drawImage : specialinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: void drawBufferedImage(java.awt.image.BufferedImage,java.awt.geom.AffineTransform)>($r14, r3) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $r4 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics>
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $r4 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $r5 = virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>()
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $r5 = virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $r6 = virtualinvoke $r5.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: java.awt.Composite getNonStrokingJavaComposite()>()
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $r6 = virtualinvoke $r5.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: java.awt.Composite getNonStrokingJavaComposite()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getNonStrokingJavaComposite : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.blend.BlendMode blendMode>
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getNonStrokingJavaComposite : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.blend.BlendMode blendMode> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getNonStrokingJavaComposite : $d0 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: double nonStrokingAlphaConstant>
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getNonStrokingJavaComposite : $d0 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: double nonStrokingAlphaConstant> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getNonStrokingJavaComposite : $f0 = (float) $d0
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getNonStrokingJavaComposite : $f0 = (float) $d0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getNonStrokingJavaComposite : $r2 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite: java.awt.Composite getInstance(org.apache.pdfbox.pdmodel.graphics.blend.BlendMode,float)>($r1, $f0)
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getNonStrokingJavaComposite : $r2 = staticinvoke <org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite: java.awt.Composite getInstance(org.apache.pdfbox.pdmodel.graphics.blend.BlendMode,float)>($r1, $f0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance : $b0 = f0 cmpg 0.0F
org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance : $b0 = f0 cmpg 0.0F >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance : if $b0 >= 0
org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance : if $b0 >= 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance : $b1 = f0 cmpl 1.0F
org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance : $b1 = f0 cmpl 1.0F >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance : if $b1 <= 0
org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance : if $b1 <= 0 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance : $r13 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode NORMAL>
org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance : $r13 = <org.apache.pdfbox.pdmodel.graphics.blend.BlendMode: org.apache.pdfbox.pdmodel.graphics.blend.SeparableBlendMode NORMAL> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance : if r0 != $r13
org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance : if r0 != $r13 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance : $r2 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, f0)
org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance : $r2 = staticinvoke <java.awt.AlphaComposite: java.awt.AlphaComposite getInstance(int,float)>(3, f0) >>>>>>>> org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance : return $r2
org.apache.pdfbox.pdmodel.graphics.blend.BlendComposite.getInstance : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getNonStrokingJavaComposite : return $r2
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getNonStrokingJavaComposite : return $r2 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : virtualinvoke $r4.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r6)
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : virtualinvoke $r4.<java.awt.Graphics2D: void setComposite(java.awt.Composite)>($r6) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : specialinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: void setClip()>()
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : specialinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: void setClip()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setClip : $r2 = virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>()
org.apache.pdfbox.rendering.PageDrawer.setClip : $r2 = virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setClip : r1 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: java.awt.geom.Area getCurrentClippingPath()>()
org.apache.pdfbox.rendering.PageDrawer.setClip : r1 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: java.awt.geom.Area getCurrentClippingPath()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getCurrentClippingPath : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: java.awt.geom.Area clippingPath>
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getCurrentClippingPath : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: java.awt.geom.Area clippingPath> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getCurrentClippingPath : return $r1
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getCurrentClippingPath : return $r1 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setClip : $r3 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.geom.Area lastClip>
org.apache.pdfbox.rendering.PageDrawer.setClip : $r3 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.geom.Area lastClip> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setClip : if r1 == $r3
org.apache.pdfbox.rendering.PageDrawer.setClip : if r1 == $r3 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setClip : $r4 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics>
org.apache.pdfbox.rendering.PageDrawer.setClip : $r4 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setClip : virtualinvoke $r4.<java.awt.Graphics2D: void setClip(java.awt.Shape)>(r1)
org.apache.pdfbox.rendering.PageDrawer.setClip : virtualinvoke $r4.<java.awt.Graphics2D: void setClip(java.awt.Shape)>(r1) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.setClip : r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.geom.Area lastClip> = r1
org.apache.pdfbox.rendering.PageDrawer.setClip : r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.geom.Area lastClip> = r1 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $r7 = virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>()
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $r7 = virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : r2 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask getSoftMask()>()
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : r2 = virtualinvoke $r7.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask getSoftMask()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getSoftMask : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask softMask>
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getSoftMask : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.pdmodel.graphics.state.PDSoftMask softMask> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getSoftMask : return $r1
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getSoftMask : return $r1 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : if r2 == null
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : if r2 == null >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $r8 = virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>()
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $r8 = virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState getGraphicsState()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : r21 = virtualinvoke $r8.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.cos.COSBase getTransfer()>()
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : r21 = virtualinvoke $r8.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.cos.COSBase getTransfer()>() >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getTransfer : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.cos.COSBase transfer>
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getTransfer : $r1 = r0.<org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState: org.apache.pdfbox.cos.COSBase transfer> >>>>>>>> org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getTransfer : return $r1
org.apache.pdfbox.pdmodel.graphics.state.PDGraphicsState.getTransfer : return $r1 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $z0 = r21 instanceof org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $z0 = r21 instanceof org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : if $z0 != 0
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : if $z0 != 0 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $z2 = r21 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $z2 = r21 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : if $z2 == 0
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : if $z2 == 0 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : i0 = virtualinvoke r16.<java.awt.image.BufferedImage: int getWidth(java.awt.image.ImageObserver)>(null)
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : i0 = virtualinvoke r16.<java.awt.image.BufferedImage: int getWidth(java.awt.image.ImageObserver)>(null) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : i1 = virtualinvoke r16.<java.awt.image.BufferedImage: int getHeight(java.awt.image.ImageObserver)>(null)
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : i1 = virtualinvoke r16.<java.awt.image.BufferedImage: int getHeight(java.awt.image.ImageObserver)>(null) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $r22 = new java.awt.geom.AffineTransform
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $r22 = new java.awt.geom.AffineTransform >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : specialinvoke $r22.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r1)
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : specialinvoke $r22.<java.awt.geom.AffineTransform: void <init>(java.awt.geom.AffineTransform)>(r1) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $d4 = (double) i0
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $d4 = (double) i0 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $d5 = 1.0 / $d4
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $d5 = 1.0 / $d4 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $d6 = (double) i1
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $d6 = (double) i1 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $d7 = -1.0 / $d6
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $d7 = -1.0 / $d6 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : virtualinvoke $r22.<java.awt.geom.AffineTransform: void scale(double,double)>($d5, $d7)
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : virtualinvoke $r22.<java.awt.geom.AffineTransform: void scale(double,double)>($d5, $d7) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $i2 = neg i1
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $i2 = neg i1 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $d8 = (double) $i2
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $d8 = (double) $i2 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : virtualinvoke $r22.<java.awt.geom.AffineTransform: void translate(double,double)>(0.0, $d8)
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : virtualinvoke $r22.<java.awt.geom.AffineTransform: void translate(double,double)>(0.0, $d8) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $r23 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics>
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : $r23 = r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics> >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : virtualinvoke $r23.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)>(r16, $r22, null)
org.apache.pdfbox.rendering.PageDrawer.drawBufferedImage : virtualinvoke $r23.<java.awt.Graphics2D: boolean drawImage(java.awt.Image,java.awt.geom.AffineTransform,java.awt.image.ImageObserver)>(r16, $r22, null) >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : $z8 = interfaceinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: boolean getInterpolate()>()
org.apache.pdfbox.rendering.PageDrawer.drawImage : $z8 = interfaceinvoke r1.<org.apache.pdfbox.pdmodel.graphics.image.PDImage: boolean getInterpolate()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : if $z8 != 0
org.apache.pdfbox.rendering.PageDrawer.drawImage : if $z8 != 0 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawImage : specialinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: void setRenderingHints()>()
org.apache.pdfbox.rendering.PageDrawer.drawImage : specialinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: void setRenderingHints()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : goto [?= return]
org.apache.pdfbox.contentstream.operator.graphics.DrawObject.process : goto [?= return] >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Restore.process : $r3 = r0.<org.apache.pdfbox.contentstream.operator.state.Restore: org.apache.pdfbox.contentstream.PDFStreamEngine context>
org.apache.pdfbox.contentstream.operator.state.Restore.process : $r3 = r0.<org.apache.pdfbox.contentstream.operator.state.Restore: org.apache.pdfbox.contentstream.PDFStreamEngine context> >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Restore.process : $i0 = virtualinvoke $r3.<org.apache.pdfbox.contentstream.PDFStreamEngine: int getGraphicsStackSize()>()
org.apache.pdfbox.contentstream.operator.state.Restore.process : $i0 = virtualinvoke $r3.<org.apache.pdfbox.contentstream.PDFStreamEngine: int getGraphicsStackSize()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.getGraphicsStackSize : $r1 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack>
org.apache.pdfbox.contentstream.PDFStreamEngine.getGraphicsStackSize : $r1 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack> >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.getGraphicsStackSize : $i0 = virtualinvoke $r1.<java.util.Stack: int size()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.getGraphicsStackSize : $i0 = virtualinvoke $r1.<java.util.Stack: int size()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.getGraphicsStackSize : return $i0
org.apache.pdfbox.contentstream.PDFStreamEngine.getGraphicsStackSize : return $i0 >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Restore.process : if $i0 <= 1
org.apache.pdfbox.contentstream.operator.state.Restore.process : if $i0 <= 1 >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Restore.process : $r5 = r0.<org.apache.pdfbox.contentstream.operator.state.Restore: org.apache.pdfbox.contentstream.PDFStreamEngine context>
org.apache.pdfbox.contentstream.operator.state.Restore.process : $r5 = r0.<org.apache.pdfbox.contentstream.operator.state.Restore: org.apache.pdfbox.contentstream.PDFStreamEngine context> >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Restore.process : virtualinvoke $r5.<org.apache.pdfbox.contentstream.PDFStreamEngine: void restoreGraphicsState()>()
org.apache.pdfbox.contentstream.operator.state.Restore.process : virtualinvoke $r5.<org.apache.pdfbox.contentstream.PDFStreamEngine: void restoreGraphicsState()>() >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.restoreGraphicsState : $r1 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack>
org.apache.pdfbox.contentstream.PDFStreamEngine.restoreGraphicsState : $r1 = r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack> >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.restoreGraphicsState : virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>()
org.apache.pdfbox.contentstream.PDFStreamEngine.restoreGraphicsState : virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>() >>>>>>>> org.apache.pdfbox.contentstream.operator.state.Restore.process : goto [?= return]
org.apache.pdfbox.contentstream.operator.state.Restore.process : goto [?= return] >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : return null
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : return null >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.util.Matrix initialMatrix> = r4
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.util.Matrix initialMatrix> = r4 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: void restoreGraphicsStack(java.util.Stack)>(r3)
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : virtualinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: void restoreGraphicsStack(java.util.Stack)>(r3) >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.restoreGraphicsStack : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack> = r1
org.apache.pdfbox.contentstream.PDFStreamEngine.restoreGraphicsStack : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: java.util.Stack graphicsStack> = r1 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : specialinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: void popResources(org.apache.pdfbox.pdmodel.PDResources)>(r2)
org.apache.pdfbox.contentstream.PDFStreamEngine.processStream : specialinvoke r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: void popResources(org.apache.pdfbox.pdmodel.PDResources)>(r2) >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.popResources : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDResources resources> = r1
org.apache.pdfbox.contentstream.PDFStreamEngine.popResources : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: org.apache.pdfbox.pdmodel.PDResources resources> = r1 >>>>>>>> org.apache.pdfbox.contentstream.PDFStreamEngine.processPage : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: boolean isProcessingPage> = 0
org.apache.pdfbox.contentstream.PDFStreamEngine.processPage : r0.<org.apache.pdfbox.contentstream.PDFStreamEngine: boolean isProcessingPage> = 0 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $r15 = virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.PDPage getPage()>()
org.apache.pdfbox.rendering.PageDrawer.drawPage : $r15 = virtualinvoke r0.<org.apache.pdfbox.rendering.PageDrawer: org.apache.pdfbox.pdmodel.PDPage getPage()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $r16 = virtualinvoke $r15.<org.apache.pdfbox.pdmodel.PDPage: java.util.List getAnnotations()>()
org.apache.pdfbox.rendering.PageDrawer.drawPage : $r16 = virtualinvoke $r15.<org.apache.pdfbox.pdmodel.PDPage: java.util.List getAnnotations()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getAnnotations : $r6 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page>
org.apache.pdfbox.pdmodel.PDPage.getAnnotations : $r6 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getAnnotations : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ANNOTS>
org.apache.pdfbox.pdmodel.PDPage.getAnnotations : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ANNOTS> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getAnnotations : $r7 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdmodel.PDPage.getAnnotations : $r7 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getAnnotations : r2 = (org.apache.pdfbox.cos.COSArray) $r7
org.apache.pdfbox.pdmodel.PDPage.getAnnotations : r2 = (org.apache.pdfbox.cos.COSArray) $r7 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getAnnotations : if r2 != null
org.apache.pdfbox.pdmodel.PDPage.getAnnotations : if r2 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getAnnotations : $r11 = new org.apache.pdfbox.pdmodel.common.COSArrayList
org.apache.pdfbox.pdmodel.PDPage.getAnnotations : $r11 = new org.apache.pdfbox.pdmodel.common.COSArrayList >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getAnnotations : $r13 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page>
org.apache.pdfbox.pdmodel.PDPage.getAnnotations : $r13 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getAnnotations : $r12 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ANNOTS>
org.apache.pdfbox.pdmodel.PDPage.getAnnotations : $r12 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ANNOTS> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getAnnotations : specialinvoke $r11.<org.apache.pdfbox.pdmodel.common.COSArrayList: void <init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)>($r13, $r12)
org.apache.pdfbox.pdmodel.PDPage.getAnnotations : specialinvoke $r11.<org.apache.pdfbox.pdmodel.common.COSArrayList: void <init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName)>($r13, $r12) >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getAnnotations : return $r11
org.apache.pdfbox.pdmodel.PDPage.getAnnotations : return $r11 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : r3 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.rendering.PageDrawer.drawPage : r3 = interfaceinvoke $r16.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.iterator : $r1 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: java.util.List actual>
org.apache.pdfbox.pdmodel.common.COSArrayList.iterator : $r1 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: java.util.List actual> >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.iterator : $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.pdmodel.common.COSArrayList.iterator : $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.iterator : return $r2
org.apache.pdfbox.pdmodel.common.COSArrayList.iterator : return $r2 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.rendering.PageDrawer.drawPage : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : if $z0 == 0
org.apache.pdfbox.rendering.PageDrawer.drawPage : if $z0 == 0 >>>>>>>> org.apache.pdfbox.rendering.PageDrawer.drawPage : r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics> = null
org.apache.pdfbox.rendering.PageDrawer.drawPage : r0.<org.apache.pdfbox.rendering.PageDrawer: java.awt.Graphics2D graphics> = null >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : virtualinvoke r4.<java.awt.Graphics2D: void dispose()>()
org.apache.pdfbox.rendering.PDFRenderer.renderImage : virtualinvoke r4.<java.awt.Graphics2D: void dispose()>() >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : return r15
org.apache.pdfbox.rendering.PDFRenderer.renderImage : return r15 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : return $r2
org.apache.pdfbox.rendering.PDFRenderer.renderImage : return $r2 >>>>>>>> org.apache.pdfbox.rendering.PDFRenderer.renderImage : return $r1
org.apache.pdfbox.rendering.PDFRenderer.renderImage : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r8 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.cos.COSDocument.close : $r8 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r11 = (org.apache.pdfbox.cos.COSObject) $r8
org.apache.pdfbox.cos.COSDocument.close : r11 = (org.apache.pdfbox.cos.COSObject) $r8 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r2 = virtualinvoke r11.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()
org.apache.pdfbox.cos.COSDocument.close : r2 = virtualinvoke r11.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $z3 = r2 instanceof org.apache.pdfbox.cos.COSStream
org.apache.pdfbox.cos.COSDocument.close : $z3 = r2 instanceof org.apache.pdfbox.cos.COSStream >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $z3 == 0
org.apache.pdfbox.cos.COSDocument.close : if $z3 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : goto [?= $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.cos.COSDocument.close : goto [?= $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r9 = (org.apache.pdfbox.cos.COSStream) r2
org.apache.pdfbox.cos.COSDocument.close : $r9 = (org.apache.pdfbox.cos.COSStream) r2 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : virtualinvoke $r9.<org.apache.pdfbox.cos.COSStream: void close()>()
org.apache.pdfbox.cos.COSDocument.close : virtualinvoke $r9.<org.apache.pdfbox.cos.COSStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : $r5 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.io.RandomAccessRead pdfSource>
org.apache.pdfbox.pdmodel.PDDocument.close : $r5 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.io.RandomAccessRead pdfSource> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: void close()>()
org.apache.pdfbox.pdmodel.PDDocument.close : interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: void close()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.io.RandomAccessFile raFile>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.io.RandomAccessFile raFile> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : virtualinvoke $r1.<java.io.RandomAccessFile: void close()>()
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : virtualinvoke $r1.<java.io.RandomAccessFile: void close()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : specialinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void deleteTempFile()>()
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : specialinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void deleteTempFile()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.deleteTempFile : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.io.File tempFile>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.deleteTempFile : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.io.File tempFile> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.deleteTempFile : if $r1 == null
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.deleteTempFile : if $r1 == null >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : $r2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.util.Map pageCache>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : $r2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.util.Map pageCache> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : interfaceinvoke $r2.<java.util.Map: void clear()>()
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : interfaceinvoke $r2.<java.util.Map: void clear()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: boolean isClosed> = 1
