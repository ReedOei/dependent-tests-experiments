org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly(long)>(-1L) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 0, l0, l0)
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 0, l0, l0) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : return $r0
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : return $r0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useMainMemory>
org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useMainMemory> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes>
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $b1 = $l0 cmp 0L
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : if $b1 < 0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : if $b1 < 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $z0 = 0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxStorageBytes>
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxStorageBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $b1 = $l0 cmp 0L
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : if $b1 <= 0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : if $b1 <= 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $z0 = 0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : return $z0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.setTrailer : r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer> = r1
org.apache.pdfbox.cos.COSDocument.setTrailer : r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer> = r1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : if r2 != null
org.apache.pdfbox.cos.COSDictionary.setItem : if r2 != null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
org.apache.pdfbox.cos.COSDictionary.setItem : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if r1 == null
org.apache.pdfbox.util.SmallMap.put : if r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if r2 != null
org.apache.pdfbox.util.SmallMap.put : if r2 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if $r5 != null
org.apache.pdfbox.util.SmallMap.put : if $r5 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10 = newarray (java.lang.Object)[2]
org.apache.pdfbox.util.SmallMap.put : $r10 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10[0] = r1
org.apache.pdfbox.util.SmallMap.put : $r10[0] = r1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10[1] = r2
org.apache.pdfbox.util.SmallMap.put : $r10[1] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r10
org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r10 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : return null
org.apache.pdfbox.util.SmallMap.put : return null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = null
org.apache.pdfbox.cos.COSName.getPDFName : r6 = null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : if r0 == null
org.apache.pdfbox.cos.COSName.getPDFName : if r0 == null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r1 = <org.apache.pdfbox.cos.COSName: java.util.Map commonNameMap>
org.apache.pdfbox.cos.COSName.getPDFName : $r1 = <org.apache.pdfbox.cos.COSName: java.util.Map commonNameMap> >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.apache.pdfbox.cos.COSName.getPDFName : $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r2
org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r2 >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : if r6 != null
org.apache.pdfbox.cos.COSName.getPDFName : if r6 != null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r3 = <org.apache.pdfbox.cos.COSName: java.util.Map nameMap>
org.apache.pdfbox.cos.COSName.getPDFName : $r3 = <org.apache.pdfbox.cos.COSName: java.util.Map nameMap> >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.apache.pdfbox.cos.COSName.getPDFName : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r4
org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r4 >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : return r6
org.apache.pdfbox.cos.COSName.getPDFName : return r6 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.put : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null
org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.isEmpty : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $i0 != 0
org.apache.pdfbox.util.SmallMap.isEmpty : if $i0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 0
org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : return $z0
org.apache.pdfbox.util.SmallMap.isEmpty : return $z0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0
org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if r1 != null
org.apache.pdfbox.util.SmallMap.findKey : if r1 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : i1 = 0
org.apache.pdfbox.util.SmallMap.findKey : i1 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findKey : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.findKey : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if i1 >= $i0
org.apache.pdfbox.util.SmallMap.findKey : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findKey : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r4 = $r3[i1]
org.apache.pdfbox.util.SmallMap.findKey : $r4 = $r3[i1] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4)
org.apache.pdfbox.util.SmallMap.findKey : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSName.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSName.equals : if $z0 == 0
org.apache.pdfbox.cos.COSName.equals : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r4 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.equals : $r4 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r2 = (org.apache.pdfbox.cos.COSName) r1
org.apache.pdfbox.cos.COSName.equals : $r2 = (org.apache.pdfbox.cos.COSName) r1 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r3 = $r2.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.equals : $r3 = $r2.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3)
org.apache.pdfbox.cos.COSName.equals : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : if $z1 == 0
org.apache.pdfbox.cos.COSName.equals : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z2 = 0
org.apache.pdfbox.cos.COSName.equals : $z2 = 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : return $z2
org.apache.pdfbox.cos.COSName.equals : return $z2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z1 == 0
org.apache.pdfbox.util.SmallMap.findKey : if $z1 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : i1 = i1 + 2
org.apache.pdfbox.util.SmallMap.findKey : i1 = i1 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.findKey : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : return -1
org.apache.pdfbox.util.SmallMap.findKey : return -1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if i0 >= 0
org.apache.pdfbox.util.SmallMap.put : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r8 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r8 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : i5 = lengthof $r8
org.apache.pdfbox.util.SmallMap.put : i5 = lengthof $r8 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i3 = i5 + 2
org.apache.pdfbox.util.SmallMap.put : $i3 = i5 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3 = newarray (java.lang.Object)[$i3]
org.apache.pdfbox.util.SmallMap.put : r3 = newarray (java.lang.Object)[$i3] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r9 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r9 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r3, 0, i5)
org.apache.pdfbox.util.SmallMap.put : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r3, 0, i5) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3[i5] = r1
org.apache.pdfbox.util.SmallMap.put : r3[i5] = r1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i4 = i5 + 1
org.apache.pdfbox.util.SmallMap.put : $i4 = i5 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3[$i4] = r2
org.apache.pdfbox.util.SmallMap.put : r3[$i4] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = r3
org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : r3 = null
org.apache.pdfbox.cos.COSDictionary.setItem : r3 = null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : if r2 == null
org.apache.pdfbox.cos.COSDictionary.setItem : if r2 == null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : r3 = interfaceinvoke r2.<org.apache.pdfbox.pdmodel.common.COSObjectable: org.apache.pdfbox.cos.COSBase getCOSObject()>()
org.apache.pdfbox.cos.COSDictionary.setItem : r3 = interfaceinvoke r2.<org.apache.pdfbox.pdmodel.common.COSObjectable: org.apache.pdfbox.cos.COSBase getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: org.apache.pdfbox.cos.COSArray rectArray>
org.apache.pdfbox.pdmodel.common.PDRectangle.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDRectangle: org.apache.pdfbox.cos.COSArray rectArray> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRectangle.getCOSObject : return $r1
org.apache.pdfbox.pdmodel.common.PDRectangle.getCOSObject : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, r3)
org.apache.pdfbox.cos.COSDictionary.setItem : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, r3) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.addPage : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDPageTree getPages()>()
org.apache.pdfbox.pdmodel.PDDocument.addPage : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDPageTree getPages()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getPages : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog getDocumentCatalog()>()
org.apache.pdfbox.pdmodel.PDDocument.getPages : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog getDocumentCatalog()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r3 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog documentCatalog>
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r3 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog documentCatalog> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : if $r3 != null
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : if $r3 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r4 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r4 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : r1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>()
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : r1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getTrailer : $r1 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.cos.COSDocument.getTrailer : $r1 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getTrailer : return $r1
org.apache.pdfbox.cos.COSDocument.getTrailer : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROOT>
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROOT> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z2 = 1
org.apache.pdfbox.cos.COSName.equals : $z2 = 1 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : goto [?= return $z2]
org.apache.pdfbox.cos.COSName.equals : goto [?= return $z2] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : return i1
org.apache.pdfbox.util.SmallMap.findKey : return i1 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : if i0 >= 0
org.apache.pdfbox.util.SmallMap.get : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.get : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $i1 = i0 + 1
org.apache.pdfbox.util.SmallMap.get : $i1 = i0 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r3 = $r2[$i1]
org.apache.pdfbox.util.SmallMap.get : $r3 = $r2[$i1] >>>>>>>> org.apache.pdfbox.util.SmallMap.get : return $r3
org.apache.pdfbox.util.SmallMap.get : return $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $z0 = r2 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $z0 = r2 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : if $z0 == 0
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r7 = new org.apache.pdfbox.pdmodel.PDDocumentCatalog
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r7 = new org.apache.pdfbox.pdmodel.PDDocumentCatalog >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r8 = (org.apache.pdfbox.cos.COSDictionary) r2
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r8 = (org.apache.pdfbox.cos.COSDictionary) r2 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : specialinvoke $r7.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: void <init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary)>(r0, $r8)
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : specialinvoke $r7.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: void <init>(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.cos.COSDictionary)>(r0, $r8) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog documentCatalog> = $r7
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog documentCatalog> = $r7 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : goto [?= $r9 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog documentCatalog>]
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : goto [?= $r9 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog documentCatalog>] >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r9 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog documentCatalog>
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : $r9 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocumentCatalog documentCatalog> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : return $r9
org.apache.pdfbox.pdmodel.PDDocument.getDocumentCatalog : return $r9 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getPages : $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: org.apache.pdfbox.pdmodel.PDPageTree getPages()>()
org.apache.pdfbox.pdmodel.PDDocument.getPages : $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: org.apache.pdfbox.pdmodel.PDPageTree getPages()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r1 = new org.apache.pdfbox.pdmodel.PDPageTree
org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r1 = new org.apache.pdfbox.pdmodel.PDPageTree >>>>>>>> org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r3 = r0.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: org.apache.pdfbox.cos.COSDictionary root>
org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r3 = r0.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: org.apache.pdfbox.cos.COSDictionary root> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PAGES>
org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PAGES> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r6 = (org.apache.pdfbox.cos.COSDictionary) $r4
org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r6 = (org.apache.pdfbox.cos.COSDictionary) $r4 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r5 = r0.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: org.apache.pdfbox.pdmodel.PDDocument document>
org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : $r5 = r0.<org.apache.pdfbox.pdmodel.PDDocumentCatalog: org.apache.pdfbox.pdmodel.PDDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : specialinvoke $r1.<org.apache.pdfbox.pdmodel.PDPageTree: void <init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.PDDocument)>($r6, $r5)
org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : specialinvoke $r1.<org.apache.pdfbox.pdmodel.PDPageTree: void <init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.PDDocument)>($r6, $r5) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getCOSName : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.getCOSName : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getCOSName : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSDictionary.getCOSName : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getCOSName : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getCOSName : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getCOSName : $r3 = (org.apache.pdfbox.cos.COSName) r2
org.apache.pdfbox.cos.COSDictionary.getCOSName : $r3 = (org.apache.pdfbox.cos.COSName) r2 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getCOSName : return $r3
org.apache.pdfbox.cos.COSDictionary.getCOSName : return $r3 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : return $r1
org.apache.pdfbox.pdmodel.PDDocumentCatalog.getPages : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getPages : return $r2
org.apache.pdfbox.pdmodel.PDDocument.getPages : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.addPage : virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDPageTree: void add(org.apache.pdfbox.pdmodel.PDPage)>(r1)
org.apache.pdfbox.pdmodel.PDDocument.addPage : virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDPageTree: void add(org.apache.pdfbox.pdmodel.PDPage)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : r13 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary getCOSObject()>()
org.apache.pdfbox.pdmodel.PDPageTree.add : r13 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page>
org.apache.pdfbox.pdmodel.PDPage.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getCOSObject : return $r1
org.apache.pdfbox.pdmodel.PDPage.getCOSObject : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PARENT>
org.apache.pdfbox.pdmodel.PDPageTree.add : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PARENT> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary root>
org.apache.pdfbox.pdmodel.PDPageTree.add : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary root> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r4, $r3)
org.apache.pdfbox.pdmodel.PDPageTree.add : virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r4, $r3) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r6 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary root>
org.apache.pdfbox.pdmodel.PDPageTree.add : $r6 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary root> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS>
org.apache.pdfbox.pdmodel.PDPageTree.add : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r7 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdmodel.PDPageTree.add : $r7 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : r2 = (org.apache.pdfbox.cos.COSArray) $r7
org.apache.pdfbox.pdmodel.PDPageTree.add : r2 = (org.apache.pdfbox.cos.COSArray) $r7 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : virtualinvoke r2.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>(r13)
org.apache.pdfbox.pdmodel.PDPageTree.add : virtualinvoke r2.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>(r13) >>>>>>>> org.apache.pdfbox.cos.COSArray.add : $r2 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.add : $r2 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.add : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSArray.add : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PARENT>
org.apache.pdfbox.pdmodel.PDPageTree.add : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PARENT> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName P>
org.apache.pdfbox.pdmodel.PDPageTree.add : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName P> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r10 = virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r9, $r8)
org.apache.pdfbox.pdmodel.PDPageTree.add : $r10 = virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>($r9, $r8) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if r3 != null
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if r3 != null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r3
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r3 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : r13 = (org.apache.pdfbox.cos.COSDictionary) $r10
org.apache.pdfbox.pdmodel.PDPageTree.add : r13 = (org.apache.pdfbox.cos.COSDictionary) $r10 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : if r13 == null
org.apache.pdfbox.pdmodel.PDPageTree.add : if r13 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r12 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COUNT>
org.apache.pdfbox.pdmodel.PDPageTree.add : $r12 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COUNT> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COUNT>
org.apache.pdfbox.pdmodel.PDPageTree.add : $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COUNT> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $i0 = virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName)>($r11)
org.apache.pdfbox.pdmodel.PDPageTree.add : $i0 = virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName)>($r11) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : $i0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>(r1, -1)
org.apache.pdfbox.cos.COSDictionary.getInt : $i0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>(r1, -1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : $i1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,int)>(r1, null, i0)
org.apache.pdfbox.cos.COSDictionary.getInt : $i1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName,int)>(r1, null, i0) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : i1 = i0
org.apache.pdfbox.cos.COSDictionary.getInt : i1 = i0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>(r1, r2)
org.apache.pdfbox.cos.COSDictionary.getInt : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSName)>(r1, r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : $z0 = r3 instanceof org.apache.pdfbox.cos.COSNumber
org.apache.pdfbox.cos.COSDictionary.getInt : $z0 = r3 instanceof org.apache.pdfbox.cos.COSNumber >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getInt : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : $r4 = (org.apache.pdfbox.cos.COSNumber) r3
org.apache.pdfbox.cos.COSDictionary.getInt : $r4 = (org.apache.pdfbox.cos.COSNumber) r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : i1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSNumber: int intValue()>()
org.apache.pdfbox.cos.COSDictionary.getInt : i1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSNumber: int intValue()>() >>>>>>>> org.apache.pdfbox.cos.COSInteger.intValue : $l0 = r0.<org.apache.pdfbox.cos.COSInteger: long value>
org.apache.pdfbox.cos.COSInteger.intValue : $l0 = r0.<org.apache.pdfbox.cos.COSInteger: long value> >>>>>>>> org.apache.pdfbox.cos.COSInteger.intValue : $i1 = (int) $l0
org.apache.pdfbox.cos.COSInteger.intValue : $i1 = (int) $l0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.intValue : return $i1
org.apache.pdfbox.cos.COSInteger.intValue : return $i1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : return i1
org.apache.pdfbox.cos.COSDictionary.getInt : return i1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : return $i1
org.apache.pdfbox.cos.COSDictionary.getInt : return $i1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getInt : return $i0
org.apache.pdfbox.cos.COSDictionary.getInt : return $i0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : $i1 = $i0 + 1
org.apache.pdfbox.pdmodel.PDPageTree.add : $i1 = $i0 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: void setInt(org.apache.pdfbox.cos.COSName,int)>($r12, $i1)
org.apache.pdfbox.pdmodel.PDPageTree.add : virtualinvoke r13.<org.apache.pdfbox.cos.COSDictionary: void setInt(org.apache.pdfbox.cos.COSName,int)>($r12, $i1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setInt : $l1 = (long) i0
org.apache.pdfbox.cos.COSDictionary.setInt : $l1 = (long) i0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setInt : $r2 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l1)
org.apache.pdfbox.cos.COSDictionary.setInt : $r2 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l1) >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $b2 = -100L cmp l0
org.apache.pdfbox.cos.COSInteger.get : $b2 = -100L cmp l0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : if $b2 > 0
org.apache.pdfbox.cos.COSInteger.get : if $b2 > 0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $b3 = l0 cmp 256L
org.apache.pdfbox.cos.COSInteger.get : $b3 = l0 cmp 256L >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : if $b3 > 0
org.apache.pdfbox.cos.COSInteger.get : if $b3 > 0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $i4 = (int) l0
org.apache.pdfbox.cos.COSInteger.get : $i4 = (int) l0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : i1 = $i4 - -100
org.apache.pdfbox.cos.COSInteger.get : i1 = $i4 - -100 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r1 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC>
org.apache.pdfbox.cos.COSInteger.get : $r1 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC> >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r2 = $r1[i1]
org.apache.pdfbox.cos.COSInteger.get : $r2 = $r1[i1] >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : if $r2 != null
org.apache.pdfbox.cos.COSInteger.get : if $r2 != null >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r3 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC>
org.apache.pdfbox.cos.COSInteger.get : $r3 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC> >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r4 = $r3[i1]
org.apache.pdfbox.cos.COSInteger.get : $r4 = $r3[i1] >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : return $r4
org.apache.pdfbox.cos.COSInteger.get : return $r4 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setInt : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, $r2)
org.apache.pdfbox.cos.COSDictionary.setInt : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, $r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r6 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r6 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i1 = i0 + 1
org.apache.pdfbox.util.SmallMap.put : $i1 = i0 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r11 = $r6[$i1]
org.apache.pdfbox.util.SmallMap.put : r11 = $r6[$i1] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r7 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r7 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i2 = i0 + 1
org.apache.pdfbox.util.SmallMap.put : $i2 = i0 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r7[$i2] = r2
org.apache.pdfbox.util.SmallMap.put : $r7[$i2] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : return r11
org.apache.pdfbox.util.SmallMap.put : return r11 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.add : if r13 != null
org.apache.pdfbox.pdmodel.PDPageTree.add : if r13 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r3 = null
org.apache.pdfbox.util.SmallMap.get : $r3 = null >>>>>>>> org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3]
org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3] >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if r2 == null
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if r2 == null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r2)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper: org.apache.pdfbox.cos.COSDictionary dictionary>
org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper: org.apache.pdfbox.cos.COSDictionary dictionary> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper.getCOSObject : return $r1
org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper.getCOSObject : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSName.getName : $r1 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.getName : $r1 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.getName : return $r1
org.apache.pdfbox.cos.COSName.getName : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setName : r3 = null
org.apache.pdfbox.cos.COSDictionary.setName : r3 = null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setName : if r2 == null
org.apache.pdfbox.cos.COSDictionary.setName : if r2 == null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setName : r3 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r2)
org.apache.pdfbox.cos.COSDictionary.setName : r3 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setName : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, r3)
org.apache.pdfbox.cos.COSDictionary.setName : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, r3) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r5 = new org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSName.getPDFName : $r5 = new org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : specialinvoke $r5.<org.apache.pdfbox.cos.COSName: void <init>(java.lang.String,boolean)>(r0, 0)
org.apache.pdfbox.cos.COSName.getPDFName : specialinvoke $r5.<org.apache.pdfbox.cos.COSName: void <init>(java.lang.String,boolean)>(r0, 0) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = $r5
org.apache.pdfbox.cos.COSName.getPDFName : r6 = $r5 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setDirection : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition: org.apache.pdfbox.cos.COSDictionary getCOSObject()>()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setDirection : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition: org.apache.pdfbox.cos.COSDictionary getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setDirection : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DI>
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setDirection : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DI> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setDirection : $r4 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDirection: org.apache.pdfbox.cos.COSBase getCOSBase()>()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setDirection : $r4 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDirection: org.apache.pdfbox.cos.COSBase getCOSBase()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDirection$1.getCOSBase : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName NONE>
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDirection$1.getCOSBase : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName NONE> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDirection$1.getCOSBase : return $r1
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionDirection$1.getCOSBase : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setDirection : virtualinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r3, $r4)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setDirection : virtualinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r3, $r4) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setFlyScale : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition: org.apache.pdfbox.cos.COSDictionary getCOSObject()>()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setFlyScale : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition: org.apache.pdfbox.cos.COSDictionary getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setFlyScale : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SS>
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setFlyScale : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SS> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setFlyScale : $r2 = new org.apache.pdfbox.cos.COSFloat
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setFlyScale : $r2 = new org.apache.pdfbox.cos.COSFloat >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setFlyScale : specialinvoke $r2.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>(f0)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setFlyScale : specialinvoke $r2.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>(f0) >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(46)
org.apache.pdfbox.cos.COSFloat.removeNullDigits : $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(46) >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $i0 <= -1
org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $i0 <= -1 >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".0")
org.apache.pdfbox.cos.COSFloat.removeNullDigits : $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".0") >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $z0 != 0
org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $z0 != 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("0")
org.apache.pdfbox.cos.COSFloat.removeNullDigits : $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("0") >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $z1 == 0
org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : return r1
org.apache.pdfbox.cos.COSFloat.removeNullDigits : return r1 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setFlyScale : virtualinvoke $r1.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r3, $r2)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.setFlyScale : virtualinvoke $r1.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r3, $r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setTransition : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page>
org.apache.pdfbox.pdmodel.PDPage.setTransition : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setTransition : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TRANS>
org.apache.pdfbox.pdmodel.PDPage.setTransition : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TRANS> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setTransition : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>($r2, r1)
org.apache.pdfbox.pdmodel.PDPage.setTransition : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.pdmodel.common.COSObjectable)>($r2, r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper.getCOSObject : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper: org.apache.pdfbox.cos.COSDictionary getCOSObject()>()
org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper.getCOSObject : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDDictionaryWrapper: org.apache.pdfbox.cos.COSDictionary getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setTransition : $r5 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page>
org.apache.pdfbox.pdmodel.PDPage.setTransition : $r5 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setTransition : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DUR>
org.apache.pdfbox.pdmodel.PDPage.setTransition : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DUR> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setTransition : $r4 = new org.apache.pdfbox.cos.COSFloat
org.apache.pdfbox.pdmodel.PDPage.setTransition : $r4 = new org.apache.pdfbox.cos.COSFloat >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setTransition : specialinvoke $r4.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>(f0)
org.apache.pdfbox.pdmodel.PDPage.setTransition : specialinvoke $r4.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>(f0) >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.setTransition : virtualinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r6, $r4)
org.apache.pdfbox.pdmodel.PDPage.setTransition : virtualinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r6, $r4) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : $r4 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdmodel.PDDocument.save : $r4 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : $z0 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDocument: boolean isClosed()>()
org.apache.pdfbox.pdmodel.PDDocument.save : $z0 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDocument: boolean isClosed()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.isClosed : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed>
org.apache.pdfbox.cos.COSDocument.isClosed : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> >>>>>>>> org.apache.pdfbox.cos.COSDocument.isClosed : return $z0
org.apache.pdfbox.cos.COSDocument.isClosed : return $z0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : if $z0 == 0
org.apache.pdfbox.pdmodel.PDDocument.save : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : $r5 = r0.<org.apache.pdfbox.pdmodel.PDDocument: java.util.Set fontsToSubset>
org.apache.pdfbox.pdmodel.PDDocument.save : $r5 = r0.<org.apache.pdfbox.pdmodel.PDDocument: java.util.Set fontsToSubset> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : r11 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
org.apache.pdfbox.pdmodel.PDDocument.save : r11 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdmodel.PDDocument.save : $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : if $z1 == 0
org.apache.pdfbox.pdmodel.PDDocument.save : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : $r6 = r0.<org.apache.pdfbox.pdmodel.PDDocument: java.util.Set fontsToSubset>
org.apache.pdfbox.pdmodel.PDDocument.save : $r6 = r0.<org.apache.pdfbox.pdmodel.PDDocument: java.util.Set fontsToSubset> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : interfaceinvoke $r6.<java.util.Set: void clear()>()
org.apache.pdfbox.pdmodel.PDDocument.save : interfaceinvoke $r6.<java.util.Set: void clear()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : $r7 = new org.apache.pdfbox.pdfwriter.COSWriter
org.apache.pdfbox.pdmodel.PDDocument.save : $r7 = new org.apache.pdfbox.pdfwriter.COSWriter >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : specialinvoke $r7.<org.apache.pdfbox.pdfwriter.COSWriter: void <init>(java.io.OutputStream)>(r1)
org.apache.pdfbox.pdmodel.PDDocument.save : specialinvoke $r7.<org.apache.pdfbox.pdfwriter.COSWriter: void <init>(java.io.OutputStream)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.setOutput : r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream output> = r1
org.apache.pdfbox.pdfwriter.COSWriter.setOutput : r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream output> = r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.setStandardOutput : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput> = r1
org.apache.pdfbox.pdfwriter.COSWriter.setStandardOutput : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput> = r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSWriter: void write(org.apache.pdfbox.pdmodel.PDDocument)>(r0)
org.apache.pdfbox.pdmodel.PDDocument.save : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSWriter: void write(org.apache.pdfbox.pdmodel.PDDocument)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void write(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface)>(r1, null)
org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void write(org.apache.pdfbox.pdmodel.PDDocument,org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface)>(r1, null) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r6 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDDocument: java.lang.Long getDocumentId()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : $r6 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDDocument: java.lang.Long getDocumentId()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentId : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: java.lang.Long documentId>
org.apache.pdfbox.pdmodel.PDDocument.getDocumentId : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: java.lang.Long documentId> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocumentId : return $r1
org.apache.pdfbox.pdmodel.PDDocument.getDocumentId : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if $r6 != null
org.apache.pdfbox.pdfwriter.COSWriter.write : if $r6 != null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : $l3 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : goto [?= r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)]
org.apache.pdfbox.pdfwriter.COSWriter.write : goto [?= r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.pdfbox.pdfwriter.COSWriter.write : r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument pdDocument> = r1
org.apache.pdfbox.pdfwriter.COSWriter.write : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument pdDocument> = r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface signatureInterface> = r2
org.apache.pdfbox.pdfwriter.COSWriter.write : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.interactive.digitalsignature.SignatureInterface signatureInterface> = r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>
org.apache.pdfbox.pdfwriter.COSWriter.write : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if $z0 == 0
org.apache.pdfbox.pdfwriter.COSWriter.write : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $z1 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDDocument: boolean isAllSecurityToBeRemoved()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : $z1 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.PDDocument: boolean isAllSecurityToBeRemoved()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.isAllSecurityToBeRemoved : $z0 = r0.<org.apache.pdfbox.pdmodel.PDDocument: boolean allSecurityToBeRemoved>
org.apache.pdfbox.pdmodel.PDDocument.isAllSecurityToBeRemoved : $z0 = r0.<org.apache.pdfbox.pdmodel.PDDocument: boolean allSecurityToBeRemoved> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.isAllSecurityToBeRemoved : return $z0
org.apache.pdfbox.pdmodel.PDDocument.isAllSecurityToBeRemoved : return $z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if $z1 == 0
org.apache.pdfbox.pdfwriter.COSWriter.write : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r8 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument pdDocument>
org.apache.pdfbox.pdfwriter.COSWriter.write : $r8 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument pdDocument> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r9 = virtualinvoke $r8.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryption getEncryption()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : $r9 = virtualinvoke $r8.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryption getEncryption()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getEncryption : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryption encryption>
org.apache.pdfbox.pdmodel.PDDocument.getEncryption : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryption encryption> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getEncryption : if $r1 != null
org.apache.pdfbox.pdmodel.PDDocument.getEncryption : if $r1 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getEncryption : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: boolean isEncrypted()>()
org.apache.pdfbox.pdmodel.PDDocument.getEncryption : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.PDDocument: boolean isEncrypted()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.isEncrypted : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdmodel.PDDocument.isEncrypted : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.isEncrypted : $z0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSDocument: boolean isEncrypted()>()
org.apache.pdfbox.pdmodel.PDDocument.isEncrypted : $z0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSDocument: boolean isEncrypted()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : z0 = 0
org.apache.pdfbox.cos.COSDocument.isEncrypted : z0 = 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : $r1 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.cos.COSDocument.isEncrypted : $r1 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : if $r1 == null
org.apache.pdfbox.cos.COSDocument.isEncrypted : if $r1 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.cos.COSDocument.isEncrypted : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCRYPT>
org.apache.pdfbox.cos.COSDocument.isEncrypted : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCRYPT> >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.cos.COSDocument.isEncrypted : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : if $r4 == null
org.apache.pdfbox.cos.COSDocument.isEncrypted : if $r4 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : $z1 = 0
org.apache.pdfbox.cos.COSDocument.isEncrypted : $z1 = 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : z0 = $z1
org.apache.pdfbox.cos.COSDocument.isEncrypted : z0 = $z1 >>>>>>>> org.apache.pdfbox.cos.COSDocument.isEncrypted : return z0
org.apache.pdfbox.cos.COSDocument.isEncrypted : return z0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.isEncrypted : return $z0
org.apache.pdfbox.pdmodel.PDDocument.isEncrypted : return $z0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getEncryption : if $z0 == 0
org.apache.pdfbox.pdmodel.PDDocument.getEncryption : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getEncryption : $r5 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryption encryption>
org.apache.pdfbox.pdmodel.PDDocument.getEncryption : $r5 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryption encryption> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getEncryption : return $r5
org.apache.pdfbox.pdmodel.PDDocument.getEncryption : return $r5 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if $r9 == null
org.apache.pdfbox.pdfwriter.COSWriter.write : if $r9 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> = 0
org.apache.pdfbox.pdfwriter.COSWriter.write : r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r36 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument pdDocument>
org.apache.pdfbox.pdfwriter.COSWriter.write : $r36 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument pdDocument> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r37 = virtualinvoke $r36.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : r37 = virtualinvoke $r36.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocument : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdmodel.PDDocument.getDocument : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getDocument : return $r1
org.apache.pdfbox.pdmodel.PDDocument.getDocument : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r38 = virtualinvoke r37.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : r38 = virtualinvoke r37.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r39 = null
org.apache.pdfbox.pdfwriter.COSWriter.write : r39 = null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : z6 = 1
org.apache.pdfbox.pdfwriter.COSWriter.write : z6 = 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r40 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ID>
org.apache.pdfbox.pdfwriter.COSWriter.write : $r40 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ID> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r4 = virtualinvoke r38.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r40)
org.apache.pdfbox.pdfwriter.COSWriter.write : r4 = virtualinvoke r38.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r40) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $z7 = r4 instanceof org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.pdfwriter.COSWriter.write : $z7 = r4 instanceof org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if $z7 == 0
org.apache.pdfbox.pdfwriter.COSWriter.write : if $z7 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if r39 == null
org.apache.pdfbox.pdfwriter.COSWriter.write : if r39 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if z6 != 0
org.apache.pdfbox.pdfwriter.COSWriter.write : if z6 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5")
org.apache.pdfbox.pdfwriter.COSWriter.write : r5 = staticinvoke <java.security.MessageDigest: java.security.MessageDigest getInstance(java.lang.String)>("MD5") >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : goto [?= $l0 = virtualinvoke r3.<java.lang.Long: long longValue()>()]
org.apache.pdfbox.pdfwriter.COSWriter.write : goto [?= $l0 = virtualinvoke r3.<java.lang.Long: long longValue()>()] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $l0 = virtualinvoke r3.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : $l0 = virtualinvoke r3.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0)
org.apache.pdfbox.pdfwriter.COSWriter.write : $r10 = staticinvoke <java.lang.Long: java.lang.String toString(long)>($l0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r11 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.write : $r11 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r12 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11)
org.apache.pdfbox.pdfwriter.COSWriter.write : $r12 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke r5.<java.security.MessageDigest: void update(byte[])>($r12)
org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke r5.<java.security.MessageDigest: void update(byte[])>($r12) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r13 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INFO>
org.apache.pdfbox.pdfwriter.COSWriter.write : $r13 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INFO> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r14 = virtualinvoke r38.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r13)
org.apache.pdfbox.pdfwriter.COSWriter.write : $r14 = virtualinvoke r38.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r13) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r42 = (org.apache.pdfbox.cos.COSDictionary) $r14
org.apache.pdfbox.pdfwriter.COSWriter.write : r42 = (org.apache.pdfbox.cos.COSDictionary) $r14 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if r42 == null
org.apache.pdfbox.pdfwriter.COSWriter.write : if r42 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : if z6 == 0
org.apache.pdfbox.pdfwriter.COSWriter.write : if z6 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r45 = new org.apache.pdfbox.cos.COSString
org.apache.pdfbox.pdfwriter.COSWriter.write : $r45 = new org.apache.pdfbox.cos.COSString >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r20 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : $r20 = virtualinvoke r5.<java.security.MessageDigest: byte[] digest()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : specialinvoke $r45.<org.apache.pdfbox.cos.COSString: void <init>(byte[])>($r20)
org.apache.pdfbox.pdfwriter.COSWriter.write : specialinvoke $r45.<org.apache.pdfbox.cos.COSString: void <init>(byte[])>($r20) >>>>>>>> org.apache.pdfbox.cos.COSString.setValue : $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>()
org.apache.pdfbox.cos.COSString.setValue : $r2 = virtualinvoke r1.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.apache.pdfbox.cos.COSString.setValue : $r3 = (byte[]) $r2
org.apache.pdfbox.cos.COSString.setValue : $r3 = (byte[]) $r2 >>>>>>>> org.apache.pdfbox.cos.COSString.setValue : r0.<org.apache.pdfbox.cos.COSString: byte[] bytes> = $r3
org.apache.pdfbox.cos.COSString.setValue : r0.<org.apache.pdfbox.cos.COSString: byte[] bytes> = $r3 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : goto [?= r46 = $r45]
org.apache.pdfbox.pdfwriter.COSWriter.write : goto [?= r46 = $r45] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : r46 = $r45
org.apache.pdfbox.pdfwriter.COSWriter.write : r46 = $r45 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r47 = $r45
org.apache.pdfbox.pdfwriter.COSWriter.write : $r47 = $r45 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : goto [?= $r17 = new org.apache.pdfbox.cos.COSArray]
org.apache.pdfbox.pdfwriter.COSWriter.write : goto [?= $r17 = new org.apache.pdfbox.cos.COSArray] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r17 = new org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.pdfwriter.COSWriter.write : $r17 = new org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : specialinvoke $r17.<org.apache.pdfbox.cos.COSArray: void <init>()>()
org.apache.pdfbox.pdfwriter.COSWriter.write : specialinvoke $r17.<org.apache.pdfbox.cos.COSArray: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke $r17.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>(r46)
org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke $r17.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>(r46) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke $r17.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r47)
org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke $r17.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r47) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : $r18 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ID>
org.apache.pdfbox.pdfwriter.COSWriter.write : $r18 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ID> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke r38.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r18, $r17)
org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke r38.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r18, $r17) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke r37.<org.apache.pdfbox.cos.COSDocument: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0)
org.apache.pdfbox.pdfwriter.COSWriter.write : virtualinvoke r37.<org.apache.pdfbox.cos.COSDocument: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSDocument.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromDocument(org.apache.pdfbox.cos.COSDocument)>(r0)
org.apache.pdfbox.cos.COSDocument.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromDocument(org.apache.pdfbox.cos.COSDocument)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if $z0 != 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteHeader(org.apache.pdfbox.cos.COSDocument)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteHeader(org.apache.pdfbox.cos.COSDocument)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.fdf.FDFDocument fdfDocument>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.fdf.FDFDocument fdfDocument> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : if $r2 == null
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : if $r2 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r3 = new java.lang.StringBuilder
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%PDF-")
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("%PDF-") >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument pdDocument>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdmodel.PDDocument pdDocument> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r6 = virtualinvoke $r5.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r6 = virtualinvoke $r5.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument getDocument()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $f0 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDocument: float getVersion()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $f0 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDocument: float getVersion()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getVersion : $f0 = r0.<org.apache.pdfbox.cos.COSDocument: float version>
org.apache.pdfbox.cos.COSDocument.getVersion : $f0 = r0.<org.apache.pdfbox.cos.COSDocument: float version> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getVersion : return $f0
org.apache.pdfbox.cos.COSDocument.getVersion : return $f0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r7 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r7 = staticinvoke <java.lang.Float: java.lang.String toString(float)>($f0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : r24 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : r24 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getStandardOutput : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput>
org.apache.pdfbox.pdfwriter.COSWriter.getStandardOutput : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getStandardOutput : return $r1
org.apache.pdfbox.pdfwriter.COSWriter.getStandardOutput : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r10 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r10 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r11 = virtualinvoke r24.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r10)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r11 = virtualinvoke r24.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r10) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r9.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r11)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r9.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r11) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setOnNewLine(boolean)>(0)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setOnNewLine(boolean)>(0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.setOnNewLine : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean onNewLine> = z0
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.setOnNewLine : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean onNewLine> = z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.OutputStream out>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.OutputStream out> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l3 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l3 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l2 = (long) i1
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l2 = (long) i1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l4 = $l3 + $l2
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l4 = $l3 + $l2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> = $l4
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> = $l4 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean isOnNewLine()>()
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean isOnNewLine()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.isOnNewLine : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean onNewLine>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.isOnNewLine : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean onNewLine> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.isOnNewLine : return $z0
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.isOnNewLine : return $z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : if $z0 != 0
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : $r1 = <org.apache.pdfbox.pdfwriter.COSStandardOutputStream: byte[] EOL>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : $r1 = <org.apache.pdfbox.pdfwriter.COSStandardOutputStream: byte[] EOL> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r1)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setOnNewLine(boolean)>(1)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeEOL : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setOnNewLine(boolean)>(1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r13 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r13 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r14 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] COMMENT>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r14 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] COMMENT> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r13.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r14)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r13.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r14) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r15 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r15 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r16 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] GARBAGE>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r16 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] GARBAGE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r15.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r16)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r15.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r16) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r17 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : $r17 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r17.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteHeader : virtualinvoke $r17.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : goto [?= virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteBody(org.apache.pdfbox.cos.COSDocument)>(r1)]
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : goto [?= virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteBody(org.apache.pdfbox.cos.COSDocument)>(r1)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteBody(org.apache.pdfbox.cos.COSDocument)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteBody(org.apache.pdfbox.cos.COSDocument)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROOT>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROOT> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r7 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r6)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r7 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r6) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r3 = (org.apache.pdfbox.cos.COSDictionary) $r7
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r3 = (org.apache.pdfbox.cos.COSDictionary) $r7 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INFO>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INFO> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r9 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r8)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r9 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r8) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r4 = (org.apache.pdfbox.cos.COSDictionary) $r9
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r4 = (org.apache.pdfbox.cos.COSDictionary) $r9 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCRYPT>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCRYPT> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r11 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r10)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : $r11 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r10) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r5 = (org.apache.pdfbox.cos.COSDictionary) $r11
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r5 = (org.apache.pdfbox.cos.COSDictionary) $r11 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : if r3 == null
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : if r3 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r3)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : r14 = r1
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : r14 = r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z0 = r1 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z0 = r1 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z0 == 0
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set writtenObjects>
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set writtenObjects> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z1 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z1 != 0
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set objectsToWriteSet>
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set objectsToWriteSet> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z2 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z2 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z2 != 0
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z2 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r4 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set actualsAdded>
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r4 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set actualsAdded> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z3 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r14)
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z3 = interfaceinvoke $r4.<java.util.Set: boolean contains(java.lang.Object)>(r14) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z3 != 0
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z3 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : r15 = null
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : r15 = null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : r16 = null
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : r16 = null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if r14 == null
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if r14 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r11 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r11 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r14)
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r14) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : r16 = (org.apache.pdfbox.cos.COSObjectKey) $r12
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : r16 = (org.apache.pdfbox.cos.COSObjectKey) $r12 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if r16 == null
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if r16 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r6 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r6 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z7 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r14)
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $z7 = interfaceinvoke $r6.<java.util.Map: boolean containsKey(java.lang.Object)>(r14) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z7 == 0
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : if $z7 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r17 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Deque objectsToWrite>
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r17 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Deque objectsToWrite> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : interfaceinvoke $r17.<java.util.Deque: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : interfaceinvoke $r17.<java.util.Deque: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r18 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set objectsToWriteSet>
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r18 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set objectsToWriteSet> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set actualsAdded>
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set actualsAdded> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r14)
org.apache.pdfbox.pdfwriter.COSWriter.addObjectToWrite : interfaceinvoke $r5.<java.util.Set: boolean add(java.lang.Object)>(r14) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : if r4 == null
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : if r4 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteObjects()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteObjects()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Deque objectsToWrite>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Deque objectsToWrite> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $i0 = interfaceinvoke $r2.<java.util.Deque: int size()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $i0 = interfaceinvoke $r2.<java.util.Deque: int size()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : if $i0 <= 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : if $i0 <= 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Deque objectsToWrite>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Deque objectsToWrite> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $r4 = interfaceinvoke $r3.<java.util.Deque: java.lang.Object removeFirst()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $r4 = interfaceinvoke $r3.<java.util.Deque: java.lang.Object removeFirst()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : r1 = (org.apache.pdfbox.cos.COSBase) $r4
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : r1 = (org.apache.pdfbox.cos.COSBase) $r4 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set objectsToWriteSet>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set objectsToWriteSet> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : interfaceinvoke $r5.<java.util.Set: boolean remove(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteObject(org.apache.pdfbox.cos.COSBase)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteObject(org.apache.pdfbox.cos.COSBase)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set writtenObjects>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Set writtenObjects> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r3 = specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey getObjectKey(org.apache.pdfbox.cos.COSBase)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r3 = specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey getObjectKey(org.apache.pdfbox.cos.COSBase)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r12 = r1
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r12 = r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $z0 = r1 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $z0 = r1 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : if $z0 == 0
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r13 = null
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r13 = null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : if r12 == null
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : if r12 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r9 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r9 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12)
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r12) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r13 = (org.apache.pdfbox.cos.COSObjectKey) $r10
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r13 = (org.apache.pdfbox.cos.COSObjectKey) $r10 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : if r13 != null
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : if r13 != null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r7 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r7 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r13 = (org.apache.pdfbox.cos.COSObjectKey) $r8
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r13 = (org.apache.pdfbox.cos.COSObjectKey) $r8 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $l0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $l0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getNumber : $l0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: long number>
org.apache.pdfbox.pdfwriter.COSWriter.getNumber : $l0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: long number> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getNumber : return $l0
org.apache.pdfbox.pdfwriter.COSWriter.getNumber : return $l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $l1 = $l0 + 1L
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $l1 = $l0 + 1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void setNumber(long)>($l1)
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void setNumber(long)>($l1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.setNumber : r0.<org.apache.pdfbox.pdfwriter.COSWriter: long number> = l0
org.apache.pdfbox.pdfwriter.COSWriter.setNumber : r0.<org.apache.pdfbox.pdfwriter.COSWriter: long number> = l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r2 = new org.apache.pdfbox.cos.COSObjectKey
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r2 = new org.apache.pdfbox.cos.COSObjectKey >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $l2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $l2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : specialinvoke $r2.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>($l2, 0)
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : specialinvoke $r2.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>($l2, 0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r13 = $r2
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : r13 = $r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2)
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys>
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Map objectKeys> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r2)
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r12, $r2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : return r13
org.apache.pdfbox.pdfwriter.COSWriter.getObjectKey : return r13 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey currentObjectKey> = $r3
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey currentObjectKey> = $r3 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r4 = new org.apache.pdfbox.pdfwriter.COSWriterXRefEntry
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r4 = new org.apache.pdfbox.pdfwriter.COSWriterXRefEntry >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $l0 = virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $l0 = virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.getPos : $l0 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.getPos : $l0 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.getPos : return $l0
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.getPos : return $l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r6 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey currentObjectKey>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r6 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey currentObjectKey> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : specialinvoke $r4.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: void <init>(long,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSObjectKey)>($l0, r1, $r6)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : specialinvoke $r4.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: void <init>(long,org.apache.pdfbox.cos.COSBase,org.apache.pdfbox.cos.COSObjectKey)>($l0, r1, $r6) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.setOffset : r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: long offset> = l0
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.setOffset : r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: long offset> = l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.setObject : r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSBase object> = r1
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.setObject : r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSBase object> = r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.setKey : r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey key> = r1
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.setKey : r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey key> = r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addXRefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r4)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addXRefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r4) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addXRefEntry : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>()
org.apache.pdfbox.pdfwriter.COSWriter.addXRefEntry : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefEntries : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List xRefEntries>
org.apache.pdfbox.pdfwriter.COSWriter.getXRefEntries : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List xRefEntries> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefEntries : return $r1
org.apache.pdfbox.pdfwriter.COSWriter.getXRefEntries : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.addXRefEntry : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.addXRefEntry : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r8 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey currentObjectKey>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r8 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey currentObjectKey> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $l1 = virtualinvoke $r8.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $l1 = virtualinvoke $r8.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.getNumber : $l0 = r0.<org.apache.pdfbox.cos.COSObjectKey: long number>
org.apache.pdfbox.cos.COSObjectKey.getNumber : $l0 = r0.<org.apache.pdfbox.cos.COSObjectKey: long number> >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.getNumber : return $l0
org.apache.pdfbox.cos.COSObjectKey.getNumber : return $l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l1)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r9 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r10 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r10 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r11 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r10)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r11 = virtualinvoke $r9.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r10) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r11)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r11) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r13 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r13 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r14 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r14 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r15 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey currentObjectKey>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r15 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey currentObjectKey> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $i2 = virtualinvoke $r15.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $i2 = virtualinvoke $r15.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>() >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.getGeneration : $i0 = r0.<org.apache.pdfbox.cos.COSObjectKey: int generation>
org.apache.pdfbox.cos.COSObjectKey.getGeneration : $i0 = r0.<org.apache.pdfbox.cos.COSObjectKey: int generation> >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.getGeneration : return $i0
org.apache.pdfbox.cos.COSObjectKey.getGeneration : return $i0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r17 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r17 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r18 = virtualinvoke $r16.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r17)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r18 = virtualinvoke $r16.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r17) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r14.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r18)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r14.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r18) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r19 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r19 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r20 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r20 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r19.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r20)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r19.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r20) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r21 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r21 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r22 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] OBJ>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r22 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] OBJ> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r21.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r22)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r21.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r22) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r23 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r23 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r23.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r23.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke r1.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke r1.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromDictionary(org.apache.pdfbox.cos.COSDictionary)>(r0)
org.apache.pdfbox.cos.COSDictionary.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromDictionary(org.apache.pdfbox.cos.COSDictionary)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z0 != 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r32 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r32 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r35 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r32)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r35 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r32) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getItem : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.getItem : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getItem : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.getItem : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getItem : $r4 = (org.apache.pdfbox.cos.COSBase) $r3
org.apache.pdfbox.cos.COSDictionary.getItem : $r4 = (org.apache.pdfbox.cos.COSBase) $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getItem : return $r4
org.apache.pdfbox.cos.COSDictionary.getItem : return $r4 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r33 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SIG>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r33 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SIG> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z10 = virtualinvoke $r33.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r35)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z10 = virtualinvoke $r33.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r35) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z10 != 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z10 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r34 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DOC_TIME_STAMP>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r34 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DOC_TIME_STAMP> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z11 = virtualinvoke $r34.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r35)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z11 = virtualinvoke $r34.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r35) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z11 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z11 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r36 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r36 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r37 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] DICT_OPEN>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r37 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] DICT_OPEN> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r36.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r37)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r36.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r37) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r38 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r38 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r38.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r38.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r39 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Set entrySet()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r39 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Set entrySet()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.entrySet : $r1 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.entrySet : $r1 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.entrySet : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>()
org.apache.pdfbox.cos.COSDictionary.entrySet : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.entrySet : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : if $z0 == 0
org.apache.pdfbox.util.SmallMap.entrySet : if $z0 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r2 = new java.util.LinkedHashSet
org.apache.pdfbox.util.SmallMap.entrySet : $r2 = new java.util.LinkedHashSet >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>()
org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : i1 = 0
org.apache.pdfbox.util.SmallMap.entrySet : i1 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.entrySet : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $i0 = lengthof $r3
org.apache.pdfbox.util.SmallMap.entrySet : $i0 = lengthof $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : if i1 >= $i0
org.apache.pdfbox.util.SmallMap.entrySet : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r5 = new org.apache.pdfbox.util.SmallMap$SmallMapEntry
org.apache.pdfbox.util.SmallMap.entrySet : $r5 = new org.apache.pdfbox.util.SmallMap$SmallMapEntry >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r5.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: void <init>(org.apache.pdfbox.util.SmallMap,int)>(r0, i1)
org.apache.pdfbox.util.SmallMap.entrySet : specialinvoke $r5.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: void <init>(org.apache.pdfbox.util.SmallMap,int)>(r0, i1) >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r5)
org.apache.pdfbox.util.SmallMap.entrySet : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>($r5) >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $r1 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: java.lang.Object getKey()>()
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $r1 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1)
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.access$000 : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.access$000 : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.access$000 : return $r1
org.apache.pdfbox.util.SmallMap.access$000 : return $r1 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r3 = $r2[$i0]
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : $r3 = $r2[$i0] >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : return $r3
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getKey : return $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>()
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : $i0 = virtualinvoke $r1.<java.lang.Object: int hashCode()>() >>>>>>>> org.apache.pdfbox.cos.COSName.hashCode : $i0 = r0.<org.apache.pdfbox.cos.COSName: int hashCode>
org.apache.pdfbox.cos.COSName.hashCode : $i0 = r0.<org.apache.pdfbox.cos.COSName: int hashCode> >>>>>>>> org.apache.pdfbox.cos.COSName.hashCode : return $i0
org.apache.pdfbox.cos.COSName.hashCode : return $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : return $i0
org.apache.pdfbox.util.SmallMap$SmallMapEntry.hashCode : return $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : i1 = i1 + 2
org.apache.pdfbox.util.SmallMap.entrySet : i1 = i1 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : goto [?= $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.entrySet : goto [?= $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2)
org.apache.pdfbox.util.SmallMap.entrySet : $r4 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.entrySet : return $r4
org.apache.pdfbox.util.SmallMap.entrySet : return $r4 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.entrySet : return $r2
org.apache.pdfbox.cos.COSDictionary.entrySet : return $r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r40 = interfaceinvoke $r39.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z12 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z12 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z12 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z12 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r7 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r7 = interfaceinvoke r40.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r2 = (java.util.Map$Entry) $r7
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r2 = (java.util.Map$Entry) $r7 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r8 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r1 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: org.apache.pdfbox.util.SmallMap this$0> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1)
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r2 = staticinvoke <org.apache.pdfbox.util.SmallMap: java.lang.Object[] access$000(org.apache.pdfbox.util.SmallMap)>($r1) >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx>
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i0 = r0.<org.apache.pdfbox.util.SmallMap$SmallMapEntry: int keyIdx> >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i1 = $i0 + 1
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $i1 = $i0 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r3 = $r2[$i1]
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : $r3 = $r2[$i1] >>>>>>>> org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : return $r3
org.apache.pdfbox.util.SmallMap$SmallMapEntry.getValue : return $r3 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r3 = (org.apache.pdfbox.cos.COSBase) $r8
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r3 = (org.apache.pdfbox.cos.COSBase) $r8 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if r3 == null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if r3 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r9 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r9 = interfaceinvoke r2.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r10 = (org.apache.pdfbox.cos.COSName) $r9
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r10 = (org.apache.pdfbox.cos.COSName) $r9 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r10.<org.apache.pdfbox.cos.COSName: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r10.<org.apache.pdfbox.cos.COSName: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSName.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromName(org.apache.pdfbox.cos.COSName)>(r0)
org.apache.pdfbox.cos.COSName.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromName(org.apache.pdfbox.cos.COSName)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromName : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromName : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromName : virtualinvoke r1.<org.apache.pdfbox.cos.COSName: void writePDF(java.io.OutputStream)>($r2)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromName : virtualinvoke r1.<org.apache.pdfbox.cos.COSName: void writePDF(java.io.OutputStream)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(int)>(47)
org.apache.pdfbox.cos.COSName.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(int)>(47) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.OutputStream out>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.OutputStream out> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l1 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l1 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l2 = $l1 + 1L
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l2 = $l1 + 1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> = $l2
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> = $l2 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : $r4 = virtualinvoke r0.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>()
org.apache.pdfbox.cos.COSName.writePDF : $r4 = virtualinvoke r0.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : $r5 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset US_ASCII>
org.apache.pdfbox.cos.COSName.writePDF : $r5 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset US_ASCII> >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : r2 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r5)
org.apache.pdfbox.cos.COSName.writePDF : r2 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r5) >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : i0 = lengthof r2
org.apache.pdfbox.cos.COSName.writePDF : i0 = lengthof r2 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : i4 = 0
org.apache.pdfbox.cos.COSName.writePDF : i4 = 0 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i4 >= i0
org.apache.pdfbox.cos.COSName.writePDF : if i4 >= i0 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : b1 = r2[i4]
org.apache.pdfbox.cos.COSName.writePDF : b1 = r2[i4] >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : $i3 = b1 + 256
org.apache.pdfbox.cos.COSName.writePDF : $i3 = b1 + 256 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : i2 = $i3 % 256
org.apache.pdfbox.cos.COSName.writePDF : i2 = $i3 % 256 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 < 65
org.apache.pdfbox.cos.COSName.writePDF : if i2 < 65 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 <= 90
org.apache.pdfbox.cos.COSName.writePDF : if i2 <= 90 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(int)>(i2)
org.apache.pdfbox.cos.COSName.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(int)>(i2) >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : goto [?= i4 = i4 + 1]
org.apache.pdfbox.cos.COSName.writePDF : goto [?= i4 = i4 + 1] >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : i4 = i4 + 1
org.apache.pdfbox.cos.COSName.writePDF : i4 = i4 + 1 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : goto [?= (branch)]
org.apache.pdfbox.cos.COSName.writePDF : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 < 97
org.apache.pdfbox.cos.COSName.writePDF : if i2 < 97 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 <= 122
org.apache.pdfbox.cos.COSName.writePDF : if i2 <= 122 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromName : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromName : return null >>>>>>>> org.apache.pdfbox.cos.COSName.accept : return $r2
org.apache.pdfbox.cos.COSName.accept : return $r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r13 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r13 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z1 = r3 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z1 = r3 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z1 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z2 = r3 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z2 = r3 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z2 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z3 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z4 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z4 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean reachedSignature> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z4 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke r3.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke r3.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.finalize : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : if $r2 == null
org.apache.pdfbox.io.ScratchFileBuffer.finalize : if $r2 == null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : $r3 = <org.apache.pdfbox.io.ScratchFileBuffer: org.apache.commons.logging.Log LOG>
org.apache.pdfbox.io.ScratchFileBuffer.finalize : $r3 = <org.apache.pdfbox.io.ScratchFileBuffer: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()
org.apache.pdfbox.io.ScratchFileBuffer.finalize : $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : if $z0 == 0
org.apache.pdfbox.io.ScratchFileBuffer.finalize : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void close()>()
org.apache.pdfbox.io.ScratchFileBuffer.finalize : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void close()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.close : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : if $r1 == null
org.apache.pdfbox.io.ScratchFileBuffer.close : if $r1 == null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : $r3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.close : $r3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.close : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.close : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : virtualinvoke $r3.<org.apache.pdfbox.io.ScratchFile: void markPagesAsFree(int[],int,int)>($r2, 0, $i0)
org.apache.pdfbox.io.ScratchFileBuffer.close : virtualinvoke $r3.<org.apache.pdfbox.io.ScratchFile: void markPagesAsFree(int[],int,int)>($r2, 0, $i0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : entermonitor $r4
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : entermonitor $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i5 = i0
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i5 = i0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i5 >= i1
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i5 >= i1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i2 = r1[i5]
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i2 = r1[i5] >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 < 0
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $i3 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $i3 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 >= $i3
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 >= $i3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $z0 = virtualinvoke $r5.<java.util.BitSet: boolean get(int)>(i2)
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $z0 = virtualinvoke $r5.<java.util.BitSet: boolean get(int)>(i2) >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if $z0 != 0
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if $z0 != 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : virtualinvoke $r6.<java.util.BitSet: void set(int)>(i2)
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : virtualinvoke $r6.<java.util.BitSet: void set(int)>(i2) >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $i4 = r0.<org.apache.pdfbox.io.ScratchFile: int inMemoryMaxPageCount>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $i4 = r0.<org.apache.pdfbox.io.ScratchFile: int inMemoryMaxPageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 >= $i4
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 >= $i4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: byte[][] inMemoryPages>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: byte[][] inMemoryPages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r7[i2] = null
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r7[i2] = null >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i5 = i5 + 1
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i5 = i5 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : goto [?= (branch)]
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : exitmonitor $r4
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : exitmonitor $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : goto [?= return]
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : goto [?= return] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> = null
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> = null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> = null
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> = null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = null
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = 0L
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = 0L >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = -1
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = -1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> = 0L
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> = 0L >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : specialinvoke r0.<java.lang.Object: void finalize()>()
org.apache.pdfbox.io.ScratchFileBuffer.finalize : specialinvoke r0.<java.lang.Object: void finalize()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : goto [?= return]
org.apache.pdfbox.io.ScratchFileBuffer.finalize : goto [?= return] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r45 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r45 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r45.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r45.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : goto [?= $z12 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : goto [?= $z12 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 < 48
org.apache.pdfbox.cos.COSName.writePDF : if i2 < 48 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 <= 57
org.apache.pdfbox.cos.COSName.writePDF : if i2 <= 57 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 == 43
org.apache.pdfbox.cos.COSName.writePDF : if i2 == 43 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 == 45
org.apache.pdfbox.cos.COSName.writePDF : if i2 == 45 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 == 95
org.apache.pdfbox.cos.COSName.writePDF : if i2 == 95 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 == 64
org.apache.pdfbox.cos.COSName.writePDF : if i2 == 64 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 == 42
org.apache.pdfbox.cos.COSName.writePDF : if i2 == 42 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 == 36
org.apache.pdfbox.cos.COSName.writePDF : if i2 == 36 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 == 59
org.apache.pdfbox.cos.COSName.writePDF : if i2 == 59 >>>>>>>> org.apache.pdfbox.cos.COSName.writePDF : if i2 != 46
org.apache.pdfbox.cos.COSName.writePDF : if i2 != 46 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r41 = (org.apache.pdfbox.cos.COSDictionary) r3
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r41 = (org.apache.pdfbox.cos.COSDictionary) r3 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z9 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z9 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z9 != 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z9 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r30 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XOBJECT>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r30 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XOBJECT> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r42 = virtualinvoke r41.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r30)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r42 = virtualinvoke r41.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r30) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if r42 == null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if r42 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r31 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName RESOURCES>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r31 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName RESOURCES> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r43 = virtualinvoke r41.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r31)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : r43 = virtualinvoke r41.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r31) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if r43 == null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if r43 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z13 = virtualinvoke r41.<org.apache.pdfbox.cos.COSDictionary: boolean isDirect()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $z13 = virtualinvoke r41.<org.apache.pdfbox.cos.COSDictionary: boolean isDirect()>() >>>>>>>> org.apache.pdfbox.cos.COSBase.isDirect : $z0 = r0.<org.apache.pdfbox.cos.COSBase: boolean direct>
org.apache.pdfbox.cos.COSBase.isDirect : $z0 = r0.<org.apache.pdfbox.cos.COSBase: boolean direct> >>>>>>>> org.apache.pdfbox.cos.COSBase.isDirect : return $z0
org.apache.pdfbox.cos.COSBase.isDirect : return $z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z13 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : if $z13 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r41)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r41) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeReference(org.apache.pdfbox.cos.COSBase)>(r41)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeReference(org.apache.pdfbox.cos.COSBase)>(r41) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : r2 = specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey getObjectKey(org.apache.pdfbox.cos.COSBase)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : r2 = specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.cos.COSObjectKey getObjectKey(org.apache.pdfbox.cos.COSBase)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $l0 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $l0 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r4 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r5 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r5 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r6 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r5)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r6 = virtualinvoke $r4.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r5) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r3.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r3.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r8 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r8 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r8)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r8) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $i1 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $i1 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r10 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r11 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r11 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r12 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r12 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r11) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r9.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r12)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r9.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r12) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r13 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r13 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r14 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r14 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r13.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r14)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r13.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r14) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r15 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r15 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r16 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] REFERENCE>
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : $r16 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] REFERENCE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r15.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r16)
org.apache.pdfbox.pdfwriter.COSWriter.writeReference : virtualinvoke $r15.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r16) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : goto [?= $r45 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()]
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : goto [?= $r45 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r5 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] DICT_CLOSE>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r5 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] DICT_CLOSE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r5)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r5) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDictionary : return null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.accept : return $r2
org.apache.pdfbox.cos.COSDictionary.accept : return $r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r25 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r25 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r25.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r25.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r26 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r26 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r27 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ENDOBJ>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r27 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ENDOBJ> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r26.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r27)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r26.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r27) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r28 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : $r28 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r28.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObject : virtualinvoke $r28.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : goto [?= $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Deque objectsToWrite>]
org.apache.pdfbox.pdfwriter.COSWriter.doWriteObjects : goto [?= $r2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.Deque objectsToWrite>] >>>>>>>> org.apache.pdfbox.cos.COSArray.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromArray(org.apache.pdfbox.cos.COSArray)>(r0)
org.apache.pdfbox.cos.COSArray.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromArray(org.apache.pdfbox.cos.COSArray)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : i1 = 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : i1 = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r6 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ARRAY_OPEN>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r6 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ARRAY_OPEN> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.iterator : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.iterator : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.iterator : $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSArray.iterator : $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.iterator : return $r2
org.apache.pdfbox.cos.COSArray.iterator : return $r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z0 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r10 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : r3 = (org.apache.pdfbox.cos.COSBase) $r10
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : r3 = (org.apache.pdfbox.cos.COSBase) $r10 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z1 = r3 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z1 = r3 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z1 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z5 = virtualinvoke r3.<org.apache.pdfbox.cos.COSBase: boolean isDirect()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z5 = virtualinvoke r3.<org.apache.pdfbox.cos.COSBase: boolean isDirect()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z5 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z5 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r3)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addObjectToWrite(org.apache.pdfbox.cos.COSBase)>(r3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeReference(org.apache.pdfbox.cos.COSBase)>(r3)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeReference(org.apache.pdfbox.cos.COSBase)>(r3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : goto [?= i1 = i1 + 1]
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : goto [?= i1 = i1 + 1] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : i1 = i1 + 1
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : i1 = i1 + 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z6 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z6 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z6 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z6 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r8 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ARRAY_CLOSE>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r8 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] ARRAY_CLOSE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r8)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r8) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke $r9.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke $r9.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : return null >>>>>>>> org.apache.pdfbox.cos.COSArray.accept : return $r2
org.apache.pdfbox.cos.COSArray.accept : return $r2 >>>>>>>> org.apache.pdfbox.cos.COSInteger.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromInt(org.apache.pdfbox.cos.COSInteger)>(r0)
org.apache.pdfbox.cos.COSInteger.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromInt(org.apache.pdfbox.cos.COSInteger)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromInt : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromInt : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromInt : virtualinvoke r1.<org.apache.pdfbox.cos.COSInteger: void writePDF(java.io.OutputStream)>($r2)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromInt : virtualinvoke r1.<org.apache.pdfbox.cos.COSInteger: void writePDF(java.io.OutputStream)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSInteger.writePDF : $l0 = r0.<org.apache.pdfbox.cos.COSInteger: long value>
org.apache.pdfbox.cos.COSInteger.writePDF : $l0 = r0.<org.apache.pdfbox.cos.COSInteger: long value> >>>>>>>> org.apache.pdfbox.cos.COSInteger.writePDF : $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0)
org.apache.pdfbox.cos.COSInteger.writePDF : $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0) >>>>>>>> org.apache.pdfbox.cos.COSInteger.writePDF : $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1")
org.apache.pdfbox.cos.COSInteger.writePDF : $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1") >>>>>>>> org.apache.pdfbox.cos.COSInteger.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3)
org.apache.pdfbox.cos.COSInteger.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromInt : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromInt : return null >>>>>>>> org.apache.pdfbox.cos.COSInteger.accept : return $r2
org.apache.pdfbox.cos.COSInteger.accept : return $r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z2 = r3 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $z2 = r3 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z2 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if r3 != null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if r3 != null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke r3.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke r3.<org.apache.pdfbox.cos.COSBase: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSFloat.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromFloat(org.apache.pdfbox.cos.COSFloat)>(r0)
org.apache.pdfbox.cos.COSFloat.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromFloat(org.apache.pdfbox.cos.COSFloat)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : virtualinvoke r1.<org.apache.pdfbox.cos.COSFloat: void writePDF(java.io.OutputStream)>($r2)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : virtualinvoke r1.<org.apache.pdfbox.cos.COSFloat: void writePDF(java.io.OutputStream)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSFloat.writePDF : $r2 = r0.<org.apache.pdfbox.cos.COSFloat: java.lang.String valueAsString>
org.apache.pdfbox.cos.COSFloat.writePDF : $r2 = r0.<org.apache.pdfbox.cos.COSFloat: java.lang.String valueAsString> >>>>>>>> org.apache.pdfbox.cos.COSFloat.writePDF : $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1")
org.apache.pdfbox.cos.COSFloat.writePDF : $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1") >>>>>>>> org.apache.pdfbox.cos.COSFloat.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3)
org.apache.pdfbox.cos.COSFloat.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : return null >>>>>>>> org.apache.pdfbox.cos.COSFloat.accept : return $r2
org.apache.pdfbox.cos.COSFloat.accept : return $r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $i0 = i1 % 10
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $i0 = i1 % 10 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $i0 != 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : if $i0 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r13 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : $r13 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromArray : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> = 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : if r5 == null
org.apache.pdfbox.pdfwriter.COSWriter.doWriteBody : if r5 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : l5 = -1L
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : l5 = -1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if r2 == null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if r2 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF_STM>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF_STM> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : l5 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName)>($r15)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : l5 = virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName)>($r15) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : $l0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName,long)>(r1, -1L)
org.apache.pdfbox.cos.COSDictionary.getLong : $l0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName,long)>(r1, -1L) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : l1 = l0
org.apache.pdfbox.cos.COSDictionary.getLong : l1 = l0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.getLong : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : $z0 = r2 instanceof org.apache.pdfbox.cos.COSNumber
org.apache.pdfbox.cos.COSDictionary.getLong : $z0 = r2 instanceof org.apache.pdfbox.cos.COSNumber >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getLong : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : return l1
org.apache.pdfbox.cos.COSDictionary.getLong : return l1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getLong : return $l0
org.apache.pdfbox.cos.COSDictionary.getLong : return $l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $z1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $z1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if $z1 != 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $z3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $z3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.isXRefStream : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream>
org.apache.pdfbox.cos.COSDocument.isXRefStream : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream> >>>>>>>> org.apache.pdfbox.cos.COSDocument.isXRefStream : return $z0
org.apache.pdfbox.cos.COSDocument.isXRefStream : return $z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if $z3 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteXRefTable()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteXRefTable()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r2 = staticinvoke <org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.pdfwriter.COSWriterXRefEntry getNullEntry()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r2 = staticinvoke <org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.pdfwriter.COSWriterXRefEntry getNullEntry()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getNullEntry : $r0 = <org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.pdfwriter.COSWriterXRefEntry NULLENTRY>
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getNullEntry : $r0 = <org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.pdfwriter.COSWriterXRefEntry NULLENTRY> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getNullEntry : return $r0
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getNullEntry : return $r0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addXRefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r2)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void addXRefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : staticinvoke <java.util.Collections: void sort(java.util.List)>($r3)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : staticinvoke <java.util.Collections: void sort(java.util.List)>($r3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r2 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) r1
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r2 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $i0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: int compareTo(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r2)
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $i0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: int compareTo(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : if r1 == null
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : if r1 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>()
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getKey : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey key>
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getKey : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey key> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getKey : return $r1
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getKey : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $l0 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $l0 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r3 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>()
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r3 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $l1 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $l1 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $b2 = $l0 cmp $l1
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $b2 = $l0 cmp $l1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : if $b2 >= 0
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : if $b2 >= 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>()
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $l3 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $l3 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r5 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>()
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $r5 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $l4 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $l4 = virtualinvoke $r5.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $b5 = $l3 cmp $l4
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : $b5 = $l3 cmp $l4 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : if $b5 <= 0
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : if $b5 <= 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : return 1
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : return 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : return $i0
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : return $i0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : return -1
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.compareTo : return -1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l1 = virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l1 = virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long getPos()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void setStartxref(long)>($l1)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void setStartxref(long)>($l1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.setStartxref : r0.<org.apache.pdfbox.pdfwriter.COSWriter: long startxref> = l0
org.apache.pdfbox.pdfwriter.COSWriter.setStartxref : r0.<org.apache.pdfbox.pdfwriter.COSWriter: long startxref> = l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r6 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r6 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r8 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r8 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.lang.Long[] getXRefRanges(java.util.List)>($r8)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.lang.Long[] getXRefRanges(java.util.List)>($r8) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l12 = -2L
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l12 = -2L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l13 = 1L
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l13 = 1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r5 = new java.util.ArrayList
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r5 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : if $z0 == 0
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : r4 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r11 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) r4
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r11 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) r4 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r12 = virtualinvoke $r11.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>()
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r12 = virtualinvoke $r11.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $l5 = virtualinvoke $r12.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $l5 = virtualinvoke $r12.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $i6 = (int) $l5
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $i6 = (int) $l5 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l0 = (long) $i6
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l0 = (long) $i6 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $l7 = l12 + 1L
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $l7 = l12 + 1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $b8 = l0 cmp $l7
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $b8 = l0 cmp $l7 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : if $b8 != 0
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : if $b8 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $b9 = l12 cmp -2L
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $b9 = l12 cmp -2L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : if $b9 != 0
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : if $b9 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l12 = l0
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l12 = l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : goto [?= (branch)]
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l13 = l13 + 1L
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : l13 = l13 + 1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $i1 = interfaceinvoke r1.<java.util.List: int size()>()
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $i1 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : if $i1 <= 0
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : if $i1 <= 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $l3 = l12 - l13
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $l3 = l12 - l13 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $l4 = $l3 + 1L
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $l4 = $l3 + 1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4)
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r9 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l4) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9)
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r9) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l13)
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l13) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r10)
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : interfaceinvoke $r5.<java.util.List: boolean add(java.lang.Object)>($r10) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $i2 = interfaceinvoke $r5.<java.util.List: int size()>()
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $i2 = interfaceinvoke $r5.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r6 = newarray (java.lang.Long)[$i2]
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r6 = newarray (java.lang.Long)[$i2] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6)
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r7 = interfaceinvoke $r5.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r6) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r8 = (java.lang.Long[]) $r7
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : $r8 = (java.lang.Long[]) $r7 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : return $r8
org.apache.pdfbox.pdfwriter.COSWriter.getXRefRanges : return $r8 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i0 = lengthof r1
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i0 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i11 = 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i11 = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i12 = 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i12 = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : if i11 >= i0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : if i11 >= i0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $i2 = i0 % 2
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $i2 = i0 % 2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : if $i2 != 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : if $i2 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r9 = r1[i11]
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r9 = r1[i11] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l3 = virtualinvoke $r9.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l3 = virtualinvoke $r9.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $i4 = i11 + 1
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $i4 = i11 + 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r10 = r1[$i4]
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r10 = r1[$i4] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l5 = virtualinvoke $r10.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l5 = virtualinvoke $r10.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeXrefRange(long,long)>($l3, $l5)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeXrefRange(long,long)>($l3, $l5) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r3 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r3 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r4 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r4 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : virtualinvoke $r1.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r4)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : virtualinvoke $r1.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r4) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r6 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r6 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : virtualinvoke $r5.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r6) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>(l1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r9 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r9 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r10 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r9)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r10 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r9) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r10)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r10) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r11 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : $r11 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : virtualinvoke $r11.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefRange : virtualinvoke $r11.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i13 = 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i13 = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l7 = (long) i13
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l7 = (long) i13 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $i6 = i11 + 1
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $i6 = i11 + 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r11 = r1[$i6]
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r11 = r1[$i6] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l8 = virtualinvoke $r11.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $l8 = virtualinvoke $r11.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $b9 = $l7 cmp $l8
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $b9 = $l7 cmp $l8 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : if $b9 >= 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : if $b9 >= 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r12 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List xRefEntries>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r12 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List xRefEntries> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $i10 = i12
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $i10 = i12 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i12 = i12 + 1
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i12 = i12 + 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>($i10)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>($i10) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r14 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) $r13
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : $r14 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) $r13 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeXrefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r14)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : specialinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void writeXrefEntry(org.apache.pdfbox.pdfwriter.COSWriterXRefEntry)>($r14) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r4 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.text.NumberFormat formatXrefOffset>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r4 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.text.NumberFormat formatXrefOffset> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $l0 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: long getOffset()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $l0 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: long getOffset()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getOffset : $l0 = r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: long offset>
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getOffset : $l0 = r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: long offset> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getOffset : return $l0
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.getOffset : return $l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : r2 = virtualinvoke $r4.<java.text.NumberFormat: java.lang.String format(long)>($l0)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : r2 = virtualinvoke $r4.<java.text.NumberFormat: java.lang.String format(long)>($l0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.text.NumberFormat formatXrefGeneration>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r5 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.text.NumberFormat formatXrefGeneration> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r6 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r6 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $i1 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $i1 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $l2 = (long) $i1
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $l2 = (long) $i1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : r3 = virtualinvoke $r5.<java.text.NumberFormat: java.lang.String format(long)>($l2)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : r3 = virtualinvoke $r5.<java.text.NumberFormat: java.lang.String format(long)>($l2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r8 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r8 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r9 = virtualinvoke r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r9 = virtualinvoke r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r8) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r9)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r9) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r10 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r10 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r11 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r11 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r10.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r11)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r10.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r11) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r13 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r13 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r14 = virtualinvoke r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r13)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r14 = virtualinvoke r3.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r13) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r14)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r14) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r15 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r15 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r16 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r16 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] SPACE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r15.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r16)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r15.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r16) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r17 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r17 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $z0 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: boolean isFree()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $z0 = virtualinvoke r1.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: boolean isFree()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.isFree : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: boolean free>
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.isFree : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: boolean free> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.isFree : return $z0
org.apache.pdfbox.pdfwriter.COSWriterXRefEntry.isFree : return $z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : if $z0 == 0
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r19 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF_FREE>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r19 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF_FREE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : goto [?= virtualinvoke $r17.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r19)]
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : goto [?= virtualinvoke $r17.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r19)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r17.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r19)
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r17.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r19) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r18 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r18 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r18.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeCRLF()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : virtualinvoke $r18.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeCRLF()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeCRLF : $r1 = <org.apache.pdfbox.pdfwriter.COSStandardOutputStream: byte[] CRLF>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeCRLF : $r1 = <org.apache.pdfbox.pdfwriter.COSStandardOutputStream: byte[] CRLF> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeCRLF : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r1)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.writeCRLF : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i13 = i13 + 1
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i13 = i13 + 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : goto [?= $l7 = (long) i13]
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : goto [?= $l7 = (long) i13] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r19 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF_USED>
org.apache.pdfbox.pdfwriter.COSWriter.writeXrefEntry : $r19 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] XREF_USED> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i11 = i11 + 2
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : i11 = i11 + 2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : goto [?= (branch)]
org.apache.pdfbox.pdfwriter.COSWriter.doWriteXRefTable : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteTrailer(org.apache.pdfbox.cos.COSDocument)>(r1)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: void doWriteTrailer(org.apache.pdfbox.cos.COSDocument)>(r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r5 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] TRAILER>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r5 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] TRAILER> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r5)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r5) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : r2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : staticinvoke <java.util.Collections: void sort(java.util.List)>($r7)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : staticinvoke <java.util.Collections: void sort(java.util.List)>($r7) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r8 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r8 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r9 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.util.List getXRefEntries()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $i0 = interfaceinvoke $r9.<java.util.List: int size()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $i0 = interfaceinvoke $r9.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $i1 = $i0 - 1
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $i1 = $i0 - 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r10 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i1)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r10 = interfaceinvoke $r8.<java.util.List: java.lang.Object get(int)>($i1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : r3 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) $r10
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : r3 = (org.apache.pdfbox.pdfwriter.COSWriterXRefEntry) $r10 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SIZE>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName SIZE> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r12 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r12 = virtualinvoke r3.<org.apache.pdfbox.pdfwriter.COSWriterXRefEntry: org.apache.pdfbox.cos.COSObjectKey getKey()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $l2 = virtualinvoke $r12.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $l2 = virtualinvoke $r12.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $l3 = $l2 + 1L
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $l3 = $l2 + 1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: void setLong(org.apache.pdfbox.cos.COSName,long)>($r11, $l3)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: void setLong(org.apache.pdfbox.cos.COSName,long)>($r11, $l3) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setLong : r2 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>(l0)
org.apache.pdfbox.cos.COSDictionary.setLong : r2 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>(l0) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setLong : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, r2)
org.apache.pdfbox.cos.COSDictionary.setLong : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, r2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : if $z0 != 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r16 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r16 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>($r16)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>($r16) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.removeItem : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.removeItem : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.removeItem : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.removeItem : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.remove : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.remove : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.remove : if i0 >= 0
org.apache.pdfbox.util.SmallMap.remove : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.remove : return null
org.apache.pdfbox.util.SmallMap.remove : return null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $z1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream()>()
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $z1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : if $z1 != 0
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF_STM>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r15 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF_STM> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>($r15)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>($r15) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r13 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DOC_CHECKSUM>
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : $r13 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DOC_CHECKSUM> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>($r13)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>($r13) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0)
org.apache.pdfbox.pdfwriter.COSWriter.doWriteTrailer : virtualinvoke r2.<org.apache.pdfbox.cos.COSDictionary: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSString.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromString(org.apache.pdfbox.cos.COSString)>(r0)
org.apache.pdfbox.cos.COSString.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromString(org.apache.pdfbox.cos.COSString)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : if $z0 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : staticinvoke <org.apache.pdfbox.pdfwriter.COSWriter: void writeString(org.apache.pdfbox.cos.COSString,java.io.OutputStream)>(r1, $r2)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : staticinvoke <org.apache.pdfbox.pdfwriter.COSWriter: void writeString(org.apache.pdfbox.cos.COSString,java.io.OutputStream)>(r1, $r2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSString: byte[] getBytes()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeString : $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSString: byte[] getBytes()>() >>>>>>>> org.apache.pdfbox.cos.COSString.getBytes : $r1 = r0.<org.apache.pdfbox.cos.COSString: byte[] bytes>
org.apache.pdfbox.cos.COSString.getBytes : $r1 = r0.<org.apache.pdfbox.cos.COSString: byte[] bytes> >>>>>>>> org.apache.pdfbox.cos.COSString.getBytes : return $r1
org.apache.pdfbox.cos.COSString.getBytes : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : $z0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSString: boolean getForceHexForm()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeString : $z0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSString: boolean getForceHexForm()>() >>>>>>>> org.apache.pdfbox.cos.COSString.getForceHexForm : $z0 = r0.<org.apache.pdfbox.cos.COSString: boolean forceHexForm>
org.apache.pdfbox.cos.COSString.getForceHexForm : $z0 = r0.<org.apache.pdfbox.cos.COSString: boolean forceHexForm> >>>>>>>> org.apache.pdfbox.cos.COSString.getForceHexForm : return $z0
org.apache.pdfbox.cos.COSString.getForceHexForm : return $z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : staticinvoke <org.apache.pdfbox.pdfwriter.COSWriter: void writeString(byte[],boolean,java.io.OutputStream)>($r2, $z0, r1)
org.apache.pdfbox.pdfwriter.COSWriter.writeString : staticinvoke <org.apache.pdfbox.pdfwriter.COSWriter: void writeString(byte[],boolean,java.io.OutputStream)>($r2, $z0, r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : z1 = 1
org.apache.pdfbox.pdfwriter.COSWriter.writeString : z1 = 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if z0 != 0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if z0 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : i0 = lengthof r0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : i0 = lengthof r0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : i1 = 0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : i1 = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if i1 >= i0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if i1 >= i0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : b2 = r0[i1]
org.apache.pdfbox.pdfwriter.COSWriter.writeString : b2 = r0[i1] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if b2 >= 0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if b2 >= 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : z1 = 0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : z1 = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : goto [?= (branch)]
org.apache.pdfbox.pdfwriter.COSWriter.writeString : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if z1 == 0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if z1 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(60)
org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(60) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : staticinvoke <org.apache.pdfbox.util.Hex: void writeHexBytes(byte[],java.io.OutputStream)>(r0, r1)
org.apache.pdfbox.pdfwriter.COSWriter.writeString : staticinvoke <org.apache.pdfbox.util.Hex: void writeHexBytes(byte[],java.io.OutputStream)>(r0, r1) >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : i0 = lengthof r0
org.apache.pdfbox.util.Hex.writeHexBytes : i0 = lengthof r0 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : i2 = 0
org.apache.pdfbox.util.Hex.writeHexBytes : i2 = 0 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : if i2 >= i0
org.apache.pdfbox.util.Hex.writeHexBytes : if i2 >= i0 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : b1 = r0[i2]
org.apache.pdfbox.util.Hex.writeHexBytes : b1 = r0[i2] >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : staticinvoke <org.apache.pdfbox.util.Hex: void writeHexByte(byte,java.io.OutputStream)>(b1, r1)
org.apache.pdfbox.util.Hex.writeHexBytes : staticinvoke <org.apache.pdfbox.util.Hex: void writeHexByte(byte,java.io.OutputStream)>(b1, r1) >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $r1 = <org.apache.pdfbox.util.Hex: byte[] HEX_BYTES>
org.apache.pdfbox.util.Hex.writeHexByte : $r1 = <org.apache.pdfbox.util.Hex: byte[] HEX_BYTES> >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $i1 = staticinvoke <org.apache.pdfbox.util.Hex: int getHighNibble(byte)>(b0)
org.apache.pdfbox.util.Hex.writeHexByte : $i1 = staticinvoke <org.apache.pdfbox.util.Hex: int getHighNibble(byte)>(b0) >>>>>>>> org.apache.pdfbox.util.Hex.getHighNibble : $s1 = b0 & 240
org.apache.pdfbox.util.Hex.getHighNibble : $s1 = b0 & 240 >>>>>>>> org.apache.pdfbox.util.Hex.getHighNibble : $s2 = $s1 >> 4
org.apache.pdfbox.util.Hex.getHighNibble : $s2 = $s1 >> 4 >>>>>>>> org.apache.pdfbox.util.Hex.getHighNibble : return $s2
org.apache.pdfbox.util.Hex.getHighNibble : return $s2 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $b2 = $r1[$i1]
org.apache.pdfbox.util.Hex.writeHexByte : $b2 = $r1[$i1] >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : virtualinvoke r0.<java.io.OutputStream: void write(int)>($b2)
org.apache.pdfbox.util.Hex.writeHexByte : virtualinvoke r0.<java.io.OutputStream: void write(int)>($b2) >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $r2 = <org.apache.pdfbox.util.Hex: byte[] HEX_BYTES>
org.apache.pdfbox.util.Hex.writeHexByte : $r2 = <org.apache.pdfbox.util.Hex: byte[] HEX_BYTES> >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $i3 = staticinvoke <org.apache.pdfbox.util.Hex: int getLowNibble(byte)>(b0)
org.apache.pdfbox.util.Hex.writeHexByte : $i3 = staticinvoke <org.apache.pdfbox.util.Hex: int getLowNibble(byte)>(b0) >>>>>>>> org.apache.pdfbox.util.Hex.getLowNibble : $b1 = b0 & 15
org.apache.pdfbox.util.Hex.getLowNibble : $b1 = b0 & 15 >>>>>>>> org.apache.pdfbox.util.Hex.getLowNibble : return $b1
org.apache.pdfbox.util.Hex.getLowNibble : return $b1 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $b4 = $r2[$i3]
org.apache.pdfbox.util.Hex.writeHexByte : $b4 = $r2[$i3] >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4)
org.apache.pdfbox.util.Hex.writeHexByte : virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4) >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : i2 = i2 + 1
org.apache.pdfbox.util.Hex.writeHexBytes : i2 = i2 + 1 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : goto [?= (branch)]
org.apache.pdfbox.util.Hex.writeHexBytes : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(62)
org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(62) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : return null >>>>>>>> org.apache.pdfbox.cos.COSString.accept : return $r2
org.apache.pdfbox.cos.COSString.accept : return $r2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r4 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r5 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] STARTXREF>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r5 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] STARTXREF> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r5)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r4.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r5) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $l0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: long getStartxref()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $l0 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: long getStartxref()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getStartxref : $l0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: long startxref>
org.apache.pdfbox.pdfwriter.COSWriter.getStartxref : $l0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: long startxref> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getStartxref : return $l0
org.apache.pdfbox.pdfwriter.COSWriter.getStartxref : return $l0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r8 = staticinvoke <java.lang.String: java.lang.String valueOf(long)>($l0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r9 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r9 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r10 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r9)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r10 = virtualinvoke $r8.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r9) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r10)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r10) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r11 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r11 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r11.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r11.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r13 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] EOF>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r13 = <org.apache.pdfbox.pdfwriter.COSWriter: byte[] EOF> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r12.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void write(byte[])>($r13) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r14 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $r14 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r14.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : virtualinvoke $r14.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void writeEOL()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $z2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : $z2 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean incrementalUpdate> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if $z2 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromDocument : return null >>>>>>>> org.apache.pdfbox.cos.COSDocument.accept : return $r2
org.apache.pdfbox.cos.COSDocument.accept : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSWriter: void close()>()
org.apache.pdfbox.pdmodel.PDDocument.save : virtualinvoke $r7.<org.apache.pdfbox.pdfwriter.COSWriter: void close()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.close : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : if $r1 == null
org.apache.pdfbox.pdfwriter.COSWriter.close : if $r1 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.close : $r6 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void close()>()
org.apache.pdfbox.pdfwriter.COSWriter.close : virtualinvoke $r6.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream getOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.close : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream getOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getOutput : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream output>
org.apache.pdfbox.pdfwriter.COSWriter.getOutput : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream output> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getOutput : return $r1
org.apache.pdfbox.pdfwriter.COSWriter.getOutput : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : if $r2 == null
org.apache.pdfbox.pdfwriter.COSWriter.close : if $r2 == null >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream getOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.close : $r5 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream getOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : virtualinvoke $r5.<java.io.OutputStream: void close()>()
org.apache.pdfbox.pdfwriter.COSWriter.close : virtualinvoke $r5.<java.io.OutputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream incrementalOutput>
org.apache.pdfbox.pdfwriter.COSWriter.close : $r3 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream incrementalOutput> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.close : if $r3 == null
org.apache.pdfbox.pdfwriter.COSWriter.close : if $r3 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.save : goto [?= return]
org.apache.pdfbox.pdmodel.PDDocument.save : goto [?= return] >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdmodel.PDDocument.close : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : $z0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSDocument: boolean isClosed()>()
org.apache.pdfbox.pdmodel.PDDocument.close : $z0 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSDocument: boolean isClosed()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : if $z0 != 0
org.apache.pdfbox.pdmodel.PDDocument.close : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : $r2 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.interactive.digitalsignature.SigningSupport signingSupport>
org.apache.pdfbox.pdmodel.PDDocument.close : $r2 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.interactive.digitalsignature.SigningSupport signingSupport> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : if $r2 == null
org.apache.pdfbox.pdmodel.PDDocument.close : if $r2 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : $r3 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdmodel.PDDocument.close : $r3 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: void close()>()
org.apache.pdfbox.pdmodel.PDDocument.close : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed>
org.apache.pdfbox.cos.COSDocument.close : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $z0 != 0
org.apache.pdfbox.cos.COSDocument.close : if $z0 != 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: java.util.List getObjects()>()
org.apache.pdfbox.cos.COSDocument.close : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: java.util.List getObjects()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : $r1 = new java.util.ArrayList
org.apache.pdfbox.cos.COSDocument.getObjects : $r1 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : $r2 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool>
org.apache.pdfbox.cos.COSDocument.getObjects : $r2 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>()
org.apache.pdfbox.cos.COSDocument.getObjects : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3)
org.apache.pdfbox.cos.COSDocument.getObjects : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : return $r1
org.apache.pdfbox.cos.COSDocument.getObjects : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if r1 == null
org.apache.pdfbox.cos.COSDocument.close : if r1 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r10 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSDocument.close : r10 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.cos.COSDocument.close : $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $z2 == 0
org.apache.pdfbox.cos.COSDocument.close : if $z2 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams>
org.apache.pdfbox.cos.COSDocument.close : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $r3 == null
org.apache.pdfbox.cos.COSDocument.close : if $r3 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r6 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams>
org.apache.pdfbox.cos.COSDocument.close : $r6 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r12 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSDocument.close : r12 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.cos.COSDocument.close : $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $z1 == 0
org.apache.pdfbox.cos.COSDocument.close : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r4 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSDocument.close : $r4 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $r4 == null
org.apache.pdfbox.cos.COSDocument.close : if $r4 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r5 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSDocument.close : $r5 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : virtualinvoke $r5.<org.apache.pdfbox.io.ScratchFile: void close()>()
org.apache.pdfbox.cos.COSDocument.close : virtualinvoke $r5.<org.apache.pdfbox.io.ScratchFile: void close()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : r21 = null
org.apache.pdfbox.io.ScratchFile.close : r21 = null >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.lang.Object ioLock>
org.apache.pdfbox.io.ScratchFile.close : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.lang.Object ioLock> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : entermonitor $r4
org.apache.pdfbox.io.ScratchFile.close : entermonitor $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed>
org.apache.pdfbox.io.ScratchFile.close : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : if $z0 == 0
org.apache.pdfbox.io.ScratchFile.close : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> = 1
org.apache.pdfbox.io.ScratchFile.close : r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> = 1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf>
org.apache.pdfbox.io.ScratchFile.close : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : if $r5 == null
org.apache.pdfbox.io.ScratchFile.close : if $r5 == null >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r23 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.File file>
org.apache.pdfbox.io.ScratchFile.close : $r23 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.File file> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : if $r23 == null
org.apache.pdfbox.io.ScratchFile.close : if $r23 == null >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : exitmonitor $r4
org.apache.pdfbox.io.ScratchFile.close : exitmonitor $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : goto [?= $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>]
org.apache.pdfbox.io.ScratchFile.close : goto [?= $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>] >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.close : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : entermonitor $r6
org.apache.pdfbox.io.ScratchFile.close : entermonitor $r6 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.close : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : virtualinvoke $r7.<java.util.BitSet: void clear()>()
org.apache.pdfbox.io.ScratchFile.close : virtualinvoke $r7.<java.util.BitSet: void clear()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = 0
org.apache.pdfbox.io.ScratchFile.close : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : exitmonitor $r6
org.apache.pdfbox.io.ScratchFile.close : exitmonitor $r6 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : goto [?= (branch)]
org.apache.pdfbox.io.ScratchFile.close : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : if r21 == null
org.apache.pdfbox.io.ScratchFile.close : if r21 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> = 1
org.apache.pdfbox.cos.COSDocument.close : r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> = 1 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : $r4 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.io.RandomAccessRead pdfSource>
org.apache.pdfbox.pdmodel.PDDocument.close : $r4 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.io.RandomAccessRead pdfSource> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : if $r4 == null
org.apache.pdfbox.pdmodel.PDDocument.close : if $r4 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r1 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly()>()
org.apache.pdfbox.pdmodel.PDDocument.load : $r1 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r2 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.io.InputStream,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.MemoryUsageSetting)>(r0, "", null, null, $r1)
org.apache.pdfbox.pdmodel.PDDocument.load : $r2 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.io.InputStream,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.MemoryUsageSetting)>(r0, "", null, null, $r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r7 = new org.apache.pdfbox.io.ScratchFile
org.apache.pdfbox.pdmodel.PDDocument.load : $r7 = new org.apache.pdfbox.io.ScratchFile >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r7.<org.apache.pdfbox.io.ScratchFile: void <init>(org.apache.pdfbox.io.MemoryUsageSetting)>(r4)
org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r7.<org.apache.pdfbox.io.ScratchFile: void <init>(org.apache.pdfbox.io.MemoryUsageSetting)>(r4) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : r11 = virtualinvoke $r7.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer(java.io.InputStream)>(r0)
org.apache.pdfbox.pdmodel.PDDocument.load : r11 = virtualinvoke $r7.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer(java.io.InputStream)>(r0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : $r4 = new org.apache.pdfbox.io.ScratchFileBuffer
org.apache.pdfbox.io.ScratchFile.createBuffer : $r4 = new org.apache.pdfbox.io.ScratchFileBuffer >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : specialinvoke $r4.<org.apache.pdfbox.io.ScratchFileBuffer: void <init>(org.apache.pdfbox.io.ScratchFile)>(r0)
org.apache.pdfbox.io.ScratchFile.createBuffer : specialinvoke $r4.<org.apache.pdfbox.io.ScratchFileBuffer: void <init>(org.apache.pdfbox.io.ScratchFile)>(r0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.checkClosed : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed>
org.apache.pdfbox.io.ScratchFile.checkClosed : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> >>>>>>>> org.apache.pdfbox.io.ScratchFile.checkClosed : if $z0 == 0
org.apache.pdfbox.io.ScratchFile.checkClosed : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getPageSize : return 4096
org.apache.pdfbox.io.ScratchFile.getPageSize : return 4096 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i2 = $i0 + 1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i2 = $i0 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i1 = lengthof $r2
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i1 = lengthof $r2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : if $i2 < $i1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : if $i2 < $i1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r8 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r8 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : i8 = virtualinvoke $r8.<org.apache.pdfbox.io.ScratchFile: int getNewPage()>()
org.apache.pdfbox.io.ScratchFileBuffer.addPage : i8 = virtualinvoke $r8.<org.apache.pdfbox.io.ScratchFile: int getNewPage()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r3 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r3 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : entermonitor $r3
org.apache.pdfbox.io.ScratchFile.getNewPage : entermonitor $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : i3 = virtualinvoke $r4.<java.util.BitSet: int nextSetBit(int)>(0)
org.apache.pdfbox.io.ScratchFile.getNewPage : i3 = virtualinvoke $r4.<java.util.BitSet: int nextSetBit(int)>(0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 >= 0
org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 >= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : virtualinvoke $r5.<java.util.BitSet: void clear(int)>(i3)
org.apache.pdfbox.io.ScratchFile.getNewPage : virtualinvoke $r5.<java.util.BitSet: void clear(int)>(i3) >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.getNewPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 < $i0
org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 < $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $i1 = i3 + 1
org.apache.pdfbox.io.ScratchFile.getNewPage : $i1 = i3 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = $i1
org.apache.pdfbox.io.ScratchFile.getNewPage : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = $i1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : exitmonitor $r3
org.apache.pdfbox.io.ScratchFile.getNewPage : exitmonitor $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : return i3
org.apache.pdfbox.io.ScratchFile.getNewPage : return i3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9[$i9] = i8
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9[$i9] = i8 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i10 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i10 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = $i10
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = $i10 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l12 = (long) $i11
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l12 = (long) $i11 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l14 = (long) $i13
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l14 = (long) $i13 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l15 = $l12 * $l14
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l15 = $l12 * $l14 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l15
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l15 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i17 = $i16 + 1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i17 = $i16 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> = $i17
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> = $i17 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r11 = newarray (byte)[$i18]
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r11 = newarray (byte)[$i18] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r11
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r11 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : r3 = newarray (byte)[8192]
org.apache.pdfbox.io.ScratchFile.createBuffer : r3 = newarray (byte)[8192] >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r3)
org.apache.pdfbox.io.ScratchFile.createBuffer : $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r3) >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : if $i0 <= -1
org.apache.pdfbox.io.ScratchFile.createBuffer : if $i0 <= -1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : virtualinvoke $r4.<org.apache.pdfbox.io.ScratchFileBuffer: void write(byte[],int,int)>(r3, 0, $i0)
org.apache.pdfbox.io.ScratchFile.createBuffer : virtualinvoke $r4.<org.apache.pdfbox.io.ScratchFileBuffer: void write(byte[],int,int)>(r3, 0, $i0) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.write : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : if $r1 != null
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : if $r1 != null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : virtualinvoke $r2.<org.apache.pdfbox.io.ScratchFile: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : virtualinvoke $r2.<org.apache.pdfbox.io.ScratchFile: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : i19 = i1
org.apache.pdfbox.io.ScratchFileBuffer.write : i19 = i1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : i20 = i0
org.apache.pdfbox.io.ScratchFileBuffer.write : i20 = i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : if i19 <= 0
org.apache.pdfbox.io.ScratchFileBuffer.write : if i19 <= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean ensureAvailableBytesInPage(boolean)>(1)
org.apache.pdfbox.io.ScratchFileBuffer.write : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean ensureAvailableBytesInPage(boolean)>(1) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : if $i1 < $i0
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : if $i1 < $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : return 1
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : return 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i14 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i14 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i15 = $i14 - $i13
org.apache.pdfbox.io.ScratchFileBuffer.write : $i15 = $i14 - $i13 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : i2 = staticinvoke <java.lang.Math: int min(int,int)>(i19, $i15)
org.apache.pdfbox.io.ScratchFileBuffer.write : i2 = staticinvoke <java.lang.Math: int min(int,int)>(i19, $i15) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i20, $r2, $i16, i2)
org.apache.pdfbox.io.ScratchFileBuffer.write : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i20, $r2, $i16, i2) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i17 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i17 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i18 = $i17 + i2
org.apache.pdfbox.io.ScratchFileBuffer.write : $i18 = $i17 + i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i18
org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i18 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean currentPageContentChanged> = 1
org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean currentPageContentChanged> = 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : i20 = i20 + i2
org.apache.pdfbox.io.ScratchFileBuffer.write : i20 = i20 + i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : i19 = i19 - i2
org.apache.pdfbox.io.ScratchFileBuffer.write : i19 = i19 - i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : goto [?= (branch)]
org.apache.pdfbox.io.ScratchFileBuffer.write : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.write : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l4 = (long) $i3
org.apache.pdfbox.io.ScratchFileBuffer.write : $l4 = (long) $i3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l7 = $l5 + $l4
org.apache.pdfbox.io.ScratchFileBuffer.write : $l7 = $l5 + $l4 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.write : $l6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $b8 = $l7 cmp $l6
org.apache.pdfbox.io.ScratchFileBuffer.write : $b8 = $l7 cmp $l6 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : if $b8 <= 0
org.apache.pdfbox.io.ScratchFileBuffer.write : if $b8 <= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.write : $l11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l10 = (long) $i9
org.apache.pdfbox.io.ScratchFileBuffer.write : $l10 = (long) $i9 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l12 = $l11 + $l10
org.apache.pdfbox.io.ScratchFileBuffer.write : $l12 = $l11 + $l10 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> = $l12
org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> = $l12 >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : goto [?= $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r3)]
org.apache.pdfbox.io.ScratchFile.createBuffer : goto [?= $i0 = virtualinvoke r1.<java.io.InputStream: int read(byte[])>(r3)] >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : virtualinvoke $r4.<org.apache.pdfbox.io.ScratchFileBuffer: void seek(long)>(0L)
org.apache.pdfbox.io.ScratchFile.createBuffer : virtualinvoke $r4.<org.apache.pdfbox.io.ScratchFileBuffer: void seek(long)>(0L) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.seek : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b3 = l0 cmp $l2
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b3 = l0 cmp $l2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b3 <= 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b3 <= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b4 = l0 cmp 0L
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b4 = l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b4 >= 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b4 >= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b6 = l0 cmp $l5
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b6 = l0 cmp $l5 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b6 < 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b6 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l23 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l23 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i21 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i21 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l22 = (long) $i21
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l22 = (long) $i21 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l24 = $l23 + $l22
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l24 = $l23 + $l22 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b25 = l0 cmp $l24
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b25 = l0 cmp $l24 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b25 > 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b25 > 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l26 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l26 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l27 = l0 - $l26
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l27 = l0 - $l26 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i28 = (int) $l27
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i28 = (int) $l27 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i28
org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i28 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : goto [?= return]
org.apache.pdfbox.io.ScratchFileBuffer.seek : goto [?= return] >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : return $r4
org.apache.pdfbox.io.ScratchFile.createBuffer : return $r4 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r8 = new org.apache.pdfbox.pdfparser.PDFParser
org.apache.pdfbox.pdmodel.PDDocument.load : $r8 = new org.apache.pdfbox.pdfparser.PDFParser >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r8.<org.apache.pdfbox.pdfparser.PDFParser: void <init>(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.ScratchFile)>(r11, r1, r2, r3, $r7)
org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r8.<org.apache.pdfbox.pdfparser.PDFParser: void <init>(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.ScratchFile)>(r11, r1, r2, r3, $r7) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.length : $l0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.length : $l0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.length : return $l0
org.apache.pdfbox.io.ScratchFileBuffer.length : return $l0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.init : r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.pdfbox.pdfparser.nonSequentialPDFParser.eofLookupRange")
org.apache.pdfbox.pdfparser.PDFParser.init : r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.pdfbox.pdfparser.nonSequentialPDFParser.eofLookupRange") >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.init : if r2 == null
org.apache.pdfbox.pdfparser.PDFParser.init : if r2 == null >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.init : $r11 = new org.apache.pdfbox.cos.COSDocument
org.apache.pdfbox.pdfparser.PDFParser.init : $r11 = new org.apache.pdfbox.cos.COSDocument >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.init : specialinvoke $r11.<org.apache.pdfbox.cos.COSDocument: void <init>(org.apache.pdfbox.io.ScratchFile)>(r1)
org.apache.pdfbox.pdfparser.PDFParser.init : specialinvoke $r11.<org.apache.pdfbox.cos.COSDocument: void <init>(org.apache.pdfbox.io.ScratchFile)>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.init : r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> = $r11
org.apache.pdfbox.pdfparser.PDFParser.init : r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> = $r11 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : virtualinvoke $r8.<org.apache.pdfbox.pdfparser.PDFParser: void parse()>()
org.apache.pdfbox.pdmodel.PDDocument.load : virtualinvoke $r8.<org.apache.pdfbox.pdfparser.PDFParser: void parse()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean parsePDFHeader()>()
org.apache.pdfbox.pdfparser.PDFParser.parse : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean parsePDFHeader()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parsePDFHeader : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean parseHeader(java.lang.String,java.lang.String)>("%PDF-", "1.4")
org.apache.pdfbox.pdfparser.COSParser.parsePDFHeader : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean parseHeader(java.lang.String,java.lang.String)>("%PDF-", "1.4") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : r34 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>()
org.apache.pdfbox.pdfparser.COSParser.parseHeader : r34 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $z0 = interfaceinvoke $r2.<org.apache.pdfbox.pdfparser.SequentialSource: boolean isEOF()>()
org.apache.pdfbox.pdfparser.BaseParser.readLine : $z0 = interfaceinvoke $r2.<org.apache.pdfbox.pdfparser.SequentialSource: boolean isEOF()>() >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader>
org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader> >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : $z0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>()
org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : $z0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l1 = (long) $i0
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l1 = (long) $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l4 = $l2 + $l1
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l4 = $l2 + $l1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $b5 = $l4 cmp $l3
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $b5 = $l4 cmp $l3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : if $b5 < 0
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : if $b5 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $z0 = 0
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : return $z0
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : return $z0
org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z0 == 0
org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r3 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(11)
org.apache.pdfbox.pdfparser.BaseParser.readLine : specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(11) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $i1 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.readLine : $i1 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.read : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader>
org.apache.pdfbox.pdfparser.RandomAccessSource.read : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader> >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.read : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: int read()>()
org.apache.pdfbox.pdfparser.RandomAccessSource.read : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: int read()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.read : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.read : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l1 = (long) $i0
org.apache.pdfbox.io.ScratchFileBuffer.read : $l1 = (long) $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l4 = $l2 + $l1
org.apache.pdfbox.io.ScratchFileBuffer.read : $l4 = $l2 + $l1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.read : $l3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $b5 = $l4 cmp $l3
org.apache.pdfbox.io.ScratchFileBuffer.read : $b5 = $l4 cmp $l3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : if $b5 < 0
org.apache.pdfbox.io.ScratchFileBuffer.read : if $b5 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $z0 = specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean ensureAvailableBytesInPage(boolean)>(0)
org.apache.pdfbox.io.ScratchFileBuffer.read : $z0 = specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean ensureAvailableBytesInPage(boolean)>(0) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : if $z0 != 0
org.apache.pdfbox.io.ScratchFileBuffer.read : if $z0 != 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i7 = $i6 + 1
org.apache.pdfbox.io.ScratchFileBuffer.read : $i7 = $i6 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i7
org.apache.pdfbox.io.ScratchFileBuffer.read : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i7 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $b8 = $r1[$i6]
org.apache.pdfbox.io.ScratchFileBuffer.read : $b8 = $r1[$i6] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $s9 = $b8 & 255
org.apache.pdfbox.io.ScratchFileBuffer.read : $s9 = $b8 & 255 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : return $s9
org.apache.pdfbox.io.ScratchFileBuffer.read : return $s9 >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.read : return $i0
org.apache.pdfbox.pdfparser.RandomAccessSource.read : return $i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : if $i1 == -1
org.apache.pdfbox.pdfparser.BaseParser.readLine : if $i1 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $z3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEOL(int)>($i1)
org.apache.pdfbox.pdfparser.BaseParser.readLine : $z3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEOL(int)>($i1) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isLF(int)>(i0)
org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isLF(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isLF : if 10 != i0
org.apache.pdfbox.pdfparser.BaseParser.isLF : if 10 != i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isLF : $z0 = 0
org.apache.pdfbox.pdfparser.BaseParser.isLF : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isLF : return $z0
org.apache.pdfbox.pdfparser.BaseParser.isLF : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : if $z0 != 0
org.apache.pdfbox.pdfparser.BaseParser.isEOL : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isCR(int)>(i0)
org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isCR(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isCR : if 13 != i0
org.apache.pdfbox.pdfparser.BaseParser.isCR : if 13 != i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isCR : $z0 = 0
org.apache.pdfbox.pdfparser.BaseParser.isCR : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isCR : return $z0
org.apache.pdfbox.pdfparser.BaseParser.isCR : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : if $z1 == 0
org.apache.pdfbox.pdfparser.BaseParser.isEOL : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z2 = 0
org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z2 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : return $z2
org.apache.pdfbox.pdfparser.BaseParser.isEOL : return $z2 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z3 == 0
org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $c4 = (char) $i1
org.apache.pdfbox.pdfparser.BaseParser.readLine : $c4 = (char) $i1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4)
org.apache.pdfbox.pdfparser.BaseParser.readLine : virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : goto [?= $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>]
org.apache.pdfbox.pdfparser.BaseParser.readLine : goto [?= $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isLF : $z0 = 1
org.apache.pdfbox.pdfparser.BaseParser.isLF : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isLF : goto [?= return $z0]
org.apache.pdfbox.pdfparser.BaseParser.isLF : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z2 = 1
org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z2 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : goto [?= return $z2]
org.apache.pdfbox.pdfparser.BaseParser.isEOL : goto [?= return $z2] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : goto [?= $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isCR(int)>($i1)]
org.apache.pdfbox.pdfparser.BaseParser.readLine : goto [?= $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isCR(int)>($i1)] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isCR(int)>($i1)
org.apache.pdfbox.pdfparser.BaseParser.readLine : $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isCR(int)>($i1) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z1 == 0
org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : return $r9
org.apache.pdfbox.pdfparser.BaseParser.readLine : return $r9 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z0 = virtualinvoke r34.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z0 = virtualinvoke r34.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z0 != 0
org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z6 = virtualinvoke r34.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z6 = virtualinvoke r34.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z6 != 0
org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z6 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : i0 = virtualinvoke r34.<java.lang.String: int indexOf(java.lang.String)>(r1)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : i0 = virtualinvoke r34.<java.lang.String: int indexOf(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : if i0 <= 0
org.apache.pdfbox.pdfparser.COSParser.parseHeader : if i0 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z1 = virtualinvoke r34.<java.lang.String: boolean startsWith(java.lang.String)>(r1)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z1 = virtualinvoke r34.<java.lang.String: boolean startsWith(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z1 == 0
org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r11 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r11 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : specialinvoke $r11.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdfparser.COSParser.parseHeader : specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\d.\\d")
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\\d.\\d") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z3 = virtualinvoke r34.<java.lang.String: boolean matches(java.lang.String)>($r14)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z3 = virtualinvoke r34.<java.lang.String: boolean matches(java.lang.String)>($r14) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z3 != 0
org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z3 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : f0 = -1.0F
org.apache.pdfbox.pdfparser.COSParser.parseHeader : f0 = -1.0F >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : r36 = virtualinvoke r34.<java.lang.String: java.lang.String[] split(java.lang.String)>("-")
org.apache.pdfbox.pdfparser.COSParser.parseHeader : r36 = virtualinvoke r34.<java.lang.String: java.lang.String[] split(java.lang.String)>("-") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $i14 = lengthof r36
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $i14 = lengthof r36 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $i14 != 2
org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $i14 != 2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r10 = r36[1]
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r10 = r36[1] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r10)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>($r10) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : goto [?= $b1 = f0 cmpg 0.0F]
org.apache.pdfbox.pdfparser.COSParser.parseHeader : goto [?= $b1 = f0 cmpg 0.0F] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $b1 = f0 cmpg 0.0F
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $b1 = f0 cmpg 0.0F >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $b1 >= 0
org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $b1 >= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: void setVersion(float)>(f0)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: void setVersion(float)>(f0) >>>>>>>> org.apache.pdfbox.cos.COSDocument.setVersion : r0.<org.apache.pdfbox.cos.COSDocument: float version> = f0
org.apache.pdfbox.cos.COSDocument.setVersion : r0.<org.apache.pdfbox.cos.COSDocument: float version> = f0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(0L)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(0L) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : return 1
org.apache.pdfbox.pdfparser.COSParser.parseHeader : return 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parsePDFHeader : return $z0
org.apache.pdfbox.pdfparser.COSParser.parsePDFHeader : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : if $z0 != 0
org.apache.pdfbox.pdfparser.PDFParser.parse : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : $z1 = r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean initialParseDone>
org.apache.pdfbox.pdfparser.PDFParser.parse : $z1 = r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean initialParseDone> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : if $z1 != 0
org.apache.pdfbox.pdfparser.PDFParser.parse : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void initialParse()>()
org.apache.pdfbox.pdfparser.PDFParser.parse : virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void initialParse()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : r21 = null
org.apache.pdfbox.pdfparser.PDFParser.initialParse : r21 = null >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: long getStartxrefOffset()>()
org.apache.pdfbox.pdfparser.PDFParser.initialParse : l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: long getStartxrefOffset()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l4 = r0.<org.apache.pdfbox.pdfparser.COSParser: long fileLen>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l4 = r0.<org.apache.pdfbox.pdfparser.COSParser: long fileLen> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $i2 = r0.<org.apache.pdfbox.pdfparser.COSParser: int readTrailBytes>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $i2 = r0.<org.apache.pdfbox.pdfparser.COSParser: int readTrailBytes> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l3 = (long) $i2
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l3 = (long) $i2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $b5 = $l4 cmp $l3
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $b5 = $l4 cmp $l3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if $b5 >= 0
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if $b5 >= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l12 = r0.<org.apache.pdfbox.pdfparser.COSParser: long fileLen>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l12 = r0.<org.apache.pdfbox.pdfparser.COSParser: long fileLen> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $i13 = (int) $l12
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $i13 = (int) $l12 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : goto [?= i14 = $i13]
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : goto [?= i14 = $i13] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i14 = $i13
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i14 = $i13 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : r1 = newarray (byte)[$i13]
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : r1 = newarray (byte)[$i13] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l7 = r0.<org.apache.pdfbox.pdfparser.COSParser: long fileLen>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l7 = r0.<org.apache.pdfbox.pdfparser.COSParser: long fileLen> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l6 = (long) $i13
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l6 = (long) $i13 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : l0 = $l7 - $l6
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : l0 = $l7 - $l6 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0)
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i15 = 0
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i15 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if i15 >= i14
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if i15 >= i14 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r25 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r25 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $i10 = i14 - i15
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $i10 = i14 - i15 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i1 = interfaceinvoke $r25.<org.apache.pdfbox.io.RandomAccessRead: int read(byte[],int,int)>(r1, i15, $i10)
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i1 = interfaceinvoke $r25.<org.apache.pdfbox.io.RandomAccessRead: int read(byte[],int,int)>(r1, i15, $i10) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.read : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l4 = (long) $i3
org.apache.pdfbox.io.ScratchFileBuffer.read : $l4 = (long) $i3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l7 = $l5 + $l4
org.apache.pdfbox.io.ScratchFileBuffer.read : $l7 = $l5 + $l4 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.read : $l6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $b8 = $l7 cmp $l6
org.apache.pdfbox.io.ScratchFileBuffer.read : $b8 = $l7 cmp $l6 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : if $b8 < 0
org.apache.pdfbox.io.ScratchFileBuffer.read : if $b8 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l15 = (long) i1
org.apache.pdfbox.io.ScratchFileBuffer.read : $l15 = (long) i1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.read : $l13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.read : $l11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l10 = (long) $i9
org.apache.pdfbox.io.ScratchFileBuffer.read : $l10 = (long) $i9 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l12 = $l11 + $l10
org.apache.pdfbox.io.ScratchFileBuffer.read : $l12 = $l11 + $l10 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l14 = $l13 - $l12
org.apache.pdfbox.io.ScratchFileBuffer.read : $l14 = $l13 - $l12 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l16 = staticinvoke <java.lang.Math: long min(long,long)>($l15, $l14)
org.apache.pdfbox.io.ScratchFileBuffer.read : $l16 = staticinvoke <java.lang.Math: long min(long,long)>($l15, $l14) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i23 = (int) $l16
org.apache.pdfbox.io.ScratchFileBuffer.read : i23 = (int) $l16 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i24 = 0
org.apache.pdfbox.io.ScratchFileBuffer.read : i24 = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i25 = i0
org.apache.pdfbox.io.ScratchFileBuffer.read : i25 = i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : if i23 <= 0
org.apache.pdfbox.io.ScratchFileBuffer.read : if i23 <= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i17 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i17 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i19 = $i18 - $i17
org.apache.pdfbox.io.ScratchFileBuffer.read : $i19 = $i18 - $i17 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i2 = staticinvoke <java.lang.Math: int min(int,int)>(i23, $i19)
org.apache.pdfbox.io.ScratchFileBuffer.read : i2 = staticinvoke <java.lang.Math: int min(int,int)>(i23, $i19) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i20 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i20 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i20, r1, i25, i2)
org.apache.pdfbox.io.ScratchFileBuffer.read : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i20, r1, i25, i2) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i21 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i21 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i22 = $i21 + i2
org.apache.pdfbox.io.ScratchFileBuffer.read : $i22 = $i21 + i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i22
org.apache.pdfbox.io.ScratchFileBuffer.read : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i22 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i24 = i24 + i2
org.apache.pdfbox.io.ScratchFileBuffer.read : i24 = i24 + i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i25 = i25 + i2
org.apache.pdfbox.io.ScratchFileBuffer.read : i25 = i25 + i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i23 = i23 - i2
org.apache.pdfbox.io.ScratchFileBuffer.read : i23 = i23 - i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : goto [?= (branch)]
org.apache.pdfbox.io.ScratchFileBuffer.read : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : return i24
org.apache.pdfbox.io.ScratchFileBuffer.read : return i24 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if i1 >= 1
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if i1 >= 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i15 = i15 + i1
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i15 = i15 + i1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : goto [?= (branch)]
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(0L)
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(0L) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : goto [?= $r5 = <org.apache.pdfbox.pdfparser.COSParser: char[] EOF_MARKER>]
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : goto [?= $r5 = <org.apache.pdfbox.pdfparser.COSParser: char[] EOF_MARKER>] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r5 = <org.apache.pdfbox.pdfparser.COSParser: char[] EOF_MARKER>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r5 = <org.apache.pdfbox.pdfparser.COSParser: char[] EOF_MARKER> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $i8 = lengthof r1
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $i8 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i16 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: int lastIndexOf(char[],byte[],int)>($r5, r1, $i8)
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i16 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: int lastIndexOf(char[],byte[],int)>($r5, r1, $i8) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : $i2 = lengthof r1
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : $i2 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i1 = $i2 - 1
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i1 = $i2 - 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i4 = i0
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i4 = i0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i5 = i1
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i5 = i1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : c6 = r1[i1]
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : c6 = r1[i1] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i4 = i4 + -1
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i4 = i4 + -1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : if i4 < 0
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : if i4 < 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : $b3 = r2[i4]
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : $b3 = r2[i4] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : if $b3 != c6
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : if $b3 != c6 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : if i5 >= i1
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : if i5 >= i1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i5 = i5 + -1
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : i5 = i5 + -1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : if i5 >= 0
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : if i5 >= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : c6 = r1[i5]
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : c6 = r1[i5] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : goto [?= i4 = i4 + -1]
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : goto [?= i4 = i4 + -1] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : return i4
org.apache.pdfbox.pdfparser.COSParser.lastIndexOf : return i4 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if i16 >= 0
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if i16 >= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r6 = <org.apache.pdfbox.pdfparser.COSParser: char[] STARTXREF>
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $r6 = <org.apache.pdfbox.pdfparser.COSParser: char[] STARTXREF> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i17 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: int lastIndexOf(char[],byte[],int)>($r6, r1, i16)
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : i17 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: int lastIndexOf(char[],byte[],int)>($r6, r1, i16) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l9 = (long) i17
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : $l9 = (long) i17 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : l18 = l0 + $l9
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : l18 = l0 + $l9 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if i17 >= 0
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : if i17 >= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : return l18
org.apache.pdfbox.pdfparser.COSParser.getStartxrefOffset : return l18 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : z7 = 0
org.apache.pdfbox.pdfparser.PDFParser.initialParse : z7 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $b1 = l0 cmp -1L
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $b1 = l0 cmp -1L >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $b1 <= 0
org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $b1 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : r21 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDictionary parseXref(long)>(l0)
org.apache.pdfbox.pdfparser.PDFParser.initialParse : r21 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDictionary parseXref(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0)
org.apache.pdfbox.pdfparser.COSParser.parseXref : interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $l1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long parseStartXref()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : $l1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long parseStartXref()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseStartXref : l0 = -1L
org.apache.pdfbox.pdfparser.COSParser.parseStartXref : l0 = -1L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseStartXref : $r1 = <org.apache.pdfbox.pdfparser.COSParser: char[] STARTXREF>
org.apache.pdfbox.pdfparser.COSParser.parseStartXref : $r1 = <org.apache.pdfbox.pdfparser.COSParser: char[] STARTXREF> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseStartXref : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isString(char[])>($r1)
org.apache.pdfbox.pdfparser.COSParser.parseStartXref : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isString(char[])>($r1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : z0 = 1
org.apache.pdfbox.pdfparser.COSParser.isString : z0 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.isString : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : l0 = interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>()
org.apache.pdfbox.pdfparser.COSParser.isString : l0 = interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.getPosition : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.getPosition : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.getPosition : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.getPosition : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.getPosition : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.getPosition : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.getPosition : $l1 = (long) $i0
org.apache.pdfbox.io.ScratchFileBuffer.getPosition : $l1 = (long) $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.getPosition : $l3 = $l2 + $l1
org.apache.pdfbox.io.ScratchFileBuffer.getPosition : $l3 = $l2 + $l1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.getPosition : return $l3
org.apache.pdfbox.io.ScratchFileBuffer.getPosition : return $l3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : i1 = lengthof r1
org.apache.pdfbox.pdfparser.COSParser.isString : i1 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : i4 = 0
org.apache.pdfbox.pdfparser.COSParser.isString : i4 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : if i4 >= i1
org.apache.pdfbox.pdfparser.COSParser.isString : if i4 >= i1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : c2 = r1[i4]
org.apache.pdfbox.pdfparser.COSParser.isString : c2 = r1[i4] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.isString : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : $i3 = interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: int read()>()
org.apache.pdfbox.pdfparser.COSParser.isString : $i3 = interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : if $i3 == c2
org.apache.pdfbox.pdfparser.COSParser.isString : if $i3 == c2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : i4 = i4 + 1
org.apache.pdfbox.pdfparser.COSParser.isString : i4 = i4 + 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : goto [?= (branch)]
org.apache.pdfbox.pdfparser.COSParser.isString : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.isString : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0)
org.apache.pdfbox.pdfparser.COSParser.isString : interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : return z0
org.apache.pdfbox.pdfparser.COSParser.isString : return z0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseStartXref : if $z0 == 0
org.apache.pdfbox.pdfparser.COSParser.parseStartXref : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseStartXref : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>()
org.apache.pdfbox.pdfparser.COSParser.parseStartXref : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.readString : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>(i0)
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 0
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 9
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 9 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 12
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 12 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 10
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 10 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 13
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 13 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 != 32
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 != 32 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $z0 = 0
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : return $z0
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if $z1 != 0
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if i0 != 37
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if i0 != 37 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if i0 == -1
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if i0 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i0)
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.unread : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader>
org.apache.pdfbox.pdfparser.RandomAccessSource.unread : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader> >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.unread : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void rewind(int)>(1)
org.apache.pdfbox.pdfparser.RandomAccessSource.unread : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void rewind(int)>(1) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.rewind : $l3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.rewind : $l3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.rewind : $i1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.rewind : $i1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.rewind : $l2 = (long) $i1
org.apache.pdfbox.io.ScratchFileBuffer.rewind : $l2 = (long) $i1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.rewind : $l5 = $l3 + $l2
org.apache.pdfbox.io.ScratchFileBuffer.rewind : $l5 = $l3 + $l2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.rewind : $l4 = (long) i0
org.apache.pdfbox.io.ScratchFileBuffer.rewind : $l4 = (long) i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.rewind : $l6 = $l5 - $l4
org.apache.pdfbox.io.ScratchFileBuffer.rewind : $l6 = $l5 - $l4 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.rewind : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void seek(long)>($l6)
org.apache.pdfbox.io.ScratchFileBuffer.rewind : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void seek(long)>($l6) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : $r2 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.BaseParser.readString : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdfparser.BaseParser.readString : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readString : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : i2 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.readString : i2 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : $c0 = (char) i2
org.apache.pdfbox.pdfparser.BaseParser.readString : $c0 = (char) i2 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEndOfName(int)>($c0)
org.apache.pdfbox.pdfparser.BaseParser.readString : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEndOfName(int)>($c0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 32
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 32 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 13
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 13 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 10
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 10 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 9
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 9 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 62
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 62 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 60
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 60 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 91
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 91 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 47
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 47 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 93
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 93 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 41
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 41 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 40
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 40 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 0
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 != 12
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : if i0 != 12 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : $z0 = 0
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : return $z0
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : if $z0 != 0
org.apache.pdfbox.pdfparser.BaseParser.readString : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : if i2 == -1
org.apache.pdfbox.pdfparser.BaseParser.readString : if i2 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : $c1 = (char) i2
org.apache.pdfbox.pdfparser.BaseParser.readString : $c1 = (char) i2 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
org.apache.pdfbox.pdfparser.BaseParser.readString : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : $r7 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readString : $r7 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : i2 = interfaceinvoke $r7.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.readString : i2 = interfaceinvoke $r7.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : goto [?= $c0 = (char) i2]
org.apache.pdfbox.pdfparser.BaseParser.readString : goto [?= $c0 = (char) i2] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : $z0 = 1
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : goto [?= return $z0]
org.apache.pdfbox.pdfparser.BaseParser.isEndOfName : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readString : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i2)
org.apache.pdfbox.pdfparser.BaseParser.readString : interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i2) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.BaseParser.readString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readString : return $r4
org.apache.pdfbox.pdfparser.BaseParser.readString : return $r4 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseStartXref : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.COSParser.parseStartXref : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $z0 = 1
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : goto [?= return $z0]
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : i0 = interfaceinvoke $r2.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : i0 = interfaceinvoke $r2.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : goto [?= $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>(i0)]
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : goto [?= $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>(i0)] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseStartXref : l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long readLong()>()
org.apache.pdfbox.pdfparser.COSParser.parseStartXref : l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long readLong()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLong : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.readLong : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLong : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.StringBuilder readStringNumber()>()
org.apache.pdfbox.pdfparser.BaseParser.readLong : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.StringBuilder readStringNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $r2 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $i0 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $i0 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 32
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 32 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 10
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 10 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 13
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 13 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 60
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 60 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 91
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 91 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 40
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 40 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 0
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == -1
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i0 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $c1 = (char) $i0
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $c1 = (char) $i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $i2 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>()
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $i2 = virtualinvoke $r2.<java.lang.StringBuilder: int length()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $i3 = <org.apache.pdfbox.pdfparser.BaseParser: int MAX_LENGTH_LONG>
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $i3 = <org.apache.pdfbox.pdfparser.BaseParser: int MAX_LENGTH_LONG> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i2 <= $i3
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : if $i2 <= $i3 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>($i0)
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>($i0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : return $r2
org.apache.pdfbox.pdfparser.BaseParser.readStringNumber : return $r2 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLong : $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.BaseParser.readLong : $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLong : l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3)
org.apache.pdfbox.pdfparser.BaseParser.readLong : l2 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r3) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLong : goto [?= return l2]
org.apache.pdfbox.pdfparser.BaseParser.readLong : goto [?= return l2] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLong : return l2
org.apache.pdfbox.pdfparser.BaseParser.readLong : return l2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseStartXref : return l0
org.apache.pdfbox.pdfparser.COSParser.parseStartXref : return l0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : l23 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l1)
org.apache.pdfbox.pdfparser.COSParser.parseXref : l23 = staticinvoke <java.lang.Math: long max(long,long)>(0L, $l1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : l24 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long checkXRefOffset(long)>(l23)
org.apache.pdfbox.pdfparser.COSParser.parseXref : l24 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long checkXRefOffset(long)>(l23) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $z0 = r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isLenient>
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $z0 = r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isLenient> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : if $z0 != 0
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $r1 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $r1 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0)
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $i2 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $i2 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.peek : i0 = virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: int read()>()
org.apache.pdfbox.io.ScratchFileBuffer.peek : i0 = virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: int read()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.peek : if i0 == -1
org.apache.pdfbox.io.ScratchFileBuffer.peek : if i0 == -1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.peek : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void rewind(int)>(1)
org.apache.pdfbox.io.ScratchFileBuffer.peek : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void rewind(int)>(1) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.peek : return i0
org.apache.pdfbox.io.ScratchFileBuffer.peek : return i0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : if $i2 != 120
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : if $i2 != 120 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $r3 = <org.apache.pdfbox.pdfparser.COSParser: char[] XREF_TABLE>
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $r3 = <org.apache.pdfbox.pdfparser.COSParser: char[] XREF_TABLE> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isString(char[])>($r3)
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isString(char[])>($r3) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : if $z1 == 0
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : return l0
org.apache.pdfbox.pdfparser.COSParser.checkXRefOffset : return l0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $b2 = l24 cmp -1L
org.apache.pdfbox.pdfparser.COSParser.parseXref : $b2 = l24 cmp -1L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b2 <= 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b2 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : l23 = l24
org.apache.pdfbox.pdfparser.COSParser.parseXref : l23 = l24 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: void setStartXref(long)>(l23)
org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: void setStartXref(long)>(l23) >>>>>>>> org.apache.pdfbox.cos.COSDocument.setStartXref : r0.<org.apache.pdfbox.cos.COSDocument: long startXref> = l0
org.apache.pdfbox.cos.COSDocument.setStartXref : r0.<org.apache.pdfbox.cos.COSDocument: long startXref> = l0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : l25 = l23
org.apache.pdfbox.pdfparser.COSParser.parseXref : l25 = l23 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : l26 = -1L
org.apache.pdfbox.pdfparser.COSParser.parseXref : l26 = -1L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $b27 = l25 cmp 0L
org.apache.pdfbox.pdfparser.COSParser.parseXref : $b27 = l25 cmp 0L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b27 <= 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b27 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $b4 = l25 cmp l26
org.apache.pdfbox.pdfparser.COSParser.parseXref : $b4 = l25 cmp l26 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b4 == 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b4 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : l26 = l25
org.apache.pdfbox.pdfparser.COSParser.parseXref : l26 = l25 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r19 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r19 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : interfaceinvoke $r19.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l25)
org.apache.pdfbox.pdfparser.COSParser.parseXref : interfaceinvoke $r19.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l25) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r20 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r20 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $i5 = interfaceinvoke $r20.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : $i5 = interfaceinvoke $r20.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $i5 != 120
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $i5 != 120 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean parseXrefTable(long)>(l25)
org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean parseXrefTable(long)>(l25) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i3 = interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i3 = interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $i3 == 120
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $i3 == 120 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r6 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r6 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("xref")
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z0 = virtualinvoke $r6.<java.lang.String: boolean equals(java.lang.Object)>("xref") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z0 != 0
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r7 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r7 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r3 = virtualinvoke r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r7)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r3 = virtualinvoke r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r7) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r8 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r8 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i4 = lengthof r3
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i4 = lengthof r3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : interfaceinvoke $r8.<org.apache.pdfbox.io.RandomAccessRead: void rewind(int)>($i4)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : interfaceinvoke $r8.<org.apache.pdfbox.io.RandomAccessRead: void rewind(int)>($i4) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r10 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r10 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r9 = <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType TABLE>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r9 = <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType TABLE> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : virtualinvoke $r10.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void nextXrefObj(long,org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType)>(l0, $r9)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : virtualinvoke $r10.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void nextXrefObj(long,org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType)>(l0, $r9) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map bytePosToXrefMap>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map bytePosToXrefMap> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : $r3 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : $r4 = new org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj
org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : $r4 = new org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : specialinvoke $r4.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: void <init>(org.apache.pdfbox.pdfparser.XrefTrailerResolver$1)>(null)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : specialinvoke $r4.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: void <init>(org.apache.pdfbox.pdfparser.XrefTrailerResolver$1)>(null) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> = $r4
org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> = $r4 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : interfaceinvoke $r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, $r4) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : $r6 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : $r6 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType access$102(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj,org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType)>($r6, r1)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.nextXrefObj : staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType access$102(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj,org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType)>($r6, r1) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$102 : r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType xrefType> = r1
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$102 : r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType xrefType> = r1 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$102 : return r1
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$102 : return r1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("trailer")
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z1 = virtualinvoke r2.<java.lang.String: boolean startsWith(java.lang.String)>("trailer") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z1 == 0
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r40 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r40 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r41 = virtualinvoke r40.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s")
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r41 = virtualinvoke r40.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i5 = lengthof r41
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i5 = lengthof r41 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $i5 == 2
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $i5 == 2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r11 = r41[0]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r11 = r41[0] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : l12 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r11)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : l12 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r11) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r12 = r41[1]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r12 = r41[1] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r12) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : i13 = 0
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : i13 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if i13 >= i1
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if i13 >= i1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r13 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r13 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z2 = interfaceinvoke $r13.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z2 = interfaceinvoke $r13.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z2 != 0
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z2 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r14 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r14 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i6 = interfaceinvoke $r14.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i6 = interfaceinvoke $r14.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $c7 = (char) $i6
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $c7 = (char) $i6 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isEndOfName(int)>($c7)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isEndOfName(int)>($c7) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z3 == 0
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r15 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r15 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i8 = interfaceinvoke $r15.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i8 = interfaceinvoke $r15.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $i8 != 116
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $i8 != 116 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r42 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r42 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isCR : $z0 = 1
org.apache.pdfbox.pdfparser.BaseParser.isCR : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isCR : goto [?= return $z0]
org.apache.pdfbox.pdfparser.BaseParser.isCR : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $i2 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.BaseParser.readLine : $i2 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.peek : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader>
org.apache.pdfbox.pdfparser.RandomAccessSource.peek : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader> >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.peek : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.RandomAccessSource.peek : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.peek : return $i0
org.apache.pdfbox.pdfparser.RandomAccessSource.peek : return $i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $z2 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isLF(int)>($i2)
org.apache.pdfbox.pdfparser.BaseParser.readLine : $z2 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isLF(int)>($i2) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z2 == 0
org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r6 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r6 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : interfaceinvoke $r6.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.readLine : interfaceinvoke $r6.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r43 = virtualinvoke r42.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s")
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : r43 = virtualinvoke r42.<java.lang.String: java.lang.String[] split(java.lang.String)>("\\s") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i9 = lengthof r43
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i9 = lengthof r43 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $i9 >= 3
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $i9 >= 3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i10 = lengthof r43
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i10 = lengthof r43 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i11 = $i10 - 1
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $i11 = $i10 - 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r16 = r43[$i11]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r16 = r43[$i11] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("n")
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z4 = virtualinvoke $r16.<java.lang.String: boolean equals(java.lang.Object)>("n") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z4 == 0
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r17 = r43[2]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r17 = r43[2] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z5 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("f")
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z5 = virtualinvoke $r17.<java.lang.String: boolean equals(java.lang.Object)>("f") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z5 != 0
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z5 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : l12 = l12 + 1L
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : l12 = l12 + 1L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : i13 = i13 + 1
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : i13 = i13 + 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : goto [?= (branch)]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r23 = r43[0]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r23 = r43[0] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : l14 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : l14 = staticinvoke <java.lang.Long: long parseLong(java.lang.String)>($r23) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r24 = r43[1]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r24 = r43[1] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r24)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : i2 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r24) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r25 = new org.apache.pdfbox.cos.COSObjectKey
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r25 = new org.apache.pdfbox.cos.COSObjectKey >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : specialinvoke $r25.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>(l12, i2)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : specialinvoke $r25.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>(l12, i2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r26 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $r26 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : virtualinvoke $r26.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void setXRef(org.apache.pdfbox.cos.COSObjectKey,long)>($r25, l14)
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : virtualinvoke $r26.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void setXRef(org.apache.pdfbox.cos.COSObjectKey,long)>($r25, l14) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : if $r2 != null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : if $r2 != null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r3 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r3 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r4 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r3)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r4 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r3) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$200 : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map xrefTable>
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$200 : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map xrefTable> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$200 : return $r1
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$200 : return $r1 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $z0 = interfaceinvoke $r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.hashCode : $l2 = r0.<org.apache.pdfbox.cos.COSObjectKey: long number>
org.apache.pdfbox.cos.COSObjectKey.hashCode : $l2 = r0.<org.apache.pdfbox.cos.COSObjectKey: long number> >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.hashCode : $i0 = r0.<org.apache.pdfbox.cos.COSObjectKey: int generation>
org.apache.pdfbox.cos.COSObjectKey.hashCode : $i0 = r0.<org.apache.pdfbox.cos.COSObjectKey: int generation> >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.hashCode : $l1 = (long) $i0
org.apache.pdfbox.cos.COSObjectKey.hashCode : $l1 = (long) $i0 >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.hashCode : $l3 = $l2 + $l1
org.apache.pdfbox.cos.COSObjectKey.hashCode : $l3 = $l2 + $l1 >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.hashCode : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3)
org.apache.pdfbox.cos.COSObjectKey.hashCode : $r1 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l3) >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.hashCode : $i4 = virtualinvoke $r1.<java.lang.Long: int hashCode()>()
org.apache.pdfbox.cos.COSObjectKey.hashCode : $i4 = virtualinvoke $r1.<java.lang.Long: int hashCode()>() >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.hashCode : return $i4
org.apache.pdfbox.cos.COSObjectKey.hashCode : return $i4 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : if $z0 != 0
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r5 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r5 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r6 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r5)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r6 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r5) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : $r7 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setXRef : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : goto [?= l12 = l12 + 1L]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : goto [?= l12 = l12 + 1L] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z6 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isDigit()>()
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : $z6 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isDigit()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.isDigit : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.BaseParser.isDigit : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : $z0 = staticinvoke <org.apache.pdfbox.pdfparser.BaseParser: boolean isDigit(int)>($i0)
org.apache.pdfbox.pdfparser.BaseParser.isDigit : $z0 = staticinvoke <org.apache.pdfbox.pdfparser.BaseParser: boolean isDigit(int)>($i0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : if i0 < 48
org.apache.pdfbox.pdfparser.BaseParser.isDigit : if i0 < 48 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : if i0 > 57
org.apache.pdfbox.pdfparser.BaseParser.isDigit : if i0 > 57 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : $z0 = 0
org.apache.pdfbox.pdfparser.BaseParser.isDigit : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : return $z0
org.apache.pdfbox.pdfparser.BaseParser.isDigit : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z6 != 0
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : if $z6 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : goto [?= return 1]
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : goto [?= return 1] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : return 1
org.apache.pdfbox.pdfparser.COSParser.parseXrefTable : return 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r23 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r23 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $l9 = interfaceinvoke $r23.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : $l9 = interfaceinvoke $r23.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : r0.<org.apache.pdfbox.pdfparser.COSParser: long trailerOffset> = $l9
org.apache.pdfbox.pdfparser.COSParser.parseXref : r0.<org.apache.pdfbox.pdfparser.COSParser: long trailerOffset> = $l9 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $z1 = r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isLenient>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $z1 = r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isLenient> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $z1 == 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r53 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r53 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : i28 = interfaceinvoke $r53.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : i28 = interfaceinvoke $r53.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if i28 == 116
org.apache.pdfbox.pdfparser.COSParser.parseXref : if i28 == 116 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $z6 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean parseTrailer()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : $z6 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean parseTrailer()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $i1 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $i1 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : if $i1 == 116
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : if $i1 == 116 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $r3 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : l0 = interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : l0 = interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $r4 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $r4 = virtualinvoke r1.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("trailer")
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $z0 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>("trailer") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : if $z0 != 0
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : r8 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDictionary parseCOSDictionary()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : r8 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDictionary parseCOSDictionary()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(60)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(60) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedChar : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readExpectedChar : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedChar : $i2 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.readExpectedChar : $i2 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedChar : c1 = (char) $i2
org.apache.pdfbox.pdfparser.BaseParser.readExpectedChar : c1 = (char) $i2 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedChar : if c1 == c0
org.apache.pdfbox.pdfparser.BaseParser.readExpectedChar : if c1 == c0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : $r2 = new org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : $r2 = new org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : specialinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: void <init>()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : specialinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : z1 = 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : z1 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : if z1 != 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : if z1 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : $i1 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : $i1 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : c0 = (char) $i1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : c0 = (char) $i1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : if c0 != 62
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : if c0 != 62 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : if c0 != 47
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : if c0 != 47 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void parseCOSDictionaryNameValuePair(org.apache.pdfbox.cos.COSDictionary)>($r2)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void parseCOSDictionaryNameValuePair(org.apache.pdfbox.cos.COSDictionary)>($r2) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSName parseCOSName()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSName parseCOSName()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(47)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(47) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r4 = new java.io.ByteArrayOutputStream
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r4 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : i6 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : i6 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : if i6 == -1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : if i6 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : i7 = i6
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : i7 = i6 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : if i6 != 35
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : if i6 != 35 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEndOfName(int)>(i6)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEndOfName(int)>(i6) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : if $z1 == 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>(i6)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>(i6) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r14 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r14 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : i6 = interfaceinvoke $r14.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : i6 = interfaceinvoke $r14.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : goto [?= (branch)]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r13 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r13 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : interfaceinvoke $r13.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i6)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : interfaceinvoke $r13.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i6) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : r31 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : r31 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isValidUTF8(byte[])>(r31)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isValidUTF8(byte[])>(r31) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : $r4 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset UTF_8>
org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : $r4 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : r2 = virtualinvoke $r4.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>()
org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : r2 = virtualinvoke $r4.<java.nio.charset.Charset: java.nio.charset.CharsetDecoder newDecoder()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1)
org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : $r5 = staticinvoke <java.nio.ByteBuffer: java.nio.ByteBuffer wrap(byte[])>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : virtualinvoke r2.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r5)
org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : virtualinvoke r2.<java.nio.charset.CharsetDecoder: java.nio.CharBuffer decode(java.nio.ByteBuffer)>($r5) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : return 1
org.apache.pdfbox.pdfparser.BaseParser.isValidUTF8 : return 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : if $z0 == 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r10 = new java.lang.String
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r10 = new java.lang.String >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r11 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r11 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r12 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset UTF_8>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r12 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset UTF_8> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : specialinvoke $r10.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r11, $r12)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : specialinvoke $r10.<java.lang.String: void <init>(byte[],java.nio.charset.Charset)>($r11, $r12) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : r32 = $r10
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : r32 = $r10 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : goto [?= $r9 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r32)]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : goto [?= $r9 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r32)] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r9 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r32)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : $r9 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r32) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : return $r9
org.apache.pdfbox.pdfparser.BaseParser.parseCOSName : return $r9 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : r3 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseCOSDictionaryValue()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : r3 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseCOSDictionaryValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : l0 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: long getPosition()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : l0 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: long getPosition()>() >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.getPosition : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader>
org.apache.pdfbox.pdfparser.RandomAccessSource.getPosition : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader> >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.getPosition : $l0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>()
org.apache.pdfbox.pdfparser.RandomAccessSource.getPosition : $l0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>() >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.getPosition : return $l0
org.apache.pdfbox.pdfparser.RandomAccessSource.getPosition : return $l0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseDirObject()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseDirObject()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = null
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = null >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : c8 = (char) i0
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : c8 = (char) i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : lookupswitch(c8) {     case 40:
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : lookupswitch(c8) {     case 40: >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c8)
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $z2 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c8) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if $z2 != 0
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if $z2 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r63 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r63 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : specialinvoke $r63.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : specialinvoke $r63.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r65 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r65 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : i11 = interfaceinvoke $r65.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : i11 = interfaceinvoke $r65.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : c12 = (char) i11
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : c12 = (char) i11 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $z5 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c12)
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $z5 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c12) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if $z5 != 0
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if $z5 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c12)
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : virtualinvoke $r63.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c12) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r66 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r66 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : i11 = interfaceinvoke $r66.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : i11 = interfaceinvoke $r66.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : goto [?= $z5 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c12)]
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : goto [?= $z5 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c12)] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 == 45
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 == 45 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 == 43
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 == 43 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 == 46
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 == 46 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 == 69
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 == 69 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 != 101
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c12 != 101 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if i11 == -1
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if i11 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r39 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r39 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : interfaceinvoke $r39.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i11)
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : interfaceinvoke $r39.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i11) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r38 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r38 = virtualinvoke $r63.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = staticinvoke <org.apache.pdfbox.cos.COSNumber: org.apache.pdfbox.cos.COSNumber get(java.lang.String)>($r38)
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = staticinvoke <org.apache.pdfbox.cos.COSNumber: org.apache.pdfbox.cos.COSNumber get(java.lang.String)>($r38) >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $i0 = virtualinvoke r0.<java.lang.String: int length()>()
org.apache.pdfbox.cos.COSNumber.get : $i0 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : if $i0 != 1
org.apache.pdfbox.cos.COSNumber.get : if $i0 != 1 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0)
org.apache.pdfbox.cos.COSNumber.get : c8 = virtualinvoke r0.<java.lang.String: char charAt(int)>(0) >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : if 48 > c8
org.apache.pdfbox.cos.COSNumber.get : if 48 > c8 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : if c8 > 57
org.apache.pdfbox.cos.COSNumber.get : if c8 > 57 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $i6 = c8 - 48
org.apache.pdfbox.cos.COSNumber.get : $i6 = c8 - 48 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $l7 = (long) $i6
org.apache.pdfbox.cos.COSNumber.get : $l7 = (long) $i6 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $r12 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l7)
org.apache.pdfbox.cos.COSNumber.get : $r12 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l7) >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : return $r12
org.apache.pdfbox.cos.COSNumber.get : return $r12 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : goto [?= return r60]
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : goto [?= return r60] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : return r60
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : return r60 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isDigit()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isDigit()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : $z0 = 1
org.apache.pdfbox.pdfparser.BaseParser.isDigit : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isDigit : goto [?= return $z0]
org.apache.pdfbox.pdfparser.BaseParser.isDigit : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : if $z0 != 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : l1 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: long getPosition()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : l1 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: long getPosition()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseDirObject()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseDirObject()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(82)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(82) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $z1 = r1 instanceof org.apache.pdfbox.cos.COSInteger
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $z1 = r1 instanceof org.apache.pdfbox.cos.COSInteger >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : if $z1 != 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $z2 = r2 instanceof org.apache.pdfbox.cos.COSInteger
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $z2 = r2 instanceof org.apache.pdfbox.cos.COSInteger >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : if $z2 != 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : if $z2 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r6 = new org.apache.pdfbox.cos.COSObjectKey
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r6 = new org.apache.pdfbox.cos.COSObjectKey >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r7 = (org.apache.pdfbox.cos.COSInteger) r1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r7 = (org.apache.pdfbox.cos.COSInteger) r1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $l2 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSInteger: long longValue()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $l2 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSInteger: long longValue()>() >>>>>>>> org.apache.pdfbox.cos.COSInteger.longValue : $l0 = r0.<org.apache.pdfbox.cos.COSInteger: long value>
org.apache.pdfbox.cos.COSInteger.longValue : $l0 = r0.<org.apache.pdfbox.cos.COSInteger: long value> >>>>>>>> org.apache.pdfbox.cos.COSInteger.longValue : return $l0
org.apache.pdfbox.cos.COSInteger.longValue : return $l0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r8 = (org.apache.pdfbox.cos.COSInteger) r2
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r8 = (org.apache.pdfbox.cos.COSInteger) r2 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $i3 = virtualinvoke $r8.<org.apache.pdfbox.cos.COSInteger: int intValue()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $i3 = virtualinvoke $r8.<org.apache.pdfbox.cos.COSInteger: int intValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : specialinvoke $r6.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>($l2, $i3)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : specialinvoke $r6.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>($l2, $i3) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r9 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)>($r6)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : $r9 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)>($r6) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : if $r2 != null
org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : if $r2 != null >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)>(r1)
org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = null
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = null >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : if r1 == null
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : if r1 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r5 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool>
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r5 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = (org.apache.pdfbox.cos.COSObject) $r6
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = (org.apache.pdfbox.cos.COSObject) $r6 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : if r7 != null
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : if r7 != null >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r2 = new org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r2 = new org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : specialinvoke $r2.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null)
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : specialinvoke $r2.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null) >>>>>>>> org.apache.pdfbox.cos.COSObject.setObject : r0.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase baseObject> = r1
org.apache.pdfbox.cos.COSObject.setObject : r0.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase baseObject> = r1 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = $r2
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : r7 = $r2 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $l0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $l0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : virtualinvoke $r2.<org.apache.pdfbox.cos.COSObject: void setObjectNumber(long)>($l0)
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : virtualinvoke $r2.<org.apache.pdfbox.cos.COSObject: void setObjectNumber(long)>($l0) >>>>>>>> org.apache.pdfbox.cos.COSObject.setObjectNumber : r0.<org.apache.pdfbox.cos.COSObject: long objectNumber> = l0
org.apache.pdfbox.cos.COSObject.setObjectNumber : r0.<org.apache.pdfbox.cos.COSObject: long objectNumber> = l0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $i1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>()
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $i1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : virtualinvoke $r2.<org.apache.pdfbox.cos.COSObject: void setGenerationNumber(int)>($i1)
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : virtualinvoke $r2.<org.apache.pdfbox.cos.COSObject: void setGenerationNumber(int)>($i1) >>>>>>>> org.apache.pdfbox.cos.COSObject.setGenerationNumber : r0.<org.apache.pdfbox.cos.COSObject: int generationNumber> = i0
org.apache.pdfbox.cos.COSObject.setGenerationNumber : r0.<org.apache.pdfbox.cos.COSObject: int generationNumber> = i0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool>
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2)
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2) >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectFromPool : return r7
org.apache.pdfbox.cos.COSDocument.getObjectFromPool : return r7 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : return $r4
org.apache.pdfbox.pdfparser.BaseParser.getObjectFromPool : return $r4 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : return $r9
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : return $r9 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : $i0 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : $i0 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : $c1 = (char) $i0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : $c1 = (char) $i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : if $c1 != 100
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : if $c1 != 100 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : if r3 != null
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : if r3 != null >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : virtualinvoke r3.<org.apache.pdfbox.cos.COSBase: void setDirect(boolean)>(1)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : virtualinvoke r3.<org.apache.pdfbox.cos.COSBase: void setDirect(boolean)>(1) >>>>>>>> org.apache.pdfbox.cos.COSBase.setDirect : r0.<org.apache.pdfbox.cos.COSBase: boolean direct> = z0
org.apache.pdfbox.cos.COSBase.setDirect : r0.<org.apache.pdfbox.cos.COSBase: boolean direct> = z0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r2, r3)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryNameValuePair : virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r2, r3) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : goto [?= (branch)]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSArray parseCOSArray()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSArray parseCOSArray()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(91)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(91) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r4 = new org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r4 = new org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : specialinvoke $r4.<org.apache.pdfbox.cos.COSArray: void <init>()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : specialinvoke $r4.<org.apache.pdfbox.cos.COSArray: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i1 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i1 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $i1 <= 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $i1 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $c3 = (char) $i1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $c3 = (char) $i1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $c3 == 93
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $c3 == 93 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : r23 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseDirObject()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : r23 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase parseDirObject()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r34 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r34 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : i9 = interfaceinvoke $r34.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : i9 = interfaceinvoke $r34.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r35 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r35 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $i4 = interfaceinvoke $r35.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $i4 = interfaceinvoke $r35.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : c10 = (char) $i4
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : c10 = (char) $i4 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r36 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r36 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : interfaceinvoke $r36.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i9)
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : interfaceinvoke $r36.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i9) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c10 != 60
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : if c10 != 60 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSString parseCOSString()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSString parseCOSString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : $i5 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : $i5 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : c0 = (char) $i5
org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : c0 = (char) $i5 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : if c0 != 40
org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : if c0 != 40 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : if c0 != 60
org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : if c0 != 60 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : $r13 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSString parseCOSHexString()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : $r13 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSString parseCOSHexString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $r2 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $r9 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $r9 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : i5 = interfaceinvoke $r9.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : i5 = interfaceinvoke $r9.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $c6 = (char) i5
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $c6 = (char) i5 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $z0 = staticinvoke <org.apache.pdfbox.pdfparser.BaseParser: boolean isHexDigit(char)>($c6)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $z0 = staticinvoke <org.apache.pdfbox.pdfparser.BaseParser: boolean isHexDigit(char)>($c6) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : $z0 = staticinvoke <org.apache.pdfbox.pdfparser.BaseParser: boolean isDigit(int)>(c0)
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : $z0 = staticinvoke <org.apache.pdfbox.pdfparser.BaseParser: boolean isDigit(int)>(c0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : if $z0 != 0
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : $z1 = 1
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : $z1 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : goto [?= return $z1]
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : goto [?= return $z1] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : return $z1
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : return $z1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : if $z0 == 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $c4 = (char) i5
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $c4 = (char) i5 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : goto [?= (branch)]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : goto [?= $r9 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : goto [?= $r9 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : if c0 < 97
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : if c0 < 97 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : if c0 < 65
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : if c0 < 65 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : if c0 > 70
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : if c0 > 70 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : $z1 = 0
org.apache.pdfbox.pdfparser.BaseParser.isHexDigit : $z1 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : if i5 != 62
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : if i5 != 62 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : goto [?= $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : goto [?= $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $r3 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $r4 = staticinvoke <org.apache.pdfbox.cos.COSString: org.apache.pdfbox.cos.COSString parseHex(java.lang.String)>($r3)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : $r4 = staticinvoke <org.apache.pdfbox.cos.COSString: org.apache.pdfbox.cos.COSString parseHex(java.lang.String)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $r4 = new java.io.ByteArrayOutputStream
org.apache.pdfbox.cos.COSString.parseHex : $r4 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.cos.COSString.parseHex : specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $r5 = new java.lang.StringBuilder
org.apache.pdfbox.cos.COSString.parseHex : $r5 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $r6 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>()
org.apache.pdfbox.cos.COSString.parseHex : $r6 = virtualinvoke r0.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6)
org.apache.pdfbox.cos.COSString.parseHex : specialinvoke $r5.<java.lang.StringBuilder: void <init>(java.lang.String)>($r6) >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $i1 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>()
org.apache.pdfbox.cos.COSString.parseHex : $i1 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>() >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $i2 = $i1 % 2
org.apache.pdfbox.cos.COSString.parseHex : $i2 = $i1 % 2 >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : if $i2 == 0
org.apache.pdfbox.cos.COSString.parseHex : if $i2 == 0 >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : i0 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>()
org.apache.pdfbox.cos.COSString.parseHex : i0 = virtualinvoke $r5.<java.lang.StringBuilder: int length()>() >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : i5 = 0
org.apache.pdfbox.cos.COSString.parseHex : i5 = 0 >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : if i5 >= i0
org.apache.pdfbox.cos.COSString.parseHex : if i5 >= i0 >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $i3 = i5 + 2
org.apache.pdfbox.cos.COSString.parseHex : $i3 = i5 + 2 >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String substring(int,int)>(i5, $i3)
org.apache.pdfbox.cos.COSString.parseHex : $r9 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String substring(int,int)>(i5, $i3) >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r9, 16)
org.apache.pdfbox.cos.COSString.parseHex : $i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String,int)>($r9, 16) >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>($i4)
org.apache.pdfbox.cos.COSString.parseHex : virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>($i4) >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : goto [?= i5 = i5 + 2]
org.apache.pdfbox.cos.COSString.parseHex : goto [?= i5 = i5 + 2] >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : i5 = i5 + 2
org.apache.pdfbox.cos.COSString.parseHex : i5 = i5 + 2 >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : goto [?= (branch)]
org.apache.pdfbox.cos.COSString.parseHex : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $r7 = new org.apache.pdfbox.cos.COSString
org.apache.pdfbox.cos.COSString.parseHex : $r7 = new org.apache.pdfbox.cos.COSString >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : $r8 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.cos.COSString.parseHex : $r8 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : specialinvoke $r7.<org.apache.pdfbox.cos.COSString: void <init>(byte[])>($r8)
org.apache.pdfbox.cos.COSString.parseHex : specialinvoke $r7.<org.apache.pdfbox.cos.COSString: void <init>(byte[])>($r8) >>>>>>>> org.apache.pdfbox.cos.COSString.parseHex : return $r7
org.apache.pdfbox.cos.COSString.parseHex : return $r7 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : return $r4
org.apache.pdfbox.pdfparser.BaseParser.parseCOSHexString : return $r4 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : return $r13
org.apache.pdfbox.pdfparser.BaseParser.parseCOSString : return $r13 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $z0 = r23 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $z0 = r23 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $z0 == 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if r23 == null
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if r23 == null >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>(r23)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>(r23) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : goto [?= virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : goto [?= virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : goto [?= $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : goto [?= $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r6 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r6 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : interfaceinvoke $r6.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : interfaceinvoke $r6.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : return $r4
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : return $r4 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : return r1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionaryValue : return r1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : z1 = 1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : z1 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(62)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void readExpectedChar(char)>(62) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : return $r2
org.apache.pdfbox.pdfparser.BaseParser.parseCOSDictionary : return $r2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : virtualinvoke $r5.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void setTrailer(org.apache.pdfbox.cos.COSDictionary)>(r8)
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : virtualinvoke $r5.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void setTrailer(org.apache.pdfbox.cos.COSDictionary)>(r8) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setTrailer : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setTrailer : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setTrailer : if $r2 != null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setTrailer : if $r2 != null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setTrailer : $r3 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setTrailer : $r3 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setTrailer : $r3.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> = r1
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setTrailer : $r3.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> = r1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailer : return 1
org.apache.pdfbox.pdfparser.COSParser.parseTrailer : return 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $z6 != 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $z6 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r24 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r24 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : r69 = virtualinvoke $r24.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.cos.COSDictionary getCurrentTrailer()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : r69 = virtualinvoke $r24.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.cos.COSDictionary getCurrentTrailer()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getCurrentTrailer : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getCurrentTrailer : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj curXrefTrailerObj> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getCurrentTrailer : $r2 = $r1.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getCurrentTrailer : $r2 = $r1.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getCurrentTrailer : return $r2
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getCurrentTrailer : return $r2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r25 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF_STM>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r25 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName XREF_STM> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $z2 = virtualinvoke r69.<org.apache.pdfbox.cos.COSDictionary: boolean containsKey(org.apache.pdfbox.cos.COSName)>($r25)
org.apache.pdfbox.pdfparser.COSParser.parseXref : $z2 = virtualinvoke r69.<org.apache.pdfbox.cos.COSDictionary: boolean containsKey(org.apache.pdfbox.cos.COSName)>($r25) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.containsKey : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.containsKey : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.containsKey : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.containsKey : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.containsKey : $i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.containsKey : $i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.containsKey : if $i0 < 0
org.apache.pdfbox.util.SmallMap.containsKey : if $i0 < 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.containsKey : $z0 = 0
org.apache.pdfbox.util.SmallMap.containsKey : $z0 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.containsKey : return $z0
org.apache.pdfbox.util.SmallMap.containsKey : return $z0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.containsKey : return $z0
org.apache.pdfbox.cos.COSDictionary.containsKey : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $z2 == 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r70 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r70 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : l25 = virtualinvoke r69.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName)>($r70)
org.apache.pdfbox.pdfparser.COSParser.parseXref : l25 = virtualinvoke r69.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName)>($r70) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $b31 = l25 cmp 0L
org.apache.pdfbox.pdfparser.COSParser.parseXref : $b31 = l25 cmp 0L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b31 <= 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b31 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : goto [?= $b27 = l25 cmp 0L]
org.apache.pdfbox.pdfparser.COSParser.parseXref : goto [?= $b27 = l25 cmp 0L] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $b3 = l25 cmp l26
org.apache.pdfbox.pdfparser.COSParser.parseXref : $b3 = l25 cmp l26 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b3 != 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $b3 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r4.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void setStartxref(long)>(l23)
org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r4.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: void setStartxref(long)>(l23) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r3 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r3 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $r3 == null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $r3 == null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r4 = new org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r4 = new org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : specialinvoke $r4.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: void <init>(org.apache.pdfbox.pdfparser.XrefTrailerResolver$1)>(null)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : specialinvoke $r4.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: void <init>(org.apache.pdfbox.pdfparser.XrefTrailerResolver$1)>(null) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> = $r4
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> = $r4 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r6 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r6 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r5 = new org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r5 = new org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : specialinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: void <init>()>()
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : specialinvoke $r5.<org.apache.pdfbox.cos.COSDictionary: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r6.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> = $r5
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r6.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> = $r5 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r7 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map bytePosToXrefMap>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r7 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map bytePosToXrefMap> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r8 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r9 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r46 = (org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj) $r9
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r46 = (org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj) $r9 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r10 = new java.util.ArrayList
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r10 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : specialinvoke $r10.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : specialinvoke $r10.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if r46 != null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if r46 != null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r11 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r11 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r12 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType access$100(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>(r46)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r12 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType access$100(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>(r46) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$100 : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType xrefType>
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$100 : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType xrefType> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$100 : return $r1
org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj.access$100 : return $r1 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType access$102(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj,org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType)>($r11, $r12)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType access$102(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj,org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType)>($r11, $r12) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r14 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r14)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>($r14) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r15 = r46.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r15 = r46.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $r15 == null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $r15 == null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r27 = r46.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r27 = r46.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r26 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r26 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PREV> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : l4 = virtualinvoke $r27.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName,long)>($r26, -1L)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : l4 = virtualinvoke $r27.<org.apache.pdfbox.cos.COSDictionary: long getLong(org.apache.pdfbox.cos.COSName,long)>($r26, -1L) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $b1 = l4 cmp -1L
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $b1 = l4 cmp -1L >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $b1 != 0
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $b1 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : goto [?= staticinvoke <java.util.Collections: void reverse(java.util.List)>($r10)]
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : goto [?= staticinvoke <java.util.Collections: void reverse(java.util.List)>($r10)] >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : staticinvoke <java.util.Collections: void reverse(java.util.List)>($r10)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : staticinvoke <java.util.Collections: void reverse(java.util.List)>($r10) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r47 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r47 = interfaceinvoke $r10.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $z3 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $z3 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $z3 == 0
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r16 = interfaceinvoke r47.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r16 = interfaceinvoke r47.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r2 = (java.lang.Long) $r16
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r2 = (java.lang.Long) $r16 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r17 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map bytePosToXrefMap>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r17 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map bytePosToXrefMap> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r18 = interfaceinvoke $r17.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r48 = (org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj) $r18
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : r48 = (org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj) $r18 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r19 = r48.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r19 = r48.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $r19 == null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : if $r19 == null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r23 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r23 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r25 = $r23.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r25 = $r23.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r24 = r48.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r24 = r48.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : virtualinvoke $r25.<org.apache.pdfbox.cos.COSDictionary: void addAll(org.apache.pdfbox.cos.COSDictionary)>($r24)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : virtualinvoke $r25.<org.apache.pdfbox.cos.COSDictionary: void addAll(org.apache.pdfbox.cos.COSDictionary)>($r24) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r4 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Set entrySet()>()
org.apache.pdfbox.cos.COSDictionary.addAll : $r4 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Set entrySet()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSDictionary.addAll : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.cos.COSDictionary.addAll : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.addAll : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.cos.COSDictionary.addAll : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : r3 = (java.util.Map$Entry) $r5
org.apache.pdfbox.cos.COSDictionary.addAll : r3 = (java.util.Map$Entry) $r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.cos.COSDictionary.addAll : $r6 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r7 = (org.apache.pdfbox.cos.COSName) $r6
org.apache.pdfbox.cos.COSDictionary.addAll : $r7 = (org.apache.pdfbox.cos.COSName) $r6 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r8 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>()
org.apache.pdfbox.cos.COSDictionary.addAll : $r8 = virtualinvoke $r7.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("Size")
org.apache.pdfbox.cos.COSDictionary.addAll : $z1 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>("Size") >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : if $z1 == 0
org.apache.pdfbox.cos.COSDictionary.addAll : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.cos.COSDictionary.addAll : $r9 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r10 = (org.apache.pdfbox.cos.COSName) $r9
org.apache.pdfbox.cos.COSDictionary.addAll : $r10 = (org.apache.pdfbox.cos.COSName) $r9 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.pdfbox.cos.COSDictionary.addAll : $r11 = interfaceinvoke r3.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r12 = (org.apache.pdfbox.cos.COSBase) $r11
org.apache.pdfbox.cos.COSDictionary.addAll : $r12 = (org.apache.pdfbox.cos.COSBase) $r11 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r10, $r12)
org.apache.pdfbox.cos.COSDictionary.addAll : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r10, $r12) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.cos.COSDictionary.addAll : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r13 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.addAll : $r13 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $r14 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>("Size")
org.apache.pdfbox.cos.COSDictionary.addAll : $r14 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>("Size") >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : $z2 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>($r14)
org.apache.pdfbox.cos.COSDictionary.addAll : $z2 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>($r14) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.addAll : if $z2 != 0
org.apache.pdfbox.cos.COSDictionary.addAll : if $z2 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r20 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r20 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r21 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r20)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r21 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r20) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r22 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>(r48)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : $r22 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>(r48) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : interfaceinvoke $r21.<java.util.Map: void putAll(java.util.Map)>($r22)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : interfaceinvoke $r21.<java.util.Map: void putAll(java.util.Map)>($r22) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : goto [?= $z3 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfparser.XrefTrailerResolver.setStartxref : goto [?= $z3 = interfaceinvoke r47.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : r72 = virtualinvoke $r5.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.cos.COSDictionary getTrailer()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : r72 = virtualinvoke $r5.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.cos.COSDictionary getTrailer()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : if $r1 != null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : if $r1 != null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : $r3 = $r2.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : $r3 = $r2.<org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.cos.COSDictionary trailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : return $r3
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getTrailer : return $r3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r6 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r6 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r6.<org.apache.pdfbox.cos.COSDocument: void setTrailer(org.apache.pdfbox.cos.COSDictionary)>(r72)
org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r6.<org.apache.pdfbox.cos.COSDocument: void setTrailer(org.apache.pdfbox.cos.COSDictionary)>(r72) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r8 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r8 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r9 = <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType STREAM>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r9 = <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType STREAM> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r7 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r7 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r10 = virtualinvoke $r7.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType getXrefType()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r10 = virtualinvoke $r7.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType getXrefType()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : if $r1 != null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : if $r1 != null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : $r3 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType access$100(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r2)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : $r3 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XRefType access$100(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r2) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : return $r3
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefType : return $r3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : if $r9 != $r10
org.apache.pdfbox.pdfparser.COSParser.parseXref : if $r9 != $r10 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $z7 = 0
org.apache.pdfbox.pdfparser.COSParser.parseXref : $z7 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r8.<org.apache.pdfbox.cos.COSDocument: void setIsXRefStream(boolean)>($z7)
org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r8.<org.apache.pdfbox.cos.COSDocument: void setIsXRefStream(boolean)>($z7) >>>>>>>> org.apache.pdfbox.cos.COSDocument.setIsXRefStream : r0.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream> = z0
org.apache.pdfbox.cos.COSDocument.setIsXRefStream : r0.<org.apache.pdfbox.cos.COSDocument: boolean isXRefStream> = z0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void checkXrefOffsets()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void checkXrefOffsets()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $z0 = r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isLenient>
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $z0 = r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isLenient> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if $z0 != 0
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r1 = virtualinvoke $r2.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r1 = virtualinvoke $r2.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>() >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : $r1 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : if $r1 != null
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : if $r1 != null >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer>
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : $r2 = r0.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj resolvedXrefTrailer> >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : $r3 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r2)
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : $r3 = staticinvoke <org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj: java.util.Map access$200(org.apache.pdfbox.pdfparser.XrefTrailerResolver$XrefTrailerObj)>($r2) >>>>>>>> org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : return $r3
org.apache.pdfbox.pdfparser.XrefTrailerResolver.getXrefTable : return $r3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if r1 == null
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if r1 == null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : z13 = 0
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : z13 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r3 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r3 = interfaceinvoke r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r31 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r31 = interfaceinvoke $r3.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $z1 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $z1 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if $z1 == 0
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r27 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r27 = interfaceinvoke r31.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r32 = (java.util.Map$Entry) $r27
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r32 = (java.util.Map$Entry) $r27 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r28 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r28 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r33 = (org.apache.pdfbox.cos.COSObjectKey) $r28
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r33 = (org.apache.pdfbox.cos.COSObjectKey) $r28 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r29 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $r29 = interfaceinvoke r32.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r34 = (java.lang.Long) $r29
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : r34 = (java.lang.Long) $r29 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if r34 == null
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if r34 == null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $l12 = virtualinvoke r34.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $l12 = virtualinvoke r34.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $b13 = $l12 cmp 0L
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $b13 = $l12 cmp 0L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if $b13 < 0
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if $b13 < 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $l14 = virtualinvoke r34.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $l14 = virtualinvoke r34.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $z12 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean checkObjectKeys(org.apache.pdfbox.cos.COSObjectKey,long)>(r33, $l14)
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : $z12 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean checkObjectKeys(org.apache.pdfbox.cos.COSObjectKey,long)>(r33, $l14) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $b4 = l0 cmp 6L
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $b4 = l0 cmp 6L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : if $b4 >= 0
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : if $b4 >= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : l1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : l1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : i2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>()
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : i2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r4 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : l3 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>()
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : l3 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: long getPosition()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : r2 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String createObjectString(long,int)>(l1, i2)
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : r2 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String createObjectString(long,int)>(l1, i2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r1 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r1 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdfparser.COSParser.createObjectString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0)
org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r2 = staticinvoke <java.lang.Long: java.lang.String toString(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2)
org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ")
org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" ") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1)
org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r5 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>(i1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" obj")
org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" obj") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.COSParser.createObjectString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.createObjectString : return $r8
org.apache.pdfbox.pdfparser.COSParser.createObjectString : return $r8 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0)
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r6 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1>
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r6 = <org.apache.pdfbox.util.Charsets: java.nio.charset.Charset ISO_8859_1> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r7 = virtualinvoke r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6)
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r7 = virtualinvoke r2.<java.lang.String: byte[] getBytes(java.nio.charset.Charset)>($r6) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isString(byte[])>($r7)
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isString(byte[])>($r7) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : z1 = 0
org.apache.pdfbox.pdfparser.COSParser.isString : z1 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : $i2 = interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: int peek()>()
org.apache.pdfbox.pdfparser.COSParser.isString : $i2 = interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : $b3 = r1[0]
org.apache.pdfbox.pdfparser.COSParser.isString : $b3 = r1[0] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : if $i2 != $b3
org.apache.pdfbox.pdfparser.COSParser.isString : if $i2 != $b3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : i0 = lengthof r1
org.apache.pdfbox.pdfparser.COSParser.isString : i0 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : r2 = newarray (byte)[i0]
org.apache.pdfbox.pdfparser.COSParser.isString : r2 = newarray (byte)[i0] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : i5 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: int read(byte[],int,int)>(r2, 0, i0)
org.apache.pdfbox.pdfparser.COSParser.isString : i5 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccessRead: int read(byte[],int,int)>(r2, 0, i0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : if i5 >= i0
org.apache.pdfbox.pdfparser.COSParser.isString : if i5 >= i0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r1, r2)
org.apache.pdfbox.pdfparser.COSParser.isString : $z0 = staticinvoke <java.util.Arrays: boolean equals(byte[],byte[])>(r1, r2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : if $z0 == 0
org.apache.pdfbox.pdfparser.COSParser.isString : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : z1 = 1
org.apache.pdfbox.pdfparser.COSParser.isString : z1 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: void rewind(int)>(i5)
org.apache.pdfbox.pdfparser.COSParser.isString : interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: void rewind(int)>(i5) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isString : return z1
org.apache.pdfbox.pdfparser.COSParser.isString : return z1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : if $z0 == 0
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r9 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r9 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : interfaceinvoke $r9.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l3)
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : interfaceinvoke $r9.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l3) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r10 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : $r10 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : interfaceinvoke $r10.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l3)
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : interfaceinvoke $r10.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>(l3) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : return 1
org.apache.pdfbox.pdfparser.COSParser.checkObjectKeys : return 1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if $z12 != 0
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if $z12 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : goto [?= $z1 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : goto [?= $z1 = interfaceinvoke r31.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if z13 == 0
org.apache.pdfbox.pdfparser.COSParser.checkXrefOffsets : if z13 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r12 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r12 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r11 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r11 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : $r13 = virtualinvoke $r11.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>()
org.apache.pdfbox.pdfparser.COSParser.parseXref : $r13 = virtualinvoke $r11.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r12.<org.apache.pdfbox.cos.COSDocument: void addXRefTable(java.util.Map)>($r13)
org.apache.pdfbox.pdfparser.COSParser.parseXref : virtualinvoke $r12.<org.apache.pdfbox.cos.COSDocument: void addXRefTable(java.util.Map)>($r13) >>>>>>>> org.apache.pdfbox.cos.COSDocument.addXRefTable : $r2 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map xrefTable>
org.apache.pdfbox.cos.COSDocument.addXRefTable : $r2 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map xrefTable> >>>>>>>> org.apache.pdfbox.cos.COSDocument.addXRefTable : interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1)
org.apache.pdfbox.cos.COSDocument.addXRefTable : interfaceinvoke $r2.<java.util.Map: void putAll(java.util.Map)>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseXref : return r72
org.apache.pdfbox.pdfparser.COSParser.parseXref : return r72 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : goto [?= (branch)]
org.apache.pdfbox.pdfparser.PDFParser.initialParse : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : if z7 == 0
org.apache.pdfbox.pdfparser.PDFParser.initialParse : if z7 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void prepareDecryption()>()
org.apache.pdfbox.pdfparser.PDFParser.initialParse : specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void prepareDecryption()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : $r3 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : $r3 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>()
org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSDictionary getTrailer()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCRYPT>
org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ENCRYPT> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : r1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : r1 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : if r1 == null
org.apache.pdfbox.pdfparser.PDFParser.prepareDecryption : if r1 == null >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : r23 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSBase parseTrailerValuesDynamically(org.apache.pdfbox.cos.COSDictionary)>(r21)
org.apache.pdfbox.pdfparser.PDFParser.initialParse : r23 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSBase parseTrailerValuesDynamically(org.apache.pdfbox.cos.COSDictionary)>(r21) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r4 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Collection getValues()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r4 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Collection getValues()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getValues : $r1 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.getValues : $r1 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getValues : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>()
org.apache.pdfbox.cos.COSDictionary.getValues : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.values : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.values : if $z0 == 0
org.apache.pdfbox.util.SmallMap.values : if $z0 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $r2 = new java.util.ArrayList
org.apache.pdfbox.util.SmallMap.values : $r2 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.values : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $i0 = lengthof $r3
org.apache.pdfbox.util.SmallMap.values : $i0 = lengthof $r3 >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $i1 = $i0 >> 1
org.apache.pdfbox.util.SmallMap.values : $i1 = $i0 >> 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.values : specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1)
org.apache.pdfbox.util.SmallMap.values : specialinvoke $r2.<java.util.ArrayList: void <init>(int)>($i1) >>>>>>>> org.apache.pdfbox.util.SmallMap.values : i3 = 1
org.apache.pdfbox.util.SmallMap.values : i3 = 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $r4 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.values : $r4 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $i2 = lengthof $r4
org.apache.pdfbox.util.SmallMap.values : $i2 = lengthof $r4 >>>>>>>> org.apache.pdfbox.util.SmallMap.values : if i3 >= $i2
org.apache.pdfbox.util.SmallMap.values : if i3 >= $i2 >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $r6 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.values : $r6 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $r7 = $r6[i3]
org.apache.pdfbox.util.SmallMap.values : $r7 = $r6[i3] >>>>>>>> org.apache.pdfbox.util.SmallMap.values : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7)
org.apache.pdfbox.util.SmallMap.values : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r7) >>>>>>>> org.apache.pdfbox.util.SmallMap.values : i3 = i3 + 2
org.apache.pdfbox.util.SmallMap.values : i3 = i3 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.values : goto [?= $r4 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.values : goto [?= $r4 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.values : $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2)
org.apache.pdfbox.util.SmallMap.values : $r5 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.values : return $r5
org.apache.pdfbox.util.SmallMap.values : return $r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getValues : return $r2
org.apache.pdfbox.cos.COSDictionary.getValues : return $r2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : r11 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : r11 = interfaceinvoke $r4.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : if $z0 == 0
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r9 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r9 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : r2 = (org.apache.pdfbox.cos.COSBase) $r9
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : r2 = (org.apache.pdfbox.cos.COSBase) $r9 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $z1 = r2 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $z1 = r2 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : if $z1 == 0
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : r3 = (org.apache.pdfbox.cos.COSObject) r2
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : r3 = (org.apache.pdfbox.cos.COSObject) r2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseObjectDynamically(org.apache.pdfbox.cos.COSObject,boolean)>(r3, 0)
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseObjectDynamically(org.apache.pdfbox.cos.COSObject,boolean)>(r3, 0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $l0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObject: long getObjectNumber()>()
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $l0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObject: long getObjectNumber()>() >>>>>>>> org.apache.pdfbox.cos.COSObject.getObjectNumber : $l0 = r0.<org.apache.pdfbox.cos.COSObject: long objectNumber>
org.apache.pdfbox.cos.COSObject.getObjectNumber : $l0 = r0.<org.apache.pdfbox.cos.COSObject: long objectNumber> >>>>>>>> org.apache.pdfbox.cos.COSObject.getObjectNumber : return $l0
org.apache.pdfbox.cos.COSObject.getObjectNumber : return $l0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $i1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObject: int getGenerationNumber()>()
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $i1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObject: int getGenerationNumber()>() >>>>>>>> org.apache.pdfbox.cos.COSObject.getGenerationNumber : $i0 = r0.<org.apache.pdfbox.cos.COSObject: int generationNumber>
org.apache.pdfbox.cos.COSObject.getGenerationNumber : $i0 = r0.<org.apache.pdfbox.cos.COSObject: int generationNumber> >>>>>>>> org.apache.pdfbox.cos.COSObject.getGenerationNumber : return $i0
org.apache.pdfbox.cos.COSObject.getGenerationNumber : return $i0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseObjectDynamically(long,int,boolean)>($l0, $i1, z0)
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseObjectDynamically(long,int,boolean)>($l0, $i1, z0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r8 = new org.apache.pdfbox.cos.COSObjectKey
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r8 = new org.apache.pdfbox.cos.COSObjectKey >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : specialinvoke $r8.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>(l0, i1)
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : specialinvoke $r8.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>(l0, i1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r9 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r9 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : r2 = virtualinvoke $r9.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)>($r8)
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : r2 = virtualinvoke $r9.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)>($r8) >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSObjectKey
org.apache.pdfbox.cos.COSObjectKey.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSObjectKey >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : if $z0 == 0
org.apache.pdfbox.cos.COSObjectKey.equals : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : $r3 = (org.apache.pdfbox.cos.COSObjectKey) r1
org.apache.pdfbox.cos.COSObjectKey.equals : $r3 = (org.apache.pdfbox.cos.COSObjectKey) r1 >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : goto [?= (branch)]
org.apache.pdfbox.cos.COSObjectKey.equals : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : if $r3 == null
org.apache.pdfbox.cos.COSObjectKey.equals : if $r3 == null >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : $l0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.cos.COSObjectKey.equals : $l0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : $l1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.cos.COSObjectKey.equals : $l1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : $b2 = $l0 cmp $l1
org.apache.pdfbox.cos.COSObjectKey.equals : $b2 = $l0 cmp $l1 >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : if $b2 != 0
org.apache.pdfbox.cos.COSObjectKey.equals : if $b2 != 0 >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : $i3 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>()
org.apache.pdfbox.cos.COSObjectKey.equals : $i3 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>() >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : $i4 = virtualinvoke r0.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>()
org.apache.pdfbox.cos.COSObjectKey.equals : $i4 = virtualinvoke r0.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>() >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : if $i3 != $i4
org.apache.pdfbox.cos.COSObjectKey.equals : if $i3 != $i4 >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : $z1 = 1
org.apache.pdfbox.cos.COSObjectKey.equals : $z1 = 1 >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : goto [?= return $z1]
org.apache.pdfbox.cos.COSObjectKey.equals : goto [?= return $z1] >>>>>>>> org.apache.pdfbox.cos.COSObjectKey.equals : return $z1
org.apache.pdfbox.cos.COSObjectKey.equals : return $z1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r10 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r10 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>() >>>>>>>> org.apache.pdfbox.cos.COSObject.getObject : $r1 = r0.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase baseObject>
org.apache.pdfbox.cos.COSObject.getObject : $r1 = r0.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase baseObject> >>>>>>>> org.apache.pdfbox.cos.COSObject.getObject : return $r1
org.apache.pdfbox.cos.COSObject.getObject : return $r1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : if $r10 != null
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : if $r10 != null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r11 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r11 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r12 = virtualinvoke $r11.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>()
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r12 = virtualinvoke $r11.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8)
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r13 = interfaceinvoke $r12.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : r33 = (java.lang.Long) $r13
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : r33 = (java.lang.Long) $r13 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : if z0 == 0
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : if z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : if r33 != null
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : if r33 != null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $l2 = virtualinvoke r33.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $l2 = virtualinvoke r33.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $b3 = $l2 cmp 0L
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $b3 = $l2 cmp 0L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : if $b3 <= 0
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : if $b3 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void parseFileObject(java.lang.Long,org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.COSObject)>(r33, $r8, r2)
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void parseFileObject(java.lang.Long,org.apache.pdfbox.cos.COSObjectKey,org.apache.pdfbox.cos.COSObject)>(r33, $r8, r2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r5 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $l2 = virtualinvoke r1.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $l2 = virtualinvoke r1.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>($l2)
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>($l2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long readObjectNumber()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long readObjectNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: long readLong()>()
org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : l0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: long readLong()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : $b1 = l0 cmp 0L
org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : $b1 = l0 cmp 0L >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : if $b1 < 0
org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : if $b1 < 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : $b2 = l0 cmp 10000000000L
org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : $b2 = l0 cmp 10000000000L >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : if $b2 < 0
org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : if $b2 < 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : return l0
org.apache.pdfbox.pdfparser.BaseParser.readObjectNumber : return l0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : i1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: int readGenerationNumber()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : i1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: int readGenerationNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : i0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: int readInt()>()
org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : i0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: int readInt()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readInt : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.readInt : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readInt : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.StringBuilder readStringNumber()>()
org.apache.pdfbox.pdfparser.BaseParser.readInt : r1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: java.lang.StringBuilder readStringNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readInt : $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.BaseParser.readInt : $r3 = virtualinvoke r1.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readInt : i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3)
org.apache.pdfbox.pdfparser.BaseParser.readInt : i1 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r3) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readInt : goto [?= return i1]
org.apache.pdfbox.pdfparser.BaseParser.readInt : goto [?= return i1] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readInt : return i1
org.apache.pdfbox.pdfparser.BaseParser.readInt : return i1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : if i0 < 0
org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : if i0 < 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : $l1 = (long) i0
org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : $l1 = (long) i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : $b2 = $l1 cmp 65535L
org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : $b2 = $l1 cmp 65535L >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : if $b2 <= 0
org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : if $b2 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : return i0
org.apache.pdfbox.pdfparser.BaseParser.readGenerationNumber : return i0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r6 = <org.apache.pdfbox.pdfparser.COSParser: char[] OBJ_MARKER>
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r6 = <org.apache.pdfbox.pdfparser.COSParser: char[] OBJ_MARKER> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void readExpectedString(char[],boolean)>($r6, 1)
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void readExpectedString(char[],boolean)>($r6, 1) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : i0 = lengthof r1
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : i0 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : i4 = 0
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : i4 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : if i4 >= i0
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : if i4 >= i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : c1 = r1[i4]
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : c1 = r1[i4] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : $r3 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : $i2 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : $i2 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : if $i2 == c1
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : if $i2 == c1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : i4 = i4 + 1
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : i4 = i4 + 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : goto [?= (branch)]
org.apache.pdfbox.pdfparser.BaseParser.readExpectedString : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $l3 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $l3 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObjectKey: long getNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $b4 = l0 cmp $l3
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $b4 = l0 cmp $l3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $b4 != 0
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $b4 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $i7 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $i7 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObjectKey: int getGeneration()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if i1 == $i7
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if i1 == $i7 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : r59 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseDirObject()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : r59 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseDirObject()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDictionary parseCOSDictionary()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSDictionary parseCOSDictionary()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSName parseCOSName()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSName parseCOSName()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>()
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : r60 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readString()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $z0 = virtualinvoke r60.<java.lang.String: boolean equals(java.lang.Object)>("stream")
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $z0 = virtualinvoke r60.<java.lang.String: boolean equals(java.lang.Object)>("stream") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $z0 == 0
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r20 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdmodel.encryption.SecurityHandler securityHandler>
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $r20 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdmodel.encryption.SecurityHandler securityHandler> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $r20 == null
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $r20 == null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : virtualinvoke r3.<org.apache.pdfbox.cos.COSObject: void setObject(org.apache.pdfbox.cos.COSBase)>(r59)
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : virtualinvoke r3.<org.apache.pdfbox.cos.COSObject: void setObject(org.apache.pdfbox.cos.COSBase)>(r59) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $z5 = virtualinvoke r60.<java.lang.String: boolean startsWith(java.lang.String)>("endobj")
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : $z5 = virtualinvoke r60.<java.lang.String: boolean startsWith(java.lang.String)>("endobj") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $z5 != 0
org.apache.pdfbox.pdfparser.COSParser.parseFileObject : if $z5 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : goto [?= $r34 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()]
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : goto [?= $r34 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r34 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : $r34 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : return $r34
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : return $r34 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : return $r2
org.apache.pdfbox.pdfparser.COSParser.parseObjectDynamically : return $r2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : goto [?= $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : goto [?= $z0 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROOT>
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName ROOT> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r6 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r6 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : r12 = (org.apache.pdfbox.cos.COSObject) $r6
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : r12 = (org.apache.pdfbox.cos.COSObject) $r6 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : if r12 != null
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : if r12 != null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseObjectDynamically(org.apache.pdfbox.cos.COSObject,boolean)>(r12, 0)
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : $r7 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseObjectDynamically(org.apache.pdfbox.cos.COSObject,boolean)>(r12, 0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : return $r7
org.apache.pdfbox.pdfparser.COSParser.parseTrailerValuesDynamically : return $r7 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z1 = r23 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z1 = r23 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z1 != 0
org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : r1 = (org.apache.pdfbox.cos.COSDictionary) r23
org.apache.pdfbox.pdfparser.PDFParser.initialParse : r1 = (org.apache.pdfbox.cos.COSDictionary) r23 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean isLenient()>()
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean isLenient()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isLenient : $z0 = r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isLenient>
org.apache.pdfbox.pdfparser.COSParser.isLenient : $z0 = r0.<org.apache.pdfbox.pdfparser.COSParser: boolean isLenient> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.isLenient : return $z0
org.apache.pdfbox.pdfparser.COSParser.isLenient : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z2 == 0
org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r12 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r12 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z5 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: boolean containsKey(org.apache.pdfbox.cos.COSName)>($r12)
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z5 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: boolean containsKey(org.apache.pdfbox.cos.COSName)>($r12) >>>>>>>> org.apache.pdfbox.util.SmallMap.containsKey : $z0 = 1
org.apache.pdfbox.util.SmallMap.containsKey : $z0 = 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.containsKey : goto [?= return $z0]
org.apache.pdfbox.util.SmallMap.containsKey : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z5 != 0
org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z5 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r24 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r24 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : r2 = virtualinvoke $r24.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getCatalog()>()
org.apache.pdfbox.pdfparser.PDFParser.initialParse : r2 = virtualinvoke $r24.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getCatalog()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getCatalog : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CATALOG>
org.apache.pdfbox.cos.COSDocument.getCatalog : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName CATALOG> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getCatalog : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getObjectByType(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.cos.COSDocument.getCatalog : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.cos.COSObject getObjectByType(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $r7 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool>
org.apache.pdfbox.cos.COSDocument.getObjectByType : $r7 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>()
org.apache.pdfbox.cos.COSDocument.getObjectByType : $r8 = interfaceinvoke $r7.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSDocument.getObjectByType : r2 = interfaceinvoke $r8.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.cos.COSDocument.getObjectByType : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z0 == 0
org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.cos.COSDocument.getObjectByType : $r9 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : r3 = (org.apache.pdfbox.cos.COSObject) $r9
org.apache.pdfbox.cos.COSDocument.getObjectByType : r3 = (org.apache.pdfbox.cos.COSObject) $r9 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : r4 = virtualinvoke r3.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()
org.apache.pdfbox.cos.COSDocument.getObjectByType : r4 = virtualinvoke r3.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $z1 = r4 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.cos.COSDocument.getObjectByType : $z1 = r4 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z1 == 0
org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : r19 = (org.apache.pdfbox.cos.COSDictionary) r4
org.apache.pdfbox.cos.COSDocument.getObjectByType : r19 = (org.apache.pdfbox.cos.COSDictionary) r4 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>
org.apache.pdfbox.cos.COSDocument.getObjectByType : $r10 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : r5 = virtualinvoke r19.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r10)
org.apache.pdfbox.cos.COSDocument.getObjectByType : r5 = virtualinvoke r19.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r10) >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $z2 = r5 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSDocument.getObjectByType : $z2 = r5 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z2 == 0
org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z2 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : r6 = (org.apache.pdfbox.cos.COSName) r5
org.apache.pdfbox.cos.COSDocument.getObjectByType : r6 = (org.apache.pdfbox.cos.COSName) r5 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : $z3 = virtualinvoke r6.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDocument.getObjectByType : $z3 = virtualinvoke r6.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z3 == 0
org.apache.pdfbox.cos.COSDocument.getObjectByType : if $z3 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjectByType : return r3
org.apache.pdfbox.cos.COSDocument.getObjectByType : return r3 >>>>>>>> org.apache.pdfbox.cos.COSDocument.getCatalog : if r1 != null
org.apache.pdfbox.cos.COSDocument.getCatalog : if r1 != null >>>>>>>> org.apache.pdfbox.cos.COSDocument.getCatalog : return r1
org.apache.pdfbox.cos.COSDocument.getCatalog : return r1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : if r2 == null
org.apache.pdfbox.pdfparser.PDFParser.initialParse : if r2 == null >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r4 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r4 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z3 = $r4 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z3 = $r4 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z3 == 0
org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r5 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r5 = virtualinvoke r2.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r7 = (org.apache.pdfbox.cos.COSDictionary) $r5
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r7 = (org.apache.pdfbox.cos.COSDictionary) $r5 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r6 = (org.apache.pdfbox.cos.COSName[]) null
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r6 = (org.apache.pdfbox.cos.COSName[]) null >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void parseDictObjects(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName[])>($r7, $r6)
org.apache.pdfbox.pdfparser.PDFParser.initialParse : virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: void parseDictObjects(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.cos.COSName[])>($r7, $r6) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r10 = new java.util.LinkedList
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r10 = new java.util.LinkedList >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r10.<java.util.LinkedList: void <init>()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r10.<java.util.LinkedList: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r11 = new java.util.TreeMap
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r11 = new java.util.TreeMap >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r11.<java.util.TreeMap: void <init>()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r11.<java.util.TreeMap: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r12 = new java.util.HashSet
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r12 = new java.util.HashSet >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r12.<java.util.HashSet: void <init>()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r12.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r13 = new java.util.HashSet
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r13 = new java.util.HashSet >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r13.<java.util.HashSet: void <init>()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r13.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addExcludedToList(org.apache.pdfbox.cos.COSName[],org.apache.pdfbox.cos.COSDictionary,java.util.Set)>(r2, r1, $r12)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addExcludedToList(org.apache.pdfbox.cos.COSName[],org.apache.pdfbox.cos.COSDictionary,java.util.Set)>(r2, r1, $r12) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addExcludedToList : if r1 == null
org.apache.pdfbox.pdfparser.COSParser.addExcludedToList : if r1 == null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r14 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Collection getValues()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r14 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: java.util.Collection getValues()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,java.util.Collection,java.util.Set)>($r10, $r14, $r13)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,java.util.Collection,java.util.Set)>($r10, $r14, $r13) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : r4 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfparser.COSParser.addNewToList : r4 = interfaceinvoke r2.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfparser.COSParser.addNewToList : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : if $z0 == 0
org.apache.pdfbox.pdfparser.COSParser.addNewToList : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfparser.COSParser.addNewToList : $r6 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : r5 = (org.apache.pdfbox.cos.COSBase) $r6
org.apache.pdfbox.pdfparser.COSParser.addNewToList : r5 = (org.apache.pdfbox.cos.COSBase) $r6 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,org.apache.pdfbox.cos.COSBase,java.util.Set)>(r1, r5, r3)
org.apache.pdfbox.pdfparser.COSParser.addNewToList : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,org.apache.pdfbox.cos.COSBase,java.util.Set)>(r1, r5, r3) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : $z0 = r2 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfparser.COSParser.addNewToList : $z0 = r2 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : interfaceinvoke r1.<java.util.Queue: boolean add(java.lang.Object)>(r2)
org.apache.pdfbox.pdfparser.COSParser.addNewToList : interfaceinvoke r1.<java.util.Queue: boolean add(java.lang.Object)>(r2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfparser.COSParser.addNewToList : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : $r4 = (org.apache.pdfbox.cos.COSObject) r2
org.apache.pdfbox.pdfparser.COSParser.addNewToList : $r4 = (org.apache.pdfbox.cos.COSObject) r2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : l0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long getObjectId(org.apache.pdfbox.cos.COSObject)>($r4)
org.apache.pdfbox.pdfparser.COSParser.addNewToList : l0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long getObjectId(org.apache.pdfbox.cos.COSObject)>($r4) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getObjectId : $l0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObject: long getObjectNumber()>()
org.apache.pdfbox.pdfparser.COSParser.getObjectId : $l0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObject: long getObjectNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getObjectId : $l1 = $l0 << 32
org.apache.pdfbox.pdfparser.COSParser.getObjectId : $l1 = $l0 << 32 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getObjectId : $i2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObject: int getGenerationNumber()>()
org.apache.pdfbox.pdfparser.COSParser.getObjectId : $i2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSObject: int getGenerationNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getObjectId : $l3 = (long) $i2
org.apache.pdfbox.pdfparser.COSParser.getObjectId : $l3 = (long) $i2 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getObjectId : $l4 = $l1 | $l3
org.apache.pdfbox.pdfparser.COSParser.getObjectId : $l4 = $l1 | $l3 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getObjectId : return $l4
org.apache.pdfbox.pdfparser.COSParser.getObjectId : return $l4 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.pdfbox.pdfparser.COSParser.addNewToList : $r5 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : $z2 = interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r5)
org.apache.pdfbox.pdfparser.COSParser.addNewToList : $z2 = interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>($r5) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.addNewToList : if $z2 != 0
org.apache.pdfbox.pdfparser.COSParser.addNewToList : if $z2 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z0 = interfaceinvoke $r10.<java.util.Queue: boolean isEmpty()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z0 = interfaceinvoke $r10.<java.util.Queue: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z0 == 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r47 = interfaceinvoke $r10.<java.util.Queue: java.lang.Object poll()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r47 = interfaceinvoke $r10.<java.util.Queue: java.lang.Object poll()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r48 = (org.apache.pdfbox.cos.COSBase) $r47
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r48 = (org.apache.pdfbox.cos.COSBase) $r47 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $r48 == null
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $r48 == null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z4 = $r48 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z4 = $r48 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z4 == 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z5 = $r48 instanceof org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z5 = $r48 instanceof org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z5 == 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z5 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z6 = $r48 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z6 = $r48 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z6 == 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z6 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r51 = (org.apache.pdfbox.cos.COSObject) $r48
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r51 = (org.apache.pdfbox.cos.COSObject) $r48 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : l13 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long getObjectId(org.apache.pdfbox.cos.COSObject)>(r51)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : l13 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long getObjectId(org.apache.pdfbox.cos.COSObject)>(r51) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r20 = new org.apache.pdfbox.cos.COSObjectKey
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r20 = new org.apache.pdfbox.cos.COSObjectKey >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $l1 = virtualinvoke r51.<org.apache.pdfbox.cos.COSObject: long getObjectNumber()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $l1 = virtualinvoke r51.<org.apache.pdfbox.cos.COSObject: long getObjectNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $i2 = virtualinvoke r51.<org.apache.pdfbox.cos.COSObject: int getGenerationNumber()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $i2 = virtualinvoke r51.<org.apache.pdfbox.cos.COSObject: int getGenerationNumber()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r20.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>($l1, $i2)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke $r20.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>($l1, $i2) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l13)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r21 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l13) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z7 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>($r21)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z7 = interfaceinvoke $r12.<java.util.Set: boolean contains(java.lang.Object)>($r21) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z7 != 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z7 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r22 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver>
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r22 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.pdfparser.XrefTrailerResolver xrefTrailerResolver> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r23 = virtualinvoke $r22.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r23 = virtualinvoke $r22.<org.apache.pdfbox.pdfparser.XrefTrailerResolver: java.util.Map getXrefTable()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r24 = interfaceinvoke $r23.<java.util.Map: java.lang.Object get(java.lang.Object)>($r20)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r24 = interfaceinvoke $r23.<java.util.Map: java.lang.Object get(java.lang.Object)>($r20) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r52 = (java.lang.Long) $r24
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r52 = (java.lang.Long) $r24 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if r52 == null
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if r52 == null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $l3 = virtualinvoke r52.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $l3 = virtualinvoke r52.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $b4 = $l3 cmp 0L
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $b4 = $l3 cmp 0L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $b4 == 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $b4 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $l5 = virtualinvoke r52.<java.lang.Long: long longValue()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $l5 = virtualinvoke r52.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $b6 = $l5 cmp 0L
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $b6 = $l5 cmp 0L >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $b6 <= 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $b6 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r41 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r51)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r41 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>(r51) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : virtualinvoke $r11.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r52, $r41)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : virtualinvoke $r11.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r52, $r41) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= (branch)]
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= $r47 = interfaceinvoke $r10.<java.util.Queue: java.lang.Object poll()>()]
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= $r47 = interfaceinvoke $r10.<java.util.Queue: java.lang.Object poll()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z1 = virtualinvoke $r11.<java.util.TreeMap: boolean isEmpty()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z1 = virtualinvoke $r11.<java.util.TreeMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z1 == 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r15 = virtualinvoke $r11.<java.util.TreeMap: java.lang.Object firstKey()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r15 = virtualinvoke $r11.<java.util.TreeMap: java.lang.Object firstKey()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r16 = virtualinvoke $r11.<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>($r15)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r16 = virtualinvoke $r11.<java.util.TreeMap: java.lang.Object remove(java.lang.Object)>($r15) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r17 = (java.util.List) $r16
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r17 = (java.util.List) $r16 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r56 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r56 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z2 == 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r18 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r18 = interfaceinvoke r56.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r57 = (org.apache.pdfbox.cos.COSObject) $r18
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r57 = (org.apache.pdfbox.cos.COSObject) $r18 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r8 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseObjectDynamically(org.apache.pdfbox.cos.COSObject,boolean)>(r57, 0)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r8 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSBase parseObjectDynamically(org.apache.pdfbox.cos.COSObject,boolean)>(r57, 0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r32 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r32 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : interfaceinvoke $r32.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : interfaceinvoke $r32.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r33 = new org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : $r33 = new org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : specialinvoke $r33.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null)
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : specialinvoke $r33.<org.apache.pdfbox.cos.COSObject: void <init>(org.apache.pdfbox.cos.COSBase)>(null) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = $r33
org.apache.pdfbox.pdfparser.BaseParser.parseDirObject : r60 = $r33 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.size : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.size : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.size : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.apache.pdfbox.cos.COSArray.size : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.size : return $i0
org.apache.pdfbox.cos.COSArray.size : return $i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i6 = $i5 - 1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i6 = $i5 - 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r18 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>($i6)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r18 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>($i6) >>>>>>>> org.apache.pdfbox.cos.COSArray.get : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.get : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.get : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0)
org.apache.pdfbox.cos.COSArray.get : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.apache.pdfbox.cos.COSArray.get : $r3 = (org.apache.pdfbox.cos.COSBase) $r2
org.apache.pdfbox.cos.COSArray.get : $r3 = (org.apache.pdfbox.cos.COSBase) $r2 >>>>>>>> org.apache.pdfbox.cos.COSArray.get : return $r3
org.apache.pdfbox.cos.COSArray.get : return $r3 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $z3 = $r18 instanceof org.apache.pdfbox.cos.COSInteger
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $z3 = $r18 instanceof org.apache.pdfbox.cos.COSInteger >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $z3 == 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i7 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i7 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i8 = $i7 - 1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i8 = $i7 - 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r19 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase remove(int)>($i8)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r19 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase remove(int)>($i8) >>>>>>>> org.apache.pdfbox.cos.COSArray.remove : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.remove : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.remove : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0)
org.apache.pdfbox.cos.COSArray.remove : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(i0) >>>>>>>> org.apache.pdfbox.cos.COSArray.remove : $r3 = (org.apache.pdfbox.cos.COSBase) $r2
org.apache.pdfbox.cos.COSArray.remove : $r3 = (org.apache.pdfbox.cos.COSBase) $r2 >>>>>>>> org.apache.pdfbox.cos.COSArray.remove : return $r3
org.apache.pdfbox.cos.COSArray.remove : return $r3 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : r24 = (org.apache.pdfbox.cos.COSInteger) $r19
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : r24 = (org.apache.pdfbox.cos.COSInteger) $r19 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i9 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i9 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i10 = $i9 - 1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i10 = $i9 - 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r20 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>($i10)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r20 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase get(int)>($i10) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $z4 = $r20 instanceof org.apache.pdfbox.cos.COSInteger
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $z4 = $r20 instanceof org.apache.pdfbox.cos.COSInteger >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $z4 == 0
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i11 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i11 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i12 = $i11 - 1
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i12 = $i11 - 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r21 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase remove(int)>($i12)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r21 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase remove(int)>($i12) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : r2 = (org.apache.pdfbox.cos.COSInteger) $r21
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : r2 = (org.apache.pdfbox.cos.COSInteger) $r21 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r22 = new org.apache.pdfbox.cos.COSObjectKey
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $r22 = new org.apache.pdfbox.cos.COSObjectKey >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $l13 = virtualinvoke r2.<org.apache.pdfbox.cos.COSInteger: long longValue()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $l13 = virtualinvoke r2.<org.apache.pdfbox.cos.COSInteger: long longValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i14 = virtualinvoke r24.<org.apache.pdfbox.cos.COSInteger: int intValue()>()
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : $i14 = virtualinvoke r24.<org.apache.pdfbox.cos.COSInteger: int intValue()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : specialinvoke $r22.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>($l13, $i14)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : specialinvoke $r22.<org.apache.pdfbox.cos.COSObjectKey: void <init>(long,int)>($l13, $i14) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : r23 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)>($r22)
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : r23 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.cos.COSBase getObjectFromPool(org.apache.pdfbox.cos.COSObjectKey)>($r22) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : goto [?= (branch)]
org.apache.pdfbox.pdfparser.BaseParser.parseCOSArray : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if r8 == null
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if r8 == null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : virtualinvoke r57.<org.apache.pdfbox.cos.COSObject: void setObject(org.apache.pdfbox.cos.COSBase)>(r8)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : virtualinvoke r57.<org.apache.pdfbox.cos.COSObject: void setObject(org.apache.pdfbox.cos.COSBase)>(r8) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,org.apache.pdfbox.cos.COSBase,java.util.Set)>($r10, r8, $r13)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,org.apache.pdfbox.cos.COSBase,java.util.Set)>($r10, r8, $r13) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $l0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long getObjectId(org.apache.pdfbox.cos.COSObject)>(r57)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $l0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: long getObjectId(org.apache.pdfbox.cos.COSObject)>(r57) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>($r19)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>($r19) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= $z2 = interfaceinvoke r56.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= $z0 = interfaceinvoke $r10.<java.util.Queue: boolean isEmpty()>()]
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= $z0 = interfaceinvoke $r10.<java.util.Queue: boolean isEmpty()>()] >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r45 = (org.apache.pdfbox.cos.COSDictionary) $r48
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r45 = (org.apache.pdfbox.cos.COSDictionary) $r48 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r46 = virtualinvoke $r45.<org.apache.pdfbox.cos.COSDictionary: java.util.Collection getValues()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r46 = virtualinvoke $r45.<org.apache.pdfbox.cos.COSDictionary: java.util.Collection getValues()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,java.util.Collection,java.util.Set)>($r10, $r46, $r13)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,java.util.Collection,java.util.Set)>($r10, $r46, $r13) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r43 = (org.apache.pdfbox.cos.COSArray) $r48
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r43 = (org.apache.pdfbox.cos.COSArray) $r48 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r49 = virtualinvoke $r43.<org.apache.pdfbox.cos.COSArray: java.util.Iterator iterator()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r49 = virtualinvoke $r43.<org.apache.pdfbox.cos.COSArray: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z9 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $z9 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z9 == 0
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : if $z9 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r44 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : $r44 = interfaceinvoke r49.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r50 = (org.apache.pdfbox.cos.COSBase) $r44
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : r50 = (org.apache.pdfbox.cos.COSBase) $r44 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,org.apache.pdfbox.cos.COSBase,java.util.Set)>($r10, r50, $r13)
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: void addNewToList(java.util.Queue,org.apache.pdfbox.cos.COSBase,java.util.Set)>($r10, r50, $r13) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= $z9 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= $z9 = interfaceinvoke r49.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46)
org.apache.pdfbox.cos.COSNumber.get : $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46) >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : if $i1 != -1
org.apache.pdfbox.cos.COSNumber.get : if $i1 != -1 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $r1 = new org.apache.pdfbox.cos.COSFloat
org.apache.pdfbox.cos.COSNumber.get : $r1 = new org.apache.pdfbox.cos.COSFloat >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : specialinvoke $r1.<org.apache.pdfbox.cos.COSFloat: void <init>(java.lang.String)>(r0)
org.apache.pdfbox.cos.COSNumber.get : specialinvoke $r1.<org.apache.pdfbox.cos.COSFloat: void <init>(java.lang.String)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $r1 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value>
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $r1 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value> >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : f3 = virtualinvoke $r1.<java.math.BigDecimal: float floatValue()>()
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : f3 = virtualinvoke $r1.<java.math.BigDecimal: float floatValue()>() >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $r2 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value>
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $r2 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value> >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : d0 = virtualinvoke $r2.<java.math.BigDecimal: double doubleValue()>()
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : d0 = virtualinvoke $r2.<java.math.BigDecimal: double doubleValue()>() >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : z0 = 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : z0 = 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b0 = f3 cmpl #-InfinityF
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b0 = f3 cmpl #-InfinityF >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b0 == 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b3 = f3 cmpl #InfinityF
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b3 = f3 cmpl #InfinityF >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b3 != 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b3 != 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b4 = f3 cmpl 0.0F
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b4 = f3 cmpl 0.0F >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b4 != 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b4 != 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b5 = d0 cmpl 0.0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b5 = d0 cmpl 0.0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b5 == 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b5 == 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if z0 == 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : return $r1
org.apache.pdfbox.cos.COSNumber.get : return $r1 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= return]
org.apache.pdfbox.pdfparser.COSParser.parseDictObjects : goto [?= return] >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INFO>
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r8 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName INFO> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : r3 = virtualinvoke r21.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r8)
org.apache.pdfbox.pdfparser.PDFParser.initialParse : r3 = virtualinvoke r21.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r8) >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z4 = r3 instanceof org.apache.pdfbox.cos.COSDictionary
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $z4 = r3 instanceof org.apache.pdfbox.cos.COSDictionary >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z4 == 0
org.apache.pdfbox.pdfparser.PDFParser.initialParse : if $z4 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r9 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.PDFParser.initialParse : $r9 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : virtualinvoke $r9.<org.apache.pdfbox.cos.COSDocument: void setDecrypted()>()
org.apache.pdfbox.pdfparser.PDFParser.initialParse : virtualinvoke $r9.<org.apache.pdfbox.cos.COSDocument: void setDecrypted()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.setDecrypted : r0.<org.apache.pdfbox.cos.COSDocument: boolean isDecrypted> = 1
org.apache.pdfbox.cos.COSDocument.setDecrypted : r0.<org.apache.pdfbox.cos.COSDocument: boolean isDecrypted> = 1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.initialParse : r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean initialParseDone> = 1
org.apache.pdfbox.pdfparser.PDFParser.initialParse : r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean initialParseDone> = 1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : $r2 = r0.<org.apache.pdfbox.pdfparser.PDFParser: java.io.InputStream keyStoreInputStream>
org.apache.pdfbox.pdfparser.PDFParser.parse : $r2 = r0.<org.apache.pdfbox.pdfparser.PDFParser: java.io.InputStream keyStoreInputStream> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.Closeable)>($r2)
org.apache.pdfbox.pdfparser.PDFParser.parse : staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.Closeable)>($r2) >>>>>>>> org.apache.pdfbox.io.IOUtils.closeQuietly : if r0 == null
org.apache.pdfbox.io.IOUtils.closeQuietly : if r0 == null >>>>>>>> org.apache.pdfbox.io.IOUtils.closeQuietly : goto [?= return]
org.apache.pdfbox.io.IOUtils.closeQuietly : goto [?= return] >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : goto [?= return]
org.apache.pdfbox.pdfparser.PDFParser.parse : goto [?= return] >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r9 = virtualinvoke $r8.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdmodel.PDDocument getPDDocument()>()
org.apache.pdfbox.pdmodel.PDDocument.load : $r9 = virtualinvoke $r8.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdmodel.PDDocument getPDDocument()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r2 = new org.apache.pdfbox.pdmodel.PDDocument
org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r2 = new org.apache.pdfbox.pdmodel.PDDocument >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument getDocument()>()
org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument getDocument()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getDocument : $r1 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.getDocument : $r1 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getDocument : if $r1 != null
org.apache.pdfbox.pdfparser.COSParser.getDocument : if $r1 != null >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getDocument : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.COSParser.getDocument : $r2 = r0.<org.apache.pdfbox.pdfparser.COSParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.getDocument : return $r2
org.apache.pdfbox.pdfparser.COSParser.getDocument : return $r2 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r5 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.RandomAccessRead source>
org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r5 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.io.RandomAccessRead source> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r4 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdmodel.encryption.AccessPermission accessPermission>
org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r4 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdmodel.encryption.AccessPermission accessPermission> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : specialinvoke $r2.<org.apache.pdfbox.pdmodel.PDDocument: void <init>(org.apache.pdfbox.cos.COSDocument,org.apache.pdfbox.io.RandomAccessRead,org.apache.pdfbox.pdmodel.encryption.AccessPermission)>($r3, $r5, $r4)
org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : specialinvoke $r2.<org.apache.pdfbox.pdmodel.PDDocument: void <init>(org.apache.pdfbox.cos.COSDocument,org.apache.pdfbox.io.RandomAccessRead,org.apache.pdfbox.pdmodel.encryption.AccessPermission)>($r3, $r5, $r4) >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r6 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdmodel.encryption.PDEncryption encryption>
org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : $r6 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.pdmodel.encryption.PDEncryption encryption> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDDocument: void setEncryptionDictionary(org.apache.pdfbox.pdmodel.encryption.PDEncryption)>($r6)
org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : virtualinvoke $r2.<org.apache.pdfbox.pdmodel.PDDocument: void setEncryptionDictionary(org.apache.pdfbox.pdmodel.encryption.PDEncryption)>($r6) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.setEncryptionDictionary : r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryption encryption> = r1
org.apache.pdfbox.pdmodel.PDDocument.setEncryptionDictionary : r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.encryption.PDEncryption encryption> = r1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : return $r2
org.apache.pdfbox.pdfparser.PDFParser.getPDDocument : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : return $r9
org.apache.pdfbox.pdmodel.PDDocument.load : return $r9 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : return $r2
org.apache.pdfbox.pdmodel.PDDocument.load : return $r2 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r4 = (org.apache.pdfbox.cos.COSObject) r5
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r4 = (org.apache.pdfbox.cos.COSObject) r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $i1 = i0 + 1
org.apache.pdfbox.pdmodel.PDPageTree.get : $i1 = i0 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary root>
org.apache.pdfbox.pdmodel.PDPageTree.get : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary root> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : r1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary get(int,org.apache.pdfbox.cos.COSDictionary,int)>($i1, $r3, 0)
org.apache.pdfbox.pdmodel.PDPageTree.get : r1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary get(int,org.apache.pdfbox.cos.COSDictionary,int)>($i1, $r3, 0) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : if i0 >= 0
org.apache.pdfbox.pdmodel.PDPageTree.get : if i0 >= 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: boolean isPageTreeNode(org.apache.pdfbox.cos.COSDictionary)>(r1)
org.apache.pdfbox.pdmodel.PDPageTree.get : $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: boolean isPageTreeNode(org.apache.pdfbox.cos.COSDictionary)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $r3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSName getCOSName(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $r3 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSName getCOSName(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PAGES>
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PAGES> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : if $r3 == $r4
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : if $r3 == $r4 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $z1 = 1
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $z1 = 1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : goto [?= return $z1]
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : goto [?= return $z1] >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : return $z1
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : return $z1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : if $z0 == 0
org.apache.pdfbox.pdmodel.PDPageTree.get : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COUNT>
org.apache.pdfbox.pdmodel.PDPageTree.get : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName COUNT> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : i1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r5, 0)
org.apache.pdfbox.pdmodel.PDPageTree.get : i1 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: int getInt(org.apache.pdfbox.cos.COSName,int)>($r5, 0) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $i3 = i5 + i1
org.apache.pdfbox.pdmodel.PDPageTree.get : $i3 = i5 + i1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : if i0 > $i3
org.apache.pdfbox.pdmodel.PDPageTree.get : if i0 > $i3 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r11 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: java.util.List getKids(org.apache.pdfbox.cos.COSDictionary)>(r1)
org.apache.pdfbox.pdmodel.PDPageTree.get : $r11 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: java.util.List getKids(org.apache.pdfbox.cos.COSDictionary)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r4 = new java.util.ArrayList
org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r4 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : specialinvoke $r4.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.pdmodel.PDPageTree.getKids : specialinvoke $r4.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS>
org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r6 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r6 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : r3 = (org.apache.pdfbox.cos.COSArray) $r6
org.apache.pdfbox.pdmodel.PDPageTree.getKids : r3 = (org.apache.pdfbox.cos.COSArray) $r6 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : if r3 != null
org.apache.pdfbox.pdmodel.PDPageTree.getKids : if r3 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : i1 = 0
org.apache.pdfbox.pdmodel.PDPageTree.getKids : i1 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : i0 = virtualinvoke r3.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.pdmodel.PDPageTree.getKids : i0 = virtualinvoke r3.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : if i1 >= i0
org.apache.pdfbox.pdmodel.PDPageTree.getKids : if i1 >= i0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r7 = virtualinvoke r3.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(i1)
org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r7 = virtualinvoke r3.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(i1) >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.getObject : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0)
org.apache.pdfbox.cos.COSArray.getObject : r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $z0 = r4 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSArray.getObject : $z0 = r4 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : if $z0 == 0
org.apache.pdfbox.cos.COSArray.getObject : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $r3 = (org.apache.pdfbox.cos.COSObject) r4
org.apache.pdfbox.cos.COSArray.getObject : $r3 = (org.apache.pdfbox.cos.COSObject) r4 >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()
org.apache.pdfbox.cos.COSArray.getObject : r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $z1 = r4 instanceof org.apache.pdfbox.cos.COSNull
org.apache.pdfbox.cos.COSArray.getObject : $z1 = r4 instanceof org.apache.pdfbox.cos.COSNull >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : if $z1 == 0
org.apache.pdfbox.cos.COSArray.getObject : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $r2 = (org.apache.pdfbox.cos.COSBase) r4
org.apache.pdfbox.cos.COSArray.getObject : $r2 = (org.apache.pdfbox.cos.COSBase) r4 >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : return $r2
org.apache.pdfbox.cos.COSArray.getObject : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r8 = (org.apache.pdfbox.cos.COSDictionary) $r7
org.apache.pdfbox.pdmodel.PDPageTree.getKids : $r8 = (org.apache.pdfbox.cos.COSDictionary) $r7 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r8)
org.apache.pdfbox.pdmodel.PDPageTree.getKids : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>($r8) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : i1 = i1 + 1
org.apache.pdfbox.pdmodel.PDPageTree.getKids : i1 = i1 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : goto [?= (branch)]
org.apache.pdfbox.pdmodel.PDPageTree.getKids : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.getKids : return $r4
org.apache.pdfbox.pdmodel.PDPageTree.getKids : return $r4 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : r2 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.pdmodel.PDPageTree.get : r2 = interfaceinvoke $r11.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdmodel.PDPageTree.get : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : if $z1 == 0
org.apache.pdfbox.pdmodel.PDPageTree.get : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdmodel.PDPageTree.get : $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : r3 = (org.apache.pdfbox.cos.COSDictionary) $r13
org.apache.pdfbox.pdmodel.PDPageTree.get : r3 = (org.apache.pdfbox.cos.COSDictionary) $r13 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $z2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: boolean isPageTreeNode(org.apache.pdfbox.cos.COSDictionary)>(r3)
org.apache.pdfbox.pdmodel.PDPageTree.get : $z2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: boolean isPageTreeNode(org.apache.pdfbox.cos.COSDictionary)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS>
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $z0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: boolean containsKey(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $z0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSDictionary: boolean containsKey(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : if $z0 == 0
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $z1 = 0
org.apache.pdfbox.pdmodel.PDPageTree.isPageTreeNode : $z1 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : if $z2 == 0
org.apache.pdfbox.pdmodel.PDPageTree.get : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : i5 = i5 + 1
org.apache.pdfbox.pdmodel.PDPageTree.get : i5 = i5 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : if i0 != i5
org.apache.pdfbox.pdmodel.PDPageTree.get : if i0 != i5 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r14 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary get(int,org.apache.pdfbox.cos.COSDictionary,int)>(i0, r3, i5)
org.apache.pdfbox.pdmodel.PDPageTree.get : $r14 = specialinvoke r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.cos.COSDictionary get(int,org.apache.pdfbox.cos.COSDictionary,int)>(i0, r3, i5) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : if i5 != i0
org.apache.pdfbox.pdmodel.PDPageTree.get : if i5 != i0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : return r1
org.apache.pdfbox.pdmodel.PDPageTree.get : return r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : return $r14
org.apache.pdfbox.pdmodel.PDPageTree.get : return $r14 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : staticinvoke <org.apache.pdfbox.pdmodel.PDPageTree: void sanitizeType(org.apache.pdfbox.cos.COSDictionary)>(r1)
org.apache.pdfbox.pdmodel.PDPageTree.get : staticinvoke <org.apache.pdfbox.pdmodel.PDPageTree: void sanitizeType(org.apache.pdfbox.cos.COSDictionary)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE>
org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TYPE> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSName getCOSName(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSName getCOSName(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : if r1 != null
org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : if r1 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PAGE>
org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName PAGE> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : $z0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : $z0 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSName: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : if $z0 != 0
org.apache.pdfbox.pdmodel.PDPageTree.sanitizeType : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r4 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.pdmodel.PDDocument document>
org.apache.pdfbox.pdmodel.PDPageTree.get : $r4 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.pdmodel.PDDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : if $r4 == null
org.apache.pdfbox.pdmodel.PDPageTree.get : if $r4 == null >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r6 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.pdmodel.PDDocument document>
org.apache.pdfbox.pdmodel.PDPageTree.get : $r6 = r0.<org.apache.pdfbox.pdmodel.PDPageTree: org.apache.pdfbox.pdmodel.PDDocument document> >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r7 = virtualinvoke $r6.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.ResourceCache getResourceCache()>()
org.apache.pdfbox.pdmodel.PDPageTree.get : $r7 = virtualinvoke $r6.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.ResourceCache getResourceCache()>() >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getResourceCache : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.ResourceCache resourceCache>
org.apache.pdfbox.pdmodel.PDDocument.getResourceCache : $r1 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.ResourceCache resourceCache> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.getResourceCache : return $r1
org.apache.pdfbox.pdmodel.PDDocument.getResourceCache : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : goto [?= $r5 = new org.apache.pdfbox.pdmodel.PDPage]
org.apache.pdfbox.pdmodel.PDPageTree.get : goto [?= $r5 = new org.apache.pdfbox.pdmodel.PDPage] >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : $r5 = new org.apache.pdfbox.pdmodel.PDPage
org.apache.pdfbox.pdmodel.PDPageTree.get : $r5 = new org.apache.pdfbox.pdmodel.PDPage >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : specialinvoke $r5.<org.apache.pdfbox.pdmodel.PDPage: void <init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)>(r1, $r7)
org.apache.pdfbox.pdmodel.PDPageTree.get : specialinvoke $r5.<org.apache.pdfbox.pdmodel.PDPage: void <init>(org.apache.pdfbox.cos.COSDictionary,org.apache.pdfbox.pdmodel.ResourceCache)>(r1, $r7) >>>>>>>> org.apache.pdfbox.pdmodel.PDPageTree.get : return $r5
org.apache.pdfbox.pdmodel.PDPageTree.get : return $r5 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getTransition : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page>
org.apache.pdfbox.pdmodel.PDPage.getTransition : $r3 = r0.<org.apache.pdfbox.pdmodel.PDPage: org.apache.pdfbox.cos.COSDictionary page> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getTransition : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TRANS>
org.apache.pdfbox.pdmodel.PDPage.getTransition : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName TRANS> >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getTransition : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.pdmodel.PDPage.getTransition : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getTransition : r1 = (org.apache.pdfbox.cos.COSDictionary) $r4
org.apache.pdfbox.pdmodel.PDPage.getTransition : r1 = (org.apache.pdfbox.cos.COSDictionary) $r4 >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getTransition : if r1 != null
org.apache.pdfbox.pdmodel.PDPage.getTransition : if r1 != null >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getTransition : $r5 = new org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition
org.apache.pdfbox.pdmodel.PDPage.getTransition : $r5 = new org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getTransition : specialinvoke $r5.<org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r1)
org.apache.pdfbox.pdmodel.PDPage.getTransition : specialinvoke $r5.<org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDPage.getTransition : return $r5
org.apache.pdfbox.pdmodel.PDPage.getTransition : return $r5 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getStyle : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition: org.apache.pdfbox.cos.COSDictionary getCOSObject()>()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getStyle : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition: org.apache.pdfbox.cos.COSDictionary getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getStyle : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName S>
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getStyle : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName S> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getStyle : $r2 = <org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionStyle: org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionStyle R>
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getStyle : $r2 = <org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionStyle: org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionStyle R> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getStyle : $r4 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionStyle: java.lang.String name()>()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getStyle : $r4 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransitionStyle: java.lang.String name()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getStyle : $r5 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getNameAsString(org.apache.pdfbox.cos.COSName,java.lang.String)>($r3, $r4)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getStyle : $r5 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getNameAsString(org.apache.pdfbox.cos.COSName,java.lang.String)>($r3, $r4) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getNameAsString(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.getNameAsString : r3 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: java.lang.String getNameAsString(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : r5 = null
org.apache.pdfbox.cos.COSDictionary.getNameAsString : r5 = null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.getNameAsString : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSDictionary.getNameAsString : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getNameAsString : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : $r4 = (org.apache.pdfbox.cos.COSName) r2
org.apache.pdfbox.cos.COSDictionary.getNameAsString : $r4 = (org.apache.pdfbox.cos.COSName) r2 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>()
org.apache.pdfbox.cos.COSDictionary.getNameAsString : r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSName: java.lang.String getName()>() >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : goto [?= return r5]
org.apache.pdfbox.cos.COSDictionary.getNameAsString : goto [?= return r5] >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : return r5
org.apache.pdfbox.cos.COSDictionary.getNameAsString : return r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : if r3 != null
org.apache.pdfbox.cos.COSDictionary.getNameAsString : if r3 != null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getNameAsString : return r3
org.apache.pdfbox.cos.COSDictionary.getNameAsString : return r3 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getStyle : return $r5
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getStyle : return $r5 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getFloat : $f0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: float getFloat(org.apache.pdfbox.cos.COSName,float)>(r1, -1.0F)
org.apache.pdfbox.cos.COSDictionary.getFloat : $f0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: float getFloat(org.apache.pdfbox.cos.COSName,float)>(r1, -1.0F) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getFloat : f1 = f0
org.apache.pdfbox.cos.COSDictionary.getFloat : f1 = f0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getFloat : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.getFloat : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getFloat : $z0 = r2 instanceof org.apache.pdfbox.cos.COSNumber
org.apache.pdfbox.cos.COSDictionary.getFloat : $z0 = r2 instanceof org.apache.pdfbox.cos.COSNumber >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getFloat : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getFloat : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getFloat : $r3 = (org.apache.pdfbox.cos.COSNumber) r2
org.apache.pdfbox.cos.COSDictionary.getFloat : $r3 = (org.apache.pdfbox.cos.COSNumber) r2 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getFloat : f1 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSNumber: float floatValue()>()
org.apache.pdfbox.cos.COSDictionary.getFloat : f1 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSNumber: float floatValue()>() >>>>>>>> org.apache.pdfbox.cos.COSFloat.floatValue : $r1 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value>
org.apache.pdfbox.cos.COSFloat.floatValue : $r1 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value> >>>>>>>> org.apache.pdfbox.cos.COSFloat.floatValue : $f0 = virtualinvoke $r1.<java.math.BigDecimal: float floatValue()>()
org.apache.pdfbox.cos.COSFloat.floatValue : $f0 = virtualinvoke $r1.<java.math.BigDecimal: float floatValue()>() >>>>>>>> org.apache.pdfbox.cos.COSFloat.floatValue : return $f0
org.apache.pdfbox.cos.COSFloat.floatValue : return $f0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getFloat : return f1
org.apache.pdfbox.cos.COSDictionary.getFloat : return f1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getFloat : return $f0
org.apache.pdfbox.cos.COSDictionary.getFloat : return $f0 >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getDirection : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition: org.apache.pdfbox.cos.COSDictionary getCOSObject()>()
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getDirection : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition: org.apache.pdfbox.cos.COSDictionary getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getDirection : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DI>
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getDirection : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DI> >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getDirection : r1 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r3)
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getDirection : r1 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getItem(org.apache.pdfbox.cos.COSName)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getDirection : if r1 != null
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getDirection : if r1 != null >>>>>>>> org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getDirection : return r1
org.apache.pdfbox.pdmodel.interactive.pagenavigation.PDTransition.getDirection : return r1 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r8 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.cos.COSDocument.close : $r8 = interfaceinvoke r10.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r11 = (org.apache.pdfbox.cos.COSObject) $r8
org.apache.pdfbox.cos.COSDocument.close : r11 = (org.apache.pdfbox.cos.COSObject) $r8 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r2 = virtualinvoke r11.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>()
org.apache.pdfbox.cos.COSDocument.close : r2 = virtualinvoke r11.<org.apache.pdfbox.cos.COSObject: org.apache.pdfbox.cos.COSBase getObject()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $z3 = r2 instanceof org.apache.pdfbox.cos.COSStream
org.apache.pdfbox.cos.COSDocument.close : $z3 = r2 instanceof org.apache.pdfbox.cos.COSStream >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $z3 == 0
org.apache.pdfbox.cos.COSDocument.close : if $z3 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : goto [?= $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.cos.COSDocument.close : goto [?= $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : $r5 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.io.RandomAccessRead pdfSource>
org.apache.pdfbox.pdmodel.PDDocument.close : $r5 = r0.<org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.io.RandomAccessRead pdfSource> >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.close : interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: void close()>()
org.apache.pdfbox.pdmodel.PDDocument.close : interfaceinvoke $r5.<org.apache.pdfbox.io.RandomAccessRead: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed>
org.apache.pdfbox.cos.COSDocument.finalize : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : if $z0 != 0
