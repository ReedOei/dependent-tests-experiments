org.apache.pdfbox.cos.COSNumber.get : $i0 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : if $i0 != 1
org.apache.pdfbox.cos.COSNumber.get : if $i0 != 1 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46)
org.apache.pdfbox.cos.COSNumber.get : $i1 = virtualinvoke r0.<java.lang.String: int indexOf(int)>(46) >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : if $i1 != -1
org.apache.pdfbox.cos.COSNumber.get : if $i1 != -1 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : $r1 = new org.apache.pdfbox.cos.COSFloat
org.apache.pdfbox.cos.COSNumber.get : $r1 = new org.apache.pdfbox.cos.COSFloat >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : specialinvoke $r1.<org.apache.pdfbox.cos.COSFloat: void <init>(java.lang.String)>(r0)
org.apache.pdfbox.cos.COSNumber.get : specialinvoke $r1.<org.apache.pdfbox.cos.COSFloat: void <init>(java.lang.String)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $r1 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value>
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $r1 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value> >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : f3 = virtualinvoke $r1.<java.math.BigDecimal: float floatValue()>()
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : f3 = virtualinvoke $r1.<java.math.BigDecimal: float floatValue()>() >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $r2 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value>
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $r2 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value> >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : d0 = virtualinvoke $r2.<java.math.BigDecimal: double doubleValue()>()
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : d0 = virtualinvoke $r2.<java.math.BigDecimal: double doubleValue()>() >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : z0 = 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : z0 = 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b0 = f3 cmpl #-InfinityF
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b0 = f3 cmpl #-InfinityF >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b0 == 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b3 = f3 cmpl #InfinityF
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b3 = f3 cmpl #InfinityF >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b3 != 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b3 != 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b4 = f3 cmpl 0.0F
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : $b4 = f3 cmpl 0.0F >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b4 != 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if $b4 != 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if z0 == 0
org.apache.pdfbox.cos.COSFloat.checkMinMaxValues : if z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSNumber.get : return $r1
org.apache.pdfbox.cos.COSNumber.get : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.setOutput : r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream output> = r1
org.apache.pdfbox.pdfwriter.COSWriter.setOutput : r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream output> = r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.setStandardOutput : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput> = r1
org.apache.pdfbox.pdfwriter.COSWriter.setStandardOutput : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput> = r1 >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$BaseTester.runTests : specialinvoke r0.<org.apache.pdfbox.cos.TestCOSFloat$BaseTester: void loop(long)>(123456L)
org.apache.pdfbox.cos.TestCOSFloat$BaseTester.runTests : specialinvoke r0.<org.apache.pdfbox.cos.TestCOSFloat$BaseTester: void loop(long)>(123456L) >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : $r3 = new java.util.Random
org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : $r3 = new java.util.Random >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : specialinvoke $r3.<java.util.Random: void <init>(long)>(l0)
org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : specialinvoke $r3.<java.util.Random: void <init>(long)>(l0) >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : i3 = r0.<org.apache.pdfbox.cos.TestCOSFloat$BaseTester: int low>
org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : i3 = r0.<org.apache.pdfbox.cos.TestCOSFloat$BaseTester: int low> >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : $i1 = r0.<org.apache.pdfbox.cos.TestCOSFloat$BaseTester: int high>
org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : $i1 = r0.<org.apache.pdfbox.cos.TestCOSFloat$BaseTester: int high> >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : if i3 >= $i1
org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : if i3 >= $i1 >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : $f1 = (float) i3
org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : $f1 = (float) i3 >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : $f2 = virtualinvoke $r3.<java.util.Random: float nextFloat()>()
org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : $f2 = virtualinvoke $r3.<java.util.Random: float nextFloat()>() >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : f0 = $f1 * $f2
org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : f0 = $f1 * $f2 >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : virtualinvoke r0.<org.apache.pdfbox.cos.TestCOSFloat$BaseTester: void runTest(float)>(f0)
org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : virtualinvoke r0.<org.apache.pdfbox.cos.TestCOSFloat$BaseTester: void runTest(float)>(f0) >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r1 = new org.apache.pdfbox.cos.COSFloat
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r1 = new org.apache.pdfbox.cos.COSFloat >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : specialinvoke $r1.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>(f0)
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : specialinvoke $r1.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>(f0) >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(46)
org.apache.pdfbox.cos.COSFloat.removeNullDigits : $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(46) >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $i0 <= -1
org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $i0 <= -1 >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".0")
org.apache.pdfbox.cos.COSFloat.removeNullDigits : $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".0") >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $z0 != 0
org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $z0 != 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("0")
org.apache.pdfbox.cos.COSFloat.removeNullDigits : $z1 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("0") >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $z1 == 0
org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : return r1
org.apache.pdfbox.cos.COSFloat.removeNullDigits : return r1 >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r2 = r0.<org.apache.pdfbox.cos.TestCOSFloat$AcceptTester: org.apache.pdfbox.pdfwriter.COSWriter visitor>
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r2 = r0.<org.apache.pdfbox.cos.TestCOSFloat$AcceptTester: org.apache.pdfbox.pdfwriter.COSWriter visitor> >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : virtualinvoke $r1.<org.apache.pdfbox.cos.COSFloat: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>($r2)
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : virtualinvoke $r1.<org.apache.pdfbox.cos.COSFloat: java.lang.Object accept(org.apache.pdfbox.cos.ICOSVisitor)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSFloat.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromFloat(org.apache.pdfbox.cos.COSFloat)>(r0)
org.apache.pdfbox.cos.COSFloat.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromFloat(org.apache.pdfbox.cos.COSFloat)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getStandardOutput : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput>
org.apache.pdfbox.pdfwriter.COSWriter.getStandardOutput : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getStandardOutput : return $r1
org.apache.pdfbox.pdfwriter.COSWriter.getStandardOutput : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : virtualinvoke r1.<org.apache.pdfbox.cos.COSFloat: void writePDF(java.io.OutputStream)>($r2)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : virtualinvoke r1.<org.apache.pdfbox.cos.COSFloat: void writePDF(java.io.OutputStream)>($r2) >>>>>>>> org.apache.pdfbox.cos.COSFloat.writePDF : $r2 = r0.<org.apache.pdfbox.cos.COSFloat: java.lang.String valueAsString>
org.apache.pdfbox.cos.COSFloat.writePDF : $r2 = r0.<org.apache.pdfbox.cos.COSFloat: java.lang.String valueAsString> >>>>>>>> org.apache.pdfbox.cos.COSFloat.writePDF : $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1")
org.apache.pdfbox.cos.COSFloat.writePDF : $r3 = virtualinvoke $r2.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1") >>>>>>>> org.apache.pdfbox.cos.COSFloat.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3)
org.apache.pdfbox.cos.COSFloat.writePDF : virtualinvoke r1.<java.io.OutputStream: void write(byte[])>($r3) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setOnNewLine(boolean)>(0)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setOnNewLine(boolean)>(0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.setOnNewLine : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean onNewLine> = z0
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.setOnNewLine : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean onNewLine> = z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.OutputStream out>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $r2 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.OutputStream out> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l3 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l3 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l2 = (long) i1
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l2 = (long) i1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l4 = $l3 + $l2
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l4 = $l3 + $l2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> = $l4
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> = $l4 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromFloat : return null >>>>>>>> org.apache.pdfbox.cos.COSFloat.accept : return $r2
org.apache.pdfbox.cos.COSFloat.accept : return $r2 >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r4 = r0.<org.apache.pdfbox.cos.TestCOSFloat$AcceptTester: org.apache.pdfbox.cos.TestCOSFloat this$0>
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r4 = r0.<org.apache.pdfbox.cos.TestCOSFloat$AcceptTester: org.apache.pdfbox.cos.TestCOSFloat this$0> >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $f1 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSFloat: float floatValue()>()
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $f1 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSFloat: float floatValue()>() >>>>>>>> org.apache.pdfbox.cos.COSFloat.floatValue : $r1 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value>
org.apache.pdfbox.cos.COSFloat.floatValue : $r1 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value> >>>>>>>> org.apache.pdfbox.cos.COSFloat.floatValue : $f0 = virtualinvoke $r1.<java.math.BigDecimal: float floatValue()>()
org.apache.pdfbox.cos.COSFloat.floatValue : $f0 = virtualinvoke $r1.<java.math.BigDecimal: float floatValue()>() >>>>>>>> org.apache.pdfbox.cos.COSFloat.floatValue : return $f0
org.apache.pdfbox.cos.COSFloat.floatValue : return $f0 >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r5 = staticinvoke <org.apache.pdfbox.cos.TestCOSFloat: java.lang.String access$000(org.apache.pdfbox.cos.TestCOSFloat,float)>($r4, $f1)
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r5 = staticinvoke <org.apache.pdfbox.cos.TestCOSFloat: java.lang.String access$000(org.apache.pdfbox.cos.TestCOSFloat,float)>($r4, $f1) >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r6 = r0.<org.apache.pdfbox.cos.TestCOSFloat$AcceptTester: java.io.ByteArrayOutputStream outStream>
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r6 = r0.<org.apache.pdfbox.cos.TestCOSFloat$AcceptTester: java.io.ByteArrayOutputStream outStream> >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r7 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>("ISO-8859-1")
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r7 = virtualinvoke $r6.<java.io.ByteArrayOutputStream: java.lang.String toString(java.lang.String)>("ISO-8859-1") >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.String)>($r5, $r7)
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : staticinvoke <junit.framework.TestCase: void assertEquals(java.lang.String,java.lang.String)>($r5, $r7) >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r9 = r0.<org.apache.pdfbox.cos.TestCOSFloat$AcceptTester: org.apache.pdfbox.cos.TestCOSFloat this$0>
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r9 = r0.<org.apache.pdfbox.cos.TestCOSFloat$AcceptTester: org.apache.pdfbox.cos.TestCOSFloat this$0> >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r8 = r0.<org.apache.pdfbox.cos.TestCOSFloat$AcceptTester: org.apache.pdfbox.cos.TestCOSFloat this$0>
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r8 = r0.<org.apache.pdfbox.cos.TestCOSFloat$AcceptTester: org.apache.pdfbox.cos.TestCOSFloat this$0> >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r10 = staticinvoke <org.apache.pdfbox.cos.TestCOSFloat: java.lang.String access$000(org.apache.pdfbox.cos.TestCOSFloat,float)>($r8, f0)
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r10 = staticinvoke <org.apache.pdfbox.cos.TestCOSFloat: java.lang.String access$000(org.apache.pdfbox.cos.TestCOSFloat,float)>($r8, f0) >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r11 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1")
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r11 = virtualinvoke $r10.<java.lang.String: byte[] getBytes(java.lang.String)>("ISO-8859-1") >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r12 = r0.<org.apache.pdfbox.cos.TestCOSFloat$AcceptTester: java.io.ByteArrayOutputStream outStream>
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r12 = r0.<org.apache.pdfbox.cos.TestCOSFloat$AcceptTester: java.io.ByteArrayOutputStream outStream> >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r13 = virtualinvoke $r12.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r13 = virtualinvoke $r12.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : virtualinvoke $r9.<org.apache.pdfbox.cos.TestCOSFloat: void testByteArrays(byte[],byte[])>($r11, $r13)
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : virtualinvoke $r9.<org.apache.pdfbox.cos.TestCOSFloat: void testByteArrays(byte[],byte[])>($r11, $r13) >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r14 = r0.<org.apache.pdfbox.cos.TestCOSFloat$AcceptTester: java.io.ByteArrayOutputStream outStream>
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : $r14 = r0.<org.apache.pdfbox.cos.TestCOSFloat$AcceptTester: java.io.ByteArrayOutputStream outStream> >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : virtualinvoke $r14.<java.io.ByteArrayOutputStream: void reset()>()
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : virtualinvoke $r14.<java.io.ByteArrayOutputStream: void reset()>() >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : goto [?= return]
org.apache.pdfbox.cos.TestCOSFloat$AcceptTester.runTest : goto [?= return] >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : goto [?= $i2 = r0.<org.apache.pdfbox.cos.TestCOSFloat$BaseTester: int step>]
org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : goto [?= $i2 = r0.<org.apache.pdfbox.cos.TestCOSFloat$BaseTester: int step>] >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : $i2 = r0.<org.apache.pdfbox.cos.TestCOSFloat$BaseTester: int step>
org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : $i2 = r0.<org.apache.pdfbox.cos.TestCOSFloat$BaseTester: int step> >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : i3 = i3 + $i2
org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : i3 = i3 + $i2 >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : goto [?= $i1 = r0.<org.apache.pdfbox.cos.TestCOSFloat$BaseTester: int high>]
org.apache.pdfbox.cos.TestCOSFloat$BaseTester.loop : goto [?= $i1 = r0.<org.apache.pdfbox.cos.TestCOSFloat$BaseTester: int high>] >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$BaseTester.runTests : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
org.apache.pdfbox.cos.TestCOSFloat$BaseTester.runTests : $l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> org.apache.pdfbox.cos.TestCOSFloat$BaseTester.runTests : specialinvoke r0.<org.apache.pdfbox.cos.TestCOSFloat$BaseTester: void loop(long)>($l0)
