org.apache.pdfbox.cos.COSInteger.get : $b2 = -100L cmp l0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : if $b2 > 0
org.apache.pdfbox.cos.COSInteger.get : if $b2 > 0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $b3 = l0 cmp 256L
org.apache.pdfbox.cos.COSInteger.get : $b3 = l0 cmp 256L >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : if $b3 > 0
org.apache.pdfbox.cos.COSInteger.get : if $b3 > 0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $i4 = (int) l0
org.apache.pdfbox.cos.COSInteger.get : $i4 = (int) l0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : i1 = $i4 - -100
org.apache.pdfbox.cos.COSInteger.get : i1 = $i4 - -100 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r1 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC>
org.apache.pdfbox.cos.COSInteger.get : $r1 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC> >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r2 = $r1[i1]
org.apache.pdfbox.cos.COSInteger.get : $r2 = $r1[i1] >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : if $r2 != null
org.apache.pdfbox.cos.COSInteger.get : if $r2 != null >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r3 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC>
org.apache.pdfbox.cos.COSInteger.get : $r3 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC> >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r4 = $r3[i1]
org.apache.pdfbox.cos.COSInteger.get : $r4 = $r3[i1] >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : return $r4
org.apache.pdfbox.cos.COSInteger.get : return $r4 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : if r1 != null
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : if r1 != null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r6 = new org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r6 = new org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : specialinvoke $r6.<org.apache.pdfbox.cos.COSArray: void <init>()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : specialinvoke $r6.<org.apache.pdfbox.cos.COSArray: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r7 = new java.util.ArrayList
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r7 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r8 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r8 = interfaceinvoke r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r8)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : specialinvoke $r7.<java.util.ArrayList: void <init>(java.util.Collection)>($r8) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : staticinvoke <java.util.Collections: void sort(java.util.List)>($r7)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : staticinvoke <java.util.Collections: void sort(java.util.List)>($r7) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : r4 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : r4 = interfaceinvoke $r7.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : if $z0 == 0
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r11 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : r5 = (java.lang.String) $r11
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : r5 = (java.lang.String) $r11 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r12 = new org.apache.pdfbox.cos.COSString
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r12 = new org.apache.pdfbox.cos.COSString >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : specialinvoke $r12.<org.apache.pdfbox.cos.COSString: void <init>(java.lang.String)>(r5)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : specialinvoke $r12.<org.apache.pdfbox.cos.COSString: void <init>(java.lang.String)>(r5) >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.containsChar : $r0 = <org.apache.pdfbox.cos.PDFDocEncoding: java.util.Map UNI_TO_CODE>
org.apache.pdfbox.cos.PDFDocEncoding.containsChar : $r0 = <org.apache.pdfbox.cos.PDFDocEncoding: java.util.Map UNI_TO_CODE> >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.containsChar : $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0)
org.apache.pdfbox.cos.PDFDocEncoding.containsChar : $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0) >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.containsChar : $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1)
org.apache.pdfbox.cos.PDFDocEncoding.containsChar : $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1) >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.containsChar : return $z0
org.apache.pdfbox.cos.PDFDocEncoding.containsChar : return $z0 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r4 = new java.io.ByteArrayOutputStream
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r4 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : r2 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : r2 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>() >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : i0 = lengthof r2
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : i0 = lengthof r2 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : i3 = 0
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : i3 = 0 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : if i3 >= i0
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : if i3 >= i0 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : c1 = r2[i3]
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : c1 = r2[i3] >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r6 = <org.apache.pdfbox.cos.PDFDocEncoding: java.util.Map UNI_TO_CODE>
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r6 = <org.apache.pdfbox.cos.PDFDocEncoding: java.util.Map UNI_TO_CODE> >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1)
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1) >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7)
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7) >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : r3 = (java.lang.Integer) $r8
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : r3 = (java.lang.Integer) $r8 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : if r3 != null
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : if r3 != null >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $i2 = virtualinvoke r3.<java.lang.Integer: int intValue()>()
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $i2 = virtualinvoke r3.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>($i2)
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>($i2) >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : i3 = i3 + 1
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : i3 = i3 + 1 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : goto [?= (branch)]
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r5 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r5 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : return $r5
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : return $r5 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : virtualinvoke $r6.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r12)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : virtualinvoke $r6.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r12) >>>>>>>> org.apache.pdfbox.cos.COSArray.add : $r2 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.add : $r2 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.add : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSArray.add : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r13 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r13 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r14 = (org.apache.pdfbox.pdmodel.common.COSObjectable) $r13
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r14 = (org.apache.pdfbox.pdmodel.common.COSObjectable) $r13 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : virtualinvoke $r6.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.pdmodel.common.COSObjectable)>($r14)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : virtualinvoke $r6.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.pdmodel.common.COSObjectable)>($r14) >>>>>>>> org.apache.pdfbox.cos.COSArray.add : $r3 = interfaceinvoke r1.<org.apache.pdfbox.pdmodel.common.COSObjectable: org.apache.pdfbox.cos.COSBase getCOSObject()>()
org.apache.pdfbox.cos.COSArray.add : $r3 = interfaceinvoke r1.<org.apache.pdfbox.pdmodel.common.COSObjectable: org.apache.pdfbox.cos.COSBase getCOSObject()>() >>>>>>>> org.apache.pdfbox.cos.COSBase.getCOSObject : return r0
org.apache.pdfbox.cos.COSBase.getCOSObject : return r0 >>>>>>>> org.apache.pdfbox.cos.COSArray.add : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3)
org.apache.pdfbox.cos.COSArray.add : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r10 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r10 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName NAMES>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName NAMES> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : virtualinvoke $r10.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r9, $r6)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : virtualinvoke $r10.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r9, $r6) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : if r2 != null
org.apache.pdfbox.cos.COSDictionary.setItem : if r2 != null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
org.apache.pdfbox.cos.COSDictionary.setItem : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if r1 == null
org.apache.pdfbox.util.SmallMap.put : if r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if r2 != null
org.apache.pdfbox.util.SmallMap.put : if r2 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if $r5 != null
org.apache.pdfbox.util.SmallMap.put : if $r5 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10 = newarray (java.lang.Object)[2]
org.apache.pdfbox.util.SmallMap.put : $r10 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10[0] = r1
org.apache.pdfbox.util.SmallMap.put : $r10[0] = r1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10[1] = r2
org.apache.pdfbox.util.SmallMap.put : $r10[1] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r10
org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r10 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : return null
org.apache.pdfbox.util.SmallMap.put : return null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void calculateLimits()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setNames : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void calculateLimits()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: boolean isRootNode()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: boolean isRootNode()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.isRootNode : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.pdmodel.common.PDNameTreeNode parent>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.isRootNode : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.pdmodel.common.PDNameTreeNode parent> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.isRootNode : if $r1 != null
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.isRootNode : if $r1 != null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.isRootNode : $z0 = 1
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.isRootNode : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.isRootNode : goto [?= return $z0]
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.isRootNode : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.isRootNode : return $z0
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.isRootNode : return $z0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : if $z0 == 0
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $r10 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $r10 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LIMITS>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LIMITS> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : virtualinvoke $r10.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r9, null)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : virtualinvoke $r10.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r9, null) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>(r1)
org.apache.pdfbox.cos.COSDictionary.setItem : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void removeItem(org.apache.pdfbox.cos.COSName)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.removeItem : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.removeItem : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.removeItem : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.removeItem : interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.remove : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.remove : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null
org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.isEmpty : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $i0 != 0
org.apache.pdfbox.util.SmallMap.isEmpty : if $i0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 0
org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : return $z0
org.apache.pdfbox.util.SmallMap.isEmpty : return $z0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0
org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if r1 != null
org.apache.pdfbox.util.SmallMap.findKey : if r1 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : i1 = 0
org.apache.pdfbox.util.SmallMap.findKey : i1 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findKey : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.findKey : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if i1 >= $i0
org.apache.pdfbox.util.SmallMap.findKey : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findKey : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r4 = $r3[i1]
org.apache.pdfbox.util.SmallMap.findKey : $r4 = $r3[i1] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4)
org.apache.pdfbox.util.SmallMap.findKey : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSName.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSName.equals : if $z0 == 0
org.apache.pdfbox.cos.COSName.equals : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r4 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.equals : $r4 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r2 = (org.apache.pdfbox.cos.COSName) r1
org.apache.pdfbox.cos.COSName.equals : $r2 = (org.apache.pdfbox.cos.COSName) r1 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r3 = $r2.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.equals : $r3 = $r2.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3)
org.apache.pdfbox.cos.COSName.equals : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : if $z1 == 0
org.apache.pdfbox.cos.COSName.equals : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z2 = 0
org.apache.pdfbox.cos.COSName.equals : $z2 = 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : return $z2
org.apache.pdfbox.cos.COSName.equals : return $z2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z1 == 0
org.apache.pdfbox.util.SmallMap.findKey : if $z1 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : i1 = i1 + 2
org.apache.pdfbox.util.SmallMap.findKey : i1 = i1 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.findKey : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : return -1
org.apache.pdfbox.util.SmallMap.findKey : return -1 >>>>>>>> org.apache.pdfbox.util.SmallMap.remove : if i0 >= 0
org.apache.pdfbox.util.SmallMap.remove : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.remove : return null
org.apache.pdfbox.util.SmallMap.remove : return null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : goto [?= return]
org.apache.pdfbox.cos.COSDictionary.setItem : goto [?= return] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : goto [?= return]
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : goto [?= return] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : r11 = null
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : r11 = null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $r4 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $r4 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r3)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 1
org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : goto [?= return $z0]
org.apache.pdfbox.util.SmallMap.isEmpty : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.util.SmallMap.get : if i0 >= 0
org.apache.pdfbox.util.SmallMap.get : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r3 = null
org.apache.pdfbox.util.SmallMap.get : $r3 = null >>>>>>>> org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3]
org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3] >>>>>>>> org.apache.pdfbox.util.SmallMap.get : return $r3
org.apache.pdfbox.util.SmallMap.get : return $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : r1 = (org.apache.pdfbox.cos.COSArray) $r5
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : r1 = (org.apache.pdfbox.cos.COSArray) $r5 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : if r1 == null
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : return r11
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : return r11 >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.add : $r2 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: org.apache.pdfbox.cos.COSDictionary parentDict>
org.apache.pdfbox.pdmodel.common.COSArrayList.add : $r2 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: org.apache.pdfbox.cos.COSDictionary parentDict> >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.add : if $r2 == null
org.apache.pdfbox.pdmodel.common.COSArrayList.add : if $r2 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.add : $z0 = r1 instanceof java.lang.String
org.apache.pdfbox.pdmodel.common.COSArrayList.add : $z0 = r1 instanceof java.lang.String >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.add : if $z0 == 0
org.apache.pdfbox.pdmodel.common.COSArrayList.add : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.add : $r3 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: org.apache.pdfbox.cos.COSArray array>
org.apache.pdfbox.pdmodel.common.COSArrayList.add : $r3 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: org.apache.pdfbox.cos.COSArray array> >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.add : if $r3 == null
org.apache.pdfbox.pdmodel.common.COSArrayList.add : if $r3 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.add : $r5 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: org.apache.pdfbox.cos.COSArray array>
org.apache.pdfbox.pdmodel.common.COSArrayList.add : $r5 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: org.apache.pdfbox.cos.COSArray array> >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.add : $r4 = (org.apache.pdfbox.pdmodel.common.COSObjectable) r1
org.apache.pdfbox.pdmodel.common.COSArrayList.add : $r4 = (org.apache.pdfbox.pdmodel.common.COSObjectable) r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.add : $r6 = interfaceinvoke $r4.<org.apache.pdfbox.pdmodel.common.COSObjectable: org.apache.pdfbox.cos.COSBase getCOSObject()>()
org.apache.pdfbox.pdmodel.common.COSArrayList.add : $r6 = interfaceinvoke $r4.<org.apache.pdfbox.pdmodel.common.COSObjectable: org.apache.pdfbox.cos.COSBase getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getCOSObject : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary getCOSObject()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getCOSObject : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getCOSObject : return $r1
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getCOSObject : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.add : virtualinvoke $r5.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r6)
org.apache.pdfbox.pdmodel.common.COSArrayList.add : virtualinvoke $r5.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r6) >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.add : $r13 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: java.util.List actual>
org.apache.pdfbox.pdmodel.common.COSArrayList.add : $r13 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: java.util.List actual> >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.add : $z1 = interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.common.COSArrayList.add : $z1 = interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.add : return $z1
org.apache.pdfbox.pdmodel.common.COSArrayList.add : return $z1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : if r1 == null
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $i0 = interfaceinvoke r1.<java.util.List: int size()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $i0 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.size : $r1 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: java.util.List actual>
org.apache.pdfbox.pdmodel.common.COSArrayList.size : $r1 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: java.util.List actual> >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.size : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.apache.pdfbox.pdmodel.common.COSArrayList.size : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.size : return $i0
org.apache.pdfbox.pdmodel.common.COSArrayList.size : return $i0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : if $i0 <= 0
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : if $i0 <= 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : r2 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.iterator : $r1 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: java.util.List actual>
org.apache.pdfbox.pdmodel.common.COSArrayList.iterator : $r1 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: java.util.List actual> >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.iterator : $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.pdmodel.common.COSArrayList.iterator : $r2 = interfaceinvoke $r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.iterator : return $r2
org.apache.pdfbox.pdmodel.common.COSArrayList.iterator : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : if $z0 == 0
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $r13 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : r3 = (org.apache.pdfbox.pdmodel.common.PDNameTreeNode) $r13
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : r3 = (org.apache.pdfbox.pdmodel.common.PDNameTreeNode) $r13 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : virtualinvoke r3.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void setParent(org.apache.pdfbox.pdmodel.common.PDNameTreeNode)>(r0)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : virtualinvoke r3.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void setParent(org.apache.pdfbox.pdmodel.common.PDNameTreeNode)>(r0) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setParent : r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.pdmodel.common.PDNameTreeNode parent> = r1
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setParent : r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.pdmodel.common.PDNameTreeNode parent> = r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setParent : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void calculateLimits()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setParent : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void calculateLimits()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.isRootNode : $z0 = 0
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.isRootNode : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: java.util.List getKids()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: java.util.List getKids()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : if r1 == null
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r19 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: java.util.Map getNames()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r19 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: java.util.Map getNames()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $r6 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $r6 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName NAMES>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $r5 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName NAMES> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $r7 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $r7 = virtualinvoke $r6.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r5) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z2 = 1
org.apache.pdfbox.cos.COSName.equals : $z2 = 1 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : goto [?= return $z2]
org.apache.pdfbox.cos.COSName.equals : goto [?= return $z2] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : return i1
org.apache.pdfbox.util.SmallMap.findKey : return i1 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.get : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $i1 = i0 + 1
org.apache.pdfbox.util.SmallMap.get : $i1 = i0 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r3 = $r2[$i1]
org.apache.pdfbox.util.SmallMap.get : $r3 = $r2[$i1] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : r1 = (org.apache.pdfbox.cos.COSArray) $r7
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : r1 = (org.apache.pdfbox.cos.COSArray) $r7 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : if r1 == null
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $r8 = new java.util.LinkedHashMap
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $r8 = new java.util.LinkedHashMap >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : specialinvoke $r8.<java.util.LinkedHashMap: void <init>()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : specialinvoke $r8.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : i2 = 0
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : i2 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $i0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $i0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.size : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.size : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.size : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.apache.pdfbox.cos.COSArray.size : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.size : return $i0
org.apache.pdfbox.cos.COSArray.size : return $i0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : if i2 >= $i0
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : if i2 >= $i0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $r10 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(i2)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $r10 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(i2) >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.getObject : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0)
org.apache.pdfbox.cos.COSArray.getObject : r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $z0 = r4 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSArray.getObject : $z0 = r4 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : if $z0 == 0
org.apache.pdfbox.cos.COSArray.getObject : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $z1 = r4 instanceof org.apache.pdfbox.cos.COSNull
org.apache.pdfbox.cos.COSArray.getObject : $z1 = r4 instanceof org.apache.pdfbox.cos.COSNull >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : if $z1 == 0
org.apache.pdfbox.cos.COSArray.getObject : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $r2 = (org.apache.pdfbox.cos.COSBase) r4
org.apache.pdfbox.cos.COSArray.getObject : $r2 = (org.apache.pdfbox.cos.COSBase) r4 >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : return $r2
org.apache.pdfbox.cos.COSArray.getObject : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : r3 = (org.apache.pdfbox.cos.COSString) $r10
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : r3 = (org.apache.pdfbox.cos.COSString) $r10 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $i1 = i2 + 1
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $i1 = i2 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : r4 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>($i1)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : r4 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>($i1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $r11 = virtualinvoke r3.<org.apache.pdfbox.cos.COSString: java.lang.String getString()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $r11 = virtualinvoke r3.<org.apache.pdfbox.cos.COSString: java.lang.String getString()>() >>>>>>>> org.apache.pdfbox.cos.COSString.getString : $r1 = r0.<org.apache.pdfbox.cos.COSString: byte[] bytes>
org.apache.pdfbox.cos.COSString.getString : $r1 = r0.<org.apache.pdfbox.cos.COSString: byte[] bytes> >>>>>>>> org.apache.pdfbox.cos.COSString.getString : $i0 = lengthof $r1
org.apache.pdfbox.cos.COSString.getString : $i0 = lengthof $r1 >>>>>>>> org.apache.pdfbox.cos.COSString.getString : if $i0 <= 2
org.apache.pdfbox.cos.COSString.getString : if $i0 <= 2 >>>>>>>> org.apache.pdfbox.cos.COSString.getString : $r2 = r0.<org.apache.pdfbox.cos.COSString: byte[] bytes>
org.apache.pdfbox.cos.COSString.getString : $r2 = r0.<org.apache.pdfbox.cos.COSString: byte[] bytes> >>>>>>>> org.apache.pdfbox.cos.COSString.getString : $b1 = $r2[0]
org.apache.pdfbox.cos.COSString.getString : $b1 = $r2[0] >>>>>>>> org.apache.pdfbox.cos.COSString.getString : $s2 = $b1 & 255
org.apache.pdfbox.cos.COSString.getString : $s2 = $b1 & 255 >>>>>>>> org.apache.pdfbox.cos.COSString.getString : if $s2 != 254
org.apache.pdfbox.cos.COSString.getString : if $s2 != 254 >>>>>>>> org.apache.pdfbox.cos.COSString.getString : $r3 = r0.<org.apache.pdfbox.cos.COSString: byte[] bytes>
org.apache.pdfbox.cos.COSString.getString : $r3 = r0.<org.apache.pdfbox.cos.COSString: byte[] bytes> >>>>>>>> org.apache.pdfbox.cos.COSString.getString : $b3 = $r3[0]
org.apache.pdfbox.cos.COSString.getString : $b3 = $r3[0] >>>>>>>> org.apache.pdfbox.cos.COSString.getString : $s4 = $b3 & 255
org.apache.pdfbox.cos.COSString.getString : $s4 = $b3 & 255 >>>>>>>> org.apache.pdfbox.cos.COSString.getString : if $s4 != 255
org.apache.pdfbox.cos.COSString.getString : if $s4 != 255 >>>>>>>> org.apache.pdfbox.cos.COSString.getString : $r14 = r0.<org.apache.pdfbox.cos.COSString: byte[] bytes>
org.apache.pdfbox.cos.COSString.getString : $r14 = r0.<org.apache.pdfbox.cos.COSString: byte[] bytes> >>>>>>>> org.apache.pdfbox.cos.COSString.getString : $r15 = staticinvoke <org.apache.pdfbox.cos.PDFDocEncoding: java.lang.String toString(byte[])>($r14)
org.apache.pdfbox.cos.COSString.getString : $r15 = staticinvoke <org.apache.pdfbox.cos.PDFDocEncoding: java.lang.String toString(byte[])>($r14) >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : $r3 = new java.lang.StringBuilder
org.apache.pdfbox.cos.PDFDocEncoding.toString : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.cos.PDFDocEncoding.toString : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : i0 = lengthof r0
org.apache.pdfbox.cos.PDFDocEncoding.toString : i0 = lengthof r0 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : i7 = 0
org.apache.pdfbox.cos.PDFDocEncoding.toString : i7 = 0 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : if i7 >= i0
org.apache.pdfbox.cos.PDFDocEncoding.toString : if i7 >= i0 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : b1 = r0[i7]
org.apache.pdfbox.cos.PDFDocEncoding.toString : b1 = r0[i7] >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : $s3 = b1 & 255
org.apache.pdfbox.cos.PDFDocEncoding.toString : $s3 = b1 & 255 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : $r5 = <org.apache.pdfbox.cos.PDFDocEncoding: int[] CODE_TO_UNI>
org.apache.pdfbox.cos.PDFDocEncoding.toString : $r5 = <org.apache.pdfbox.cos.PDFDocEncoding: int[] CODE_TO_UNI> >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : $i2 = lengthof $r5
org.apache.pdfbox.cos.PDFDocEncoding.toString : $i2 = lengthof $r5 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : if $s3 < $i2
org.apache.pdfbox.cos.PDFDocEncoding.toString : if $s3 < $i2 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : $r6 = <org.apache.pdfbox.cos.PDFDocEncoding: int[] CODE_TO_UNI>
org.apache.pdfbox.cos.PDFDocEncoding.toString : $r6 = <org.apache.pdfbox.cos.PDFDocEncoding: int[] CODE_TO_UNI> >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : $s4 = b1 & 255
org.apache.pdfbox.cos.PDFDocEncoding.toString : $s4 = b1 & 255 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : $i5 = $r6[$s4]
org.apache.pdfbox.cos.PDFDocEncoding.toString : $i5 = $r6[$s4] >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : $c6 = (char) $i5
org.apache.pdfbox.cos.PDFDocEncoding.toString : $c6 = (char) $i5 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6)
org.apache.pdfbox.cos.PDFDocEncoding.toString : virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6) >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : i7 = i7 + 1
org.apache.pdfbox.cos.PDFDocEncoding.toString : i7 = i7 + 1 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : goto [?= (branch)]
org.apache.pdfbox.cos.PDFDocEncoding.toString : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.cos.PDFDocEncoding.toString : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.toString : return $r4
org.apache.pdfbox.cos.PDFDocEncoding.toString : return $r4 >>>>>>>> org.apache.pdfbox.cos.COSString.getString : return $r15
org.apache.pdfbox.cos.COSString.getString : return $r15 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.pdmodel.common.COSObjectable convertCOSToPD(org.apache.pdfbox.cos.COSBase)>(r4)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $r12 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.pdmodel.common.COSObjectable convertCOSToPD(org.apache.pdfbox.cos.COSBase)>(r4) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode.convertCOSToPD : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode: org.apache.pdfbox.cos.COSInteger convertCOSToPD(org.apache.pdfbox.cos.COSBase)>(r1)
org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode.convertCOSToPD : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode: org.apache.pdfbox.cos.COSInteger convertCOSToPD(org.apache.pdfbox.cos.COSBase)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode.convertCOSToPD : $r2 = (org.apache.pdfbox.cos.COSInteger) r1
org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode.convertCOSToPD : $r2 = (org.apache.pdfbox.cos.COSInteger) r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode.convertCOSToPD : return $r2
org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode.convertCOSToPD : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r11, $r12) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : i2 = i2 + 2
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : i2 = i2 + 2 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : goto [?= $i0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: int size()>()]
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : goto [?= $i0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: int size()>()] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.finalize : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : if $r2 == null
org.apache.pdfbox.io.ScratchFileBuffer.finalize : if $r2 == null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : $r3 = <org.apache.pdfbox.io.ScratchFileBuffer: org.apache.commons.logging.Log LOG>
org.apache.pdfbox.io.ScratchFileBuffer.finalize : $r3 = <org.apache.pdfbox.io.ScratchFileBuffer: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>()
org.apache.pdfbox.io.ScratchFileBuffer.finalize : $z0 = interfaceinvoke $r3.<org.apache.commons.logging.Log: boolean isDebugEnabled()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : if $z0 == 0
org.apache.pdfbox.io.ScratchFileBuffer.finalize : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void close()>()
org.apache.pdfbox.io.ScratchFileBuffer.finalize : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void close()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.close : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : if $r1 == null
org.apache.pdfbox.io.ScratchFileBuffer.close : if $r1 == null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : $r3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.close : $r3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.close : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.close : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : virtualinvoke $r3.<org.apache.pdfbox.io.ScratchFile: void markPagesAsFree(int[],int,int)>($r2, 0, $i0)
org.apache.pdfbox.io.ScratchFileBuffer.close : virtualinvoke $r3.<org.apache.pdfbox.io.ScratchFile: void markPagesAsFree(int[],int,int)>($r2, 0, $i0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : entermonitor $r4
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : entermonitor $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i5 = i0
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i5 = i0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i5 >= i1
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i5 >= i1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i2 = r1[i5]
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i2 = r1[i5] >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 < 0
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $i3 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $i3 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 >= $i3
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 >= $i3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $z0 = virtualinvoke $r5.<java.util.BitSet: boolean get(int)>(i2)
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $z0 = virtualinvoke $r5.<java.util.BitSet: boolean get(int)>(i2) >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if $z0 != 0
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if $z0 != 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : virtualinvoke $r6.<java.util.BitSet: void set(int)>(i2)
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : virtualinvoke $r6.<java.util.BitSet: void set(int)>(i2) >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $i4 = r0.<org.apache.pdfbox.io.ScratchFile: int inMemoryMaxPageCount>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $i4 = r0.<org.apache.pdfbox.io.ScratchFile: int inMemoryMaxPageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 >= $i4
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 >= $i4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: byte[][] inMemoryPages>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: byte[][] inMemoryPages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r7[i2] = null
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r7[i2] = null >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i5 = i5 + 1
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i5 = i5 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : goto [?= (branch)]
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : exitmonitor $r4
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : exitmonitor $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : goto [?= return]
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : goto [?= return] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> = null
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> = null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> = null
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> = null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = null
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = 0L
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = 0L >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = -1
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = -1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> = 0L
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> = 0L >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : specialinvoke r0.<java.lang.Object: void finalize()>()
org.apache.pdfbox.io.ScratchFileBuffer.finalize : specialinvoke r0.<java.lang.Object: void finalize()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : goto [?= return]
org.apache.pdfbox.io.ScratchFileBuffer.finalize : goto [?= return] >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed>
org.apache.pdfbox.cos.COSDocument.finalize : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : if $z0 != 0
org.apache.pdfbox.cos.COSDocument.finalize : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $r9 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r8)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : $r9 = staticinvoke <java.util.Collections: java.util.Map unmodifiableMap(java.util.Map)>($r8) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : return $r9
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getNames : return $r9 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : if r19 == null
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : if r19 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $i0 = interfaceinvoke r19.<java.util.Map: int size()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $i0 = interfaceinvoke r19.<java.util.Map: int size()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : if $i0 <= 0
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : if $i0 <= 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r20 = interfaceinvoke r19.<java.util.Map: java.util.Set keySet()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r20 = interfaceinvoke r19.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $i1 = interfaceinvoke r20.<java.util.Set: int size()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $i1 = interfaceinvoke r20.<java.util.Set: int size()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $r5 = newarray (java.lang.String)[$i1]
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $r5 = newarray (java.lang.String)[$i1] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $r6 = interfaceinvoke r20.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r5)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $r6 = interfaceinvoke r20.<java.util.Set: java.lang.Object[] toArray(java.lang.Object[])>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r21 = (java.lang.String[]) $r6
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r21 = (java.lang.String[]) $r6 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r22 = r21[0]
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r22 = r21[0] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void setLowerLimit(java.lang.String)>(r22)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void setLowerLimit(java.lang.String)>(r22) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : $r3 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : $r3 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LIMITS>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LIMITS> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : r8 = (org.apache.pdfbox.cos.COSArray) $r4
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : r8 = (org.apache.pdfbox.cos.COSArray) $r4 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : if r8 != null
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : if r8 != null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : $r5 = new org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : $r5 = new org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : specialinvoke $r5.<org.apache.pdfbox.cos.COSArray: void <init>()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : specialinvoke $r5.<org.apache.pdfbox.cos.COSArray: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : r8 = $r5
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : r8 = $r5 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : virtualinvoke $r5.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>(null)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : virtualinvoke $r5.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>(null) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : $r7 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : $r7 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LIMITS>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : $r6 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LIMITS> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : virtualinvoke $r7.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r6, $r5)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : virtualinvoke $r7.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r6, $r5) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.put : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if i0 >= 0
org.apache.pdfbox.util.SmallMap.put : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r8 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r8 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : i5 = lengthof $r8
org.apache.pdfbox.util.SmallMap.put : i5 = lengthof $r8 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i3 = i5 + 2
org.apache.pdfbox.util.SmallMap.put : $i3 = i5 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3 = newarray (java.lang.Object)[$i3]
org.apache.pdfbox.util.SmallMap.put : r3 = newarray (java.lang.Object)[$i3] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r9 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r9 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r3, 0, i5)
org.apache.pdfbox.util.SmallMap.put : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r3, 0, i5) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3[i5] = r1
org.apache.pdfbox.util.SmallMap.put : r3[i5] = r1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i4 = i5 + 1
org.apache.pdfbox.util.SmallMap.put : $i4 = i5 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3[$i4] = r2
org.apache.pdfbox.util.SmallMap.put : r3[$i4] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = r3
org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = r3 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : virtualinvoke r8.<org.apache.pdfbox.cos.COSArray: void setString(int,java.lang.String)>(0, r1)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setLowerLimit : virtualinvoke r8.<org.apache.pdfbox.cos.COSArray: void setString(int,java.lang.String)>(0, r1) >>>>>>>> org.apache.pdfbox.cos.COSArray.setString : if r1 == null
org.apache.pdfbox.cos.COSArray.setString : if r1 == null >>>>>>>> org.apache.pdfbox.cos.COSArray.setString : $r2 = new org.apache.pdfbox.cos.COSString
org.apache.pdfbox.cos.COSArray.setString : $r2 = new org.apache.pdfbox.cos.COSString >>>>>>>> org.apache.pdfbox.cos.COSArray.setString : specialinvoke $r2.<org.apache.pdfbox.cos.COSString: void <init>(java.lang.String)>(r1)
org.apache.pdfbox.cos.COSArray.setString : specialinvoke $r2.<org.apache.pdfbox.cos.COSString: void <init>(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSArray.setString : virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: void set(int,org.apache.pdfbox.cos.COSBase)>(i0, $r2)
org.apache.pdfbox.cos.COSArray.setString : virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: void set(int,org.apache.pdfbox.cos.COSBase)>(i0, $r2) >>>>>>>> org.apache.pdfbox.cos.COSArray.set : $r2 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.set : $r2 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.set : interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1)
org.apache.pdfbox.cos.COSArray.set : interfaceinvoke $r2.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1) >>>>>>>> org.apache.pdfbox.cos.COSArray.setString : goto [?= return]
org.apache.pdfbox.cos.COSArray.setString : goto [?= return] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $i2 = lengthof r21
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $i2 = lengthof r21 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $i3 = $i2 - 1
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $i3 = $i2 - 1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r2 = r21[$i3]
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r2 = r21[$i3] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void setUpperLimit(java.lang.String)>(r2)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void setUpperLimit(java.lang.String)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setUpperLimit : $r3 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setUpperLimit : $r3 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setUpperLimit : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LIMITS>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setUpperLimit : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LIMITS> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setUpperLimit : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setUpperLimit : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setUpperLimit : r8 = (org.apache.pdfbox.cos.COSArray) $r4
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setUpperLimit : r8 = (org.apache.pdfbox.cos.COSArray) $r4 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setUpperLimit : if r8 != null
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setUpperLimit : if r8 != null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setUpperLimit : virtualinvoke r8.<org.apache.pdfbox.cos.COSArray: void setString(int,java.lang.String)>(1, r1)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setUpperLimit : virtualinvoke r8.<org.apache.pdfbox.cos.COSArray: void setString(int,java.lang.String)>(1, r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : goto [?= (branch)]
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $r8 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $r8 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $r9 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName KIDS> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $r10 = staticinvoke <org.apache.pdfbox.pdmodel.common.COSArrayList: org.apache.pdfbox.cos.COSArray converterToCOSArray(java.util.List)>(r1)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $r10 = staticinvoke <org.apache.pdfbox.pdmodel.common.COSArrayList: org.apache.pdfbox.cos.COSArray converterToCOSArray(java.util.List)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.converterToCOSArray : r22 = null
org.apache.pdfbox.pdmodel.common.COSArrayList.converterToCOSArray : r22 = null >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.converterToCOSArray : if r0 == null
org.apache.pdfbox.pdmodel.common.COSArrayList.converterToCOSArray : if r0 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.converterToCOSArray : $z0 = r0 instanceof org.apache.pdfbox.pdmodel.common.COSArrayList
org.apache.pdfbox.pdmodel.common.COSArrayList.converterToCOSArray : $z0 = r0 instanceof org.apache.pdfbox.pdmodel.common.COSArrayList >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.converterToCOSArray : if $z0 == 0
org.apache.pdfbox.pdmodel.common.COSArrayList.converterToCOSArray : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.converterToCOSArray : $r21 = (org.apache.pdfbox.pdmodel.common.COSArrayList) r0
org.apache.pdfbox.pdmodel.common.COSArrayList.converterToCOSArray : $r21 = (org.apache.pdfbox.pdmodel.common.COSArrayList) r0 >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.converterToCOSArray : r22 = $r21.<org.apache.pdfbox.pdmodel.common.COSArrayList: org.apache.pdfbox.cos.COSArray array>
org.apache.pdfbox.pdmodel.common.COSArrayList.converterToCOSArray : r22 = $r21.<org.apache.pdfbox.pdmodel.common.COSArrayList: org.apache.pdfbox.cos.COSArray array> >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.converterToCOSArray : goto [?= return r22]
org.apache.pdfbox.pdmodel.common.COSArrayList.converterToCOSArray : goto [?= return r22] >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.converterToCOSArray : return r22
org.apache.pdfbox.pdmodel.common.COSArrayList.converterToCOSArray : return r22 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : virtualinvoke $r8.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r9, $r10)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : virtualinvoke $r8.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r9, $r10) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $z1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: boolean isRootNode()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $z1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: boolean isRootNode()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : if $z1 == 0
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $r12 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $r12 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName NAMES>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : $r11 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName NAMES> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : virtualinvoke $r12.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r11, null)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : virtualinvoke $r12.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r11, null) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : goto [?= specialinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void calculateLimits()>()]
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : goto [?= specialinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void calculateLimits()>()] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void calculateLimits()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.setKids : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void calculateLimits()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $r6 = new java.util.ArrayList
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $r6 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : specialinvoke $r6.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : specialinvoke $r6.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : i1 = 0
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : i1 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $i0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $i0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : if i1 >= $i0
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $r8 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(i1)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $r8 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>(i1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $r9 = (org.apache.pdfbox.cos.COSDictionary) $r8
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $r9 = (org.apache.pdfbox.cos.COSDictionary) $r8 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $r10 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.pdmodel.common.PDNameTreeNode createChildNode(org.apache.pdfbox.cos.COSDictionary)>($r9)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $r10 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.pdmodel.common.PDNameTreeNode createChildNode(org.apache.pdfbox.cos.COSDictionary)>($r9) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode.createChildNode : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode: org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode createChildNode(org.apache.pdfbox.cos.COSDictionary)>(r1)
org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode.createChildNode : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode: org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode createChildNode(org.apache.pdfbox.cos.COSDictionary)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode.createChildNode : $r2 = new org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode
org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode.createChildNode : $r2 = new org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode >>>>>>>> org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode.createChildNode : specialinvoke $r2.<org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r1)
org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode.createChildNode : specialinvoke $r2.<org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode: void <init>(org.apache.pdfbox.cos.COSDictionary)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode.createChildNode : return $r2
org.apache.pdfbox.pdmodel.common.PDIntegerNameTreeNode.createChildNode : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r10)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>($r10) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : i1 = i1 + 1
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : i1 = i1 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : goto [?= $i0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: int size()>()]
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : goto [?= $i0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: int size()>()] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $r7 = new org.apache.pdfbox.pdmodel.common.COSArrayList
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : $r7 = new org.apache.pdfbox.pdmodel.common.COSArrayList >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : specialinvoke $r7.<org.apache.pdfbox.pdmodel.common.COSArrayList: void <init>(java.util.List,org.apache.pdfbox.cos.COSArray)>($r6, r1)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : specialinvoke $r7.<org.apache.pdfbox.pdmodel.common.COSArrayList: void <init>(java.util.List,org.apache.pdfbox.cos.COSArray)>($r6, r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : r11 = $r7
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getKids : r11 = $r7 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $i4 = interfaceinvoke r1.<java.util.List: int size()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $i4 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : if $i4 <= 0
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : if $i4 <= 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $r7 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.get : $r1 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: java.util.List actual>
org.apache.pdfbox.pdmodel.common.COSArrayList.get : $r1 = r0.<org.apache.pdfbox.pdmodel.common.COSArrayList: java.util.List actual> >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.get : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0)
org.apache.pdfbox.pdmodel.common.COSArrayList.get : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.apache.pdfbox.pdmodel.common.COSArrayList.get : return $r2
org.apache.pdfbox.pdmodel.common.COSArrayList.get : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r15 = (org.apache.pdfbox.pdmodel.common.PDNameTreeNode) $r7
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r15 = (org.apache.pdfbox.pdmodel.common.PDNameTreeNode) $r7 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $i5 = interfaceinvoke r1.<java.util.List: int size()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $i5 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $i6 = $i5 - 1
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $i6 = $i5 - 1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i6)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : $r8 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>($i6) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r16 = (org.apache.pdfbox.pdmodel.common.PDNameTreeNode) $r8
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r16 = (org.apache.pdfbox.pdmodel.common.PDNameTreeNode) $r8 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r17 = virtualinvoke r15.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: java.lang.String getLowerLimit()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r17 = virtualinvoke r15.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: java.lang.String getLowerLimit()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getLowerLimit : r5 = null
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getLowerLimit : r5 = null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getLowerLimit : $r3 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getLowerLimit : $r3 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getLowerLimit : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LIMITS>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getLowerLimit : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LIMITS> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getLowerLimit : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getLowerLimit : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getLowerLimit : r1 = (org.apache.pdfbox.cos.COSArray) $r4
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getLowerLimit : r1 = (org.apache.pdfbox.cos.COSArray) $r4 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getLowerLimit : if r1 == null
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getLowerLimit : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getLowerLimit : r5 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: java.lang.String getString(int)>(0)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getLowerLimit : r5 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: java.lang.String getString(int)>(0) >>>>>>>> org.apache.pdfbox.cos.COSArray.getString : $r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: java.lang.String getString(int,java.lang.String)>(i0, null)
org.apache.pdfbox.cos.COSArray.getString : $r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: java.lang.String getString(int,java.lang.String)>(i0, null) >>>>>>>> org.apache.pdfbox.cos.COSArray.getString : r5 = r1
org.apache.pdfbox.cos.COSArray.getString : r5 = r1 >>>>>>>> org.apache.pdfbox.cos.COSArray.getString : $i1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.cos.COSArray.getString : $i1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.getString : if i0 >= $i1
org.apache.pdfbox.cos.COSArray.getString : if i0 >= $i1 >>>>>>>> org.apache.pdfbox.cos.COSArray.getString : $r3 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.getString : $r3 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.getString : r2 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0)
org.apache.pdfbox.cos.COSArray.getString : r2 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.apache.pdfbox.cos.COSArray.getString : $z0 = r2 instanceof org.apache.pdfbox.cos.COSString
org.apache.pdfbox.cos.COSArray.getString : $z0 = r2 instanceof org.apache.pdfbox.cos.COSString >>>>>>>> org.apache.pdfbox.cos.COSArray.getString : if $z0 == 0
org.apache.pdfbox.cos.COSArray.getString : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSArray.getString : $r4 = (org.apache.pdfbox.cos.COSString) r2
org.apache.pdfbox.cos.COSArray.getString : $r4 = (org.apache.pdfbox.cos.COSString) r2 >>>>>>>> org.apache.pdfbox.cos.COSArray.getString : r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSString: java.lang.String getString()>()
org.apache.pdfbox.cos.COSArray.getString : r5 = virtualinvoke $r4.<org.apache.pdfbox.cos.COSString: java.lang.String getString()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.getString : return r5
org.apache.pdfbox.cos.COSArray.getString : return r5 >>>>>>>> org.apache.pdfbox.cos.COSArray.getString : return $r1
org.apache.pdfbox.cos.COSArray.getString : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getLowerLimit : return r5
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getLowerLimit : return r5 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void setLowerLimit(java.lang.String)>(r17)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void setLowerLimit(java.lang.String)>(r17) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r18 = virtualinvoke r16.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: java.lang.String getUpperLimit()>()
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : r18 = virtualinvoke r16.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: java.lang.String getUpperLimit()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getUpperLimit : r5 = null
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getUpperLimit : r5 = null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getUpperLimit : $r3 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getUpperLimit : $r3 = r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: org.apache.pdfbox.cos.COSDictionary node> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getUpperLimit : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LIMITS>
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getUpperLimit : $r2 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LIMITS> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getUpperLimit : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getUpperLimit : $r4 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getUpperLimit : r1 = (org.apache.pdfbox.cos.COSArray) $r4
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getUpperLimit : r1 = (org.apache.pdfbox.cos.COSArray) $r4 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getUpperLimit : if r1 == null
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getUpperLimit : if r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getUpperLimit : r5 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: java.lang.String getString(int)>(1)
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getUpperLimit : r5 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: java.lang.String getString(int)>(1) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getUpperLimit : return r5
org.apache.pdfbox.pdmodel.common.PDNameTreeNode.getUpperLimit : return r5 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDNameTreeNode.calculateLimits : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.PDNameTreeNode: void setUpperLimit(java.lang.String)>(r18)
