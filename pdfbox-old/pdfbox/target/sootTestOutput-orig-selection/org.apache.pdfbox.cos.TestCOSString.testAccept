org.apache.pdfbox.cos.PDFDocEncoding.containsChar : $r0 = <org.apache.pdfbox.cos.PDFDocEncoding: java.util.Map UNI_TO_CODE> >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.containsChar : $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0)
org.apache.pdfbox.cos.PDFDocEncoding.containsChar : $r1 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0) >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.containsChar : $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1)
org.apache.pdfbox.cos.PDFDocEncoding.containsChar : $z0 = interfaceinvoke $r0.<java.util.Map: boolean containsKey(java.lang.Object)>($r1) >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.containsChar : return $z0
org.apache.pdfbox.cos.PDFDocEncoding.containsChar : return $z0 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r4 = new java.io.ByteArrayOutputStream
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r4 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : specialinvoke $r4.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : r2 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>()
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : r2 = virtualinvoke r0.<java.lang.String: char[] toCharArray()>() >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : i0 = lengthof r2
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : i0 = lengthof r2 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : i3 = 0
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : i3 = 0 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : if i3 >= i0
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : if i3 >= i0 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : c1 = r2[i3]
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : c1 = r2[i3] >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r6 = <org.apache.pdfbox.cos.PDFDocEncoding: java.util.Map UNI_TO_CODE>
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r6 = <org.apache.pdfbox.cos.PDFDocEncoding: java.util.Map UNI_TO_CODE> >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1)
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r7 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c1) >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7)
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r8 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r7) >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : r3 = (java.lang.Integer) $r8
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : r3 = (java.lang.Integer) $r8 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : if r3 != null
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : if r3 != null >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $i2 = virtualinvoke r3.<java.lang.Integer: int intValue()>()
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $i2 = virtualinvoke r3.<java.lang.Integer: int intValue()>() >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>($i2)
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : virtualinvoke $r4.<java.io.ByteArrayOutputStream: void write(int)>($i2) >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : i3 = i3 + 1
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : i3 = i3 + 1 >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : goto [?= (branch)]
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r5 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : $r5 = virtualinvoke $r4.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.cos.PDFDocEncoding.getBytes : return $r5
org.apache.pdfbox.cos.PDFDocEncoding.getBytes : return $r5 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.setOutput : r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream output> = r1
org.apache.pdfbox.pdfwriter.COSWriter.setOutput : r0.<org.apache.pdfbox.pdfwriter.COSWriter: java.io.OutputStream output> = r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.setStandardOutput : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput> = r1
org.apache.pdfbox.pdfwriter.COSWriter.setStandardOutput : r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput> = r1 >>>>>>>> org.apache.pdfbox.cos.COSString.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromString(org.apache.pdfbox.cos.COSString)>(r0)
org.apache.pdfbox.cos.COSString.accept : $r2 = interfaceinvoke r1.<org.apache.pdfbox.cos.ICOSVisitor: java.lang.Object visitFromString(org.apache.pdfbox.cos.COSString)>(r0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt>
org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : $z0 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: boolean willEncrypt> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : if $z0 == 0
org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>()
org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream getStandardOutput()>() >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getStandardOutput : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput>
org.apache.pdfbox.pdfwriter.COSWriter.getStandardOutput : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSWriter: org.apache.pdfbox.pdfwriter.COSStandardOutputStream standardOutput> >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.getStandardOutput : return $r1
org.apache.pdfbox.pdfwriter.COSWriter.getStandardOutput : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : staticinvoke <org.apache.pdfbox.pdfwriter.COSWriter: void writeString(org.apache.pdfbox.cos.COSString,java.io.OutputStream)>(r1, $r2)
org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : staticinvoke <org.apache.pdfbox.pdfwriter.COSWriter: void writeString(org.apache.pdfbox.cos.COSString,java.io.OutputStream)>(r1, $r2) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSString: byte[] getBytes()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeString : $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSString: byte[] getBytes()>() >>>>>>>> org.apache.pdfbox.cos.COSString.getBytes : $r1 = r0.<org.apache.pdfbox.cos.COSString: byte[] bytes>
org.apache.pdfbox.cos.COSString.getBytes : $r1 = r0.<org.apache.pdfbox.cos.COSString: byte[] bytes> >>>>>>>> org.apache.pdfbox.cos.COSString.getBytes : return $r1
org.apache.pdfbox.cos.COSString.getBytes : return $r1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : $z0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSString: boolean getForceHexForm()>()
org.apache.pdfbox.pdfwriter.COSWriter.writeString : $z0 = virtualinvoke r0.<org.apache.pdfbox.cos.COSString: boolean getForceHexForm()>() >>>>>>>> org.apache.pdfbox.cos.COSString.getForceHexForm : $z0 = r0.<org.apache.pdfbox.cos.COSString: boolean forceHexForm>
org.apache.pdfbox.cos.COSString.getForceHexForm : $z0 = r0.<org.apache.pdfbox.cos.COSString: boolean forceHexForm> >>>>>>>> org.apache.pdfbox.cos.COSString.getForceHexForm : return $z0
org.apache.pdfbox.cos.COSString.getForceHexForm : return $z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : staticinvoke <org.apache.pdfbox.pdfwriter.COSWriter: void writeString(byte[],boolean,java.io.OutputStream)>($r2, $z0, r1)
org.apache.pdfbox.pdfwriter.COSWriter.writeString : staticinvoke <org.apache.pdfbox.pdfwriter.COSWriter: void writeString(byte[],boolean,java.io.OutputStream)>($r2, $z0, r1) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : z1 = 1
org.apache.pdfbox.pdfwriter.COSWriter.writeString : z1 = 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if z0 != 0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if z0 != 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : i0 = lengthof r0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : i0 = lengthof r0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : i1 = 0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : i1 = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if i1 >= i0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if i1 >= i0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : b2 = r0[i1]
org.apache.pdfbox.pdfwriter.COSWriter.writeString : b2 = r0[i1] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if b2 >= 0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if b2 >= 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if b2 == 13
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if b2 == 13 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if b2 != 10
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if b2 != 10 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : i1 = i1 + 1
org.apache.pdfbox.pdfwriter.COSWriter.writeString : i1 = i1 + 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : goto [?= (branch)]
org.apache.pdfbox.pdfwriter.COSWriter.writeString : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if z1 == 0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if z1 == 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(40)
org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(40) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setOnNewLine(boolean)>(0)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: void setOnNewLine(boolean)>(0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.setOnNewLine : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean onNewLine> = z0
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.setOnNewLine : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: boolean onNewLine> = z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.OutputStream out>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $r1 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: java.io.OutputStream out> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0)
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : virtualinvoke $r1.<java.io.OutputStream: void write(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l1 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position>
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l1 = r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l2 = $l1 + 1L
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : $l2 = $l1 + 1L >>>>>>>> org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> = $l2
org.apache.pdfbox.pdfwriter.COSStandardOutputStream.write : r0.<org.apache.pdfbox.pdfwriter.COSStandardOutputStream: long position> = $l2 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : i3 = lengthof r0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : i3 = lengthof r0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : i4 = 0
org.apache.pdfbox.pdfwriter.COSWriter.writeString : i4 = 0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : if i4 >= i3
org.apache.pdfbox.pdfwriter.COSWriter.writeString : if i4 >= i3 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : b5 = r0[i4]
org.apache.pdfbox.pdfwriter.COSWriter.writeString : b5 = r0[i4] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : lookupswitch(b5) {     case 40:
org.apache.pdfbox.pdfwriter.COSWriter.writeString : lookupswitch(b5) {     case 40: >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(92)
org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(92) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(b5)
org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(b5) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : goto [?= i4 = i4 + 1]
org.apache.pdfbox.pdfwriter.COSWriter.writeString : goto [?= i4 = i4 + 1] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : i4 = i4 + 1
org.apache.pdfbox.pdfwriter.COSWriter.writeString : i4 = i4 + 1 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(41)
org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(41) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : goto [?= return]
org.apache.pdfbox.pdfwriter.COSWriter.writeString : goto [?= return] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : return null
org.apache.pdfbox.pdfwriter.COSWriter.visitFromString : return null >>>>>>>> org.apache.pdfbox.cos.COSString.accept : return $r2
org.apache.pdfbox.cos.COSString.accept : return $r2 >>>>>>>> org.apache.pdfbox.cos.COSString.setForceHexForm : r0.<org.apache.pdfbox.cos.COSString: boolean forceHexForm> = z0
org.apache.pdfbox.cos.COSString.setForceHexForm : r0.<org.apache.pdfbox.cos.COSString: boolean forceHexForm> = z0 >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(60)
org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(60) >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : staticinvoke <org.apache.pdfbox.util.Hex: void writeHexBytes(byte[],java.io.OutputStream)>(r0, r1)
org.apache.pdfbox.pdfwriter.COSWriter.writeString : staticinvoke <org.apache.pdfbox.util.Hex: void writeHexBytes(byte[],java.io.OutputStream)>(r0, r1) >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : i0 = lengthof r0
org.apache.pdfbox.util.Hex.writeHexBytes : i0 = lengthof r0 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : i2 = 0
org.apache.pdfbox.util.Hex.writeHexBytes : i2 = 0 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : if i2 >= i0
org.apache.pdfbox.util.Hex.writeHexBytes : if i2 >= i0 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : b1 = r0[i2]
org.apache.pdfbox.util.Hex.writeHexBytes : b1 = r0[i2] >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : staticinvoke <org.apache.pdfbox.util.Hex: void writeHexByte(byte,java.io.OutputStream)>(b1, r1)
org.apache.pdfbox.util.Hex.writeHexBytes : staticinvoke <org.apache.pdfbox.util.Hex: void writeHexByte(byte,java.io.OutputStream)>(b1, r1) >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $r1 = <org.apache.pdfbox.util.Hex: byte[] HEX_BYTES>
org.apache.pdfbox.util.Hex.writeHexByte : $r1 = <org.apache.pdfbox.util.Hex: byte[] HEX_BYTES> >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $i1 = staticinvoke <org.apache.pdfbox.util.Hex: int getHighNibble(byte)>(b0)
org.apache.pdfbox.util.Hex.writeHexByte : $i1 = staticinvoke <org.apache.pdfbox.util.Hex: int getHighNibble(byte)>(b0) >>>>>>>> org.apache.pdfbox.util.Hex.getHighNibble : $s1 = b0 & 240
org.apache.pdfbox.util.Hex.getHighNibble : $s1 = b0 & 240 >>>>>>>> org.apache.pdfbox.util.Hex.getHighNibble : $s2 = $s1 >> 4
org.apache.pdfbox.util.Hex.getHighNibble : $s2 = $s1 >> 4 >>>>>>>> org.apache.pdfbox.util.Hex.getHighNibble : return $s2
org.apache.pdfbox.util.Hex.getHighNibble : return $s2 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $b2 = $r1[$i1]
org.apache.pdfbox.util.Hex.writeHexByte : $b2 = $r1[$i1] >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : virtualinvoke r0.<java.io.OutputStream: void write(int)>($b2)
org.apache.pdfbox.util.Hex.writeHexByte : virtualinvoke r0.<java.io.OutputStream: void write(int)>($b2) >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $r2 = <org.apache.pdfbox.util.Hex: byte[] HEX_BYTES>
org.apache.pdfbox.util.Hex.writeHexByte : $r2 = <org.apache.pdfbox.util.Hex: byte[] HEX_BYTES> >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $i3 = staticinvoke <org.apache.pdfbox.util.Hex: int getLowNibble(byte)>(b0)
org.apache.pdfbox.util.Hex.writeHexByte : $i3 = staticinvoke <org.apache.pdfbox.util.Hex: int getLowNibble(byte)>(b0) >>>>>>>> org.apache.pdfbox.util.Hex.getLowNibble : $b1 = b0 & 15
org.apache.pdfbox.util.Hex.getLowNibble : $b1 = b0 & 15 >>>>>>>> org.apache.pdfbox.util.Hex.getLowNibble : return $b1
org.apache.pdfbox.util.Hex.getLowNibble : return $b1 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : $b4 = $r2[$i3]
org.apache.pdfbox.util.Hex.writeHexByte : $b4 = $r2[$i3] >>>>>>>> org.apache.pdfbox.util.Hex.writeHexByte : virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4)
org.apache.pdfbox.util.Hex.writeHexByte : virtualinvoke r0.<java.io.OutputStream: void write(int)>($b4) >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : i2 = i2 + 1
org.apache.pdfbox.util.Hex.writeHexBytes : i2 = i2 + 1 >>>>>>>> org.apache.pdfbox.util.Hex.writeHexBytes : goto [?= (branch)]
org.apache.pdfbox.util.Hex.writeHexBytes : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfwriter.COSWriter.writeString : virtualinvoke r1.<java.io.OutputStream: void write(int)>(62)
