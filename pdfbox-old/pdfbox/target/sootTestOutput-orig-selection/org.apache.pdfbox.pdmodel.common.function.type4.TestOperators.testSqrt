org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : r1 = staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence parse(java.lang.CharSequence)>(r0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : $r2 = new org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : $r2 = new org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : specialinvoke $r2.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: void <init>()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : specialinvoke $r2.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.Parser: void parse(java.lang.CharSequence,org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler)>(r0, $r2)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.Parser: void parse(java.lang.CharSequence,org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler)>(r0, $r2) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser.parse : $r3 = new org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer
org.apache.pdfbox.pdmodel.common.function.type4.Parser.parse : $r3 = new org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser.parse : specialinvoke $r3.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void <init>(java.lang.CharSequence,org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler,org.apache.pdfbox.pdmodel.common.function.type4.Parser$1)>(r0, r1, null)
org.apache.pdfbox.pdmodel.common.function.type4.Parser.parse : specialinvoke $r3.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void <init>(java.lang.CharSequence,org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler,org.apache.pdfbox.pdmodel.common.function.type4.Parser$1)>(r0, r1, null) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser.parse : staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void access$100(org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer)>($r3)
org.apache.pdfbox.pdmodel.common.function.type4.Parser.parse : staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void access$100(org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.access$100 : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void tokenize()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.access$100 : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void tokenize()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $i0 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: int index>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $i0 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: int index> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.CharSequence input>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.CharSequence input> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : if $i0 >= $i1
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : if $i0 >= $i1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $z0 = 1
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : goto [?= return $z0]
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : return $z0
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : return $z0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : if $z0 == 0
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State nextState()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State nextState()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : c0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char currentChar()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : c0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char currentChar()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.currentChar : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.CharSequence input>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.currentChar : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.CharSequence input> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.currentChar : $i0 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: int index>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.currentChar : $i0 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: int index> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.currentChar : $c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.currentChar : $c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.currentChar : return $c1
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.currentChar : return $c1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : lookupswitch(c0) {     case 0:
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : lookupswitch(c0) {     case 0: >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : $r4 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$State: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State TOKEN>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : $r4 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$State: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State TOKEN> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state> = $r4
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state> = $r4 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : $r5 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : $r5 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : return $r5
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : return $r5 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $r4 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$1: int[] $SwitchMap$org$apache$pdfbox$pdmodel$common$function$type4$Parser$State>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $r4 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$1: int[] $SwitchMap$org$apache$pdfbox$pdmodel$common$function$type4$Parser$State> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $r3 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $r3 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $i0 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$State: int ordinal()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $i0 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$State: int ordinal()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $i1 = $r4[$i0]
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $i1 = $r4[$i0] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : tableswitch($i1) {     case 1:
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : tableswitch($i1) {     case 1: >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void scanToken()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void scanToken()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $z0 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean $assertionsDisabled>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $z0 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean $assertionsDisabled> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : if $z0 != 0
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : c1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char currentChar()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : c1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char currentChar()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : lookupswitch(c1) {     case 123:
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : lookupswitch(c1) {     case 123: >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $z1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $z1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : if $z1 == 0
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : c2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char nextChar()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : c2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char nextChar()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : $i0 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: int index>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : $i0 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: int index> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : $i1 = $i0 + 1
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : $i1 = $i0 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: int index> = $i1
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: int index> = $i1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : if $z0 != 0
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : $c2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char currentChar()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : $c2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char currentChar()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : return $c2
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : return $c2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : lookupswitch(c2) {     case 0:
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : lookupswitch(c2) {     case 0: >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : goto [?= $r6 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler>]
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : goto [?= $r6 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler>] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r6 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r6 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r5 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r5 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : interfaceinvoke $r6.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler: void token(java.lang.CharSequence)>($r5)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : interfaceinvoke $r6.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler: void token(java.lang.CharSequence)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: void token(java.lang.String)>(r2)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: void token(java.lang.String)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r2 = "{"
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r2 = "{" >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : if $z0 == 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r3 = "}"
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r3 = "}" >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : if $z1 == 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r4 = <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.regex.Pattern INTEGER_PATTERN>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r4 = <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.regex.Pattern INTEGER_PATTERN> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : r16 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : r16 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $z2 = virtualinvoke r16.<java.util.regex.Matcher: boolean matches()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $z2 = virtualinvoke r16.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : if $z2 == 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r8 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getCurrentSequence()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r8 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getCurrentSequence()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getCurrentSequence : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.Stack seqStack>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getCurrentSequence : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.Stack seqStack> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getCurrentSequence : $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object peek()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getCurrentSequence : $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object peek()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getCurrentSequence : $r3 = (org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence) $r2
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getCurrentSequence : $r3 = (org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence) $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getCurrentSequence : return $r3
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getCurrentSequence : return $r3 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $i0 = staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: int parseInt(java.lang.String)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $i0 = staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: int parseInt(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parseInt : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("+")
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parseInt : $z0 = virtualinvoke r0.<java.lang.String: boolean startsWith(java.lang.String)>("+") >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parseInt : if $z0 == 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parseInt : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parseInt : $r1 = r0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parseInt : $r1 = r0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parseInt : $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parseInt : $i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parseInt : return $i0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parseInt : return $i0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : virtualinvoke $r8.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void addInteger(int)>($i0)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : virtualinvoke $r8.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void addInteger(int)>($i0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addInteger : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: java.util.List instructions>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addInteger : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: java.util.List instructions> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addInteger : $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addInteger : $r2 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addInteger : interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addInteger : interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : goto [?= $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>()]
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : goto [?= $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>()] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : $r3 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$State: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State WHITESPACE>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : $r3 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$State: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State WHITESPACE> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state> = $r3
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state> = $r3 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : goto [?= $r5 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state>]
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : goto [?= $r5 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state>] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void scanWhitespace()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void scanWhitespace()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $z0 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean $assertionsDisabled>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $z0 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean $assertionsDisabled> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : if $z0 != 0
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $c1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char currentChar()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $c1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char currentChar()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $z1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $z1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : if $z1 == 0
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : c0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char nextChar()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : c0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char nextChar()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : lookupswitch(c0) {     case 0:
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : lookupswitch(c0) {     case 0: >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : goto [?= $r4 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler>]
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : goto [?= $r4 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler>] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $r4 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $r4 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $r3 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $r3 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : interfaceinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler: void whitespace(java.lang.CharSequence)>($r3)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : interfaceinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler: void whitespace(java.lang.CharSequence)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r7 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r7 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : goto [?= $z1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>()]
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : goto [?= $z1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>()] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $z0 = 0
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : return 4
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : return 4 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r5 = <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.regex.Pattern REAL_PATTERN>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r5 = <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.regex.Pattern REAL_PATTERN> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : r17 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : r17 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $z3 = virtualinvoke r17.<java.util.regex.Matcher: boolean matches()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $z3 = virtualinvoke r17.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : if $z3 == 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r6 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getCurrentSequence()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r6 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getCurrentSequence()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : virtualinvoke $r6.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void addName(java.lang.String)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : virtualinvoke $r6.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void addName(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addName : $r2 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: java.util.List instructions>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addName : $r2 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: java.util.List instructions> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addName : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addName : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getInstructionSequence()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getInstructionSequence()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getInstructionSequence : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence mainSequence>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getInstructionSequence : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence mainSequence> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getInstructionSequence : return $r1
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getInstructionSequence : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : return $r3
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : return $r3 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : $r3 = new org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : $r3 = new org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : $r4 = new org.apache.pdfbox.pdmodel.common.function.type4.Operators
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : $r4 = new org.apache.pdfbox.pdmodel.common.function.type4.Operators >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : specialinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.Operators: void <init>()>()
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : specialinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.Operators: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : specialinvoke $r3.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: void <init>(org.apache.pdfbox.pdmodel.common.function.type4.Operators)>($r4)
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : specialinvoke $r3.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: void <init>(org.apache.pdfbox.pdmodel.common.function.type4.Operators)>($r4) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)>($r3)
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.getStack : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack stack>
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.getStack : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack stack> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.getStack : return $r1
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.getStack : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $r6 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: java.util.List instructions>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $r6 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: java.util.List instructions> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r16 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r16 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if $z0 == 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r3 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r3 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $z3 = r3 instanceof java.lang.String
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $z3 = r3 instanceof java.lang.String >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if $z3 == 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r3)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : goto [?= $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : goto [?= $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r4 = (java.lang.String) r3
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r4 = (java.lang.String) r3 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $r10 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: org.apache.pdfbox.pdmodel.common.function.type4.Operators getOperators()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $r10 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: org.apache.pdfbox.pdmodel.common.function.type4.Operators getOperators()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.getOperators : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: org.apache.pdfbox.pdmodel.common.function.type4.Operators operators>
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.getOperators : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: org.apache.pdfbox.pdmodel.common.function.type4.Operators operators> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.getOperators : return $r1
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.getOperators : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r5 = virtualinvoke $r10.<org.apache.pdfbox.pdmodel.common.function.type4.Operators: org.apache.pdfbox.pdmodel.common.function.type4.Operator getOperator(java.lang.String)>(r4)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r5 = virtualinvoke $r10.<org.apache.pdfbox.pdmodel.common.function.type4.Operators: org.apache.pdfbox.pdmodel.common.function.type4.Operator getOperator(java.lang.String)>(r4) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Operators.getOperator : $r2 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Operators: java.util.Map operators>
org.apache.pdfbox.pdmodel.common.function.type4.Operators.getOperator : $r2 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Operators: java.util.Map operators> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Operators.getOperator : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.Operators.getOperator : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Operators.getOperator : $r4 = (org.apache.pdfbox.pdmodel.common.function.type4.Operator) $r3
org.apache.pdfbox.pdmodel.common.function.type4.Operators.getOperator : $r4 = (org.apache.pdfbox.pdmodel.common.function.type4.Operator) $r3 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Operators.getOperator : return $r4
org.apache.pdfbox.pdmodel.common.function.type4.Operators.getOperator : return $r4 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if r5 == null
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if r5 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : interfaceinvoke r5.<org.apache.pdfbox.pdmodel.common.function.type4.Operator: void execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : interfaceinvoke r5.<org.apache.pdfbox.pdmodel.common.function.type4.Operator: void execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : f0 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: float popReal()>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : f0 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: float popReal()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack stack>
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack stack> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>()
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : $r3 = (java.lang.Number) $r2
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : $r3 = (java.lang.Number) $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : $f0 = virtualinvoke $r3.<java.lang.Number: float floatValue()>()
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : $f0 = virtualinvoke $r3.<java.lang.Number: float floatValue()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : return $f0
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : return $f0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $b0 = f0 cmpg 0.0F
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $b0 = f0 cmpg 0.0F >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : if $b0 >= 0
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : if $b0 >= 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $d0 = (double) f0
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $d0 = (double) f0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $d1 = staticinvoke <java.lang.Math: double sqrt(double)>($d0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $f1 = (float) $d1
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $f1 = (float) $d1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $r3 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>($f1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : virtualinvoke $r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r3)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : virtualinvoke $r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : goto [?= (branch)]
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if $z1 != 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $r7 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $r7 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $z2 = $r7 instanceof org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $z2 = $r7 instanceof org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if $z2 == 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : $r5 = new org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : $r5 = new org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : specialinvoke $r5.<org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester: void <init>(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)>($r3)
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : specialinvoke $r5.<org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester: void <init>(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : return $r5
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.create : return $r5 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester: org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester popReal(float,double)>(f0, 1.0E-7)
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : $r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester: org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester popReal(float,double)>(f0, 1.0E-7) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : $r2 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester: org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext context>
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : $r2 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester: org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext context> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>()
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : $r4 = virtualinvoke $r3.<java.util.Stack: java.lang.Object pop()>()
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : $r4 = virtualinvoke $r3.<java.util.Stack: java.lang.Object pop()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : r1 = (java.lang.Float) $r4
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : r1 = (java.lang.Float) $r4 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : $d1 = (double) f0
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : $d1 = (double) f0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : $f1 = virtualinvoke r1.<java.lang.Float: float floatValue()>()
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : $f1 = virtualinvoke r1.<java.lang.Float: float floatValue()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : $d2 = (double) $f1
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : $d2 = (double) $f1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($d1, $d2, d0)
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : staticinvoke <org.junit.Assert: void assertEquals(double,double,double)>($d1, $d2, d0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : return r0
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : return r0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : return $r1
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.popReal : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.isEmpty : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester: org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext context>
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.isEmpty : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester: org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext context> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.isEmpty : $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>()
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.isEmpty : $r2 = virtualinvoke $r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.isEmpty : $z0 = virtualinvoke $r2.<java.util.Stack: boolean isEmpty()>()
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.isEmpty : $z0 = virtualinvoke $r2.<java.util.Stack: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.isEmpty : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.isEmpty : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.isEmpty : return r0
org.apache.pdfbox.pdmodel.common.function.type4.Type4Tester.isEmpty : return r0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r7 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getCurrentSequence()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r7 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getCurrentSequence()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $f0 = staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: float parseReal(java.lang.String)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $f0 = staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: float parseReal(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parseReal : $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r0)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parseReal : $f0 = staticinvoke <java.lang.Float: float parseFloat(java.lang.String)>(r0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parseReal : return $f0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parseReal : return $f0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : virtualinvoke $r7.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void addReal(float)>($f0)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : virtualinvoke $r7.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void addReal(float)>($f0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addReal : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: java.util.List instructions>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addReal : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: java.util.List instructions> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addReal : $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addReal : $r2 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addReal : interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addReal : interfaceinvoke $r1.<java.util.List: boolean add(java.lang.Object)>($r2) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $r5 = new java.lang.IllegalArgumentException
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : $r5 = new java.lang.IllegalArgumentException >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("argument must be nonnegative")
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : specialinvoke $r5.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("argument must be nonnegative") >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Sqrt.execute : throw $r5
