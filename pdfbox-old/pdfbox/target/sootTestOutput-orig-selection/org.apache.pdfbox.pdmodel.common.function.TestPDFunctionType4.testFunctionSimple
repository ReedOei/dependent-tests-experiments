org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : $r1 = new org.apache.pdfbox.io.ScratchFile >>>>>>>> org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : $r2 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly()>()
org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : $r2 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly()>() >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly(long)>(-1L)
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly(long)>(-1L) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 0, l0, l0)
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 0, l0, l0) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : return $r0
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : return $r0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFile: void <init>(org.apache.pdfbox.io.MemoryUsageSetting)>($r2)
org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFile: void <init>(org.apache.pdfbox.io.MemoryUsageSetting)>($r2) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useMainMemory>
org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useMainMemory> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes>
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $b1 = $l0 cmp 0L
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : if $b1 < 0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : if $b1 < 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $z0 = 0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxStorageBytes>
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxStorageBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $b1 = $l0 cmp 0L
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : if $b1 <= 0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : if $b1 <= 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $z0 = 0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : return $z0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : return $r1
org.apache.pdfbox.io.ScratchFile.getMainMemoryOnlyInstance : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setInt : $r2 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1)
org.apache.pdfbox.cos.COSDictionary.setInt : $r2 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = null
org.apache.pdfbox.cos.COSName.getPDFName : r6 = null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : if r0 == null
org.apache.pdfbox.cos.COSName.getPDFName : if r0 == null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r1 = <org.apache.pdfbox.cos.COSName: java.util.Map commonNameMap>
org.apache.pdfbox.cos.COSName.getPDFName : $r1 = <org.apache.pdfbox.cos.COSName: java.util.Map commonNameMap> >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0)
org.apache.pdfbox.cos.COSName.getPDFName : $r2 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r2
org.apache.pdfbox.cos.COSName.getPDFName : r6 = (org.apache.pdfbox.cos.COSName) $r2 >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : if r6 != null
org.apache.pdfbox.cos.COSName.getPDFName : if r6 != null >>>>>>>> org.apache.pdfbox.cos.COSName.getPDFName : return r6
org.apache.pdfbox.cos.COSName.getPDFName : return r6 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setInt : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setInt(org.apache.pdfbox.cos.COSName,int)>($r2, i0)
org.apache.pdfbox.cos.COSDictionary.setInt : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setInt(org.apache.pdfbox.cos.COSName,int)>($r2, i0) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setInt : $l1 = (long) i0
org.apache.pdfbox.cos.COSDictionary.setInt : $l1 = (long) i0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setInt : $r2 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l1)
org.apache.pdfbox.cos.COSDictionary.setInt : $r2 = staticinvoke <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger get(long)>($l1) >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $b2 = -100L cmp l0
org.apache.pdfbox.cos.COSInteger.get : $b2 = -100L cmp l0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : if $b2 > 0
org.apache.pdfbox.cos.COSInteger.get : if $b2 > 0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $b3 = l0 cmp 256L
org.apache.pdfbox.cos.COSInteger.get : $b3 = l0 cmp 256L >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : if $b3 > 0
org.apache.pdfbox.cos.COSInteger.get : if $b3 > 0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $i4 = (int) l0
org.apache.pdfbox.cos.COSInteger.get : $i4 = (int) l0 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : i1 = $i4 - -100
org.apache.pdfbox.cos.COSInteger.get : i1 = $i4 - -100 >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r1 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC>
org.apache.pdfbox.cos.COSInteger.get : $r1 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC> >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r2 = $r1[i1]
org.apache.pdfbox.cos.COSInteger.get : $r2 = $r1[i1] >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : if $r2 != null
org.apache.pdfbox.cos.COSInteger.get : if $r2 != null >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r3 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC>
org.apache.pdfbox.cos.COSInteger.get : $r3 = <org.apache.pdfbox.cos.COSInteger: org.apache.pdfbox.cos.COSInteger[] STATIC> >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : $r4 = $r3[i1]
org.apache.pdfbox.cos.COSInteger.get : $r4 = $r3[i1] >>>>>>>> org.apache.pdfbox.cos.COSInteger.get : return $r4
org.apache.pdfbox.cos.COSInteger.get : return $r4 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setInt : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, $r2)
org.apache.pdfbox.cos.COSDictionary.setInt : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>(r1, $r2) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : if r2 != null
org.apache.pdfbox.cos.COSDictionary.setItem : if r2 != null >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
org.apache.pdfbox.cos.COSDictionary.setItem : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if r1 == null
org.apache.pdfbox.util.SmallMap.put : if r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if r2 != null
org.apache.pdfbox.util.SmallMap.put : if r2 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r5 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if $r5 != null
org.apache.pdfbox.util.SmallMap.put : if $r5 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10 = newarray (java.lang.Object)[2]
org.apache.pdfbox.util.SmallMap.put : $r10 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10[0] = r1
org.apache.pdfbox.util.SmallMap.put : $r10[0] = r1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r10[1] = r2
org.apache.pdfbox.util.SmallMap.put : $r10[1] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r10
org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = $r10 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : return null
org.apache.pdfbox.util.SmallMap.put : return null >>>>>>>> org.apache.pdfbox.cos.COSArray.setFloatArray : virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: void clear()>()
org.apache.pdfbox.cos.COSArray.setFloatArray : virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: void clear()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.clear : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.clear : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.clear : interfaceinvoke $r1.<java.util.List: void clear()>()
org.apache.pdfbox.cos.COSArray.clear : interfaceinvoke $r1.<java.util.List: void clear()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.setFloatArray : i0 = lengthof r1
org.apache.pdfbox.cos.COSArray.setFloatArray : i0 = lengthof r1 >>>>>>>> org.apache.pdfbox.cos.COSArray.setFloatArray : i1 = 0
org.apache.pdfbox.cos.COSArray.setFloatArray : i1 = 0 >>>>>>>> org.apache.pdfbox.cos.COSArray.setFloatArray : if i1 >= i0
org.apache.pdfbox.cos.COSArray.setFloatArray : if i1 >= i0 >>>>>>>> org.apache.pdfbox.cos.COSArray.setFloatArray : f0 = r1[i1]
org.apache.pdfbox.cos.COSArray.setFloatArray : f0 = r1[i1] >>>>>>>> org.apache.pdfbox.cos.COSArray.setFloatArray : $r3 = new org.apache.pdfbox.cos.COSFloat
org.apache.pdfbox.cos.COSArray.setFloatArray : $r3 = new org.apache.pdfbox.cos.COSFloat >>>>>>>> org.apache.pdfbox.cos.COSArray.setFloatArray : specialinvoke $r3.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>(f0)
org.apache.pdfbox.cos.COSArray.setFloatArray : specialinvoke $r3.<org.apache.pdfbox.cos.COSFloat: void <init>(float)>(f0) >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(46)
org.apache.pdfbox.cos.COSFloat.removeNullDigits : $i0 = virtualinvoke r1.<java.lang.String: int indexOf(int)>(46) >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $i0 <= -1
org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $i0 <= -1 >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".0")
org.apache.pdfbox.cos.COSFloat.removeNullDigits : $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>(".0") >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $z0 != 0
org.apache.pdfbox.cos.COSFloat.removeNullDigits : if $z0 != 0 >>>>>>>> org.apache.pdfbox.cos.COSFloat.removeNullDigits : return r1
org.apache.pdfbox.cos.COSFloat.removeNullDigits : return r1 >>>>>>>> org.apache.pdfbox.cos.COSArray.setFloatArray : virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r3)
org.apache.pdfbox.cos.COSArray.setFloatArray : virtualinvoke r0.<org.apache.pdfbox.cos.COSArray: void add(org.apache.pdfbox.cos.COSBase)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSArray.add : $r2 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.add : $r2 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.add : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSArray.add : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSArray.setFloatArray : i1 = i1 + 1
org.apache.pdfbox.cos.COSArray.setFloatArray : i1 = i1 + 1 >>>>>>>> org.apache.pdfbox.cos.COSArray.setFloatArray : goto [?= (branch)]
org.apache.pdfbox.cos.COSArray.setFloatArray : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1)
org.apache.pdfbox.cos.COSDictionary.setItem : $r3 = staticinvoke <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName getPDFName(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.setItem : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r3, r2)
org.apache.pdfbox.cos.COSDictionary.setItem : virtualinvoke r0.<org.apache.pdfbox.cos.COSDictionary: void setItem(org.apache.pdfbox.cos.COSName,org.apache.pdfbox.cos.COSBase)>($r3, r2) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.put : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>()
org.apache.pdfbox.util.SmallMap.findKey : $z0 = virtualinvoke r0.<org.apache.pdfbox.util.SmallMap: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r1 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null
org.apache.pdfbox.util.SmallMap.isEmpty : if $r1 == null >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.isEmpty : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.isEmpty : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : if $i0 != 0
org.apache.pdfbox.util.SmallMap.isEmpty : if $i0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 0
org.apache.pdfbox.util.SmallMap.isEmpty : $z0 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.isEmpty : return $z0
org.apache.pdfbox.util.SmallMap.isEmpty : return $z0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0
org.apache.pdfbox.util.SmallMap.findKey : if $z0 != 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if r1 != null
org.apache.pdfbox.util.SmallMap.findKey : if r1 != null >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : i1 = 0
org.apache.pdfbox.util.SmallMap.findKey : i1 = 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findKey : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $i0 = lengthof $r2
org.apache.pdfbox.util.SmallMap.findKey : $i0 = lengthof $r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if i1 >= $i0
org.apache.pdfbox.util.SmallMap.findKey : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.findKey : $r3 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $r4 = $r3[i1]
org.apache.pdfbox.util.SmallMap.findKey : $r4 = $r3[i1] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4)
org.apache.pdfbox.util.SmallMap.findKey : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r4) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSName.equals : $z0 = r1 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSName.equals : if $z0 == 0
org.apache.pdfbox.cos.COSName.equals : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r4 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.equals : $r4 = r0.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r2 = (org.apache.pdfbox.cos.COSName) r1
org.apache.pdfbox.cos.COSName.equals : $r2 = (org.apache.pdfbox.cos.COSName) r1 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $r3 = $r2.<org.apache.pdfbox.cos.COSName: java.lang.String name>
org.apache.pdfbox.cos.COSName.equals : $r3 = $r2.<org.apache.pdfbox.cos.COSName: java.lang.String name> >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3)
org.apache.pdfbox.cos.COSName.equals : $z1 = virtualinvoke $r4.<java.lang.String: boolean equals(java.lang.Object)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : if $z1 == 0
org.apache.pdfbox.cos.COSName.equals : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z2 = 0
org.apache.pdfbox.cos.COSName.equals : $z2 = 0 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : return $z2
org.apache.pdfbox.cos.COSName.equals : return $z2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : if $z1 == 0
org.apache.pdfbox.util.SmallMap.findKey : if $z1 == 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : i1 = i1 + 2
org.apache.pdfbox.util.SmallMap.findKey : i1 = i1 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>]
org.apache.pdfbox.util.SmallMap.findKey : goto [?= $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : return -1
org.apache.pdfbox.util.SmallMap.findKey : return -1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : if i0 >= 0
org.apache.pdfbox.util.SmallMap.put : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r8 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r8 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : i5 = lengthof $r8
org.apache.pdfbox.util.SmallMap.put : i5 = lengthof $r8 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i3 = i5 + 2
org.apache.pdfbox.util.SmallMap.put : $i3 = i5 + 2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3 = newarray (java.lang.Object)[$i3]
org.apache.pdfbox.util.SmallMap.put : r3 = newarray (java.lang.Object)[$i3] >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $r9 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.put : $r9 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.put : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r3, 0, i5)
org.apache.pdfbox.util.SmallMap.put : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r9, 0, r3, 0, i5) >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3[i5] = r1
org.apache.pdfbox.util.SmallMap.put : r3[i5] = r1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : $i4 = i5 + 1
org.apache.pdfbox.util.SmallMap.put : $i4 = i5 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r3[$i4] = r2
org.apache.pdfbox.util.SmallMap.put : r3[$i4] = r2 >>>>>>>> org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = r3
org.apache.pdfbox.util.SmallMap.put : r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> = r3 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createOutputStream(org.apache.pdfbox.cos.COSBase)>(null)
org.apache.pdfbox.cos.COSStream.createOutputStream : $r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: java.io.OutputStream createOutputStream(org.apache.pdfbox.cos.COSBase)>(null) >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>()
org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.checkClosed : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.checkClosed : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.checkClosed : if $r1 == null
org.apache.pdfbox.cos.COSStream.checkClosed : if $r1 == null >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting>
org.apache.pdfbox.cos.COSStream.createOutputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : if $z0 == 0
org.apache.pdfbox.cos.COSStream.createOutputStream : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : if r1 == null
org.apache.pdfbox.cos.COSStream.createOutputStream : if r1 == null >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r4 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSStream.createOutputStream : $r4 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r5 = virtualinvoke $r4.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer()>()
org.apache.pdfbox.cos.COSStream.createOutputStream : $r5 = virtualinvoke $r4.<org.apache.pdfbox.io.ScratchFile: org.apache.pdfbox.io.RandomAccess createBuffer()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : $r1 = new org.apache.pdfbox.io.ScratchFileBuffer
org.apache.pdfbox.io.ScratchFile.createBuffer : $r1 = new org.apache.pdfbox.io.ScratchFileBuffer >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFileBuffer: void <init>(org.apache.pdfbox.io.ScratchFile)>(r0)
org.apache.pdfbox.io.ScratchFile.createBuffer : specialinvoke $r1.<org.apache.pdfbox.io.ScratchFileBuffer: void <init>(org.apache.pdfbox.io.ScratchFile)>(r0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.checkClosed : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed>
org.apache.pdfbox.io.ScratchFile.checkClosed : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> >>>>>>>> org.apache.pdfbox.io.ScratchFile.checkClosed : if $z0 == 0
org.apache.pdfbox.io.ScratchFile.checkClosed : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getPageSize : return 4096
org.apache.pdfbox.io.ScratchFile.getPageSize : return 4096 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i2 = $i0 + 1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i2 = $i0 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i1 = lengthof $r2
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i1 = lengthof $r2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : if $i2 < $i1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : if $i2 < $i1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r8 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r8 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : i8 = virtualinvoke $r8.<org.apache.pdfbox.io.ScratchFile: int getNewPage()>()
org.apache.pdfbox.io.ScratchFileBuffer.addPage : i8 = virtualinvoke $r8.<org.apache.pdfbox.io.ScratchFile: int getNewPage()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r3 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r3 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : entermonitor $r3
org.apache.pdfbox.io.ScratchFile.getNewPage : entermonitor $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : i3 = virtualinvoke $r4.<java.util.BitSet: int nextSetBit(int)>(0)
org.apache.pdfbox.io.ScratchFile.getNewPage : i3 = virtualinvoke $r4.<java.util.BitSet: int nextSetBit(int)>(0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 >= 0
org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 >= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.getNewPage : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : virtualinvoke $r5.<java.util.BitSet: void clear(int)>(i3)
org.apache.pdfbox.io.ScratchFile.getNewPage : virtualinvoke $r5.<java.util.BitSet: void clear(int)>(i3) >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.getNewPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 < $i0
org.apache.pdfbox.io.ScratchFile.getNewPage : if i3 < $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : $i1 = i3 + 1
org.apache.pdfbox.io.ScratchFile.getNewPage : $i1 = i3 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = $i1
org.apache.pdfbox.io.ScratchFile.getNewPage : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = $i1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : exitmonitor $r3
org.apache.pdfbox.io.ScratchFile.getNewPage : exitmonitor $r3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.getNewPage : return i3
org.apache.pdfbox.io.ScratchFile.getNewPage : return i3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9[$i9] = i8
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r9[$i9] = i8 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i10 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i10 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = $i10
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = $i10 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l12 = (long) $i11
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l12 = (long) $i11 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l14 = (long) $i13
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l14 = (long) $i13 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l15 = $l12 * $l14
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $l15 = $l12 * $l14 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l15
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = $l15 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i17 = $i16 + 1
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i17 = $i16 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> = $i17
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> = $i17 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r11 = newarray (byte)[$i18]
org.apache.pdfbox.io.ScratchFileBuffer.addPage : $r11 = newarray (byte)[$i18] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r11
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = $r11 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0
org.apache.pdfbox.io.ScratchFileBuffer.addPage : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.createBuffer : return $r1
org.apache.pdfbox.io.ScratchFile.createBuffer : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> = $r5
org.apache.pdfbox.cos.COSStream.createOutputStream : r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> = $r5 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r6 = new org.apache.pdfbox.io.RandomAccessOutputStream
org.apache.pdfbox.cos.COSStream.createOutputStream : $r6 = new org.apache.pdfbox.io.RandomAccessOutputStream >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r7 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.createOutputStream : $r7 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r6.<org.apache.pdfbox.io.RandomAccessOutputStream: void <init>(org.apache.pdfbox.io.RandomAccessWrite)>($r7)
org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r6.<org.apache.pdfbox.io.RandomAccessOutputStream: void <init>(org.apache.pdfbox.io.RandomAccessWrite)>($r7) >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r8 = new org.apache.pdfbox.cos.COSOutputStream
org.apache.pdfbox.cos.COSStream.createOutputStream : $r8 = new org.apache.pdfbox.cos.COSOutputStream >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r9 = specialinvoke r0.<org.apache.pdfbox.cos.COSStream: java.util.List getFilterList()>()
org.apache.pdfbox.cos.COSStream.createOutputStream : $r9 = specialinvoke r0.<org.apache.pdfbox.cos.COSStream: java.util.List getFilterList()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : $r5 = new java.util.ArrayList
org.apache.pdfbox.cos.COSStream.getFilterList : $r5 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.cos.COSStream.getFilterList : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getFilters()>()
org.apache.pdfbox.cos.COSStream.getFilterList : r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getFilters()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilters : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FILTER>
org.apache.pdfbox.cos.COSStream.getFilters : $r1 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName FILTER> >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilters : $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r1)
org.apache.pdfbox.cos.COSStream.getFilters : $r2 = virtualinvoke r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r1) >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items>
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r2 = r0.<org.apache.pdfbox.cos.COSDictionary: java.util.Map items> >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1)
org.apache.pdfbox.util.SmallMap.get : i0 = specialinvoke r0.<org.apache.pdfbox.util.SmallMap: int findKey(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.util.SmallMap.get : if i0 >= 0
org.apache.pdfbox.util.SmallMap.get : if i0 >= 0 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r3 = null
org.apache.pdfbox.util.SmallMap.get : $r3 = null >>>>>>>> org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3]
org.apache.pdfbox.util.SmallMap.get : goto [?= return $r3] >>>>>>>> org.apache.pdfbox.util.SmallMap.get : return $r3
org.apache.pdfbox.util.SmallMap.get : return $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : r5 = (org.apache.pdfbox.cos.COSBase) $r3 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z0 = r5 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : $z1 = r5 instanceof org.apache.pdfbox.cos.COSNull >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5
org.apache.pdfbox.cos.COSDictionary.getDictionaryObject : return r5 >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilters : return $r2
org.apache.pdfbox.cos.COSStream.getFilters : return $r2 >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName
org.apache.pdfbox.cos.COSStream.getFilterList : $z0 = r2 instanceof org.apache.pdfbox.cos.COSName >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : if $z0 == 0
org.apache.pdfbox.cos.COSStream.getFilterList : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : $z1 = r2 instanceof org.apache.pdfbox.cos.COSArray
org.apache.pdfbox.cos.COSStream.getFilterList : $z1 = r2 instanceof org.apache.pdfbox.cos.COSArray >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : if $z1 == 0
org.apache.pdfbox.cos.COSStream.getFilterList : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.getFilterList : return $r5
org.apache.pdfbox.cos.COSStream.getFilterList : return $r5 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r10 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSStream.createOutputStream : $r10 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r8.<org.apache.pdfbox.cos.COSOutputStream: void <init>(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.OutputStream,org.apache.pdfbox.io.ScratchFile)>($r9, r0, $r6, $r10)
org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r8.<org.apache.pdfbox.cos.COSOutputStream: void <init>(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.OutputStream,org.apache.pdfbox.io.ScratchFile)>($r9, r0, $r6, $r10) >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> = 1
org.apache.pdfbox.cos.COSStream.createOutputStream : r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> = 1 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : $r11 = new org.apache.pdfbox.cos.COSStream$1
org.apache.pdfbox.cos.COSStream.createOutputStream : $r11 = new org.apache.pdfbox.cos.COSStream$1 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r11.<org.apache.pdfbox.cos.COSStream$1: void <init>(org.apache.pdfbox.cos.COSStream,java.io.OutputStream)>(r0, $r8)
org.apache.pdfbox.cos.COSStream.createOutputStream : specialinvoke $r11.<org.apache.pdfbox.cos.COSStream$1: void <init>(org.apache.pdfbox.cos.COSStream,java.io.OutputStream)>(r0, $r8) >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : return $r11
org.apache.pdfbox.cos.COSStream.createOutputStream : return $r11 >>>>>>>> org.apache.pdfbox.cos.COSStream.createOutputStream : return $r1
org.apache.pdfbox.cos.COSStream.createOutputStream : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSStream$1.write : $r2 = r0.<org.apache.pdfbox.cos.COSStream$1: java.io.OutputStream out>
org.apache.pdfbox.cos.COSStream$1.write : $r2 = r0.<org.apache.pdfbox.cos.COSStream$1: java.io.OutputStream out> >>>>>>>> org.apache.pdfbox.cos.COSStream$1.write : virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1)
org.apache.pdfbox.cos.COSStream$1.write : virtualinvoke $r2.<java.io.OutputStream: void write(byte[],int,int)>(r1, i0, i1) >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.write : $r2 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.ByteArrayOutputStream buffer>
org.apache.pdfbox.cos.COSOutputStream.write : $r2 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.ByteArrayOutputStream buffer> >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.write : virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i0, i1)
org.apache.pdfbox.cos.COSOutputStream.write : virtualinvoke $r2.<java.io.ByteArrayOutputStream: void write(byte[],int,int)>(r1, i0, i1) >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : specialinvoke r0.<java.io.FilterOutputStream: void close()>()
org.apache.pdfbox.cos.COSStream$1.close : specialinvoke r0.<java.io.FilterOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : $r2 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.util.List filters>
org.apache.pdfbox.cos.COSOutputStream.close : $r2 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.util.List filters> >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : $i0 = interfaceinvoke $r2.<java.util.List: int size()>()
org.apache.pdfbox.cos.COSOutputStream.close : $i0 = interfaceinvoke $r2.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : i1 = $i0 - 1
org.apache.pdfbox.cos.COSOutputStream.close : i1 = $i0 - 1 >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : if i1 < 0
org.apache.pdfbox.cos.COSOutputStream.close : if i1 < 0 >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : $r4 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.OutputStream out>
org.apache.pdfbox.cos.COSOutputStream.close : $r4 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.OutputStream out> >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : $r3 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.ByteArrayOutputStream buffer>
org.apache.pdfbox.cos.COSOutputStream.close : $r3 = r0.<org.apache.pdfbox.cos.COSOutputStream: java.io.ByteArrayOutputStream buffer> >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : $r5 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.cos.COSOutputStream.close : $r5 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : virtualinvoke $r4.<java.io.OutputStream: void write(byte[])>($r5)
org.apache.pdfbox.cos.COSOutputStream.close : virtualinvoke $r4.<java.io.OutputStream: void write(byte[])>($r5) >>>>>>>> org.apache.pdfbox.io.RandomAccessOutputStream.write : $r2 = r0.<org.apache.pdfbox.io.RandomAccessOutputStream: org.apache.pdfbox.io.RandomAccessWrite writer>
org.apache.pdfbox.io.RandomAccessOutputStream.write : $r2 = r0.<org.apache.pdfbox.io.RandomAccessOutputStream: org.apache.pdfbox.io.RandomAccessWrite writer> >>>>>>>> org.apache.pdfbox.io.RandomAccessOutputStream.write : interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessWrite: void write(byte[])>(r1)
org.apache.pdfbox.io.RandomAccessOutputStream.write : interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessWrite: void write(byte[])>(r1) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i0 = lengthof r1
org.apache.pdfbox.io.ScratchFileBuffer.write : $i0 = lengthof r1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void write(byte[],int,int)>(r1, 0, $i0)
org.apache.pdfbox.io.ScratchFileBuffer.write : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void write(byte[],int,int)>(r1, 0, $i0) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.write : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : if $r1 != null
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : if $r1 != null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : virtualinvoke $r2.<org.apache.pdfbox.io.ScratchFile: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.checkClosed : virtualinvoke $r2.<org.apache.pdfbox.io.ScratchFile: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : i19 = i1
org.apache.pdfbox.io.ScratchFileBuffer.write : i19 = i1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : i20 = i0
org.apache.pdfbox.io.ScratchFileBuffer.write : i20 = i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : if i19 <= 0
org.apache.pdfbox.io.ScratchFileBuffer.write : if i19 <= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean ensureAvailableBytesInPage(boolean)>(1)
org.apache.pdfbox.io.ScratchFileBuffer.write : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean ensureAvailableBytesInPage(boolean)>(1) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : if $i1 < $i0
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : if $i1 < $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : return 1
org.apache.pdfbox.io.ScratchFileBuffer.ensureAvailableBytesInPage : return 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i14 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i14 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i15 = $i14 - $i13
org.apache.pdfbox.io.ScratchFileBuffer.write : $i15 = $i14 - $i13 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : i2 = staticinvoke <java.lang.Math: int min(int,int)>(i19, $i15)
org.apache.pdfbox.io.ScratchFileBuffer.write : i2 = staticinvoke <java.lang.Math: int min(int,int)>(i19, $i15) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i16 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i20, $r2, $i16, i2)
org.apache.pdfbox.io.ScratchFileBuffer.write : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, i20, $r2, $i16, i2) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i17 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i17 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i18 = $i17 + i2
org.apache.pdfbox.io.ScratchFileBuffer.write : $i18 = $i17 + i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i18
org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i18 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean currentPageContentChanged> = 1
org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean currentPageContentChanged> = 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : i20 = i20 + i2
org.apache.pdfbox.io.ScratchFileBuffer.write : i20 = i20 + i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : i19 = i19 - i2
org.apache.pdfbox.io.ScratchFileBuffer.write : i19 = i19 - i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : goto [?= (branch)]
org.apache.pdfbox.io.ScratchFileBuffer.write : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.write : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l4 = (long) $i3
org.apache.pdfbox.io.ScratchFileBuffer.write : $l4 = (long) $i3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l7 = $l5 + $l4
org.apache.pdfbox.io.ScratchFileBuffer.write : $l7 = $l5 + $l4 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.write : $l6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $b8 = $l7 cmp $l6
org.apache.pdfbox.io.ScratchFileBuffer.write : $b8 = $l7 cmp $l6 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : if $b8 <= 0
org.apache.pdfbox.io.ScratchFileBuffer.write : if $b8 <= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.write : $l11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.write : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l10 = (long) $i9
org.apache.pdfbox.io.ScratchFileBuffer.write : $l10 = (long) $i9 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : $l12 = $l11 + $l10
org.apache.pdfbox.io.ScratchFileBuffer.write : $l12 = $l11 + $l10 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> = $l12
org.apache.pdfbox.io.ScratchFileBuffer.write : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> = $l12 >>>>>>>> org.apache.pdfbox.cos.COSOutputStream.close : specialinvoke r0.<java.io.FilterOutputStream: void close()>()
org.apache.pdfbox.cos.COSOutputStream.close : specialinvoke r0.<java.io.FilterOutputStream: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : $r2 = r0.<org.apache.pdfbox.cos.COSStream$1: org.apache.pdfbox.cos.COSStream this$0>
org.apache.pdfbox.cos.COSStream$1.close : $r2 = r0.<org.apache.pdfbox.cos.COSStream$1: org.apache.pdfbox.cos.COSStream this$0> >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LENGTH>
org.apache.pdfbox.cos.COSStream$1.close : $r3 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName LENGTH> >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : $r1 = r0.<org.apache.pdfbox.cos.COSStream$1: org.apache.pdfbox.cos.COSStream this$0>
org.apache.pdfbox.cos.COSStream$1.close : $r1 = r0.<org.apache.pdfbox.cos.COSStream$1: org.apache.pdfbox.cos.COSStream this$0> >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : $r4 = staticinvoke <org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess access$000(org.apache.pdfbox.cos.COSStream)>($r1)
org.apache.pdfbox.cos.COSStream$1.close : $r4 = staticinvoke <org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess access$000(org.apache.pdfbox.cos.COSStream)>($r1) >>>>>>>> org.apache.pdfbox.cos.COSStream.access$000 : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.access$000 : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.access$000 : return $r1
org.apache.pdfbox.cos.COSStream.access$000 : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : $l0 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccess: long length()>()
org.apache.pdfbox.cos.COSStream$1.close : $l0 = interfaceinvoke $r4.<org.apache.pdfbox.io.RandomAccess: long length()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.length : $l0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.length : $l0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.length : return $l0
org.apache.pdfbox.io.ScratchFileBuffer.length : return $l0 >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : $i1 = (int) $l0
org.apache.pdfbox.cos.COSStream$1.close : $i1 = (int) $l0 >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: void setInt(org.apache.pdfbox.cos.COSName,int)>($r3, $i1)
org.apache.pdfbox.cos.COSStream$1.close : virtualinvoke $r2.<org.apache.pdfbox.cos.COSStream: void setInt(org.apache.pdfbox.cos.COSName,int)>($r3, $i1) >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : $r5 = r0.<org.apache.pdfbox.cos.COSStream$1: org.apache.pdfbox.cos.COSStream this$0>
org.apache.pdfbox.cos.COSStream$1.close : $r5 = r0.<org.apache.pdfbox.cos.COSStream$1: org.apache.pdfbox.cos.COSStream this$0> >>>>>>>> org.apache.pdfbox.cos.COSStream$1.close : staticinvoke <org.apache.pdfbox.cos.COSStream: boolean access$102(org.apache.pdfbox.cos.COSStream,boolean)>($r5, 0)
org.apache.pdfbox.cos.COSStream$1.close : staticinvoke <org.apache.pdfbox.cos.COSStream: boolean access$102(org.apache.pdfbox.cos.COSStream,boolean)>($r5, 0) >>>>>>>> org.apache.pdfbox.cos.COSStream.access$102 : r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> = z0
org.apache.pdfbox.cos.COSStream.access$102 : r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> = z0 >>>>>>>> org.apache.pdfbox.cos.COSStream.access$102 : return z0
org.apache.pdfbox.cos.COSStream.access$102 : return z0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream>
org.apache.pdfbox.pdmodel.common.PDStream.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.getCOSObject : return $r1
org.apache.pdfbox.pdmodel.common.PDStream.getCOSObject : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getPDStream : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.pdmodel.common.PDStream functionStream>
org.apache.pdfbox.pdmodel.common.function.PDFunction.getPDStream : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.pdmodel.common.PDStream functionStream> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getPDStream : return $r1
org.apache.pdfbox.pdmodel.common.function.PDFunction.getPDStream : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : $r3 = new java.io.ByteArrayOutputStream
org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : $r3 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : specialinvoke $r3.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : r6 = null
org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : r6 = null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : r6 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSInputStream createInputStream()>()
org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : r6 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSInputStream createInputStream()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream>
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r1 = r0.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream stream> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSInputStream createInputStream()>()
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : $r2 = virtualinvoke $r1.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.cos.COSInputStream createInputStream()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>()
org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void checkClosed()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.checkClosed : $r2 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.checkClosed : $r2 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.checkClosed : $z0 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccess: boolean isClosed()>()
org.apache.pdfbox.cos.COSStream.checkClosed : $z0 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccess: boolean isClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isClosed : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.isClosed : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isClosed : if $r1 != null
org.apache.pdfbox.io.ScratchFileBuffer.isClosed : if $r1 != null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isClosed : $z0 = 0
org.apache.pdfbox.io.ScratchFileBuffer.isClosed : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isClosed : return $z0
org.apache.pdfbox.io.ScratchFileBuffer.isClosed : return $z0 >>>>>>>> org.apache.pdfbox.cos.COSStream.checkClosed : if $z0 == 0
org.apache.pdfbox.cos.COSStream.checkClosed : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting>
org.apache.pdfbox.cos.COSStream.createInputStream : $z0 = r0.<org.apache.pdfbox.cos.COSStream: boolean isWriting> >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : if $z0 == 0
org.apache.pdfbox.cos.COSStream.createInputStream : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void ensureRandomAccessExists(boolean)>(1)
org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke r0.<org.apache.pdfbox.cos.COSStream: void ensureRandomAccessExists(boolean)>(1) >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : if $r1 != null
org.apache.pdfbox.cos.COSStream.ensureRandomAccessExists : if $r1 != null >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $r2 = new org.apache.pdfbox.io.RandomAccessInputStream
org.apache.pdfbox.cos.COSStream.createInputStream : $r2 = new org.apache.pdfbox.io.RandomAccessInputStream >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $r3 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.createInputStream : $r3 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke $r2.<org.apache.pdfbox.io.RandomAccessInputStream: void <init>(org.apache.pdfbox.io.RandomAccessRead)>($r3)
org.apache.pdfbox.cos.COSStream.createInputStream : specialinvoke $r2.<org.apache.pdfbox.io.RandomAccessInputStream: void <init>(org.apache.pdfbox.io.RandomAccessRead)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $r4 = specialinvoke r0.<org.apache.pdfbox.cos.COSStream: java.util.List getFilterList()>()
org.apache.pdfbox.cos.COSStream.createInputStream : $r4 = specialinvoke r0.<org.apache.pdfbox.cos.COSStream: java.util.List getFilterList()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $r5 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSStream.createInputStream : $r5 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : $r6 = staticinvoke <org.apache.pdfbox.cos.COSInputStream: org.apache.pdfbox.cos.COSInputStream create(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.InputStream,org.apache.pdfbox.io.ScratchFile)>($r4, r0, $r2, $r5)
org.apache.pdfbox.cos.COSStream.createInputStream : $r6 = staticinvoke <org.apache.pdfbox.cos.COSInputStream: org.apache.pdfbox.cos.COSInputStream create(java.util.List,org.apache.pdfbox.cos.COSDictionary,java.io.InputStream,org.apache.pdfbox.io.ScratchFile)>($r4, r0, $r2, $r5) >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : $r5 = new java.util.ArrayList
org.apache.pdfbox.cos.COSInputStream.create : $r5 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : specialinvoke $r5.<java.util.ArrayList: void <init>()>()
org.apache.pdfbox.cos.COSInputStream.create : specialinvoke $r5.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : r16 = r2
org.apache.pdfbox.cos.COSInputStream.create : r16 = r2 >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>()
org.apache.pdfbox.cos.COSInputStream.create : $z0 = interfaceinvoke r0.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : if $z0 == 0
org.apache.pdfbox.cos.COSInputStream.create : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : goto [?= $r6 = new org.apache.pdfbox.cos.COSInputStream]
org.apache.pdfbox.cos.COSInputStream.create : goto [?= $r6 = new org.apache.pdfbox.cos.COSInputStream] >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : $r6 = new org.apache.pdfbox.cos.COSInputStream
org.apache.pdfbox.cos.COSInputStream.create : $r6 = new org.apache.pdfbox.cos.COSInputStream >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : specialinvoke $r6.<org.apache.pdfbox.cos.COSInputStream: void <init>(java.io.InputStream,java.util.List)>(r16, $r5)
org.apache.pdfbox.cos.COSInputStream.create : specialinvoke $r6.<org.apache.pdfbox.cos.COSInputStream: void <init>(java.io.InputStream,java.util.List)>(r16, $r5) >>>>>>>> org.apache.pdfbox.cos.COSInputStream.create : return $r6
org.apache.pdfbox.cos.COSInputStream.create : return $r6 >>>>>>>> org.apache.pdfbox.cos.COSStream.createInputStream : return $r6
org.apache.pdfbox.cos.COSStream.createInputStream : return $r6 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : return $r2
org.apache.pdfbox.pdmodel.common.PDStream.createInputStream : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : staticinvoke <org.apache.pdfbox.io.IOUtils: long copy(java.io.InputStream,java.io.OutputStream)>(r6, $r3)
org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : staticinvoke <org.apache.pdfbox.io.IOUtils: long copy(java.io.InputStream,java.io.OutputStream)>(r6, $r3) >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : r2 = newarray (byte)[4096]
org.apache.pdfbox.io.IOUtils.copy : r2 = newarray (byte)[4096] >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : l2 = 0L
org.apache.pdfbox.io.IOUtils.copy : l2 = 0L >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : $i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2)
org.apache.pdfbox.io.IOUtils.copy : $i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2) >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessInputStream: void restorePosition()>()
org.apache.pdfbox.io.RandomAccessInputStream.read : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessInputStream: void restorePosition()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : $r1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input>
org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : $r1 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : $l0 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position>
org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : $l0 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>($l0)
org.apache.pdfbox.io.RandomAccessInputStream.restorePosition : interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: void seek(long)>($l0) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.seek : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b3 = l0 cmp $l2
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b3 = l0 cmp $l2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b3 <= 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b3 <= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b4 = l0 cmp 0L
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b4 = l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b4 >= 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b4 >= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b6 = l0 cmp $l5
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b6 = l0 cmp $l5 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b6 < 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b6 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l23 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l23 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i21 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i21 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l22 = (long) $i21
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l22 = (long) $i21 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l24 = $l23 + $l22
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l24 = $l23 + $l22 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $b25 = l0 cmp $l24
org.apache.pdfbox.io.ScratchFileBuffer.seek : $b25 = l0 cmp $l24 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b25 > 0
org.apache.pdfbox.io.ScratchFileBuffer.seek : if $b25 > 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l26 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l26 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $l27 = l0 - $l26
org.apache.pdfbox.io.ScratchFileBuffer.seek : $l27 = l0 - $l26 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : $i28 = (int) $l27
org.apache.pdfbox.io.ScratchFileBuffer.seek : $i28 = (int) $l27 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i28
org.apache.pdfbox.io.ScratchFileBuffer.seek : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i28 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.seek : goto [?= return]
org.apache.pdfbox.io.ScratchFileBuffer.seek : goto [?= return] >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $r2 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input>
org.apache.pdfbox.io.RandomAccessInputStream.read : $r2 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $z0 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>()
org.apache.pdfbox.io.RandomAccessInputStream.read : $z0 = interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l1 = (long) $i0
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l1 = (long) $i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l4 = $l2 + $l1
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l4 = $l2 + $l1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $l3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $b5 = $l4 cmp $l3
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $b5 = $l4 cmp $l3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : if $b5 < 0
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : if $b5 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $z0 = 0
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : return $z0
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : return $z0 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : if $z0 == 0
org.apache.pdfbox.io.RandomAccessInputStream.read : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $r3 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input>
org.apache.pdfbox.io.RandomAccessInputStream.read : $r3 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: org.apache.pdfbox.io.RandomAccessRead input> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : i2 = interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: int read(byte[],int,int)>(r1, i0, i1)
org.apache.pdfbox.io.RandomAccessInputStream.read : i2 = interfaceinvoke $r3.<org.apache.pdfbox.io.RandomAccessRead: int read(byte[],int,int)>(r1, i0, i1) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>()
org.apache.pdfbox.io.ScratchFileBuffer.read : specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void checkClosed()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.read : $l5 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l4 = (long) $i3
org.apache.pdfbox.io.ScratchFileBuffer.read : $l4 = (long) $i3 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l7 = $l5 + $l4
org.apache.pdfbox.io.ScratchFileBuffer.read : $l7 = $l5 + $l4 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.read : $l6 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $b8 = $l7 cmp $l6
org.apache.pdfbox.io.ScratchFileBuffer.read : $b8 = $l7 cmp $l6 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : if $b8 < 0
org.apache.pdfbox.io.ScratchFileBuffer.read : if $b8 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l15 = (long) i1
org.apache.pdfbox.io.ScratchFileBuffer.read : $l15 = (long) i1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size>
org.apache.pdfbox.io.ScratchFileBuffer.read : $l13 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset>
org.apache.pdfbox.io.ScratchFileBuffer.read : $l11 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i9 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l10 = (long) $i9
org.apache.pdfbox.io.ScratchFileBuffer.read : $l10 = (long) $i9 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l12 = $l11 + $l10
org.apache.pdfbox.io.ScratchFileBuffer.read : $l12 = $l11 + $l10 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l14 = $l13 - $l12
org.apache.pdfbox.io.ScratchFileBuffer.read : $l14 = $l13 - $l12 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $l16 = staticinvoke <java.lang.Math: long min(long,long)>($l15, $l14)
org.apache.pdfbox.io.ScratchFileBuffer.read : $l16 = staticinvoke <java.lang.Math: long min(long,long)>($l15, $l14) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i23 = (int) $l16
org.apache.pdfbox.io.ScratchFileBuffer.read : i23 = (int) $l16 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i24 = 0
org.apache.pdfbox.io.ScratchFileBuffer.read : i24 = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i25 = i0
org.apache.pdfbox.io.ScratchFileBuffer.read : i25 = i0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : if i23 <= 0
org.apache.pdfbox.io.ScratchFileBuffer.read : if i23 <= 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $z0 = specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean ensureAvailableBytesInPage(boolean)>(0)
org.apache.pdfbox.io.ScratchFileBuffer.read : $z0 = specialinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: boolean ensureAvailableBytesInPage(boolean)>(0) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : if $z0 != 0
org.apache.pdfbox.io.ScratchFileBuffer.read : if $z0 != 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i18 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageSize> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i17 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i17 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i19 = $i18 - $i17
org.apache.pdfbox.io.ScratchFileBuffer.read : $i19 = $i18 - $i17 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i2 = staticinvoke <java.lang.Math: int min(int,int)>(i23, $i19)
org.apache.pdfbox.io.ScratchFileBuffer.read : i2 = staticinvoke <java.lang.Math: int min(int,int)>(i23, $i19) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i20 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i20 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i20, r1, i25, i2)
org.apache.pdfbox.io.ScratchFileBuffer.read : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, $i20, r1, i25, i2) >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i21 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage>
org.apache.pdfbox.io.ScratchFileBuffer.read : $i21 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : $i22 = $i21 + i2
org.apache.pdfbox.io.ScratchFileBuffer.read : $i22 = $i21 + i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i22
org.apache.pdfbox.io.ScratchFileBuffer.read : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = $i22 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i24 = i24 + i2
org.apache.pdfbox.io.ScratchFileBuffer.read : i24 = i24 + i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i25 = i25 + i2
org.apache.pdfbox.io.ScratchFileBuffer.read : i25 = i25 + i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : i23 = i23 - i2
org.apache.pdfbox.io.ScratchFileBuffer.read : i23 = i23 - i2 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : goto [?= (branch)]
org.apache.pdfbox.io.ScratchFileBuffer.read : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.read : return i24
org.apache.pdfbox.io.ScratchFileBuffer.read : return i24 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $l4 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position>
org.apache.pdfbox.io.RandomAccessInputStream.read : $l4 = r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position> >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $l3 = (long) i2
org.apache.pdfbox.io.RandomAccessInputStream.read : $l3 = (long) i2 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : $l5 = $l4 + $l3
org.apache.pdfbox.io.RandomAccessInputStream.read : $l5 = $l4 + $l3 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position> = $l5
org.apache.pdfbox.io.RandomAccessInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessInputStream: long position> = $l5 >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : return i2
org.apache.pdfbox.io.RandomAccessInputStream.read : return i2 >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : if -1 == $i0
org.apache.pdfbox.io.IOUtils.copy : if -1 == $i0 >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i0)
org.apache.pdfbox.io.IOUtils.copy : virtualinvoke r1.<java.io.OutputStream: void write(byte[],int,int)>(r2, 0, $i0) >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : $l1 = (long) $i0
org.apache.pdfbox.io.IOUtils.copy : $l1 = (long) $i0 >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : l2 = l2 + $l1
org.apache.pdfbox.io.IOUtils.copy : l2 = l2 + $l1 >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : goto [?= $i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2)]
org.apache.pdfbox.io.IOUtils.copy : goto [?= $i0 = virtualinvoke r0.<java.io.InputStream: int read(byte[])>(r2)] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $z0 = 1
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : $z0 = 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.isEOF : goto [?= return $z0]
org.apache.pdfbox.io.ScratchFileBuffer.isEOF : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.io.RandomAccessInputStream.read : return -1
org.apache.pdfbox.io.RandomAccessInputStream.read : return -1 >>>>>>>> org.apache.pdfbox.io.IOUtils.copy : return l2
org.apache.pdfbox.io.IOUtils.copy : return l2 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : if r6 == null
org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : if r6 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : virtualinvoke r6.<java.io.InputStream: void close()>()
org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : virtualinvoke r6.<java.io.InputStream: void close()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : goto [?= $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()]
org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : goto [?= $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()] >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : $r4 = virtualinvoke $r3.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : return $r4
org.apache.pdfbox.pdmodel.common.PDStream.toByteArray : return $r4 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : $r2 = new org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : $r2 = new org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : specialinvoke $r2.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: void <init>()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : specialinvoke $r2.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.Parser: void parse(java.lang.CharSequence,org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler)>(r0, $r2)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.Parser: void parse(java.lang.CharSequence,org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler)>(r0, $r2) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser.parse : $r3 = new org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer
org.apache.pdfbox.pdmodel.common.function.type4.Parser.parse : $r3 = new org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser.parse : specialinvoke $r3.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void <init>(java.lang.CharSequence,org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler,org.apache.pdfbox.pdmodel.common.function.type4.Parser$1)>(r0, r1, null)
org.apache.pdfbox.pdmodel.common.function.type4.Parser.parse : specialinvoke $r3.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void <init>(java.lang.CharSequence,org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler,org.apache.pdfbox.pdmodel.common.function.type4.Parser$1)>(r0, r1, null) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser.parse : staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void access$100(org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer)>($r3)
org.apache.pdfbox.pdmodel.common.function.type4.Parser.parse : staticinvoke <org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void access$100(org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.access$100 : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void tokenize()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.access$100 : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void tokenize()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $i0 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: int index>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $i0 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: int index> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.CharSequence input>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.CharSequence input> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $i1 = interfaceinvoke $r1.<java.lang.CharSequence: int length()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : if $i0 >= $i1
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : if $i0 >= $i1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $z0 = 1
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : goto [?= return $z0]
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : return $z0
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : return $z0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : if $z0 == 0
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : virtualinvoke $r1.<java.lang.StringBuilder: void setLength(int)>(0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State nextState()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State nextState()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : c0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char currentChar()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : c0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char currentChar()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.currentChar : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.CharSequence input>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.currentChar : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.CharSequence input> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.currentChar : $i0 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: int index>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.currentChar : $i0 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: int index> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.currentChar : $c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.currentChar : $c1 = interfaceinvoke $r1.<java.lang.CharSequence: char charAt(int)>($i0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.currentChar : return $c1
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.currentChar : return $c1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : lookupswitch(c0) {     case 0:
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : lookupswitch(c0) {     case 0: >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : $r4 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$State: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State TOKEN>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : $r4 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$State: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State TOKEN> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state> = $r4
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state> = $r4 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : $r5 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : $r5 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : return $r5
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : return $r5 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $r4 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$1: int[] $SwitchMap$org$apache$pdfbox$pdmodel$common$function$type4$Parser$State>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $r4 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$1: int[] $SwitchMap$org$apache$pdfbox$pdmodel$common$function$type4$Parser$State> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $r3 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $r3 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $i0 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$State: int ordinal()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $i0 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$State: int ordinal()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $i1 = $r4[$i0]
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : $i1 = $r4[$i0] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : tableswitch($i1) {     case 1:
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : tableswitch($i1) {     case 1: >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void scanToken()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void scanToken()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $z0 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean $assertionsDisabled>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $z0 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean $assertionsDisabled> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : if $z0 != 0
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : c1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char currentChar()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : c1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char currentChar()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : lookupswitch(c1) {     case 123:
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : lookupswitch(c1) {     case 123: >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r4 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r4 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r3 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r3 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : interfaceinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler: void token(java.lang.CharSequence)>($r3)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : interfaceinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler: void token(java.lang.CharSequence)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : r2 = interfaceinvoke r1.<java.lang.CharSequence: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: void token(java.lang.String)>(r2)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: void token(java.lang.String)>(r2) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r2 = "{"
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r2 = "{" >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : if $z0 == 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r11 = new org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r11 = new org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : specialinvoke $r11.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void <init>()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : specialinvoke $r11.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void <init>()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r12 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getCurrentSequence()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r12 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getCurrentSequence()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getCurrentSequence : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.Stack seqStack>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getCurrentSequence : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.Stack seqStack> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getCurrentSequence : $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object peek()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getCurrentSequence : $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object peek()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getCurrentSequence : $r3 = (org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence) $r2
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getCurrentSequence : $r3 = (org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence) $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getCurrentSequence : return $r3
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getCurrentSequence : return $r3 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : virtualinvoke $r12.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void addProc(org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence)>($r11)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : virtualinvoke $r12.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void addProc(org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence)>($r11) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addProc : $r2 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: java.util.List instructions>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addProc : $r2 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: java.util.List instructions> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addProc : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addProc : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r13 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.Stack seqStack>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r13 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.Stack seqStack> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : virtualinvoke $r13.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r11)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : virtualinvoke $r13.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r11) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : goto [?= return]
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : goto [?= return] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char nextChar()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char nextChar()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : $i0 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: int index>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : $i0 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: int index> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : $i1 = $i0 + 1
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : $i1 = $i0 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: int index> = $i1
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: int index> = $i1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : if $z0 != 0
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : $c2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char currentChar()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : $c2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char currentChar()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : return $c2
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : return $c2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : goto [?= $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>()]
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : goto [?= $z0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>()] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : $r3 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$State: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State WHITESPACE>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : $r3 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$State: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State WHITESPACE> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state> = $r3
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state> = $r3 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : goto [?= $r5 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state>]
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextState : goto [?= $r5 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$State state>] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void scanWhitespace()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.tokenize : specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: void scanWhitespace()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $z0 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean $assertionsDisabled>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $z0 = <org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean $assertionsDisabled> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : if $z0 != 0
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $c1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char currentChar()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $c1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char currentChar()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $z1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $z1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : if $z1 == 0
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : c0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char nextChar()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : c0 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char nextChar()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : lookupswitch(c0) {     case 0:
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : lookupswitch(c0) {     case 0: >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : goto [?= $r4 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler>]
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : goto [?= $r4 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler>] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $r4 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $r4 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $r3 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : $r3 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : interfaceinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler: void whitespace(java.lang.CharSequence)>($r3)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanWhitespace : interfaceinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler: void whitespace(java.lang.CharSequence)>($r3) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $z1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $z1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : if $z1 == 0
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : c2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char nextChar()>()
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : c2 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: char nextChar()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : lookupswitch(c2) {     case 0:
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : lookupswitch(c2) {     case 0: >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r7 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r7 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c2) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : goto [?= $z1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>()]
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : goto [?= $z1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: boolean hasMore()>()] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : goto [?= $r6 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler>]
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : goto [?= $r6 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler>] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r6 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r6 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler handler> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r5 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer>
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : $r5 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer: java.lang.StringBuilder buffer> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : interfaceinvoke $r6.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler: void token(java.lang.CharSequence)>($r5)
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.scanToken : interfaceinvoke $r6.<org.apache.pdfbox.pdmodel.common.function.type4.Parser$SyntaxHandler: void token(java.lang.CharSequence)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r3 = "}"
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r3 = "}" >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : if $z1 == 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r4 = <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.regex.Pattern INTEGER_PATTERN>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r4 = <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.regex.Pattern INTEGER_PATTERN> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : r16 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : r16 = virtualinvoke $r4.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $z2 = virtualinvoke r16.<java.util.regex.Matcher: boolean matches()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $z2 = virtualinvoke r16.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : if $z2 == 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r5 = <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.regex.Pattern REAL_PATTERN>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r5 = <org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.regex.Pattern REAL_PATTERN> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : r17 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : r17 = virtualinvoke $r5.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $z3 = virtualinvoke r17.<java.util.regex.Matcher: boolean matches()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $z3 = virtualinvoke r17.<java.util.regex.Matcher: boolean matches()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : if $z3 == 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r6 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getCurrentSequence()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r6 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getCurrentSequence()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : virtualinvoke $r6.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void addName(java.lang.String)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : virtualinvoke $r6.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void addName(java.lang.String)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addName : $r2 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: java.util.List instructions>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addName : $r2 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: java.util.List instructions> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addName : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.addName : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r9 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.Stack seqStack>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : $r9 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: java.util.Stack seqStack> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : virtualinvoke $r9.<java.util.Stack: java.lang.Object pop()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.token : virtualinvoke $r9.<java.util.Stack: java.lang.Object pop()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $z0 = 0
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.hasMore : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : return 4
org.apache.pdfbox.pdmodel.common.function.type4.Parser$Tokenizer.nextChar : return 4 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getInstructionSequence()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : $r3 = virtualinvoke $r2.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence getInstructionSequence()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getInstructionSequence : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence mainSequence>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getInstructionSequence : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence mainSequence> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getInstructionSequence : return $r1
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.getInstructionSequence : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : return $r3
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequenceBuilder.parse : return $r3 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $r4 = new org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $r4 = new org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $r5 = <org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: org.apache.pdfbox.pdmodel.common.function.type4.Operators OPERATORS>
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $r5 = <org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: org.apache.pdfbox.pdmodel.common.function.type4.Operators OPERATORS> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : specialinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: void <init>(org.apache.pdfbox.pdmodel.common.function.type4.Operators)>($r5)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : specialinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: void <init>(org.apache.pdfbox.pdmodel.common.function.type4.Operators)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : i1 = 0
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : i1 = 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $i0 = lengthof r1
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $i0 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : if i1 >= $i0
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : if i1 >= $i0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : r19 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: org.apache.pdfbox.pdmodel.common.PDRange getDomainForInput(int)>(i1)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : r19 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: org.apache.pdfbox.pdmodel.common.PDRange getDomainForInput(int)>(i1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainForInput : r1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray getDomainValues()>()
org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainForInput : r1 = specialinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray getDomainValues()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray domain>
org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray domain> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : if $r1 != null
org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : if $r1 != null >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSDictionary getCOSObject()>()
org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSDictionary getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.pdmodel.common.PDStream functionStream>
org.apache.pdfbox.pdmodel.common.function.PDFunction.getCOSObject : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.pdmodel.common.PDStream functionStream> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getCOSObject : if $r1 == null
org.apache.pdfbox.pdmodel.common.function.PDFunction.getCOSObject : if $r1 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getCOSObject : $r3 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.pdmodel.common.PDStream functionStream>
org.apache.pdfbox.pdmodel.common.function.PDFunction.getCOSObject : $r3 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.pdmodel.common.PDStream functionStream> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getCOSObject : $r4 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getCOSObject()>()
org.apache.pdfbox.pdmodel.common.function.PDFunction.getCOSObject : $r4 = virtualinvoke $r3.<org.apache.pdfbox.pdmodel.common.PDStream: org.apache.pdfbox.cos.COSStream getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getCOSObject : return $r4
org.apache.pdfbox.pdmodel.common.function.PDFunction.getCOSObject : return $r4 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DOMAIN>
org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName DOMAIN> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : $r5 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r4)
org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : $r5 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r4) >>>>>>>> org.apache.pdfbox.cos.COSName.equals : $z2 = 1
org.apache.pdfbox.cos.COSName.equals : $z2 = 1 >>>>>>>> org.apache.pdfbox.cos.COSName.equals : goto [?= return $z2]
org.apache.pdfbox.cos.COSName.equals : goto [?= return $z2] >>>>>>>> org.apache.pdfbox.util.SmallMap.findKey : return i1
org.apache.pdfbox.util.SmallMap.findKey : return i1 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr>
org.apache.pdfbox.util.SmallMap.get : $r2 = r0.<org.apache.pdfbox.util.SmallMap: java.lang.Object[] mapArr> >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $i1 = i0 + 1
org.apache.pdfbox.util.SmallMap.get : $i1 = i0 + 1 >>>>>>>> org.apache.pdfbox.util.SmallMap.get : $r3 = $r2[$i1]
org.apache.pdfbox.util.SmallMap.get : $r3 = $r2[$i1] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : $r6 = (org.apache.pdfbox.cos.COSArray) $r5
org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : $r6 = (org.apache.pdfbox.cos.COSArray) $r5 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray domain> = $r6
org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray domain> = $r6 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : $r2 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray domain>
org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : $r2 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray domain> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : return $r2
org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainValues : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainForInput : $r2 = new org.apache.pdfbox.pdmodel.common.PDRange
org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainForInput : $r2 = new org.apache.pdfbox.pdmodel.common.PDRange >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainForInput : specialinvoke $r2.<org.apache.pdfbox.pdmodel.common.PDRange: void <init>(org.apache.pdfbox.cos.COSArray,int)>(r1, i0)
org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainForInput : specialinvoke $r2.<org.apache.pdfbox.pdmodel.common.PDRange: void <init>(org.apache.pdfbox.cos.COSArray,int)>(r1, i0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainForInput : return $r2
org.apache.pdfbox.pdmodel.common.function.PDFunction.getDomainForInput : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $f5 = r1[i1]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $f5 = r1[i1] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $f6 = virtualinvoke r19.<org.apache.pdfbox.pdmodel.common.PDRange: float getMin()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $f6 = virtualinvoke r19.<org.apache.pdfbox.pdmodel.common.PDRange: float getMin()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRange.getMin : $r2 = r0.<org.apache.pdfbox.pdmodel.common.PDRange: org.apache.pdfbox.cos.COSArray rangeArray>
org.apache.pdfbox.pdmodel.common.PDRange.getMin : $r2 = r0.<org.apache.pdfbox.pdmodel.common.PDRange: org.apache.pdfbox.cos.COSArray rangeArray> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRange.getMin : $i0 = r0.<org.apache.pdfbox.pdmodel.common.PDRange: int startingIndex>
org.apache.pdfbox.pdmodel.common.PDRange.getMin : $i0 = r0.<org.apache.pdfbox.pdmodel.common.PDRange: int startingIndex> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRange.getMin : $i1 = $i0 * 2
org.apache.pdfbox.pdmodel.common.PDRange.getMin : $i1 = $i0 * 2 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRange.getMin : $r3 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>($i1)
org.apache.pdfbox.pdmodel.common.PDRange.getMin : $r3 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>($i1) >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.getObject : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0)
org.apache.pdfbox.cos.COSArray.getObject : r4 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $z0 = r4 instanceof org.apache.pdfbox.cos.COSObject
org.apache.pdfbox.cos.COSArray.getObject : $z0 = r4 instanceof org.apache.pdfbox.cos.COSObject >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : if $z0 == 0
org.apache.pdfbox.cos.COSArray.getObject : if $z0 == 0 >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $z1 = r4 instanceof org.apache.pdfbox.cos.COSNull
org.apache.pdfbox.cos.COSArray.getObject : $z1 = r4 instanceof org.apache.pdfbox.cos.COSNull >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : if $z1 == 0
org.apache.pdfbox.cos.COSArray.getObject : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : $r2 = (org.apache.pdfbox.cos.COSBase) r4
org.apache.pdfbox.cos.COSArray.getObject : $r2 = (org.apache.pdfbox.cos.COSBase) r4 >>>>>>>> org.apache.pdfbox.cos.COSArray.getObject : return $r2
org.apache.pdfbox.cos.COSArray.getObject : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRange.getMin : r1 = (org.apache.pdfbox.cos.COSNumber) $r3
org.apache.pdfbox.pdmodel.common.PDRange.getMin : r1 = (org.apache.pdfbox.cos.COSNumber) $r3 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRange.getMin : $f0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSNumber: float floatValue()>()
org.apache.pdfbox.pdmodel.common.PDRange.getMin : $f0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSNumber: float floatValue()>() >>>>>>>> org.apache.pdfbox.cos.COSFloat.floatValue : $r1 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value>
org.apache.pdfbox.cos.COSFloat.floatValue : $r1 = r0.<org.apache.pdfbox.cos.COSFloat: java.math.BigDecimal value> >>>>>>>> org.apache.pdfbox.cos.COSFloat.floatValue : $f0 = virtualinvoke $r1.<java.math.BigDecimal: float floatValue()>()
org.apache.pdfbox.cos.COSFloat.floatValue : $f0 = virtualinvoke $r1.<java.math.BigDecimal: float floatValue()>() >>>>>>>> org.apache.pdfbox.cos.COSFloat.floatValue : return $f0
org.apache.pdfbox.cos.COSFloat.floatValue : return $f0 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRange.getMin : return $f0
org.apache.pdfbox.pdmodel.common.PDRange.getMin : return $f0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $f7 = virtualinvoke r19.<org.apache.pdfbox.pdmodel.common.PDRange: float getMax()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $f7 = virtualinvoke r19.<org.apache.pdfbox.pdmodel.common.PDRange: float getMax()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRange.getMax : $r2 = r0.<org.apache.pdfbox.pdmodel.common.PDRange: org.apache.pdfbox.cos.COSArray rangeArray>
org.apache.pdfbox.pdmodel.common.PDRange.getMax : $r2 = r0.<org.apache.pdfbox.pdmodel.common.PDRange: org.apache.pdfbox.cos.COSArray rangeArray> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRange.getMax : $i0 = r0.<org.apache.pdfbox.pdmodel.common.PDRange: int startingIndex>
org.apache.pdfbox.pdmodel.common.PDRange.getMax : $i0 = r0.<org.apache.pdfbox.pdmodel.common.PDRange: int startingIndex> >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRange.getMax : $i1 = $i0 * 2
org.apache.pdfbox.pdmodel.common.PDRange.getMax : $i1 = $i0 * 2 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRange.getMax : $i2 = $i1 + 1
org.apache.pdfbox.pdmodel.common.PDRange.getMax : $i2 = $i1 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRange.getMax : $r3 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>($i2)
org.apache.pdfbox.pdmodel.common.PDRange.getMax : $r3 = virtualinvoke $r2.<org.apache.pdfbox.cos.COSArray: org.apache.pdfbox.cos.COSBase getObject(int)>($i2) >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRange.getMax : r1 = (org.apache.pdfbox.cos.COSNumber) $r3
org.apache.pdfbox.pdmodel.common.PDRange.getMax : r1 = (org.apache.pdfbox.cos.COSNumber) $r3 >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRange.getMax : $f0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSNumber: float floatValue()>()
org.apache.pdfbox.pdmodel.common.PDRange.getMax : $f0 = virtualinvoke r1.<org.apache.pdfbox.cos.COSNumber: float floatValue()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.PDRange.getMax : return $f0
org.apache.pdfbox.pdmodel.common.PDRange.getMax : return $f0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : f8 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: float clipToRange(float,float,float)>($f5, $f6, $f7)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : f8 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: float clipToRange(float,float,float)>($f5, $f6, $f7) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.clipToRange : $b0 = f0 cmpg f1
org.apache.pdfbox.pdmodel.common.function.PDFunction.clipToRange : $b0 = f0 cmpg f1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.clipToRange : if $b0 >= 0
org.apache.pdfbox.pdmodel.common.function.PDFunction.clipToRange : if $b0 >= 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.clipToRange : $b1 = f0 cmpl f2
org.apache.pdfbox.pdmodel.common.function.PDFunction.clipToRange : $b1 = f0 cmpl f2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.clipToRange : if $b1 <= 0
org.apache.pdfbox.pdmodel.common.function.PDFunction.clipToRange : if $b1 <= 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.clipToRange : return f0
org.apache.pdfbox.pdmodel.common.function.PDFunction.clipToRange : return f0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $r16 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $r16 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.getStack : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack stack>
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.getStack : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack stack> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.getStack : return $r1
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.getStack : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $r17 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f8)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $r17 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f8) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : virtualinvoke $r16.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r17)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : virtualinvoke $r16.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r17) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : i1 = i1 + 1
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : i1 = i1 + 1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : goto [?= $i0 = lengthof r1]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : goto [?= $i0 = lengthof r1] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $r6 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence instructions>
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $r6 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence instructions> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : virtualinvoke $r6.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)>($r4)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : virtualinvoke $r6.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)>($r4) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $r6 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: java.util.List instructions>
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $r6 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: java.util.List instructions> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r16 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r16 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if $z0 == 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r3 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r3 = interfaceinvoke r16.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $z3 = r3 instanceof java.lang.String
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $z3 = r3 instanceof java.lang.String >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if $z3 == 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r3)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : virtualinvoke r2.<java.util.Stack: java.lang.Object push(java.lang.Object)>(r3) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : goto [?= $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : goto [?= $z0 = interfaceinvoke r16.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if $z1 != 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $r7 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $r7 = virtualinvoke r2.<java.util.Stack: java.lang.Object peek()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $z2 = $r7 instanceof org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $z2 = $r7 instanceof org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if $z2 == 0
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if $z2 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $r8 = virtualinvoke r2.<java.util.Stack: java.lang.Object pop()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $r8 = virtualinvoke r2.<java.util.Stack: java.lang.Object pop()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r17 = (org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence) $r8
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r17 = (org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence) $r8 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : virtualinvoke r17.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : virtualinvoke r17.<org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence: void execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r4 = (java.lang.String) r3
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r4 = (java.lang.String) r3 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $r10 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: org.apache.pdfbox.pdmodel.common.function.type4.Operators getOperators()>()
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : $r10 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: org.apache.pdfbox.pdmodel.common.function.type4.Operators getOperators()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.getOperators : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: org.apache.pdfbox.pdmodel.common.function.type4.Operators operators>
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.getOperators : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: org.apache.pdfbox.pdmodel.common.function.type4.Operators operators> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.getOperators : return $r1
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.getOperators : return $r1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r5 = virtualinvoke $r10.<org.apache.pdfbox.pdmodel.common.function.type4.Operators: org.apache.pdfbox.pdmodel.common.function.type4.Operator getOperator(java.lang.String)>(r4)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : r5 = virtualinvoke $r10.<org.apache.pdfbox.pdmodel.common.function.type4.Operators: org.apache.pdfbox.pdmodel.common.function.type4.Operator getOperator(java.lang.String)>(r4) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Operators.getOperator : $r2 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Operators: java.util.Map operators>
org.apache.pdfbox.pdmodel.common.function.type4.Operators.getOperator : $r2 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.Operators: java.util.Map operators> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Operators.getOperator : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.Operators.getOperator : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Operators.getOperator : $r4 = (org.apache.pdfbox.pdmodel.common.function.type4.Operator) $r3
org.apache.pdfbox.pdmodel.common.function.type4.Operators.getOperator : $r4 = (org.apache.pdfbox.pdmodel.common.function.type4.Operator) $r3 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.Operators.getOperator : return $r4
org.apache.pdfbox.pdmodel.common.function.type4.Operators.getOperator : return $r4 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if r5 == null
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : if r5 == null >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : interfaceinvoke r5.<org.apache.pdfbox.pdmodel.common.function.type4.Operator: void execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)>(r1)
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : interfaceinvoke r5.<org.apache.pdfbox.pdmodel.common.function.type4.Operator: void execute(org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext)>(r1) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.lang.Number popNumber()>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : r2 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.lang.Number popNumber()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popNumber : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack stack>
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popNumber : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack stack> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popNumber : $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>()
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popNumber : $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popNumber : $r3 = (java.lang.Number) $r2
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popNumber : $r3 = (java.lang.Number) $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popNumber : return $r3
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popNumber : return $r3 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : r3 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.lang.Number popNumber()>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : r3 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.lang.Number popNumber()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : $z0 = r3 instanceof java.lang.Integer
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : $z0 = r3 instanceof java.lang.Integer >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : if $z0 == 0
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : $f0 = virtualinvoke r3.<java.lang.Number: float floatValue()>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : $f0 = virtualinvoke r3.<java.lang.Number: float floatValue()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : $f1 = virtualinvoke r2.<java.lang.Number: float floatValue()>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : $f1 = virtualinvoke r2.<java.lang.Number: float floatValue()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : f3 = $f0 + $f1
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : f3 = $f0 + $f1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : $r4 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>()
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : $r4 = virtualinvoke r1.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f3)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : $r5 = staticinvoke <java.lang.Float: java.lang.Float valueOf(float)>(f3) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : virtualinvoke $r4.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r5)
org.apache.pdfbox.pdmodel.common.function.type4.ArithmeticOperators$Add.execute : virtualinvoke $r4.<java.util.Stack: java.lang.Object push(java.lang.Object)>($r5) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : goto [?= (branch)]
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : goto [?= $z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()]
org.apache.pdfbox.pdmodel.common.function.type4.InstructionSequence.execute : goto [?= $z1 = virtualinvoke r2.<java.util.Stack: boolean isEmpty()>()] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : i2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: int getNumberOfOutputParameters()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : i2 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: int getNumberOfOutputParameters()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getNumberOfOutputParameters : $i0 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: int numberOfOutputValues>
org.apache.pdfbox.pdmodel.common.function.PDFunction.getNumberOfOutputParameters : $i0 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: int numberOfOutputValues> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getNumberOfOutputParameters : if $i0 != -1
org.apache.pdfbox.pdmodel.common.function.PDFunction.getNumberOfOutputParameters : if $i0 != -1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getNumberOfOutputParameters : r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray getRangeValues()>()
org.apache.pdfbox.pdmodel.common.function.PDFunction.getNumberOfOutputParameters : r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray getRangeValues()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray range>
org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray range> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : if $r1 != null
org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : if $r1 != null >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSDictionary getCOSObject()>()
org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : $r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSDictionary getCOSObject()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName RANGE>
org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : $r4 = <org.apache.pdfbox.cos.COSName: org.apache.pdfbox.cos.COSName RANGE> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : $r5 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r4)
org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : $r5 = virtualinvoke $r3.<org.apache.pdfbox.cos.COSDictionary: org.apache.pdfbox.cos.COSBase getDictionaryObject(org.apache.pdfbox.cos.COSName)>($r4) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : $r6 = (org.apache.pdfbox.cos.COSArray) $r5
org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : $r6 = (org.apache.pdfbox.cos.COSArray) $r5 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray range> = $r6
org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray range> = $r6 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : $r2 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray range>
org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : $r2 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray range> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : return $r2
org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeValues : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getNumberOfOutputParameters : $i2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: int size()>()
org.apache.pdfbox.pdmodel.common.function.PDFunction.getNumberOfOutputParameters : $i2 = virtualinvoke r1.<org.apache.pdfbox.cos.COSArray: int size()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.size : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects>
org.apache.pdfbox.cos.COSArray.size : $r1 = r0.<org.apache.pdfbox.cos.COSArray: java.util.List objects> >>>>>>>> org.apache.pdfbox.cos.COSArray.size : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.apache.pdfbox.cos.COSArray.size : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.apache.pdfbox.cos.COSArray.size : return $i0
org.apache.pdfbox.cos.COSArray.size : return $i0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getNumberOfOutputParameters : $i3 = $i2 / 2
org.apache.pdfbox.pdmodel.common.function.PDFunction.getNumberOfOutputParameters : $i3 = $i2 / 2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getNumberOfOutputParameters : r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: int numberOfOutputValues> = $i3
org.apache.pdfbox.pdmodel.common.function.PDFunction.getNumberOfOutputParameters : r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: int numberOfOutputValues> = $i3 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getNumberOfOutputParameters : $i1 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: int numberOfOutputValues>
org.apache.pdfbox.pdmodel.common.function.PDFunction.getNumberOfOutputParameters : $i1 = r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: int numberOfOutputValues> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getNumberOfOutputParameters : return $i1
org.apache.pdfbox.pdmodel.common.function.PDFunction.getNumberOfOutputParameters : return $i1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $r7 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $r7 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack getStack()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : i3 = virtualinvoke $r7.<java.util.Stack: int size()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : i3 = virtualinvoke $r7.<java.util.Stack: int size()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : if i3 >= i2
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : if i3 >= i2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : r20 = newarray (float)[i2]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : r20 = newarray (float)[i2] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : i4 = i2 - 1
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : i4 = i2 - 1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : if i4 < 0
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : if i4 < 0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: org.apache.pdfbox.pdmodel.common.PDRange getRangeForOutput(int)>(i4)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : r3 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: org.apache.pdfbox.pdmodel.common.PDRange getRangeForOutput(int)>(i4) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeForOutput : r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray getRangeValues()>()
org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeForOutput : r1 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunction: org.apache.pdfbox.cos.COSArray getRangeValues()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeForOutput : $r2 = new org.apache.pdfbox.pdmodel.common.PDRange
org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeForOutput : $r2 = new org.apache.pdfbox.pdmodel.common.PDRange >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeForOutput : specialinvoke $r2.<org.apache.pdfbox.pdmodel.common.PDRange: void <init>(org.apache.pdfbox.cos.COSArray,int)>(r1, i0)
org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeForOutput : specialinvoke $r2.<org.apache.pdfbox.pdmodel.common.PDRange: void <init>(org.apache.pdfbox.cos.COSArray,int)>(r1, i0) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeForOutput : return $r2
org.apache.pdfbox.pdmodel.common.function.PDFunction.getRangeForOutput : return $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $f0 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: float popReal()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $f0 = virtualinvoke $r4.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: float popReal()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack stack>
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : $r1 = r0.<org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext: java.util.Stack stack> >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>()
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : $r2 = virtualinvoke $r1.<java.util.Stack: java.lang.Object pop()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : $r3 = (java.lang.Number) $r2
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : $r3 = (java.lang.Number) $r2 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : $f0 = virtualinvoke $r3.<java.lang.Number: float floatValue()>()
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : $f0 = virtualinvoke $r3.<java.lang.Number: float floatValue()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : return $f0
org.apache.pdfbox.pdmodel.common.function.type4.ExecutionContext.popReal : return $f0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : r20[i4] = $f0
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : r20[i4] = $f0 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $f1 = r20[i4]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $f1 = r20[i4] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $f2 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.common.PDRange: float getMin()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $f2 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.common.PDRange: float getMin()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $f3 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.common.PDRange: float getMax()>()
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $f3 = virtualinvoke r3.<org.apache.pdfbox.pdmodel.common.PDRange: float getMax()>() >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $f4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: float clipToRange(float,float,float)>($f1, $f2, $f3)
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : $f4 = virtualinvoke r0.<org.apache.pdfbox.pdmodel.common.function.PDFunctionType4: float clipToRange(float,float,float)>($f1, $f2, $f3) >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : r20[i4] = $f4
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : r20[i4] = $f4 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : i4 = i4 + -1
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : i4 = i4 + -1 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : goto [?= (branch)]
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : return r20
org.apache.pdfbox.pdmodel.common.function.PDFunctionType4.eval : return r20 >>>>>>>> org.apache.pdfbox.pdmodel.common.function.PDFunction.clipToRange : return f2
