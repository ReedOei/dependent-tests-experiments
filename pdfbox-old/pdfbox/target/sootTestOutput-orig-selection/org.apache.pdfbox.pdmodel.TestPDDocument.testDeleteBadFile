org.apache.pdfbox.pdmodel.PDDocument.load : $r1 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly()>() >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly(long)>(-1L)
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly(long)>(-1L) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 0, l0, l0)
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 0, l0, l0) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : return $r0
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : return $r0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r2 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.io.File,java.lang.String,org.apache.pdfbox.io.MemoryUsageSetting)>(r0, "", $r1)
org.apache.pdfbox.pdmodel.PDDocument.load : $r2 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.io.File,java.lang.String,org.apache.pdfbox.io.MemoryUsageSetting)>(r0, "", $r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r3 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.io.File,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.MemoryUsageSetting)>(r0, r1, null, null, r2)
org.apache.pdfbox.pdmodel.PDDocument.load : $r3 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.io.File,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.MemoryUsageSetting)>(r0, r1, null, null, r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r6 = new org.apache.pdfbox.io.RandomAccessBufferedFileInputStream
org.apache.pdfbox.pdmodel.PDDocument.load : $r6 = new org.apache.pdfbox.io.RandomAccessBufferedFileInputStream >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r6.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void <init>(java.io.File)>(r0)
org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r6.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void <init>(java.io.File)>(r0) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $l2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long pageOffsetMask>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $l2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long pageOffsetMask> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : l1 = l0 & $l2
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : l1 = l0 & $l2 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $l3 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long curPageOffset>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $l3 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long curPageOffset> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $b4 = l1 cmp $l3
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $b4 = l1 cmp $l3 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : if $b4 == 0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : if $b4 == 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.util.Map pageCache>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.util.Map pageCache> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r2 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r3 = interfaceinvoke $r1.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r8 = (byte[]) $r3
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r8 = (byte[]) $r3 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : if r8 != null
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : if r8 != null >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r4 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.io.RandomAccessFile raFile>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r4 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.io.RandomAccessFile raFile> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : virtualinvoke $r4.<java.io.RandomAccessFile: void seek(long)>(l1)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : virtualinvoke $r4.<java.io.RandomAccessFile: void seek(long)>(l1) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r8 = specialinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] readPage()>()
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r8 = specialinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] readPage()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] lastRemovedCachePage>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] lastRemovedCachePage> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : if $r1 == null
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : if $r1 == null >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $i1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $i1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : r3 = newarray (byte)[$i1]
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : r3 = newarray (byte)[$i1] >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : i4 = 0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : i4 = 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $i5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $i5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : if i4 >= $i5
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : if i4 >= $i5 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $r2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.io.RandomAccessFile raFile>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $r2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.io.RandomAccessFile raFile> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $i2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $i2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $i3 = $i2 - i4
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : $i3 = $i2 - i4 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : i0 = virtualinvoke $r2.<java.io.RandomAccessFile: int read(byte[],int,int)>(r3, i4, $i3)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : i0 = virtualinvoke $r2.<java.io.RandomAccessFile: int read(byte[],int,int)>(r3, i4, $i3) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : if i0 >= 0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : if i0 >= 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : i4 = i4 + i0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : i4 = i4 + i0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : goto [?= $i5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize>]
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : goto [?= $i5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize>] >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : goto [?= return r3]
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : goto [?= return r3] >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : return r3
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.readPage : return r3 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.util.Map pageCache>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.util.Map pageCache> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $r6 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l1) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r8)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r6, r8) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : $i0 = virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1: int size()>()
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : $i0 = virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1: int size()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : $r2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1: org.apache.pdfbox.io.RandomAccessBufferedFileInputStream this$0>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : $r2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1: org.apache.pdfbox.io.RandomAccessBufferedFileInputStream this$0> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : $i1 = staticinvoke <org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int access$000(org.apache.pdfbox.io.RandomAccessBufferedFileInputStream)>($r2)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : $i1 = staticinvoke <org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int access$000(org.apache.pdfbox.io.RandomAccessBufferedFileInputStream)>($r2) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.access$000 : $i0 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int maxCachedPages>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.access$000 : $i0 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int maxCachedPages> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.access$000 : return $i0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.access$000 : return $i0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : if $i0 <= $i1
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : if $i0 <= $i1 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : $z1 = 0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : $z1 = 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : z0 = $z1
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : z0 = $z1 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : if $z1 == 0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : if $z1 == 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : return z0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream$1.removeEldestEntry : return z0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long curPageOffset> = l1
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long curPageOffset> = l1 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] curPage> = r8
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] curPage> = r8 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $l5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long curPageOffset>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $l5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long curPageOffset> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $l6 = l0 - $l5
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $l6 = l0 - $l5 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $i7 = (int) $l6
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : $i7 = (int) $l6 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> = $i7
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> = $i7 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> = l0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.seek : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> = l0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r7 = new org.apache.pdfbox.io.ScratchFile
org.apache.pdfbox.pdmodel.PDDocument.load : $r7 = new org.apache.pdfbox.io.ScratchFile >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r7.<org.apache.pdfbox.io.ScratchFile: void <init>(org.apache.pdfbox.io.MemoryUsageSetting)>(r4)
org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r7.<org.apache.pdfbox.io.ScratchFile: void <init>(org.apache.pdfbox.io.MemoryUsageSetting)>(r4) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useMainMemory>
org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : $z0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: boolean useMainMemory> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.useMainMemory : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes>
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxMainMemoryBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $b1 = $l0 cmp 0L
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : if $b1 < 0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : if $b1 < 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $z0 = 0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.isMainMemoryRestricted : return $z0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxStorageBytes>
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $l0 = r0.<org.apache.pdfbox.io.MemoryUsageSetting: long maxStorageBytes> >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $b1 = $l0 cmp 0L
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $b1 = $l0 cmp 0L >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : if $b1 <= 0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : if $b1 <= 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $z0 = 0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : return $z0
org.apache.pdfbox.io.MemoryUsageSetting.isStorageRestricted : return $z0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r8 = new org.apache.pdfbox.pdfparser.PDFParser
org.apache.pdfbox.pdmodel.PDDocument.load : $r8 = new org.apache.pdfbox.pdfparser.PDFParser >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r8.<org.apache.pdfbox.pdfparser.PDFParser: void <init>(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.ScratchFile)>($r6, r1, r2, r3, $r7)
org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r8.<org.apache.pdfbox.pdfparser.PDFParser: void <init>(org.apache.pdfbox.io.RandomAccessRead,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.ScratchFile)>($r6, r1, r2, r3, $r7) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.length : $l0 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileLength>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.length : $l0 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileLength> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.length : return $l0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.length : return $l0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.init : r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.pdfbox.pdfparser.nonSequentialPDFParser.eofLookupRange")
org.apache.pdfbox.pdfparser.PDFParser.init : r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("org.apache.pdfbox.pdfparser.nonSequentialPDFParser.eofLookupRange") >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.init : if r2 == null
org.apache.pdfbox.pdfparser.PDFParser.init : if r2 == null >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.init : $r11 = new org.apache.pdfbox.cos.COSDocument
org.apache.pdfbox.pdfparser.PDFParser.init : $r11 = new org.apache.pdfbox.cos.COSDocument >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.init : specialinvoke $r11.<org.apache.pdfbox.cos.COSDocument: void <init>(org.apache.pdfbox.io.ScratchFile)>(r1)
org.apache.pdfbox.pdfparser.PDFParser.init : specialinvoke $r11.<org.apache.pdfbox.cos.COSDocument: void <init>(org.apache.pdfbox.io.ScratchFile)>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.init : r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> = $r11
org.apache.pdfbox.pdfparser.PDFParser.init : r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> = $r11 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : virtualinvoke $r8.<org.apache.pdfbox.pdfparser.PDFParser: void parse()>()
org.apache.pdfbox.pdmodel.PDDocument.load : virtualinvoke $r8.<org.apache.pdfbox.pdfparser.PDFParser: void parse()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean parsePDFHeader()>()
org.apache.pdfbox.pdfparser.PDFParser.parse : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFParser: boolean parsePDFHeader()>() >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parsePDFHeader : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean parseHeader(java.lang.String,java.lang.String)>("%PDF-", "1.4")
org.apache.pdfbox.pdfparser.COSParser.parsePDFHeader : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: boolean parseHeader(java.lang.String,java.lang.String)>("%PDF-", "1.4") >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : r34 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>()
org.apache.pdfbox.pdfparser.COSParser.parseHeader : r34 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.COSParser: java.lang.String readLine()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $z0 = interfaceinvoke $r2.<org.apache.pdfbox.pdfparser.SequentialSource: boolean isEOF()>()
org.apache.pdfbox.pdfparser.BaseParser.readLine : $z0 = interfaceinvoke $r2.<org.apache.pdfbox.pdfparser.SequentialSource: boolean isEOF()>() >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader>
org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader> >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : $z0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>()
org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : $z0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: boolean isEOF()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : i0 = virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int peek()>()
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : i0 = virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int peek()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.peek : i0 = virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int read()>()
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.peek : i0 = virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int read()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l0 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileLength>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l0 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileLength> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $b2 = $l1 cmp $l0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $b2 = $l1 cmp $l0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : if $b2 < 0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : if $b2 < 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i4 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i4 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i3 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i3 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int pageSize> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : if $i4 != $i3
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : if $i4 != $i3 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l5 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l6 = $l5 + 1L
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $l6 = $l5 + 1L >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> = $l6
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> = $l6 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] curPage>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: byte[] curPage> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i7 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i7 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i8 = $i7 + 1
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $i8 = $i7 + 1 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> = $i8
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: int offsetWithinPage> = $i8 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $b9 = $r1[$i7]
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $b9 = $r1[$i7] >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $s10 = $b9 & 255
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : $s10 = $b9 & 255 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : return $s10
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : return $s10 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.peek : if i0 == -1
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.peek : if i0 == -1 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.peek : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void rewind(int)>(1)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.peek : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void rewind(int)>(1) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.rewind : $l1 = virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long getPosition()>()
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.rewind : $l1 = virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long getPosition()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.getPosition : $l0 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.getPosition : $l0 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: long fileOffset> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.getPosition : return $l0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.getPosition : return $l0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.rewind : $l2 = (long) i0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.rewind : $l2 = (long) i0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.rewind : $l3 = $l1 - $l2
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.rewind : $l3 = $l1 - $l2 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.rewind : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void seek(long)>($l3)
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.rewind : virtualinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void seek(long)>($l3) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.peek : return i0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.peek : return i0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : if i0 != -1
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : if i0 != -1 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : $z0 = 0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : $z0 = 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : return $z0
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : return $z0
org.apache.pdfbox.pdfparser.RandomAccessSource.isEOF : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z0 == 0
org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r3 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r3 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(11)
org.apache.pdfbox.pdfparser.BaseParser.readLine : specialinvoke $r3.<java.lang.StringBuilder: void <init>(int)>(11) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $i1 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.readLine : $i1 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.read : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader>
org.apache.pdfbox.pdfparser.RandomAccessSource.read : $r1 = r0.<org.apache.pdfbox.pdfparser.RandomAccessSource: org.apache.pdfbox.io.RandomAccessRead reader> >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.read : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: int read()>()
org.apache.pdfbox.pdfparser.RandomAccessSource.read : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.io.RandomAccessRead: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.RandomAccessSource.read : return $i0
org.apache.pdfbox.pdfparser.RandomAccessSource.read : return $i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : if $i1 == -1
org.apache.pdfbox.pdfparser.BaseParser.readLine : if $i1 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $z3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEOL(int)>($i1)
org.apache.pdfbox.pdfparser.BaseParser.readLine : $z3 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isEOL(int)>($i1) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isLF(int)>(i0)
org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isLF(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isLF : if 10 != i0
org.apache.pdfbox.pdfparser.BaseParser.isLF : if 10 != i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isLF : $z0 = 0
org.apache.pdfbox.pdfparser.BaseParser.isLF : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isLF : return $z0
org.apache.pdfbox.pdfparser.BaseParser.isLF : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : if $z0 != 0
org.apache.pdfbox.pdfparser.BaseParser.isEOL : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isCR(int)>(i0)
org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isCR(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isCR : if 13 != i0
org.apache.pdfbox.pdfparser.BaseParser.isCR : if 13 != i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isCR : $z0 = 0
org.apache.pdfbox.pdfparser.BaseParser.isCR : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isCR : return $z0
org.apache.pdfbox.pdfparser.BaseParser.isCR : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : if $z1 == 0
org.apache.pdfbox.pdfparser.BaseParser.isEOL : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z2 = 0
org.apache.pdfbox.pdfparser.BaseParser.isEOL : $z2 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isEOL : return $z2
org.apache.pdfbox.pdfparser.BaseParser.isEOL : return $z2 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z3 == 0
org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z3 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $c4 = (char) $i1
org.apache.pdfbox.pdfparser.BaseParser.readLine : $c4 = (char) $i1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4)
org.apache.pdfbox.pdfparser.BaseParser.readLine : virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : goto [?= $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>]
org.apache.pdfbox.pdfparser.BaseParser.readLine : goto [?= $r4 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>] >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : return -1
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.read : return -1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isCR(int)>($i1)
org.apache.pdfbox.pdfparser.BaseParser.readLine : $z1 = specialinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isCR(int)>($i1) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z1 == 0
org.apache.pdfbox.pdfparser.BaseParser.readLine : if $z1 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r9 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : return $r9
org.apache.pdfbox.pdfparser.BaseParser.readLine : return $r9 >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z0 = virtualinvoke r34.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1)
org.apache.pdfbox.pdfparser.COSParser.parseHeader : $z0 = virtualinvoke r34.<java.lang.String: boolean contains(java.lang.CharSequence)>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z0 != 0
org.apache.pdfbox.pdfparser.COSParser.parseHeader : if $z0 != 0 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : $z0 = 1
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : $z0 = 1 >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : goto [?= return $z0]
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.isEOF : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : $r8 = new java.io.IOException
org.apache.pdfbox.pdfparser.BaseParser.readLine : $r8 = new java.io.IOException >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Error: End-of-File, expected line")
org.apache.pdfbox.pdfparser.BaseParser.readLine : specialinvoke $r8.<java.io.IOException: void <init>(java.lang.String)>("Error: End-of-File, expected line") >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.readLine : throw $r8
org.apache.pdfbox.pdfparser.BaseParser.readLine : throw $r8 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : $r7 = r0.<org.apache.pdfbox.pdfparser.PDFParser: java.io.InputStream keyStoreInputStream>
org.apache.pdfbox.pdfparser.PDFParser.parse : $r7 = r0.<org.apache.pdfbox.pdfparser.PDFParser: java.io.InputStream keyStoreInputStream> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.Closeable)>($r7)
org.apache.pdfbox.pdfparser.PDFParser.parse : staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.Closeable)>($r7) >>>>>>>> org.apache.pdfbox.io.IOUtils.closeQuietly : if r0 == null
org.apache.pdfbox.io.IOUtils.closeQuietly : if r0 == null >>>>>>>> org.apache.pdfbox.io.IOUtils.closeQuietly : goto [?= return]
org.apache.pdfbox.io.IOUtils.closeQuietly : goto [?= return] >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : $r8 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.PDFParser.parse : $r8 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : if $r8 == null
org.apache.pdfbox.pdfparser.PDFParser.parse : if $r8 == null >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : $r9 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document>
org.apache.pdfbox.pdfparser.PDFParser.parse : $r9 = r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.Closeable)>($r9)
org.apache.pdfbox.pdfparser.PDFParser.parse : staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.Closeable)>($r9) >>>>>>>> org.apache.pdfbox.io.IOUtils.closeQuietly : interfaceinvoke r0.<java.io.Closeable: void close()>()
org.apache.pdfbox.io.IOUtils.closeQuietly : interfaceinvoke r0.<java.io.Closeable: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed>
org.apache.pdfbox.cos.COSDocument.close : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $z0 != 0
org.apache.pdfbox.cos.COSDocument.close : if $z0 != 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: java.util.List getObjects()>()
org.apache.pdfbox.cos.COSDocument.close : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: java.util.List getObjects()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : $r1 = new java.util.ArrayList
org.apache.pdfbox.cos.COSDocument.getObjects : $r1 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : $r2 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool>
org.apache.pdfbox.cos.COSDocument.getObjects : $r2 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>()
org.apache.pdfbox.cos.COSDocument.getObjects : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3)
org.apache.pdfbox.cos.COSDocument.getObjects : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : return $r1
org.apache.pdfbox.cos.COSDocument.getObjects : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if r1 == null
org.apache.pdfbox.cos.COSDocument.close : if r1 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r10 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSDocument.close : r10 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.cos.COSDocument.close : $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $z2 == 0
org.apache.pdfbox.cos.COSDocument.close : if $z2 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams>
org.apache.pdfbox.cos.COSDocument.close : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $r3 == null
org.apache.pdfbox.cos.COSDocument.close : if $r3 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r6 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams>
org.apache.pdfbox.cos.COSDocument.close : $r6 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r12 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSDocument.close : r12 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.cos.COSDocument.close : $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $z1 == 0
org.apache.pdfbox.cos.COSDocument.close : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r4 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSDocument.close : $r4 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $r4 == null
org.apache.pdfbox.cos.COSDocument.close : if $r4 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r5 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSDocument.close : $r5 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : virtualinvoke $r5.<org.apache.pdfbox.io.ScratchFile: void close()>()
org.apache.pdfbox.cos.COSDocument.close : virtualinvoke $r5.<org.apache.pdfbox.io.ScratchFile: void close()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : r21 = null
org.apache.pdfbox.io.ScratchFile.close : r21 = null >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.lang.Object ioLock>
org.apache.pdfbox.io.ScratchFile.close : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.lang.Object ioLock> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : entermonitor $r4
org.apache.pdfbox.io.ScratchFile.close : entermonitor $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed>
org.apache.pdfbox.io.ScratchFile.close : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : if $z0 == 0
org.apache.pdfbox.io.ScratchFile.close : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> = 1
org.apache.pdfbox.io.ScratchFile.close : r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> = 1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf>
org.apache.pdfbox.io.ScratchFile.close : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : if $r5 == null
org.apache.pdfbox.io.ScratchFile.close : if $r5 == null >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r23 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.File file>
org.apache.pdfbox.io.ScratchFile.close : $r23 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.File file> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : if $r23 == null
org.apache.pdfbox.io.ScratchFile.close : if $r23 == null >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : exitmonitor $r4
org.apache.pdfbox.io.ScratchFile.close : exitmonitor $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : goto [?= $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>]
org.apache.pdfbox.io.ScratchFile.close : goto [?= $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>] >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.close : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : entermonitor $r6
org.apache.pdfbox.io.ScratchFile.close : entermonitor $r6 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.close : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : virtualinvoke $r7.<java.util.BitSet: void clear()>()
org.apache.pdfbox.io.ScratchFile.close : virtualinvoke $r7.<java.util.BitSet: void clear()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = 0
org.apache.pdfbox.io.ScratchFile.close : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : exitmonitor $r6
org.apache.pdfbox.io.ScratchFile.close : exitmonitor $r6 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : goto [?= (branch)]
org.apache.pdfbox.io.ScratchFile.close : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : if r21 == null
org.apache.pdfbox.io.ScratchFile.close : if r21 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> = 1
org.apache.pdfbox.cos.COSDocument.close : r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> = 1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> = null
org.apache.pdfbox.pdfparser.PDFParser.parse : r0.<org.apache.pdfbox.pdfparser.PDFParser: org.apache.pdfbox.cos.COSDocument document> = null >>>>>>>> org.apache.pdfbox.pdfparser.PDFParser.parse : throw $r6
org.apache.pdfbox.pdfparser.PDFParser.parse : throw $r6 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.Closeable)>($r7)
org.apache.pdfbox.pdmodel.PDDocument.load : staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.Closeable)>($r7) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : throw $r10
org.apache.pdfbox.pdmodel.PDDocument.load : throw $r10 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.Closeable)>($r6)
org.apache.pdfbox.pdmodel.PDDocument.load : staticinvoke <org.apache.pdfbox.io.IOUtils: void closeQuietly(java.io.Closeable)>($r6) >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.io.RandomAccessFile raFile>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.io.RandomAccessFile raFile> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : virtualinvoke $r1.<java.io.RandomAccessFile: void close()>()
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : virtualinvoke $r1.<java.io.RandomAccessFile: void close()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : specialinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void deleteTempFile()>()
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : specialinvoke r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void deleteTempFile()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.deleteTempFile : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.io.File tempFile>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.deleteTempFile : $r1 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.io.File tempFile> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.deleteTempFile : if $r1 == null
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.deleteTempFile : if $r1 == null >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : $r2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.util.Map pageCache>
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : $r2 = r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: java.util.Map pageCache> >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : interfaceinvoke $r2.<java.util.Map: void clear()>()
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : interfaceinvoke $r2.<java.util.Map: void clear()>() >>>>>>>> org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: boolean isClosed> = 1
org.apache.pdfbox.io.RandomAccessBufferedFileInputStream.close : r0.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: boolean isClosed> = 1 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : throw $r11
