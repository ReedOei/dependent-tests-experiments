org.apache.pdfbox.pdmodel.PDDocument.load : $r1 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly()>() >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly(long)>(-1L)
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = staticinvoke <org.apache.pdfbox.io.MemoryUsageSetting: org.apache.pdfbox.io.MemoryUsageSetting setupMainMemoryOnly(long)>(-1L) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : $r0 = new org.apache.pdfbox.io.MemoryUsageSetting >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 0, l0, l0)
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : specialinvoke $r0.<org.apache.pdfbox.io.MemoryUsageSetting: void <init>(boolean,boolean,long,long)>(1, 0, l0, l0) >>>>>>>> org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : return $r0
org.apache.pdfbox.io.MemoryUsageSetting.setupMainMemoryOnly : return $r0 >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r2 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.io.File,java.lang.String,org.apache.pdfbox.io.MemoryUsageSetting)>(r0, "", $r1)
org.apache.pdfbox.pdmodel.PDDocument.load : $r2 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.io.File,java.lang.String,org.apache.pdfbox.io.MemoryUsageSetting)>(r0, "", $r1) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r3 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.io.File,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.MemoryUsageSetting)>(r0, r1, null, null, r2)
org.apache.pdfbox.pdmodel.PDDocument.load : $r3 = staticinvoke <org.apache.pdfbox.pdmodel.PDDocument: org.apache.pdfbox.pdmodel.PDDocument load(java.io.File,java.lang.String,java.io.InputStream,java.lang.String,org.apache.pdfbox.io.MemoryUsageSetting)>(r0, r1, null, null, r2) >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : $r6 = new org.apache.pdfbox.io.RandomAccessBufferedFileInputStream
org.apache.pdfbox.pdmodel.PDDocument.load : $r6 = new org.apache.pdfbox.io.RandomAccessBufferedFileInputStream >>>>>>>> org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r6.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void <init>(java.io.File)>(r0)
org.apache.pdfbox.pdmodel.PDDocument.load : specialinvoke $r6.<org.apache.pdfbox.io.RandomAccessBufferedFileInputStream: void <init>(java.io.File)>(r0) >>>>>>>> org.apache.pdfbox.text.PDFTextStripper.parseBidiFile : $r4 = new java.io.LineNumberReader
org.apache.pdfbox.text.PDFTextStripper.parseBidiFile : $r4 = new java.io.LineNumberReader >>>>>>>> org.apache.pdfbox.text.PDFTextStripper.parseBidiFile : $r5 = new java.io.InputStreamReader
org.apache.pdfbox.text.PDFTextStripper.parseBidiFile : $r5 = new java.io.InputStreamReader >>>>>>>> org.apache.pdfbox.text.PDFTextStripper.parseBidiFile : specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r0)
org.apache.pdfbox.text.PDFTextStripper.parseBidiFile : specialinvoke $r5.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r0) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parse : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.Object parseNextToken()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parse : $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.Object parseNextToken()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : $r1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input>
org.apache.pdfbox.pdfparser.InputStreamSource.read : $r1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input> >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : i0 = virtualinvoke $r1.<java.io.PushbackInputStream: int read()>()
org.apache.pdfbox.pdfparser.InputStreamSource.read : i0 = virtualinvoke $r1.<java.io.PushbackInputStream: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : $i1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position>
org.apache.pdfbox.pdfparser.InputStreamSource.read : $i1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position> >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : $i2 = $i1 + 1
org.apache.pdfbox.pdfparser.InputStreamSource.read : $i2 = $i1 + 1 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position> = $i2
org.apache.pdfbox.pdfparser.InputStreamSource.read : r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position> = $i2 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : return i0
org.apache.pdfbox.pdfparser.InputStreamSource.read : return i0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>(i0)
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 0
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 9
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 9 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 12
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 12 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 10
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 10 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 13
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 == 13 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 != 32
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : if i0 != 32 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $z0 = 0
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : return $z0
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if $z1 != 0
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if i0 != 37
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if i0 != 37 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if i0 == -1
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : if i0 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r5 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i0)
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.unread : $r1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input>
org.apache.pdfbox.pdfparser.InputStreamSource.unread : $r1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input> >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.unread : virtualinvoke $r1.<java.io.PushbackInputStream: void unread(int)>(i0)
org.apache.pdfbox.pdfparser.InputStreamSource.unread : virtualinvoke $r1.<java.io.PushbackInputStream: void unread(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.unread : $i1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position>
org.apache.pdfbox.pdfparser.InputStreamSource.unread : $i1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position> >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.unread : $i2 = $i1 - 1
org.apache.pdfbox.pdfparser.InputStreamSource.unread : $i2 = $i1 - 1 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.unread : r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position> = $i2
org.apache.pdfbox.pdfparser.InputStreamSource.unread : r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position> = $i2 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r1 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r1 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.peek : $r1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input>
org.apache.pdfbox.pdfparser.InputStreamSource.peek : $r1 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input> >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.peek : i0 = virtualinvoke $r1.<java.io.PushbackInputStream: int read()>()
org.apache.pdfbox.pdfparser.InputStreamSource.peek : i0 = virtualinvoke $r1.<java.io.PushbackInputStream: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.peek : if i0 == -1
org.apache.pdfbox.pdfparser.InputStreamSource.peek : if i0 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.peek : $r2 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input>
org.apache.pdfbox.pdfparser.InputStreamSource.peek : $r2 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input> >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.peek : virtualinvoke $r2.<java.io.PushbackInputStream: void unread(int)>(i0)
org.apache.pdfbox.pdfparser.InputStreamSource.peek : virtualinvoke $r2.<java.io.PushbackInputStream: void unread(int)>(i0) >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.peek : return i0
org.apache.pdfbox.pdfparser.InputStreamSource.peek : return i0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $b1 = (byte) i0
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $b1 = (byte) i0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $b1 != -1
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $b1 != -1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : c9 = (char) i0
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : c9 = (char) i0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : tableswitch(c9) {     case 40:
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : tableswitch(c9) {     case 40: >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r7 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r7 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r9 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r9 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $i3 = interfaceinvoke $r9.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $i3 = interfaceinvoke $r9.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $c4 = (char) $i3
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $c4 = (char) $i3 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4)
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c4) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r11 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r11 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $i5 = interfaceinvoke $r11.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $i5 = interfaceinvoke $r11.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $c6 = (char) $i5
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $c6 = (char) $i5 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6)
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r12 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c6) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : r51 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : r51 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $z4 = virtualinvoke r51.<java.lang.String: boolean equals(java.lang.Object)>("ID")
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $z4 = virtualinvoke r51.<java.lang.String: boolean equals(java.lang.Object)>("ID") >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $z4 != 0
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $z4 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r13 = new java.io.ByteArrayOutputStream
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r13 = new java.io.ByteArrayOutputStream >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : specialinvoke $r13.<java.io.ByteArrayOutputStream: void <init>()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : specialinvoke $r13.<java.io.ByteArrayOutputStream: void <init>()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $z5 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isWhitespace()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $z5 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isWhitespace()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $r1 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>($i0)
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>($i0) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $z0 = 1
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : goto [?= return $z0]
org.apache.pdfbox.pdfparser.BaseParser.isWhitespace : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $z5 == 0
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $z5 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r20 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r20 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : interfaceinvoke $r20.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : interfaceinvoke $r20.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r14 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r14 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : i15 = interfaceinvoke $r14.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : i15 = interfaceinvoke $r14.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r15 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r15 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : i16 = interfaceinvoke $r15.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : i16 = interfaceinvoke $r15.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if i15 != 69
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if i15 != 69 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r53 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r53 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $z13 = interfaceinvoke $r53.<org.apache.pdfbox.pdfparser.SequentialSource: boolean isEOF()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $z13 = interfaceinvoke $r53.<org.apache.pdfbox.pdfparser.SequentialSource: boolean isEOF()>() >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.isEOF : $i0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int peek()>()
org.apache.pdfbox.pdfparser.InputStreamSource.isEOF : $i0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.isEOF : if $i0 != -1
org.apache.pdfbox.pdfparser.InputStreamSource.isEOF : if $i0 != -1 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.isEOF : $z0 = 0
org.apache.pdfbox.pdfparser.InputStreamSource.isEOF : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.isEOF : return $z0
org.apache.pdfbox.pdfparser.InputStreamSource.isEOF : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $z13 != 0
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $z13 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : virtualinvoke $r13.<java.io.ByteArrayOutputStream: void write(int)>(i15)
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : virtualinvoke $r13.<java.io.ByteArrayOutputStream: void write(int)>(i15) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : i15 = i16
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : i15 = i16 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r18 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r18 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : i16 = interfaceinvoke $r18.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : i16 = interfaceinvoke $r18.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : goto [?= (branch)]
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if i16 != 73
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if i16 != 73 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $z6 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean hasNextSpaceOrReturn()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $z6 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean hasNextSpaceOrReturn()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNextSpaceOrReturn : $r1 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNextSpaceOrReturn : $r1 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNextSpaceOrReturn : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNextSpaceOrReturn : $i0 = interfaceinvoke $r1.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNextSpaceOrReturn : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isSpaceOrReturn(int)>($i0)
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNextSpaceOrReturn : $z0 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isSpaceOrReturn(int)>($i0) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.isSpaceOrReturn : if i0 == 10
org.apache.pdfbox.pdfparser.PDFStreamParser.isSpaceOrReturn : if i0 == 10 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.isSpaceOrReturn : if i0 == 13
org.apache.pdfbox.pdfparser.PDFStreamParser.isSpaceOrReturn : if i0 == 13 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.isSpaceOrReturn : if i0 != 32
org.apache.pdfbox.pdfparser.PDFStreamParser.isSpaceOrReturn : if i0 != 32 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.isSpaceOrReturn : $z0 = 1
org.apache.pdfbox.pdfparser.PDFStreamParser.isSpaceOrReturn : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.isSpaceOrReturn : goto [?= return $z0]
org.apache.pdfbox.pdfparser.PDFStreamParser.isSpaceOrReturn : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.isSpaceOrReturn : return $z0
org.apache.pdfbox.pdfparser.PDFStreamParser.isSpaceOrReturn : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNextSpaceOrReturn : return $z0
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNextSpaceOrReturn : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $z6 == 0
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $z6 == 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r19 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r19 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $z7 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean hasNoFollowingBinData(org.apache.pdfbox.pdfparser.SequentialSource)>($r19)
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $z7 = specialinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean hasNoFollowingBinData(org.apache.pdfbox.pdfparser.SequentialSource)>($r19) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : $r2 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: byte[] binCharTestArr>
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : $r2 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: byte[] binCharTestArr> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : i0 = interfaceinvoke r1.<org.apache.pdfbox.pdfparser.SequentialSource: int read(byte[],int,int)>($r2, 0, 10)
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : i0 = interfaceinvoke r1.<org.apache.pdfbox.pdfparser.SequentialSource: int read(byte[],int,int)>($r2, 0, 10) >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : $r2 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input>
org.apache.pdfbox.pdfparser.InputStreamSource.read : $r2 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input> >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : i2 = virtualinvoke $r2.<java.io.PushbackInputStream: int read(byte[],int,int)>(r1, i0, i1)
org.apache.pdfbox.pdfparser.InputStreamSource.read : i2 = virtualinvoke $r2.<java.io.PushbackInputStream: int read(byte[],int,int)>(r1, i0, i1) >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : $i3 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position>
org.apache.pdfbox.pdfparser.InputStreamSource.read : $i3 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position> >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : $i4 = $i3 + i2
org.apache.pdfbox.pdfparser.InputStreamSource.read : $i4 = $i3 + i2 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position> = $i4
org.apache.pdfbox.pdfparser.InputStreamSource.read : r0.<org.apache.pdfbox.pdfparser.InputStreamSource: int position> = $i4 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.read : return i2
org.apache.pdfbox.pdfparser.InputStreamSource.read : return i2 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : z0 = 1
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : z0 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : i3 = -1
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : i3 = -1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : i4 = -1
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : i4 = -1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if i0 <= 0
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if i0 <= 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : i5 = 0
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : i5 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if i5 >= i0
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if i5 >= i0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : $r4 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: byte[] binCharTestArr>
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : $r4 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: byte[] binCharTestArr> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : b1 = $r4[i5]
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : b1 = $r4[i5] >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if b1 < 9
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if b1 < 9 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if b1 <= 10
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if b1 <= 10 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if b1 >= 32
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if b1 >= 32 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if i3 != -1
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if i3 != -1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if b1 == 9
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if b1 == 9 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if b1 == 32
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if b1 == 32 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if i3 == -1
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if i3 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : i5 = i5 + 1
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : i5 = i5 + 1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : goto [?= (branch)]
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if b1 == 10
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if b1 == 10 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if b1 == 13
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if b1 == 13 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : i3 = i5
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : i3 = i5 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : goto [?= i5 = i5 + 1]
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : goto [?= i5 = i5 + 1] >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if i0 != 10
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if i0 != 10 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : $r5 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: byte[] binCharTestArr>
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : $r5 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: byte[] binCharTestArr> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : $r6 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r5, 0, i0)
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : $r6 = staticinvoke <java.util.Arrays: byte[] copyOfRange(byte[],int,int)>($r5, 0, i0) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : interfaceinvoke r1.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(byte[])>($r6)
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : interfaceinvoke r1.<org.apache.pdfbox.pdfparser.SequentialSource: void unread(byte[])>($r6) >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.unread : $r2 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input>
org.apache.pdfbox.pdfparser.InputStreamSource.unread : $r2 = r0.<org.apache.pdfbox.pdfparser.InputStreamSource: java.io.PushbackInputStream input> >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.unread : virtualinvoke $r2.<java.io.PushbackInputStream: void unread(byte[])>(r1)
org.apache.pdfbox.pdfparser.InputStreamSource.unread : virtualinvoke $r2.<java.io.PushbackInputStream: void unread(byte[])>(r1) >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.unread : $i0 = lengthof r1
org.apache.pdfbox.pdfparser.InputStreamSource.unread : $i0 = lengthof r1 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.unread : $i2 = $i1 - $i0
org.apache.pdfbox.pdfparser.InputStreamSource.unread : $i2 = $i1 - $i0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if z0 != 0
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : return z0
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : return z0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $z7 != 0
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $z7 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : r39 = staticinvoke <org.apache.pdfbox.contentstream.operator.Operator: org.apache.pdfbox.contentstream.operator.Operator getOperator(java.lang.String)>("ID")
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : r39 = staticinvoke <org.apache.pdfbox.contentstream.operator.Operator: org.apache.pdfbox.contentstream.operator.Operator getOperator(java.lang.String)>("ID") >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("ID")
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $z0 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("ID") >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : if $z0 != 0
org.apache.pdfbox.contentstream.operator.Operator.getOperator : if $z0 != 0 >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r1 = new org.apache.pdfbox.contentstream.operator.Operator
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r1 = new org.apache.pdfbox.contentstream.operator.Operator >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : specialinvoke $r1.<org.apache.pdfbox.contentstream.operator.Operator: void <init>(java.lang.String)>(r0)
org.apache.pdfbox.contentstream.operator.Operator.getOperator : specialinvoke $r1.<org.apache.pdfbox.contentstream.operator.Operator: void <init>(java.lang.String)>(r0) >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : r9 = $r1
org.apache.pdfbox.contentstream.operator.Operator.getOperator : r9 = $r1 >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : goto [?= return r9]
org.apache.pdfbox.contentstream.operator.Operator.getOperator : goto [?= return r9] >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : return r9
org.apache.pdfbox.contentstream.operator.Operator.getOperator : return r9 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r16 = (org.apache.pdfbox.contentstream.operator.Operator) r39
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r16 = (org.apache.pdfbox.contentstream.operator.Operator) r39 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r17 = virtualinvoke $r13.<java.io.ByteArrayOutputStream: byte[] toByteArray()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r17 = virtualinvoke $r13.<java.io.ByteArrayOutputStream: byte[] toByteArray()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : virtualinvoke $r16.<org.apache.pdfbox.contentstream.operator.Operator: void setImageData(byte[])>($r17)
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : virtualinvoke $r16.<org.apache.pdfbox.contentstream.operator.Operator: void setImageData(byte[])>($r17) >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.setImageData : r0.<org.apache.pdfbox.contentstream.operator.Operator: byte[] imageData> = r1
org.apache.pdfbox.contentstream.operator.Operator.setImageData : r0.<org.apache.pdfbox.contentstream.operator.Operator: byte[] imageData> = r1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : goto [?= return r39]
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : goto [?= return r39] >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : return r39
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : return r39 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parse : if $r2 == null
org.apache.pdfbox.pdfparser.PDFStreamParser.parse : if $r2 == null >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parse : $r3 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.util.List streamObjects>
org.apache.pdfbox.pdfparser.PDFStreamParser.parse : $r3 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.util.List streamObjects> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parse : interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2)
org.apache.pdfbox.pdfparser.PDFStreamParser.parse : interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>($r2) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parse : goto [?= $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.Object parseNextToken()>()]
org.apache.pdfbox.pdfparser.PDFStreamParser.parse : goto [?= $r2 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.Object parseNextToken()>()] >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : $r2 = r0.<org.apache.pdfbox.pdfparser.BaseParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : i0 = interfaceinvoke $r2.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : i0 = interfaceinvoke $r2.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : goto [?= $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>(i0)]
org.apache.pdfbox.pdfparser.BaseParser.skipSpaces : goto [?= $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.BaseParser: boolean isWhitespace(int)>(i0)] >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : r54 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.String readOperator()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : r54 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.lang.String readOperator()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: void skipSpaces()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: void skipSpaces()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r2 = new java.lang.StringBuilder
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r2 = new java.lang.StringBuilder >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(4)
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : specialinvoke $r2.<java.lang.StringBuilder: void <init>(int)>(4) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r3 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r3 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : i4 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : i4 = interfaceinvoke $r3.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == -1
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isWhitespace(int)>(i4)
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $z0 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isWhitespace(int)>(i4) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if $z0 != 0
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if $z0 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isClosing(int)>(i4)
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $z1 = virtualinvoke r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: boolean isClosing(int)>(i4) >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isClosing : if i0 != 93
org.apache.pdfbox.pdfparser.BaseParser.isClosing : if i0 != 93 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isClosing : $z0 = 0
org.apache.pdfbox.pdfparser.BaseParser.isClosing : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.BaseParser.isClosing : return $z0
org.apache.pdfbox.pdfparser.BaseParser.isClosing : return $z0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if $z1 != 0
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if $z1 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == 91
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == 91 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == 60
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == 60 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == 40
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == 40 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == 47
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 == 47 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 < 48
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 < 48 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 <= 57
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if i4 <= 57 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r4 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r4 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $i1 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $i1 = interfaceinvoke $r4.<org.apache.pdfbox.pdfparser.SequentialSource: int read()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : c0 = (char) $i1
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : c0 = (char) $i1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r5 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource>
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r5 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: org.apache.pdfbox.pdfparser.SequentialSource seqSource> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : i4 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : i4 = interfaceinvoke $r5.<org.apache.pdfbox.pdfparser.SequentialSource: int peek()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0)
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c0) >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if c0 != 100
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : if c0 != 100 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : goto [?= (branch)]
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : $r10 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : return $r10
org.apache.pdfbox.pdfparser.PDFStreamParser.readOperator : return $r10 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r38 = virtualinvoke r54.<java.lang.String: java.lang.String trim()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $r38 = virtualinvoke r54.<java.lang.String: java.lang.String trim()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $i8 = virtualinvoke $r38.<java.lang.String: int length()>()
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : $i8 = virtualinvoke $r38.<java.lang.String: int length()>() >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $i8 != 0
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : if $i8 != 0 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : r39 = staticinvoke <org.apache.pdfbox.contentstream.operator.Operator: org.apache.pdfbox.contentstream.operator.Operator getOperator(java.lang.String)>(r54)
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : r39 = staticinvoke <org.apache.pdfbox.contentstream.operator.Operator: org.apache.pdfbox.contentstream.operator.Operator getOperator(java.lang.String)>(r54) >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("BI")
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $z1 = virtualinvoke r0.<java.lang.String: boolean equals(java.lang.Object)>("BI") >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : if $z1 == 0
org.apache.pdfbox.contentstream.operator.Operator.getOperator : if $z1 == 0 >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r2 = <org.apache.pdfbox.contentstream.operator.Operator: java.util.concurrent.ConcurrentMap operators>
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r2 = <org.apache.pdfbox.contentstream.operator.Operator: java.util.concurrent.ConcurrentMap operators> >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0)
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r3 = interfaceinvoke $r2.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : r9 = (org.apache.pdfbox.contentstream.operator.Operator) $r3
org.apache.pdfbox.contentstream.operator.Operator.getOperator : r9 = (org.apache.pdfbox.contentstream.operator.Operator) $r3 >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : if r9 != null
org.apache.pdfbox.contentstream.operator.Operator.getOperator : if r9 != null >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : return null
org.apache.pdfbox.pdfparser.PDFStreamParser.parseNextToken : return null >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.getTokens : $r1 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.util.List streamObjects>
org.apache.pdfbox.pdfparser.PDFStreamParser.getTokens : $r1 = r0.<org.apache.pdfbox.pdfparser.PDFStreamParser: java.util.List streamObjects> >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.getTokens : return $r1
org.apache.pdfbox.pdfparser.PDFStreamParser.getTokens : return $r1 >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getName : $r1 = r0.<org.apache.pdfbox.contentstream.operator.Operator: java.lang.String theOperator>
org.apache.pdfbox.contentstream.operator.Operator.getName : $r1 = r0.<org.apache.pdfbox.contentstream.operator.Operator: java.lang.String theOperator> >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getName : return $r1
org.apache.pdfbox.contentstream.operator.Operator.getName : return $r1 >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getImageData : $r1 = r0.<org.apache.pdfbox.contentstream.operator.Operator: byte[] imageData>
org.apache.pdfbox.contentstream.operator.Operator.getImageData : $r1 = r0.<org.apache.pdfbox.contentstream.operator.Operator: byte[] imageData> >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getImageData : return $r1
org.apache.pdfbox.contentstream.operator.Operator.getImageData : return $r1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if i4 != -1
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if i4 != -1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if b1 != 13
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if b1 != 13 >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r5 = <org.apache.pdfbox.contentstream.operator.Operator: java.util.concurrent.ConcurrentMap operators>
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r5 = <org.apache.pdfbox.contentstream.operator.Operator: java.util.concurrent.ConcurrentMap operators> >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r4 = new org.apache.pdfbox.contentstream.operator.Operator
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r4 = new org.apache.pdfbox.contentstream.operator.Operator >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : specialinvoke $r4.<org.apache.pdfbox.contentstream.operator.Operator: void <init>(java.lang.String)>(r0)
org.apache.pdfbox.contentstream.operator.Operator.getOperator : specialinvoke $r4.<org.apache.pdfbox.contentstream.operator.Operator: void <init>(java.lang.String)>(r0) >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r0, $r4)
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r6 = interfaceinvoke $r5.<java.util.concurrent.ConcurrentMap: java.lang.Object putIfAbsent(java.lang.Object,java.lang.Object)>(r0, $r4) >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : r9 = (org.apache.pdfbox.contentstream.operator.Operator) $r6
org.apache.pdfbox.contentstream.operator.Operator.getOperator : r9 = (org.apache.pdfbox.contentstream.operator.Operator) $r6 >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r7 = <org.apache.pdfbox.contentstream.operator.Operator: java.util.concurrent.ConcurrentMap operators>
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r7 = <org.apache.pdfbox.contentstream.operator.Operator: java.util.concurrent.ConcurrentMap operators> >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0)
org.apache.pdfbox.contentstream.operator.Operator.getOperator : $r8 = interfaceinvoke $r7.<java.util.concurrent.ConcurrentMap: java.lang.Object get(java.lang.Object)>(r0) >>>>>>>> org.apache.pdfbox.contentstream.operator.Operator.getOperator : r9 = (org.apache.pdfbox.contentstream.operator.Operator) $r8
org.apache.pdfbox.contentstream.operator.Operator.getOperator : r9 = (org.apache.pdfbox.contentstream.operator.Operator) $r8 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : i4 = i5
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : i4 = i5 >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed>
org.apache.pdfbox.cos.COSDocument.finalize : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : if $z0 != 0
org.apache.pdfbox.cos.COSDocument.finalize : if $z0 != 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : $z1 = r0.<org.apache.pdfbox.cos.COSDocument: boolean warnMissingClose>
org.apache.pdfbox.cos.COSDocument.finalize : $z1 = r0.<org.apache.pdfbox.cos.COSDocument: boolean warnMissingClose> >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : if $z1 == 0
org.apache.pdfbox.cos.COSDocument.finalize : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : $r1 = <org.apache.pdfbox.cos.COSDocument: org.apache.commons.logging.Log LOG>
org.apache.pdfbox.cos.COSDocument.finalize : $r1 = <org.apache.pdfbox.cos.COSDocument: org.apache.commons.logging.Log LOG> >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : interfaceinvoke $r1.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Warning: You did not close a PDF Document")
org.apache.pdfbox.cos.COSDocument.finalize : interfaceinvoke $r1.<org.apache.commons.logging.Log: void warn(java.lang.Object)>("Warning: You did not close a PDF Document") >>>>>>>> org.apache.pdfbox.cos.COSDocument.finalize : virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: void close()>()
org.apache.pdfbox.cos.COSDocument.finalize : virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed>
org.apache.pdfbox.cos.COSDocument.close : $z0 = r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $z0 != 0
org.apache.pdfbox.cos.COSDocument.close : if $z0 != 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: java.util.List getObjects()>()
org.apache.pdfbox.cos.COSDocument.close : r1 = virtualinvoke r0.<org.apache.pdfbox.cos.COSDocument: java.util.List getObjects()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : $r1 = new java.util.ArrayList
org.apache.pdfbox.cos.COSDocument.getObjects : $r1 = new java.util.ArrayList >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : $r2 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool>
org.apache.pdfbox.cos.COSDocument.getObjects : $r2 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.Map objectPool> >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>()
org.apache.pdfbox.cos.COSDocument.getObjects : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3)
org.apache.pdfbox.cos.COSDocument.getObjects : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>($r3) >>>>>>>> org.apache.pdfbox.cos.COSDocument.getObjects : return $r1
org.apache.pdfbox.cos.COSDocument.getObjects : return $r1 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if r1 == null
org.apache.pdfbox.cos.COSDocument.close : if r1 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r10 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSDocument.close : r10 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.cos.COSDocument.close : $z2 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $z2 == 0
org.apache.pdfbox.cos.COSDocument.close : if $z2 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams>
org.apache.pdfbox.cos.COSDocument.close : $r3 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $r3 == null
org.apache.pdfbox.cos.COSDocument.close : if $r3 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r6 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams>
org.apache.pdfbox.cos.COSDocument.close : $r6 = r0.<org.apache.pdfbox.cos.COSDocument: java.util.List streams> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r12 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>()
org.apache.pdfbox.cos.COSDocument.close : r12 = interfaceinvoke $r6.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()
org.apache.pdfbox.cos.COSDocument.close : $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $z1 == 0
org.apache.pdfbox.cos.COSDocument.close : if $z1 == 0 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r7 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>()
org.apache.pdfbox.cos.COSDocument.close : $r7 = interfaceinvoke r12.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r13 = (org.apache.pdfbox.cos.COSStream) $r7
org.apache.pdfbox.cos.COSDocument.close : r13 = (org.apache.pdfbox.cos.COSStream) $r7 >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : virtualinvoke r13.<org.apache.pdfbox.cos.COSStream: void close()>()
org.apache.pdfbox.cos.COSDocument.close : virtualinvoke r13.<org.apache.pdfbox.cos.COSStream: void close()>() >>>>>>>> org.apache.pdfbox.cos.COSStream.close : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.close : $r1 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.close : if $r1 == null
org.apache.pdfbox.cos.COSStream.close : if $r1 == null >>>>>>>> org.apache.pdfbox.cos.COSStream.close : $r2 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess>
org.apache.pdfbox.cos.COSStream.close : $r2 = r0.<org.apache.pdfbox.cos.COSStream: org.apache.pdfbox.io.RandomAccess randomAccess> >>>>>>>> org.apache.pdfbox.cos.COSStream.close : interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccess: void close()>()
org.apache.pdfbox.cos.COSStream.close : interfaceinvoke $r2.<org.apache.pdfbox.io.RandomAccess: void close()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.close : $r1 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : if $r1 == null
org.apache.pdfbox.io.ScratchFileBuffer.close : if $r1 == null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : $r3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.close : $r3 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes>
org.apache.pdfbox.io.ScratchFileBuffer.close : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount>
org.apache.pdfbox.io.ScratchFileBuffer.close : $i0 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : virtualinvoke $r3.<org.apache.pdfbox.io.ScratchFile: void markPagesAsFree(int[],int,int)>($r2, 0, $i0)
org.apache.pdfbox.io.ScratchFileBuffer.close : virtualinvoke $r3.<org.apache.pdfbox.io.ScratchFile: void markPagesAsFree(int[],int,int)>($r2, 0, $i0) >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : entermonitor $r4
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : entermonitor $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i5 = i0
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i5 = i0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i5 >= i1
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i5 >= i1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i2 = r1[i5]
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i2 = r1[i5] >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 < 0
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 < 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $i3 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $i3 = r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 >= $i3
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 >= $i3 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $z0 = virtualinvoke $r5.<java.util.BitSet: boolean get(int)>(i2)
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $z0 = virtualinvoke $r5.<java.util.BitSet: boolean get(int)>(i2) >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if $z0 != 0
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if $z0 != 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : virtualinvoke $r6.<java.util.BitSet: void set(int)>(i2)
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : virtualinvoke $r6.<java.util.BitSet: void set(int)>(i2) >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $i4 = r0.<org.apache.pdfbox.io.ScratchFile: int inMemoryMaxPageCount>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $i4 = r0.<org.apache.pdfbox.io.ScratchFile: int inMemoryMaxPageCount> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 >= $i4
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : if i2 >= $i4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: byte[][] inMemoryPages>
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: byte[][] inMemoryPages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r7[i2] = null
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : $r7[i2] = null >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i5 = i5 + 1
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : i5 = i5 + 1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : goto [?= (branch)]
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : exitmonitor $r4
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : exitmonitor $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.markPagesAsFree : goto [?= return]
org.apache.pdfbox.io.ScratchFile.markPagesAsFree : goto [?= return] >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> = null
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> = null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> = null
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int[] pageIndexes> = null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = null
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: byte[] currentPage> = null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = 0L
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long currentPageOffset> = 0L >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = -1
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int currentPagePositionInPageIndexes> = -1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: int positionInPage> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> = 0L
org.apache.pdfbox.io.ScratchFileBuffer.close : r0.<org.apache.pdfbox.io.ScratchFileBuffer: long size> = 0L >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : goto [?= $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()]
org.apache.pdfbox.cos.COSDocument.close : goto [?= $z1 = interfaceinvoke r12.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r4 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSDocument.close : $r4 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : if $r4 == null
org.apache.pdfbox.cos.COSDocument.close : if $r4 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : $r5 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile>
org.apache.pdfbox.cos.COSDocument.close : $r5 = r0.<org.apache.pdfbox.cos.COSDocument: org.apache.pdfbox.io.ScratchFile scratchFile> >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : virtualinvoke $r5.<org.apache.pdfbox.io.ScratchFile: void close()>()
org.apache.pdfbox.cos.COSDocument.close : virtualinvoke $r5.<org.apache.pdfbox.io.ScratchFile: void close()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : r21 = null
org.apache.pdfbox.io.ScratchFile.close : r21 = null >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.lang.Object ioLock>
org.apache.pdfbox.io.ScratchFile.close : $r4 = r0.<org.apache.pdfbox.io.ScratchFile: java.lang.Object ioLock> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : entermonitor $r4
org.apache.pdfbox.io.ScratchFile.close : entermonitor $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed>
org.apache.pdfbox.io.ScratchFile.close : $z0 = r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : if $z0 == 0
org.apache.pdfbox.io.ScratchFile.close : if $z0 == 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> = 1
org.apache.pdfbox.io.ScratchFile.close : r0.<org.apache.pdfbox.io.ScratchFile: boolean isClosed> = 1 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf>
org.apache.pdfbox.io.ScratchFile.close : $r5 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.RandomAccessFile raf> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : if $r5 == null
org.apache.pdfbox.io.ScratchFile.close : if $r5 == null >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r23 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.File file>
org.apache.pdfbox.io.ScratchFile.close : $r23 = r0.<org.apache.pdfbox.io.ScratchFile: java.io.File file> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : if $r23 == null
org.apache.pdfbox.io.ScratchFile.close : if $r23 == null >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : exitmonitor $r4
org.apache.pdfbox.io.ScratchFile.close : exitmonitor $r4 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : goto [?= $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>]
org.apache.pdfbox.io.ScratchFile.close : goto [?= $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>] >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.close : $r6 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : entermonitor $r6
org.apache.pdfbox.io.ScratchFile.close : entermonitor $r6 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages>
org.apache.pdfbox.io.ScratchFile.close : $r7 = r0.<org.apache.pdfbox.io.ScratchFile: java.util.BitSet freePages> >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : virtualinvoke $r7.<java.util.BitSet: void clear()>()
org.apache.pdfbox.io.ScratchFile.close : virtualinvoke $r7.<java.util.BitSet: void clear()>() >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = 0
org.apache.pdfbox.io.ScratchFile.close : r0.<org.apache.pdfbox.io.ScratchFile: int pageCount> = 0 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : exitmonitor $r6
org.apache.pdfbox.io.ScratchFile.close : exitmonitor $r6 >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : goto [?= (branch)]
org.apache.pdfbox.io.ScratchFile.close : goto [?= (branch)] >>>>>>>> org.apache.pdfbox.io.ScratchFile.close : if r21 == null
org.apache.pdfbox.io.ScratchFile.close : if r21 == null >>>>>>>> org.apache.pdfbox.cos.COSDocument.close : r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> = 1
org.apache.pdfbox.cos.COSDocument.close : r0.<org.apache.pdfbox.cos.COSDocument: boolean closed> = 1 >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler>
org.apache.pdfbox.io.ScratchFileBuffer.finalize : $r2 = r0.<org.apache.pdfbox.io.ScratchFileBuffer: org.apache.pdfbox.io.ScratchFile pageHandler> >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : if $r2 == null
org.apache.pdfbox.io.ScratchFileBuffer.finalize : if $r2 == null >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void close()>()
org.apache.pdfbox.io.ScratchFileBuffer.finalize : virtualinvoke r0.<org.apache.pdfbox.io.ScratchFileBuffer: void close()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : specialinvoke r0.<java.lang.Object: void finalize()>()
org.apache.pdfbox.io.ScratchFileBuffer.finalize : specialinvoke r0.<java.lang.Object: void finalize()>() >>>>>>>> org.apache.pdfbox.io.ScratchFileBuffer.finalize : goto [?= return]
org.apache.pdfbox.io.ScratchFileBuffer.finalize : goto [?= return] >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if i4 == -1
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if i4 == -1 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : $i2 = i4 - i3
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : $i2 = i4 - i3 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if $i2 <= 3
org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : if $i2 <= 3 >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.isSpaceOrReturn : $z0 = 0
org.apache.pdfbox.pdfparser.PDFStreamParser.isSpaceOrReturn : $z0 = 0 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.isEOF : $z0 = 1
org.apache.pdfbox.pdfparser.InputStreamSource.isEOF : $z0 = 1 >>>>>>>> org.apache.pdfbox.pdfparser.InputStreamSource.isEOF : goto [?= return $z0]
org.apache.pdfbox.pdfparser.InputStreamSource.isEOF : goto [?= return $z0] >>>>>>>> org.apache.pdfbox.pdfparser.PDFStreamParser.hasNoFollowingBinData : i4 = 10
