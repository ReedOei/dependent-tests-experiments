dynoptic.invariants.EventuallyHappens.scmBadStateQRe : return "_"
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap>
dynoptic.invariants.BinaryInvariant.setFirstSynthTracers : r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType firstSynth2> = r2
dynoptic.invariants.BinaryInvariant.setFirstSynthTracers : r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType firstSynth1> = r1
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache>
dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.invariants.BinaryInvariant.setSecondSynthTracers : r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType secondSynth1> = r1
dynoptic.invariants.BinaryInvariant.setSecondSynthTracers : r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType secondSynth2> = r2
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap>
