dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r6 = new dynoptic.model.fifosys.channel.channelstate.ChState
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $i0 = interfaceinvoke r0.<java.util.List: int size()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : return r1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z0 = <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : $r2 = new dynoptic.model.fifosys.channel.channelstate.MutableMultiChState
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : r1 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List chStatesFromChIds(java.util.List)>(r0)
dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : $r6 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : $z2 = <dynoptic.model.fifosys.channel.channelstate.ChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : $z0 = <dynoptic.model.fifosys.channel.channelstate.ChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap>
dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap>
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache>
dynoptic.model.fifosys.channel.channelstate.ChState.peek : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : r2 = (dynoptic.model.fifosys.channel.channelstate.AbsMultiChState) r1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : return 1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : if r0 != r1 goto $z0 = r1 instanceof dynoptic.model.fifosys.channel.channelstate.AbsMultiChState
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : $r3 = r2.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : return 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : if r1 != null goto (branch)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.channel.channelstate.AbsMultiChState
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r6 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $z2 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $z0 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.ChState.equals : $r5 = r2.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.ChState.equals : $r3 = r2.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId>
dynoptic.model.fifosys.channel.channelstate.ChState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.channel.channelstate.ChState
dynoptic.model.fifosys.channel.channelstate.ChState.equals : if r0 != r1 goto $z0 = r1 instanceof dynoptic.model.fifosys.channel.channelstate.ChState
dynoptic.model.fifosys.channel.channelstate.ChState.equals : r2 = (dynoptic.model.fifosys.channel.channelstate.ChState) r1
dynoptic.model.fifosys.channel.channelstate.ChState.equals : if r1 != null goto (branch)
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.equals : $z0 = specialinvoke r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean equals(java.lang.Object)>(r1)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.equals : $z1 = r1 instanceof dynoptic.model.fifosys.channel.channelstate.MutableMultiChState
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.equals : return 1
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.equals : return 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $r3 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : return i0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $i1 = 31 * i0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $z1 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: boolean isEmpty()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : i0 = 31 * i0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : i0 = 17
