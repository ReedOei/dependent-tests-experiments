dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : i0 = 0
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : return 1
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i1 = 31 * b0
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : b0 = 17
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i4 = 31 * i3
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : return i6
dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.model.fifosys.channel.channelstate.ChState.getChannelId : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId>
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : i0 = 0
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : return 1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r6 = new dynoptic.model.fifosys.channel.channelstate.ChState
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $i0 = interfaceinvoke r0.<java.util.List: int size()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : return r1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z0 = <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions>
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions>
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMState: void recreateCachedTransitions()>()
dynoptic.model.fifosys.gfsm.GFSMState.isInitForPid : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.isInitForPid : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.hashCode : $i0 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: int stateId>
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : return r2
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r6 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache>
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r5 = new dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r1 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache>
dynoptic.model.fifosys.AbsMultiFSMState$2.eval : $r2 = (dynoptic.model.fifosys.AbsMultiFSMState) r1
dynoptic.model.fifosys.AbsMultiFSMState$2.eval : $z0 = virtualinvoke r1.<dynoptic.model.fifosys.AbsMultiFSMState: boolean isInitForPid(int)>(i0)
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.toShortIntStr : $i0 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: int stateId>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map absTransitions>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i7 = 31 * i6
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i1 = 31 * b0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : b0 = 17
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i4 = 31 * i3
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : return i12
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i10 = 31 * i9
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap>
dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.gfsm.GFSMState.toString : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.isInitial : $z0 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isInitial>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState : $r0 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache>
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions>
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMState: void cacheObservedParentTransitions(dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState)>(r2)
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.isTerminal : $z0 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isTerminal>
dynoptic.model.fifosys.gfsm.GFSMState.isAcceptForPid : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.isAcceptForPid : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState fsmStates>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : $r3 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState fsmStates>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : $z0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : $z2 = virtualinvoke $r4.<dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: boolean isEmptyForPid(int)>(i0)
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isAcceptForPid : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.List fsmStates>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.toString : $r1 = virtualinvoke r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.lang.String toShortIntStr()>()
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isInitForPid : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.List fsmStates>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.getNextAnonName : $i0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.getNextAnonName : $i2 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId>
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $r3 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : return 1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $r5 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId getChannelId()>()
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.setParent : r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.gfsm.GFSMState parent> = r1
dynoptic.model.fifosys.AbsMultiFSMState.getNumProcesses : $i0 = r0.<dynoptic.model.fifosys.AbsMultiFSMState: int numProcesses>
dynoptic.model.fifosys.gfsm.GFSMState.addObs : $z3 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSMState.addObs : $z2 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSMState.addObs : $r7 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.addObs : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSMState.addObs : specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMState: void cacheObservedParentTransitions(dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState)>(r1)
dynoptic.model.fifosys.gfsm.GFSMState.addObs : virtualinvoke r1.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: void setParent(dynoptic.model.fifosys.gfsm.GFSMState)>(r0)
dynoptic.model.fifosys.gfsm.GFSMState.cacheObservedParentTransitions : $r6 = virtualinvoke r1.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Set getTransitioningEvents()>()
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r6 = new dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : return r2
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r7 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache>
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : return r12
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $r13 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $z0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $i1 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: int nextFifoSysStateId>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $r11 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $r5 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $z1 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: boolean $assertionsDisabled>
dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>()
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : $z1 = interfaceinvoke r1.<dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn: boolean eval(java.lang.Object,int)>(r3, i0)
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : return 1
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.hashCode : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.List fsmStates>
dynoptic.model.fifosys.AbsMultiFSMState$1.eval : $z0 = virtualinvoke r1.<dynoptic.model.fifosys.AbsMultiFSMState: boolean isAcceptForPid(int)>(i0)
dynoptic.model.fifosys.AbsMultiFSMState$1.eval : $r2 = (dynoptic.model.fifosys.AbsMultiFSMState) r1
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds : r1 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.List chStatesFromChIds(java.util.List)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds : $r2 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState fromChannelStates(java.util.List)>(r1)
