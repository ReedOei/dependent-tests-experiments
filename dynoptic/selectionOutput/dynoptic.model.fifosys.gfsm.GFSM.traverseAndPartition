dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : $r6 = virtualinvoke r1.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Set getNextStates()>()
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : $r6 = virtualinvoke r1.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Set getNextStates()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : r4 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : r4 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : if $z1 == 0
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : return
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : r5 = (dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState) $r7
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : r5 = (dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState) $r7 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : $z2 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r5)
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : $z2 = interfaceinvoke r3.<java.util.Set: boolean contains(java.lang.Object)>(r5) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : if $z2 == 0
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : if $z2 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : if $z2 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSM: void addToQueueContentsHashMap(java.util.Map,dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState)>(r2, r5)
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSM: void addToQueueContentsHashMap(java.util.Map,dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState)>(r2, r5) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSM: void traverseAndPartition(dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState,java.util.Map,java.util.Set)>(r5, r2, r3)
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSM: void traverseAndPartition(dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState,java.util.Map,java.util.Set)>(r5, r2, r3) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.traverseAndPartition : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
