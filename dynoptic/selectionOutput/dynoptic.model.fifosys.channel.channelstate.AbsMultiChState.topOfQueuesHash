dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : i0 = 17 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $r3 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $r3 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : return i0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : r2 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r4
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : r2 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r4 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $z1 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: boolean isEmpty()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $z1 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: boolean isEmpty()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : if $z1 != 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $i1 = 31 * i0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : i0 = 31 * i0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : i0 = 31 * i0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $i1 = 31 * i0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $r5 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.event.IDistEventType peek()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $r5 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.event.IDistEventType peek()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $i2 = virtualinvoke $r5.<java.lang.Object: int hashCode()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $i2 = virtualinvoke $r5.<java.lang.Object: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : i0 = $i1 + $i2
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : i0 = $i1 + $i2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : goto [?= (branch)]
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : goto [?= (branch)] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
