dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r2 = new dynoptic.main.DynopticOptions >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r3 = newarray (java.lang.String)[0]
dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r3 = newarray (java.lang.String)[0] >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3)
dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r4 = interfaceinvoke r1.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r3) >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r5 = (java.lang.String[]) $r4
dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r5 = (java.lang.String[]) $r4 >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : specialinvoke $r2.<dynoptic.main.DynopticOptions: void <init>(java.lang.String[])>($r5)
dynoptic.main.DynopticMainTests.runDynFromFileArgs : specialinvoke $r2.<dynoptic.main.DynopticOptions: void <init>(java.lang.String[])>($r5) >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : r0.<dynoptic.main.DynopticMainTests: dynoptic.main.DynopticOptions opts> = $r2
dynoptic.main.DynopticMainTests.runDynFromFileArgs : r0.<dynoptic.main.DynopticMainTests: dynoptic.main.DynopticOptions opts> = $r2 >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r6 = new dynoptic.main.DynopticMain
dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r6 = new dynoptic.main.DynopticMain >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r7 = r0.<dynoptic.main.DynopticMainTests: dynoptic.main.DynopticOptions opts>
dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r7 = r0.<dynoptic.main.DynopticMainTests: dynoptic.main.DynopticOptions opts> >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : specialinvoke $r6.<dynoptic.main.DynopticMain: void <init>(dynoptic.main.DynopticOptions)>($r7)
dynoptic.main.DynopticMainTests.runDynFromFileArgs : specialinvoke $r6.<dynoptic.main.DynopticMain: void <init>(dynoptic.main.DynopticOptions)>($r7) >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : r0.<dynoptic.main.DynopticMainTests: dynoptic.main.DynopticMain dyn> = $r6
dynoptic.main.DynopticMainTests.runDynFromFileArgs : r0.<dynoptic.main.DynopticMainTests: dynoptic.main.DynopticMain dyn> = $r6 >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
dynoptic.main.DynopticMainTests.runDynFromFileArgs : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r8 = r0.<dynoptic.main.DynopticMainTests: dynoptic.main.DynopticMain dyn>
dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r8 = r0.<dynoptic.main.DynopticMainTests: dynoptic.main.DynopticMain dyn> >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : virtualinvoke $r8.<dynoptic.main.DynopticMain: void run()>()
dynoptic.main.DynopticMainTests.runDynFromFileArgs : virtualinvoke $r8.<dynoptic.main.DynopticMain: void run()>() >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : l1 = staticinvoke <java.lang.System: long currentTimeMillis()>()
dynoptic.main.DynopticMainTests.runDynFromFileArgs : l1 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : l2 = l1 - l0
dynoptic.main.DynopticMainTests.runDynFromFileArgs : l2 = l1 - l0 >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : l3 = l2 / 1000L
dynoptic.main.DynopticMainTests.runDynFromFileArgs : l3 = l2 / 1000L >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r9 = <dynoptic.main.DynopticMainTests: java.util.logging.Logger logger>
dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r9 = <dynoptic.main.DynopticMainTests: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r10 = new java.lang.StringBuilder
dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r10 = new java.lang.StringBuilder >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>()
dynoptic.main.DynopticMainTests.runDynFromFileArgs : specialinvoke $r10.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dynoptic run took: ")
dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Dynoptic run took: ") >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2)
dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l2) >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms ~ ")
dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("ms ~ ") >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3)
dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l3) >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s")
dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("s") >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.main.DynopticMainTests.runDynFromFileArgs : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : virtualinvoke $r9.<java.util.logging.Logger: void info(java.lang.String)>($r16)
dynoptic.main.DynopticMainTests.runDynFromFileArgs : virtualinvoke $r9.<java.util.logging.Logger: void info(java.lang.String)>($r16) >>>>>>>> dynoptic.main.DynopticMainTests.runDynFromFileArgs : return
