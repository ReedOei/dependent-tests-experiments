dynoptic.model.fifosys.gfsm.GFSMPath.refine : $z0 = <dynoptic.model.fifosys.gfsm.GFSMPath: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSMPath.refine : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : $z1 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMPath: boolean checkPathCompleteness(dynoptic.model.fifosys.gfsm.GFSMPath)>(r0)
dynoptic.model.fifosys.gfsm.GFSMPath.refine : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : $r6 = r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.List states>
dynoptic.model.fifosys.gfsm.GFSMPath.refine : $r6 = r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.List states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : $i0 = interfaceinvoke $r6.<java.util.List: int size()>()
dynoptic.model.fifosys.gfsm.GFSMPath.refine : $i0 = interfaceinvoke $r6.<java.util.List: int size()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : if $i0 != 1
dynoptic.model.fifosys.gfsm.GFSMPath.refine : if $i0 != 1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : $r7 = r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.List states>
dynoptic.model.fifosys.gfsm.GFSMPath.refine : if $i0 != 1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : i1 = specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMPath: int findMaxStitchPartIndex(int)>(0)
dynoptic.model.fifosys.gfsm.GFSMPath.refine : i1 = specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMPath: int findMaxStitchPartIndex(int)>(0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : if i1 != -1
dynoptic.model.fifosys.gfsm.GFSMPath.refine : if i1 != -1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : return 0
dynoptic.model.fifosys.gfsm.GFSMPath.refine : if i1 != -1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : $z2 = specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMPath: boolean refinePartition(dynoptic.model.fifosys.gfsm.GFSM,int)>(r1, i1)
dynoptic.model.fifosys.gfsm.GFSMPath.refine : $z2 = specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMPath: boolean refinePartition(dynoptic.model.fifosys.gfsm.GFSM,int)>(r1, i1) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : return $z2
dynoptic.model.fifosys.gfsm.GFSMPath.refine : $r7 = r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.List states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0)
dynoptic.model.fifosys.gfsm.GFSMPath.refine : $r8 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : r2 = (dynoptic.model.fifosys.gfsm.GFSMState) $r8
dynoptic.model.fifosys.gfsm.GFSMPath.refine : r2 = (dynoptic.model.fifosys.gfsm.GFSMState) $r8 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : $r9 = <dynoptic.model.fifosys.gfsm.GFSMPath: java.util.logging.Logger logger>
dynoptic.model.fifosys.gfsm.GFSMPath.refine : $r9 = <dynoptic.model.fifosys.gfsm.GFSMPath: java.util.logging.Logger logger> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : virtualinvoke $r9.<java.util.logging.Logger: void info(java.lang.String)>("Attempting to refine first partition (separate out initials) in a 1-state path.")
dynoptic.model.fifosys.gfsm.GFSMPath.refine : virtualinvoke $r9.<java.util.logging.Logger: void info(java.lang.String)>("Attempting to refine first partition (separate out initials) in a 1-state path.") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : r3 = specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.Set getExtrema(dynoptic.model.fifosys.gfsm.GFSMState,boolean)>(r2, 1)
dynoptic.model.fifosys.gfsm.GFSMPath.refine : r3 = specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.Set getExtrema(dynoptic.model.fifosys.gfsm.GFSMState,boolean)>(r2, 1) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : if r3 != null
dynoptic.model.fifosys.gfsm.GFSMPath.refine : if r3 != null >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : $r10 = <dynoptic.model.fifosys.gfsm.GFSMPath: java.util.logging.Logger logger>
dynoptic.model.fifosys.gfsm.GFSMPath.refine : if r3 != null >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : r4 = specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.Set setLeftFromSetRight(java.util.Set,dynoptic.model.fifosys.gfsm.GFSMState)>(r3, r2)
dynoptic.model.fifosys.gfsm.GFSMPath.refine : r4 = specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.Set setLeftFromSetRight(java.util.Set,dynoptic.model.fifosys.gfsm.GFSMState)>(r3, r2) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSM: void refineWithRandNonRelevantObsAssignment(dynoptic.model.fifosys.gfsm.GFSMState,java.util.Set,java.util.Set)>(r2, r4, r3)
dynoptic.model.fifosys.gfsm.GFSMPath.refine : virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSM: void refineWithRandNonRelevantObsAssignment(dynoptic.model.fifosys.gfsm.GFSMState,java.util.Set,java.util.Set)>(r2, r4, r3) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : return 1
dynoptic.model.fifosys.gfsm.GFSMPath.refine : $r10 = <dynoptic.model.fifosys.gfsm.GFSMPath: java.util.logging.Logger logger> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : virtualinvoke $r10.<java.util.logging.Logger: void info(java.lang.String)>("Attempting to refine first partition (separate out terminals) in a 1-state path.")
dynoptic.model.fifosys.gfsm.GFSMPath.refine : virtualinvoke $r10.<java.util.logging.Logger: void info(java.lang.String)>("Attempting to refine first partition (separate out terminals) in a 1-state path.") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : r3 = specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.Set getExtrema(dynoptic.model.fifosys.gfsm.GFSMState,boolean)>(r2, 0)
dynoptic.model.fifosys.gfsm.GFSMPath.refine : r3 = specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.Set getExtrema(dynoptic.model.fifosys.gfsm.GFSMState,boolean)>(r2, 0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : if r3 != null
dynoptic.model.fifosys.gfsm.GFSMPath.refine : if r3 != null >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : return 0
dynoptic.model.fifosys.gfsm.GFSMPath.refine : if r3 != null >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : r4 = specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.Set setLeftFromSetRight(java.util.Set,dynoptic.model.fifosys.gfsm.GFSMState)>(r3, r2)
dynoptic.model.fifosys.gfsm.GFSMPath.refine : $z1 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMPath: boolean checkPathCompleteness(dynoptic.model.fifosys.gfsm.GFSMPath)>(r0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : if $z1 != 0
dynoptic.model.fifosys.gfsm.GFSMPath.refine : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : $r5 = new java.lang.AssertionError
dynoptic.model.fifosys.gfsm.GFSMPath.refine : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : $r6 = r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.List states>
dynoptic.model.fifosys.gfsm.GFSMPath.refine : $r5 = new java.lang.AssertionError >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : specialinvoke $r5.<java.lang.AssertionError: void <init>()>()
dynoptic.model.fifosys.gfsm.GFSMPath.refine : specialinvoke $r5.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.refine : throw $r5
