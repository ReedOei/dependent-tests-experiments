dynoptic.model.automaton.EventTypeEncodings.getEventType : $r1 = r0.<dynoptic.model.automaton.EventTypeEncodings: java.util.Map charEncodings> >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0)
dynoptic.model.automaton.EventTypeEncodings.getEventType : $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0) >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2)
dynoptic.model.automaton.EventTypeEncodings.getEventType : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2) >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : if $z0 != 0
dynoptic.model.automaton.EventTypeEncodings.getEventType : if $z0 != 0 >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : $r3 = new java.lang.IllegalArgumentException
dynoptic.model.automaton.EventTypeEncodings.getEventType : if $z0 != 0 >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : $r4 = r0.<dynoptic.model.automaton.EventTypeEncodings: java.util.Map charEncodings>
dynoptic.model.automaton.EventTypeEncodings.getEventType : $r4 = r0.<dynoptic.model.automaton.EventTypeEncodings: java.util.Map charEncodings> >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0)
dynoptic.model.automaton.EventTypeEncodings.getEventType : $r5 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0) >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5)
dynoptic.model.automaton.EventTypeEncodings.getEventType : $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5) >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : $r7 = (synoptic.model.event.DistEventType) $r6
dynoptic.model.automaton.EventTypeEncodings.getEventType : $r7 = (synoptic.model.event.DistEventType) $r6 >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : return $r7
dynoptic.model.automaton.EventTypeEncodings.getEventType : $r3 = new java.lang.IllegalArgumentException >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The passed char has not been mapped to an event type.")
dynoptic.model.automaton.EventTypeEncodings.getEventType : specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The passed char has not been mapped to an event type.") >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : throw $r3
