dynoptic.model.fifosys.gfsm.GFSM.refine : $z0 = <dynoptic.model.fifosys.gfsm.GFSM: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $r6 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $z2 = <dynoptic.model.fifosys.gfsm.GFSM: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSM.refine : $z2 = <dynoptic.model.fifosys.gfsm.GFSM: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : if $z2 != 0
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z2 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $z3 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>()
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z2 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : r3 = null
dynoptic.model.fifosys.gfsm.GFSM.refine : r3 = null >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $z4 = <dynoptic.main.DynopticMain: boolean assertsOn>
dynoptic.model.fifosys.gfsm.GFSM.refine : $z4 = <dynoptic.main.DynopticMain: boolean assertsOn> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : if $z4 == 0
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z4 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : r3 = virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set getObservedStates()>()
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z4 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSMState: void removeAllObs(java.util.Set)>(r2)
dynoptic.model.fifosys.gfsm.GFSM.refine : virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSMState: void removeAllObs(java.util.Set)>(r2) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $r9 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.refine : $r9 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $r10 = new dynoptic.model.fifosys.gfsm.GFSMState
dynoptic.model.fifosys.gfsm.GFSM.refine : $r10 = new dynoptic.model.fifosys.gfsm.GFSMState >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $i0 = r0.<dynoptic.model.fifosys.gfsm.GFSM: int numProcesses>
dynoptic.model.fifosys.gfsm.GFSM.refine : $i0 = r0.<dynoptic.model.fifosys.gfsm.GFSM: int numProcesses> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : specialinvoke $r10.<dynoptic.model.fifosys.gfsm.GFSMState: void <init>(int,java.util.Set)>($i0, r2)
dynoptic.model.fifosys.gfsm.GFSM.refine : specialinvoke $r10.<dynoptic.model.fifosys.gfsm.GFSMState: void <init>(int,java.util.Set)>($i0, r2) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r10)
dynoptic.model.fifosys.gfsm.GFSM.refine : interfaceinvoke $r9.<java.util.Set: boolean add(java.lang.Object)>($r10) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSMState: void recreateCachedTransitions()>()
dynoptic.model.fifosys.gfsm.GFSM.refine : virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSMState: void recreateCachedTransitions()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $r11 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states>
dynoptic.model.fifosys.gfsm.GFSM.refine : $r11 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSM.refine : r4 = interfaceinvoke $r11.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $z6 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.refine : $z6 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : if $z6 == 0
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z6 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z6 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $z8 = <dynoptic.main.DynopticMain: boolean assertsOn>
dynoptic.model.fifosys.gfsm.GFSM.refine : $z8 = <dynoptic.main.DynopticMain: boolean assertsOn> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : if $z8 == 0
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z8 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : staticinvoke <dynoptic.model.fifosys.gfsm.GFSM: void checkPartitioningConsistency(java.util.Set)>(r3)
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z8 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : return
dynoptic.model.fifosys.gfsm.GFSM.refine : staticinvoke <dynoptic.model.fifosys.gfsm.GFSM: void checkPartitioningConsistency(java.util.Set)>(r3) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : return
dynoptic.model.fifosys.gfsm.GFSM.refine : $r12 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : r5 = (dynoptic.model.fifosys.gfsm.GFSMState) $r12
dynoptic.model.fifosys.gfsm.GFSM.refine : r5 = (dynoptic.model.fifosys.gfsm.GFSMState) $r12 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : if r5 == r1
dynoptic.model.fifosys.gfsm.GFSM.refine : if r5 == r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $r13 = virtualinvoke r5.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set getNextStates()>()
dynoptic.model.fifosys.gfsm.GFSM.refine : if r5 == r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : goto [?= $z6 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.gfsm.GFSM.refine : goto [?= $z6 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $z6 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSM.refine : $r13 = virtualinvoke r5.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set getNextStates()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $z7 = interfaceinvoke $r13.<java.util.Set: boolean contains(java.lang.Object)>(r1)
dynoptic.model.fifosys.gfsm.GFSM.refine : $z7 = interfaceinvoke $r13.<java.util.Set: boolean contains(java.lang.Object)>(r1) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : if $z7 == 0
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z7 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : virtualinvoke r5.<dynoptic.model.fifosys.gfsm.GFSMState: void recreateCachedTransitions()>()
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z7 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : goto [?= $z6 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.gfsm.GFSM.refine : virtualinvoke r5.<dynoptic.model.fifosys.gfsm.GFSMState: void recreateCachedTransitions()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : goto [?= $z6 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.gfsm.GFSM.refine : r3 = virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set getObservedStates()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : virtualinvoke r1.<dynoptic.model.fifosys.gfsm.GFSMState: void removeAllObs(java.util.Set)>(r2)
dynoptic.model.fifosys.gfsm.GFSM.refine : $z3 = interfaceinvoke r2.<java.util.Set: boolean isEmpty()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : if $z3 == 0
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z3 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $r8 = new java.lang.AssertionError
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z3 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : r3 = null
dynoptic.model.fifosys.gfsm.GFSM.refine : $r8 = new java.lang.AssertionError >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : specialinvoke $r8.<java.lang.AssertionError: void <init>()>()
dynoptic.model.fifosys.gfsm.GFSM.refine : specialinvoke $r8.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : throw $r8
dynoptic.model.fifosys.gfsm.GFSM.refine : $r6 = r0.<dynoptic.model.fifosys.gfsm.GFSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r1)
dynoptic.model.fifosys.gfsm.GFSM.refine : $z1 = interfaceinvoke $r6.<java.util.Set: boolean contains(java.lang.Object)>(r1) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : if $z1 != 0
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $r7 = new java.lang.AssertionError
dynoptic.model.fifosys.gfsm.GFSM.refine : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : $z2 = <dynoptic.model.fifosys.gfsm.GFSM: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSM.refine : $r7 = new java.lang.AssertionError >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : specialinvoke $r7.<java.lang.AssertionError: void <init>()>()
dynoptic.model.fifosys.gfsm.GFSM.refine : specialinvoke $r7.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSM.refine : throw $r7
