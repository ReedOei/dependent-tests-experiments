dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $z0 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $z1 = virtualinvoke r1.<synoptic.model.event.DistEventType: boolean isSendEvent()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $z2 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $z2 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z2 != 0
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z2 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r3 = virtualinvoke r1.<synoptic.model.event.DistEventType: synoptic.model.channelid.ChannelId getChannelId()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z2 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r6 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r6 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r7 = virtualinvoke r1.<synoptic.model.event.DistEventType: synoptic.model.channelid.ChannelId getChannelId()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r7 = virtualinvoke r1.<synoptic.model.event.DistEventType: synoptic.model.channelid.ChannelId getChannelId()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $i2 = virtualinvoke $r7.<synoptic.model.channelid.ChannelId: int getScmId()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $i2 = virtualinvoke $r7.<synoptic.model.channelid.ChannelId: int getScmId()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i2)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i2) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r9 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r8
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r9 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r8 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : virtualinvoke $r9.<dynoptic.model.fifosys.channel.channelstate.ChState: void enqueue(synoptic.model.event.IDistEventType)>(r1)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : virtualinvoke $r9.<dynoptic.model.fifosys.channel.channelstate.ChState: void enqueue(synoptic.model.event.IDistEventType)>(r1) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : return
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r3 = virtualinvoke r1.<synoptic.model.event.DistEventType: synoptic.model.channelid.ChannelId getChannelId()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $i0 = virtualinvoke $r3.<synoptic.model.channelid.ChannelId: int getScmId()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $i0 = virtualinvoke $r3.<synoptic.model.channelid.ChannelId: int getScmId()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $i1 = interfaceinvoke $r4.<java.util.List: int size()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $i1 = interfaceinvoke $r4.<java.util.List: int size()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $i0 < $i1
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $i0 < $i1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r5 = new java.lang.AssertionError
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $i0 < $i1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r6 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r5 = new java.lang.AssertionError >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : specialinvoke $r5.<java.lang.AssertionError: void <init>()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : specialinvoke $r5.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : throw $r5
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $z1 = virtualinvoke r1.<synoptic.model.event.DistEventType: boolean isSendEvent()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z1 != 0
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r2 = new java.lang.AssertionError
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $z2 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r2 = new java.lang.AssertionError >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : specialinvoke $r2.<java.lang.AssertionError: void <init>()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : specialinvoke $r2.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : throw $r2
