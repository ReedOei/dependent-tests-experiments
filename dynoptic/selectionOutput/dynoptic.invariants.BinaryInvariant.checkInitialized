dynoptic.invariants.BinaryInvariant.checkInitialized : $z0 = <dynoptic.invariants.BinaryInvariant: boolean $assertionsDisabled> >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : if $z0 != 0
dynoptic.invariants.BinaryInvariant.checkInitialized : if $z0 != 0 >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : $r1 = r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType firstSynth1>
dynoptic.invariants.BinaryInvariant.checkInitialized : if $z0 != 0 >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : $z1 = <dynoptic.invariants.BinaryInvariant: boolean $assertionsDisabled>
dynoptic.invariants.BinaryInvariant.checkInitialized : $z1 = <dynoptic.invariants.BinaryInvariant: boolean $assertionsDisabled> >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : if $z1 != 0
dynoptic.invariants.BinaryInvariant.checkInitialized : if $z1 != 0 >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : $r3 = r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType secondSynth1>
dynoptic.invariants.BinaryInvariant.checkInitialized : if $z1 != 0 >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : $z2 = <dynoptic.invariants.BinaryInvariant: boolean $assertionsDisabled>
dynoptic.invariants.BinaryInvariant.checkInitialized : $z2 = <dynoptic.invariants.BinaryInvariant: boolean $assertionsDisabled> >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : if $z2 != 0
dynoptic.invariants.BinaryInvariant.checkInitialized : if $z2 != 0 >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : $r5 = r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType firstSynth2>
dynoptic.invariants.BinaryInvariant.checkInitialized : if $z2 != 0 >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : $z3 = <dynoptic.invariants.BinaryInvariant: boolean $assertionsDisabled>
dynoptic.invariants.BinaryInvariant.checkInitialized : $z3 = <dynoptic.invariants.BinaryInvariant: boolean $assertionsDisabled> >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : if $z3 != 0
dynoptic.invariants.BinaryInvariant.checkInitialized : if $z3 != 0 >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : $r7 = r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType secondSynth2>
dynoptic.invariants.BinaryInvariant.checkInitialized : if $z3 != 0 >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : return
dynoptic.invariants.BinaryInvariant.checkInitialized : $r7 = r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType secondSynth2> >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : if $r7 != null
dynoptic.invariants.BinaryInvariant.checkInitialized : if $r7 != null >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : $r8 = new java.lang.AssertionError
dynoptic.invariants.BinaryInvariant.checkInitialized : if $r7 != null >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : return
dynoptic.invariants.BinaryInvariant.checkInitialized : $r8 = new java.lang.AssertionError >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : specialinvoke $r8.<java.lang.AssertionError: void <init>()>()
dynoptic.invariants.BinaryInvariant.checkInitialized : specialinvoke $r8.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : throw $r8
dynoptic.invariants.BinaryInvariant.checkInitialized : $r5 = r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType firstSynth2> >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : if $r5 != null
dynoptic.invariants.BinaryInvariant.checkInitialized : if $r5 != null >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : $r6 = new java.lang.AssertionError
dynoptic.invariants.BinaryInvariant.checkInitialized : if $r5 != null >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : $z3 = <dynoptic.invariants.BinaryInvariant: boolean $assertionsDisabled>
dynoptic.invariants.BinaryInvariant.checkInitialized : $r6 = new java.lang.AssertionError >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : specialinvoke $r6.<java.lang.AssertionError: void <init>()>()
dynoptic.invariants.BinaryInvariant.checkInitialized : specialinvoke $r6.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : throw $r6
dynoptic.invariants.BinaryInvariant.checkInitialized : $r3 = r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType secondSynth1> >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : if $r3 != null
dynoptic.invariants.BinaryInvariant.checkInitialized : if $r3 != null >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : $r4 = new java.lang.AssertionError
dynoptic.invariants.BinaryInvariant.checkInitialized : if $r3 != null >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : $z2 = <dynoptic.invariants.BinaryInvariant: boolean $assertionsDisabled>
dynoptic.invariants.BinaryInvariant.checkInitialized : $r4 = new java.lang.AssertionError >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : specialinvoke $r4.<java.lang.AssertionError: void <init>()>()
dynoptic.invariants.BinaryInvariant.checkInitialized : specialinvoke $r4.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : throw $r4
dynoptic.invariants.BinaryInvariant.checkInitialized : $r1 = r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType firstSynth1> >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : if $r1 != null
dynoptic.invariants.BinaryInvariant.checkInitialized : if $r1 != null >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : $r2 = new java.lang.AssertionError
dynoptic.invariants.BinaryInvariant.checkInitialized : if $r1 != null >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : $z1 = <dynoptic.invariants.BinaryInvariant: boolean $assertionsDisabled>
dynoptic.invariants.BinaryInvariant.checkInitialized : $r2 = new java.lang.AssertionError >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : specialinvoke $r2.<java.lang.AssertionError: void <init>()>()
dynoptic.invariants.BinaryInvariant.checkInitialized : specialinvoke $r2.<java.lang.AssertionError: void <init>()>() >>>>>>>> dynoptic.invariants.BinaryInvariant.checkInitialized : throw $r2
