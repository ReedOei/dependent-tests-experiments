dynoptic.model.export.GraphExporterTests.generateOutput : virtualinvoke r0.<dynoptic.model.export.GraphExporterTests: void cleanDotOutputs()>() >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : staticinvoke <dynoptic.model.export.GraphExporter: void exportCFSM(java.lang.String,dynoptic.model.fifosys.cfsm.CFSM)>("./test.dot", r1)
dynoptic.model.export.GraphExporterTests.generateOutput : staticinvoke <dynoptic.model.export.GraphExporter: void exportCFSM(java.lang.String,dynoptic.model.fifosys.cfsm.CFSM)>("./test.dot", r1) >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : $r2 = new java.io.File
dynoptic.model.export.GraphExporterTests.generateOutput : $r2 = new java.io.File >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("./test.dot")
dynoptic.model.export.GraphExporterTests.generateOutput : specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("./test.dot") >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>()
dynoptic.model.export.GraphExporterTests.generateOutput : $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>() >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)
dynoptic.model.export.GraphExporterTests.generateOutput : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0) >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : staticinvoke <dynoptic.model.export.GraphExporter: void generatePngFileFromDotFile(java.lang.String)>("./test.dot")
dynoptic.model.export.GraphExporterTests.generateOutput : staticinvoke <dynoptic.model.export.GraphExporter: void generatePngFileFromDotFile(java.lang.String)>("./test.dot") >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : $r3 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List getFSMs()>()
dynoptic.model.export.GraphExporterTests.generateOutput : $r3 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List getFSMs()>() >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : i0 = interfaceinvoke $r3.<java.util.List: int size()>()
dynoptic.model.export.GraphExporterTests.generateOutput : i0 = interfaceinvoke $r3.<java.util.List: int size()>() >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : i1 = virtualinvoke r0.<dynoptic.model.export.GraphExporterTests: int getNumDotPngFiles()>()
dynoptic.model.export.GraphExporterTests.generateOutput : i1 = virtualinvoke r0.<dynoptic.model.export.GraphExporterTests: int getNumDotPngFiles()>() >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : $l2 = (long) i0
dynoptic.model.export.GraphExporterTests.generateOutput : $l2 = (long) i0 >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : $l3 = (long) i1
dynoptic.model.export.GraphExporterTests.generateOutput : $l3 = (long) i1 >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l3)
dynoptic.model.export.GraphExporterTests.generateOutput : staticinvoke <org.junit.Assert: void assertEquals(long,long)>($l2, $l3) >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : return
