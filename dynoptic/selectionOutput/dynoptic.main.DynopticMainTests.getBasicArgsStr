dynoptic.main.DynopticMainTests.getBasicArgsStr : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList()>() >>>>>>>> dynoptic.main.DynopticMainTests.getBasicArgsStr : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("-v")
dynoptic.main.DynopticMainTests.getBasicArgsStr : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("-v") >>>>>>>> dynoptic.main.DynopticMainTests.getBasicArgsStr : $r2 = staticinvoke <dynoptic.DynopticTest: java.lang.String getMcPath()>()
dynoptic.main.DynopticMainTests.getBasicArgsStr : $r2 = staticinvoke <dynoptic.DynopticTest: java.lang.String getMcPath()>() >>>>>>>> dynoptic.main.DynopticMainTests.getBasicArgsStr : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2)
dynoptic.main.DynopticMainTests.getBasicArgsStr : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r2) >>>>>>>> dynoptic.main.DynopticMainTests.getBasicArgsStr : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("-o")
dynoptic.main.DynopticMainTests.getBasicArgsStr : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>("-o") >>>>>>>> dynoptic.main.DynopticMainTests.getBasicArgsStr : $r3 = new java.lang.StringBuilder
dynoptic.main.DynopticMainTests.getBasicArgsStr : $r3 = new java.lang.StringBuilder >>>>>>>> dynoptic.main.DynopticMainTests.getBasicArgsStr : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
dynoptic.main.DynopticMainTests.getBasicArgsStr : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.main.DynopticMainTests.getBasicArgsStr : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("test-output")
dynoptic.main.DynopticMainTests.getBasicArgsStr : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("test-output") >>>>>>>> dynoptic.main.DynopticMainTests.getBasicArgsStr : $r5 = <java.io.File: java.lang.String separator>
dynoptic.main.DynopticMainTests.getBasicArgsStr : $r5 = <java.io.File: java.lang.String separator> >>>>>>>> dynoptic.main.DynopticMainTests.getBasicArgsStr : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5)
dynoptic.main.DynopticMainTests.getBasicArgsStr : $r6 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r5) >>>>>>>> dynoptic.main.DynopticMainTests.getBasicArgsStr : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("test")
dynoptic.main.DynopticMainTests.getBasicArgsStr : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("test") >>>>>>>> dynoptic.main.DynopticMainTests.getBasicArgsStr : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.main.DynopticMainTests.getBasicArgsStr : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.main.DynopticMainTests.getBasicArgsStr : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r8)
dynoptic.main.DynopticMainTests.getBasicArgsStr : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r8) >>>>>>>> dynoptic.main.DynopticMainTests.getBasicArgsStr : return r1
