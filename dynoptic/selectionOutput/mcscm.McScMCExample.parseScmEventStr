mcscm.McScMCExample.parseScmEventStr : $r2 = <mcscm.McScMCExample: java.util.regex.Pattern eventTypeRecvPat> >>>>>>>> mcscm.McScMCExample.parseScmEventStr : r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0)
mcscm.McScMCExample.parseScmEventStr : r3 = virtualinvoke $r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>()
mcscm.McScMCExample.parseScmEventStr : $z0 = virtualinvoke r3.<java.util.regex.Matcher: boolean find()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if $z0 == 0
mcscm.McScMCExample.parseScmEventStr : if $z0 == 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $z1 = <mcscm.McScMCExample: boolean $assertionsDisabled>
mcscm.McScMCExample.parseScmEventStr : if $z0 == 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r12 = <mcscm.McScMCExample: java.util.regex.Pattern eventTypeSendPat>
mcscm.McScMCExample.parseScmEventStr : $r12 = <mcscm.McScMCExample: java.util.regex.Pattern eventTypeSendPat> >>>>>>>> mcscm.McScMCExample.parseScmEventStr : r13 = virtualinvoke $r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0)
mcscm.McScMCExample.parseScmEventStr : r13 = virtualinvoke $r12.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r0) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $z3 = virtualinvoke r13.<java.util.regex.Matcher: boolean find()>()
mcscm.McScMCExample.parseScmEventStr : $z3 = virtualinvoke r13.<java.util.regex.Matcher: boolean find()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if $z3 != 0
mcscm.McScMCExample.parseScmEventStr : if $z3 != 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r14 = new mcscm.VerifyOutputParseException
mcscm.McScMCExample.parseScmEventStr : if $z3 != 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $z4 = <mcscm.McScMCExample: boolean $assertionsDisabled>
mcscm.McScMCExample.parseScmEventStr : $z4 = <mcscm.McScMCExample: boolean $assertionsDisabled> >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if $z4 != 0
mcscm.McScMCExample.parseScmEventStr : if $z4 != 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $i3 = virtualinvoke r13.<java.util.regex.Matcher: int groupCount()>()
mcscm.McScMCExample.parseScmEventStr : if $z4 != 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r19 = virtualinvoke r13.<java.util.regex.Matcher: java.lang.String group(int)>(1)
mcscm.McScMCExample.parseScmEventStr : $r19 = virtualinvoke r13.<java.util.regex.Matcher: java.lang.String group(int)>(1) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r19)
mcscm.McScMCExample.parseScmEventStr : i4 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r19) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $z5 = <mcscm.McScMCExample: boolean $assertionsDisabled>
mcscm.McScMCExample.parseScmEventStr : $z5 = <mcscm.McScMCExample: boolean $assertionsDisabled> >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if $z5 != 0
mcscm.McScMCExample.parseScmEventStr : if $z5 != 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if i4 < 0
mcscm.McScMCExample.parseScmEventStr : if $z5 != 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r21 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i4)
mcscm.McScMCExample.parseScmEventStr : $r21 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i4) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : r22 = (synoptic.model.channelid.ChannelId) $r21
mcscm.McScMCExample.parseScmEventStr : r22 = (synoptic.model.channelid.ChannelId) $r21 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $z6 = r22 instanceof dynoptic.model.fifosys.channel.channelid.InvChannelId
mcscm.McScMCExample.parseScmEventStr : $z6 = r22 instanceof dynoptic.model.fifosys.channel.channelid.InvChannelId >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if $z6 == 0
mcscm.McScMCExample.parseScmEventStr : if $z6 == 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : return null
mcscm.McScMCExample.parseScmEventStr : if $z6 == 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $z7 = r22 instanceof dynoptic.model.fifosys.channel.channelid.LocalEventsChannelId
mcscm.McScMCExample.parseScmEventStr : $z7 = r22 instanceof dynoptic.model.fifosys.channel.channelid.LocalEventsChannelId >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if $z7 == 0
mcscm.McScMCExample.parseScmEventStr : if $z7 == 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r23 = (dynoptic.model.fifosys.channel.channelid.LocalEventsChannelId) r22
mcscm.McScMCExample.parseScmEventStr : if $z7 == 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r26 = virtualinvoke r13.<java.util.regex.Matcher: java.lang.String group(int)>(2)
mcscm.McScMCExample.parseScmEventStr : $r26 = virtualinvoke r13.<java.util.regex.Matcher: java.lang.String group(int)>(2) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r27 = staticinvoke <synoptic.model.event.DistEventType: synoptic.model.event.DistEventType SendEvent(java.lang.String,synoptic.model.channelid.ChannelId)>($r26, r22)
mcscm.McScMCExample.parseScmEventStr : $r27 = staticinvoke <synoptic.model.event.DistEventType: synoptic.model.event.DistEventType SendEvent(java.lang.String,synoptic.model.channelid.ChannelId)>($r26, r22) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : return $r27
mcscm.McScMCExample.parseScmEventStr : $r23 = (dynoptic.model.fifosys.channel.channelid.LocalEventsChannelId) r22 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r24 = virtualinvoke r13.<java.util.regex.Matcher: java.lang.String group(int)>(2)
mcscm.McScMCExample.parseScmEventStr : $r24 = virtualinvoke r13.<java.util.regex.Matcher: java.lang.String group(int)>(2) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r25 = virtualinvoke $r23.<dynoptic.model.fifosys.channel.channelid.LocalEventsChannelId: synoptic.model.event.DistEventType getEventType(java.lang.String)>($r24)
mcscm.McScMCExample.parseScmEventStr : $r25 = virtualinvoke $r23.<dynoptic.model.fifosys.channel.channelid.LocalEventsChannelId: synoptic.model.event.DistEventType getEventType(java.lang.String)>($r24) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : return $r25
mcscm.McScMCExample.parseScmEventStr : if i4 < 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $i5 = interfaceinvoke r1.<java.util.List: int size()>()
mcscm.McScMCExample.parseScmEventStr : if i4 < 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r20 = new java.lang.AssertionError
mcscm.McScMCExample.parseScmEventStr : $r20 = new java.lang.AssertionError >>>>>>>> mcscm.McScMCExample.parseScmEventStr : specialinvoke $r20.<java.lang.AssertionError: void <init>()>()
mcscm.McScMCExample.parseScmEventStr : specialinvoke $r20.<java.lang.AssertionError: void <init>()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : throw $r20
mcscm.McScMCExample.parseScmEventStr : $i5 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if i4 < $i5
mcscm.McScMCExample.parseScmEventStr : if i4 < $i5 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r20 = new java.lang.AssertionError
mcscm.McScMCExample.parseScmEventStr : if i4 < $i5 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r21 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i4)
mcscm.McScMCExample.parseScmEventStr : $i3 = virtualinvoke r13.<java.util.regex.Matcher: int groupCount()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if $i3 == 2
mcscm.McScMCExample.parseScmEventStr : if $i3 == 2 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r18 = new java.lang.AssertionError
mcscm.McScMCExample.parseScmEventStr : if $i3 == 2 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r19 = virtualinvoke r13.<java.util.regex.Matcher: java.lang.String group(int)>(1)
mcscm.McScMCExample.parseScmEventStr : $r18 = new java.lang.AssertionError >>>>>>>> mcscm.McScMCExample.parseScmEventStr : specialinvoke $r18.<java.lang.AssertionError: void <init>()>()
mcscm.McScMCExample.parseScmEventStr : specialinvoke $r18.<java.lang.AssertionError: void <init>()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : throw $r18
mcscm.McScMCExample.parseScmEventStr : $r14 = new mcscm.VerifyOutputParseException >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r5 = new java.lang.StringBuilder
mcscm.McScMCExample.parseScmEventStr : $r5 = new java.lang.StringBuilder >>>>>>>> mcscm.McScMCExample.parseScmEventStr : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
mcscm.McScMCExample.parseScmEventStr : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r15 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse event in an McScm counter-example: ")
mcscm.McScMCExample.parseScmEventStr : $r15 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not parse event in an McScm counter-example: ") >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
mcscm.McScMCExample.parseScmEventStr : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
mcscm.McScMCExample.parseScmEventStr : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : specialinvoke $r14.<mcscm.VerifyOutputParseException: void <init>(java.lang.String)>($r17)
mcscm.McScMCExample.parseScmEventStr : specialinvoke $r14.<mcscm.VerifyOutputParseException: void <init>(java.lang.String)>($r17) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : throw $r14
mcscm.McScMCExample.parseScmEventStr : $z1 = <mcscm.McScMCExample: boolean $assertionsDisabled> >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if $z1 != 0
mcscm.McScMCExample.parseScmEventStr : if $z1 != 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $i1 = virtualinvoke r3.<java.util.regex.Matcher: int groupCount()>()
mcscm.McScMCExample.parseScmEventStr : if $z1 != 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r7 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1)
mcscm.McScMCExample.parseScmEventStr : $r7 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7)
mcscm.McScMCExample.parseScmEventStr : i0 = staticinvoke <java.lang.Integer: int parseInt(java.lang.String)>($r7) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $z2 = <mcscm.McScMCExample: boolean $assertionsDisabled>
mcscm.McScMCExample.parseScmEventStr : $z2 = <mcscm.McScMCExample: boolean $assertionsDisabled> >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if $z2 != 0
mcscm.McScMCExample.parseScmEventStr : if $z2 != 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if i0 < 0
mcscm.McScMCExample.parseScmEventStr : if $z2 != 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0)
mcscm.McScMCExample.parseScmEventStr : $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : r4 = (synoptic.model.channelid.ChannelId) $r9
mcscm.McScMCExample.parseScmEventStr : r4 = (synoptic.model.channelid.ChannelId) $r9 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r10 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(2)
mcscm.McScMCExample.parseScmEventStr : $r10 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(2) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r11 = staticinvoke <synoptic.model.event.DistEventType: synoptic.model.event.DistEventType RecvEvent(java.lang.String,synoptic.model.channelid.ChannelId)>($r10, r4)
mcscm.McScMCExample.parseScmEventStr : $r11 = staticinvoke <synoptic.model.event.DistEventType: synoptic.model.event.DistEventType RecvEvent(java.lang.String,synoptic.model.channelid.ChannelId)>($r10, r4) >>>>>>>> mcscm.McScMCExample.parseScmEventStr : return $r11
mcscm.McScMCExample.parseScmEventStr : if i0 < 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $i2 = interfaceinvoke r1.<java.util.List: int size()>()
mcscm.McScMCExample.parseScmEventStr : if i0 < 0 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r8 = new java.lang.AssertionError
mcscm.McScMCExample.parseScmEventStr : $r8 = new java.lang.AssertionError >>>>>>>> mcscm.McScMCExample.parseScmEventStr : specialinvoke $r8.<java.lang.AssertionError: void <init>()>()
mcscm.McScMCExample.parseScmEventStr : specialinvoke $r8.<java.lang.AssertionError: void <init>()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : throw $r8
mcscm.McScMCExample.parseScmEventStr : $i2 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if i0 < $i2
mcscm.McScMCExample.parseScmEventStr : if i0 < $i2 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r8 = new java.lang.AssertionError
mcscm.McScMCExample.parseScmEventStr : if i0 < $i2 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r9 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i0)
mcscm.McScMCExample.parseScmEventStr : $i1 = virtualinvoke r3.<java.util.regex.Matcher: int groupCount()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : if $i1 == 2
mcscm.McScMCExample.parseScmEventStr : if $i1 == 2 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r6 = new java.lang.AssertionError
mcscm.McScMCExample.parseScmEventStr : if $i1 == 2 >>>>>>>> mcscm.McScMCExample.parseScmEventStr : $r7 = virtualinvoke r3.<java.util.regex.Matcher: java.lang.String group(int)>(1)
mcscm.McScMCExample.parseScmEventStr : $r6 = new java.lang.AssertionError >>>>>>>> mcscm.McScMCExample.parseScmEventStr : specialinvoke $r6.<java.lang.AssertionError: void <init>()>()
mcscm.McScMCExample.parseScmEventStr : specialinvoke $r6.<java.lang.AssertionError: void <init>()>() >>>>>>>> mcscm.McScMCExample.parseScmEventStr : throw $r6
