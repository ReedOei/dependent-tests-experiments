dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.setUpLogging : if $r1 == null
dynoptic.main.DynopticMain.setUpLogging : if $r1 == null >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r1.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r1.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache>
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0)
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : r1 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List chStatesFromChIds(java.util.List)>(r0)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : r1 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List chStatesFromChIds(java.util.List)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z0 = <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z0 = <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $i0 = interfaceinvoke r0.<java.util.List: int size()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $i0 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z1 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r3 = (synoptic.model.channelid.ChannelId) $r5
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r3 = (synoptic.model.channelid.ChannelId) $r5 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r6 = new dynoptic.model.fifosys.channel.channelstate.ChState
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r6 = new dynoptic.model.fifosys.channel.channelstate.ChState >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : specialinvoke $r6.<dynoptic.model.fifosys.channel.channelstate.ChState: void <init>(synoptic.model.channelid.ChannelId)>(r3)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : specialinvoke $r6.<dynoptic.model.fifosys.channel.channelstate.ChState: void <init>(synoptic.model.channelid.ChannelId)>(r3) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : return r1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : return r1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : $r2 = new dynoptic.model.fifosys.channel.channelstate.MutableMultiChState
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : $r2 = new dynoptic.model.fifosys.channel.channelstate.MutableMultiChState >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : specialinvoke $r2.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: void <init>(java.util.List)>(r1)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : specialinvoke $r2.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: void <init>(java.util.List)>(r1) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : return $r2
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : return $r2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.hashCode : $i0 = specialinvoke r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: int hashCode()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.hashCode : $i0 = specialinvoke r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.hashCode : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.hashCode : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.hashCode : $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.hashCode : $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : b0 = 17
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : b0 = 17 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i1 = 31 * b0
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i1 = 31 * b0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId>
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i2 = virtualinvoke $r1.<synoptic.model.channelid.ChannelId: int hashCode()>()
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i2 = virtualinvoke $r1.<synoptic.model.channelid.ChannelId: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : i3 = $i1 + $i2
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : i3 = $i1 + $i2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i4 = 31 * i3
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i4 = 31 * i3 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $r2 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $r2 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i5 = interfaceinvoke $r2.<java.util.List: int hashCode()>()
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i5 = interfaceinvoke $r2.<java.util.List: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : i6 = $i4 + $i5
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : i6 = $i4 + $i5 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : return i6
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : return i6 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.hashCode : return $i0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.hashCode : return $i0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.hashCode : return $i0
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.hashCode : return $i0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $z0 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $z0 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $z2 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $z2 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z2 != 0
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z2 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r6 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r6 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r7 = virtualinvoke r1.<synoptic.model.event.DistEventType: synoptic.model.channelid.ChannelId getChannelId()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r7 = virtualinvoke r1.<synoptic.model.event.DistEventType: synoptic.model.channelid.ChannelId getChannelId()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $i2 = virtualinvoke $r7.<synoptic.model.channelid.ChannelId: int getScmId()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $i2 = virtualinvoke $r7.<synoptic.model.channelid.ChannelId: int getScmId()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i2)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i2) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r9 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r8
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r9 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r8 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : virtualinvoke $r9.<dynoptic.model.fifosys.channel.channelstate.ChState: void enqueue(synoptic.model.event.IDistEventType)>(r1)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : virtualinvoke $r9.<dynoptic.model.fifosys.channel.channelstate.ChState: void enqueue(synoptic.model.event.IDistEventType)>(r1) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : $z0 = <dynoptic.model.fifosys.channel.channelstate.ChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : $z0 = <dynoptic.model.fifosys.channel.channelstate.ChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : $z2 = <dynoptic.model.fifosys.channel.channelstate.ChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : $z2 = <dynoptic.model.fifosys.channel.channelstate.ChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : if $z2 != 0
dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : if $z2 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : $r6 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : $r6 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r1)
dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : $r3 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : $r3 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : r2 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r4
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : r2 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r4 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : $z1 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: boolean isEmpty()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : $z1 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: boolean isEmpty()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>()
dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : return $z0
dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : return $z0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : if $z1 != 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : return 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : return 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $r3 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $r3 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : r2 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r4
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : r2 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r4 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $r5 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId getChannelId()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $r5 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId getChannelId()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.getChannelId : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId>
dynoptic.model.fifosys.channel.channelstate.ChState.getChannelId : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.getChannelId : return $r1
dynoptic.model.fifosys.channel.channelstate.ChState.getChannelId : return $r1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $i1 = virtualinvoke $r5.<synoptic.model.channelid.ChannelId: int getDstPid()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $i1 = virtualinvoke $r5.<synoptic.model.channelid.ChannelId: int getDstPid()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : if $i1 != i0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : if $i1 != i0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $z1 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: boolean isEmpty()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $z1 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: boolean isEmpty()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : if $z1 != 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : return 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : return 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : return 1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : return 1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $z0 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $z0 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $i2 = virtualinvoke r1.<synoptic.model.channelid.ChannelId: int getScmId()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $i2 = virtualinvoke r1.<synoptic.model.channelid.ChannelId: int getScmId()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $r6 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r5
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $r6 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r5 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $r7 = virtualinvoke $r6.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.event.IDistEventType peek()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $r7 = virtualinvoke $r6.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.event.IDistEventType peek()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.peek : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.ChState.peek : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.peek : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0)
dynoptic.model.fifosys.channel.channelstate.ChState.peek : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.peek : $r3 = (synoptic.model.event.IDistEventType) $r2
dynoptic.model.fifosys.channel.channelstate.ChState.peek : $r3 = (synoptic.model.event.IDistEventType) $r2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.peek : return $r3
dynoptic.model.fifosys.channel.channelstate.ChState.peek : return $r3 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $r8 = (synoptic.model.event.DistEventType) $r7
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : $r8 = (synoptic.model.event.DistEventType) $r7 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : return $r8
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.peek : return $r8 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $z0 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $z0 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $i2 = virtualinvoke r1.<synoptic.model.channelid.ChannelId: int getScmId()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $i2 = virtualinvoke r1.<synoptic.model.channelid.ChannelId: int getScmId()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>($i2) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r6 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r5
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r6 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r5 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r7 = virtualinvoke $r6.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.event.IDistEventType dequeue()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r7 = virtualinvoke $r6.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.event.IDistEventType dequeue()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.dequeue : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.ChState.dequeue : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.dequeue : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(0)
dynoptic.model.fifosys.channel.channelstate.ChState.dequeue : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.dequeue : $r3 = (synoptic.model.event.IDistEventType) $r2
dynoptic.model.fifosys.channel.channelstate.ChState.dequeue : $r3 = (synoptic.model.event.IDistEventType) $r2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.dequeue : return $r3
dynoptic.model.fifosys.channel.channelstate.ChState.dequeue : return $r3 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r8 = (synoptic.model.event.DistEventType) $r7
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r8 = (synoptic.model.event.DistEventType) $r7 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : return $r8
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : return $r8 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : return 1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmpty : return 1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $z2 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $z2 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : if $z2 != 0
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : if $z2 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r7 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r7 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r8 = virtualinvoke r1.<synoptic.model.event.DistEventType: synoptic.model.channelid.ChannelId getChannelId()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r8 = virtualinvoke r1.<synoptic.model.event.DistEventType: synoptic.model.channelid.ChannelId getChannelId()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $i2 = virtualinvoke $r8.<synoptic.model.channelid.ChannelId: int getScmId()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $i2 = virtualinvoke $r8.<synoptic.model.channelid.ChannelId: int getScmId()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i2)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r9 = interfaceinvoke $r7.<java.util.List: java.lang.Object get(int)>($i2) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r10 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r9
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r10 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r9 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r11 = virtualinvoke $r10.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.event.IDistEventType dequeue()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $r11 = virtualinvoke $r10.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.event.IDistEventType dequeue()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : r2 = (synoptic.model.event.DistEventType) $r11
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : r2 = (synoptic.model.event.DistEventType) $r11 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $z3 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : $z3 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.dequeue : if $z3 != 0
