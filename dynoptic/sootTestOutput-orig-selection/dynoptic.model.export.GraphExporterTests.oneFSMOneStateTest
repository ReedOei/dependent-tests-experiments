dynoptic.model.export.GraphExporterTests.setUp : $r1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : $i0 = r0.<dynoptic.model.export.GraphExporterTests: int pid0>
dynoptic.model.export.GraphExporterTests.setUp : $i0 = r0.<dynoptic.model.export.GraphExporterTests: int pid0> >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : specialinvoke $r1.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(1, 1, $i0, 0)
dynoptic.model.export.GraphExporterTests.setUp : specialinvoke $r1.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(1, 1, $i0, 0) >>>>>>>> dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap
dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : r0.<dynoptic.model.export.GraphExporterTests: dynoptic.model.fifosys.cfsm.fsm.FSMState s_0> = $r1
dynoptic.model.export.GraphExporterTests.setUp : r0.<dynoptic.model.export.GraphExporterTests: dynoptic.model.fifosys.cfsm.fsm.FSMState s_0> = $r1 >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : $r3 = new dynoptic.model.fifosys.cfsm.fsm.FSMState
dynoptic.model.export.GraphExporterTests.setUp : $r3 = new dynoptic.model.fifosys.cfsm.fsm.FSMState >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : $i1 = r0.<dynoptic.model.export.GraphExporterTests: int pid0>
dynoptic.model.export.GraphExporterTests.setUp : $i1 = r0.<dynoptic.model.export.GraphExporterTests: int pid0> >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : specialinvoke $r3.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(0, 1, $i1, 0)
dynoptic.model.export.GraphExporterTests.setUp : specialinvoke $r3.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(0, 1, $i1, 0) >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : r0.<dynoptic.model.export.GraphExporterTests: dynoptic.model.fifosys.cfsm.fsm.FSMState s0> = $r3
dynoptic.model.export.GraphExporterTests.setUp : r0.<dynoptic.model.export.GraphExporterTests: dynoptic.model.fifosys.cfsm.fsm.FSMState s0> = $r3 >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : $r4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState
dynoptic.model.export.GraphExporterTests.setUp : $r4 = new dynoptic.model.fifosys.cfsm.fsm.FSMState >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : $i2 = r0.<dynoptic.model.export.GraphExporterTests: int pid0>
dynoptic.model.export.GraphExporterTests.setUp : $i2 = r0.<dynoptic.model.export.GraphExporterTests: int pid0> >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : specialinvoke $r4.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(1, 0, $i2, 1)
dynoptic.model.export.GraphExporterTests.setUp : specialinvoke $r4.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(1, 0, $i2, 1) >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : r0.<dynoptic.model.export.GraphExporterTests: dynoptic.model.fifosys.cfsm.fsm.FSMState s1> = $r4
dynoptic.model.export.GraphExporterTests.setUp : r0.<dynoptic.model.export.GraphExporterTests: dynoptic.model.fifosys.cfsm.fsm.FSMState s1> = $r4 >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : $r5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState
dynoptic.model.export.GraphExporterTests.setUp : $r5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : $i3 = r0.<dynoptic.model.export.GraphExporterTests: int pid1>
dynoptic.model.export.GraphExporterTests.setUp : $i3 = r0.<dynoptic.model.export.GraphExporterTests: int pid1> >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : specialinvoke $r5.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(0, 1, $i3, 0)
dynoptic.model.export.GraphExporterTests.setUp : specialinvoke $r5.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(0, 1, $i3, 0) >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : r0.<dynoptic.model.export.GraphExporterTests: dynoptic.model.fifosys.cfsm.fsm.FSMState t0> = $r5
dynoptic.model.export.GraphExporterTests.setUp : r0.<dynoptic.model.export.GraphExporterTests: dynoptic.model.fifosys.cfsm.fsm.FSMState t0> = $r5 >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : $r6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState
dynoptic.model.export.GraphExporterTests.setUp : $r6 = new dynoptic.model.fifosys.cfsm.fsm.FSMState >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : $i4 = r0.<dynoptic.model.export.GraphExporterTests: int pid1>
dynoptic.model.export.GraphExporterTests.setUp : $i4 = r0.<dynoptic.model.export.GraphExporterTests: int pid1> >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : specialinvoke $r6.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(1, 0, $i4, 1)
dynoptic.model.export.GraphExporterTests.setUp : specialinvoke $r6.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(1, 0, $i4, 1) >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : r0.<dynoptic.model.export.GraphExporterTests: dynoptic.model.fifosys.cfsm.fsm.FSMState t1> = $r6
dynoptic.model.export.GraphExporterTests.setUp : r0.<dynoptic.model.export.GraphExporterTests: dynoptic.model.fifosys.cfsm.fsm.FSMState t1> = $r6 >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : $r7 = new synoptic.model.channelid.ChannelId
dynoptic.model.export.GraphExporterTests.setUp : $r7 = new synoptic.model.channelid.ChannelId >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : $i5 = r0.<dynoptic.model.export.GraphExporterTests: int pid0>
dynoptic.model.export.GraphExporterTests.setUp : $i5 = r0.<dynoptic.model.export.GraphExporterTests: int pid0> >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : $i6 = r0.<dynoptic.model.export.GraphExporterTests: int pid1>
dynoptic.model.export.GraphExporterTests.setUp : $i6 = r0.<dynoptic.model.export.GraphExporterTests: int pid1> >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : specialinvoke $r7.<synoptic.model.channelid.ChannelId: void <init>(int,int,int)>($i5, $i6, 0)
dynoptic.model.export.GraphExporterTests.setUp : specialinvoke $r7.<synoptic.model.channelid.ChannelId: void <init>(int,int,int)>($i5, $i6, 0) >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : r2 = $r7
dynoptic.model.export.GraphExporterTests.setUp : r2 = $r7 >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : $r8 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>(1)
dynoptic.model.export.GraphExporterTests.setUp : $r8 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>(1) >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0)
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0) >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : r0.<dynoptic.model.export.GraphExporterTests: java.util.List channels> = $r8
dynoptic.model.export.GraphExporterTests.setUp : r0.<dynoptic.model.export.GraphExporterTests: java.util.List channels> = $r8 >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : $r9 = r0.<dynoptic.model.export.GraphExporterTests: java.util.List channels>
dynoptic.model.export.GraphExporterTests.setUp : $r9 = r0.<dynoptic.model.export.GraphExporterTests: java.util.List channels> >>>>>>>> dynoptic.model.export.GraphExporterTests.setUp : interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r2)
dynoptic.model.export.GraphExporterTests.setUp : interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>(int)>(i0)
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>(int)>(i0) >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : b0 = 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : b0 = 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i1 = b0 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i1 = b0 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z0 == 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b2 = 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b2 = 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i3 = $i1 + $b2]
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i3 = $i1 + $b2] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i3 = $i1 + $b2
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i3 = $i1 + $b2 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i4 = i3 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i4 = i3 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z1 == 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b5 = 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b5 = 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i6 = $i4 + $b5]
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i6 = $i4 + $b5] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i6 = $i4 + $b5
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i6 = $i4 + $b5 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i7 = i6 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i7 = i6 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i8 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int pid>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i8 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int pid> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i9 = $i7 + $i8
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i9 = $i7 + $i8 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i10 = i9 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i10 = i9 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i11 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i11 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i12 = $i10 + $i11
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i12 = $i10 + $i11 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : return 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : return 1 >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>()
dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>()
dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states>
dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0
dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.AbsFSM.recomputeAlphabet : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r2 = (dynoptic.model.AbsFSMState) $r6
dynoptic.model.AbsFSM.recomputeAlphabet : r2 = (dynoptic.model.AbsFSMState) $r6 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r3 = virtualinvoke r2.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>()
dynoptic.model.AbsFSM.recomputeAlphabet : r3 = virtualinvoke r2.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions>
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>()
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : return $r2
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : return $r2 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r7 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.recomputeAlphabet : $r7 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r7.<dynoptic.model.alphabet.FSMAlphabet: boolean addAll(java.util.Collection)>(r3)
dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r7.<dynoptic.model.alphabet.FSMAlphabet: boolean addAll(java.util.Collection)>(r3) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.addAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1)
dynoptic.model.alphabet.FSMAlphabet.addAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : return $z0
dynoptic.model.alphabet.FSMAlphabet.addAll : return $z0 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.AbsFSM.recomputeAlphabet : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : $z0 = <dynoptic.model.fifosys.cfsm.CFSM: boolean $assertionsDisabled>
dynoptic.model.fifosys.cfsm.CFSM.addFSM : $z0 = <dynoptic.model.fifosys.cfsm.CFSM: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : if $z0 != 0
dynoptic.model.fifosys.cfsm.CFSM.addFSM : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : $z1 = <dynoptic.model.fifosys.cfsm.CFSM: boolean $assertionsDisabled>
dynoptic.model.fifosys.cfsm.CFSM.addFSM : $z1 = <dynoptic.model.fifosys.cfsm.CFSM: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : if $z1 != 0
dynoptic.model.fifosys.cfsm.CFSM.addFSM : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : i0 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSM: int getPid()>()
dynoptic.model.fifosys.cfsm.CFSM.addFSM : i0 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSM: int getPid()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getPid : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: int pid>
dynoptic.model.fifosys.cfsm.fsm.FSM.getPid : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: int pid> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getPid : return $i0
dynoptic.model.fifosys.cfsm.fsm.FSM.getPid : return $i0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : $z2 = <dynoptic.main.DynopticMain: boolean assertsOn>
dynoptic.model.fifosys.cfsm.CFSM.addFSM : $z2 = <dynoptic.main.DynopticMain: boolean assertsOn> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : if $z2 == 0
dynoptic.model.fifosys.cfsm.CFSM.addFSM : if $z2 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : $r17 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms>
dynoptic.model.fifosys.cfsm.CFSM.addFSM : $r17 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : interfaceinvoke $r17.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1)
dynoptic.model.fifosys.cfsm.CFSM.addFSM : interfaceinvoke $r17.<java.util.List: java.lang.Object set(int,java.lang.Object)>(i0, r1) >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : $r19 = r0.<dynoptic.model.fifosys.cfsm.CFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.fifosys.cfsm.CFSM.addFSM : $r19 = r0.<dynoptic.model.fifosys.cfsm.CFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : $r20 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.alphabet.FSMAlphabet getAlphabet()>()
dynoptic.model.fifosys.cfsm.CFSM.addFSM : $r20 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.alphabet.FSMAlphabet getAlphabet()>() >>>>>>>> dynoptic.model.AbsFSM.getAlphabet : $r1 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.getAlphabet : $r1 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.getAlphabet : return $r1
dynoptic.model.AbsFSM.getAlphabet : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : virtualinvoke $r19.<dynoptic.model.alphabet.FSMAlphabet: boolean addAll(java.util.Collection)>($r20)
dynoptic.model.fifosys.cfsm.CFSM.addFSM : virtualinvoke $r19.<dynoptic.model.alphabet.FSMAlphabet: boolean addAll(java.util.Collection)>($r20) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.iterator : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.iterator : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.iterator : $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.alphabet.FSMAlphabet.iterator : $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.iterator : return $r2
dynoptic.model.alphabet.FSMAlphabet.iterator : return $r2 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : $i9 = r0.<dynoptic.model.fifosys.cfsm.CFSM: int unSpecifiedPids>
dynoptic.model.fifosys.cfsm.CFSM.addFSM : $i9 = r0.<dynoptic.model.fifosys.cfsm.CFSM: int unSpecifiedPids> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : $i10 = $i9 - 1
dynoptic.model.fifosys.cfsm.CFSM.addFSM : $i10 = $i9 - 1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.addFSM : r0.<dynoptic.model.fifosys.cfsm.CFSM: int unSpecifiedPids> = $i10
dynoptic.model.fifosys.cfsm.CFSM.addFSM : r0.<dynoptic.model.fifosys.cfsm.CFSM: int unSpecifiedPids> = $i10 >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : virtualinvoke r0.<dynoptic.model.export.GraphExporterTests: void cleanDotOutputs()>()
dynoptic.model.export.GraphExporterTests.generateOutput : virtualinvoke r0.<dynoptic.model.export.GraphExporterTests: void cleanDotOutputs()>() >>>>>>>> dynoptic.DynopticTest.cleanDotOutputs : $r1 = new java.io.File
dynoptic.DynopticTest.cleanDotOutputs : $r1 = new java.io.File >>>>>>>> dynoptic.DynopticTest.cleanDotOutputs : specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(".")
dynoptic.DynopticTest.cleanDotOutputs : specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(".") >>>>>>>> dynoptic.DynopticTest.cleanDotOutputs : r2 = $r1
dynoptic.DynopticTest.cleanDotOutputs : r2 = $r1 >>>>>>>> dynoptic.DynopticTest.cleanDotOutputs : $r7 = new org.apache.commons.io.filefilter.WildcardFileFilter
dynoptic.DynopticTest.cleanDotOutputs : $r7 = new org.apache.commons.io.filefilter.WildcardFileFilter >>>>>>>> dynoptic.DynopticTest.cleanDotOutputs : specialinvoke $r7.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String)>("test.dot*")
dynoptic.DynopticTest.cleanDotOutputs : specialinvoke $r7.<org.apache.commons.io.filefilter.WildcardFileFilter: void <init>(java.lang.String)>("test.dot*") >>>>>>>> dynoptic.DynopticTest.cleanDotOutputs : r3 = $r7
dynoptic.DynopticTest.cleanDotOutputs : r3 = $r7 >>>>>>>> dynoptic.DynopticTest.cleanDotOutputs : r4 = virtualinvoke r2.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>(r3)
dynoptic.DynopticTest.cleanDotOutputs : r4 = virtualinvoke r2.<java.io.File: java.io.File[] listFiles(java.io.FileFilter)>(r3) >>>>>>>> dynoptic.DynopticTest.cleanDotOutputs : r5 = r4
dynoptic.DynopticTest.cleanDotOutputs : r5 = r4 >>>>>>>> dynoptic.DynopticTest.cleanDotOutputs : i0 = lengthof r5
dynoptic.DynopticTest.cleanDotOutputs : i0 = lengthof r5 >>>>>>>> dynoptic.DynopticTest.cleanDotOutputs : i1 = 0
dynoptic.DynopticTest.cleanDotOutputs : i1 = 0 >>>>>>>> dynoptic.DynopticTest.cleanDotOutputs : if i1 >= i0
dynoptic.DynopticTest.cleanDotOutputs : if i1 >= i0 >>>>>>>> dynoptic.DynopticTest.cleanDotOutputs : r6 = r5[i1]
dynoptic.DynopticTest.cleanDotOutputs : r6 = r5[i1] >>>>>>>> dynoptic.DynopticTest.cleanDotOutputs : virtualinvoke r6.<java.io.File: boolean delete()>()
dynoptic.DynopticTest.cleanDotOutputs : virtualinvoke r6.<java.io.File: boolean delete()>() >>>>>>>> dynoptic.DynopticTest.cleanDotOutputs : i1 = i1 + 1
dynoptic.DynopticTest.cleanDotOutputs : i1 = i1 + 1 >>>>>>>> dynoptic.DynopticTest.cleanDotOutputs : goto [?= (branch)]
dynoptic.DynopticTest.cleanDotOutputs : goto [?= (branch)] >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : staticinvoke <dynoptic.model.export.GraphExporter: void exportCFSM(java.lang.String,dynoptic.model.fifosys.cfsm.CFSM)>("./test.dot", r1)
dynoptic.model.export.GraphExporterTests.generateOutput : staticinvoke <dynoptic.model.export.GraphExporter: void exportCFSM(java.lang.String,dynoptic.model.fifosys.cfsm.CFSM)>("./test.dot", r1) >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r2 = new java.io.File
dynoptic.model.export.GraphExporter.exportCFSM : $r2 = new java.io.File >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0)
dynoptic.model.export.GraphExporter.exportCFSM : specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>(r0) >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : r3 = $r2
dynoptic.model.export.GraphExporter.exportCFSM : r3 = $r2 >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r6 = <dynoptic.model.export.GraphExporter: java.util.logging.Logger logger>
dynoptic.model.export.GraphExporter.exportCFSM : $r6 = <dynoptic.model.export.GraphExporter: java.util.logging.Logger logger> >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r7 = new java.lang.StringBuilder
dynoptic.model.export.GraphExporter.exportCFSM : $r7 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.GraphExporter.exportCFSM : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exporting CFSM to: ")
dynoptic.model.export.GraphExporter.exportCFSM : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Exporting CFSM to: ") >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0)
dynoptic.model.export.GraphExporter.exportCFSM : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r0) >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.GraphExporter.exportCFSM : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : virtualinvoke $r6.<java.util.logging.Logger: void info(java.lang.String)>($r10)
dynoptic.model.export.GraphExporter.exportCFSM : virtualinvoke $r6.<java.util.logging.Logger: void info(java.lang.String)>($r10) >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r11 = new java.io.PrintWriter
dynoptic.model.export.GraphExporter.exportCFSM : $r11 = new java.io.PrintWriter >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : specialinvoke $r11.<java.io.PrintWriter: void <init>(java.io.File)>(r3)
dynoptic.model.export.GraphExporter.exportCFSM : specialinvoke $r11.<java.io.PrintWriter: void <init>(java.io.File)>(r3) >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : r4 = $r11
dynoptic.model.export.GraphExporter.exportCFSM : r4 = $r11 >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : goto [?= staticinvoke <dynoptic.model.export.GraphExporter: void exportCFSM(java.io.Writer,dynoptic.model.fifosys.cfsm.CFSM)>(r4, r1)]
dynoptic.model.export.GraphExporter.exportCFSM : goto [?= staticinvoke <dynoptic.model.export.GraphExporter: void exportCFSM(java.io.Writer,dynoptic.model.fifosys.cfsm.CFSM)>(r4, r1)] >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : staticinvoke <dynoptic.model.export.GraphExporter: void exportCFSM(java.io.Writer,dynoptic.model.fifosys.cfsm.CFSM)>(r4, r1)
dynoptic.model.export.GraphExporter.exportCFSM : staticinvoke <dynoptic.model.export.GraphExporter: void exportCFSM(java.io.Writer,dynoptic.model.fifosys.cfsm.CFSM)>(r4, r1) >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r5 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List getFSMs()>()
dynoptic.model.export.GraphExporter.exportCFSM : $r5 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List getFSMs()>() >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.getFSMs : $r1 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms>
dynoptic.model.fifosys.cfsm.CFSM.getFSMs : $r1 = r0.<dynoptic.model.fifosys.cfsm.CFSM: java.util.List fsms> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSM.getFSMs : return $r1
dynoptic.model.fifosys.cfsm.CFSM.getFSMs : return $r1 >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.export.GraphExporter.exportCFSM : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.export.GraphExporter.exportCFSM : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : if $z0 == 0
dynoptic.model.export.GraphExporter.exportCFSM : if $z0 == 0 >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.export.GraphExporter.exportCFSM : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : r3 = (dynoptic.model.fifosys.cfsm.fsm.FSM) $r6
dynoptic.model.export.GraphExporter.exportCFSM : r3 = (dynoptic.model.fifosys.cfsm.fsm.FSM) $r6 >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r4 = new java.lang.StringBuilder
dynoptic.model.export.GraphExporter.exportCFSM : $r4 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.GraphExporter.exportCFSM : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pid ")
dynoptic.model.export.GraphExporter.exportCFSM : $r7 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("pid ") >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $i0 = virtualinvoke r3.<dynoptic.model.fifosys.cfsm.fsm.FSM: int getPid()>()
dynoptic.model.export.GraphExporter.exportCFSM : $i0 = virtualinvoke r3.<dynoptic.model.fifosys.cfsm.fsm.FSM: int getPid()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
dynoptic.model.export.GraphExporter.exportCFSM : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.GraphExporter.exportCFSM : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : staticinvoke <dynoptic.model.export.GraphExporter: void exportAbsFSM(java.io.Writer,dynoptic.model.AbsFSM,java.lang.String)>(r0, r3, $r9)
dynoptic.model.export.GraphExporter.exportCFSM : staticinvoke <dynoptic.model.export.GraphExporter: void exportAbsFSM(java.io.Writer,dynoptic.model.AbsFSM,java.lang.String)>(r0, r3, $r9) >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r3 = new dynoptic.model.export.DotExportFormatter
dynoptic.model.export.GraphExporter.exportAbsFSM : $r3 = new dynoptic.model.export.DotExportFormatter >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : specialinvoke $r3.<dynoptic.model.export.DotExportFormatter: void <init>()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : specialinvoke $r3.<dynoptic.model.export.DotExportFormatter: void <init>()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : r4 = $r3
dynoptic.model.export.GraphExporter.exportAbsFSM : r4 = $r3 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r16 = virtualinvoke r4.<dynoptic.model.export.GraphExportFormatter: java.lang.String beginGraphString()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $r16 = virtualinvoke r4.<dynoptic.model.export.GraphExportFormatter: java.lang.String beginGraphString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.beginGraphString : return "digraph {\n"
dynoptic.model.export.DotExportFormatter.beginGraphString : return "digraph {\n" >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r16)
dynoptic.model.export.GraphExporter.exportAbsFSM : virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r16) >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : r5 = staticinvoke <dynoptic.util.Util: java.util.Map newMap()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : r5 = staticinvoke <dynoptic.util.Util: java.util.Map newMap()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : i0 = 0
dynoptic.model.export.GraphExporter.exportAbsFSM : i0 = 0 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r17 = virtualinvoke r1.<dynoptic.model.AbsFSM: java.util.Set getStates()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $r17 = virtualinvoke r1.<dynoptic.model.AbsFSM: java.util.Set getStates()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getStates : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set states>
dynoptic.model.fifosys.cfsm.fsm.FSM.getStates : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getStates : return $r1
dynoptic.model.fifosys.cfsm.fsm.FSM.getStates : return $r1 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : r6 = staticinvoke <dynoptic.util.Util: java.util.Set newSet(java.util.Set)>($r17)
dynoptic.model.export.GraphExporter.exportAbsFSM : r6 = staticinvoke <dynoptic.util.Util: java.util.Set newSet(java.util.Set)>($r17) >>>>>>>> dynoptic.util.Util.newSet : $r1 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r1 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r1.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newSet : specialinvoke $r1.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newSet : return $r1
dynoptic.util.Util.newSet : return $r1 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : r7 = interfaceinvoke r6.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : r7 = interfaceinvoke r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : if $z0 == 0
dynoptic.model.export.GraphExporter.exportAbsFSM : if $z0 == 0 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r18 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $r18 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : r8 = (dynoptic.model.AbsFSMState) $r18
dynoptic.model.export.GraphExporter.exportAbsFSM : r8 = (dynoptic.model.AbsFSMState) $r18 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $z1 = virtualinvoke r8.<dynoptic.model.AbsFSMState: boolean isInitial()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $z1 = virtualinvoke r8.<dynoptic.model.AbsFSMState: boolean isInitial()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.isInitial : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial>
dynoptic.model.fifosys.cfsm.fsm.FSMState.isInitial : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.isInitial : return $z0
dynoptic.model.fifosys.cfsm.fsm.FSMState.isInitial : return $z0 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $z2 = virtualinvoke r8.<dynoptic.model.AbsFSMState: boolean isAccept()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $z2 = virtualinvoke r8.<dynoptic.model.AbsFSMState: boolean isAccept()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.isAccept : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept>
dynoptic.model.fifosys.cfsm.fsm.FSMState.isAccept : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.isAccept : return $z0
dynoptic.model.fifosys.cfsm.fsm.FSMState.isAccept : return $z0 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r19 = virtualinvoke r4.<dynoptic.model.export.GraphExportFormatter: java.lang.String nodeToString(int,dynoptic.model.AbsFSMState,boolean,boolean)>(i0, r8, $z1, $z2)
dynoptic.model.export.GraphExporter.exportAbsFSM : $r19 = virtualinvoke r4.<dynoptic.model.export.GraphExportFormatter: java.lang.String nodeToString(int,dynoptic.model.AbsFSMState,boolean,boolean)>(i0, r8, $z1, $z2) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r2 = new java.lang.StringBuilder
dynoptic.model.export.DotExportFormatter.nodeToString : $r2 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label=\"")
dynoptic.model.export.DotExportFormatter.nodeToString : $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label=\"") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toString : $r1 = virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.lang.String toShortIntString()>()
dynoptic.model.fifosys.cfsm.fsm.FSMState.toString : $r1 = virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.lang.String toShortIntString()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId>
dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0)
dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : return $r1
dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toString : return $r1
dynoptic.model.fifosys.cfsm.fsm.FSMState.toString : return $r1 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r8 = staticinvoke <dynoptic.model.export.DotExportFormatter: java.lang.String quote(java.lang.String)>($r7)
dynoptic.model.export.DotExportFormatter.nodeToString : $r8 = staticinvoke <dynoptic.model.export.DotExportFormatter: java.lang.String quote(java.lang.String)>($r7) >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : $r1 = new java.lang.StringBuilder
dynoptic.model.export.GraphExportFormatter.quote : $r1 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : $i2 = virtualinvoke r0.<java.lang.String: int length()>()
dynoptic.model.export.GraphExportFormatter.quote : $i2 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : $i3 = $i2 + 2
dynoptic.model.export.GraphExportFormatter.quote : $i3 = $i2 + 2 >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i3)
dynoptic.model.export.GraphExportFormatter.quote : specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i3) >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : r2 = $r1
dynoptic.model.export.GraphExportFormatter.quote : r2 = $r1 >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : i0 = 0
dynoptic.model.export.GraphExportFormatter.quote : i0 = 0 >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : $i4 = virtualinvoke r0.<java.lang.String: int length()>()
dynoptic.model.export.GraphExportFormatter.quote : $i4 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : if i0 >= $i4
dynoptic.model.export.GraphExportFormatter.quote : if i0 >= $i4 >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)
dynoptic.model.export.GraphExportFormatter.quote : c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0) >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : lookupswitch(c1) {     case 34:
dynoptic.model.export.GraphExportFormatter.quote : lookupswitch(c1) {     case 34: >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1)
dynoptic.model.export.GraphExportFormatter.quote : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1) >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : i0 = i0 + 1
dynoptic.model.export.GraphExportFormatter.quote : i0 = i0 + 1 >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : goto [?= $i4 = virtualinvoke r0.<java.lang.String: int length()>()]
dynoptic.model.export.GraphExportFormatter.quote : goto [?= $i4 = virtualinvoke r0.<java.lang.String: int length()>()] >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.GraphExportFormatter.quote : $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : return $r6
dynoptic.model.export.GraphExportFormatter.quote : return $r6 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
dynoptic.model.export.DotExportFormatter.nodeToString : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\",shape=circle")
dynoptic.model.export.DotExportFormatter.nodeToString : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\",shape=circle") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : r4 = ""
dynoptic.model.export.DotExportFormatter.nodeToString : r4 = "" >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : if z0 == 0
dynoptic.model.export.DotExportFormatter.nodeToString : if z0 == 0 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r11 = new java.lang.StringBuilder
dynoptic.model.export.DotExportFormatter.nodeToString : $r11 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r11.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start_")
dynoptic.model.export.DotExportFormatter.nodeToString : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start_") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $i1 = r0.<dynoptic.model.export.DotExportFormatter: int startStateCount>
dynoptic.model.export.DotExportFormatter.nodeToString : $i1 = r0.<dynoptic.model.export.DotExportFormatter: int startStateCount> >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
dynoptic.model.export.DotExportFormatter.nodeToString : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : r5 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : r5 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r14 = new java.lang.StringBuilder
dynoptic.model.export.DotExportFormatter.nodeToString : $r14 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ")
dynoptic.model.export.DotExportFormatter.nodeToString : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
dynoptic.model.export.DotExportFormatter.nodeToString : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [label=\"start\",shape=plaintext];\n")
dynoptic.model.export.DotExportFormatter.nodeToString : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [label=\"start\",shape=plaintext];\n") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r19 = new java.lang.StringBuilder
dynoptic.model.export.DotExportFormatter.nodeToString : $r19 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18)
dynoptic.model.export.DotExportFormatter.nodeToString : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ")
dynoptic.model.export.DotExportFormatter.nodeToString : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
dynoptic.model.export.DotExportFormatter.nodeToString : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->")
dynoptic.model.export.DotExportFormatter.nodeToString : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
dynoptic.model.export.DotExportFormatter.nodeToString : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";\n")
dynoptic.model.export.DotExportFormatter.nodeToString : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";\n") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : r4 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : r4 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $i2 = r0.<dynoptic.model.export.DotExportFormatter: int startStateCount>
dynoptic.model.export.DotExportFormatter.nodeToString : $i2 = r0.<dynoptic.model.export.DotExportFormatter: int startStateCount> >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $i3 = $i2 + 1
dynoptic.model.export.DotExportFormatter.nodeToString : $i3 = $i2 + 1 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : r0.<dynoptic.model.export.DotExportFormatter: int startStateCount> = $i3
dynoptic.model.export.DotExportFormatter.nodeToString : r0.<dynoptic.model.export.DotExportFormatter: int startStateCount> = $i3 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : if z1 == 0
dynoptic.model.export.DotExportFormatter.nodeToString : if z1 == 0 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r27 = new java.lang.StringBuilder
dynoptic.model.export.DotExportFormatter.nodeToString : $r27 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r27.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r27.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
dynoptic.model.export.DotExportFormatter.nodeToString : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",shape=doublecircle")
dynoptic.model.export.DotExportFormatter.nodeToString : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",shape=doublecircle") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : r3 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : r3 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r30 = new java.lang.StringBuilder
dynoptic.model.export.DotExportFormatter.nodeToString : $r30 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ")
dynoptic.model.export.DotExportFormatter.nodeToString : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
dynoptic.model.export.DotExportFormatter.nodeToString : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [")
dynoptic.model.export.DotExportFormatter.nodeToString : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
dynoptic.model.export.DotExportFormatter.nodeToString : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("];\n")
dynoptic.model.export.DotExportFormatter.nodeToString : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("];\n") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
dynoptic.model.export.DotExportFormatter.nodeToString : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : return $r37
dynoptic.model.export.DotExportFormatter.nodeToString : return $r37 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r19)
dynoptic.model.export.GraphExporter.exportAbsFSM : virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r19) >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0)
dynoptic.model.export.GraphExporter.exportAbsFSM : $r20 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>(i0) >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r20)
dynoptic.model.export.GraphExporter.exportAbsFSM : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r20) >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : i0 = i0 + 1
dynoptic.model.export.GraphExporter.exportAbsFSM : i0 = i0 + 1 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.export.GraphExporter.exportAbsFSM : goto [?= $z0 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r22 = new java.lang.StringBuilder
dynoptic.model.export.GraphExporter.exportAbsFSM : $r22 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : specialinvoke $r22.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("title_node [label=\"")
dynoptic.model.export.GraphExporter.exportAbsFSM : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("title_node [label=\"") >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
dynoptic.model.export.GraphExporter.exportAbsFSM : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\",shape=box, style=rounded];")
dynoptic.model.export.GraphExporter.exportAbsFSM : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\",shape=box, style=rounded];") >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r26)
dynoptic.model.export.GraphExporter.exportAbsFSM : virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r26) >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : r27 = interfaceinvoke r6.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : r27 = interfaceinvoke r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : if $z3 == 0
dynoptic.model.export.GraphExporter.exportAbsFSM : if $z3 == 0 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r28 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $r28 = interfaceinvoke r27.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : r29 = (dynoptic.model.AbsFSMState) $r28
dynoptic.model.export.GraphExporter.exportAbsFSM : r29 = (dynoptic.model.AbsFSMState) $r28 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r30 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r29)
dynoptic.model.export.GraphExporter.exportAbsFSM : $r30 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r29) >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r31 = (java.lang.Integer) $r30
dynoptic.model.export.GraphExporter.exportAbsFSM : $r31 = (java.lang.Integer) $r30 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : i1 = virtualinvoke $r31.<java.lang.Integer: int intValue()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : i1 = virtualinvoke $r31.<java.lang.Integer: int intValue()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : r9 = virtualinvoke r29.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : r9 = virtualinvoke r29.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : r10 = interfaceinvoke r9.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : r10 = interfaceinvoke r9.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $z4 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $z4 = interfaceinvoke r10.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : if $z4 == 0
dynoptic.model.export.GraphExporter.exportAbsFSM : if $z4 == 0 >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : goto [?= $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.export.GraphExporter.exportAbsFSM : goto [?= $z3 = interfaceinvoke r27.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : $r37 = virtualinvoke r4.<dynoptic.model.export.GraphExportFormatter: java.lang.String endGraphString()>()
dynoptic.model.export.GraphExporter.exportAbsFSM : $r37 = virtualinvoke r4.<dynoptic.model.export.GraphExportFormatter: java.lang.String endGraphString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.endGraphString : return "} // digraph {\n"
dynoptic.model.export.DotExportFormatter.endGraphString : return "} // digraph {\n" >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r37)
dynoptic.model.export.GraphExporter.exportAbsFSM : virtualinvoke r0.<java.io.Writer: void write(java.lang.String)>($r37) >>>>>>>> dynoptic.model.export.GraphExporter.exportAbsFSM : goto [?= return]
dynoptic.model.export.GraphExporter.exportAbsFSM : goto [?= return] >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.export.GraphExporter.exportCFSM : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.export.GraphExporter.exportCFSM : virtualinvoke r4.<java.io.PrintWriter: void close()>()
dynoptic.model.export.GraphExporter.exportCFSM : virtualinvoke r4.<java.io.PrintWriter: void close()>() >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : $r2 = new java.io.File
dynoptic.model.export.GraphExporterTests.generateOutput : $r2 = new java.io.File >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("./test.dot")
dynoptic.model.export.GraphExporterTests.generateOutput : specialinvoke $r2.<java.io.File: void <init>(java.lang.String)>("./test.dot") >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>()
dynoptic.model.export.GraphExporterTests.generateOutput : $z0 = virtualinvoke $r2.<java.io.File: boolean exists()>() >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0)
dynoptic.model.export.GraphExporterTests.generateOutput : staticinvoke <org.junit.Assert: void assertTrue(boolean)>($z0) >>>>>>>> dynoptic.model.export.GraphExporterTests.generateOutput : staticinvoke <dynoptic.model.export.GraphExporter: void generatePngFileFromDotFile(java.lang.String)>("./test.dot")
dynoptic.model.export.GraphExporterTests.generateOutput : staticinvoke <dynoptic.model.export.GraphExporter: void generatePngFileFromDotFile(java.lang.String)>("./test.dot") >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r1 = new java.io.File
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r1 = new java.io.File >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r0)
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r0) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r2 = $r1
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r2 = $r1 >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r3 = staticinvoke <dynoptic.model.export.GraphExporter: java.lang.String getDotCommand()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r3 = staticinvoke <dynoptic.model.export.GraphExporter: java.lang.String getDotCommand()>() >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : r0 = <dynoptic.model.export.GraphExporter: java.lang.String[] dotCommands>
dynoptic.model.export.GraphExporter.getDotCommand : r0 = <dynoptic.model.export.GraphExporter: java.lang.String[] dotCommands> >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : i0 = lengthof r0
dynoptic.model.export.GraphExporter.getDotCommand : i0 = lengthof r0 >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : i1 = 0
dynoptic.model.export.GraphExporter.getDotCommand : i1 = 0 >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : if i1 >= i0
dynoptic.model.export.GraphExporter.getDotCommand : if i1 >= i0 >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : r1 = r0[i1]
dynoptic.model.export.GraphExporter.getDotCommand : r1 = r0[i1] >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : $r3 = new java.io.File
dynoptic.model.export.GraphExporter.getDotCommand : $r3 = new java.io.File >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1)
dynoptic.model.export.GraphExporter.getDotCommand : specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : r2 = $r3
dynoptic.model.export.GraphExporter.getDotCommand : r2 = $r3 >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>()
dynoptic.model.export.GraphExporter.getDotCommand : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>() >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : if $z0 == 0
dynoptic.model.export.GraphExporter.getDotCommand : if $z0 == 0 >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : i1 = i1 + 1
dynoptic.model.export.GraphExporter.getDotCommand : i1 = i1 + 1 >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : goto [?= (branch)]
dynoptic.model.export.GraphExporter.getDotCommand : goto [?= (branch)] >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : r4 = staticinvoke <synoptic.main.SynopticMain: synoptic.main.SynopticMain getInstanceWithExistenceCheck()>()
dynoptic.model.export.GraphExporter.getDotCommand : r4 = staticinvoke <synoptic.main.SynopticMain: synoptic.main.SynopticMain getInstanceWithExistenceCheck()>() >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : $r5 = r4.<synoptic.main.SynopticMain: synoptic.main.options.SynopticOptions options>
