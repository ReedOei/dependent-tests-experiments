dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.setUpLogging : if $r1 == null
dynoptic.main.DynopticMain.setUpLogging : if $r1 == null >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r1.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r1.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache>
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0)
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0) >>>>>>>> dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap
dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState : $r0 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState : $r0 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState : $r1 = staticinvoke <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.lang.String getNextAnonName()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState : $r1 = staticinvoke <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.lang.String getNextAnonName()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.getNextAnonName : $i0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.getNextAnonName : $i0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.getNextAnonName : $i1 = $i0 + 1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.getNextAnonName : $i1 = $i0 + 1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.getNextAnonName : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = $i1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.getNextAnonName : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = $i1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.getNextAnonName : $i2 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.getNextAnonName : $i2 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.getNextAnonName : $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2)
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.getNextAnonName : $r0 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($i2) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.getNextAnonName : return $r0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.getNextAnonName : return $r0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState : specialinvoke $r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: void <init>(int,boolean,boolean,java.lang.String,boolean)>(i0, z0, z1, $r1, 1)
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState : specialinvoke $r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: void <init>(int,boolean,boolean,java.lang.String,boolean)>(i0, z0, z1, $r1, 1) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState : return $r0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.anonObsFSMState : return $r0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache>
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0)
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : if $z0 == 0
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r6 = new dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r6 = new dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : specialinvoke $r6.<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: void <init>(java.util.List)>(r0)
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : specialinvoke $r6.<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: void <init>(java.util.List)>(r0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : r2 = $r6
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : r2 = $r6 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r7 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache>
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : $r7 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2)
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : b0 = 17
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : b0 = 17 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i1 = 31 * b0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i1 = 31 * b0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $z0 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isInitial>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $z0 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isInitial> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : if $z0 == 0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $s2 = 1231
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $s2 = 1231 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : goto [?= i3 = $i1 + $s2]
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : goto [?= i3 = $i1 + $s2] >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : i3 = $i1 + $s2
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : i3 = $i1 + $s2 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i4 = 31 * i3
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i4 = 31 * i3 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $z1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isTerminal>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $z1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isTerminal> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : if $z1 == 0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $s5 = 1231
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $s5 = 1231 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : goto [?= i6 = $i4 + $s5]
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : goto [?= i6 = $i4 + $s5] >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : i6 = $i4 + $s5
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : i6 = $i4 + $s5 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i7 = 31 * i6
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i7 = 31 * i6 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i8 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int pid>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i8 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int pid> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : i9 = $i7 + $i8
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : i9 = $i7 + $i8 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i10 = 31 * i9
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i10 = 31 * i9 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.lang.String name>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.lang.String name> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i11 = virtualinvoke $r1.<java.lang.String: int hashCode()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : $i11 = virtualinvoke $r1.<java.lang.String: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : i12 = $i10 + $i11
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : i12 = $i10 + $i11 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : return i12
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.hashCode : return i12 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : return r2
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.getMultiFSMState : return r2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds : r1 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.List chStatesFromChIds(java.util.List)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds : r1 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.List chStatesFromChIds(java.util.List)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z0 = <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z0 = <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $i0 = interfaceinvoke r0.<java.util.List: int size()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $i0 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z1 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r3 = (synoptic.model.channelid.ChannelId) $r5
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r3 = (synoptic.model.channelid.ChannelId) $r5 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r6 = new dynoptic.model.fifosys.channel.channelstate.ChState
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r6 = new dynoptic.model.fifosys.channel.channelstate.ChState >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : specialinvoke $r6.<dynoptic.model.fifosys.channel.channelstate.ChState: void <init>(synoptic.model.channelid.ChannelId)>(r3)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : specialinvoke $r6.<dynoptic.model.fifosys.channel.channelstate.ChState: void <init>(synoptic.model.channelid.ChannelId)>(r3) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : return r1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : return r1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds : $r2 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState fromChannelStates(java.util.List)>(r1)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds : $r2 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState fromChannelStates(java.util.List)>(r1) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r1 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache>
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r1 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r5 = new dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r5 = new dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : specialinvoke $r5.<dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: void <init>(java.util.List)>(r0)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : specialinvoke $r5.<dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: void <init>(java.util.List)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : r2 = $r5
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : r2 = $r5 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r6 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache>
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : $r6 = <dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: java.util.Map chCache> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2)
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r2) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : b0 = 17
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : b0 = 17 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i1 = 31 * b0
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i1 = 31 * b0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId>
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i2 = virtualinvoke $r1.<synoptic.model.channelid.ChannelId: int hashCode()>()
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i2 = virtualinvoke $r1.<synoptic.model.channelid.ChannelId: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : i3 = $i1 + $i2
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : i3 = $i1 + $i2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i4 = 31 * i3
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i4 = 31 * i3 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $r2 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $r2 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i5 = interfaceinvoke $r2.<java.util.List: int hashCode()>()
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i5 = interfaceinvoke $r2.<java.util.List: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : i6 = $i4 + $i5
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : i6 = $i4 + $i5 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : return i6
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : return i6 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : return r2
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelStates : return r2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds : return $r2
dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState.fromChannelIds : return $r2 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $z0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $z0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : if $z0 != 0
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $z1 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $z1 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : if $z1 != 0
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $r5 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $r5 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $z2 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r0)
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $z2 = interfaceinvoke $r5.<java.util.Map: boolean containsKey(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : if $z2 == 0
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : if $z2 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $r11 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $r11 = new dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $i0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: int nextFifoSysStateId>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $i0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: int nextFifoSysStateId> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : specialinvoke $r11.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: void <init>(dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState,dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState,int)>(r0, r1, $i0)
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : specialinvoke $r11.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: void <init>(dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState,dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState,int)>(r0, r1, $i0) >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getNumProcesses : $i0 = r0.<dynoptic.model.fifosys.AbsMultiFSMState: int numProcesses>
dynoptic.model.fifosys.AbsMultiFSMState.getNumProcesses : $i0 = r0.<dynoptic.model.fifosys.AbsMultiFSMState: int numProcesses> >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getNumProcesses : return $i0
dynoptic.model.fifosys.AbsMultiFSMState.getNumProcesses : return $i0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : r12 = $r11
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : r12 = $r11 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $i1 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: int nextFifoSysStateId>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $i1 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: int nextFifoSysStateId> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $i2 = $i1 + 1
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $i2 = $i1 + 1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: int nextFifoSysStateId> = $i2
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: int nextFifoSysStateId> = $i2 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $r13 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : $r13 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r12)
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : interfaceinvoke $r13.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r0, r12) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.hashCode : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.List fsmStates>
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.hashCode : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.List fsmStates> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.hashCode : $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>()
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.hashCode : $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.hashCode : return $i0
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.hashCode : return $i0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : return r12
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getFifoSysState : return r12 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.addObs : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSMState.addObs : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.addObs : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSMState.addObs : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.addObs : $z2 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSMState.addObs : $z2 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.addObs : if $z2 != 0
dynoptic.model.fifosys.gfsm.GFSMState.addObs : if $z2 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.addObs : $z3 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSMState.addObs : $z3 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.addObs : if $z3 != 0
dynoptic.model.fifosys.gfsm.GFSMState.addObs : if $z3 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.addObs : virtualinvoke r1.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: void setParent(dynoptic.model.fifosys.gfsm.GFSMState)>(r0)
dynoptic.model.fifosys.gfsm.GFSMState.addObs : virtualinvoke r1.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: void setParent(dynoptic.model.fifosys.gfsm.GFSMState)>(r0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.setParent : r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.gfsm.GFSMState parent> = r1
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.setParent : r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.gfsm.GFSMState parent> = r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.addObs : $r7 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.addObs : $r7 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.addObs : interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r1)
dynoptic.model.fifosys.gfsm.GFSMState.addObs : interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.hashCode : $i0 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: int stateId>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.hashCode : $i0 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: int stateId> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.hashCode : return $i0
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.hashCode : return $i0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.addObs : specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMState: void cacheObservedParentTransitions(dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState)>(r1)
dynoptic.model.fifosys.gfsm.GFSMState.addObs : specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMState: void cacheObservedParentTransitions(dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState)>(r1) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.cacheObservedParentTransitions : $r6 = virtualinvoke r1.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Set getTransitioningEvents()>()
dynoptic.model.fifosys.gfsm.GFSMState.cacheObservedParentTransitions : $r6 = virtualinvoke r1.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Set getTransitioningEvents()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map absTransitions>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map absTransitions> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>()
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getTransitioningEvents : return $r2
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.getTransitioningEvents : return $r2 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.cacheObservedParentTransitions : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSMState.cacheObservedParentTransitions : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.cacheObservedParentTransitions : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSMState.cacheObservedParentTransitions : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.cacheObservedParentTransitions : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSMState.cacheObservedParentTransitions : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toString : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.toString : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toString : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>()
dynoptic.model.fifosys.gfsm.GFSMState.toString : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.toString : $r1 = virtualinvoke r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.lang.String toShortIntStr()>()
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.toString : $r1 = virtualinvoke r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.lang.String toShortIntStr()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.toShortIntStr : $i0 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: int stateId>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.toShortIntStr : $i0 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: int stateId> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.toShortIntStr : $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0)
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.toShortIntStr : $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.toShortIntStr : return $r1
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.toShortIntStr : return $r1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.toString : return $r1
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.toString : return $r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toString : return $r2
dynoptic.model.fifosys.gfsm.GFSMState.toString : return $r2 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : i0 = 0
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : i0 = 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: int numProcesses>
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: int numProcesses> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : if i0 >= $i1
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : if i0 >= $i1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r2 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsAcceptForPid>
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r2 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsAcceptForPid> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $z0 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: boolean atLeastOneStatePidEvalTrue(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r1, $r2, i0)
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $z0 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: boolean atLeastOneStatePidEvalTrue(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r1, $r2, i0) >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>()
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : if $z0 == 0
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : r3 = (dynoptic.model.fifosys.AbsMultiFSMState) $r4
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : r3 = (dynoptic.model.fifosys.AbsMultiFSMState) $r4 >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : $z1 = interfaceinvoke r1.<dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn: boolean eval(java.lang.Object,int)>(r3, i0)
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : $z1 = interfaceinvoke r1.<dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn: boolean eval(java.lang.Object,int)>(r3, i0) >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState$1.eval : $r2 = (dynoptic.model.fifosys.AbsMultiFSMState) r1
dynoptic.model.fifosys.AbsMultiFSMState$1.eval : $r2 = (dynoptic.model.fifosys.AbsMultiFSMState) r1 >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState$1.eval : $z0 = virtualinvoke r0.<dynoptic.model.fifosys.AbsMultiFSMState$1: boolean eval(dynoptic.model.fifosys.AbsMultiFSMState,int)>($r2, i0)
dynoptic.model.fifosys.AbsMultiFSMState$1.eval : $z0 = virtualinvoke r0.<dynoptic.model.fifosys.AbsMultiFSMState$1: boolean eval(dynoptic.model.fifosys.AbsMultiFSMState,int)>($r2, i0) >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState$1.eval : $z0 = virtualinvoke r1.<dynoptic.model.fifosys.AbsMultiFSMState: boolean isAcceptForPid(int)>(i0)
dynoptic.model.fifosys.AbsMultiFSMState$1.eval : $z0 = virtualinvoke r1.<dynoptic.model.fifosys.AbsMultiFSMState: boolean isAcceptForPid(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : $z0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : $z0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : if $z0 != 0
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : $r3 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState fsmStates>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : $r3 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState fsmStates> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : $z1 = virtualinvoke $r3.<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: boolean isAcceptForPid(int)>(i0)
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : $z1 = virtualinvoke $r3.<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: boolean isAcceptForPid(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isAcceptForPid : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.List fsmStates>
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isAcceptForPid : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.List fsmStates> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isAcceptForPid : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0)
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isAcceptForPid : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isAcceptForPid : $r3 = (dynoptic.model.fifosys.gfsm.observed.ObsFSMState) $r2
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isAcceptForPid : $r3 = (dynoptic.model.fifosys.gfsm.observed.ObsFSMState) $r2 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isAcceptForPid : $z0 = virtualinvoke $r3.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isTerminal()>()
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isAcceptForPid : $z0 = virtualinvoke $r3.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isTerminal()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.isTerminal : $z0 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isTerminal>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.isTerminal : $z0 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isTerminal> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.isTerminal : return $z0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.isTerminal : return $z0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isAcceptForPid : return $z0
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isAcceptForPid : return $z0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : if $z1 == 0
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : $r4 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState channelStates>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : $r4 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState channelStates> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : $z2 = virtualinvoke $r4.<dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: boolean isEmptyForPid(int)>(i0)
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : $z2 = virtualinvoke $r4.<dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: boolean isEmptyForPid(int)>(i0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $r3 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $r3 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : r2 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r4
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : r2 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r4 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $r5 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId getChannelId()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $r5 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId getChannelId()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.getChannelId : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId>
dynoptic.model.fifosys.channel.channelstate.ChState.getChannelId : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.getChannelId : return $r1
dynoptic.model.fifosys.channel.channelstate.ChState.getChannelId : return $r1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $i1 = virtualinvoke $r5.<synoptic.model.channelid.ChannelId: int getDstPid()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $i1 = virtualinvoke $r5.<synoptic.model.channelid.ChannelId: int getDstPid()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : if $i1 != i0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : if $i1 != i0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $z1 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: boolean isEmpty()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : $z1 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: boolean isEmpty()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>()
dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : return $z0
dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : return $z0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : if $z1 != 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : return 1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.isEmptyForPid : return 1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : if $z2 == 0
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : if $z2 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : $z3 = 1
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : $z3 = 1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : goto [?= return $z3]
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : goto [?= return $z3] >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : return $z3
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isAcceptForPid : return $z3 >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState$1.eval : return $z0
dynoptic.model.fifosys.AbsMultiFSMState$1.eval : return $z0 >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : if $z1 == 0
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : return 1
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : return 1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : i0 = i0 + 1
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : i0 = i0 + 1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : goto [?= $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: int numProcesses>]
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : goto [?= $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: int numProcesses>] >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : return 1
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : return 1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : i0 = 0
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : i0 = 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: int numProcesses>
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: int numProcesses> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : if i0 >= $i1
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : if i0 >= $i1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $r2 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsInitialForPid>
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $r2 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsInitialForPid> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $z0 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: boolean atLeastOneStatePidEvalTrue(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r1, $r2, i0)
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $z0 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: boolean atLeastOneStatePidEvalTrue(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r1, $r2, i0) >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState$2.eval : $r2 = (dynoptic.model.fifosys.AbsMultiFSMState) r1
dynoptic.model.fifosys.AbsMultiFSMState$2.eval : $r2 = (dynoptic.model.fifosys.AbsMultiFSMState) r1 >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState$2.eval : $z0 = virtualinvoke r0.<dynoptic.model.fifosys.AbsMultiFSMState$2: boolean eval(dynoptic.model.fifosys.AbsMultiFSMState,int)>($r2, i0)
dynoptic.model.fifosys.AbsMultiFSMState$2.eval : $z0 = virtualinvoke r0.<dynoptic.model.fifosys.AbsMultiFSMState$2: boolean eval(dynoptic.model.fifosys.AbsMultiFSMState,int)>($r2, i0) >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState$2.eval : $z0 = virtualinvoke r1.<dynoptic.model.fifosys.AbsMultiFSMState: boolean isInitForPid(int)>(i0)
dynoptic.model.fifosys.AbsMultiFSMState$2.eval : $z0 = virtualinvoke r1.<dynoptic.model.fifosys.AbsMultiFSMState: boolean isInitForPid(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState fsmStates>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState fsmStates> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : $z0 = virtualinvoke $r1.<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: boolean isInitForPid(int)>(i0)
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : $z0 = virtualinvoke $r1.<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: boolean isInitForPid(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isInitForPid : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.List fsmStates>
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isInitForPid : $r1 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.List fsmStates> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isInitForPid : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0)
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isInitForPid : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isInitForPid : $r3 = (dynoptic.model.fifosys.gfsm.observed.ObsFSMState) $r2
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isInitForPid : $r3 = (dynoptic.model.fifosys.gfsm.observed.ObsFSMState) $r2 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isInitForPid : $z0 = virtualinvoke $r3.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isInitial()>()
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isInitForPid : $z0 = virtualinvoke $r3.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isInitial()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.isInitial : $z0 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isInitial>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.isInitial : $z0 = r0.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: boolean isInitial> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.isInitial : return $z0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.isInitial : return $z0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isInitForPid : return $z0
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.isInitForPid : return $z0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : if $z0 == 0
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : $r2 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState channelStates>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : $r2 = r0.<dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState channelStates> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : $z1 = virtualinvoke $r2.<dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: boolean isEmptyForPid(int)>(i0)
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : $z1 = virtualinvoke $r2.<dynoptic.model.fifosys.channel.channelstate.ImmutableMultiChState: boolean isEmptyForPid(int)>(i0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : if $z1 == 0
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : $z2 = 1
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : $z2 = 1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : goto [?= return $z2]
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : goto [?= return $z2] >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : return $z2
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.isInitForPid : return $z2 >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState$2.eval : return $z0
dynoptic.model.fifosys.AbsMultiFSMState$2.eval : return $z0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : i0 = i0 + 1
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : i0 = i0 + 1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : goto [?= $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: int numProcesses>]
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : goto [?= $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: int numProcesses>] >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : return 1
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : return 1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAcceptForPid : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSMState.isAcceptForPid : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAcceptForPid : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSMState.isAcceptForPid : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAcceptForPid : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.isAcceptForPid : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAcceptForPid : $r3 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsAcceptForPid>
dynoptic.model.fifosys.gfsm.GFSMState.isAcceptForPid : $r3 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsAcceptForPid> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAcceptForPid : $z1 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: boolean atLeastOneStatePidEvalTrue(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r2, $r3, i0)
dynoptic.model.fifosys.gfsm.GFSMState.isAcceptForPid : $z1 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: boolean atLeastOneStatePidEvalTrue(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r2, $r3, i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAcceptForPid : return $z1
dynoptic.model.fifosys.gfsm.GFSMState.isAcceptForPid : return $z1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitForPid : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSMState.isInitForPid : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitForPid : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSMState.isInitForPid : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitForPid : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.isInitForPid : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitForPid : $r3 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsInitialForPid>
dynoptic.model.fifosys.gfsm.GFSMState.isInitForPid : $r3 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsInitialForPid> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitForPid : $z1 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: boolean atLeastOneStatePidEvalTrue(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r2, $r3, i0)
dynoptic.model.fifosys.gfsm.GFSMState.isInitForPid : $z1 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: boolean atLeastOneStatePidEvalTrue(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r2, $r3, i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitForPid : return $z1
dynoptic.model.fifosys.gfsm.GFSMState.isInitForPid : return $z1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions>
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMState: void recreateCachedTransitions()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMState: void recreateCachedTransitions()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions>
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : interfaceinvoke $r3.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : interfaceinvoke $r3.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r5 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : r2 = (dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState) $r5
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : r2 = (dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState) $r5 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMState: void cacheObservedParentTransitions(dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState)>(r2)
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : specialinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMState: void cacheObservedParentTransitions(dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState)>(r2) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions>
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : return $r3
