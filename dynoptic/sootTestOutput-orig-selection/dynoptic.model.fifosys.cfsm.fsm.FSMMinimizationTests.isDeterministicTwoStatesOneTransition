dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransition : $z0 = <dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransition : $z0 = <dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransition : if $z0 != 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransition : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransition : $z1 = <dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransition : $z1 = <dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransition : if $z1 != 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransition : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransition : $z2 = <dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransition : $z2 = <dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransition : if $z2 != 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransition : if $z2 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransition : specialinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void addTransitionNoChecks(synoptic.model.event.DistEventType,dynoptic.model.fifosys.cfsm.fsm.FSMState)>(r1, r2)
dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransition : specialinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void addTransitionNoChecks(synoptic.model.event.DistEventType,dynoptic.model.fifosys.cfsm.fsm.FSMState)>(r1, r2) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransitionNoChecks : $r4 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions>
dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransitionNoChecks : $r4 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransitionNoChecks : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransitionNoChecks : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransitionNoChecks : if $r5 != null
dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransitionNoChecks : if $r5 != null >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransitionNoChecks : r3 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransitionNoChecks : r3 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransitionNoChecks : $r6 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions>
dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransitionNoChecks : $r6 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransitionNoChecks : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransitionNoChecks : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransitionNoChecks : goto [?= interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r2)]
dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransitionNoChecks : goto [?= interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r2)] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransitionNoChecks : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r2)
dynoptic.model.fifosys.cfsm.fsm.FSMState.addTransitionNoChecks : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r2) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : b0 = 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : b0 = 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i1 = b0 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i1 = b0 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z0 == 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b2 = 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b2 = 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i3 = $i1 + $b2]
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i3 = $i1 + $b2] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i3 = $i1 + $b2
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i3 = $i1 + $b2 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i4 = i3 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i4 = i3 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z1 == 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b5 = 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b5 = 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i6 = $i4 + $b5
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i6 = $i4 + $b5 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i7 = i6 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i7 = i6 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i8 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int pid>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i8 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int pid> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i9 = $i7 + $i8
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i9 = $i7 + $i8 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i10 = i9 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i10 = i9 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i11 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i11 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i12 = $i10 + $i11
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i12 = $i10 + $i11 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : return 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : return 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : $r2 = new java.util.LinkedHashSet
dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : $r2 = new java.util.LinkedHashSet >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>()
dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : specialinvoke $r2.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : r3 = $r2
dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : r3 = $r2 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : r4 = r1
dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : r4 = r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : i0 = lengthof r4
dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : i0 = lengthof r4 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : i1 = 0
dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : i1 = 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : if i1 >= i0
dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : if i1 >= i0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : r5 = r4[i1]
dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : r5 = r4[i1] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r5)
dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : interfaceinvoke r3.<java.util.Set: boolean add(java.lang.Object)>(r5) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b2 = 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b2 = 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b5 = 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b5 = 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i6 = $i4 + $b5]
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i6 = $i4 + $b5] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : i1 = i1 + 1
dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : i1 = i1 + 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : goto [?= (branch)]
dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : goto [?= (branch)] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : if r1 != r0
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : if r1 != r0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.cfsm.fsm.FSMState
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.cfsm.fsm.FSMState >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : if $z0 != 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : r2 = (dynoptic.model.fifosys.cfsm.fsm.FSMState) r1
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : r2 = (dynoptic.model.fifosys.cfsm.fsm.FSMState) r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : $z1 = r2.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept>
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : $z1 = r2.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : $z2 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept>
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : $z2 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : if $z1 == $z2
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : if $z1 == $z2 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : return 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : return 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : return r3
dynoptic.model.fifosys.cfsm.fsm.FSMMinimizationTests.toSet : return r3 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>()
dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>()
dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states>
dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0
dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.AbsFSM.recomputeAlphabet : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r2 = (dynoptic.model.AbsFSMState) $r6
dynoptic.model.AbsFSM.recomputeAlphabet : r2 = (dynoptic.model.AbsFSMState) $r6 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r3 = virtualinvoke r2.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>()
dynoptic.model.AbsFSM.recomputeAlphabet : r3 = virtualinvoke r2.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions>
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>()
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : return $r2
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : return $r2 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r7 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.recomputeAlphabet : $r7 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r7.<dynoptic.model.alphabet.FSMAlphabet: boolean addAll(java.util.Collection)>(r3)
dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r7.<dynoptic.model.alphabet.FSMAlphabet: boolean addAll(java.util.Collection)>(r3) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.addAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1)
dynoptic.model.alphabet.FSMAlphabet.addAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : return $z0
dynoptic.model.alphabet.FSMAlphabet.addAll : return $z0 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.AbsFSM.recomputeAlphabet : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $r6 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set initStates>
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $r6 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set initStates> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $i0 = interfaceinvoke $r6.<java.util.Set: int size()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $i0 = interfaceinvoke $r6.<java.util.Set: int size()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : if $i0 <= 1
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : if $i0 <= 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $r7 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set states>
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $r7 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : r1 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : r1 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : if $z0 == 0
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $r8 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : r2 = (dynoptic.model.fifosys.cfsm.fsm.FSMState) $r8
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : r2 = (dynoptic.model.fifosys.cfsm.fsm.FSMState) $r8 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : r3 = virtualinvoke r2.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Set getTransitioningEvents()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : r3 = virtualinvoke r2.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Set getTransitioningEvents()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : r4 = interfaceinvoke r3.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : if $z1 == 0
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $r9 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : r5 = (synoptic.model.event.DistEventType) $r9
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : r5 = (synoptic.model.event.DistEventType) $r9 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $r10 = virtualinvoke r2.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Set getNextStates(synoptic.model.event.DistEventType)>(r5)
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $r10 = virtualinvoke r2.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Set getNextStates(synoptic.model.event.DistEventType)>(r5) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : $z0 = <dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : $z0 = <dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : if $z0 != 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : $z1 = <dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : $z1 = <dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : if $z1 != 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : $r5 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions>
dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : $r5 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : $r6 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : $r7 = (java.util.Set) $r6
dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : $r7 = (java.util.Set) $r6 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : $r8 = staticinvoke <dynoptic.util.Util: java.util.Set newSet(java.util.Set)>($r7)
dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : $r8 = staticinvoke <dynoptic.util.Util: java.util.Set newSet(java.util.Set)>($r7) >>>>>>>> dynoptic.util.Util.newSet : $r1 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r1 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r1.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newSet : specialinvoke $r1.<java.util.LinkedHashSet: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newSet : return $r1
dynoptic.util.Util.newSet : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : return $r8
dynoptic.model.fifosys.cfsm.fsm.FSMState.getNextStates : return $r8 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $i1 = interfaceinvoke $r10.<java.util.Set: int size()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : $i1 = interfaceinvoke $r10.<java.util.Set: int size()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : if $i1 <= 1
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : if $i1 <= 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.isDeterministic : return 1
