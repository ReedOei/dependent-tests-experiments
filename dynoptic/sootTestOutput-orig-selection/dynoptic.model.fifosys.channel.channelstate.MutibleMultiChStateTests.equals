dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.setUpLogging : if $r1 == null
dynoptic.main.DynopticMain.setUpLogging : if $r1 == null >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r1.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r1.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache>
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0)
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : r1 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List chStatesFromChIds(java.util.List)>(r0)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : r1 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List chStatesFromChIds(java.util.List)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z0 = <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z0 = <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $i0 = interfaceinvoke r0.<java.util.List: int size()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $i0 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z1 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r3 = (synoptic.model.channelid.ChannelId) $r5
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r3 = (synoptic.model.channelid.ChannelId) $r5 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r6 = new dynoptic.model.fifosys.channel.channelstate.ChState
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r6 = new dynoptic.model.fifosys.channel.channelstate.ChState >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : specialinvoke $r6.<dynoptic.model.fifosys.channel.channelstate.ChState: void <init>(synoptic.model.channelid.ChannelId)>(r3)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : specialinvoke $r6.<dynoptic.model.fifosys.channel.channelstate.ChState: void <init>(synoptic.model.channelid.ChannelId)>(r3) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : return r1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : return r1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : $r2 = new dynoptic.model.fifosys.channel.channelstate.MutableMultiChState
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : $r2 = new dynoptic.model.fifosys.channel.channelstate.MutableMultiChState >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : specialinvoke $r2.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: void <init>(java.util.List)>(r1)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : specialinvoke $r2.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: void <init>(java.util.List)>(r1) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : return $r2
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : return $r2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $z0 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $z0 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $z2 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $z2 = <dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z2 != 0
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : if $z2 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r6 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r6 = r0.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r7 = virtualinvoke r1.<synoptic.model.event.DistEventType: synoptic.model.channelid.ChannelId getChannelId()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r7 = virtualinvoke r1.<synoptic.model.event.DistEventType: synoptic.model.channelid.ChannelId getChannelId()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $i2 = virtualinvoke $r7.<synoptic.model.channelid.ChannelId: int getScmId()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $i2 = virtualinvoke $r7.<synoptic.model.channelid.ChannelId: int getScmId()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i2)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r8 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>($i2) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r9 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r8
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : $r9 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r8 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : virtualinvoke $r9.<dynoptic.model.fifosys.channel.channelstate.ChState: void enqueue(synoptic.model.event.IDistEventType)>(r1)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.enqueue : virtualinvoke $r9.<dynoptic.model.fifosys.channel.channelstate.ChState: void enqueue(synoptic.model.event.IDistEventType)>(r1) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : $z0 = <dynoptic.model.fifosys.channel.channelstate.ChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : $z0 = <dynoptic.model.fifosys.channel.channelstate.ChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : $z2 = <dynoptic.model.fifosys.channel.channelstate.ChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : $z2 = <dynoptic.model.fifosys.channel.channelstate.ChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : if $z2 != 0
dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : if $z2 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : $r6 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : $r6 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r1)
dynoptic.model.fifosys.channel.channelstate.ChState.enqueue : interfaceinvoke $r6.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.equals : $z0 = specialinvoke r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean equals(java.lang.Object)>(r1)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.equals : $z0 = specialinvoke r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean equals(java.lang.Object)>(r1) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : if r1 != null
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : if r1 != null >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : return 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : return 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.equals : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.equals : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.equals : return 0
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.equals : return 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : if r0 != r1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : if r0 != r1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.channel.channelstate.AbsMultiChState
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.channel.channelstate.AbsMultiChState >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : return 1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : return 1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.equals : $z1 = r1 instanceof dynoptic.model.fifosys.channel.channelstate.MutableMultiChState
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.equals : $z1 = r1 instanceof dynoptic.model.fifosys.channel.channelstate.MutableMultiChState >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.equals : if $z1 != 0
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.equals : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.equals : return 1
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.equals : return 1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : i0 = 17
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : i0 = 17 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $r3 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $r3 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : r2 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r4
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : r2 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r4 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $z1 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: boolean isEmpty()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $z1 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: boolean isEmpty()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>()
dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : $z0 = interfaceinvoke $r1.<java.util.List: boolean isEmpty()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : return $z0
dynoptic.model.fifosys.channel.channelstate.ChState.isEmpty : return $z0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : if $z1 != 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $i1 = 31 * i0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $i1 = 31 * i0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $r5 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.event.IDistEventType peek()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $r5 = virtualinvoke r2.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.event.IDistEventType peek()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.peek : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.ChState.peek : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.peek : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0)
dynoptic.model.fifosys.channel.channelstate.ChState.peek : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.peek : $r3 = (synoptic.model.event.IDistEventType) $r2
dynoptic.model.fifosys.channel.channelstate.ChState.peek : $r3 = (synoptic.model.event.IDistEventType) $r2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.peek : return $r3
dynoptic.model.fifosys.channel.channelstate.ChState.peek : return $r3 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $i2 = virtualinvoke $r5.<java.lang.Object: int hashCode()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : $i2 = virtualinvoke $r5.<java.lang.Object: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : i0 = $i1 + $i2
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : i0 = $i1 + $i2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : goto [?= (branch)]
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : goto [?= (branch)] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : i0 = 31 * i0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : i0 = 31 * i0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : return i0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.topOfQueuesHash : return i0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : r2 = (dynoptic.model.fifosys.channel.channelstate.AbsMultiChState) r1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : r2 = (dynoptic.model.fifosys.channel.channelstate.AbsMultiChState) r1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : $r3 = r2.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : $r3 = r2.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : $z1 = interfaceinvoke $r3.<java.util.List: boolean equals(java.lang.Object)>($r4)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : $z1 = interfaceinvoke $r3.<java.util.List: boolean equals(java.lang.Object)>($r4) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.equals : if r1 != null
dynoptic.model.fifosys.channel.channelstate.ChState.equals : if r1 != null >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.equals : if r0 != r1
dynoptic.model.fifosys.channel.channelstate.ChState.equals : if r0 != r1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.channel.channelstate.ChState
dynoptic.model.fifosys.channel.channelstate.ChState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.channel.channelstate.ChState >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.equals : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.ChState.equals : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.equals : r2 = (dynoptic.model.fifosys.channel.channelstate.ChState) r1
dynoptic.model.fifosys.channel.channelstate.ChState.equals : r2 = (dynoptic.model.fifosys.channel.channelstate.ChState) r1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.equals : $r3 = r2.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId>
dynoptic.model.fifosys.channel.channelstate.ChState.equals : $r3 = r2.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.equals : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId>
dynoptic.model.fifosys.channel.channelstate.ChState.equals : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.equals : $z1 = virtualinvoke $r3.<synoptic.model.channelid.ChannelId: boolean equals(java.lang.Object)>($r4)
dynoptic.model.fifosys.channel.channelstate.ChState.equals : $z1 = virtualinvoke $r3.<synoptic.model.channelid.ChannelId: boolean equals(java.lang.Object)>($r4) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.equals : if $z1 != 0
dynoptic.model.fifosys.channel.channelstate.ChState.equals : if $z1 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.equals : $r5 = r2.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.ChState.equals : $r5 = r2.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.equals : $r6 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.ChState.equals : $r6 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.equals : $z2 = interfaceinvoke $r5.<java.util.List: boolean equals(java.lang.Object)>($r6)
dynoptic.model.fifosys.channel.channelstate.ChState.equals : $z2 = interfaceinvoke $r5.<java.util.List: boolean equals(java.lang.Object)>($r6) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.equals : return $z2
dynoptic.model.fifosys.channel.channelstate.ChState.equals : return $z2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.equals : return $z1
