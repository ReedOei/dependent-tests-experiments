dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.setUpLogging : if $r1 == null
dynoptic.main.DynopticMain.setUpLogging : if $r1 == null >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r1.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r1.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache>
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : if r1 != null
dynoptic.invariants.BinaryInvariant.equals : if r1 != null >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : if r0 != r1
dynoptic.invariants.BinaryInvariant.equals : if r0 != r1 >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : $z0 = r1 instanceof dynoptic.invariants.BinaryInvariant
dynoptic.invariants.BinaryInvariant.equals : $z0 = r1 instanceof dynoptic.invariants.BinaryInvariant >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : if $z0 != 0
dynoptic.invariants.BinaryInvariant.equals : if $z0 != 0 >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : r2 = (dynoptic.invariants.BinaryInvariant) r1
dynoptic.invariants.BinaryInvariant.equals : r2 = (dynoptic.invariants.BinaryInvariant) r1 >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : $r3 = virtualinvoke r2.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType getFirst()>()
dynoptic.invariants.BinaryInvariant.equals : $r3 = virtualinvoke r2.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType getFirst()>() >>>>>>>> dynoptic.invariants.BinaryInvariant.getFirst : $r1 = r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType first>
dynoptic.invariants.BinaryInvariant.getFirst : $r1 = r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType first> >>>>>>>> dynoptic.invariants.BinaryInvariant.getFirst : return $r1
dynoptic.invariants.BinaryInvariant.getFirst : return $r1 >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : $r4 = r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType first>
dynoptic.invariants.BinaryInvariant.equals : $r4 = r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType first> >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : $z1 = virtualinvoke $r3.<synoptic.model.event.DistEventType: boolean equals(java.lang.Object)>($r4)
dynoptic.invariants.BinaryInvariant.equals : $z1 = virtualinvoke $r3.<synoptic.model.event.DistEventType: boolean equals(java.lang.Object)>($r4) >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : if $z1 != 0
dynoptic.invariants.BinaryInvariant.equals : if $z1 != 0 >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : $r5 = virtualinvoke r2.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType getSecond()>()
dynoptic.invariants.BinaryInvariant.equals : $r5 = virtualinvoke r2.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType getSecond()>() >>>>>>>> dynoptic.invariants.BinaryInvariant.getSecond : $r1 = r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType second>
dynoptic.invariants.BinaryInvariant.getSecond : $r1 = r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType second> >>>>>>>> dynoptic.invariants.BinaryInvariant.getSecond : return $r1
dynoptic.invariants.BinaryInvariant.getSecond : return $r1 >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : $r6 = r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType second>
dynoptic.invariants.BinaryInvariant.equals : $r6 = r0.<dynoptic.invariants.BinaryInvariant: synoptic.model.event.DistEventType second> >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : $z2 = virtualinvoke $r5.<synoptic.model.event.DistEventType: boolean equals(java.lang.Object)>($r6)
dynoptic.invariants.BinaryInvariant.equals : $z2 = virtualinvoke $r5.<synoptic.model.event.DistEventType: boolean equals(java.lang.Object)>($r6) >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : if $z2 != 0
dynoptic.invariants.BinaryInvariant.equals : if $z2 != 0 >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : $r7 = r2.<dynoptic.invariants.BinaryInvariant: java.lang.String connectorStr>
dynoptic.invariants.BinaryInvariant.equals : $r7 = r2.<dynoptic.invariants.BinaryInvariant: java.lang.String connectorStr> >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : $r8 = r0.<dynoptic.invariants.BinaryInvariant: java.lang.String connectorStr>
dynoptic.invariants.BinaryInvariant.equals : $r8 = r0.<dynoptic.invariants.BinaryInvariant: java.lang.String connectorStr> >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8)
dynoptic.invariants.BinaryInvariant.equals : $z3 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r8) >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : if $z3 != 0
dynoptic.invariants.BinaryInvariant.equals : if $z3 != 0 >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : return 1
dynoptic.invariants.BinaryInvariant.equals : return 1 >>>>>>>> dynoptic.invariants.BinaryInvariant.equals : return 0
