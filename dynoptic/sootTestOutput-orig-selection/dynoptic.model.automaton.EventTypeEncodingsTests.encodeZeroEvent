dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.setUpLogging : if $r1 == null
dynoptic.main.DynopticMain.setUpLogging : if $r1 == null >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r1.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r1.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache>
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : $r3 = new dynoptic.model.automaton.EventTypeEncodings
dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : $r3 = new dynoptic.model.automaton.EventTypeEncodings >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : specialinvoke $r3.<dynoptic.model.automaton.EventTypeEncodings: void <init>(java.util.Set)>(r1)
dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : specialinvoke $r3.<dynoptic.model.automaton.EventTypeEncodings: void <init>(java.util.Set)>(r1) >>>>>>>> dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap
dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : r4 = $r3
dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : r4 = $r3 >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : $r6 = new dynoptic.model.automaton.EventTypeEncodings
dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : $r6 = new dynoptic.model.automaton.EventTypeEncodings >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : specialinvoke $r6.<dynoptic.model.automaton.EventTypeEncodings: void <init>(java.util.Set)>(r2)
dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : specialinvoke $r6.<dynoptic.model.automaton.EventTypeEncodings: void <init>(java.util.Set)>(r2) >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : r5 = $r6
dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : r5 = $r6 >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : $z0 = interfaceinvoke r1.<java.util.Set: boolean equals(java.lang.Object)>(r2)
dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : $z0 = interfaceinvoke r1.<java.util.Set: boolean equals(java.lang.Object)>(r2) >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : if $z0 == 0
dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : if $z0 == 0 >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r4, r5)
dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : staticinvoke <org.junit.Assert: void assertEquals(java.lang.Object,java.lang.Object)>(r4, r5) >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.equals : if r1 != r0
dynoptic.model.automaton.EventTypeEncodings.equals : if r1 != r0 >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.equals : $z0 = r1 instanceof dynoptic.model.automaton.EventTypeEncodings
dynoptic.model.automaton.EventTypeEncodings.equals : $z0 = r1 instanceof dynoptic.model.automaton.EventTypeEncodings >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.equals : if $z0 != 0
dynoptic.model.automaton.EventTypeEncodings.equals : if $z0 != 0 >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.equals : r2 = (dynoptic.model.automaton.EventTypeEncodings) r1
dynoptic.model.automaton.EventTypeEncodings.equals : r2 = (dynoptic.model.automaton.EventTypeEncodings) r1 >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.equals : $r3 = r0.<dynoptic.model.automaton.EventTypeEncodings: java.util.Map eventEncodings>
dynoptic.model.automaton.EventTypeEncodings.equals : $r3 = r0.<dynoptic.model.automaton.EventTypeEncodings: java.util.Map eventEncodings> >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.equals : $r4 = r2.<dynoptic.model.automaton.EventTypeEncodings: java.util.Map eventEncodings>
dynoptic.model.automaton.EventTypeEncodings.equals : $r4 = r2.<dynoptic.model.automaton.EventTypeEncodings: java.util.Map eventEncodings> >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.equals : $z1 = interfaceinvoke $r3.<java.util.Map: boolean equals(java.lang.Object)>($r4)
dynoptic.model.automaton.EventTypeEncodings.equals : $z1 = interfaceinvoke $r3.<java.util.Map: boolean equals(java.lang.Object)>($r4) >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.equals : return $z1
dynoptic.model.automaton.EventTypeEncodings.equals : return $z1 >>>>>>>> dynoptic.model.automaton.EventTypeEncodingsTests.checkEncodingEquality : goto [?= return]
