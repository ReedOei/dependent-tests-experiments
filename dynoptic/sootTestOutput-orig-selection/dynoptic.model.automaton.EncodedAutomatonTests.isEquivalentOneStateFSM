dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.setUpLogging : if $r1 == null
dynoptic.main.DynopticMain.setUpLogging : if $r1 == null >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r1.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r1.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache>
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.getInitAndAcceptState : $r1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState
dynoptic.model.automaton.EncodedAutomatonTests.getInitAndAcceptState : $r1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.getInitAndAcceptState : $i1 = r0.<dynoptic.model.automaton.EncodedAutomatonTests: int scmId>
dynoptic.model.automaton.EncodedAutomatonTests.getInitAndAcceptState : $i1 = r0.<dynoptic.model.automaton.EncodedAutomatonTests: int scmId> >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.getInitAndAcceptState : specialinvoke $r1.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(1, 1, i0, $i1)
dynoptic.model.automaton.EncodedAutomatonTests.getInitAndAcceptState : specialinvoke $r1.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(1, 1, i0, $i1) >>>>>>>> dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap
dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.getInitAndAcceptState : return $r1
dynoptic.model.automaton.EncodedAutomatonTests.getInitAndAcceptState : return $r1 >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.automaton.EncodedAutomatonTests.toSet : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : r3 = r1
dynoptic.model.automaton.EncodedAutomatonTests.toSet : r3 = r1 >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : i0 = lengthof r3
dynoptic.model.automaton.EncodedAutomatonTests.toSet : i0 = lengthof r3 >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : i1 = 0
dynoptic.model.automaton.EncodedAutomatonTests.toSet : i1 = 0 >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : if i1 >= i0
dynoptic.model.automaton.EncodedAutomatonTests.toSet : if i1 >= i0 >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : r4 = r3[i1]
dynoptic.model.automaton.EncodedAutomatonTests.toSet : r4 = r3[i1] >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r4)
dynoptic.model.automaton.EncodedAutomatonTests.toSet : interfaceinvoke r2.<java.util.Set: boolean add(java.lang.Object)>(r4) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : b0 = 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : b0 = 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i1 = b0 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i1 = b0 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z0 == 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b2 = 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b2 = 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i3 = $i1 + $b2]
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i3 = $i1 + $b2] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i3 = $i1 + $b2
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i3 = $i1 + $b2 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i4 = i3 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i4 = i3 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z1 == 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b5 = 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b5 = 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i6 = $i4 + $b5]
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i6 = $i4 + $b5] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i6 = $i4 + $b5
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i6 = $i4 + $b5 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i7 = i6 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i7 = i6 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i8 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int pid>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i8 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int pid> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i9 = $i7 + $i8
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i9 = $i7 + $i8 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i10 = i9 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i10 = i9 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i11 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i11 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i12 = $i10 + $i11
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i12 = $i10 + $i11 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : return 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : return 1 >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : i1 = i1 + 1
dynoptic.model.automaton.EncodedAutomatonTests.toSet : i1 = i1 + 1 >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : goto [?= (branch)]
dynoptic.model.automaton.EncodedAutomatonTests.toSet : goto [?= (branch)] >>>>>>>> dynoptic.model.automaton.EncodedAutomatonTests.toSet : return r2
dynoptic.model.automaton.EncodedAutomatonTests.toSet : return r2 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>()
dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>()
dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states>
dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0
dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.AbsFSM.recomputeAlphabet : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r2 = (dynoptic.model.AbsFSMState) $r6
dynoptic.model.AbsFSM.recomputeAlphabet : r2 = (dynoptic.model.AbsFSMState) $r6 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r3 = virtualinvoke r2.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>()
dynoptic.model.AbsFSM.recomputeAlphabet : r3 = virtualinvoke r2.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions>
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>()
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : return $r2
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : return $r2 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r7 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.recomputeAlphabet : $r7 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r7.<dynoptic.model.alphabet.FSMAlphabet: boolean addAll(java.util.Collection)>(r3)
dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r7.<dynoptic.model.alphabet.FSMAlphabet: boolean addAll(java.util.Collection)>(r3) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.addAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1)
dynoptic.model.alphabet.FSMAlphabet.addAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : return $z0
dynoptic.model.alphabet.FSMAlphabet.addAll : return $z0 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.AbsFSM.recomputeAlphabet : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.equals : if r1 != null
dynoptic.model.fifosys.cfsm.fsm.FSM.equals : if r1 != null >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.equals : if r0 != r1
dynoptic.model.fifosys.cfsm.fsm.FSM.equals : if r0 != r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.equals : $z0 = r1 instanceof dynoptic.model.fifosys.cfsm.fsm.FSM
dynoptic.model.fifosys.cfsm.fsm.FSM.equals : $z0 = r1 instanceof dynoptic.model.fifosys.cfsm.fsm.FSM >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.equals : if $z0 != 0
dynoptic.model.fifosys.cfsm.fsm.FSM.equals : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.equals : r2 = (dynoptic.model.fifosys.cfsm.fsm.FSM) r1
dynoptic.model.fifosys.cfsm.fsm.FSM.equals : r2 = (dynoptic.model.fifosys.cfsm.fsm.FSM) r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.equals : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: int pid>
dynoptic.model.fifosys.cfsm.fsm.FSM.equals : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: int pid> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.equals : $i1 = r2.<dynoptic.model.fifosys.cfsm.fsm.FSM: int pid>
dynoptic.model.fifosys.cfsm.fsm.FSM.equals : $i1 = r2.<dynoptic.model.fifosys.cfsm.fsm.FSM: int pid> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.equals : if $i0 == $i1
dynoptic.model.fifosys.cfsm.fsm.FSM.equals : if $i0 == $i1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.equals : r3 = virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.automaton.EventTypeEncodings getEventTypeEncodings()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.equals : r3 = virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.automaton.EventTypeEncodings getEventTypeEncodings()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: void recomputeAlphabet()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: void recomputeAlphabet()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : $r1 = new dynoptic.model.automaton.EventTypeEncodings
dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : $r1 = new dynoptic.model.automaton.EventTypeEncodings >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : $r2 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : $r2 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : specialinvoke $r1.<dynoptic.model.automaton.EventTypeEncodings: void <init>(java.util.Set)>($r2)
dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : specialinvoke $r1.<dynoptic.model.automaton.EventTypeEncodings: void <init>(java.util.Set)>($r2) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.toArray : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : $r2 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray()>()
dynoptic.model.alphabet.FSMAlphabet.toArray : $r2 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : return $r2
dynoptic.model.alphabet.FSMAlphabet.toArray : return $r2 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : return $r1
dynoptic.model.fifosys.cfsm.fsm.FSM.getEventTypeEncodings : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.equals : r4 = virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.automaton.EncodedAutomaton getEncodedAutomaton(dynoptic.model.automaton.EventTypeEncodings)>(r3)
dynoptic.model.fifosys.cfsm.fsm.FSM.equals : r4 = virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.automaton.EncodedAutomaton getEncodedAutomaton(dynoptic.model.automaton.EventTypeEncodings)>(r3) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : $r2 = new dynoptic.model.automaton.EncodedAutomaton
dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : $r2 = new dynoptic.model.automaton.EncodedAutomaton >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : specialinvoke $r2.<dynoptic.model.automaton.EncodedAutomaton: void <init>(dynoptic.model.automaton.EventTypeEncodings,dynoptic.model.fifosys.cfsm.fsm.FSM)>(r1, r0)
dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : specialinvoke $r2.<dynoptic.model.automaton.EncodedAutomaton: void <init>(dynoptic.model.automaton.EventTypeEncodings,dynoptic.model.fifosys.cfsm.fsm.FSM)>(r1, r0) >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r2 = new dk.brics.automaton.State
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r2 = new dk.brics.automaton.State >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : specialinvoke $r2.<dk.brics.automaton.State: void <init>()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : specialinvoke $r2.<dk.brics.automaton.State: void <init>()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r3 = $r2
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r3 = $r2 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r4 = staticinvoke <dynoptic.util.Util: java.util.Map newMap()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r4 = staticinvoke <dynoptic.util.Util: java.util.Map newMap()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r5 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set getInitStates()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r5 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set getInitStates()>() >>>>>>>> dynoptic.model.AbsFSM.getInitStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set initStates>
dynoptic.model.AbsFSM.getInitStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set initStates> >>>>>>>> dynoptic.model.AbsFSM.getInitStates : return $r1
dynoptic.model.AbsFSM.getInitStates : return $r1 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r6 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r6 = interfaceinvoke r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : if $z0 == 0
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : if $z0 == 0 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r8 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r8 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r7 = (dynoptic.model.fifosys.cfsm.fsm.FSMState) $r8
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : r7 = (dynoptic.model.fifosys.cfsm.fsm.FSMState) $r8 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $z1 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r7)
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $z1 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>(r7) >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : if $z1 != 0
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : if $z1 != 0 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : specialinvoke r0.<dynoptic.model.automaton.EncodedAutomaton: void DFS(dynoptic.model.fifosys.cfsm.fsm.FSMState,dk.brics.automaton.State,java.util.Map)>(r7, r3, r4)
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : specialinvoke r0.<dynoptic.model.automaton.EncodedAutomaton: void DFS(dynoptic.model.fifosys.cfsm.fsm.FSMState,dk.brics.automaton.State,java.util.Map)>(r7, r3, r4) >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.DFS : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
dynoptic.model.automaton.EncodedAutomaton.DFS : interfaceinvoke r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.DFS : $z1 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept()>()
dynoptic.model.automaton.EncodedAutomaton.DFS : $z1 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.isAccept : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept>
dynoptic.model.fifosys.cfsm.fsm.FSMState.isAccept : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.isAccept : return $z0
dynoptic.model.fifosys.cfsm.fsm.FSMState.isAccept : return $z0 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.DFS : virtualinvoke r2.<dk.brics.automaton.State: void setAccept(boolean)>($z1)
dynoptic.model.automaton.EncodedAutomaton.DFS : virtualinvoke r2.<dk.brics.automaton.State: void setAccept(boolean)>($z1) >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.DFS : r4 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Set getTransitioningEvents()>()
dynoptic.model.automaton.EncodedAutomaton.DFS : r4 = virtualinvoke r1.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Set getTransitioningEvents()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.DFS : r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.automaton.EncodedAutomaton.DFS : r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.DFS : $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.automaton.EncodedAutomaton.DFS : $z2 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.DFS : if $z2 == 0
dynoptic.model.automaton.EncodedAutomaton.DFS : if $z2 == 0 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : goto [?= $z0 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r9 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model>
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r9 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model> >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r9.<dk.brics.automaton.Automaton: void setInitialState(dk.brics.automaton.State)>(r3)
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r9.<dk.brics.automaton.Automaton: void setInitialState(dk.brics.automaton.State)>(r3) >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r10 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model>
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r10 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model> >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r10.<dk.brics.automaton.Automaton: void setDeterministic(boolean)>(0)
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r10.<dk.brics.automaton.Automaton: void setDeterministic(boolean)>(0) >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r11 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model>
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : $r11 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model> >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r11.<dk.brics.automaton.Automaton: void restoreInvariant()>()
dynoptic.model.automaton.EncodedAutomaton.convertFSMToAutomaton : virtualinvoke $r11.<dk.brics.automaton.Automaton: void restoreInvariant()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : return $r2
dynoptic.model.fifosys.cfsm.fsm.FSM.getEncodedAutomaton : return $r2 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.equals : r5 = virtualinvoke r2.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.automaton.EncodedAutomaton getEncodedAutomaton(dynoptic.model.automaton.EventTypeEncodings)>(r3)
dynoptic.model.fifosys.cfsm.fsm.FSM.equals : r5 = virtualinvoke r2.<dynoptic.model.fifosys.cfsm.fsm.FSM: dynoptic.model.automaton.EncodedAutomaton getEncodedAutomaton(dynoptic.model.automaton.EventTypeEncodings)>(r3) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.equals : $z1 = virtualinvoke r4.<dynoptic.model.automaton.EncodedAutomaton: boolean equals(java.lang.Object)>(r5)
dynoptic.model.fifosys.cfsm.fsm.FSM.equals : $z1 = virtualinvoke r4.<dynoptic.model.automaton.EncodedAutomaton: boolean equals(java.lang.Object)>(r5) >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.equals : if r1 != null
dynoptic.model.automaton.EncodedAutomaton.equals : if r1 != null >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.equals : if r1 != r0
dynoptic.model.automaton.EncodedAutomaton.equals : if r1 != r0 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.equals : $z0 = r1 instanceof dynoptic.model.automaton.EncodedAutomaton
dynoptic.model.automaton.EncodedAutomaton.equals : $z0 = r1 instanceof dynoptic.model.automaton.EncodedAutomaton >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.equals : if $z0 != 0
dynoptic.model.automaton.EncodedAutomaton.equals : if $z0 != 0 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.equals : r2 = (dynoptic.model.automaton.EncodedAutomaton) r1
dynoptic.model.automaton.EncodedAutomaton.equals : r2 = (dynoptic.model.automaton.EncodedAutomaton) r1 >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.equals : $r3 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model>
dynoptic.model.automaton.EncodedAutomaton.equals : $r3 = r0.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model> >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.equals : $r4 = r2.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model>
dynoptic.model.automaton.EncodedAutomaton.equals : $r4 = r2.<dynoptic.model.automaton.EncodedAutomaton: dk.brics.automaton.Automaton model> >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.equals : $z1 = virtualinvoke $r3.<dk.brics.automaton.Automaton: boolean equals(java.lang.Object)>($r4)
dynoptic.model.automaton.EncodedAutomaton.equals : $z1 = virtualinvoke $r3.<dk.brics.automaton.Automaton: boolean equals(java.lang.Object)>($r4) >>>>>>>> dynoptic.model.automaton.EncodedAutomaton.equals : return $z1
dynoptic.model.automaton.EncodedAutomaton.equals : return $z1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.equals : return $z1
