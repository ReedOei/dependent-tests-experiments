dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r1 = new dynoptic.model.fifosys.cfsm.fsm.FSMState >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : specialinvoke $r1.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(0, 1, 1, 0)
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : specialinvoke $r1.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(0, 1, 1, 0) >>>>>>>> dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap
dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: dynoptic.model.fifosys.cfsm.fsm.FSMState init_1> = $r1
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: dynoptic.model.fifosys.cfsm.fsm.FSMState init_1> = $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: java.util.Set listInit_1> = $r2
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: java.util.Set listInit_1> = $r2 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r3 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: java.util.Set listInit_1>
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r3 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: java.util.Set listInit_1> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r4 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: dynoptic.model.fifosys.cfsm.fsm.FSMState init_1>
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r4 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: dynoptic.model.fifosys.cfsm.fsm.FSMState init_1> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4)
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : b0 = 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : b0 = 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i1 = b0 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i1 = b0 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z0 == 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b2 = 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b2 = 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i3 = $i1 + $b2
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i3 = $i1 + $b2 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i4 = i3 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i4 = i3 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z1 == 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b5 = 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b5 = 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i6 = $i4 + $b5]
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i6 = $i4 + $b5] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i6 = $i4 + $b5
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i6 = $i4 + $b5 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i7 = i6 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i7 = i6 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i8 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int pid>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i8 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int pid> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i9 = $i7 + $i8
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i9 = $i7 + $i8 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i10 = i9 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i10 = i9 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i11 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i11 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i12 = $i10 + $i11
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i12 = $i10 + $i11 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : return 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : return 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r5 = new dynoptic.model.fifosys.cfsm.fsm.FSMState >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : specialinvoke $r5.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(1, 0, 1, 1)
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : specialinvoke $r5.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(1, 0, 1, 1) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: dynoptic.model.fifosys.cfsm.fsm.FSMState accepting_1> = $r5
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: dynoptic.model.fifosys.cfsm.fsm.FSMState accepting_1> = $r5 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r6 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r6 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: java.util.Set listAccepting_1> = $r6
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: java.util.Set listAccepting_1> = $r6 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r7 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: java.util.Set listAccepting_1>
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r7 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: java.util.Set listAccepting_1> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r8 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: dynoptic.model.fifosys.cfsm.fsm.FSMState accepting_1>
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r8 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: dynoptic.model.fifosys.cfsm.fsm.FSMState accepting_1> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r8)
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : interfaceinvoke $r7.<java.util.Set: boolean add(java.lang.Object)>($r8) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b2 = 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b2 = 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i3 = $i1 + $b2]
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i3 = $i1 + $b2] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b5 = 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b5 = 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r9 = new dynoptic.model.fifosys.cfsm.fsm.FSMState
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r9 = new dynoptic.model.fifosys.cfsm.fsm.FSMState >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : specialinvoke $r9.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(0, 0, 2, 2)
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : specialinvoke $r9.<dynoptic.model.fifosys.cfsm.fsm.FSMState: void <init>(boolean,boolean,int,int)>(0, 0, 2, 2) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: dynoptic.model.fifosys.cfsm.fsm.FSMState state_2> = $r9
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: dynoptic.model.fifosys.cfsm.fsm.FSMState state_2> = $r9 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r10 = new synoptic.model.channelid.ChannelId
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r10 = new synoptic.model.channelid.ChannelId >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : specialinvoke $r10.<synoptic.model.channelid.ChannelId: void <init>(int,int,int)>(1, 2, 0)
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : specialinvoke $r10.<synoptic.model.channelid.ChannelId: void <init>(int,int,int)>(1, 2, 0) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: synoptic.model.channelid.ChannelId cid> = $r10
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: synoptic.model.channelid.ChannelId cid> = $r10 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r11 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: synoptic.model.channelid.ChannelId cid>
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r11 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: synoptic.model.channelid.ChannelId cid> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r12 = staticinvoke <synoptic.model.event.DistEventType: synoptic.model.event.DistEventType SendEvent(java.lang.String,synoptic.model.channelid.ChannelId)>("m", $r11)
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r12 = staticinvoke <synoptic.model.event.DistEventType: synoptic.model.event.DistEventType SendEvent(java.lang.String,synoptic.model.channelid.ChannelId)>("m", $r11) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: synoptic.model.event.DistEventType e_pid1> = $r12
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: synoptic.model.event.DistEventType e_pid1> = $r12 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r13 = staticinvoke <synoptic.model.event.DistEventType: synoptic.model.event.DistEventType LocalEvent(java.lang.String,int)>("e", 1)
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r13 = staticinvoke <synoptic.model.event.DistEventType: synoptic.model.event.DistEventType LocalEvent(java.lang.String,int)>("e", 1) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: synoptic.model.event.DistEventType e2_pid1> = $r13
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: synoptic.model.event.DistEventType e2_pid1> = $r13 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r14 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : $r14 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: java.util.Set states> = $r14
dynoptic.model.fifosys.cfsm.fsm.FSMTests.setUp : r0.<dynoptic.model.fifosys.cfsm.fsm.FSMTests: java.util.Set states> = $r14 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : if r1 != r0
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : if r1 != r0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.cfsm.fsm.FSMState
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.cfsm.fsm.FSMState >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : if $z0 != 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : r2 = (dynoptic.model.fifosys.cfsm.fsm.FSMState) r1
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : r2 = (dynoptic.model.fifosys.cfsm.fsm.FSMState) r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : $z1 = r2.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept>
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : $z1 = r2.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : $z2 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept>
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : $z2 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : if $z1 == $z2
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : if $z1 == $z2 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : return 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : return 0 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>()
dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>()
dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states>
dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0
dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.AbsFSM.recomputeAlphabet : $r6 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r2 = (dynoptic.model.AbsFSMState) $r6
dynoptic.model.AbsFSM.recomputeAlphabet : r2 = (dynoptic.model.AbsFSMState) $r6 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r3 = virtualinvoke r2.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>()
dynoptic.model.AbsFSM.recomputeAlphabet : r3 = virtualinvoke r2.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions>
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>()
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : return $r2
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : return $r2 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r7 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.recomputeAlphabet : $r7 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r7.<dynoptic.model.alphabet.FSMAlphabet: boolean addAll(java.util.Collection)>(r3)
dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r7.<dynoptic.model.alphabet.FSMAlphabet: boolean addAll(java.util.Collection)>(r3) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.addAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1)
dynoptic.model.alphabet.FSMAlphabet.addAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : return $z0
dynoptic.model.alphabet.FSMAlphabet.addAll : return $z0 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.AbsFSM.recomputeAlphabet : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.AbsFSM.getAlphabet : $r1 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.getAlphabet : $r1 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.getAlphabet : return $r1
dynoptic.model.AbsFSM.getAlphabet : return $r1 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.size : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.size : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.size : $i0 = interfaceinvoke $r1.<java.util.Set: int size()>()
dynoptic.model.alphabet.FSMAlphabet.size : $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.size : return $i0
dynoptic.model.alphabet.FSMAlphabet.size : return $i0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getPid : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: int pid>
dynoptic.model.fifosys.cfsm.fsm.FSM.getPid : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: int pid> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getPid : return $i0
dynoptic.model.fifosys.cfsm.fsm.FSM.getPid : return $i0 >>>>>>>> dynoptic.model.AbsFSM.getInitStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set initStates>
dynoptic.model.AbsFSM.getInitStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set initStates> >>>>>>>> dynoptic.model.AbsFSM.getInitStates : return $r1
dynoptic.model.AbsFSM.getInitStates : return $r1 >>>>>>>> dynoptic.model.AbsFSM.getAcceptStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set acceptStates>
dynoptic.model.AbsFSM.getAcceptStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set acceptStates> >>>>>>>> dynoptic.model.AbsFSM.getAcceptStates : return $r1
