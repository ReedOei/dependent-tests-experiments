dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger>
dynoptic.main.DynopticMain.setUpLogging : $r1 = <dynoptic.main.DynopticMain: java.util.logging.Logger logger> >>>>>>>> dynoptic.main.DynopticMain.setUpLogging : if $r1 == null
dynoptic.main.DynopticMain.setUpLogging : if $r1 == null >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap>
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState: java.util.Map fifoSysStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.fifosys.ObsFifoSysState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map prevStateAndEventMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap>
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : $r1 = <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: java.util.Map initialProcessStatesMap> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r1.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : interfaceinvoke $r1.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.clearCache : <dynoptic.model.fifosys.gfsm.observed.ObsFSMState: int prevAnonId> = -1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache>
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : $r0 = <dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState: java.util.Map cache> >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.observed.ObsMultFSMState.clearCache : interfaceinvoke $r0.<java.util.Map: void clear()>() >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0)
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>(int)>(i0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : r1 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List chStatesFromChIds(java.util.List)>(r0)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : r1 = staticinvoke <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List chStatesFromChIds(java.util.List)>(r0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z0 = <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean $assertionsDisabled>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z0 = <dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z0 != 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $i0 = interfaceinvoke r0.<java.util.List: int size()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $i0 = interfaceinvoke r0.<java.util.List: int size()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r1 = staticinvoke <dynoptic.util.Util: java.util.List newList(int)>($i0) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r2 = interfaceinvoke r0.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z1 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r3 = (synoptic.model.channelid.ChannelId) $r5
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : r3 = (synoptic.model.channelid.ChannelId) $r5 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r6 = new dynoptic.model.fifosys.channel.channelstate.ChState
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : $r6 = new dynoptic.model.fifosys.channel.channelstate.ChState >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : specialinvoke $r6.<dynoptic.model.fifosys.channel.channelstate.ChState: void <init>(synoptic.model.channelid.ChannelId)>(r3)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : specialinvoke $r6.<dynoptic.model.fifosys.channel.channelstate.ChState: void <init>(synoptic.model.channelid.ChannelId)>(r3) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : interfaceinvoke r1.<java.util.List: boolean add(java.lang.Object)>($r6) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : return r1
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.chStatesFromChIds : return r1 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : $r2 = new dynoptic.model.fifosys.channel.channelstate.MutableMultiChState
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : $r2 = new dynoptic.model.fifosys.channel.channelstate.MutableMultiChState >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : specialinvoke $r2.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: void <init>(java.util.List)>(r1)
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : specialinvoke $r2.<dynoptic.model.fifosys.channel.channelstate.MutableMultiChState: void <init>(java.util.List)>(r1) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : return $r2
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.fromChannelIds : return $r2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : r1 = "ChStates["
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : r1 = "ChStates[" >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r4 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : r3 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r5
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : r3 = (dynoptic.model.fifosys.channel.channelstate.ChState) $r5 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r6 = new java.lang.StringBuilder
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r6 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r8 = virtualinvoke r3.<dynoptic.model.fifosys.channel.channelstate.ChState: java.lang.String toString()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r8 = virtualinvoke r3.<dynoptic.model.fifosys.channel.channelstate.ChState: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r1 = new java.lang.StringBuilder
dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r1 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.channel.channelstate.ChState.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r5 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId>
dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r5 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r6 = virtualinvoke $r5.<synoptic.model.channelid.ChannelId: java.lang.String toString()>()
dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r6 = virtualinvoke $r5.<synoptic.model.channelid.ChannelId: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6)
dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r7 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r6) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": [")
dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(": [") >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.channel.channelstate.ChState.toString : r2 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r9 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r9 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>()
dynoptic.model.fifosys.channel.channelstate.ChState.toString : r3 = interfaceinvoke $r9.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.channel.channelstate.ChState.toString : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : if $z0 == 0
dynoptic.model.fifosys.channel.channelstate.ChState.toString : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r16 = new java.lang.StringBuilder
dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r16 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.channel.channelstate.ChState.toString : specialinvoke $r16.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]")
dynoptic.model.fifosys.channel.channelstate.ChState.toString : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.channel.channelstate.ChState.toString : r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.toString : return r19
dynoptic.model.fifosys.channel.channelstate.ChState.toString : return r19 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r9 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ")
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", ") >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : r1 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r11 = new java.lang.StringBuilder
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r11 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : specialinvoke $r11.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $i0 = virtualinvoke r1.<java.lang.String: int length()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $i1 = $i0 - 2
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $i1 = $i0 - 2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r12 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r12 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i1) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12)
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r13 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r12) >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]")
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : return r15
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.toString : return r15 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.hashCode : $i0 = specialinvoke r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: int hashCode()>()
dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.hashCode : $i0 = specialinvoke r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.hashCode : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates>
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.hashCode : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.AbsMultiChState: java.util.List channelStates> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.hashCode : $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>()
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.hashCode : $i0 = interfaceinvoke $r1.<java.util.List: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : b0 = 17
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : b0 = 17 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i1 = 31 * b0
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i1 = 31 * b0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId>
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $r1 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: synoptic.model.channelid.ChannelId chId> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i2 = virtualinvoke $r1.<synoptic.model.channelid.ChannelId: int hashCode()>()
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i2 = virtualinvoke $r1.<synoptic.model.channelid.ChannelId: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : i3 = $i1 + $i2
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : i3 = $i1 + $i2 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i4 = 31 * i3
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i4 = 31 * i3 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $r2 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue>
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $r2 = r0.<dynoptic.model.fifosys.channel.channelstate.ChState: java.util.List queue> >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i5 = interfaceinvoke $r2.<java.util.List: int hashCode()>()
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : $i5 = interfaceinvoke $r2.<java.util.List: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : i6 = $i4 + $i5
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : i6 = $i4 + $i5 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : return i6
dynoptic.model.fifosys.channel.channelstate.ChState.hashCode : return i6 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.hashCode : return $i0
dynoptic.model.fifosys.channel.channelstate.AbsMultiChState.hashCode : return $i0 >>>>>>>> dynoptic.model.fifosys.channel.channelstate.MutableMultiChState.hashCode : return $i0
