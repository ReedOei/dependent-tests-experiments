dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : $r1 = new java.io.File >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r0)
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : specialinvoke $r1.<java.io.File: void <init>(java.lang.String)>(r0) >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r2 = $r1
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r2 = $r1 >>>>>>>> dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r3 = staticinvoke <dynoptic.model.export.GraphExporter: java.lang.String getDotCommand()>()
dynoptic.model.export.GraphExporter.generatePngFileFromDotFile : r3 = staticinvoke <dynoptic.model.export.GraphExporter: java.lang.String getDotCommand()>() >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : r0 = <dynoptic.model.export.GraphExporter: java.lang.String[] dotCommands>
dynoptic.model.export.GraphExporter.getDotCommand : r0 = <dynoptic.model.export.GraphExporter: java.lang.String[] dotCommands> >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : i0 = lengthof r0
dynoptic.model.export.GraphExporter.getDotCommand : i0 = lengthof r0 >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : i1 = 0
dynoptic.model.export.GraphExporter.getDotCommand : i1 = 0 >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : if i1 >= i0
dynoptic.model.export.GraphExporter.getDotCommand : if i1 >= i0 >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : r1 = r0[i1]
dynoptic.model.export.GraphExporter.getDotCommand : r1 = r0[i1] >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : $r3 = new java.io.File
dynoptic.model.export.GraphExporter.getDotCommand : $r3 = new java.io.File >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1)
dynoptic.model.export.GraphExporter.getDotCommand : specialinvoke $r3.<java.io.File: void <init>(java.lang.String)>(r1) >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : r2 = $r3
dynoptic.model.export.GraphExporter.getDotCommand : r2 = $r3 >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>()
dynoptic.model.export.GraphExporter.getDotCommand : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>() >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : if $z0 == 0
dynoptic.model.export.GraphExporter.getDotCommand : if $z0 == 0 >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : i1 = i1 + 1
dynoptic.model.export.GraphExporter.getDotCommand : i1 = i1 + 1 >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : goto [?= (branch)]
dynoptic.model.export.GraphExporter.getDotCommand : goto [?= (branch)] >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : r4 = staticinvoke <synoptic.main.SynopticMain: synoptic.main.SynopticMain getInstanceWithExistenceCheck()>()
dynoptic.model.export.GraphExporter.getDotCommand : r4 = staticinvoke <synoptic.main.SynopticMain: synoptic.main.SynopticMain getInstanceWithExistenceCheck()>() >>>>>>>> dynoptic.model.export.GraphExporter.getDotCommand : $r5 = r4.<synoptic.main.SynopticMain: synoptic.main.options.SynopticOptions options>
