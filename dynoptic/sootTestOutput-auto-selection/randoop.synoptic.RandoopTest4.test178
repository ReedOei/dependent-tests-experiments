dynoptic.model.export.DotExportFormatter.beginGraphString : return "digraph {\n" >>>>>>>> dynoptic.model.export.DotExportFormatter.endGraphString : return "} // digraph {\n"
dynoptic.model.export.DotExportFormatter.endGraphString : return "} // digraph {\n" >>>>>>>> dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap
dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r2 = new java.lang.StringBuilder
dynoptic.model.export.DotExportFormatter.nodeToString : $r2 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label=\"")
dynoptic.model.export.DotExportFormatter.nodeToString : $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label=\"") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toString : $r1 = virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.lang.String toShortIntString()>()
dynoptic.model.fifosys.cfsm.fsm.FSMState.toString : $r1 = virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.lang.String toShortIntString()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId>
dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0)
dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : return $r1
dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toString : return $r1
dynoptic.model.fifosys.cfsm.fsm.FSMState.toString : return $r1 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r8 = staticinvoke <dynoptic.model.export.DotExportFormatter: java.lang.String quote(java.lang.String)>($r7)
dynoptic.model.export.DotExportFormatter.nodeToString : $r8 = staticinvoke <dynoptic.model.export.DotExportFormatter: java.lang.String quote(java.lang.String)>($r7) >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : $r1 = new java.lang.StringBuilder
dynoptic.model.export.GraphExportFormatter.quote : $r1 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : $i2 = virtualinvoke r0.<java.lang.String: int length()>()
dynoptic.model.export.GraphExportFormatter.quote : $i2 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : $i3 = $i2 + 2
dynoptic.model.export.GraphExportFormatter.quote : $i3 = $i2 + 2 >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i3)
dynoptic.model.export.GraphExportFormatter.quote : specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i3) >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : r2 = $r1
dynoptic.model.export.GraphExportFormatter.quote : r2 = $r1 >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : i0 = 0
dynoptic.model.export.GraphExportFormatter.quote : i0 = 0 >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : $i4 = virtualinvoke r0.<java.lang.String: int length()>()
dynoptic.model.export.GraphExportFormatter.quote : $i4 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : if i0 >= $i4
dynoptic.model.export.GraphExportFormatter.quote : if i0 >= $i4 >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)
dynoptic.model.export.GraphExportFormatter.quote : c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0) >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : lookupswitch(c1) {     case 34:
dynoptic.model.export.GraphExportFormatter.quote : lookupswitch(c1) {     case 34: >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1)
dynoptic.model.export.GraphExportFormatter.quote : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1) >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : i0 = i0 + 1
dynoptic.model.export.GraphExportFormatter.quote : i0 = i0 + 1 >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : goto [?= $i4 = virtualinvoke r0.<java.lang.String: int length()>()]
dynoptic.model.export.GraphExportFormatter.quote : goto [?= $i4 = virtualinvoke r0.<java.lang.String: int length()>()] >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.GraphExportFormatter.quote : $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : return $r6
dynoptic.model.export.GraphExportFormatter.quote : return $r6 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
dynoptic.model.export.DotExportFormatter.nodeToString : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\",shape=circle")
dynoptic.model.export.DotExportFormatter.nodeToString : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\",shape=circle") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : r4 = ""
dynoptic.model.export.DotExportFormatter.nodeToString : r4 = "" >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : if z0 == 0
dynoptic.model.export.DotExportFormatter.nodeToString : if z0 == 0 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : if z1 == 0
dynoptic.model.export.DotExportFormatter.nodeToString : if z1 == 0 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r30 = new java.lang.StringBuilder
dynoptic.model.export.DotExportFormatter.nodeToString : $r30 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ")
dynoptic.model.export.DotExportFormatter.nodeToString : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
dynoptic.model.export.DotExportFormatter.nodeToString : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [")
dynoptic.model.export.DotExportFormatter.nodeToString : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
dynoptic.model.export.DotExportFormatter.nodeToString : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("];\n")
dynoptic.model.export.DotExportFormatter.nodeToString : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("];\n") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
dynoptic.model.export.DotExportFormatter.nodeToString : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : return $r37
