dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toString : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.toString : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toString : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>()
dynoptic.model.alphabet.FSMAlphabet.toString : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toString : return $r2
dynoptic.model.alphabet.FSMAlphabet.toString : return $r2 >>>>>>>> dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap
dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.toArray : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : $r2 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray()>()
dynoptic.model.alphabet.FSMAlphabet.toArray : $r2 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : return $r2
dynoptic.model.alphabet.FSMAlphabet.toArray : return $r2 >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : $r1 = r0.<dynoptic.model.automaton.EventTypeEncodings: java.util.Map charEncodings>
dynoptic.model.automaton.EventTypeEncodings.getEventType : $r1 = r0.<dynoptic.model.automaton.EventTypeEncodings: java.util.Map charEncodings> >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0)
dynoptic.model.automaton.EventTypeEncodings.getEventType : $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0) >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2)
dynoptic.model.automaton.EventTypeEncodings.getEventType : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2) >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : if $z0 != 0
dynoptic.model.automaton.EventTypeEncodings.getEventType : if $z0 != 0 >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : $r3 = new java.lang.IllegalArgumentException
dynoptic.model.automaton.EventTypeEncodings.getEventType : $r3 = new java.lang.IllegalArgumentException >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The passed char has not been mapped to an event type.")
dynoptic.model.automaton.EventTypeEncodings.getEventType : specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The passed char has not been mapped to an event type.") >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : throw $r3
