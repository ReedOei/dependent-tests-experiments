dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.AbsFSMState.getNextStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : $r4 = virtualinvoke r0.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>()
dynoptic.model.AbsFSMState.getNextStates : $r4 = virtualinvoke r0.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions>
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>()
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : return $r2
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : return $r2 >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.AbsFSMState.getNextStates : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSMState.getNextStates : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : if $z0 == 0
dynoptic.model.AbsFSMState.getNextStates : if $z0 == 0 >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : return r1
dynoptic.model.AbsFSMState.getNextStates : return r1 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.isAccept : $r2 = r0.<dynoptic.model.fifosys.cfsm.CFSMState: java.util.List fsmStates>
dynoptic.model.fifosys.cfsm.CFSMState.isAccept : $r2 = r0.<dynoptic.model.fifosys.cfsm.CFSMState: java.util.List fsmStates> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.isAccept : $r1 = <dynoptic.model.fifosys.cfsm.CFSMState: dynoptic.model.AbsFSMState$IStateToBooleanFn fnIsAcceptState>
dynoptic.model.fifosys.cfsm.CFSMState.isAccept : $r1 = <dynoptic.model.fifosys.cfsm.CFSMState: dynoptic.model.AbsFSMState$IStateToBooleanFn fnIsAcceptState> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.isAccept : $z0 = staticinvoke <dynoptic.model.fifosys.cfsm.CFSMState: boolean statesEvalToTrue(java.util.Collection,dynoptic.model.AbsFSMState$IStateToBooleanFn)>($r2, $r1)
dynoptic.model.fifosys.cfsm.CFSMState.isAccept : $z0 = staticinvoke <dynoptic.model.fifosys.cfsm.CFSMState: boolean statesEvalToTrue(java.util.Collection,dynoptic.model.AbsFSMState$IStateToBooleanFn)>($r2, $r1) >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>()
dynoptic.model.AbsFSMState.statesEvalToTrue : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSMState.statesEvalToTrue : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : if $z0 == 0
dynoptic.model.AbsFSMState.statesEvalToTrue : if $z0 == 0 >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
dynoptic.model.AbsFSMState.statesEvalToTrue : $r4 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : r3 = (dynoptic.model.AbsFSMState) $r4
dynoptic.model.AbsFSMState.statesEvalToTrue : r3 = (dynoptic.model.AbsFSMState) $r4 >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : $z1 = interfaceinvoke r1.<dynoptic.model.AbsFSMState$IStateToBooleanFn: boolean eval(java.lang.Object)>(r3)
dynoptic.model.AbsFSMState.statesEvalToTrue : $z1 = interfaceinvoke r1.<dynoptic.model.AbsFSMState$IStateToBooleanFn: boolean eval(java.lang.Object)>(r3) >>>>>>>> dynoptic.model.AbsFSMState$2.eval : $r2 = (dynoptic.model.AbsFSMState) r1
dynoptic.model.AbsFSMState$2.eval : $r2 = (dynoptic.model.AbsFSMState) r1 >>>>>>>> dynoptic.model.AbsFSMState$2.eval : $z0 = virtualinvoke r0.<dynoptic.model.AbsFSMState$2: boolean eval(dynoptic.model.AbsFSMState)>($r2)
dynoptic.model.AbsFSMState$2.eval : $z0 = virtualinvoke r0.<dynoptic.model.AbsFSMState$2: boolean eval(dynoptic.model.AbsFSMState)>($r2) >>>>>>>> dynoptic.model.AbsFSMState$2.eval : $z0 = virtualinvoke r1.<dynoptic.model.AbsFSMState: boolean isInitial()>()
dynoptic.model.AbsFSMState$2.eval : $z0 = virtualinvoke r1.<dynoptic.model.AbsFSMState: boolean isInitial()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.isInitial : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial>
dynoptic.model.fifosys.cfsm.fsm.FSMState.isInitial : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.isInitial : return $z0
dynoptic.model.fifosys.cfsm.fsm.FSMState.isInitial : return $z0 >>>>>>>> dynoptic.model.AbsFSMState$2.eval : return $z0
dynoptic.model.AbsFSMState$2.eval : return $z0 >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : if $z1 != 0
dynoptic.model.AbsFSMState.statesEvalToTrue : if $z1 != 0 >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.AbsFSMState.statesEvalToTrue : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> dynoptic.model.AbsFSMState.statesEvalToTrue : return 1
dynoptic.model.AbsFSMState.statesEvalToTrue : return 1 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.isAccept : return $z0
dynoptic.model.fifosys.cfsm.CFSMState.isAccept : return $z0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.isAcceptForPid : $z0 = <dynoptic.model.fifosys.cfsm.CFSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.cfsm.CFSMState.isAcceptForPid : $z0 = <dynoptic.model.fifosys.cfsm.CFSMState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.isAcceptForPid : if $z0 != 0
dynoptic.model.fifosys.cfsm.CFSMState.isAcceptForPid : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.isAcceptForPid : $r3 = r0.<dynoptic.model.fifosys.cfsm.CFSMState: java.util.List fsmStates>
dynoptic.model.fifosys.cfsm.CFSMState.isAcceptForPid : $r3 = r0.<dynoptic.model.fifosys.cfsm.CFSMState: java.util.List fsmStates> >>>>>>>> dynoptic.model.fifosys.cfsm.CFSMState.isAcceptForPid : $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(i0)
