dynoptic.model.export.DotExportFormatter.beginGraphString : return "digraph {\n" >>>>>>>> dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap
dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r1 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsInitialForPid>
dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r1 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsInitialForPid> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r3 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set getStatesThatEvalToTrueWithPid(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r2, $r1, i0)
dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r3 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set getStatesThatEvalToTrueWithPid(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r2, $r1, i0) >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>()
dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : if $z0 == 0
dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : return r2
dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : return r2 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : return $r3
dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : return $r3 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r2 = new java.lang.StringBuilder
dynoptic.model.export.DotExportFormatter.nodeToString : $r2 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label=\"")
dynoptic.model.export.DotExportFormatter.nodeToString : $r6 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("label=\"") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toString : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.toString : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toString : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>()
dynoptic.model.fifosys.gfsm.GFSMState.toString : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toString : return $r2
dynoptic.model.fifosys.gfsm.GFSMState.toString : return $r2 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r8 = staticinvoke <dynoptic.model.export.DotExportFormatter: java.lang.String quote(java.lang.String)>($r7)
dynoptic.model.export.DotExportFormatter.nodeToString : $r8 = staticinvoke <dynoptic.model.export.DotExportFormatter: java.lang.String quote(java.lang.String)>($r7) >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : $r1 = new java.lang.StringBuilder
dynoptic.model.export.GraphExportFormatter.quote : $r1 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : $i2 = virtualinvoke r0.<java.lang.String: int length()>()
dynoptic.model.export.GraphExportFormatter.quote : $i2 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : $i3 = $i2 + 2
dynoptic.model.export.GraphExportFormatter.quote : $i3 = $i2 + 2 >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i3)
dynoptic.model.export.GraphExportFormatter.quote : specialinvoke $r1.<java.lang.StringBuilder: void <init>(int)>($i3) >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : r2 = $r1
dynoptic.model.export.GraphExportFormatter.quote : r2 = $r1 >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : i0 = 0
dynoptic.model.export.GraphExportFormatter.quote : i0 = 0 >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : $i4 = virtualinvoke r0.<java.lang.String: int length()>()
dynoptic.model.export.GraphExportFormatter.quote : $i4 = virtualinvoke r0.<java.lang.String: int length()>() >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : if i0 >= $i4
dynoptic.model.export.GraphExportFormatter.quote : if i0 >= $i4 >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0)
dynoptic.model.export.GraphExportFormatter.quote : c1 = virtualinvoke r0.<java.lang.String: char charAt(int)>(i0) >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : lookupswitch(c1) {     case 34:
dynoptic.model.export.GraphExportFormatter.quote : lookupswitch(c1) {     case 34: >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1)
dynoptic.model.export.GraphExportFormatter.quote : virtualinvoke r2.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(c1) >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : i0 = i0 + 1
dynoptic.model.export.GraphExportFormatter.quote : i0 = i0 + 1 >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : goto [?= $i4 = virtualinvoke r0.<java.lang.String: int length()>()]
dynoptic.model.export.GraphExportFormatter.quote : goto [?= $i4 = virtualinvoke r0.<java.lang.String: int length()>()] >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.GraphExportFormatter.quote : $r6 = virtualinvoke r2.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.GraphExportFormatter.quote : return $r6
dynoptic.model.export.GraphExportFormatter.quote : return $r6 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8)
dynoptic.model.export.DotExportFormatter.nodeToString : $r9 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r8) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\",shape=circle")
dynoptic.model.export.DotExportFormatter.nodeToString : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\",shape=circle") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : r3 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : r4 = ""
dynoptic.model.export.DotExportFormatter.nodeToString : r4 = "" >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : if z0 == 0
dynoptic.model.export.DotExportFormatter.nodeToString : if z0 == 0 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r11 = new java.lang.StringBuilder
dynoptic.model.export.DotExportFormatter.nodeToString : $r11 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r11.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r11.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start_")
dynoptic.model.export.DotExportFormatter.nodeToString : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("start_") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $i1 = r0.<dynoptic.model.export.DotExportFormatter: int startStateCount>
dynoptic.model.export.DotExportFormatter.nodeToString : $i1 = r0.<dynoptic.model.export.DotExportFormatter: int startStateCount> >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
dynoptic.model.export.DotExportFormatter.nodeToString : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : r5 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : r5 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r14 = new java.lang.StringBuilder
dynoptic.model.export.DotExportFormatter.nodeToString : $r14 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ")
dynoptic.model.export.DotExportFormatter.nodeToString : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
dynoptic.model.export.DotExportFormatter.nodeToString : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [label=\"start\",shape=plaintext];\n")
dynoptic.model.export.DotExportFormatter.nodeToString : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [label=\"start\",shape=plaintext];\n") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r19 = new java.lang.StringBuilder
dynoptic.model.export.DotExportFormatter.nodeToString : $r19 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r19.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18)
dynoptic.model.export.DotExportFormatter.nodeToString : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r18) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ")
dynoptic.model.export.DotExportFormatter.nodeToString : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5)
dynoptic.model.export.DotExportFormatter.nodeToString : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r5) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->")
dynoptic.model.export.DotExportFormatter.nodeToString : $r23 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("->") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
dynoptic.model.export.DotExportFormatter.nodeToString : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";\n")
dynoptic.model.export.DotExportFormatter.nodeToString : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(";\n") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : r4 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : r4 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $i2 = r0.<dynoptic.model.export.DotExportFormatter: int startStateCount>
dynoptic.model.export.DotExportFormatter.nodeToString : $i2 = r0.<dynoptic.model.export.DotExportFormatter: int startStateCount> >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $i3 = $i2 + 1
dynoptic.model.export.DotExportFormatter.nodeToString : $i3 = $i2 + 1 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : r0.<dynoptic.model.export.DotExportFormatter: int startStateCount> = $i3
dynoptic.model.export.DotExportFormatter.nodeToString : r0.<dynoptic.model.export.DotExportFormatter: int startStateCount> = $i3 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : if z1 == 0
dynoptic.model.export.DotExportFormatter.nodeToString : if z1 == 0 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r30 = new java.lang.StringBuilder
dynoptic.model.export.DotExportFormatter.nodeToString : $r30 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r30.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r30.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ")
dynoptic.model.export.DotExportFormatter.nodeToString : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("  ") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
dynoptic.model.export.DotExportFormatter.nodeToString : $r32 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [")
dynoptic.model.export.DotExportFormatter.nodeToString : $r33 = virtualinvoke $r32.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" [") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
dynoptic.model.export.DotExportFormatter.nodeToString : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("];\n")
dynoptic.model.export.DotExportFormatter.nodeToString : $r35 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("];\n") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
dynoptic.model.export.DotExportFormatter.nodeToString : $r36 = virtualinvoke $r35.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : return $r37
dynoptic.model.export.DotExportFormatter.nodeToString : return $r37 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r1 = new java.lang.StringBuilder
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r1 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Part-")
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Part-") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $i0 = interfaceinvoke $r3.<java.util.Set: int size()>()
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $i0 = interfaceinvoke $r3.<java.util.Set: int size()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-")
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $i1 = virtualinvoke r0.<java.lang.Object: int hashCode()>()
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $i1 = virtualinvoke r0.<java.lang.Object: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : return $r7
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : return $r7 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r27 = new java.lang.StringBuilder
dynoptic.model.export.DotExportFormatter.nodeToString : $r27 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r27.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.export.DotExportFormatter.nodeToString : specialinvoke $r27.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
dynoptic.model.export.DotExportFormatter.nodeToString : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",shape=doublecircle")
dynoptic.model.export.DotExportFormatter.nodeToString : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(",shape=doublecircle") >>>>>>>> dynoptic.model.export.DotExportFormatter.nodeToString : r3 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.export.DotExportFormatter.nodeToString : r3 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions>
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : interfaceinvoke $r3.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : interfaceinvoke $r3.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : i0 = 0
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : i0 = 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: int numProcesses>
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: int numProcesses> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : if i0 >= $i1
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : if i0 >= $i1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r2 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsAcceptForPid>
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r2 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsAcceptForPid> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $z0 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: boolean atLeastOneStatePidEvalTrue(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r1, $r2, i0)
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $z0 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: boolean atLeastOneStatePidEvalTrue(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r1, $r2, i0) >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>()
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : if $z0 == 0
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : return 0
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : return 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : return 0
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : return 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId>
dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0)
dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : return $r1
dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : return $r1 >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.AbsFSMState.getNextStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : $r4 = virtualinvoke r0.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>()
dynoptic.model.AbsFSMState.getNextStates : $r4 = virtualinvoke r0.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions>
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>()
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : return $r2
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : return $r2 >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.AbsFSMState.getNextStates : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSMState.getNextStates : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : if $z0 == 0
dynoptic.model.AbsFSMState.getNextStates : if $z0 == 0 >>>>>>>> dynoptic.model.AbsFSMState.getNextStates : return r1
dynoptic.model.AbsFSMState.getNextStates : return r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : i0 = 0
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : i0 = 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: int numProcesses>
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: int numProcesses> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : if i0 >= $i1
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : if i0 >= $i1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $r2 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsInitialForPid>
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $r2 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsInitialForPid> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $z0 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: boolean atLeastOneStatePidEvalTrue(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r1, $r2, i0)
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : $z0 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: boolean atLeastOneStatePidEvalTrue(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r1, $r2, i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isInitial : return 0
dynoptic.model.fifosys.gfsm.GFSMState.isInitial : return 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : if $z1 == 0
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : $r1 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.AbsFSMState$IStateToBooleanFn fnIsAcceptState>
dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : $r1 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.AbsFSMState$IStateToBooleanFn fnIsAcceptState> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : $r3 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set getStatesThatEvalToTrue(java.util.Set,dynoptic.model.AbsFSMState$IStateToBooleanFn)>($r2, $r1)
dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : $r3 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set getStatesThatEvalToTrue(java.util.Set,dynoptic.model.AbsFSMState$IStateToBooleanFn)>($r2, $r1) >>>>>>>> dynoptic.model.AbsFSMState.getStatesThatEvalToTrue : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.AbsFSMState.getStatesThatEvalToTrue : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.AbsFSMState.getStatesThatEvalToTrue : r3 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.AbsFSMState.getStatesThatEvalToTrue : r3 = interfaceinvoke r0.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSMState.getStatesThatEvalToTrue : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSMState.getStatesThatEvalToTrue : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSMState.getStatesThatEvalToTrue : if $z0 == 0
dynoptic.model.AbsFSMState.getStatesThatEvalToTrue : if $z0 == 0 >>>>>>>> dynoptic.model.AbsFSMState.getStatesThatEvalToTrue : return r2
dynoptic.model.AbsFSMState.getStatesThatEvalToTrue : return r2 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : return $r3
dynoptic.model.fifosys.gfsm.GFSMState.getTerminalObs : return $r3 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.retainAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.retainAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.retainAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean retainAll(java.util.Collection)>(r1)
dynoptic.model.alphabet.FSMAlphabet.retainAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean retainAll(java.util.Collection)>(r1) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.retainAll : return $z0
dynoptic.model.alphabet.FSMAlphabet.retainAll : return $z0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toString : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.toString : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toString : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>()
dynoptic.model.alphabet.FSMAlphabet.toString : $r2 = virtualinvoke $r1.<java.lang.Object: java.lang.String toString()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toString : return $r2
dynoptic.model.alphabet.FSMAlphabet.toString : return $r2 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.addAllObs : r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSMState.addAllObs : r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.iterator : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.iterator : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.iterator : $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.alphabet.FSMAlphabet.iterator : $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.iterator : return $r2
dynoptic.model.alphabet.FSMAlphabet.iterator : return $r2 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.addAllObs : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSMState.addAllObs : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.addAllObs : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSMState.addAllObs : if $z0 == 0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.isEmpty : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.isEmpty : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.isEmpty : $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>()
dynoptic.model.alphabet.FSMAlphabet.isEmpty : $z0 = interfaceinvoke $r1.<java.util.Set: boolean isEmpty()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.isEmpty : return $z0
dynoptic.model.alphabet.FSMAlphabet.isEmpty : return $z0 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>()
dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>()
dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states>
dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0
dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : $r4 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : $r4 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : if $z0 == 0
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : if $z0 == 0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : return r1
