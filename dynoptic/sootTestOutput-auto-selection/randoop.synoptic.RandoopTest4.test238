dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.isAccept : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept>
dynoptic.model.fifosys.cfsm.fsm.FSMState.isAccept : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.isAccept : return $z0
dynoptic.model.fifosys.cfsm.fsm.FSMState.isAccept : return $z0 >>>>>>>> dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toScmParametersString : r1 = ""
dynoptic.model.alphabet.FSMAlphabet.toScmParametersString : r1 = "" >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toScmParametersString : $r4 = specialinvoke r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set getUniqueEventStrings(synoptic.model.event.IDistEventType)>(null)
dynoptic.model.alphabet.FSMAlphabet.toScmParametersString : $r4 = specialinvoke r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set getUniqueEventStrings(synoptic.model.event.IDistEventType)>(null) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getUniqueEventStrings : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.alphabet.FSMAlphabet.getUniqueEventStrings : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getUniqueEventStrings : $r5 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.getUniqueEventStrings : $r5 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getUniqueEventStrings : r3 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.alphabet.FSMAlphabet.getUniqueEventStrings : r3 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getUniqueEventStrings : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.alphabet.FSMAlphabet.getUniqueEventStrings : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getUniqueEventStrings : if $z0 == 0
dynoptic.model.alphabet.FSMAlphabet.getUniqueEventStrings : if $z0 == 0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getUniqueEventStrings : return r2
dynoptic.model.alphabet.FSMAlphabet.getUniqueEventStrings : return r2 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toScmParametersString : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.alphabet.FSMAlphabet.toScmParametersString : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toScmParametersString : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.alphabet.FSMAlphabet.toScmParametersString : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toScmParametersString : if $z0 == 0
dynoptic.model.alphabet.FSMAlphabet.toScmParametersString : if $z0 == 0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toScmParametersString : return r1
dynoptic.model.alphabet.FSMAlphabet.toScmParametersString : return r1 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.size : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.size : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.size : $i0 = interfaceinvoke $r1.<java.util.Set: int size()>()
dynoptic.model.alphabet.FSMAlphabet.size : $i0 = interfaceinvoke $r1.<java.util.Set: int size()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.size : return $i0
dynoptic.model.alphabet.FSMAlphabet.size : return $i0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : if r1 != r0
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : if r1 != r0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.cfsm.fsm.FSMState
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.cfsm.fsm.FSMState >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : if $z0 != 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : return 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.equals : return 0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.toArray : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : $r2 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray()>()
dynoptic.model.alphabet.FSMAlphabet.toArray : $r2 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : return $r2
dynoptic.model.alphabet.FSMAlphabet.toArray : return $r2 >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : $r1 = r0.<dynoptic.model.automaton.EventTypeEncodings: java.util.Map charEncodings>
dynoptic.model.automaton.EventTypeEncodings.getEventType : $r1 = r0.<dynoptic.model.automaton.EventTypeEncodings: java.util.Map charEncodings> >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0)
dynoptic.model.automaton.EventTypeEncodings.getEventType : $r2 = staticinvoke <java.lang.Character: java.lang.Character valueOf(char)>(c0) >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2)
dynoptic.model.automaton.EventTypeEncodings.getEventType : $z0 = interfaceinvoke $r1.<java.util.Map: boolean containsKey(java.lang.Object)>($r2) >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : if $z0 != 0
dynoptic.model.automaton.EventTypeEncodings.getEventType : if $z0 != 0 >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : $r3 = new java.lang.IllegalArgumentException
dynoptic.model.automaton.EventTypeEncodings.getEventType : $r3 = new java.lang.IllegalArgumentException >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The passed char has not been mapped to an event type.")
dynoptic.model.automaton.EventTypeEncodings.getEventType : specialinvoke $r3.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>("The passed char has not been mapped to an event type.") >>>>>>>> dynoptic.model.automaton.EventTypeEncodings.getEventType : throw $r3
