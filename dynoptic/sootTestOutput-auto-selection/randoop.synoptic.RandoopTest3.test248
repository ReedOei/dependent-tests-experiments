dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap
dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r1 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsInitialForPid>
dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r1 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsInitialForPid> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r3 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set getStatesThatEvalToTrueWithPid(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r2, $r1, i0)
dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r3 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set getStatesThatEvalToTrueWithPid(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r2, $r1, i0) >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>()
dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : if $z0 == 0
dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : return r2
dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : return r2 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : return $r3
dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : return $r3 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : if $z1 == 0
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions>
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMState: void recreateCachedTransitions()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMState: void recreateCachedTransitions()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions>
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : interfaceinvoke $r3.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : interfaceinvoke $r3.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions>
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : return $r3
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : return $r3 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : i0 = 0
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : i0 = 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: int numProcesses>
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: int numProcesses> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : if i0 >= $i1
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : if i0 >= $i1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r2 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsAcceptForPid>
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r2 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsAcceptForPid> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $z0 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: boolean atLeastOneStatePidEvalTrue(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r1, $r2, i0)
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $z0 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: boolean atLeastOneStatePidEvalTrue(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r1, $r2, i0) >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>()
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : if $z0 == 0
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : return 0
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : return 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : return 0
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : return 0 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.numEvents : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.List events>
dynoptic.model.fifosys.gfsm.GFSMPath.numEvents : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMPath: java.util.List events> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.numEvents : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
dynoptic.model.fifosys.gfsm.GFSMPath.numEvents : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMPath.numEvents : return $i0
