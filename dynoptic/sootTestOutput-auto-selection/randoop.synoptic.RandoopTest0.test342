dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap >>>>>>>> dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>()
dynoptic.util.Util.newMap : specialinvoke $r0.<java.util.LinkedHashMap: void <init>()>() >>>>>>>> dynoptic.util.Util.newMap : return $r0
dynoptic.util.Util.newMap : return $r0 >>>>>>>> dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet >>>>>>>> dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>()
dynoptic.util.Util.newSet : specialinvoke $r0.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> dynoptic.util.Util.newSet : return $r0
dynoptic.util.Util.newSet : return $r0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r1 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsInitialForPid>
dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r1 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsInitialForPid> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r3 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set getStatesThatEvalToTrueWithPid(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r2, $r1, i0)
dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : $r3 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set getStatesThatEvalToTrueWithPid(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r2, $r1, i0) >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : r2 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>()
dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : if $z0 == 0
dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : return r2
dynoptic.model.fifosys.AbsMultiFSMState.getStatesThatEvalToTrueWithPid : return r2 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : return $r3
dynoptic.model.fifosys.gfsm.GFSMState.getInitialObsForPid : return $r3 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : $z0 = <dynoptic.model.fifosys.gfsm.GFSMState: boolean $assertionsDisabled> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : if $z1 == 0
dynoptic.model.fifosys.gfsm.GFSMState.removeAllObs : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : b0 = 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : b0 = 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i1 = b0 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i1 = b0 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isAccept> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z0 == 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b2 = 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b2 = 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i3 = $i1 + $b2
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i3 = $i1 + $b2 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i4 = i3 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i4 = i3 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $z1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z1 == 0
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : if $z1 == 0 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b5 = 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $b5 = 1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i6 = $i4 + $b5]
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : goto [?= i6 = $i4 + $b5] >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i6 = $i4 + $b5
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i6 = $i4 + $b5 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i7 = i6 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i7 = i6 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i8 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int pid>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i8 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int pid> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i9 = $i7 + $i8
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i9 = $i7 + $i8 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i10 = i9 * 31
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i10 = i9 * 31 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i11 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId>
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : $i11 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i12 = $i10 + $i11
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : i12 = $i10 + $i11 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : return 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.hashCode : return 1 >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.recomputeAlphabet : $r4 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>()
dynoptic.model.AbsFSM.recomputeAlphabet : virtualinvoke $r4.<dynoptic.model.alphabet.FSMAlphabet: void clear()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.clear : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>()
dynoptic.model.alphabet.FSMAlphabet.clear : interfaceinvoke $r1.<java.util.Set: void clear()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states>
dynoptic.model.AbsFSM.recomputeAlphabet : $r5 = r0.<dynoptic.model.AbsFSM: java.util.Set states> >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.AbsFSM.recomputeAlphabet : r1 = interfaceinvoke $r5.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSM.recomputeAlphabet : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0
dynoptic.model.AbsFSM.recomputeAlphabet : if $z0 == 0 >>>>>>>> dynoptic.model.AbsFSM.getAcceptStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set acceptStates>
dynoptic.model.AbsFSM.getAcceptStates : $r1 = r0.<dynoptic.model.AbsFSM: java.util.Set acceptStates> >>>>>>>> dynoptic.model.AbsFSM.getAcceptStates : return $r1
dynoptic.model.AbsFSM.getAcceptStates : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getStates : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set states>
dynoptic.model.fifosys.cfsm.fsm.FSM.getStates : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.getStates : return $r1
dynoptic.model.fifosys.cfsm.fsm.FSM.getStates : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r1 = new java.lang.StringBuilder
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r1 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FSM[pid=")
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("FSM[pid=") >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: int pid>
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: int pid> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]")
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("]") >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : r2 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r6 = new java.lang.StringBuilder
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r6 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tstates: ")
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tstates: ") >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r9 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set states>
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r9 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set states> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10)
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r11 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r10) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r13 = new java.lang.StringBuilder
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r13 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : specialinvoke $r13.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12)
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r12) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tinits: ")
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\tinits: ") >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r16 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set initStates>
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r16 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set initStates> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r17 = virtualinvoke $r16.<java.lang.Object: java.lang.String toString()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r17 = virtualinvoke $r16.<java.lang.Object: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toString : $r1 = virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.lang.String toShortIntString()>()
dynoptic.model.fifosys.cfsm.fsm.FSMState.toString : $r1 = virtualinvoke r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.lang.String toShortIntString()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId>
dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : $i0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: int scmId> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0)
dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : $r1 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>($i0) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : return $r1
dynoptic.model.fifosys.cfsm.fsm.FSMState.toShortIntString : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.toString : return $r1
dynoptic.model.fifosys.cfsm.fsm.FSMState.toString : return $r1 >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17)
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r18 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r17) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r20 = new java.lang.StringBuilder
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r20 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : specialinvoke $r20.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : specialinvoke $r20.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19)
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r19) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\taccepts: ")
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("\n\taccepts: ") >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r23 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set acceptStates>
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r23 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSM: java.util.Set acceptStates> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r24 = virtualinvoke $r23.<java.lang.Object: java.lang.String toString()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r24 = virtualinvoke $r23.<java.lang.Object: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24)
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : $r25 = virtualinvoke $r22.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r24) >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSM.toString : return r26
dynoptic.model.fifosys.cfsm.fsm.FSM.toString : return r26 >>>>>>>> dynoptic.model.AbsFSM.getAlphabet : $r1 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet>
dynoptic.model.AbsFSM.getAlphabet : $r1 = r0.<dynoptic.model.AbsFSM: dynoptic.model.alphabet.FSMAlphabet alphabet> >>>>>>>> dynoptic.model.AbsFSM.getAlphabet : return $r1
dynoptic.model.AbsFSM.getAlphabet : return $r1 >>>>>>>> dynoptic.model.AbsFSMState.findNonPidTransitiveClosure : interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r0)
dynoptic.model.AbsFSMState.findNonPidTransitiveClosure : interfaceinvoke r1.<java.util.Set: boolean add(java.lang.Object)>(r0) >>>>>>>> dynoptic.model.AbsFSMState.findNonPidTransitiveClosure : $r8 = virtualinvoke r0.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>()
dynoptic.model.AbsFSMState.findNonPidTransitiveClosure : $r8 = virtualinvoke r0.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions>
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>()
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : return $r2
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : return $r2 >>>>>>>> dynoptic.model.AbsFSMState.findNonPidTransitiveClosure : r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.AbsFSMState.findNonPidTransitiveClosure : r3 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.AbsFSMState.findNonPidTransitiveClosure : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.AbsFSMState.findNonPidTransitiveClosure : $z1 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.AbsFSMState.findNonPidTransitiveClosure : if $z1 == 0
dynoptic.model.AbsFSMState.findNonPidTransitiveClosure : if $z1 == 0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.retainAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.retainAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.retainAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean retainAll(java.util.Collection)>(r1)
dynoptic.model.alphabet.FSMAlphabet.retainAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean retainAll(java.util.Collection)>(r1) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.retainAll : return $z0
dynoptic.model.alphabet.FSMAlphabet.retainAll : return $z0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.toArray : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : $r2 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray()>()
dynoptic.model.alphabet.FSMAlphabet.toArray : $r2 = interfaceinvoke $r1.<java.util.Set: java.lang.Object[] toArray()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.toArray : return $r2
dynoptic.model.alphabet.FSMAlphabet.toArray : return $r2 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.iterator : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.iterator : $r1 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.iterator : $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.alphabet.FSMAlphabet.iterator : $r2 = interfaceinvoke $r1.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.iterator : return $r2
dynoptic.model.alphabet.FSMAlphabet.iterator : return $r2 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r1 = new java.lang.StringBuilder
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r1 = new java.lang.StringBuilder >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Part-")
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r2 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Part-") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $i0 = interfaceinvoke $r3.<java.util.Set: int size()>()
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $i0 = interfaceinvoke $r3.<java.util.Set: int size()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0)
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i0) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-")
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("-") >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $i1 = virtualinvoke r0.<java.lang.Object: int hashCode()>()
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $i1 = virtualinvoke r0.<java.lang.Object: int hashCode()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1)
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>($i1) >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : return $r7
dynoptic.model.fifosys.gfsm.GFSMState.toIntermediateString : return $r7 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : i0 = 0
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : i0 = 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: int numProcesses>
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $i1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: int numProcesses> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : if i0 >= $i1
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : if i0 >= $i1 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r2 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsAcceptForPid>
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $r2 = <dynoptic.model.fifosys.gfsm.GFSMState: dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn fnIsAcceptForPid> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $z0 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: boolean atLeastOneStatePidEvalTrue(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r1, $r2, i0)
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : $z0 = staticinvoke <dynoptic.model.fifosys.gfsm.GFSMState: boolean atLeastOneStatePidEvalTrue(java.util.Collection,dynoptic.model.fifosys.AbsMultiFSMState$IStatePidToBooleanFn,int)>($r1, $r2, i0) >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>()
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : if $z0 == 0
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : return 0
dynoptic.model.fifosys.AbsMultiFSMState.atLeastOneStatePidEvalTrue : return 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : if $z0 != 0
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.isAccept : return 0
dynoptic.model.fifosys.gfsm.GFSMState.isAccept : return 0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.contains : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.contains : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.contains : $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1)
dynoptic.model.alphabet.FSMAlphabet.contains : $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.contains : return $z0
dynoptic.model.alphabet.FSMAlphabet.contains : return $z0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : $r4 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : $r4 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : r2 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : if $z0 == 0
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : if $z0 == 0 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : return r1
dynoptic.model.alphabet.FSMAlphabet.getLocalEventScmStrings : return r1 >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events>
dynoptic.model.alphabet.FSMAlphabet.addAll : $r2 = r0.<dynoptic.model.alphabet.FSMAlphabet: java.util.Set events> >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1)
dynoptic.model.alphabet.FSMAlphabet.addAll : $z0 = interfaceinvoke $r2.<java.util.Set: boolean addAll(java.util.Collection)>(r1) >>>>>>>> dynoptic.model.alphabet.FSMAlphabet.addAll : return $z0
dynoptic.model.alphabet.FSMAlphabet.addAll : return $z0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState : $r1 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState : $r1 = new dynoptic.model.fifosys.gfsm.observed.ObsFSMState >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState : specialinvoke $r1.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: void <init>(int,boolean,boolean,java.lang.String,boolean)>(i0, z0, z1, r0, 0)
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState : specialinvoke $r1.<dynoptic.model.fifosys.gfsm.observed.ObsFSMState: void <init>(int,boolean,boolean,java.lang.String,boolean)>(i0, z0, z1, r0, 0) >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState : return $r1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.namedObsFSMState : return $r1 >>>>>>>> dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>()
dynoptic.util.Util.newList : specialinvoke $r0.<java.util.ArrayList: void <init>()>() >>>>>>>> dynoptic.util.Util.newList : return $r0
dynoptic.util.Util.newList : return $r0 >>>>>>>> dynoptic.util.Util.newList : $r1 = new java.util.ArrayList
dynoptic.util.Util.newList : $r1 = new java.util.ArrayList >>>>>>>> dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0)
dynoptic.util.Util.newList : specialinvoke $r1.<java.util.ArrayList: void <init>(java.util.Collection)>(r0) >>>>>>>> dynoptic.util.Util.newList : return $r1
dynoptic.util.Util.newList : return $r1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if r1 != null
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if r1 != null >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if r0 != r1
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if r0 != r1 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.gfsm.observed.ObsFSMState
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : $z0 = r1 instanceof dynoptic.model.fifosys.gfsm.observed.ObsFSMState >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if $z0 != 0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : if $z0 != 0 >>>>>>>> dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : return 0
dynoptic.model.fifosys.gfsm.observed.ObsFSMState.equals : return 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions>
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $z0 = interfaceinvoke $r1.<java.util.Map: boolean isEmpty()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMState: void recreateCachedTransitions()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : virtualinvoke r0.<dynoptic.model.fifosys.gfsm.GFSMState: void recreateCachedTransitions()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions>
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r3 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : interfaceinvoke $r3.<java.util.Map: void clear()>()
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : interfaceinvoke $r3.<java.util.Map: void clear()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates>
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $r4 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Set observedStates> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : r1 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : if $z0 == 0
dynoptic.model.fifosys.gfsm.GFSMState.recreateCachedTransitions : if $z0 == 0 >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions>
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r2 = r0.<dynoptic.model.fifosys.gfsm.GFSMState: java.util.Map transitions> >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>()
dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Set keySet()>() >>>>>>>> dynoptic.model.fifosys.gfsm.GFSMState.getTransitioningEvents : return $r3
