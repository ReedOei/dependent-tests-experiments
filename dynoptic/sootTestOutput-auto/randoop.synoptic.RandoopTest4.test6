dynoptic.model.AbsFSMState$2.eval : $z0 = virtualinvoke r1.<dynoptic.model.AbsFSMState: boolean isInitial()>()
dynoptic.model.AbsFSMState$2.eval : $r2 = (dynoptic.model.AbsFSMState) r1
dynoptic.model.AbsFSMState.getNextStates : r1 = staticinvoke <dynoptic.util.Util: java.util.Set newSet()>()
dynoptic.model.AbsFSMState.getNextStates : $r4 = virtualinvoke r0.<dynoptic.model.AbsFSMState: java.util.Set getTransitioningEvents()>()
dynoptic.model.AbsFSMState.getNextStates : return r1
dynoptic.model.fifosys.cfsm.CFSMState.isAccept : $r2 = r0.<dynoptic.model.fifosys.cfsm.CFSMState: java.util.List fsmStates>
dynoptic.util.Util.newSet : $r0 = new java.util.LinkedHashSet
dynoptic.model.fifosys.cfsm.CFSMState.isAcceptForPid : $z0 = <dynoptic.model.fifosys.cfsm.CFSMState: boolean $assertionsDisabled>
dynoptic.model.fifosys.cfsm.CFSMState.isAcceptForPid : $r3 = r0.<dynoptic.model.fifosys.cfsm.CFSMState: java.util.List fsmStates>
dynoptic.model.AbsFSMState.statesEvalToTrue : r2 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>()
dynoptic.model.AbsFSMState.statesEvalToTrue : $z1 = interfaceinvoke r1.<dynoptic.model.AbsFSMState$IStateToBooleanFn: boolean eval(java.lang.Object)>(r3)
dynoptic.model.AbsFSMState.statesEvalToTrue : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
dynoptic.model.AbsFSMState.statesEvalToTrue : return 1
dynoptic.model.fifosys.cfsm.fsm.FSMState.isInitial : $z0 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: boolean isInitial>
dynoptic.util.Util.newList : $r0 = new java.util.ArrayList
dynoptic.util.Util.newMap : $r0 = new java.util.LinkedHashMap
dynoptic.model.fifosys.cfsm.fsm.FSMState.getTransitioningEvents : $r1 = r0.<dynoptic.model.fifosys.cfsm.fsm.FSMState: java.util.Map transitions>
