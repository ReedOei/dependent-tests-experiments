com.thoughtworks.xstream.io.xml.XppDomWriter.underlyingWriter : return r0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.reassignCurrentElement : $r2 = (org.jdom.Element) r1
com.thoughtworks.xstream.io.xml.JDomReader.reassignCurrentElement : $r2 = (org.jdom.Element) r1 >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.reassignCurrentElement : r0.<com.thoughtworks.xstream.io.xml.JDomReader: org.jdom.Element currentElement> = $r2
com.thoughtworks.xstream.io.xml.JDomReader.reassignCurrentElement : r0.<com.thoughtworks.xstream.io.xml.JDomReader: org.jdom.Element currentElement> = $r2 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.get : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>()
com.thoughtworks.xstream.core.TreeMarshaller.get : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>()
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.get : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.get : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.get : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.converters.DataHolder: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.TreeMarshaller.get : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.converters.DataHolder: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.get : $r2 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map>
com.thoughtworks.xstream.core.MapBackedDataHolder.get : $r2 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.get : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.MapBackedDataHolder.get : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.get : return $r3
com.thoughtworks.xstream.core.MapBackedDataHolder.get : return $r3 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.get : return $r3
com.thoughtworks.xstream.core.TreeMarshaller.get : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.XmlFriendlyMapper.mapNameToXML : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.mapper.XmlFriendlyMapper: java.lang.String escapeFieldName(java.lang.String)>(r1)
com.thoughtworks.xstream.mapper.XmlFriendlyMapper.mapNameToXML : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.mapper.XmlFriendlyMapper: java.lang.String escapeFieldName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : r3 = $r2
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : i1 = 0
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : if i1 >= i0
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : return $r9
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : return $r9 >>>>>>>> com.thoughtworks.xstream.mapper.XmlFriendlyMapper.mapNameToXML : return $r2
com.thoughtworks.xstream.mapper.XmlFriendlyMapper.mapNameToXML : return $r2 >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1)
com.thoughtworks.xstream.core.util.Fields.find : r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1)
com.thoughtworks.xstream.core.util.Fields.find : virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1) >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : return r2
com.thoughtworks.xstream.core.util.Fields.find : return r2 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r6 = virtualinvoke r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.mapper.Mapper getMapper()>()
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r6 = virtualinvoke r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.mapper.Mapper getMapper()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.getMapper : $r1 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.core.TreeMarshaller.getMapper : $r1 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.getMapper : return $r1
com.thoughtworks.xstream.core.TreeMarshaller.getMapper : return $r1 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $z0 = interfaceinvoke $r6.<com.thoughtworks.xstream.mapper.Mapper: boolean isImmutableValueType(java.lang.Class)>($r7)
