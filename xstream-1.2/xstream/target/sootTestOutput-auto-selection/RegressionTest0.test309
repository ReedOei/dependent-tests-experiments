com.thoughtworks.xstream.io.xml.SaxWriter.underlyingWriter : return r0 >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.StatefulWriter: void checkClosed()>()
com.thoughtworks.xstream.io.StatefulWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.StatefulWriter: void checkClosed()>() >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.checkClosed : $i1 = r0.<com.thoughtworks.xstream.io.StatefulWriter: int state>
com.thoughtworks.xstream.io.StatefulWriter.checkClosed : $i1 = r0.<com.thoughtworks.xstream.io.StatefulWriter: int state> >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.checkClosed : $i0 = <com.thoughtworks.xstream.io.StatefulWriter: int STATE_CLOSED>
com.thoughtworks.xstream.io.StatefulWriter.checkClosed : $i0 = <com.thoughtworks.xstream.io.StatefulWriter: int STATE_CLOSED> >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.checkClosed : if $i1 != $i0
com.thoughtworks.xstream.io.StatefulWriter.checkClosed : if $i1 != $i0 >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.setValue : $i1 = r0.<com.thoughtworks.xstream.io.StatefulWriter: int state>
com.thoughtworks.xstream.io.StatefulWriter.setValue : $i1 = r0.<com.thoughtworks.xstream.io.StatefulWriter: int state> >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.setValue : $i0 = <com.thoughtworks.xstream.io.StatefulWriter: int STATE_NODE_START>
com.thoughtworks.xstream.io.StatefulWriter.setValue : $i0 = <com.thoughtworks.xstream.io.StatefulWriter: int STATE_NODE_START> >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.setValue : if $i1 == $i0
com.thoughtworks.xstream.io.StatefulWriter.setValue : if $i1 == $i0 >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.setValue : $i2 = <com.thoughtworks.xstream.io.StatefulWriter: int STATE_VALUE>
com.thoughtworks.xstream.io.StatefulWriter.setValue : $i2 = <com.thoughtworks.xstream.io.StatefulWriter: int STATE_VALUE> >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.setValue : r0.<com.thoughtworks.xstream.io.StatefulWriter: int state> = $i2
com.thoughtworks.xstream.io.StatefulWriter.setValue : r0.<com.thoughtworks.xstream.io.StatefulWriter: int state> = $i2 >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.WriterWrapper: void setValue(java.lang.String)>(r1)
com.thoughtworks.xstream.io.StatefulWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.WriterWrapper: void setValue(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.WriterWrapper.setValue : $r2 = r0.<com.thoughtworks.xstream.io.WriterWrapper: com.thoughtworks.xstream.io.HierarchicalStreamWriter wrapped>
com.thoughtworks.xstream.io.WriterWrapper.setValue : $r2 = r0.<com.thoughtworks.xstream.io.WriterWrapper: com.thoughtworks.xstream.io.HierarchicalStreamWriter wrapped> >>>>>>>> com.thoughtworks.xstream.io.WriterWrapper.setValue : interfaceinvoke $r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void setValue(java.lang.String)>(r1)
com.thoughtworks.xstream.io.WriterWrapper.setValue : interfaceinvoke $r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void setValue(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.xml.SaxWriter: void flushStartTag()>()
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.xml.SaxWriter: void flushStartTag()>() >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.flushStartTag : $z0 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: boolean startTagInProgress>
com.thoughtworks.xstream.io.xml.SaxWriter.flushStartTag : $z0 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: boolean startTagInProgress> >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.flushStartTag : if $z0 == 0
com.thoughtworks.xstream.io.xml.SaxWriter.flushStartTag : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $r2 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: char[] buffer>
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $r2 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $i1 = lengthof $r2
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $i1 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : if i0 <= $i1
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : if i0 <= $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $r4 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: char[] buffer>
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $r4 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r4, 0)
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r4, 0) >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $r5 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: org.xml.sax.ContentHandler contentHandler>
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $r5 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: org.xml.sax.ContentHandler contentHandler> >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $r6 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: char[] buffer>
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $r6 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : interfaceinvoke $r5.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r6, 0, i0)
