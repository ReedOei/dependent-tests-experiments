com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : $r2 = <com.thoughtworks.xstream.core.util.CustomObjectInputStream: java.lang.String DATA_HOLDER_KEY> >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : $r4 = interfaceinvoke r0.<com.thoughtworks.xstream.converters.DataHolder: java.lang.Object get(java.lang.Object)>($r2)
com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : $r4 = interfaceinvoke r0.<com.thoughtworks.xstream.converters.DataHolder: java.lang.Object get(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.get : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>()
com.thoughtworks.xstream.core.TreeMarshaller.get : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>()
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.get : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.get : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.get : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.converters.DataHolder: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.TreeMarshaller.get : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.converters.DataHolder: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.get : $r2 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map>
com.thoughtworks.xstream.core.MapBackedDataHolder.get : $r2 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.get : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.MapBackedDataHolder.get : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.get : return $r3
com.thoughtworks.xstream.core.MapBackedDataHolder.get : return $r3 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.get : return $r3
com.thoughtworks.xstream.core.TreeMarshaller.get : return $r3 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : r3 = (com.thoughtworks.xstream.core.util.CustomObjectInputStream) $r4
com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : r3 = (com.thoughtworks.xstream.core.util.CustomObjectInputStream) $r4 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : if r3 != null
com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : if r3 != null >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : $r5 = new com.thoughtworks.xstream.core.util.CustomObjectInputStream
com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : $r5 = new com.thoughtworks.xstream.core.util.CustomObjectInputStream >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : specialinvoke $r5.<com.thoughtworks.xstream.core.util.CustomObjectInputStream: void <init>(com.thoughtworks.xstream.core.util.CustomObjectInputStream$StreamCallback)>(r1)
com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : specialinvoke $r5.<com.thoughtworks.xstream.core.util.CustomObjectInputStream: void <init>(com.thoughtworks.xstream.core.util.CustomObjectInputStream$StreamCallback)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i4 = lengthof $r3
com.thoughtworks.xstream.core.util.FastStack.push : $i4 = lengthof $r3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i5 = $i4 * 2
com.thoughtworks.xstream.core.util.FastStack.push : $i5 = $i4 * 2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : specialinvoke r0.<com.thoughtworks.xstream.core.util.FastStack: void resizeStack(int)>($i5)
com.thoughtworks.xstream.core.util.FastStack.push : specialinvoke r0.<com.thoughtworks.xstream.core.util.FastStack: void resizeStack(int)>($i5) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : r1 = newarray (java.lang.Object)[i0]
com.thoughtworks.xstream.core.util.FastStack.resizeStack : r1 = newarray (java.lang.Object)[i0] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.resizeStack : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0)
com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i2)
com.thoughtworks.xstream.core.util.FastStack.resizeStack : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i2) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> = r1
com.thoughtworks.xstream.core.util.FastStack.resizeStack : r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : r3 = $r5
com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : r3 = $r5 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : $r6 = <com.thoughtworks.xstream.core.util.CustomObjectInputStream: java.lang.String DATA_HOLDER_KEY>
com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : $r6 = <com.thoughtworks.xstream.core.util.CustomObjectInputStream: java.lang.String DATA_HOLDER_KEY> >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : interfaceinvoke r0.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>($r6, r3)
com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : interfaceinvoke r0.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>($r6, r3) >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>()
com.thoughtworks.xstream.core.TreeMarshaller.put : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.put : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : interfaceinvoke $r3.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.TreeMarshaller.put : interfaceinvoke $r3.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.put : $r3 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map>
com.thoughtworks.xstream.core.MapBackedDataHolder.put : $r3 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.MapBackedDataHolder.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : goto [?= return r3]
com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : goto [?= return r3] >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : return r3
com.thoughtworks.xstream.core.util.CustomObjectInputStream.getInstance : return r3 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.createReader : $r2 = new java.io.InputStreamReader
com.thoughtworks.xstream.io.xml.XppDriver.createReader : $r2 = new java.io.InputStreamReader >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.createReader : specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r1)
com.thoughtworks.xstream.io.xml.XppDriver.createReader : specialinvoke $r2.<java.io.InputStreamReader: void <init>(java.io.InputStream)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.createReader : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDriver: com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)>($r2)
com.thoughtworks.xstream.io.xml.XppDriver.createReader : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDriver: com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)>($r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.createReader : specialinvoke r0.<com.thoughtworks.xstream.io.xml.XppDriver: void loadLibrary()>()
com.thoughtworks.xstream.io.xml.XppDriver.createReader : specialinvoke r0.<com.thoughtworks.xstream.io.xml.XppDriver: void loadLibrary()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.loadLibrary : $z0 = <com.thoughtworks.xstream.io.xml.XppDriver: boolean xppLibraryPresent>
com.thoughtworks.xstream.io.xml.XppDriver.loadLibrary : $z0 = <com.thoughtworks.xstream.io.xml.XppDriver: boolean xppLibraryPresent> >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.loadLibrary : if $z0 != 0
com.thoughtworks.xstream.io.xml.XppDriver.loadLibrary : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.createReader : $r2 = new com.thoughtworks.xstream.io.xml.XppReader
com.thoughtworks.xstream.io.xml.XppDriver.createReader : $r2 = new com.thoughtworks.xstream.io.xml.XppReader >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.createReader : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer xmlFriendlyReplacer()>()
com.thoughtworks.xstream.io.xml.XppDriver.createReader : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer xmlFriendlyReplacer()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : return $r1
com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.createReader : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.XppReader: void <init>(java.io.Reader,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)>(r1, $r3)
com.thoughtworks.xstream.io.xml.XppDriver.createReader : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.XppReader: void <init>(java.io.Reader,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)>(r1, $r3) >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.createParser : $r1 = new org.xmlpull.mxp1.MXParser
com.thoughtworks.xstream.io.xml.XppReader.createParser : $r1 = new org.xmlpull.mxp1.MXParser >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.createParser : specialinvoke $r1.<org.xmlpull.mxp1.MXParser: void <init>()>()
com.thoughtworks.xstream.io.xml.XppReader.createParser : specialinvoke $r1.<org.xmlpull.mxp1.MXParser: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.createParser : return $r1
com.thoughtworks.xstream.io.xml.XppReader.createParser : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.size : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.size : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.size : return $i0
com.thoughtworks.xstream.core.util.FastStack.size : return $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i1 > i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i1 > i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z0 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z0 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z0 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r11 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r11 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : if $i0 <= 0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : if $i0 <= 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : return $z0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : return $z0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z2 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r15 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r15 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r1 = new com.thoughtworks.xstream.io.xml.AbstractPullReader$Event
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r1 = new com.thoughtworks.xstream.io.xml.AbstractPullReader$Event >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : specialinvoke $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: void <init>(com.thoughtworks.xstream.io.xml.AbstractPullReader$1)>(null)
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : specialinvoke $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: void <init>(com.thoughtworks.xstream.io.xml.AbstractPullReader$1)>(null) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2 = $r1
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2 = $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i0 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: int pullNextEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i0 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: int pullNextEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $i0 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int next()>()
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $i0 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int next()>() >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectInputStream.read : $r2 = new java.lang.UnsupportedOperationException
com.thoughtworks.xstream.core.util.CustomObjectInputStream.read : $r2 = new java.lang.UnsupportedOperationException >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectInputStream.read : specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>()
com.thoughtworks.xstream.core.util.CustomObjectInputStream.read : specialinvoke $r2.<java.lang.UnsupportedOperationException: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectInputStream.read : throw $r2
