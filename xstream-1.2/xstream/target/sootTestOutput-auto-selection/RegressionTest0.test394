com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i4 = lengthof $r3
com.thoughtworks.xstream.core.util.FastStack.push : $i4 = lengthof $r3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i5 = $i4 * 2
com.thoughtworks.xstream.core.util.FastStack.push : $i5 = $i4 * 2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : specialinvoke r0.<com.thoughtworks.xstream.core.util.FastStack: void resizeStack(int)>($i5)
com.thoughtworks.xstream.core.util.FastStack.push : specialinvoke r0.<com.thoughtworks.xstream.core.util.FastStack: void resizeStack(int)>($i5) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : r1 = newarray (java.lang.Object)[i0]
com.thoughtworks.xstream.core.util.FastStack.resizeStack : r1 = newarray (java.lang.Object)[i0] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.resizeStack : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0)
com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i2)
com.thoughtworks.xstream.core.util.FastStack.resizeStack : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i2) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> = r1
com.thoughtworks.xstream.core.util.FastStack.resizeStack : r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : $r2 = new java.io.OutputStreamWriter
com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : $r2 = new java.io.OutputStreamWriter >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : specialinvoke $r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r1)
com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : specialinvoke $r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDomDriver: com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.Writer)>($r2)
com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDomDriver: com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.Writer)>($r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : $r2 = new com.thoughtworks.xstream.io.xml.PrettyPrintWriter
com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : $r2 = new com.thoughtworks.xstream.io.xml.PrettyPrintWriter >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDomDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer xmlFriendlyReplacer()>()
com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDomDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer xmlFriendlyReplacer()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : return $r1
com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void <init>(java.io.Writer,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)>(r1, $r3)
com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void <init>(java.io.Writer,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)>(r1, $r3) >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : return $r2
com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : return $r3
com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.XmlFriendlyMapper.mapNameToXML : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.mapper.XmlFriendlyMapper: java.lang.String escapeFieldName(java.lang.String)>(r1)
com.thoughtworks.xstream.mapper.XmlFriendlyMapper.mapNameToXML : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.mapper.XmlFriendlyMapper: java.lang.String escapeFieldName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : r3 = $r2
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : i1 = 0
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : if i1 >= i0
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : if c2 != 36
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : if c2 != 36 >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : if c2 != 95
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : if c2 != 95 >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : i1 = i1 + 1
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : goto [?= (branch)]
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : return $r9
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeFieldName : return $r9 >>>>>>>> com.thoughtworks.xstream.mapper.XmlFriendlyMapper.mapNameToXML : return $r2
com.thoughtworks.xstream.mapper.XmlFriendlyMapper.mapNameToXML : return $r2 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r4 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.core.util.PrioritizedList converters>
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r4 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.core.util.PrioritizedList converters> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList: void add(java.lang.Object,int)>(r1, i0)
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList: void add(java.lang.Object,int)>(r1, i0) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $i1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority>
com.thoughtworks.xstream.core.util.PrioritizedList.add : $i1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : if $i1 <= i0
com.thoughtworks.xstream.core.util.PrioritizedList.add : if $i1 <= i0 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority> = i0
com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority> = i0 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $r3 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Set set>
com.thoughtworks.xstream.core.util.PrioritizedList.add : $r3 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Set set> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $r4 = new com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem
com.thoughtworks.xstream.core.util.PrioritizedList.add : $r4 = new com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $i2 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId>
com.thoughtworks.xstream.core.util.PrioritizedList.add : $i2 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $i3 = $i2 + 1
com.thoughtworks.xstream.core.util.PrioritizedList.add : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId> = $i3
com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId> = $i3 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : specialinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: void <init>(java.lang.Object,int,int)>(r1, i0, $i3)
com.thoughtworks.xstream.core.util.PrioritizedList.add : specialinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: void <init>(java.lang.Object,int,int)>(r1, i0, $i3) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4)
com.thoughtworks.xstream.core.util.PrioritizedList.add : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : r2 = (com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem) r1
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : r2 = (com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem) r1 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i0 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i0 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i1 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i1 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : if $i0 == $i1
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : if $i0 == $i1 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i5 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i5 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i6 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i6 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i7 = $i5 - $i6
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i7 = $i5 - $i6 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : return $i7
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : return $i7 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r5 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap>
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r5 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : if $z0 == 0
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.underlyingWriter : return r0
com.thoughtworks.xstream.io.xml.SaxWriter.underlyingWriter : return r0 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomWriter.underlyingWriter : return r0
com.thoughtworks.xstream.io.xml.XppDomWriter.underlyingWriter : return r0 >>>>>>>> com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.marshal : $r6 = new com.thoughtworks.xstream.core.ReferenceByXPathMarshaller
com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.marshal : $r6 = new com.thoughtworks.xstream.core.ReferenceByXPathMarshaller >>>>>>>> com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.marshal : specialinvoke $r6.<com.thoughtworks.xstream.core.ReferenceByXPathMarshaller: void <init>(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.alias.ClassMapper)>(r1, r3, r4)
com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.marshal : specialinvoke $r6.<com.thoughtworks.xstream.core.ReferenceByXPathMarshaller: void <init>(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.alias.ClassMapper)>(r1, r3, r4) >>>>>>>> com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.marshal : virtualinvoke $r6.<com.thoughtworks.xstream.core.ReferenceByXPathMarshaller: void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)>(r2, r5)
com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.marshal : virtualinvoke $r6.<com.thoughtworks.xstream.core.ReferenceByXPathMarshaller: void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)>(r2, r5) >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = r2
com.thoughtworks.xstream.core.TreeMarshaller.start : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = r2 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : if r1 != null
com.thoughtworks.xstream.core.TreeMarshaller.start : if r1 != null >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : $r7 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.io.HierarchicalStreamWriter writer>
com.thoughtworks.xstream.core.TreeMarshaller.start : $r7 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.io.HierarchicalStreamWriter writer> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : $r8 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.core.TreeMarshaller.start : $r8 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.core.TreeMarshaller.start : $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : $r10 = interfaceinvoke $r8.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedClass(java.lang.Class)>($r9)
