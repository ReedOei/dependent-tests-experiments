com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i4 = lengthof $r3
com.thoughtworks.xstream.core.util.FastStack.push : $i4 = lengthof $r3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i5 = $i4 * 2
com.thoughtworks.xstream.core.util.FastStack.push : $i5 = $i4 * 2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : specialinvoke r0.<com.thoughtworks.xstream.core.util.FastStack: void resizeStack(int)>($i5)
com.thoughtworks.xstream.core.util.FastStack.push : specialinvoke r0.<com.thoughtworks.xstream.core.util.FastStack: void resizeStack(int)>($i5) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : r1 = newarray (java.lang.Object)[i0]
com.thoughtworks.xstream.core.util.FastStack.resizeStack : r1 = newarray (java.lang.Object)[i0] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.resizeStack : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0)
com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i2)
com.thoughtworks.xstream.core.util.FastStack.resizeStack : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i2) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> = r1
com.thoughtworks.xstream.core.util.FastStack.resizeStack : r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : $r1 = new com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : $r1 = new com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : specialinvoke $r1.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField: void <init>(com.thoughtworks.xstream.core.util.CustomObjectOutputStream,com.thoughtworks.xstream.core.util.CustomObjectOutputStream$1)>(r0, null)
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : specialinvoke $r1.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField: void <init>(com.thoughtworks.xstream.core.util.CustomObjectOutputStream,com.thoughtworks.xstream.core.util.CustomObjectOutputStream$1)>(r0, null) >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : r2 = $r1
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : r2 = $r1 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : $r3 = r0.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: com.thoughtworks.xstream.core.util.FastStack customFields>
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : $r3 = r0.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: com.thoughtworks.xstream.core.util.FastStack customFields> >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r2)
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : return r2
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : return r2 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>()
com.thoughtworks.xstream.core.TreeMarshaller.put : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>()
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.put : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : interfaceinvoke $r3.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.TreeMarshaller.put : interfaceinvoke $r3.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.put : $r3 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map>
com.thoughtworks.xstream.core.MapBackedDataHolder.put : $r3 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.MapBackedDataHolder.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.setValue : $r2 = new com.thoughtworks.xstream.io.binary.Token$Value
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.setValue : $r2 = new com.thoughtworks.xstream.io.binary.Token$Value >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.setValue : specialinvoke $r2.<com.thoughtworks.xstream.io.binary.Token$Value: void <init>(java.lang.String)>(r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.setValue : specialinvoke $r2.<com.thoughtworks.xstream.io.binary.Token$Value: void <init>(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>($r2)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>($r2) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: com.thoughtworks.xstream.io.binary.Token$Formatter tokenFormatter>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: com.thoughtworks.xstream.io.binary.Token$Formatter tokenFormatter> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: java.io.DataOutputStream out>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: java.io.DataOutputStream out> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.Token$Formatter: void write(java.io.DataOutput,com.thoughtworks.xstream.io.binary.Token)>($r4, r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.Token$Formatter: void write(java.io.DataOutput,com.thoughtworks.xstream.io.binary.Token)>($r4, r1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : l0 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: long getId()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.write : l0 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: long getId()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.Token: long id>
com.thoughtworks.xstream.io.binary.Token.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.Token: long id> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getId : return $l0
com.thoughtworks.xstream.io.binary.Token.getId : return $l0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b2 = l0 cmp 255L
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b2 = l0 cmp 255L >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b2 > 0
com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b2 > 0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : b1 = 8
com.thoughtworks.xstream.io.binary.Token$Formatter.write : b1 = 8 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : goto [?= $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()]
com.thoughtworks.xstream.io.binary.Token$Formatter.write : goto [?= $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()] >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getType : $b0 = r0.<com.thoughtworks.xstream.io.binary.Token: byte type>
com.thoughtworks.xstream.io.binary.Token.getType : $b0 = r0.<com.thoughtworks.xstream.io.binary.Token: byte type> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getType : return $b0
com.thoughtworks.xstream.io.binary.Token.getType : return $b0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $i6 = $b5 + b1
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $i6 = $b5 + b1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i6)
com.thoughtworks.xstream.io.binary.Token$Formatter.write : interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i6) >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.write : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback peekCallback()>()
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.write : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback peekCallback()>() >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.peekCallback : $r1 = r0.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: com.thoughtworks.xstream.core.util.FastStack callbacks>
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.peekCallback : $r1 = r0.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: com.thoughtworks.xstream.core.util.FastStack callbacks> >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.peekCallback : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.peekCallback : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0
com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1
com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2]
com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : return $r1
com.thoughtworks.xstream.core.util.FastStack.peek : return $r1 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.peekCallback : $r3 = (com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback) $r2
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.peekCallback : $r3 = (com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback) $r2 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.peekCallback : return $r3
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.peekCallback : return $r3 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.write : $r1 = new java.lang.Byte
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.write : $r1 = new java.lang.Byte >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.write : $b1 = (byte) i0
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.write : $b1 = (byte) i0 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.write : specialinvoke $r1.<java.lang.Byte: void <init>(byte)>($b1)
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.write : specialinvoke $r1.<java.lang.Byte: void <init>(byte)>($b1) >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.write : interfaceinvoke $r2.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback: void writeToStream(java.lang.Object)>($r1)
