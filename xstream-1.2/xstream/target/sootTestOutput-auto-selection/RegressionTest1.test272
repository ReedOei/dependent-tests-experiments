com.thoughtworks.xstream.io.xml.PrettyPrintWriter.underlyingWriter : return r0 >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.StatefulWriter: void startNodeCommon()>()
com.thoughtworks.xstream.io.StatefulWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.StatefulWriter: void startNodeCommon()>() >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : specialinvoke r0.<com.thoughtworks.xstream.io.StatefulWriter: void checkClosed()>()
com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : specialinvoke r0.<com.thoughtworks.xstream.io.StatefulWriter: void checkClosed()>() >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.checkClosed : $i1 = r0.<com.thoughtworks.xstream.io.StatefulWriter: int state>
com.thoughtworks.xstream.io.StatefulWriter.checkClosed : $i1 = r0.<com.thoughtworks.xstream.io.StatefulWriter: int state> >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.checkClosed : $i0 = <com.thoughtworks.xstream.io.StatefulWriter: int STATE_CLOSED>
com.thoughtworks.xstream.io.StatefulWriter.checkClosed : $i0 = <com.thoughtworks.xstream.io.StatefulWriter: int STATE_CLOSED> >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.checkClosed : if $i1 != $i0
com.thoughtworks.xstream.io.StatefulWriter.checkClosed : if $i1 != $i0 >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : $i1 = r0.<com.thoughtworks.xstream.io.StatefulWriter: int state>
com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : $i1 = r0.<com.thoughtworks.xstream.io.StatefulWriter: int state> >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : $i0 = <com.thoughtworks.xstream.io.StatefulWriter: int STATE_VALUE>
com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : $i0 = <com.thoughtworks.xstream.io.StatefulWriter: int STATE_VALUE> >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : if $i1 != $i0
com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : if $i1 != $i0 >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : $i2 = <com.thoughtworks.xstream.io.StatefulWriter: int STATE_NODE_START>
com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : $i2 = <com.thoughtworks.xstream.io.StatefulWriter: int STATE_NODE_START> >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : r0.<com.thoughtworks.xstream.io.StatefulWriter: int state> = $i2
com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : r0.<com.thoughtworks.xstream.io.StatefulWriter: int state> = $i2 >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : $i3 = r0.<com.thoughtworks.xstream.io.StatefulWriter: int balance>
com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : $i3 = r0.<com.thoughtworks.xstream.io.StatefulWriter: int balance> >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : $i4 = $i3 + 1
com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : $i4 = $i3 + 1 >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : r0.<com.thoughtworks.xstream.io.StatefulWriter: int balance> = $i4
com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : r0.<com.thoughtworks.xstream.io.StatefulWriter: int balance> = $i4 >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : $r4 = r0.<com.thoughtworks.xstream.io.StatefulWriter: com.thoughtworks.xstream.core.util.FastStack attributes>
com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : $r4 = r0.<com.thoughtworks.xstream.io.StatefulWriter: com.thoughtworks.xstream.core.util.FastStack attributes> >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : $r5 = new java.util.HashSet
com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : $r5 = new java.util.HashSet >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : specialinvoke $r5.<java.util.HashSet: void <init>()>()
com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : specialinvoke $r5.<java.util.HashSet: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r5)
com.thoughtworks.xstream.io.StatefulWriter.startNodeCommon : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r5) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.StatefulWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.WriterWrapper: void startNode(java.lang.String)>(r1)
com.thoughtworks.xstream.io.StatefulWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.WriterWrapper: void startNode(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.WriterWrapper.startNode : $r2 = r0.<com.thoughtworks.xstream.io.WriterWrapper: com.thoughtworks.xstream.io.HierarchicalStreamWriter wrapped>
com.thoughtworks.xstream.io.WriterWrapper.startNode : $r2 = r0.<com.thoughtworks.xstream.io.WriterWrapper: com.thoughtworks.xstream.io.HierarchicalStreamWriter wrapped> >>>>>>>> com.thoughtworks.xstream.io.WriterWrapper.startNode : interfaceinvoke $r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void startNode(java.lang.String)>(r1)
com.thoughtworks.xstream.io.WriterWrapper.startNode : interfaceinvoke $r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void startNode(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: java.lang.String escapeXmlName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: java.lang.String escapeXmlName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z0 == 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z1 == 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(60)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(60) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = $i2 + 1
com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i4 = lengthof $r1
com.thoughtworks.xstream.core.util.QuickWriter.write : $i4 = lengthof $r1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : if $i3 < $i4
com.thoughtworks.xstream.core.util.QuickWriter.write : if $i3 < $i4 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = $i1 + 1
com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i5
com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i5 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r2[$i1] = c0
com.thoughtworks.xstream.core.util.QuickWriter.write : $r2[$i1] = c0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>(r2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>(r2) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = $i1 + i0
com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = $i1 + i0 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : if $i2 < $i3
com.thoughtworks.xstream.core.util.QuickWriter.write : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r5, $i5)
com.thoughtworks.xstream.core.util.QuickWriter.write : virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r5, $i5) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i6 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i6 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i7 = $i6 + i0
com.thoughtworks.xstream.core.util.QuickWriter.write : $i7 = $i6 + i0 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i7
com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i7 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r5 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r5 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i1 = $i0 + 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i1 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 1
