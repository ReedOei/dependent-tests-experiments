com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $r2 = r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : if $r2 != null
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : if $r2 != null >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $z0 = specialinvoke r0.<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>()
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $z0 = specialinvoke r0.<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isSun()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isSun()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isSun : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isSun : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isSun : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Sun")
com.thoughtworks.xstream.core.JVM.isSun : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Sun") >>>>>>>> com.thoughtworks.xstream.core.JVM.isSun : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isSun : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isSun : $z0 = 0
com.thoughtworks.xstream.core.JVM.isSun : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.isSun : return $z0
com.thoughtworks.xstream.core.JVM.isSun : return $z0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z0 != 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isApple()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isApple()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isApple : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isApple : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isApple : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Apple")
com.thoughtworks.xstream.core.JVM.isApple : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Apple") >>>>>>>> com.thoughtworks.xstream.core.JVM.isApple : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isApple : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isApple : $z0 = 0
com.thoughtworks.xstream.core.JVM.isApple : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.isApple : return $z0
com.thoughtworks.xstream.core.JVM.isApple : return $z0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z1 != 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z2 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isHPUX()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z2 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isHPUX()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isHPUX : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isHPUX : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isHPUX : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Hewlett-Packard Company")
com.thoughtworks.xstream.core.JVM.isHPUX : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Hewlett-Packard Company") >>>>>>>> com.thoughtworks.xstream.core.JVM.isHPUX : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isHPUX : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isHPUX : $z0 = 0
com.thoughtworks.xstream.core.JVM.isHPUX : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.isHPUX : return $z0
com.thoughtworks.xstream.core.JVM.isHPUX : return $z0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z2 != 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z2 != 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z3 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isIBM()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z3 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isIBM()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isIBM : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isIBM : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isIBM : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("IBM")
com.thoughtworks.xstream.core.JVM.isIBM : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("IBM") >>>>>>>> com.thoughtworks.xstream.core.JVM.isIBM : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isIBM : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isIBM : $z0 = 0
com.thoughtworks.xstream.core.JVM.isIBM : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.isIBM : return $z0
com.thoughtworks.xstream.core.JVM.isIBM : return $z0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z3 != 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z3 != 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isBlackdown()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isBlackdown()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isBlackdown : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isBlackdown : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isBlackdown : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Blackdown")
com.thoughtworks.xstream.core.JVM.isBlackdown : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Blackdown") >>>>>>>> com.thoughtworks.xstream.core.JVM.isBlackdown : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isBlackdown : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isBlackdown : $z0 = 0
com.thoughtworks.xstream.core.JVM.isBlackdown : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.isBlackdown : return $z0
com.thoughtworks.xstream.core.JVM.isBlackdown : return $z0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z4 != 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z4 != 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z5 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isBEAWithUnsafeSupport()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z5 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isBEAWithUnsafeSupport()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("BEA")
com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("BEA") >>>>>>>> com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : return 0
com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : return 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z5 == 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z5 == 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z7 = 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z7 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : return $z7
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : return $z7 >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : if $z0 == 0
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $r6 = new com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $r6 = new com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : specialinvoke $r6.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: void <init>()>()
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : specialinvoke $r6.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> = $r6
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> = $r6 >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : goto [?= $r16 = r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>]
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : goto [?= $r16 = r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>] >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $r16 = r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $r16 = r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : return $r16
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : return $r16 >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.add : if r1 == null
com.thoughtworks.xstream.core.util.CompositeClassLoader.add : if r1 == null >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.add : $r2 = r0.<com.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders>
com.thoughtworks.xstream.core.util.CompositeClassLoader.add : $r2 = r0.<com.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders> >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.add : interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(0, r1)
com.thoughtworks.xstream.core.util.CompositeClassLoader.add : interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(0, r1) >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r1 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupMappers : $r1 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r2 = interfaceinvoke $r1.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/ClassAliasingMapper")
com.thoughtworks.xstream.XStream.setupMappers : $r2 = interfaceinvoke $r1.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/ClassAliasingMapper") >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2)
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : if $z0 == 0
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r4 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r4 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r3 = interfaceinvoke $r4.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(r1)
