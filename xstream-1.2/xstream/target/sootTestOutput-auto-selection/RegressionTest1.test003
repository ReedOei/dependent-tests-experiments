com.thoughtworks.xstream.io.xml.SaxWriter.underlyingWriter : return r0 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>()
com.thoughtworks.xstream.core.TreeMarshaller.put : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>()
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.put : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : interfaceinvoke $r3.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.TreeMarshaller.put : interfaceinvoke $r3.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.put : $r3 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map>
com.thoughtworks.xstream.core.MapBackedDataHolder.put : $r3 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.MapBackedDataHolder.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomWriter.underlyingWriter : return r0
com.thoughtworks.xstream.io.xml.XppDomWriter.underlyingWriter : return r0 >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r2 = null
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r2 = null >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r4 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Map fieldNameToTypeMap>
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r4 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Map fieldNameToTypeMap> >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r3 = (java.lang.Class) $r5
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r3 = (java.lang.Class) $r5 >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : if r3 == null
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : if r3 == null >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : return r2
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : return r2 >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.addAttributeFor : $r2 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Set typeSet>
com.thoughtworks.xstream.mapper.AttributeMapper.addAttributeFor : $r2 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Set typeSet> >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.addAttributeFor : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.AttributeMapper.addAttributeFor : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r4 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.core.util.PrioritizedList converters>
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r4 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.core.util.PrioritizedList converters> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList: void add(java.lang.Object,int)>(r1, i0)
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList: void add(java.lang.Object,int)>(r1, i0) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $i1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority>
com.thoughtworks.xstream.core.util.PrioritizedList.add : $i1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : if $i1 <= i0
com.thoughtworks.xstream.core.util.PrioritizedList.add : if $i1 <= i0 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority> = i0
com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority> = i0 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $r3 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Set set>
com.thoughtworks.xstream.core.util.PrioritizedList.add : $r3 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Set set> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $r4 = new com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem
com.thoughtworks.xstream.core.util.PrioritizedList.add : $r4 = new com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $i2 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId>
com.thoughtworks.xstream.core.util.PrioritizedList.add : $i2 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $i3 = $i2 + 1
com.thoughtworks.xstream.core.util.PrioritizedList.add : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId> = $i3
com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId> = $i3 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : specialinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: void <init>(java.lang.Object,int,int)>(r1, i0, $i3)
com.thoughtworks.xstream.core.util.PrioritizedList.add : specialinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: void <init>(java.lang.Object,int,int)>(r1, i0, $i3) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4)
com.thoughtworks.xstream.core.util.PrioritizedList.add : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : r2 = (com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem) r1
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : r2 = (com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem) r1 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i0 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i0 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i1 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i1 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : if $i0 == $i1
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : if $i0 == $i1 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i5 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i5 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i6 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i6 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i7 = $i5 - $i6
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i7 = $i5 - $i6 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : return $i7
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : return $i7 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r5 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap>
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r5 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : if $z0 == 0
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.convertAnother : virtualinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)>(r1, r2)
com.thoughtworks.xstream.core.TreeMarshaller.convertAnother : virtualinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r6 = virtualinvoke r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.mapper.Mapper getMapper()>()
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r6 = virtualinvoke r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.mapper.Mapper getMapper()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.getMapper : $r1 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.core.TreeMarshaller.getMapper : $r1 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.getMapper : return $r1
com.thoughtworks.xstream.core.TreeMarshaller.getMapper : return $r1 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $z0 = interfaceinvoke $r6.<com.thoughtworks.xstream.mapper.Mapper: boolean isImmutableValueType(java.lang.Class)>($r7)
