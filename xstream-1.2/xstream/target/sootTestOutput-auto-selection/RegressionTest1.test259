com.thoughtworks.xstream.io.xml.StaxDriver.setRepairingNamespace : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLOutputFactory getOutputFactory()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getOutputFactory : $r2 = r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLOutputFactory outputFactory>
com.thoughtworks.xstream.io.xml.StaxDriver.getOutputFactory : $r2 = r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLOutputFactory outputFactory> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getOutputFactory : if $r2 != null
com.thoughtworks.xstream.io.xml.StaxDriver.getOutputFactory : if $r2 != null >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getOutputFactory : $r1 = staticinvoke <javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>()
com.thoughtworks.xstream.io.xml.StaxDriver.getOutputFactory : $r1 = staticinvoke <javax.xml.stream.XMLOutputFactory: javax.xml.stream.XMLOutputFactory newInstance()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getOutputFactory : r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLOutputFactory outputFactory> = $r1
com.thoughtworks.xstream.io.xml.StaxDriver.getOutputFactory : r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLOutputFactory outputFactory> = $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getOutputFactory : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLOutputFactory outputFactory>
com.thoughtworks.xstream.io.xml.StaxDriver.getOutputFactory : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLOutputFactory outputFactory> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getOutputFactory : return $r3
com.thoughtworks.xstream.io.xml.StaxDriver.getOutputFactory : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.setRepairingNamespace : $r1 = "javax.xml.stream.isRepairingNamespaces"
com.thoughtworks.xstream.io.xml.StaxDriver.setRepairingNamespace : $r1 = "javax.xml.stream.isRepairingNamespaces" >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.setRepairingNamespace : if z0 == 0
com.thoughtworks.xstream.io.xml.StaxDriver.setRepairingNamespace : if z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.setRepairingNamespace : $r3 = <java.lang.Boolean: java.lang.Boolean FALSE>
com.thoughtworks.xstream.io.xml.StaxDriver.setRepairingNamespace : $r3 = <java.lang.Boolean: java.lang.Boolean FALSE> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.setRepairingNamespace : virtualinvoke $r2.<javax.xml.stream.XMLOutputFactory: void setProperty(java.lang.String,java.lang.Object)>($r1, $r3)
com.thoughtworks.xstream.io.xml.StaxDriver.setRepairingNamespace : virtualinvoke $r2.<javax.xml.stream.XMLOutputFactory: void setProperty(java.lang.String,java.lang.Object)>($r1, $r3) >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createReader : specialinvoke r0.<com.thoughtworks.xstream.io.xml.StaxDriver: void loadLibrary()>()
com.thoughtworks.xstream.io.xml.StaxDriver.createReader : specialinvoke r0.<com.thoughtworks.xstream.io.xml.StaxDriver: void loadLibrary()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.loadLibrary : $z0 = <com.thoughtworks.xstream.io.xml.StaxDriver: boolean libraryPresent>
com.thoughtworks.xstream.io.xml.StaxDriver.loadLibrary : $z0 = <com.thoughtworks.xstream.io.xml.StaxDriver: boolean libraryPresent> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.loadLibrary : if $z0 != 0
com.thoughtworks.xstream.io.xml.StaxDriver.loadLibrary : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createReader : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLStreamReader createParser(java.io.Reader)>(r1)
com.thoughtworks.xstream.io.xml.StaxDriver.createReader : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLStreamReader createParser(java.io.Reader)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createParser : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLInputFactory getInputFactory()>()
com.thoughtworks.xstream.io.xml.StaxDriver.createParser : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLInputFactory getInputFactory()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : $r2 = r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLInputFactory inputFactory>
com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : $r2 = r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLInputFactory inputFactory> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : if $r2 != null
com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : if $r2 != null >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : $r1 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>()
com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : $r1 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLInputFactory inputFactory> = $r1
com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLInputFactory inputFactory> = $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLInputFactory inputFactory>
com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLInputFactory inputFactory> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : return $r3
com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createParser : $r3 = virtualinvoke $r2.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader)>(r1)
com.thoughtworks.xstream.io.xml.StaxDriver.createParser : $r3 = virtualinvoke $r2.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createReader : r2 = $r5
com.thoughtworks.xstream.io.xml.StaxDriver.createReader : r2 = $r5 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createReader : $r6 = new com.thoughtworks.xstream.io.StreamException
com.thoughtworks.xstream.io.xml.StaxDriver.createReader : $r6 = new com.thoughtworks.xstream.io.StreamException >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createReader : specialinvoke $r6.<com.thoughtworks.xstream.io.StreamException: void <init>(java.lang.Throwable)>(r2)
com.thoughtworks.xstream.io.xml.StaxDriver.createReader : specialinvoke $r6.<com.thoughtworks.xstream.io.StreamException: void <init>(java.lang.Throwable)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createReader : throw $r6
