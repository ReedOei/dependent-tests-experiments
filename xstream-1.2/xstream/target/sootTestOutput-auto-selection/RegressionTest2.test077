com.thoughtworks.xstream.io.xml.PrettyPrintWriter.underlyingWriter : return r0 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : $r2 = <com.thoughtworks.xstream.core.util.CustomObjectOutputStream: java.lang.String DATA_HOLDER_KEY>
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : $r2 = <com.thoughtworks.xstream.core.util.CustomObjectOutputStream: java.lang.String DATA_HOLDER_KEY> >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : $r4 = interfaceinvoke r0.<com.thoughtworks.xstream.converters.DataHolder: java.lang.Object get(java.lang.Object)>($r2)
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : $r4 = interfaceinvoke r0.<com.thoughtworks.xstream.converters.DataHolder: java.lang.Object get(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.get : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>()
com.thoughtworks.xstream.core.TreeMarshaller.get : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>()
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.get : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.get : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.get : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.converters.DataHolder: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.TreeMarshaller.get : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.converters.DataHolder: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.get : $r2 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map>
com.thoughtworks.xstream.core.MapBackedDataHolder.get : $r2 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.get : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.MapBackedDataHolder.get : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.get : return $r3
com.thoughtworks.xstream.core.MapBackedDataHolder.get : return $r3 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.get : return $r3
com.thoughtworks.xstream.core.TreeMarshaller.get : return $r3 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : r3 = (com.thoughtworks.xstream.core.util.CustomObjectOutputStream) $r4
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : r3 = (com.thoughtworks.xstream.core.util.CustomObjectOutputStream) $r4 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : if r3 != null
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : if r3 != null >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : $r5 = new com.thoughtworks.xstream.core.util.CustomObjectOutputStream
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : $r5 = new com.thoughtworks.xstream.core.util.CustomObjectOutputStream >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : specialinvoke $r5.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: void <init>(com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback)>(r1)
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : specialinvoke $r5.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: void <init>(com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i4 = lengthof $r3
com.thoughtworks.xstream.core.util.FastStack.push : $i4 = lengthof $r3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i5 = $i4 * 2
com.thoughtworks.xstream.core.util.FastStack.push : $i5 = $i4 * 2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : specialinvoke r0.<com.thoughtworks.xstream.core.util.FastStack: void resizeStack(int)>($i5)
com.thoughtworks.xstream.core.util.FastStack.push : specialinvoke r0.<com.thoughtworks.xstream.core.util.FastStack: void resizeStack(int)>($i5) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : r1 = newarray (java.lang.Object)[i0]
com.thoughtworks.xstream.core.util.FastStack.resizeStack : r1 = newarray (java.lang.Object)[i0] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.resizeStack : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0)
com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i2)
com.thoughtworks.xstream.core.util.FastStack.resizeStack : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i2) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> = r1
com.thoughtworks.xstream.core.util.FastStack.resizeStack : r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : r3 = $r5
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : r3 = $r5 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : $r6 = <com.thoughtworks.xstream.core.util.CustomObjectOutputStream: java.lang.String DATA_HOLDER_KEY>
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : $r6 = <com.thoughtworks.xstream.core.util.CustomObjectOutputStream: java.lang.String DATA_HOLDER_KEY> >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : interfaceinvoke r0.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>($r6, r3)
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : interfaceinvoke r0.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>($r6, r3) >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>()
com.thoughtworks.xstream.core.TreeMarshaller.put : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.put : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : interfaceinvoke $r3.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.TreeMarshaller.put : interfaceinvoke $r3.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.put : $r3 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map>
com.thoughtworks.xstream.core.MapBackedDataHolder.put : $r3 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.MapBackedDataHolder.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : goto [?= return r3]
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : goto [?= return r3] >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : return r3
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : return r3 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : $r1 = new com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : $r1 = new com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : specialinvoke $r1.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField: void <init>(com.thoughtworks.xstream.core.util.CustomObjectOutputStream,com.thoughtworks.xstream.core.util.CustomObjectOutputStream$1)>(r0, null)
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : specialinvoke $r1.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream$CustomPutField: void <init>(com.thoughtworks.xstream.core.util.CustomObjectOutputStream,com.thoughtworks.xstream.core.util.CustomObjectOutputStream$1)>(r0, null) >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : r2 = $r1
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : r2 = $r1 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : $r3 = r0.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: com.thoughtworks.xstream.core.util.FastStack customFields>
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : $r3 = r0.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: com.thoughtworks.xstream.core.util.FastStack customFields> >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r2)
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : return r2
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.putFields : return r2 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.core.util.Base64Encoder.encode : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : r3 = $r2
com.thoughtworks.xstream.core.util.Base64Encoder.encode : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : i0 = 0
com.thoughtworks.xstream.core.util.Base64Encoder.encode : i0 = 0 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : i1 = 0
com.thoughtworks.xstream.core.util.Base64Encoder.encode : i1 = 0 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i5 = lengthof r1
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i5 = lengthof r1 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : if i1 >= $i5
com.thoughtworks.xstream.core.util.Base64Encoder.encode : if i1 >= $i5 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i6 = lengthof r1
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i6 = lengthof r1 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i7 = $i6 - i1
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i7 = $i6 - i1 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : i2 = staticinvoke <java.lang.Math: int min(int,int)>(3, $i7)
com.thoughtworks.xstream.core.util.Base64Encoder.encode : i2 = staticinvoke <java.lang.Math: int min(int,int)>(3, $i7) >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $b8 = r1[i1]
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $b8 = r1[i1] >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $s9 = $b8 & 255
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $s9 = $b8 & 255 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i10 = $s9 << 16
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i10 = $s9 << 16 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : if i2 > 1
com.thoughtworks.xstream.core.util.Base64Encoder.encode : if i2 > 1 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i12 = i1 + 1
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i12 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $b13 = r1[$i12]
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $b13 = r1[$i12] >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $s11 = $b13 & 255
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $s11 = $b13 & 255 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i14 = $s11 << 8
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i14 = $s11 << 8 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i15 = $i10 | $i14
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i15 = $i10 | $i14 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : if i2 > 2
com.thoughtworks.xstream.core.util.Base64Encoder.encode : if i2 > 2 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i17 = i1 + 2
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i17 = i1 + 2 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $b18 = r1[$i17]
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $b18 = r1[$i17] >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $s16 = $b18 & 255
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $s16 = $b18 & 255 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : i3 = $i15 | $s16
com.thoughtworks.xstream.core.util.Base64Encoder.encode : i3 = $i15 | $s16 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : i4 = 0
com.thoughtworks.xstream.core.util.Base64Encoder.encode : i4 = 0 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : if i4 >= 4
com.thoughtworks.xstream.core.util.Base64Encoder.encode : if i4 >= 4 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i19 = i2 + 1
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i19 = i2 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : if $i19 <= i4
com.thoughtworks.xstream.core.util.Base64Encoder.encode : if $i19 <= i4 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $r5 = <com.thoughtworks.xstream.core.util.Base64Encoder: char[] SIXTY_FOUR_CHARS>
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $r5 = <com.thoughtworks.xstream.core.util.Base64Encoder: char[] SIXTY_FOUR_CHARS> >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i20 = 3 - i4
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i20 = 3 - i4 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i21 = 6 * $i20
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i21 = 6 * $i20 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i22 = i3 >> $i21
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i22 = i3 >> $i21 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i23 = 63 & $i22
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i23 = 63 & $i22 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $c24 = $r5[$i23]
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $c24 = $r5[$i23] >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : goto [?= virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c24)]
com.thoughtworks.xstream.core.util.Base64Encoder.encode : goto [?= virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c24)] >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c24)
com.thoughtworks.xstream.core.util.Base64Encoder.encode : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c24) >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : i4 = i4 + 1
com.thoughtworks.xstream.core.util.Base64Encoder.encode : i4 = i4 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : goto [?= (branch)]
com.thoughtworks.xstream.core.util.Base64Encoder.encode : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : i0 = i0 + 4
com.thoughtworks.xstream.core.util.Base64Encoder.encode : i0 = i0 + 4 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i25 = i0 % 76
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $i25 = i0 % 76 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : if $i25 != 0
com.thoughtworks.xstream.core.util.Base64Encoder.encode : if $i25 != 0 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : i1 = i1 + 3
com.thoughtworks.xstream.core.util.Base64Encoder.encode : i1 = i1 + 3 >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : goto [?= $i5 = lengthof r1]
com.thoughtworks.xstream.core.util.Base64Encoder.encode : goto [?= $i5 = lengthof r1] >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : $r8 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.core.util.Base64Encoder.encode : $r8 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.core.util.Base64Encoder.encode : return $r8
com.thoughtworks.xstream.core.util.Base64Encoder.encode : return $r8 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.write : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback peekCallback()>()
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.write : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback peekCallback()>() >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.peekCallback : $r1 = r0.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: com.thoughtworks.xstream.core.util.FastStack callbacks>
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.peekCallback : $r1 = r0.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: com.thoughtworks.xstream.core.util.FastStack callbacks> >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.peekCallback : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.peekCallback : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0
com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1
com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2]
com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : return $r1
com.thoughtworks.xstream.core.util.FastStack.peek : return $r1 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.peekCallback : $r3 = (com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback) $r2
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.peekCallback : $r3 = (com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback) $r2 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.peekCallback : return $r3
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.peekCallback : return $r3 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.write : interfaceinvoke $r2.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback: void writeToStream(java.lang.Object)>(r1)
