com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r2 = null >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r4 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Map fieldNameToTypeMap>
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r4 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Map fieldNameToTypeMap> >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r3 = (java.lang.Class) $r5
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r3 = (java.lang.Class) $r5 >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : if r3 == null
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : if r3 == null >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : return r2
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : return r2 >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.addAttributeFor : $r2 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Set typeSet>
com.thoughtworks.xstream.mapper.AttributeMapper.addAttributeFor : $r2 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Set typeSet> >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.addAttributeFor : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.AttributeMapper.addAttributeFor : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.reassignCurrentElement : $r2 = (org.jdom.Element) r1
com.thoughtworks.xstream.io.xml.JDomReader.reassignCurrentElement : $r2 = (org.jdom.Element) r1 >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.reassignCurrentElement : r0.<com.thoughtworks.xstream.io.xml.JDomReader: org.jdom.Element currentElement> = $r2
com.thoughtworks.xstream.io.xml.JDomReader.reassignCurrentElement : r0.<com.thoughtworks.xstream.io.xml.JDomReader: org.jdom.Element currentElement> = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.peekUnderlyingNode : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.peekUnderlyingNode : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.peekUnderlyingNode : return $r1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.peekUnderlyingNode : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.underlyingReader : return r0
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.underlyingReader : return r0 >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(null, class "com/thoughtworks/xstream/mapper/Mapper$Null")
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(null, class "com/thoughtworks/xstream/mapper/Mapper$Null") >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : $r3 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map typeToImpl>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : $r3 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map typeToImpl> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : $r5 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map implToType>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : $r5 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map implToType> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r1 = <java.lang.Boolean: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r1 = <java.lang.Boolean: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Boolean", $r1)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Boolean", $r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r2 = <java.lang.Character: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r2 = <java.lang.Character: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Character", $r2)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Character", $r2) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r3 = <java.lang.Integer: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r3 = <java.lang.Integer: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Integer", $r3)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Integer", $r3) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r4 = <java.lang.Float: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r4 = <java.lang.Float: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Float", $r4)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Float", $r4) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r5 = <java.lang.Double: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r5 = <java.lang.Double: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Double", $r5)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Double", $r5) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r6 = <java.lang.Short: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r6 = <java.lang.Short: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Short", $r6)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Short", $r6) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r7 = <java.lang.Byte: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r7 = <java.lang.Byte: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Byte", $r7)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Byte", $r7) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r8 = <java.lang.Long: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r8 = <java.lang.Long: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Long", $r8)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Long", $r8) >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.keys : specialinvoke r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: void lazilyCreateDataHolder()>()
com.thoughtworks.xstream.core.TreeUnmarshaller.keys : specialinvoke r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: void lazilyCreateDataHolder()>() >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeUnmarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.lazilyCreateDataHolder : if $r2 != null
com.thoughtworks.xstream.core.TreeUnmarshaller.lazilyCreateDataHolder : if $r2 != null >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder
com.thoughtworks.xstream.core.TreeUnmarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>()
com.thoughtworks.xstream.core.TreeUnmarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1
com.thoughtworks.xstream.core.TreeUnmarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1 >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.keys : $r1 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeUnmarshaller.keys : $r1 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.keys : $r2 = interfaceinvoke $r1.<com.thoughtworks.xstream.converters.DataHolder: java.util.Iterator keys()>()
com.thoughtworks.xstream.core.TreeUnmarshaller.keys : $r2 = interfaceinvoke $r1.<com.thoughtworks.xstream.converters.DataHolder: java.util.Iterator keys()>() >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.keys : $r1 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map>
com.thoughtworks.xstream.core.MapBackedDataHolder.keys : $r1 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.keys : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>()
com.thoughtworks.xstream.core.MapBackedDataHolder.keys : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.keys : $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2)
com.thoughtworks.xstream.core.MapBackedDataHolder.keys : $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.keys : $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>()
com.thoughtworks.xstream.core.MapBackedDataHolder.keys : $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.keys : return $r4
com.thoughtworks.xstream.core.MapBackedDataHolder.keys : return $r4 >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.keys : return $r2
com.thoughtworks.xstream.core.TreeUnmarshaller.keys : return $r2 >>>>>>>> com.thoughtworks.xstream.converters.extended.SubjectConverter.unmarshal : r3 = virtualinvoke r0.<com.thoughtworks.xstream.converters.extended.SubjectConverter: java.util.Set unmarshalPrincipals(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>(r1, r2)
com.thoughtworks.xstream.converters.extended.SubjectConverter.unmarshal : r3 = virtualinvoke r0.<com.thoughtworks.xstream.converters.extended.SubjectConverter: java.util.Set unmarshalPrincipals(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.converters.extended.SubjectConverter.unmarshalPrincipals : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.converters.extended.SubjectConverter: java.util.Set populateSet(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>(r1, r2)
com.thoughtworks.xstream.converters.extended.SubjectConverter.unmarshalPrincipals : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.converters.extended.SubjectConverter: java.util.Set populateSet(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.converters.extended.SubjectConverter.populateSet : $r3 = new java.util.HashSet
com.thoughtworks.xstream.converters.extended.SubjectConverter.populateSet : $r3 = new java.util.HashSet >>>>>>>> com.thoughtworks.xstream.converters.extended.SubjectConverter.populateSet : specialinvoke $r3.<java.util.HashSet: void <init>()>()
com.thoughtworks.xstream.converters.extended.SubjectConverter.populateSet : specialinvoke $r3.<java.util.HashSet: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.extended.SubjectConverter.populateSet : r4 = $r3
com.thoughtworks.xstream.converters.extended.SubjectConverter.populateSet : r4 = $r3 >>>>>>>> com.thoughtworks.xstream.converters.extended.SubjectConverter.populateSet : interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveDown()>()
com.thoughtworks.xstream.converters.extended.SubjectConverter.populateSet : interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveDown()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0
com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1
com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2]
com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : return $r1
com.thoughtworks.xstream.core.util.FastStack.peek : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r4
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r2 = new com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r2 = new com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: void <init>(com.thoughtworks.xstream.io.xml.AbstractDocumentReader$1)>(null)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: void <init>(com.thoughtworks.xstream.io.xml.AbstractDocumentReader$1)>(null) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r2)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getChild(int)>($i0)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getChild(int)>($i0) >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getChild : $r1 = r0.<com.thoughtworks.xstream.io.xml.JDomReader: org.jdom.Element currentElement>
com.thoughtworks.xstream.io.xml.JDomReader.getChild : $r1 = r0.<com.thoughtworks.xstream.io.xml.JDomReader: org.jdom.Element currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getChild : $r2 = virtualinvoke $r1.<org.jdom.Element: java.util.List getChildren()>()
