com.thoughtworks.xstream.converters.javabean.JavaBeanConverter.canConvert : $r2 = r0.<com.thoughtworks.xstream.converters.javabean.JavaBeanConverter: com.thoughtworks.xstream.converters.javabean.BeanProvider beanProvider> >>>>>>>> com.thoughtworks.xstream.converters.javabean.JavaBeanConverter.canConvert : $z0 = virtualinvoke $r2.<com.thoughtworks.xstream.converters.javabean.BeanProvider: boolean canInstantiate(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.javabean.JavaBeanConverter.canConvert : $z0 = virtualinvoke $r2.<com.thoughtworks.xstream.converters.javabean.BeanProvider: boolean canInstantiate(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.javabean.BeanProvider.canInstantiate : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.converters.javabean.BeanProvider: java.lang.reflect.Constructor getDefaultConstrutor(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.javabean.BeanProvider.canInstantiate : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.converters.javabean.BeanProvider: java.lang.reflect.Constructor getDefaultConstrutor(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.javabean.BeanProvider.getDefaultConstrutor : r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor[] getConstructors()>()
