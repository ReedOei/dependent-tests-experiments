com.thoughtworks.xstream.io.xml.PrettyPrintWriter.underlyingWriter : return r0 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : $r2 = <com.thoughtworks.xstream.core.util.CustomObjectOutputStream: java.lang.String DATA_HOLDER_KEY>
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : $r2 = <com.thoughtworks.xstream.core.util.CustomObjectOutputStream: java.lang.String DATA_HOLDER_KEY> >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : $r4 = interfaceinvoke r0.<com.thoughtworks.xstream.converters.DataHolder: java.lang.Object get(java.lang.Object)>($r2)
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : $r4 = interfaceinvoke r0.<com.thoughtworks.xstream.converters.DataHolder: java.lang.Object get(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.get : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>()
com.thoughtworks.xstream.core.TreeMarshaller.get : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>()
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.get : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.get : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.get : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.converters.DataHolder: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.TreeMarshaller.get : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.converters.DataHolder: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.get : $r2 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map>
com.thoughtworks.xstream.core.MapBackedDataHolder.get : $r2 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.get : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.MapBackedDataHolder.get : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.get : return $r3
com.thoughtworks.xstream.core.MapBackedDataHolder.get : return $r3 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.get : return $r3
com.thoughtworks.xstream.core.TreeMarshaller.get : return $r3 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : r3 = (com.thoughtworks.xstream.core.util.CustomObjectOutputStream) $r4
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : r3 = (com.thoughtworks.xstream.core.util.CustomObjectOutputStream) $r4 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : if r3 != null
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : if r3 != null >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : $r5 = new com.thoughtworks.xstream.core.util.CustomObjectOutputStream
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : $r5 = new com.thoughtworks.xstream.core.util.CustomObjectOutputStream >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : specialinvoke $r5.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: void <init>(com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback)>(r1)
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : specialinvoke $r5.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: void <init>(com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i4 = lengthof $r3
com.thoughtworks.xstream.core.util.FastStack.push : $i4 = lengthof $r3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i5 = $i4 * 2
com.thoughtworks.xstream.core.util.FastStack.push : $i5 = $i4 * 2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : specialinvoke r0.<com.thoughtworks.xstream.core.util.FastStack: void resizeStack(int)>($i5)
com.thoughtworks.xstream.core.util.FastStack.push : specialinvoke r0.<com.thoughtworks.xstream.core.util.FastStack: void resizeStack(int)>($i5) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : r1 = newarray (java.lang.Object)[i0]
com.thoughtworks.xstream.core.util.FastStack.resizeStack : r1 = newarray (java.lang.Object)[i0] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.resizeStack : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0)
com.thoughtworks.xstream.core.util.FastStack.resizeStack : $i2 = staticinvoke <java.lang.Math: int min(int,int)>($i1, i0) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i2)
com.thoughtworks.xstream.core.util.FastStack.resizeStack : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>($r2, 0, r1, 0, $i2) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.resizeStack : r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> = r1
com.thoughtworks.xstream.core.util.FastStack.resizeStack : r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : r3 = $r5
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : r3 = $r5 >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : $r6 = <com.thoughtworks.xstream.core.util.CustomObjectOutputStream: java.lang.String DATA_HOLDER_KEY>
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : $r6 = <com.thoughtworks.xstream.core.util.CustomObjectOutputStream: java.lang.String DATA_HOLDER_KEY> >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : interfaceinvoke r0.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>($r6, r3)
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : interfaceinvoke r0.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>($r6, r3) >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>()
com.thoughtworks.xstream.core.TreeMarshaller.put : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.put : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : interfaceinvoke $r3.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.TreeMarshaller.put : interfaceinvoke $r3.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.put : $r3 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map>
com.thoughtworks.xstream.core.MapBackedDataHolder.put : $r3 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.MapBackedDataHolder.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : goto [?= return r3]
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : goto [?= return r3] >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : return r3
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.getInstance : return r3 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : $r2 = new java.io.OutputStreamWriter
com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : $r2 = new java.io.OutputStreamWriter >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : specialinvoke $r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r1)
com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : specialinvoke $r2.<java.io.OutputStreamWriter: void <init>(java.io.OutputStream)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDomDriver: com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.Writer)>($r2)
com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDomDriver: com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.Writer)>($r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : $r2 = new com.thoughtworks.xstream.io.xml.PrettyPrintWriter
com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : $r2 = new com.thoughtworks.xstream.io.xml.PrettyPrintWriter >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDomDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer xmlFriendlyReplacer()>()
com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDomDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer xmlFriendlyReplacer()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : return $r1
com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void <init>(java.io.Writer,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)>(r1, $r3)
com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void <init>(java.io.Writer,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)>(r1, $r3) >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : return $r2
com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : return $r3
com.thoughtworks.xstream.io.xml.XppDomDriver.createWriter : return $r3 >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $r2 = r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $r2 = r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : if $r2 != null
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : if $r2 != null >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $z0 = specialinvoke r0.<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>()
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $z0 = specialinvoke r0.<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isSun()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isSun()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isSun : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isSun : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isSun : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Sun")
com.thoughtworks.xstream.core.JVM.isSun : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Sun") >>>>>>>> com.thoughtworks.xstream.core.JVM.isSun : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isSun : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isSun : $z0 = 0
com.thoughtworks.xstream.core.JVM.isSun : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.isSun : return $z0
com.thoughtworks.xstream.core.JVM.isSun : return $z0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z0 != 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isApple()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isApple()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isApple : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isApple : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isApple : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Apple")
com.thoughtworks.xstream.core.JVM.isApple : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Apple") >>>>>>>> com.thoughtworks.xstream.core.JVM.isApple : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isApple : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isApple : $z0 = 0
com.thoughtworks.xstream.core.JVM.isApple : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.isApple : return $z0
com.thoughtworks.xstream.core.JVM.isApple : return $z0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z1 != 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z2 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isHPUX()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z2 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isHPUX()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isHPUX : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isHPUX : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isHPUX : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Hewlett-Packard Company")
com.thoughtworks.xstream.core.JVM.isHPUX : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Hewlett-Packard Company") >>>>>>>> com.thoughtworks.xstream.core.JVM.isHPUX : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isHPUX : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isHPUX : $z0 = 0
com.thoughtworks.xstream.core.JVM.isHPUX : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.isHPUX : return $z0
com.thoughtworks.xstream.core.JVM.isHPUX : return $z0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z2 != 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z2 != 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z3 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isIBM()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z3 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isIBM()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isIBM : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isIBM : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isIBM : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("IBM")
com.thoughtworks.xstream.core.JVM.isIBM : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("IBM") >>>>>>>> com.thoughtworks.xstream.core.JVM.isIBM : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isIBM : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isIBM : $z0 = 0
com.thoughtworks.xstream.core.JVM.isIBM : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.isIBM : return $z0
com.thoughtworks.xstream.core.JVM.isIBM : return $z0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z3 != 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z3 != 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isBlackdown()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isBlackdown()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isBlackdown : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isBlackdown : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isBlackdown : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Blackdown")
com.thoughtworks.xstream.core.JVM.isBlackdown : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Blackdown") >>>>>>>> com.thoughtworks.xstream.core.JVM.isBlackdown : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isBlackdown : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isBlackdown : $z0 = 0
com.thoughtworks.xstream.core.JVM.isBlackdown : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.isBlackdown : return $z0
com.thoughtworks.xstream.core.JVM.isBlackdown : return $z0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z4 != 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z4 != 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z5 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isBEAWithUnsafeSupport()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z5 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isBEAWithUnsafeSupport()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("BEA")
com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("BEA") >>>>>>>> com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : return 0
com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : return 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z5 == 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z5 == 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z7 = 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z7 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : return $z7
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : return $z7 >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : if $z0 == 0
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $r6 = new com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $r6 = new com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : specialinvoke $r6.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: void <init>()>()
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : specialinvoke $r6.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> = $r6
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> = $r6 >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : goto [?= $r16 = r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>]
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : goto [?= $r16 = r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>] >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $r16 = r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $r16 = r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : return $r16
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : return $r16 >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.add : if r1 == null
com.thoughtworks.xstream.core.util.CompositeClassLoader.add : if r1 == null >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.add : $r2 = r0.<com.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders>
com.thoughtworks.xstream.core.util.CompositeClassLoader.add : $r2 = r0.<com.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders> >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.add : interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(0, r1)
com.thoughtworks.xstream.core.util.CompositeClassLoader.add : interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(0, r1) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r1 = new com.thoughtworks.xstream.mapper.DefaultMapper
com.thoughtworks.xstream.XStream.buildMapper : $r1 = new com.thoughtworks.xstream.mapper.DefaultMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference>
com.thoughtworks.xstream.XStream.buildMapper : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference> >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r1.<com.thoughtworks.xstream.mapper.DefaultMapper: void <init>(java.lang.ClassLoader)>($r3)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r1.<com.thoughtworks.xstream.mapper.DefaultMapper: void <init>(java.lang.ClassLoader)>($r3) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r2 = $r1
com.thoughtworks.xstream.XStream.buildMapper : r2 = $r1 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : if z0 == 0
com.thoughtworks.xstream.XStream.buildMapper : if z0 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r4 = new com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper
com.thoughtworks.xstream.XStream.buildMapper : $r4 = new com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r4.<com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r2)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r4.<com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r2) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r2 = $r4
com.thoughtworks.xstream.XStream.buildMapper : r2 = $r4 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r5 = new com.thoughtworks.xstream.mapper.ClassAliasingMapper
com.thoughtworks.xstream.XStream.buildMapper : $r5 = new com.thoughtworks.xstream.mapper.ClassAliasingMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r5.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r2)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r5.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r2) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r6 = $r5
com.thoughtworks.xstream.XStream.buildMapper : r6 = $r5 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r7 = new com.thoughtworks.xstream.mapper.FieldAliasingMapper
com.thoughtworks.xstream.XStream.buildMapper : $r7 = new com.thoughtworks.xstream.mapper.FieldAliasingMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r7.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r6)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r7.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r6) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r8 = $r7
com.thoughtworks.xstream.XStream.buildMapper : r8 = $r7 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r9 = new com.thoughtworks.xstream.mapper.AttributeAliasingMapper
com.thoughtworks.xstream.XStream.buildMapper : $r9 = new com.thoughtworks.xstream.mapper.AttributeAliasingMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r9.<com.thoughtworks.xstream.mapper.AttributeAliasingMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r8)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r9.<com.thoughtworks.xstream.mapper.AttributeAliasingMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r8) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r10 = $r9
com.thoughtworks.xstream.XStream.buildMapper : r10 = $r9 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r11 = new com.thoughtworks.xstream.mapper.AttributeMapper
com.thoughtworks.xstream.XStream.buildMapper : $r11 = new com.thoughtworks.xstream.mapper.AttributeMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r11.<com.thoughtworks.xstream.mapper.AttributeMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r10)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r11.<com.thoughtworks.xstream.mapper.AttributeMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r10) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r12 = $r11
com.thoughtworks.xstream.XStream.buildMapper : r12 = $r11 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r13 = new com.thoughtworks.xstream.mapper.ImplicitCollectionMapper
com.thoughtworks.xstream.XStream.buildMapper : $r13 = new com.thoughtworks.xstream.mapper.ImplicitCollectionMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r13.<com.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r12)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r13.<com.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r12) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r14 = $r13
com.thoughtworks.xstream.XStream.buildMapper : r14 = $r13 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r15 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.buildMapper : $r15 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r16 = virtualinvoke $r15.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("net.sf.cglib.proxy.Enhancer")
com.thoughtworks.xstream.XStream.buildMapper : $r16 = virtualinvoke $r15.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("net.sf.cglib.proxy.Enhancer") >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : $r3 = r0.<com.thoughtworks.xstream.core.JVM: java.util.Map loaderCache>
com.thoughtworks.xstream.core.JVM.loadClass : $r3 = r0.<com.thoughtworks.xstream.core.JVM: java.util.Map loaderCache> >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.JVM.loadClass : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : r2 = (java.lang.Class) $r4
com.thoughtworks.xstream.core.JVM.loadClass : r2 = (java.lang.Class) $r4 >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : if r2 != null
com.thoughtworks.xstream.core.JVM.loadClass : if r2 != null >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.core.JVM.loadClass : $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
com.thoughtworks.xstream.core.JVM.loadClass : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, $r6)
com.thoughtworks.xstream.core.JVM.loadClass : r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, $r6) >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : $r7 = r0.<com.thoughtworks.xstream.core.JVM: java.util.Map loaderCache>
com.thoughtworks.xstream.core.JVM.loadClass : $r7 = r0.<com.thoughtworks.xstream.core.JVM: java.util.Map loaderCache> >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.JVM.loadClass : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : return r2
com.thoughtworks.xstream.core.JVM.loadClass : return r2 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : if $r16 == null
com.thoughtworks.xstream.XStream.buildMapper : if $r16 == null >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r17 = newarray (java.lang.Class)[1]
com.thoughtworks.xstream.XStream.buildMapper : $r17 = newarray (java.lang.Class)[1] >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r17[0] = class "com/thoughtworks/xstream/mapper/Mapper"
com.thoughtworks.xstream.XStream.buildMapper : $r17[0] = class "com/thoughtworks/xstream/mapper/Mapper" >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r18 = newarray (java.lang.Object)[1]
com.thoughtworks.xstream.XStream.buildMapper : $r18 = newarray (java.lang.Object)[1] >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r18[0] = r14
com.thoughtworks.xstream.XStream.buildMapper : $r18[0] = r14 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r14 = specialinvoke r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper buildMapperDynamically(java.lang.String,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.mapper.CGLIBMapper", $r17, $r18)
com.thoughtworks.xstream.XStream.buildMapper : r14 = specialinvoke r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper buildMapperDynamically(java.lang.String,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.mapper.CGLIBMapper", $r17, $r18) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapperDynamically : $r6 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference>
com.thoughtworks.xstream.XStream.buildMapperDynamically : $r6 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference> >>>>>>>> com.thoughtworks.xstream.XStream.buildMapperDynamically : $r7 = virtualinvoke $r6.<com.thoughtworks.xstream.core.util.ClassLoaderReference: java.lang.ClassLoader getReference()>()
com.thoughtworks.xstream.XStream.buildMapperDynamically : $r7 = virtualinvoke $r6.<com.thoughtworks.xstream.core.util.ClassLoaderReference: java.lang.ClassLoader getReference()>() >>>>>>>> com.thoughtworks.xstream.core.util.ClassLoaderReference.getReference : $r1 = r0.<com.thoughtworks.xstream.core.util.ClassLoaderReference: java.lang.ClassLoader reference>
com.thoughtworks.xstream.core.util.ClassLoaderReference.getReference : $r1 = r0.<com.thoughtworks.xstream.core.util.ClassLoaderReference: java.lang.ClassLoader reference> >>>>>>>> com.thoughtworks.xstream.core.util.ClassLoaderReference.getReference : return $r1
com.thoughtworks.xstream.core.util.ClassLoaderReference.getReference : return $r1 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapperDynamically : r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, $r7)
com.thoughtworks.xstream.XStream.buildMapperDynamically : r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, $r7) >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : $r5 = r0.<com.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders>
com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : $r5 = r0.<com.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders> >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : if $z0 == 0
com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : r3 = (java.lang.ClassLoader) $r6
com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : r3 = (java.lang.ClassLoader) $r6 >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : $r7 = virtualinvoke r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1)
com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : $r7 = virtualinvoke r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : return $r7
com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : return $r7 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapperDynamically : r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r2)
com.thoughtworks.xstream.XStream.buildMapperDynamically : r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r2) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapperDynamically : $r8 = virtualinvoke r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r3)
com.thoughtworks.xstream.XStream.buildMapperDynamically : $r8 = virtualinvoke r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r3) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapperDynamically : $r9 = (com.thoughtworks.xstream.mapper.Mapper) $r8
com.thoughtworks.xstream.XStream.buildMapperDynamically : $r9 = (com.thoughtworks.xstream.mapper.Mapper) $r8 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapperDynamically : return $r9
com.thoughtworks.xstream.XStream.buildMapperDynamically : return $r9 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r19 = new com.thoughtworks.xstream.mapper.DynamicProxyMapper
com.thoughtworks.xstream.XStream.buildMapper : $r19 = new com.thoughtworks.xstream.mapper.DynamicProxyMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r19.<com.thoughtworks.xstream.mapper.DynamicProxyMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r14)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r19.<com.thoughtworks.xstream.mapper.DynamicProxyMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r14) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r20 = $r19
com.thoughtworks.xstream.XStream.buildMapper : r20 = $r19 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>()
com.thoughtworks.xstream.XStream.buildMapper : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : $f0 = <com.thoughtworks.xstream.core.JVM: float majorJavaVersion>
com.thoughtworks.xstream.core.JVM.is15 : $f0 = <com.thoughtworks.xstream.core.JVM: float majorJavaVersion> >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : $b0 = $f0 cmpl 1.5F
com.thoughtworks.xstream.core.JVM.is15 : $b0 = $f0 cmpl 1.5F >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : if $b0 < 0
com.thoughtworks.xstream.core.JVM.is15 : if $b0 < 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : $z0 = 1
com.thoughtworks.xstream.core.JVM.is15 : $z0 = 1 >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : goto [?= return $z0]
com.thoughtworks.xstream.core.JVM.is15 : goto [?= return $z0] >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : return $z0
com.thoughtworks.xstream.core.JVM.is15 : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : if $z1 == 0
com.thoughtworks.xstream.XStream.buildMapper : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r21 = new com.thoughtworks.xstream.mapper.EnumMapper
com.thoughtworks.xstream.XStream.buildMapper : $r21 = new com.thoughtworks.xstream.mapper.EnumMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r21.<com.thoughtworks.xstream.mapper.EnumMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r20)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r21.<com.thoughtworks.xstream.mapper.EnumMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r20) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r20 = $r21
com.thoughtworks.xstream.XStream.buildMapper : r20 = $r21 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r22 = new com.thoughtworks.xstream.mapper.OuterClassMapper
com.thoughtworks.xstream.XStream.buildMapper : $r22 = new com.thoughtworks.xstream.mapper.OuterClassMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r22.<com.thoughtworks.xstream.mapper.OuterClassMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r20)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r22.<com.thoughtworks.xstream.mapper.OuterClassMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r20) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r23 = $r22
com.thoughtworks.xstream.XStream.buildMapper : r23 = $r22 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r24 = new com.thoughtworks.xstream.mapper.ArrayMapper
com.thoughtworks.xstream.XStream.buildMapper : $r24 = new com.thoughtworks.xstream.mapper.ArrayMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r24.<com.thoughtworks.xstream.mapper.ArrayMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r23)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r24.<com.thoughtworks.xstream.mapper.ArrayMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r23) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r25 = $r24
com.thoughtworks.xstream.XStream.buildMapper : r25 = $r24 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r26 = new com.thoughtworks.xstream.mapper.DefaultImplementationsMapper
com.thoughtworks.xstream.XStream.buildMapper : $r26 = new com.thoughtworks.xstream.mapper.DefaultImplementationsMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r26.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r25)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r26.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r25) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(null, class "com/thoughtworks/xstream/mapper/Mapper$Null")
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(null, class "com/thoughtworks/xstream/mapper/Mapper$Null") >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : $r3 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map typeToImpl>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : $r3 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map typeToImpl> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : $r5 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map implToType>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : $r5 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map implToType> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r1 = <java.lang.Boolean: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r1 = <java.lang.Boolean: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Boolean", $r1)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Boolean", $r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r2 = <java.lang.Character: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r2 = <java.lang.Character: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Character", $r2)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Character", $r2) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r3 = <java.lang.Integer: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r3 = <java.lang.Integer: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Integer", $r3)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Integer", $r3) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r4 = <java.lang.Float: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r4 = <java.lang.Float: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Float", $r4)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Float", $r4) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r5 = <java.lang.Double: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r5 = <java.lang.Double: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Double", $r5)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Double", $r5) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r6 = <java.lang.Short: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r6 = <java.lang.Short: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Short", $r6)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Short", $r6) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r7 = <java.lang.Byte: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r7 = <java.lang.Byte: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Byte", $r7)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Byte", $r7) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r8 = <java.lang.Long: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r8 = <java.lang.Long: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Long", $r8)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Long", $r8) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r27 = $r26
com.thoughtworks.xstream.XStream.buildMapper : r27 = $r26 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r28 = new com.thoughtworks.xstream.mapper.ImmutableTypesMapper
com.thoughtworks.xstream.XStream.buildMapper : $r28 = new com.thoughtworks.xstream.mapper.ImmutableTypesMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r28.<com.thoughtworks.xstream.mapper.ImmutableTypesMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r27)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r28.<com.thoughtworks.xstream.mapper.ImmutableTypesMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r27) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r29 = $r28
com.thoughtworks.xstream.XStream.buildMapper : r29 = $r28 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r30 = (com.thoughtworks.xstream.mapper.MapperWrapper) r29
com.thoughtworks.xstream.XStream.buildMapper : $r30 = (com.thoughtworks.xstream.mapper.MapperWrapper) r29 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r31 = virtualinvoke r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.MapperWrapper wrapMapper(com.thoughtworks.xstream.mapper.MapperWrapper)>($r30)
com.thoughtworks.xstream.XStream.buildMapper : r31 = virtualinvoke r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.MapperWrapper wrapMapper(com.thoughtworks.xstream.mapper.MapperWrapper)>($r30) >>>>>>>> com.thoughtworks.xstream.XStream.wrapMapper : return r1
com.thoughtworks.xstream.XStream.wrapMapper : return r1 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r32 = new com.thoughtworks.xstream.mapper.CachingMapper
com.thoughtworks.xstream.XStream.buildMapper : $r32 = new com.thoughtworks.xstream.mapper.CachingMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r32.<com.thoughtworks.xstream.mapper.CachingMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r31)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r32.<com.thoughtworks.xstream.mapper.CachingMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r31) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r33 = $r32
com.thoughtworks.xstream.XStream.buildMapper : r33 = $r32 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : return r33
com.thoughtworks.xstream.XStream.buildMapper : return r33 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r1 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupMappers : $r1 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r2 = interfaceinvoke $r1.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/ClassAliasingMapper")
com.thoughtworks.xstream.XStream.setupMappers : $r2 = interfaceinvoke $r1.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/ClassAliasingMapper") >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2)
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : if $z0 == 0
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r4 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r4 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r3 = interfaceinvoke $r4.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r3 = interfaceinvoke $r4.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r3 = r0
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r3 = r0 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : goto [?= return $r3]
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : goto [?= return $r3] >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : return $r3
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : return $r3 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r3 = (com.thoughtworks.xstream.mapper.ClassAliasingMapper) $r2
com.thoughtworks.xstream.XStream.setupMappers : $r3 = (com.thoughtworks.xstream.mapper.ClassAliasingMapper) $r2 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper> = $r3
com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper> = $r3 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupMappers : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r5 = interfaceinvoke $r4.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/FieldAliasingMapper")
com.thoughtworks.xstream.XStream.setupMappers : $r5 = interfaceinvoke $r4.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/FieldAliasingMapper") >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r6 = (com.thoughtworks.xstream.mapper.FieldAliasingMapper) $r5
com.thoughtworks.xstream.XStream.setupMappers : $r6 = (com.thoughtworks.xstream.mapper.FieldAliasingMapper) $r5 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.FieldAliasingMapper fieldAliasingMapper> = $r6
com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.FieldAliasingMapper fieldAliasingMapper> = $r6 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r7 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupMappers : $r7 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r8 = interfaceinvoke $r7.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/AttributeMapper")
com.thoughtworks.xstream.XStream.setupMappers : $r8 = interfaceinvoke $r7.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/AttributeMapper") >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r9 = (com.thoughtworks.xstream.mapper.AttributeMapper) $r8
com.thoughtworks.xstream.XStream.setupMappers : $r9 = (com.thoughtworks.xstream.mapper.AttributeMapper) $r8 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.AttributeMapper attributeMapper> = $r9
com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.AttributeMapper attributeMapper> = $r9 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r10 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupMappers : $r10 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r11 = interfaceinvoke $r10.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/AttributeAliasingMapper")
com.thoughtworks.xstream.XStream.setupMappers : $r11 = interfaceinvoke $r10.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/AttributeAliasingMapper") >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r12 = (com.thoughtworks.xstream.mapper.AttributeAliasingMapper) $r11
com.thoughtworks.xstream.XStream.setupMappers : $r12 = (com.thoughtworks.xstream.mapper.AttributeAliasingMapper) $r11 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.AttributeAliasingMapper attributeAliasingMapper> = $r12
com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.AttributeAliasingMapper attributeAliasingMapper> = $r12 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r13 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupMappers : $r13 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r14 = interfaceinvoke $r13.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/ImplicitCollectionMapper")
com.thoughtworks.xstream.XStream.setupMappers : $r14 = interfaceinvoke $r13.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/ImplicitCollectionMapper") >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r15 = (com.thoughtworks.xstream.mapper.ImplicitCollectionMapper) $r14
com.thoughtworks.xstream.XStream.setupMappers : $r15 = (com.thoughtworks.xstream.mapper.ImplicitCollectionMapper) $r14 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper implicitCollectionMapper> = $r15
com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper implicitCollectionMapper> = $r15 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r16 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupMappers : $r16 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r17 = interfaceinvoke $r16.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/DefaultImplementationsMapper")
com.thoughtworks.xstream.XStream.setupMappers : $r17 = interfaceinvoke $r16.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/DefaultImplementationsMapper") >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r18 = (com.thoughtworks.xstream.mapper.DefaultImplementationsMapper) $r17
com.thoughtworks.xstream.XStream.setupMappers : $r18 = (com.thoughtworks.xstream.mapper.DefaultImplementationsMapper) $r17 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper> = $r18
com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper> = $r18 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r19 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupMappers : $r19 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r20 = interfaceinvoke $r19.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/ImmutableTypesMapper")
com.thoughtworks.xstream.XStream.setupMappers : $r20 = interfaceinvoke $r19.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/ImmutableTypesMapper") >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r21 = (com.thoughtworks.xstream.mapper.ImmutableTypesMapper) $r20
com.thoughtworks.xstream.XStream.setupMappers : $r21 = (com.thoughtworks.xstream.mapper.ImmutableTypesMapper) $r20 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper> = $r21
com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper> = $r21 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r22 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.AttributeMapper attributeMapper>
com.thoughtworks.xstream.XStream.setupMappers : $r22 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.AttributeMapper attributeMapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : if $r22 == null
com.thoughtworks.xstream.XStream.setupMappers : if $r22 == null >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r23 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.AttributeMapper attributeMapper>
com.thoughtworks.xstream.XStream.setupMappers : $r23 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.AttributeMapper attributeMapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r24 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup>
com.thoughtworks.xstream.XStream.setupMappers : $r24 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : virtualinvoke $r23.<com.thoughtworks.xstream.mapper.AttributeMapper: void setConverterLookup(com.thoughtworks.xstream.converters.ConverterLookup)>($r24)
com.thoughtworks.xstream.XStream.setupMappers : virtualinvoke $r23.<com.thoughtworks.xstream.mapper.AttributeMapper: void setConverterLookup(com.thoughtworks.xstream.converters.ConverterLookup)>($r24) >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.setConverterLookup : r0.<com.thoughtworks.xstream.mapper.AttributeMapper: com.thoughtworks.xstream.converters.ConverterLookup converterLookup> = r1
com.thoughtworks.xstream.mapper.AttributeMapper.setConverterLookup : r0.<com.thoughtworks.xstream.mapper.AttributeMapper: com.thoughtworks.xstream.converters.ConverterLookup converterLookup> = r1 >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r2 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper>
com.thoughtworks.xstream.XStream.setupAliases : $r2 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : if $r2 != null
com.thoughtworks.xstream.XStream.setupAliases : if $r2 != null >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("null", class "com/thoughtworks/xstream/mapper/Mapper$Null")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("null", class "com/thoughtworks/xstream/mapper/Mapper$Null") >>>>>>>> com.thoughtworks.xstream.XStream.alias : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper>
com.thoughtworks.xstream.XStream.alias : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper> >>>>>>>> com.thoughtworks.xstream.XStream.alias : if $r4 != null
com.thoughtworks.xstream.XStream.alias : if $r4 != null >>>>>>>> com.thoughtworks.xstream.XStream.alias : $r12 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper>
com.thoughtworks.xstream.XStream.alias : $r12 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper> >>>>>>>> com.thoughtworks.xstream.XStream.alias : virtualinvoke $r12.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: void addClassAlias(java.lang.String,java.lang.Class)>(r1, r2)
com.thoughtworks.xstream.XStream.alias : virtualinvoke $r12.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: void addClassAlias(java.lang.String,java.lang.Class)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : $r3 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map nameToType>
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : $r3 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map nameToType> >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : $r4 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : $r4 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4)
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4) >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : $r6 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map classToName>
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : $r6 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map classToName> >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : $r7 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : $r7 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r1)
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r1) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("int", class "java/lang/Integer")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("int", class "java/lang/Integer") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("float", class "java/lang/Float")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("float", class "java/lang/Float") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("double", class "java/lang/Double")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("double", class "java/lang/Double") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("long", class "java/lang/Long")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("long", class "java/lang/Long") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("short", class "java/lang/Short")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("short", class "java/lang/Short") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("char", class "java/lang/Character")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("char", class "java/lang/Character") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("byte", class "java/lang/Byte")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("byte", class "java/lang/Byte") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("boolean", class "java/lang/Boolean")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("boolean", class "java/lang/Boolean") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("number", class "java/lang/Number")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("number", class "java/lang/Number") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("object", class "java/lang/Object")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("object", class "java/lang/Object") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("big-int", class "java/math/BigInteger")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("big-int", class "java/math/BigInteger") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("big-decimal", class "java/math/BigDecimal")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("big-decimal", class "java/math/BigDecimal") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("string-buffer", class "java/lang/StringBuffer")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("string-buffer", class "java/lang/StringBuffer") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("string", class "java/lang/String")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("string", class "java/lang/String") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("java-class", class "java/lang/Class")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("java-class", class "java/lang/Class") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("method", class "java/lang/reflect/Method")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("method", class "java/lang/reflect/Method") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("constructor", class "java/lang/reflect/Constructor")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("constructor", class "java/lang/reflect/Constructor") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("date", class "java/util/Date")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("date", class "java/util/Date") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("url", class "java/net/URL")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("url", class "java/net/URL") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("bit-set", class "java/util/BitSet")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("bit-set", class "java/util/BitSet") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("map", class "java/util/Map")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("map", class "java/util/Map") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("entry", class "java/util/Map$Entry")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("entry", class "java/util/Map$Entry") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("properties", class "java/util/Properties")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("properties", class "java/util/Properties") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("list", class "java/util/List")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("list", class "java/util/List") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("set", class "java/util/Set")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("set", class "java/util/Set") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("linked-list", class "java/util/LinkedList")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("linked-list", class "java/util/LinkedList") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("vector", class "java/util/Vector")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("vector", class "java/util/Vector") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("tree-map", class "java/util/TreeMap")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("tree-map", class "java/util/TreeMap") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("tree-set", class "java/util/TreeSet")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("tree-set", class "java/util/TreeSet") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("hashtable", class "java/util/Hashtable")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("hashtable", class "java/util/Hashtable") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.awt.Color")
com.thoughtworks.xstream.XStream.setupAliases : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.awt.Color") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("awt-color", $r4)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("awt-color", $r4) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r5 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r5 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r6 = virtualinvoke $r5.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.awt.Font")
com.thoughtworks.xstream.XStream.setupAliases : $r6 = virtualinvoke $r5.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.awt.Font") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("awt-font", $r6)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("awt-font", $r6) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("awt-text-attribute", class "java/awt/font/TextAttribute")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("awt-text-attribute", class "java/awt/font/TextAttribute") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("sql-timestamp", class "java/sql/Timestamp")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("sql-timestamp", class "java/sql/Timestamp") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("sql-time", class "java/sql/Time")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("sql-time", class "java/sql/Time") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("sql-date", class "java/sql/Date")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("sql-date", class "java/sql/Date") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("file", class "java/io/File")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("file", class "java/io/File") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("locale", class "java/util/Locale")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("locale", class "java/util/Locale") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("gregorian-calendar", class "java/util/Calendar")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("gregorian-calendar", class "java/util/Calendar") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r7 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r7 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : r1 = virtualinvoke $r7.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("javax.security.auth.Subject")
com.thoughtworks.xstream.XStream.setupAliases : r1 = virtualinvoke $r7.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("javax.security.auth.Subject") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : if r1 == null
com.thoughtworks.xstream.XStream.setupAliases : if r1 == null >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("auth-subject", r1)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("auth-subject", r1) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>()
com.thoughtworks.xstream.XStream.setupAliases : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.is14 : $f0 = <com.thoughtworks.xstream.core.JVM: float majorJavaVersion>
com.thoughtworks.xstream.core.JVM.is14 : $f0 = <com.thoughtworks.xstream.core.JVM: float majorJavaVersion> >>>>>>>> com.thoughtworks.xstream.core.JVM.is14 : $b0 = $f0 cmpl 1.4F
com.thoughtworks.xstream.core.JVM.is14 : $b0 = $f0 cmpl 1.4F >>>>>>>> com.thoughtworks.xstream.core.JVM.is14 : if $b0 < 0
com.thoughtworks.xstream.core.JVM.is14 : if $b0 < 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.is14 : $z0 = 1
com.thoughtworks.xstream.core.JVM.is14 : $z0 = 1 >>>>>>>> com.thoughtworks.xstream.core.JVM.is14 : goto [?= return $z0]
com.thoughtworks.xstream.core.JVM.is14 : goto [?= return $z0] >>>>>>>> com.thoughtworks.xstream.core.JVM.is14 : return $z0
com.thoughtworks.xstream.core.JVM.is14 : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : if $z0 == 0
com.thoughtworks.xstream.XStream.setupAliases : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r8 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r8 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r9 = virtualinvoke $r8.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.LinkedHashMap")
com.thoughtworks.xstream.XStream.setupAliases : $r9 = virtualinvoke $r8.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.LinkedHashMap") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("linked-hash-map", $r9)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("linked-hash-map", $r9) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r10 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r10 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r11 = virtualinvoke $r10.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.LinkedHashSet")
com.thoughtworks.xstream.XStream.setupAliases : $r11 = virtualinvoke $r10.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.LinkedHashSet") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("linked-hash-set", $r11)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("linked-hash-set", $r11) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r12 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r12 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r13 = virtualinvoke $r12.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.lang.StackTraceElement")
com.thoughtworks.xstream.XStream.setupAliases : $r13 = virtualinvoke $r12.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.lang.StackTraceElement") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("trace", $r13)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("trace", $r13) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r14 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r14 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r15 = virtualinvoke $r14.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.Currency")
com.thoughtworks.xstream.XStream.setupAliases : $r15 = virtualinvoke $r14.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.Currency") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("currency", $r15)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("currency", $r15) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r16 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r16 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r17 = virtualinvoke $r16.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.nio.charset.Charset")
com.thoughtworks.xstream.XStream.setupAliases : $r17 = virtualinvoke $r16.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.nio.charset.Charset") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void aliasType(java.lang.String,java.lang.Class)>("charset", $r17)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void aliasType(java.lang.String,java.lang.Class)>("charset", $r17) >>>>>>>> com.thoughtworks.xstream.XStream.aliasType : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper>
com.thoughtworks.xstream.XStream.aliasType : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper> >>>>>>>> com.thoughtworks.xstream.XStream.aliasType : if $r4 != null
com.thoughtworks.xstream.XStream.aliasType : if $r4 != null >>>>>>>> com.thoughtworks.xstream.XStream.aliasType : $r12 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper>
com.thoughtworks.xstream.XStream.aliasType : $r12 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper> >>>>>>>> com.thoughtworks.xstream.XStream.aliasType : virtualinvoke $r12.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: void addTypeAlias(java.lang.String,java.lang.Class)>(r1, r2)
com.thoughtworks.xstream.XStream.aliasType : virtualinvoke $r12.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: void addTypeAlias(java.lang.String,java.lang.Class)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : $r3 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map nameToType>
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : $r3 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map nameToType> >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : $r4 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : $r4 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4)
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4) >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : $r6 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map typeToName>
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : $r6 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map typeToName> >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1)
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>()
com.thoughtworks.xstream.XStream.setupAliases : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : if $z1 == 0
com.thoughtworks.xstream.XStream.setupAliases : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r18 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r18 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r19 = virtualinvoke $r18.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.EnumSet")
com.thoughtworks.xstream.XStream.setupAliases : $r19 = virtualinvoke $r18.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.EnumSet") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("enum-set", $r19)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("enum-set", $r19) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r20 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r20 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r21 = virtualinvoke $r20.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.EnumMap")
com.thoughtworks.xstream.XStream.setupAliases : $r21 = virtualinvoke $r20.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.EnumMap") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("enum-map", $r21)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("enum-map", $r21) >>>>>>>> com.thoughtworks.xstream.XStream.setupDefaultImplementations : $r1 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper>
com.thoughtworks.xstream.XStream.setupDefaultImplementations : $r1 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupDefaultImplementations : if $r1 != null
com.thoughtworks.xstream.XStream.setupDefaultImplementations : if $r1 != null >>>>>>>> com.thoughtworks.xstream.XStream.setupDefaultImplementations : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/util/HashMap", class "java/util/Map")
com.thoughtworks.xstream.XStream.setupDefaultImplementations : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/util/HashMap", class "java/util/Map") >>>>>>>> com.thoughtworks.xstream.XStream.addDefaultImplementation : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper>
com.thoughtworks.xstream.XStream.addDefaultImplementation : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper> >>>>>>>> com.thoughtworks.xstream.XStream.addDefaultImplementation : if $r4 != null
com.thoughtworks.xstream.XStream.addDefaultImplementation : if $r4 != null >>>>>>>> com.thoughtworks.xstream.XStream.addDefaultImplementation : $r12 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper>
com.thoughtworks.xstream.XStream.addDefaultImplementation : $r12 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper> >>>>>>>> com.thoughtworks.xstream.XStream.addDefaultImplementation : virtualinvoke $r12.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(r1, r2)
com.thoughtworks.xstream.XStream.addDefaultImplementation : virtualinvoke $r12.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.XStream.setupDefaultImplementations : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/util/ArrayList", class "java/util/List")
com.thoughtworks.xstream.XStream.setupDefaultImplementations : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/util/ArrayList", class "java/util/List") >>>>>>>> com.thoughtworks.xstream.XStream.setupDefaultImplementations : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/util/HashSet", class "java/util/Set")
com.thoughtworks.xstream.XStream.setupDefaultImplementations : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/util/HashSet", class "java/util/Set") >>>>>>>> com.thoughtworks.xstream.XStream.setupDefaultImplementations : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/util/GregorianCalendar", class "java/util/Calendar")
com.thoughtworks.xstream.XStream.setupDefaultImplementations : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/util/GregorianCalendar", class "java/util/Calendar") >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>()
com.thoughtworks.xstream.XStream.setupConverters : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : if $z0 == 0
com.thoughtworks.xstream.XStream.setupConverters : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupConverters : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : r1 = virtualinvoke $r3.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("com.thoughtworks.xstream.annotations.AnnotationProvider")
com.thoughtworks.xstream.XStream.setupConverters : r1 = virtualinvoke $r3.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("com.thoughtworks.xstream.annotations.AnnotationProvider") >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r4 = newarray (java.lang.Class)[3]
com.thoughtworks.xstream.XStream.setupConverters : $r4 = newarray (java.lang.Class)[3] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r4[0] = class "com/thoughtworks/xstream/mapper/Mapper"
com.thoughtworks.xstream.XStream.setupConverters : $r4[0] = class "com/thoughtworks/xstream/mapper/Mapper" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r4[1] = class "com/thoughtworks/xstream/converters/reflection/ReflectionProvider"
com.thoughtworks.xstream.XStream.setupConverters : $r4[1] = class "com/thoughtworks/xstream/converters/reflection/ReflectionProvider" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r4[2] = r1
com.thoughtworks.xstream.XStream.setupConverters : $r4[2] = r1 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r5 = newarray (java.lang.Object)[3]
com.thoughtworks.xstream.XStream.setupConverters : $r5 = newarray (java.lang.Object)[3] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r6 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r6 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r5[0] = $r6
com.thoughtworks.xstream.XStream.setupConverters : $r5[0] = $r6 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r7 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.XStream.setupConverters : $r7 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r5[1] = $r7
com.thoughtworks.xstream.XStream.setupConverters : $r5[1] = $r7 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r8 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.XStream.setupConverters : $r8 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r9 = interfaceinvoke $r8.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: java.lang.Object newInstance(java.lang.Class)>(r1)
com.thoughtworks.xstream.XStream.setupConverters : $r9 = interfaceinvoke $r8.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: java.lang.Object newInstance(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : i0 = 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : i0 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $i1 = lengthof r2
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $i1 = lengthof r2 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : if i0 >= $i1
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : if i0 >= $i1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r4 = r2[i0]
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r4 = r2[i0] >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r5 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r5 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $i2 = lengthof $r5
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $i2 = lengthof $r5 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : if $i2 != 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : if $i2 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r6 = r2[i0]
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r6 = r2[i0] >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $i3 = virtualinvoke $r6.<java.lang.reflect.Constructor: int getModifiers()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $i3 = virtualinvoke $r6.<java.lang.reflect.Constructor: int getModifiers()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i3)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : if $z0 != 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r8 = r2[i0]
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r8 = r2[i0] >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r9 = newarray (java.lang.Object)[0]
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r9 = newarray (java.lang.Object)[0] >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r10 = virtualinvoke $r8.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r10 = virtualinvoke $r8.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : return $r10
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : return $r10 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r5[2] = $r9
com.thoughtworks.xstream.XStream.setupConverters : $r5[2] = $r9 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.annotations.AnnotationReflectionConverter", -20, $r4, $r5)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.annotations.AnnotationReflectionConverter", -20, $r4, $r5) >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $r7 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference>
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $r7 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference> >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $r8 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.ClassLoaderReference: java.lang.ClassLoader getReference()>()
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $r8 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.ClassLoaderReference: java.lang.ClassLoader getReference()>() >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, $r8)
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, $r8) >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r2)
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r2) >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : r6 = virtualinvoke r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r3)
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : r6 = virtualinvoke r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r3) >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $z0 = r6 instanceof com.thoughtworks.xstream.converters.Converter
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $z0 = r6 instanceof com.thoughtworks.xstream.converters.Converter >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : if $z0 == 0
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $r9 = (com.thoughtworks.xstream.converters.Converter) r6
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $r9 = (com.thoughtworks.xstream.converters.Converter) r6 >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r9, i0)
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r9, i0) >>>>>>>> com.thoughtworks.xstream.XStream.registerConverter : $r2 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup>
com.thoughtworks.xstream.XStream.registerConverter : $r2 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup> >>>>>>>> com.thoughtworks.xstream.XStream.registerConverter : virtualinvoke $r2.<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>(r1, i0)
com.thoughtworks.xstream.XStream.registerConverter : virtualinvoke $r2.<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>(r1, i0) >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r4 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.core.util.PrioritizedList converters>
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r4 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.core.util.PrioritizedList converters> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList: void add(java.lang.Object,int)>(r1, i0)
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList: void add(java.lang.Object,int)>(r1, i0) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $i1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority>
com.thoughtworks.xstream.core.util.PrioritizedList.add : $i1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : if $i1 <= i0
com.thoughtworks.xstream.core.util.PrioritizedList.add : if $i1 <= i0 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority> = i0
com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority> = i0 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $r3 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Set set>
com.thoughtworks.xstream.core.util.PrioritizedList.add : $r3 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Set set> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $r4 = new com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem
com.thoughtworks.xstream.core.util.PrioritizedList.add : $r4 = new com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $i2 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId>
com.thoughtworks.xstream.core.util.PrioritizedList.add : $i2 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $i3 = $i2 + 1
com.thoughtworks.xstream.core.util.PrioritizedList.add : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId> = $i3
com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId> = $i3 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : specialinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: void <init>(java.lang.Object,int,int)>(r1, i0, $i3)
com.thoughtworks.xstream.core.util.PrioritizedList.add : specialinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: void <init>(java.lang.Object,int,int)>(r1, i0, $i3) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4)
com.thoughtworks.xstream.core.util.PrioritizedList.add : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : r2 = (com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem) r1
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : r2 = (com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem) r1 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i0 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i0 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i1 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i1 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : if $i0 == $i1
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : if $i0 == $i1 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i5 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i5 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i6 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i6 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i7 = $i5 - $i6
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i7 = $i5 - $i6 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : return $i7
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : return $i7 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r5 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap>
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r5 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : if $z0 == 0
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : goto [?= (branch)]
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : goto [?= return]
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : goto [?= return] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r10 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup>
com.thoughtworks.xstream.XStream.setupConverters : $r10 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r11 = virtualinvoke $r10.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)>(class "java/lang/Object")
com.thoughtworks.xstream.XStream.setupConverters : $r11 = virtualinvoke $r10.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)>(class "java/lang/Object") >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r6 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap>
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r6 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : r2 = (com.thoughtworks.xstream.converters.Converter) $r7
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : r2 = (com.thoughtworks.xstream.converters.Converter) $r7 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : if r2 == null
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : if r2 == null >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r8 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r8 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : r3 = interfaceinvoke $r8.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class defaultImplementationOf(java.lang.Class)>(r1)
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : r3 = interfaceinvoke $r8.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class defaultImplementationOf(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.defaultImplementationOf : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.defaultImplementationOf : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.defaultImplementationOf : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class defaultImplementationOf(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.MapperWrapper.defaultImplementationOf : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class defaultImplementationOf(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : $r2 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map typeToImpl>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : $r2 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map typeToImpl> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : if $z0 == 0
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : $r6 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.Class defaultImplementationOf(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : $r6 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.Class defaultImplementationOf(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultMapper.defaultImplementationOf : return r1
com.thoughtworks.xstream.mapper.DefaultMapper.defaultImplementationOf : return r1 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.defaultImplementationOf : return $r3
com.thoughtworks.xstream.mapper.MapperWrapper.defaultImplementationOf : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : return $r6
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : return $r6 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r9 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.core.util.PrioritizedList converters>
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r9 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.core.util.PrioritizedList converters> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : r4 = virtualinvoke $r9.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Iterator iterator()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : r4 = virtualinvoke $r9.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.iterator : $r1 = new com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator
com.thoughtworks.xstream.core.util.PrioritizedList.iterator : $r1 = new com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.iterator : $r2 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Set set>
com.thoughtworks.xstream.core.util.PrioritizedList.iterator : $r2 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Set set> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.iterator : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>()
com.thoughtworks.xstream.core.util.PrioritizedList.iterator : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.iterator : specialinvoke $r1.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator: void <init>(java.util.Iterator)>($r3)
com.thoughtworks.xstream.core.util.PrioritizedList.iterator : specialinvoke $r1.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator: void <init>(java.util.Iterator)>($r3) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.iterator : return $r1
com.thoughtworks.xstream.core.util.PrioritizedList.iterator : return $r1 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.hasNext : $r1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator: java.util.Iterator iterator>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.hasNext : $r1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator: java.util.Iterator iterator> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.hasNext : $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.hasNext : $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.hasNext : return $z0
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.hasNext : return $z0 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : if $z0 == 0
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : $r1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator: java.util.Iterator iterator>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : $r1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator: java.util.Iterator iterator> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>()
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : $r3 = (com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem) $r2
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : $r3 = (com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem) $r2 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : $r4 = $r3.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: java.lang.Object value>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : $r4 = $r3.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: java.lang.Object value> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : return $r4
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : return $r4 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : r5 = (com.thoughtworks.xstream.converters.Converter) $r10
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : r5 = (com.thoughtworks.xstream.converters.Converter) $r10 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $z1 = interfaceinvoke r5.<com.thoughtworks.xstream.converters.Converter: boolean canConvert(java.lang.Class)>(r3)
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $z1 = interfaceinvoke r5.<com.thoughtworks.xstream.converters.Converter: boolean canConvert(java.lang.Class)>(r3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.ReflectionConverter.canConvert : return 1
com.thoughtworks.xstream.converters.reflection.ReflectionConverter.canConvert : return 1 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : if $z1 == 0
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r11 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap>
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r11 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5)
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5) >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : return r5
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : return r5 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : r2 = (com.thoughtworks.xstream.converters.reflection.ReflectionConverter) $r11
com.thoughtworks.xstream.XStream.setupConverters : r2 = (com.thoughtworks.xstream.converters.reflection.ReflectionConverter) $r11 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : goto [?= $r15 = new com.thoughtworks.xstream.converters.reflection.SerializableConverter]
com.thoughtworks.xstream.XStream.setupConverters : goto [?= $r15 = new com.thoughtworks.xstream.converters.reflection.SerializableConverter] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r15 = new com.thoughtworks.xstream.converters.reflection.SerializableConverter
com.thoughtworks.xstream.XStream.setupConverters : $r15 = new com.thoughtworks.xstream.converters.reflection.SerializableConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r16 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r16 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r17 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.XStream.setupConverters : $r17 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r15.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.reflection.ReflectionProvider)>($r16, $r17)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r15.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.reflection.ReflectionProvider)>($r16, $r17) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r15, -10)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r15, -10) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i2 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i2 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i3 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i3 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i4 = $i2 - $i3
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i4 = $i2 - $i3 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : return $i4
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : return $i4 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : r3 = (java.lang.Class) $r7
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : r3 = (java.lang.Class) $r7 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $z1 = interfaceinvoke r1.<com.thoughtworks.xstream.converters.Converter: boolean canConvert(java.lang.Class)>(r3)
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $z1 = interfaceinvoke r1.<com.thoughtworks.xstream.converters.Converter: boolean canConvert(java.lang.Class)>(r3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.canConvert : $z0 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: boolean isSerializable(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.reflection.SerializableConverter.canConvert : $z0 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: boolean isSerializable(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $r2 = class "java/io/Serializable"
com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $r2 = class "java/io/Serializable" >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : if $z0 == 0
com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $z3 = 0
com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $z3 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : return $z3
com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : return $z3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.reflection.SerializableConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : if $z1 == 0
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r18 = new com.thoughtworks.xstream.converters.reflection.ExternalizableConverter
com.thoughtworks.xstream.XStream.setupConverters : $r18 = new com.thoughtworks.xstream.converters.reflection.ExternalizableConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r19 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r19 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r18.<com.thoughtworks.xstream.converters.reflection.ExternalizableConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r19)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r18.<com.thoughtworks.xstream.converters.reflection.ExternalizableConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r19) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r18, -10)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r18, -10) >>>>>>>> com.thoughtworks.xstream.converters.reflection.ExternalizableConverter.canConvert : $r2 = class "java/io/Externalizable"
com.thoughtworks.xstream.converters.reflection.ExternalizableConverter.canConvert : $r2 = class "java/io/Externalizable" >>>>>>>> com.thoughtworks.xstream.converters.reflection.ExternalizableConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.reflection.ExternalizableConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.ExternalizableConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.reflection.ExternalizableConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r20 = new com.thoughtworks.xstream.converters.basic.NullConverter
com.thoughtworks.xstream.XStream.setupConverters : $r20 = new com.thoughtworks.xstream.converters.basic.NullConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r20.<com.thoughtworks.xstream.converters.basic.NullConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r20.<com.thoughtworks.xstream.converters.basic.NullConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r20, 10000)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r20, 10000) >>>>>>>> com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : if r1 == null
com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : if r1 == null >>>>>>>> com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : $r2 = class "com/thoughtworks/xstream/mapper/Mapper$Null"
com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : $r2 = class "com/thoughtworks/xstream/mapper/Mapper$Null" >>>>>>>> com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : if $z0 == 0
com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : $z1 = 0
com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : $z1 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : return $z1
com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : return $z1 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r21 = new com.thoughtworks.xstream.converters.basic.IntConverter
com.thoughtworks.xstream.XStream.setupConverters : $r21 = new com.thoughtworks.xstream.converters.basic.IntConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r21.<com.thoughtworks.xstream.converters.basic.IntConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r21.<com.thoughtworks.xstream.converters.basic.IntConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r21, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r21, 0) >>>>>>>> com.thoughtworks.xstream.XStream.registerConverter : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup>
com.thoughtworks.xstream.XStream.registerConverter : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup> >>>>>>>> com.thoughtworks.xstream.XStream.registerConverter : $r2 = new com.thoughtworks.xstream.converters.SingleValueConverterWrapper
com.thoughtworks.xstream.XStream.registerConverter : $r2 = new com.thoughtworks.xstream.converters.SingleValueConverterWrapper >>>>>>>> com.thoughtworks.xstream.XStream.registerConverter : specialinvoke $r2.<com.thoughtworks.xstream.converters.SingleValueConverterWrapper: void <init>(com.thoughtworks.xstream.converters.SingleValueConverter)>(r1)
com.thoughtworks.xstream.XStream.registerConverter : specialinvoke $r2.<com.thoughtworks.xstream.converters.SingleValueConverterWrapper: void <init>(com.thoughtworks.xstream.converters.SingleValueConverter)>(r1) >>>>>>>> com.thoughtworks.xstream.XStream.registerConverter : virtualinvoke $r3.<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r2, i0)
com.thoughtworks.xstream.XStream.registerConverter : virtualinvoke $r3.<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r2, i0) >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.canConvert : $r2 = r0.<com.thoughtworks.xstream.converters.SingleValueConverterWrapper: com.thoughtworks.xstream.converters.SingleValueConverter wrapped>
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.canConvert : $r2 = r0.<com.thoughtworks.xstream.converters.SingleValueConverterWrapper: com.thoughtworks.xstream.converters.SingleValueConverter wrapped> >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.canConvert : $z0 = interfaceinvoke $r2.<com.thoughtworks.xstream.converters.SingleValueConverter: boolean canConvert(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.canConvert : $z0 = interfaceinvoke $r2.<com.thoughtworks.xstream.converters.SingleValueConverter: boolean canConvert(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : $r2 = <java.lang.Integer: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : $r2 = <java.lang.Integer: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Integer")
com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Integer") >>>>>>>> com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.canConvert : return $z0
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r22 = new com.thoughtworks.xstream.converters.basic.FloatConverter
com.thoughtworks.xstream.XStream.setupConverters : $r22 = new com.thoughtworks.xstream.converters.basic.FloatConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r22.<com.thoughtworks.xstream.converters.basic.FloatConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r22.<com.thoughtworks.xstream.converters.basic.FloatConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r22, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r22, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : $r2 = <java.lang.Float: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : $r2 = <java.lang.Float: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Float")
com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Float") >>>>>>>> com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r23 = new com.thoughtworks.xstream.converters.basic.DoubleConverter
com.thoughtworks.xstream.XStream.setupConverters : $r23 = new com.thoughtworks.xstream.converters.basic.DoubleConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r23.<com.thoughtworks.xstream.converters.basic.DoubleConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r23.<com.thoughtworks.xstream.converters.basic.DoubleConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r23, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r23, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : $r2 = <java.lang.Double: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : $r2 = <java.lang.Double: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Double")
com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Double") >>>>>>>> com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r24 = new com.thoughtworks.xstream.converters.basic.LongConverter
com.thoughtworks.xstream.XStream.setupConverters : $r24 = new com.thoughtworks.xstream.converters.basic.LongConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r24.<com.thoughtworks.xstream.converters.basic.LongConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r24.<com.thoughtworks.xstream.converters.basic.LongConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r24, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r24, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : $r2 = <java.lang.Long: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : $r2 = <java.lang.Long: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Long")
com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Long") >>>>>>>> com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r25 = new com.thoughtworks.xstream.converters.basic.ShortConverter
com.thoughtworks.xstream.XStream.setupConverters : $r25 = new com.thoughtworks.xstream.converters.basic.ShortConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r25.<com.thoughtworks.xstream.converters.basic.ShortConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r25.<com.thoughtworks.xstream.converters.basic.ShortConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r25, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r25, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : $r2 = <java.lang.Short: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : $r2 = <java.lang.Short: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Short")
com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Short") >>>>>>>> com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r26 = new com.thoughtworks.xstream.converters.basic.CharConverter
com.thoughtworks.xstream.XStream.setupConverters : $r26 = new com.thoughtworks.xstream.converters.basic.CharConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r26.<com.thoughtworks.xstream.converters.basic.CharConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r26.<com.thoughtworks.xstream.converters.basic.CharConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r26, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r26, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : $r2 = <java.lang.Character: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : $r2 = <java.lang.Character: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Character")
com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Character") >>>>>>>> com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r27 = new com.thoughtworks.xstream.converters.basic.BooleanConverter
com.thoughtworks.xstream.XStream.setupConverters : $r27 = new com.thoughtworks.xstream.converters.basic.BooleanConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r27.<com.thoughtworks.xstream.converters.basic.BooleanConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r27.<com.thoughtworks.xstream.converters.basic.BooleanConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r27, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r27, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : $r2 = <java.lang.Boolean: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : $r2 = <java.lang.Boolean: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Boolean")
com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Boolean") >>>>>>>> com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r28 = new com.thoughtworks.xstream.converters.basic.ByteConverter
com.thoughtworks.xstream.XStream.setupConverters : $r28 = new com.thoughtworks.xstream.converters.basic.ByteConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r28.<com.thoughtworks.xstream.converters.basic.ByteConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r28.<com.thoughtworks.xstream.converters.basic.ByteConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r28, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r28, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : $r2 = <java.lang.Byte: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : $r2 = <java.lang.Byte: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Byte")
com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Byte") >>>>>>>> com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r29 = new com.thoughtworks.xstream.converters.basic.StringConverter
com.thoughtworks.xstream.XStream.setupConverters : $r29 = new com.thoughtworks.xstream.converters.basic.StringConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r29.<com.thoughtworks.xstream.converters.basic.StringConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r29.<com.thoughtworks.xstream.converters.basic.StringConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r29, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r29, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.StringConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/String")
com.thoughtworks.xstream.converters.basic.StringConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/String") >>>>>>>> com.thoughtworks.xstream.converters.basic.StringConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.basic.StringConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r30 = new com.thoughtworks.xstream.converters.basic.StringBufferConverter
com.thoughtworks.xstream.XStream.setupConverters : $r30 = new com.thoughtworks.xstream.converters.basic.StringBufferConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r30.<com.thoughtworks.xstream.converters.basic.StringBufferConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r30.<com.thoughtworks.xstream.converters.basic.StringBufferConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r30, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r30, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.StringBufferConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/StringBuffer")
com.thoughtworks.xstream.converters.basic.StringBufferConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/StringBuffer") >>>>>>>> com.thoughtworks.xstream.converters.basic.StringBufferConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.basic.StringBufferConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r31 = new com.thoughtworks.xstream.converters.basic.DateConverter
com.thoughtworks.xstream.XStream.setupConverters : $r31 = new com.thoughtworks.xstream.converters.basic.DateConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r31.<com.thoughtworks.xstream.converters.basic.DateConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r31.<com.thoughtworks.xstream.converters.basic.DateConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r31, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r31, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.DateConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Date")
com.thoughtworks.xstream.converters.basic.DateConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Date") >>>>>>>> com.thoughtworks.xstream.converters.basic.DateConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.basic.DateConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r32 = new com.thoughtworks.xstream.converters.collections.BitSetConverter
com.thoughtworks.xstream.XStream.setupConverters : $r32 = new com.thoughtworks.xstream.converters.collections.BitSetConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r32.<com.thoughtworks.xstream.converters.collections.BitSetConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r32.<com.thoughtworks.xstream.converters.collections.BitSetConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r32, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r32, 0) >>>>>>>> com.thoughtworks.xstream.converters.collections.BitSetConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/BitSet")
com.thoughtworks.xstream.converters.collections.BitSetConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/BitSet") >>>>>>>> com.thoughtworks.xstream.converters.collections.BitSetConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.collections.BitSetConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r33 = new com.thoughtworks.xstream.converters.basic.URLConverter
com.thoughtworks.xstream.XStream.setupConverters : $r33 = new com.thoughtworks.xstream.converters.basic.URLConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r33.<com.thoughtworks.xstream.converters.basic.URLConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r33.<com.thoughtworks.xstream.converters.basic.URLConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r33, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r33, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.URLConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/net/URL")
com.thoughtworks.xstream.converters.basic.URLConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/net/URL") >>>>>>>> com.thoughtworks.xstream.converters.basic.URLConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.basic.URLConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r34 = new com.thoughtworks.xstream.converters.basic.BigIntegerConverter
com.thoughtworks.xstream.XStream.setupConverters : $r34 = new com.thoughtworks.xstream.converters.basic.BigIntegerConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r34.<com.thoughtworks.xstream.converters.basic.BigIntegerConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r34.<com.thoughtworks.xstream.converters.basic.BigIntegerConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r34, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r34, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.BigIntegerConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/math/BigInteger")
com.thoughtworks.xstream.converters.basic.BigIntegerConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/math/BigInteger") >>>>>>>> com.thoughtworks.xstream.converters.basic.BigIntegerConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.basic.BigIntegerConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r35 = new com.thoughtworks.xstream.converters.basic.BigDecimalConverter
com.thoughtworks.xstream.XStream.setupConverters : $r35 = new com.thoughtworks.xstream.converters.basic.BigDecimalConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r35.<com.thoughtworks.xstream.converters.basic.BigDecimalConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r35.<com.thoughtworks.xstream.converters.basic.BigDecimalConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r35, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r35, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.BigDecimalConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/math/BigDecimal")
com.thoughtworks.xstream.converters.basic.BigDecimalConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/math/BigDecimal") >>>>>>>> com.thoughtworks.xstream.converters.basic.BigDecimalConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.basic.BigDecimalConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r36 = new com.thoughtworks.xstream.converters.collections.ArrayConverter
com.thoughtworks.xstream.XStream.setupConverters : $r36 = new com.thoughtworks.xstream.converters.collections.ArrayConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r37 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r37 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r36.<com.thoughtworks.xstream.converters.collections.ArrayConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r37)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r36.<com.thoughtworks.xstream.converters.collections.ArrayConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r37) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r36, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r36, 0) >>>>>>>> com.thoughtworks.xstream.converters.collections.ArrayConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>()
com.thoughtworks.xstream.converters.collections.ArrayConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>() >>>>>>>> com.thoughtworks.xstream.converters.collections.ArrayConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.collections.ArrayConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r38 = new com.thoughtworks.xstream.converters.collections.CharArrayConverter
com.thoughtworks.xstream.XStream.setupConverters : $r38 = new com.thoughtworks.xstream.converters.collections.CharArrayConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r38.<com.thoughtworks.xstream.converters.collections.CharArrayConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r38.<com.thoughtworks.xstream.converters.collections.CharArrayConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r38, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r38, 0) >>>>>>>> com.thoughtworks.xstream.converters.collections.CharArrayConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>()
com.thoughtworks.xstream.converters.collections.CharArrayConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>() >>>>>>>> com.thoughtworks.xstream.converters.collections.CharArrayConverter.canConvert : if $z0 == 0
com.thoughtworks.xstream.converters.collections.CharArrayConverter.canConvert : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CharArrayConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.collections.CharArrayConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CharArrayConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.collections.CharArrayConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r39 = new com.thoughtworks.xstream.converters.collections.CollectionConverter
com.thoughtworks.xstream.XStream.setupConverters : $r39 = new com.thoughtworks.xstream.converters.collections.CollectionConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r40 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r40 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r39.<com.thoughtworks.xstream.converters.collections.CollectionConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r40)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r39.<com.thoughtworks.xstream.converters.collections.CollectionConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r40) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r39, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r39, 0) >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/ArrayList")
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/ArrayList") >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/HashSet")
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/HashSet") >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z1 != 0
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/LinkedList")
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/LinkedList") >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z2 != 0
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z2 != 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z3 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Vector")
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z3 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Vector") >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z3 != 0
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z3 != 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>()
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>() >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z4 == 0
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z4 == 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z5 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.util.LinkedHashSet")
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z5 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.util.LinkedHashSet") >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z5 == 0
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z5 == 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z6 = 0
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z6 = 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : return $z6
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : return $z6 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r41 = new com.thoughtworks.xstream.converters.collections.MapConverter
com.thoughtworks.xstream.XStream.setupConverters : $r41 = new com.thoughtworks.xstream.converters.collections.MapConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r42 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r42 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r41.<com.thoughtworks.xstream.converters.collections.MapConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r42)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r41.<com.thoughtworks.xstream.converters.collections.MapConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r42) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r41, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r41, 0) >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/HashMap")
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/HashMap") >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Hashtable")
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Hashtable") >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : if $z1 != 0
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z2 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>()
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z2 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>() >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : if $z2 == 0
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.util.LinkedHashMap")
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.util.LinkedHashMap") >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : if $z3 == 0
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : if $z3 == 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z4 = 0
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z4 = 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : return $z4
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : return $z4 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r43 = new com.thoughtworks.xstream.converters.collections.TreeMapConverter
com.thoughtworks.xstream.XStream.setupConverters : $r43 = new com.thoughtworks.xstream.converters.collections.TreeMapConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r44 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r44 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r43.<com.thoughtworks.xstream.converters.collections.TreeMapConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r44)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r43.<com.thoughtworks.xstream.converters.collections.TreeMapConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r44) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r43, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r43, 0) >>>>>>>> com.thoughtworks.xstream.converters.collections.TreeMapConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/TreeMap")
com.thoughtworks.xstream.converters.collections.TreeMapConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/TreeMap") >>>>>>>> com.thoughtworks.xstream.converters.collections.TreeMapConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.collections.TreeMapConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r45 = new com.thoughtworks.xstream.converters.collections.TreeSetConverter
com.thoughtworks.xstream.XStream.setupConverters : $r45 = new com.thoughtworks.xstream.converters.collections.TreeSetConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r46 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r46 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r45.<com.thoughtworks.xstream.converters.collections.TreeSetConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r46)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r45.<com.thoughtworks.xstream.converters.collections.TreeSetConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r46) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r45, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r45, 0) >>>>>>>> com.thoughtworks.xstream.converters.collections.TreeSetConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/TreeSet")
com.thoughtworks.xstream.converters.collections.TreeSetConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/TreeSet") >>>>>>>> com.thoughtworks.xstream.converters.collections.TreeSetConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.collections.TreeSetConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r47 = new com.thoughtworks.xstream.converters.collections.PropertiesConverter
com.thoughtworks.xstream.XStream.setupConverters : $r47 = new com.thoughtworks.xstream.converters.collections.PropertiesConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r47.<com.thoughtworks.xstream.converters.collections.PropertiesConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r47.<com.thoughtworks.xstream.converters.collections.PropertiesConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r47, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r47, 0) >>>>>>>> com.thoughtworks.xstream.converters.collections.PropertiesConverter.canConvert : if class "java/util/Properties" != r1
com.thoughtworks.xstream.converters.collections.PropertiesConverter.canConvert : if class "java/util/Properties" != r1 >>>>>>>> com.thoughtworks.xstream.converters.collections.PropertiesConverter.canConvert : $z0 = 0
com.thoughtworks.xstream.converters.collections.PropertiesConverter.canConvert : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.PropertiesConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.collections.PropertiesConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r48 = new com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter
com.thoughtworks.xstream.XStream.setupConverters : $r48 = new com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r48.<com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r48.<com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r48, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r48, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>()
com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>() >>>>>>>> com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter.canConvert : if $z0 == 0
com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter.canConvert : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r49 = new com.thoughtworks.xstream.converters.extended.FileConverter
com.thoughtworks.xstream.XStream.setupConverters : $r49 = new com.thoughtworks.xstream.converters.extended.FileConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r49.<com.thoughtworks.xstream.converters.extended.FileConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r49.<com.thoughtworks.xstream.converters.extended.FileConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r49, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r49, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.FileConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/io/File")
com.thoughtworks.xstream.converters.extended.FileConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/io/File") >>>>>>>> com.thoughtworks.xstream.converters.extended.FileConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.FileConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r50 = new com.thoughtworks.xstream.converters.extended.SqlTimestampConverter
com.thoughtworks.xstream.XStream.setupConverters : $r50 = new com.thoughtworks.xstream.converters.extended.SqlTimestampConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r50.<com.thoughtworks.xstream.converters.extended.SqlTimestampConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r50.<com.thoughtworks.xstream.converters.extended.SqlTimestampConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r50, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r50, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.SqlTimestampConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/sql/Timestamp")
com.thoughtworks.xstream.converters.extended.SqlTimestampConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/sql/Timestamp") >>>>>>>> com.thoughtworks.xstream.converters.extended.SqlTimestampConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.SqlTimestampConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r51 = new com.thoughtworks.xstream.converters.extended.SqlTimeConverter
com.thoughtworks.xstream.XStream.setupConverters : $r51 = new com.thoughtworks.xstream.converters.extended.SqlTimeConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r51.<com.thoughtworks.xstream.converters.extended.SqlTimeConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r51.<com.thoughtworks.xstream.converters.extended.SqlTimeConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r51, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r51, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.SqlTimeConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/sql/Time")
com.thoughtworks.xstream.converters.extended.SqlTimeConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/sql/Time") >>>>>>>> com.thoughtworks.xstream.converters.extended.SqlTimeConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.SqlTimeConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r52 = new com.thoughtworks.xstream.converters.extended.SqlDateConverter
com.thoughtworks.xstream.XStream.setupConverters : $r52 = new com.thoughtworks.xstream.converters.extended.SqlDateConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r52.<com.thoughtworks.xstream.converters.extended.SqlDateConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r52.<com.thoughtworks.xstream.converters.extended.SqlDateConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r52, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r52, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.SqlDateConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/sql/Date")
com.thoughtworks.xstream.converters.extended.SqlDateConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/sql/Date") >>>>>>>> com.thoughtworks.xstream.converters.extended.SqlDateConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.SqlDateConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r53 = new com.thoughtworks.xstream.converters.extended.DynamicProxyConverter
com.thoughtworks.xstream.XStream.setupConverters : $r53 = new com.thoughtworks.xstream.converters.extended.DynamicProxyConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r54 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r54 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r55 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference>
com.thoughtworks.xstream.XStream.setupConverters : $r55 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r53.<com.thoughtworks.xstream.converters.extended.DynamicProxyConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper,java.lang.ClassLoader)>($r54, $r55)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r53.<com.thoughtworks.xstream.converters.extended.DynamicProxyConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper,java.lang.ClassLoader)>($r54, $r55) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r53, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r53, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "com/thoughtworks/xstream/mapper/DynamicProxyMapper$DynamicProxy")
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "com/thoughtworks/xstream/mapper/DynamicProxyMapper$DynamicProxy") >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z1 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z1 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r56 = new com.thoughtworks.xstream.converters.extended.JavaClassConverter
com.thoughtworks.xstream.XStream.setupConverters : $r56 = new com.thoughtworks.xstream.converters.extended.JavaClassConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r57 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference>
com.thoughtworks.xstream.XStream.setupConverters : $r57 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r56.<com.thoughtworks.xstream.converters.extended.JavaClassConverter: void <init>(java.lang.ClassLoader)>($r57)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r56.<com.thoughtworks.xstream.converters.extended.JavaClassConverter: void <init>(java.lang.ClassLoader)>($r57) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r56, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r56, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaClassConverter.canConvert : $r2 = class "java/lang/Class"
com.thoughtworks.xstream.converters.extended.JavaClassConverter.canConvert : $r2 = class "java/lang/Class" >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaClassConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.extended.JavaClassConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaClassConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.JavaClassConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r58 = new com.thoughtworks.xstream.converters.extended.JavaMethodConverter
com.thoughtworks.xstream.XStream.setupConverters : $r58 = new com.thoughtworks.xstream.converters.extended.JavaMethodConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r59 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference>
com.thoughtworks.xstream.XStream.setupConverters : $r59 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r58.<com.thoughtworks.xstream.converters.extended.JavaMethodConverter: void <init>(java.lang.ClassLoader)>($r59)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r58.<com.thoughtworks.xstream.converters.extended.JavaMethodConverter: void <init>(java.lang.ClassLoader)>($r59) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r58, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r58, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/reflect/Method")
com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/reflect/Method") >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/reflect/Constructor")
com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/reflect/Constructor") >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r60 = new com.thoughtworks.xstream.converters.extended.FontConverter
com.thoughtworks.xstream.XStream.setupConverters : $r60 = new com.thoughtworks.xstream.converters.extended.FontConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r60.<com.thoughtworks.xstream.converters.extended.FontConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r60.<com.thoughtworks.xstream.converters.extended.FontConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r60, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r60, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.awt.Font")
com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.awt.Font") >>>>>>>> com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("javax.swing.plaf.FontUIResource")
com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("javax.swing.plaf.FontUIResource") >>>>>>>> com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r61 = new com.thoughtworks.xstream.converters.extended.ColorConverter
com.thoughtworks.xstream.XStream.setupConverters : $r61 = new com.thoughtworks.xstream.converters.extended.ColorConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r61.<com.thoughtworks.xstream.converters.extended.ColorConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r61.<com.thoughtworks.xstream.converters.extended.ColorConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r61, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r61, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.ColorConverter.canConvert : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.extended.ColorConverter.canConvert : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.extended.ColorConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.awt.Color")
com.thoughtworks.xstream.converters.extended.ColorConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.awt.Color") >>>>>>>> com.thoughtworks.xstream.converters.extended.ColorConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.ColorConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r62 = new com.thoughtworks.xstream.converters.extended.TextAttributeConverter
com.thoughtworks.xstream.XStream.setupConverters : $r62 = new com.thoughtworks.xstream.converters.extended.TextAttributeConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r62.<com.thoughtworks.xstream.converters.extended.TextAttributeConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r62.<com.thoughtworks.xstream.converters.extended.TextAttributeConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r62, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r62, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.TextAttributeConverter.canConvert : if r1 != class "java/awt/font/TextAttribute"
com.thoughtworks.xstream.converters.extended.TextAttributeConverter.canConvert : if r1 != class "java/awt/font/TextAttribute" >>>>>>>> com.thoughtworks.xstream.converters.extended.TextAttributeConverter.canConvert : $z0 = 0
com.thoughtworks.xstream.converters.extended.TextAttributeConverter.canConvert : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.TextAttributeConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.TextAttributeConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r63 = new com.thoughtworks.xstream.converters.extended.LocaleConverter
com.thoughtworks.xstream.XStream.setupConverters : $r63 = new com.thoughtworks.xstream.converters.extended.LocaleConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r63.<com.thoughtworks.xstream.converters.extended.LocaleConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r63.<com.thoughtworks.xstream.converters.extended.LocaleConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r63, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r63, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.LocaleConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Locale")
com.thoughtworks.xstream.converters.extended.LocaleConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Locale") >>>>>>>> com.thoughtworks.xstream.converters.extended.LocaleConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.LocaleConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r64 = new com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter
com.thoughtworks.xstream.XStream.setupConverters : $r64 = new com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r64.<com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r64.<com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r64, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r64, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/GregorianCalendar")
com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/GregorianCalendar") >>>>>>>> com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r65 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupConverters : $r65 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r66 = virtualinvoke $r65.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("javax.security.auth.Subject")
com.thoughtworks.xstream.XStream.setupConverters : $r66 = virtualinvoke $r65.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("javax.security.auth.Subject") >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : if $r66 == null
com.thoughtworks.xstream.XStream.setupConverters : if $r66 == null >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r67 = newarray (java.lang.Class)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r67 = newarray (java.lang.Class)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r67[0] = class "com/thoughtworks/xstream/mapper/Mapper"
com.thoughtworks.xstream.XStream.setupConverters : $r67[0] = class "com/thoughtworks/xstream/mapper/Mapper" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r68 = newarray (java.lang.Object)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r68 = newarray (java.lang.Object)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r69 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r69 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r68[0] = $r69
com.thoughtworks.xstream.XStream.setupConverters : $r68[0] = $r69 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.SubjectConverter", 0, $r67, $r68)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.SubjectConverter", 0, $r67, $r68) >>>>>>>> com.thoughtworks.xstream.converters.extended.SubjectConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "javax/security/auth/Subject")
com.thoughtworks.xstream.converters.extended.SubjectConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "javax/security/auth/Subject") >>>>>>>> com.thoughtworks.xstream.converters.extended.SubjectConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.SubjectConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>()
com.thoughtworks.xstream.XStream.setupConverters : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : if $z1 == 0
com.thoughtworks.xstream.XStream.setupConverters : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r70 = newarray (java.lang.Class)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r70 = newarray (java.lang.Class)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r70[0] = class "com/thoughtworks/xstream/converters/Converter"
com.thoughtworks.xstream.XStream.setupConverters : $r70[0] = class "com/thoughtworks/xstream/converters/Converter" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r71 = newarray (java.lang.Object)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r71 = newarray (java.lang.Object)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r71[0] = r2
com.thoughtworks.xstream.XStream.setupConverters : $r71[0] = r2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.ThrowableConverter", 0, $r70, $r71)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.ThrowableConverter", 0, $r70, $r71) >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverter.canConvert : $r2 = class "java/lang/Throwable"
com.thoughtworks.xstream.converters.extended.ThrowableConverter.canConvert : $r2 = class "java/lang/Throwable" >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.extended.ThrowableConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.ThrowableConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.StackTraceElementConverter", 0, null, null)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.StackTraceElementConverter", 0, null, null) >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $z1 = r6 instanceof com.thoughtworks.xstream.converters.SingleValueConverter
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $z1 = r6 instanceof com.thoughtworks.xstream.converters.SingleValueConverter >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : if $z1 == 0
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $r10 = (com.thoughtworks.xstream.converters.SingleValueConverter) r6
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $r10 = (com.thoughtworks.xstream.converters.SingleValueConverter) r6 >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r10, i0)
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r10, i0) >>>>>>>> com.thoughtworks.xstream.converters.extended.StackTraceElementConverter.canConvert : $r2 = class "java/lang/StackTraceElement"
com.thoughtworks.xstream.converters.extended.StackTraceElementConverter.canConvert : $r2 = class "java/lang/StackTraceElement" >>>>>>>> com.thoughtworks.xstream.converters.extended.StackTraceElementConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.extended.StackTraceElementConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.extended.StackTraceElementConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.StackTraceElementConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.CurrencyConverter", 0, null, null)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.CurrencyConverter", 0, null, null) >>>>>>>> com.thoughtworks.xstream.converters.extended.CurrencyConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Currency")
com.thoughtworks.xstream.converters.extended.CurrencyConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Currency") >>>>>>>> com.thoughtworks.xstream.converters.extended.CurrencyConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.CurrencyConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r72 = newarray (java.lang.Class)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r72 = newarray (java.lang.Class)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r72[0] = class "com/thoughtworks/xstream/converters/Converter"
com.thoughtworks.xstream.XStream.setupConverters : $r72[0] = class "com/thoughtworks/xstream/converters/Converter" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r73 = newarray (java.lang.Object)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r73 = newarray (java.lang.Object)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r73[0] = r2
com.thoughtworks.xstream.XStream.setupConverters : $r73[0] = r2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.RegexPatternConverter", 0, $r72, $r73)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.RegexPatternConverter", 0, $r72, $r73) >>>>>>>> com.thoughtworks.xstream.converters.extended.RegexPatternConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/regex/Pattern")
com.thoughtworks.xstream.converters.extended.RegexPatternConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/regex/Pattern") >>>>>>>> com.thoughtworks.xstream.converters.extended.RegexPatternConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.RegexPatternConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.CharsetConverter", 0, null, null)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.CharsetConverter", 0, null, null) >>>>>>>> com.thoughtworks.xstream.converters.extended.CharsetConverter.canConvert : $r2 = class "java/nio/charset/Charset"
com.thoughtworks.xstream.converters.extended.CharsetConverter.canConvert : $r2 = class "java/nio/charset/Charset" >>>>>>>> com.thoughtworks.xstream.converters.extended.CharsetConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.extended.CharsetConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.extended.CharsetConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.CharsetConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $z2 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>()
com.thoughtworks.xstream.XStream.setupConverters : $z2 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : if $z2 == 0
com.thoughtworks.xstream.XStream.setupConverters : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.enums.EnumConverter", 0, null, null)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.enums.EnumConverter", 0, null, null) >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isEnum()>()
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isEnum()>() >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $r2 = class "java/lang/Enum"
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $r2 = class "java/lang/Enum" >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r74 = newarray (java.lang.Class)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r74 = newarray (java.lang.Class)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r74[0] = class "com/thoughtworks/xstream/mapper/Mapper"
com.thoughtworks.xstream.XStream.setupConverters : $r74[0] = class "com/thoughtworks/xstream/mapper/Mapper" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r75 = newarray (java.lang.Object)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r75 = newarray (java.lang.Object)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r76 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r76 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r75[0] = $r76
com.thoughtworks.xstream.XStream.setupConverters : $r75[0] = $r76 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.enums.EnumSetConverter", 0, $r74, $r75)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.enums.EnumSetConverter", 0, $r74, $r75) >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1)
com.thoughtworks.xstream.core.util.Fields.find : r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1)
com.thoughtworks.xstream.core.util.Fields.find : virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1) >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : return r2
com.thoughtworks.xstream.core.util.Fields.find : return r2 >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumSetConverter.canConvert : $r2 = class "java/util/EnumSet"
com.thoughtworks.xstream.converters.enums.EnumSetConverter.canConvert : $r2 = class "java/util/EnumSet" >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumSetConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.enums.EnumSetConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumSetConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.enums.EnumSetConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r77 = newarray (java.lang.Class)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r77 = newarray (java.lang.Class)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r77[0] = class "com/thoughtworks/xstream/mapper/Mapper"
com.thoughtworks.xstream.XStream.setupConverters : $r77[0] = class "com/thoughtworks/xstream/mapper/Mapper" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r78 = newarray (java.lang.Object)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r78 = newarray (java.lang.Object)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r79 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r79 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r78[0] = $r79
com.thoughtworks.xstream.XStream.setupConverters : $r78[0] = $r79 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.enums.EnumMapConverter", 0, $r77, $r78)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.enums.EnumMapConverter", 0, $r77, $r78) >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumMapConverter.canConvert : if r1 != class "java/util/EnumMap"
com.thoughtworks.xstream.converters.enums.EnumMapConverter.canConvert : if r1 != class "java/util/EnumMap" >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumMapConverter.canConvert : $z0 = 0
com.thoughtworks.xstream.converters.enums.EnumMapConverter.canConvert : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumMapConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.enums.EnumMapConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r80 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupConverters : $r80 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r81 = virtualinvoke $r80.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("net.sf.cglib.proxy.Enhancer")
com.thoughtworks.xstream.XStream.setupConverters : $r81 = virtualinvoke $r80.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("net.sf.cglib.proxy.Enhancer") >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : if $r81 == null
com.thoughtworks.xstream.XStream.setupConverters : if $r81 == null >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r82 = newarray (java.lang.Class)[2]
com.thoughtworks.xstream.XStream.setupConverters : $r82 = newarray (java.lang.Class)[2] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r82[0] = class "com/thoughtworks/xstream/mapper/Mapper"
com.thoughtworks.xstream.XStream.setupConverters : $r82[0] = class "com/thoughtworks/xstream/mapper/Mapper" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r82[1] = class "com/thoughtworks/xstream/converters/reflection/ReflectionProvider"
com.thoughtworks.xstream.XStream.setupConverters : $r82[1] = class "com/thoughtworks/xstream/converters/reflection/ReflectionProvider" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r83 = newarray (java.lang.Object)[2]
com.thoughtworks.xstream.XStream.setupConverters : $r83 = newarray (java.lang.Object)[2] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r84 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r84 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r83[0] = $r84
com.thoughtworks.xstream.XStream.setupConverters : $r83[0] = $r84 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r85 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.XStream.setupConverters : $r85 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r83[1] = $r85
com.thoughtworks.xstream.XStream.setupConverters : $r83[1] = $r85 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter", 0, $r82, $r83)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter", 0, $r82, $r83) >>>>>>>> com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : $z0 = staticinvoke <net.sf.cglib.proxy.Enhancer: boolean isEnhanced(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : $z0 = staticinvoke <net.sf.cglib.proxy.Enhancer: boolean isEnhanced(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : if $z0 == 0
com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : if r1 != class "com/thoughtworks/xstream/mapper/CGLIBMapper$Marker"
com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : if r1 != class "com/thoughtworks/xstream/mapper/CGLIBMapper$Marker" >>>>>>>> com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : $z1 = 0
com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : $z1 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : return $z1
com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : return $z1 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r86 = new com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker
com.thoughtworks.xstream.XStream.setupConverters : $r86 = new com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r86.<com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker: void <init>(com.thoughtworks.xstream.converters.Converter,java.lang.Object)>(r2, r0)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r86.<com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker: void <init>(com.thoughtworks.xstream.converters.Converter,java.lang.Object)>(r2, r0) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r86, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r86, 0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : $r2 = r0.<com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker: java.lang.Object self>
com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : $r2 = r0.<com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker: java.lang.Object self> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : if r1 != $r3
com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : if r1 != $r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : $z0 = 0
com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : return $z0
com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : if $r3 != null
com.thoughtworks.xstream.XStream.setupImmutableTypes : if $r3 != null >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r1 = <java.lang.Boolean: java.lang.Class TYPE>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r1 = <java.lang.Boolean: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r1)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r1) >>>>>>>> com.thoughtworks.xstream.XStream.addImmutableType : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper>
com.thoughtworks.xstream.XStream.addImmutableType : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper> >>>>>>>> com.thoughtworks.xstream.XStream.addImmutableType : if $r3 != null
com.thoughtworks.xstream.XStream.addImmutableType : if $r3 != null >>>>>>>> com.thoughtworks.xstream.XStream.addImmutableType : $r11 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper>
com.thoughtworks.xstream.XStream.addImmutableType : $r11 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper> >>>>>>>> com.thoughtworks.xstream.XStream.addImmutableType : virtualinvoke $r11.<com.thoughtworks.xstream.mapper.ImmutableTypesMapper: void addImmutableType(java.lang.Class)>(r1)
com.thoughtworks.xstream.XStream.addImmutableType : virtualinvoke $r11.<com.thoughtworks.xstream.mapper.ImmutableTypesMapper: void addImmutableType(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ImmutableTypesMapper.addImmutableType : $r2 = r0.<com.thoughtworks.xstream.mapper.ImmutableTypesMapper: java.util.Set immutableTypes>
com.thoughtworks.xstream.mapper.ImmutableTypesMapper.addImmutableType : $r2 = r0.<com.thoughtworks.xstream.mapper.ImmutableTypesMapper: java.util.Set immutableTypes> >>>>>>>> com.thoughtworks.xstream.mapper.ImmutableTypesMapper.addImmutableType : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.ImmutableTypesMapper.addImmutableType : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Boolean")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Boolean") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r4 = <java.lang.Byte: java.lang.Class TYPE>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r4 = <java.lang.Byte: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r4)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r4) >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Byte")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Byte") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r5 = <java.lang.Character: java.lang.Class TYPE>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r5 = <java.lang.Character: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r5)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r5) >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Character")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Character") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r6 = <java.lang.Double: java.lang.Class TYPE>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r6 = <java.lang.Double: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r6)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r6) >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Double")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Double") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r7 = <java.lang.Float: java.lang.Class TYPE>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r7 = <java.lang.Float: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r7)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r7) >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Float")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Float") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r8 = <java.lang.Integer: java.lang.Class TYPE>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r8 = <java.lang.Integer: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r8)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r8) >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Integer")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Integer") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r9 = <java.lang.Long: java.lang.Class TYPE>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r9 = <java.lang.Long: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r9)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r9) >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Long")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Long") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r10 = <java.lang.Short: java.lang.Class TYPE>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r10 = <java.lang.Short: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r10)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r10) >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Short")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Short") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/Mapper$Null")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/Mapper$Null") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/math/BigDecimal")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/math/BigDecimal") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/math/BigInteger")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/math/BigInteger") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/String")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/String") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/net/URL")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/net/URL") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/io/File")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/io/File") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Class")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Class") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/awt/font/TextAttribute")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/awt/font/TextAttribute") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>()
com.thoughtworks.xstream.XStream.setupImmutableTypes : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : if $z0 == 0
com.thoughtworks.xstream.XStream.setupImmutableTypes : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r11 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r11 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : r2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("com.thoughtworks.xstream.converters.extended.CharsetConverter")
com.thoughtworks.xstream.XStream.setupImmutableTypes : r2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("com.thoughtworks.xstream.converters.extended.CharsetConverter") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(r2)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(r2) >>>>>>>> com.thoughtworks.xstream.XStream.setMode : tableswitch(i0) {     case 1001:
com.thoughtworks.xstream.XStream.setMode : tableswitch(i0) {     case 1001: >>>>>>>> com.thoughtworks.xstream.XStream.setMode : $r3 = new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy
com.thoughtworks.xstream.XStream.setMode : $r3 = new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy >>>>>>>> com.thoughtworks.xstream.XStream.setMode : $i1 = <com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int RELATIVE>
com.thoughtworks.xstream.XStream.setMode : $i1 = <com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int RELATIVE> >>>>>>>> com.thoughtworks.xstream.XStream.setMode : specialinvoke $r3.<com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: void <init>(int)>($i1)
com.thoughtworks.xstream.XStream.setMode : specialinvoke $r3.<com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: void <init>(int)>($i1) >>>>>>>> com.thoughtworks.xstream.XStream.setMode : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void setMarshallingStrategy(com.thoughtworks.xstream.MarshallingStrategy)>($r3)
com.thoughtworks.xstream.XStream.setMode : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void setMarshallingStrategy(com.thoughtworks.xstream.MarshallingStrategy)>($r3) >>>>>>>> com.thoughtworks.xstream.XStream.setMarshallingStrategy : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.MarshallingStrategy marshallingStrategy> = r1
com.thoughtworks.xstream.XStream.setMarshallingStrategy : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.MarshallingStrategy marshallingStrategy> = r1 >>>>>>>> com.thoughtworks.xstream.XStream.setMode : goto [?= return]
com.thoughtworks.xstream.XStream.setMode : goto [?= return] >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.containsKey : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.persistence.FileStreamStrategy: java.lang.String getName(java.lang.Object)>(r1)
com.thoughtworks.xstream.persistence.FileStreamStrategy.containsKey : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.persistence.FileStreamStrategy: java.lang.String getName(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.getName : $r2 = new java.lang.StringBuilder
com.thoughtworks.xstream.persistence.FileStreamStrategy.getName : $r2 = new java.lang.StringBuilder >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.getName : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
com.thoughtworks.xstream.persistence.FileStreamStrategy.getName : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.getName : $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>()
com.thoughtworks.xstream.persistence.FileStreamStrategy.getName : $r3 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.getName : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.persistence.FileStreamStrategy: java.lang.String escape(java.lang.String)>($r3)
com.thoughtworks.xstream.persistence.FileStreamStrategy.getName : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.persistence.FileStreamStrategy: java.lang.String escape(java.lang.String)>($r3) >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : r3 = $r2
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : r4 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>()
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : r4 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>() >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : i0 = 0
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : i0 = 0 >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $i2 = lengthof r4
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $i2 = lengthof r4 >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : if i0 >= $i2
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : if i0 >= $i2 >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : c1 = r4[i0]
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : c1 = r4[i0] >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c1)
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $z0 = staticinvoke <java.lang.Character: boolean isDigit(char)>(c1) >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : if $z0 != 0
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : if c1 < 65
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : if c1 < 65 >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : if c1 < 97
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : if c1 < 97 >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : if c1 != 95
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : if c1 != 95 >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $r7 = new java.lang.StringBuilder
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $r7 = new java.lang.StringBuilder >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>()
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : specialinvoke $r7.<java.lang.StringBuilder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c1)
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $r9 = staticinvoke <java.lang.Integer: java.lang.String toHexString(int)>(c1) >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_")
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("_") >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>()
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12)
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r12) >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : i0 = i0 + 1
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : i0 = i0 + 1 >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : goto [?= $i2 = lengthof r4]
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : goto [?= $i2 = lengthof r4] >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1)
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c1) >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : goto [?= i0 = i0 + 1]
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : goto [?= i0 = i0 + 1] >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $r14 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : $r14 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : return $r14
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : return $r14 >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.getName : $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
com.thoughtworks.xstream.persistence.FileStreamStrategy.getName : $r5 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.getName : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml")
com.thoughtworks.xstream.persistence.FileStreamStrategy.getName : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".xml") >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.getName : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>()
com.thoughtworks.xstream.persistence.FileStreamStrategy.getName : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.getName : return $r7
com.thoughtworks.xstream.persistence.FileStreamStrategy.getName : return $r7 >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.containsKey : r2 = specialinvoke r0.<com.thoughtworks.xstream.persistence.FileStreamStrategy: java.io.File getFile(java.lang.String)>($r3)
com.thoughtworks.xstream.persistence.FileStreamStrategy.containsKey : r2 = specialinvoke r0.<com.thoughtworks.xstream.persistence.FileStreamStrategy: java.io.File getFile(java.lang.String)>($r3) >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.getFile : $r2 = new java.io.File
com.thoughtworks.xstream.persistence.FileStreamStrategy.getFile : $r2 = new java.io.File >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.getFile : $r3 = r0.<com.thoughtworks.xstream.persistence.FileStreamStrategy: java.io.File baseDirectory>
com.thoughtworks.xstream.persistence.FileStreamStrategy.getFile : $r3 = r0.<com.thoughtworks.xstream.persistence.FileStreamStrategy: java.io.File baseDirectory> >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r1)
com.thoughtworks.xstream.persistence.FileStreamStrategy.getFile : specialinvoke $r2.<java.io.File: void <init>(java.io.File,java.lang.String)>($r3, r1) >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.getFile : return $r2
com.thoughtworks.xstream.persistence.FileStreamStrategy.getFile : return $r2 >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.containsKey : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>()
com.thoughtworks.xstream.persistence.FileStreamStrategy.containsKey : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>() >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.containsKey : return $z0
com.thoughtworks.xstream.persistence.FileStreamStrategy.containsKey : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.registerConverter : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>(r1, 0)
com.thoughtworks.xstream.XStream.registerConverter : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>(r1, 0) >>>>>>>> com.thoughtworks.xstream.XStream.getConverterLookup : $r1 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup>
com.thoughtworks.xstream.XStream.getConverterLookup : $r1 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup> >>>>>>>> com.thoughtworks.xstream.XStream.getConverterLookup : return $r1
com.thoughtworks.xstream.XStream.getConverterLookup : return $r1 >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r2 = null
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r2 = null >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r4 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Map fieldNameToTypeMap>
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r4 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Map fieldNameToTypeMap> >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r3 = (java.lang.Class) $r5
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r3 = (java.lang.Class) $r5 >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : if r3 == null
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : if r3 == null >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : return r2
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : return r2 >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.remove : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.persistence.FileStreamStrategy: java.lang.String getName(java.lang.Object)>(r1)
com.thoughtworks.xstream.persistence.FileStreamStrategy.remove : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.persistence.FileStreamStrategy: java.lang.String getName(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : if c1 <= 90
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : if c1 <= 90 >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : if c1 > 122
com.thoughtworks.xstream.persistence.FileStreamStrategy.escape : if c1 > 122 >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.remove : r2 = specialinvoke r0.<com.thoughtworks.xstream.persistence.FileStreamStrategy: java.io.File getFile(java.lang.String)>($r4)
com.thoughtworks.xstream.persistence.FileStreamStrategy.remove : r2 = specialinvoke r0.<com.thoughtworks.xstream.persistence.FileStreamStrategy: java.io.File getFile(java.lang.String)>($r4) >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.remove : r3 = null
com.thoughtworks.xstream.persistence.FileStreamStrategy.remove : r3 = null >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.remove : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>()
com.thoughtworks.xstream.persistence.FileStreamStrategy.remove : $z0 = virtualinvoke r2.<java.io.File: boolean exists()>() >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.remove : if $z0 == 0
com.thoughtworks.xstream.persistence.FileStreamStrategy.remove : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.persistence.FileStreamStrategy.remove : return r3
com.thoughtworks.xstream.persistence.FileStreamStrategy.remove : return r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.ExternalizableConverter.marshal : r4 = (java.io.Externalizable) r1
