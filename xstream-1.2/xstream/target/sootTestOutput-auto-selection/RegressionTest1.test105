com.thoughtworks.xstream.io.xml.SaxWriter.underlyingWriter : return r0 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>()
com.thoughtworks.xstream.core.TreeMarshaller.put : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>()
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.put : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : interfaceinvoke $r3.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.TreeMarshaller.put : interfaceinvoke $r3.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.put : $r3 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map>
com.thoughtworks.xstream.core.MapBackedDataHolder.put : $r3 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.MapBackedDataHolder.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : $z0 = r0 instanceof com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriter
com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : $z0 = r0 instanceof com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriter >>>>>>>> com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : if $z0 == 0
com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : $r3 = (com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriter) r0
com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : $r3 = (com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriter) r0 >>>>>>>> com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : interfaceinvoke $r3.<com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriter: void startNode(java.lang.String,java.lang.Class)>(r1, r2)
com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : interfaceinvoke $r3.<com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriter: void startNode(java.lang.String,java.lang.Class)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.startNode : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.SaxWriter: void startNode(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.SaxWriter.startNode : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.SaxWriter: void startNode(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.startNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: int depth>
com.thoughtworks.xstream.io.xml.SaxWriter.startNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: int depth> >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.startNode : if $i0 == 0
com.thoughtworks.xstream.io.xml.SaxWriter.startNode : if $i0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.startNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: boolean includeEnclosingDocument>
com.thoughtworks.xstream.io.xml.SaxWriter.startNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: boolean includeEnclosingDocument> >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.startNode : if $z0 == 0
com.thoughtworks.xstream.io.xml.SaxWriter.startNode : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.SaxWriter: void startDocument(boolean)>(0)
com.thoughtworks.xstream.io.xml.SaxWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.SaxWriter: void startDocument(boolean)>(0) >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.startDocument : $i0 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: int depth>
com.thoughtworks.xstream.io.xml.SaxWriter.startDocument : $i0 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: int depth> >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.startDocument : if $i0 != 0
com.thoughtworks.xstream.io.xml.SaxWriter.startDocument : if $i0 != 0 >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.startDocument : $r1 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: org.xml.sax.ContentHandler contentHandler>
com.thoughtworks.xstream.io.xml.SaxWriter.startDocument : $r1 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: org.xml.sax.ContentHandler contentHandler> >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.startDocument : interfaceinvoke $r1.<org.xml.sax.ContentHandler: void startDocument()>()
