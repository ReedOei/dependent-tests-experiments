com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : $r2 = r0.<com.thoughtworks.xstream.mapper.ImmutableTypesMapper: java.util.Set immutableTypes> >>>>>>>> com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : if $z0 == 0
com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : $z1 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: boolean isImmutableValueType(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : $z1 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: boolean isImmutableValueType(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.isImmutableValueType : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.isImmutableValueType : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.isImmutableValueType : $z0 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: boolean isImmutableValueType(java.lang.Class)>(r1)
