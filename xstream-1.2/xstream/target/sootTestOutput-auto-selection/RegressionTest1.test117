com.thoughtworks.xstream.io.xml.XStream11XmlFriendlyReplacer.unescapeName : return r1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : if $r4 != null
com.thoughtworks.xstream.io.path.PathTracker.getPath : if $r4 != null >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i2 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i2 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i3 = $i2 + 1
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r1 = newarray (java.lang.String)[$i3]
com.thoughtworks.xstream.io.path.PathTracker.getPath : r1 = newarray (java.lang.String)[$i3] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r1[0] = ""
com.thoughtworks.xstream.io.path.PathTracker.getPath : r1[0] = "" >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : i0 = 0
com.thoughtworks.xstream.io.path.PathTracker.getPath : i0 = 0 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : if i0 >= $i4
com.thoughtworks.xstream.io.path.PathTracker.getPath : if i0 >= $i4 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r22 = new com.thoughtworks.xstream.io.path.Path
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r22 = new com.thoughtworks.xstream.io.path.Path >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : specialinvoke $r22.<com.thoughtworks.xstream.io.path.Path: void <init>(java.lang.String[])>(r1)
com.thoughtworks.xstream.io.path.PathTracker.getPath : specialinvoke $r22.<com.thoughtworks.xstream.io.path.Path: void <init>(java.lang.String[])>(r1) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> = $r22
com.thoughtworks.xstream.io.path.PathTracker.getPath : r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> = $r22 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r23 = r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r23 = r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : return $r23
com.thoughtworks.xstream.io.path.PathTracker.getPath : return $r23 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getCurrentPath : $r1 = virtualinvoke r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path getPath()>()
com.thoughtworks.xstream.io.path.PathTracker.getCurrentPath : $r1 = virtualinvoke r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path getPath()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getCurrentPath : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.path.Path: java.lang.String toString()>()
com.thoughtworks.xstream.io.path.PathTracker.getCurrentPath : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.path.Path: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : $r2 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String pathAsString>
com.thoughtworks.xstream.io.path.Path.toString : $r2 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String pathAsString> >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : if $r2 != null
com.thoughtworks.xstream.io.path.Path.toString : if $r2 != null >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : $r3 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.path.Path.toString : $r3 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : specialinvoke $r3.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.path.Path.toString : specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : r1 = $r3
com.thoughtworks.xstream.io.path.Path.toString : r1 = $r3 >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : i0 = 0
com.thoughtworks.xstream.io.path.Path.toString : i0 = 0 >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : $r4 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
com.thoughtworks.xstream.io.path.Path.toString : $r4 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks> >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : $i1 = lengthof $r4
com.thoughtworks.xstream.io.path.Path.toString : $i1 = lengthof $r4 >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : if i0 >= $i1
com.thoughtworks.xstream.io.path.Path.toString : if i0 >= $i1 >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : if i0 <= 0
com.thoughtworks.xstream.io.path.Path.toString : if i0 <= 0 >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : $r6 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
com.thoughtworks.xstream.io.path.Path.toString : $r6 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks> >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : $r7 = $r6[i0]
com.thoughtworks.xstream.io.path.Path.toString : $r7 = $r6[i0] >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7)
com.thoughtworks.xstream.io.path.Path.toString : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7) >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : i0 = i0 + 1
com.thoughtworks.xstream.io.path.Path.toString : i0 = i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : goto [?= $r4 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>]
com.thoughtworks.xstream.io.path.Path.toString : goto [?= $r4 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>] >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : $r9 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.path.Path.toString : $r9 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String pathAsString> = $r9
com.thoughtworks.xstream.io.path.Path.toString : r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String pathAsString> = $r9 >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : $r10 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String pathAsString>
com.thoughtworks.xstream.io.path.Path.toString : $r10 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String pathAsString> >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : return $r10
com.thoughtworks.xstream.io.path.Path.toString : return $r10 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getCurrentPath : return $r2
com.thoughtworks.xstream.io.path.PathTracker.getCurrentPath : return $r2 >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.associateId : $r4 = r0.<com.thoughtworks.xstream.core.util.ObjectIdDictionary: java.util.Map map>
com.thoughtworks.xstream.core.util.ObjectIdDictionary.associateId : $r4 = r0.<com.thoughtworks.xstream.core.util.ObjectIdDictionary: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.associateId : $r3 = new com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper
com.thoughtworks.xstream.core.util.ObjectIdDictionary.associateId : $r3 = new com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.associateId : specialinvoke $r3.<com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper: void <init>(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.util.ObjectIdDictionary.associateId : specialinvoke $r3.<com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper: void <init>(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.associateId : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r2)
com.thoughtworks.xstream.core.util.ObjectIdDictionary.associateId : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r2) >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper.hashCode : $r1 = r0.<com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper: java.lang.Object obj>
com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper.hashCode : $r1 = r0.<com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper: java.lang.Object obj> >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper.hashCode : $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r1)
com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper.hashCode : $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r1) >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper.hashCode : return $i0
com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper.hashCode : return $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.underlyingWriter : return r0
com.thoughtworks.xstream.io.xml.SaxWriter.underlyingWriter : return r0 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>()
com.thoughtworks.xstream.core.TreeMarshaller.put : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>()
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.put : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : interfaceinvoke $r3.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.TreeMarshaller.put : interfaceinvoke $r3.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.put : $r3 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map>
com.thoughtworks.xstream.core.MapBackedDataHolder.put : $r3 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.MapBackedDataHolder.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomWriter.underlyingWriter : return r0
com.thoughtworks.xstream.io.xml.XppDomWriter.underlyingWriter : return r0 >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r2 = null
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r2 = null >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r4 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Map fieldNameToTypeMap>
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r4 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Map fieldNameToTypeMap> >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r3 = (java.lang.Class) $r5
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r3 = (java.lang.Class) $r5 >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : if r3 == null
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : if r3 == null >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : return r2
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : return r2 >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.addAttributeFor : $r2 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Set typeSet>
com.thoughtworks.xstream.mapper.AttributeMapper.addAttributeFor : $r2 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Set typeSet> >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.addAttributeFor : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.AttributeMapper.addAttributeFor : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r4 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.core.util.PrioritizedList converters>
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r4 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.core.util.PrioritizedList converters> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList: void add(java.lang.Object,int)>(r1, i0)
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList: void add(java.lang.Object,int)>(r1, i0) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $i1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority>
com.thoughtworks.xstream.core.util.PrioritizedList.add : $i1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : if $i1 <= i0
com.thoughtworks.xstream.core.util.PrioritizedList.add : if $i1 <= i0 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority> = i0
com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority> = i0 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $r3 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Set set>
com.thoughtworks.xstream.core.util.PrioritizedList.add : $r3 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Set set> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $r4 = new com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem
com.thoughtworks.xstream.core.util.PrioritizedList.add : $r4 = new com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $i2 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId>
com.thoughtworks.xstream.core.util.PrioritizedList.add : $i2 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $i3 = $i2 + 1
com.thoughtworks.xstream.core.util.PrioritizedList.add : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId> = $i3
com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId> = $i3 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : specialinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: void <init>(java.lang.Object,int,int)>(r1, i0, $i3)
com.thoughtworks.xstream.core.util.PrioritizedList.add : specialinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: void <init>(java.lang.Object,int,int)>(r1, i0, $i3) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4)
com.thoughtworks.xstream.core.util.PrioritizedList.add : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : r2 = (com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem) r1
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : r2 = (com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem) r1 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i0 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i0 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i1 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i1 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : if $i0 == $i1
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : if $i0 == $i1 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i5 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i5 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i6 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i6 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i7 = $i5 - $i6
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i7 = $i5 - $i6 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : return $i7
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : return $i7 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r5 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap>
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r5 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : if $z0 == 0
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.removeId : $r3 = r0.<com.thoughtworks.xstream.core.util.ObjectIdDictionary: java.util.Map map>
com.thoughtworks.xstream.core.util.ObjectIdDictionary.removeId : $r3 = r0.<com.thoughtworks.xstream.core.util.ObjectIdDictionary: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.removeId : $r2 = new com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper
com.thoughtworks.xstream.core.util.ObjectIdDictionary.removeId : $r2 = new com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.removeId : specialinvoke $r2.<com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper: void <init>(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.util.ObjectIdDictionary.removeId : specialinvoke $r2.<com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper: void <init>(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.removeId : interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2)
com.thoughtworks.xstream.core.util.ObjectIdDictionary.removeId : interfaceinvoke $r3.<java.util.Map: java.lang.Object remove(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.javabean.BeanProvider.writeProperty : $r6 = r0.<com.thoughtworks.xstream.converters.javabean.BeanProvider: com.thoughtworks.xstream.converters.javabean.PropertyDictionary propertyDictionary>
com.thoughtworks.xstream.converters.javabean.BeanProvider.writeProperty : $r6 = r0.<com.thoughtworks.xstream.converters.javabean.BeanProvider: com.thoughtworks.xstream.converters.javabean.PropertyDictionary propertyDictionary> >>>>>>>> com.thoughtworks.xstream.converters.javabean.BeanProvider.writeProperty : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.javabean.BeanProvider.writeProperty : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.BeanProvider.writeProperty : r4 = virtualinvoke $r6.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: com.thoughtworks.xstream.converters.javabean.BeanProperty property(java.lang.Class,java.lang.String)>($r7, r2)
com.thoughtworks.xstream.converters.javabean.BeanProvider.writeProperty : r4 = virtualinvoke $r6.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: com.thoughtworks.xstream.converters.javabean.BeanProperty property(java.lang.Class,java.lang.String)>($r7, r2) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : r3 = specialinvoke r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: java.util.Map buildMap(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : r3 = specialinvoke r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: java.util.Map buildMap(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r12 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: java.util.Map keyedByPropertyNameCache>
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r12 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: java.util.Map keyedByPropertyNameCache> >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z0 = interfaceinvoke $r12.<java.util.Map: boolean containsKey(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z0 = interfaceinvoke $r12.<java.util.Map: boolean containsKey(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z0 != 0
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r13 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: java.util.Map keyedByPropertyNameCache>
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r13 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: java.util.Map keyedByPropertyNameCache> >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r3 = $r13
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r3 = $r13 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : entermonitor $r13
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : entermonitor $r13 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r14 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: java.util.Map keyedByPropertyNameCache>
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r14 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: java.util.Map keyedByPropertyNameCache> >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z1 = interfaceinvoke $r14.<java.util.Map: boolean containsKey(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z1 = interfaceinvoke $r14.<java.util.Map: boolean containsKey(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z1 != 0
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r15 = new java.util.HashMap
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r15 = new java.util.HashMap >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : specialinvoke $r15.<java.util.HashMap: void <init>()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : specialinvoke $r15.<java.util.HashMap: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r4 = $r15
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r4 = $r15 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r5 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r5 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method[] getMethods()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : i0 = 0
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : i0 = 0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $i1 = lengthof r5
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $i1 = lengthof r5 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if i0 >= $i1
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if i0 >= $i1 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r16 = r5[i0]
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r16 = r5[i0] >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $i2 = virtualinvoke $r16.<java.lang.reflect.Method: int getModifiers()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $i2 = virtualinvoke $r16.<java.lang.reflect.Method: int getModifiers()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z2 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i2) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z2 == 0
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r17 = r5[i0]
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r17 = r5[i0] >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $i3 = virtualinvoke $r17.<java.lang.reflect.Method: int getModifiers()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $i3 = virtualinvoke $r17.<java.lang.reflect.Method: int getModifiers()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i3)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z3 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i3) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z3 == 0
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z3 == 0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r18 = r5[i0]
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r18 = r5[i0] >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r6 = virtualinvoke $r18.<java.lang.reflect.Method: java.lang.String getName()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r6 = virtualinvoke $r18.<java.lang.reflect.Method: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r19 = r5[i0]
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r19 = r5[i0] >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r7 = virtualinvoke $r19.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r7 = virtualinvoke $r19.<java.lang.reflect.Method: java.lang.Class[] getParameterTypes()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r20 = r5[i0]
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r20 = r5[i0] >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r8 = virtualinvoke $r20.<java.lang.reflect.Method: java.lang.Class getReturnType()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r8 = virtualinvoke $r20.<java.lang.reflect.Method: java.lang.Class getReturnType()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z4 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("get")
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z4 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("get") >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z4 != 0
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z4 != 0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z5 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("is")
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z5 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("is") >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z5 == 0
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z5 == 0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z7 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("set")
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z7 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("set") >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z7 == 0
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z7 == 0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : i0 = i0 + 1
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : i0 = i0 + 1 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : goto [?= $i1 = lengthof r5]
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : goto [?= $i1 = lengthof r5] >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $i4 = lengthof r7
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $i4 = lengthof r7 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $i4 != 0
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $i4 != 0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r21 = <java.lang.Void: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r21 = <java.lang.Void: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if r8 == $r21
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if r8 == $r21 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z6 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("get")
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z6 = virtualinvoke r6.<java.lang.String: boolean startsWith(java.lang.String)>("get") >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z6 == 0
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z6 == 0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r22 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int)>(3)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r22 = virtualinvoke r6.<java.lang.String: java.lang.String substring(int)>(3) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r9 = staticinvoke <java.beans.Introspector: java.lang.String decapitalize(java.lang.String)>($r22)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r9 = staticinvoke <java.beans.Introspector: java.lang.String decapitalize(java.lang.String)>($r22) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : goto [?= r10 = specialinvoke r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: com.thoughtworks.xstream.converters.javabean.BeanProperty getBeanProperty(java.util.Map,java.lang.Class,java.lang.String,java.lang.Class)>(r4, r1, r9, r8)]
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : goto [?= r10 = specialinvoke r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: com.thoughtworks.xstream.converters.javabean.BeanProperty getBeanProperty(java.util.Map,java.lang.Class,java.lang.String,java.lang.Class)>(r4, r1, r9, r8)] >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r10 = specialinvoke r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: com.thoughtworks.xstream.converters.javabean.BeanProperty getBeanProperty(java.util.Map,java.lang.Class,java.lang.String,java.lang.Class)>(r4, r1, r9, r8)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r10 = specialinvoke r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: com.thoughtworks.xstream.converters.javabean.BeanProperty getBeanProperty(java.util.Map,java.lang.Class,java.lang.String,java.lang.Class)>(r4, r1, r9, r8) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : $r5 = new com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : $r5 = new com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : specialinvoke $r5.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey: void <init>(java.lang.String,java.lang.Class)>(r3, r4)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : specialinvoke $r5.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey: void <init>(java.lang.String,java.lang.Class)>(r3, r4) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : r6 = $r5
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : r6 = $r5 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : $r8 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : $r8 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>(r6) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : r7 = (com.thoughtworks.xstream.converters.javabean.BeanProperty) $r8
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : r7 = (com.thoughtworks.xstream.converters.javabean.BeanProperty) $r8 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : if r7 != null
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : if r7 != null >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : $r9 = new com.thoughtworks.xstream.converters.javabean.BeanProperty
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : $r9 = new com.thoughtworks.xstream.converters.javabean.BeanProperty >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : specialinvoke $r9.<com.thoughtworks.xstream.converters.javabean.BeanProperty: void <init>(java.lang.Class,java.lang.String,java.lang.Class)>(r2, r3, r4)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : specialinvoke $r9.<com.thoughtworks.xstream.converters.javabean.BeanProperty: void <init>(java.lang.Class,java.lang.String,java.lang.Class)>(r2, r3, r4) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : r7 = $r9
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : r7 = $r9 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : interfaceinvoke r1.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r6, r7) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : $r1 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey: java.lang.String propertyName>
com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : $r1 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey: java.lang.String propertyName> >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : if $r1 == null
com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : if $r1 == null >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : $r2 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey: java.lang.String propertyName>
com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : $r2 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey: java.lang.String propertyName> >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : goto [?= i0 = $i1]
com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : goto [?= i0 = $i1] >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : i0 = $i1
com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : i0 = $i1 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : $i2 = 29 * i0
com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : $i2 = 29 * i0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : $r3 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey: java.lang.Class propertyType>
com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : $r3 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey: java.lang.Class propertyType> >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : if $r3 == null
com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : if $r3 == null >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : $r4 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey: java.lang.Class propertyType>
com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : $r4 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey: java.lang.Class propertyType> >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : goto [?= i4 = $i2 + $i3]
com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : goto [?= i4 = $i2 + $i3] >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : i4 = $i2 + $i3
com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : i4 = $i2 + $i3 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : return i4
com.thoughtworks.xstream.converters.javabean.PropertyDictionary$PropertyKey.hashCode : return i4 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : return r7
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.getBeanProperty : return r7 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r24 = r5[i0]
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r24 = r5[i0] >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : virtualinvoke r10.<com.thoughtworks.xstream.converters.javabean.BeanProperty: void setGetterMethod(java.lang.reflect.Method)>($r24)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : virtualinvoke r10.<com.thoughtworks.xstream.converters.javabean.BeanProperty: void setGetterMethod(java.lang.reflect.Method)>($r24) >>>>>>>> com.thoughtworks.xstream.converters.javabean.BeanProperty.setGetterMethod : r0.<com.thoughtworks.xstream.converters.javabean.BeanProperty: java.lang.reflect.Method getter> = r1
com.thoughtworks.xstream.converters.javabean.BeanProperty.setGetterMethod : r0.<com.thoughtworks.xstream.converters.javabean.BeanProperty: java.lang.reflect.Method getter> = r1 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : goto [?= i0 = i0 + 1]
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : goto [?= i0 = i0 + 1] >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r31 = new java.util.ArrayList
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r31 = new java.util.ArrayList >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : specialinvoke $r31.<java.util.ArrayList: void <init>()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : specialinvoke $r31.<java.util.ArrayList: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r32 = $r31
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r32 = $r31 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r33 = interfaceinvoke r4.<java.util.Map: java.util.Collection values()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r33 = interfaceinvoke r4.<java.util.Map: java.util.Collection values()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r34 = interfaceinvoke $r33.<java.util.Collection: java.util.Iterator iterator()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r34 = interfaceinvoke $r33.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z8 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z8 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z8 == 0
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z8 == 0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r35 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r35 = interfaceinvoke r34.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r36 = (com.thoughtworks.xstream.converters.javabean.BeanProperty) $r35
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r36 = (com.thoughtworks.xstream.converters.javabean.BeanProperty) $r35 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z9 = virtualinvoke r36.<com.thoughtworks.xstream.converters.javabean.BeanProperty: boolean isReadable()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z9 = virtualinvoke r36.<com.thoughtworks.xstream.converters.javabean.BeanProperty: boolean isReadable()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.BeanProperty.isReadable : $r1 = r0.<com.thoughtworks.xstream.converters.javabean.BeanProperty: java.lang.reflect.Method getter>
com.thoughtworks.xstream.converters.javabean.BeanProperty.isReadable : $r1 = r0.<com.thoughtworks.xstream.converters.javabean.BeanProperty: java.lang.reflect.Method getter> >>>>>>>> com.thoughtworks.xstream.converters.javabean.BeanProperty.isReadable : if $r1 == null
com.thoughtworks.xstream.converters.javabean.BeanProperty.isReadable : if $r1 == null >>>>>>>> com.thoughtworks.xstream.converters.javabean.BeanProperty.isReadable : $z0 = 1
com.thoughtworks.xstream.converters.javabean.BeanProperty.isReadable : $z0 = 1 >>>>>>>> com.thoughtworks.xstream.converters.javabean.BeanProperty.isReadable : goto [?= return $z0]
com.thoughtworks.xstream.converters.javabean.BeanProperty.isReadable : goto [?= return $z0] >>>>>>>> com.thoughtworks.xstream.converters.javabean.BeanProperty.isReadable : return $z0
com.thoughtworks.xstream.converters.javabean.BeanProperty.isReadable : return $z0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z9 == 0
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z9 == 0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z10 = virtualinvoke r36.<com.thoughtworks.xstream.converters.javabean.BeanProperty: boolean isWritable()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z10 = virtualinvoke r36.<com.thoughtworks.xstream.converters.javabean.BeanProperty: boolean isWritable()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.BeanProperty.isWritable : $r1 = r0.<com.thoughtworks.xstream.converters.javabean.BeanProperty: java.lang.reflect.Method setter>
com.thoughtworks.xstream.converters.javabean.BeanProperty.isWritable : $r1 = r0.<com.thoughtworks.xstream.converters.javabean.BeanProperty: java.lang.reflect.Method setter> >>>>>>>> com.thoughtworks.xstream.converters.javabean.BeanProperty.isWritable : if $r1 == null
com.thoughtworks.xstream.converters.javabean.BeanProperty.isWritable : if $r1 == null >>>>>>>> com.thoughtworks.xstream.converters.javabean.BeanProperty.isWritable : $z0 = 0
com.thoughtworks.xstream.converters.javabean.BeanProperty.isWritable : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.BeanProperty.isWritable : return $z0
com.thoughtworks.xstream.converters.javabean.BeanProperty.isWritable : return $z0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z10 == 0
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z10 == 0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : goto [?= $z8 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>()]
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : goto [?= $z8 = interfaceinvoke r34.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r37 = new com.thoughtworks.xstream.converters.javabean.PropertyDictionary$BeanPropertyComparator
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r37 = new com.thoughtworks.xstream.converters.javabean.PropertyDictionary$BeanPropertyComparator >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : specialinvoke $r37.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary$BeanPropertyComparator: void <init>(com.thoughtworks.xstream.converters.javabean.PropertyDictionary$1)>(null)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : specialinvoke $r37.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary$BeanPropertyComparator: void <init>(com.thoughtworks.xstream.converters.javabean.PropertyDictionary$1)>(null) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r32, $r37)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : staticinvoke <java.util.Collections: void sort(java.util.List,java.util.Comparator)>(r32, $r37) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r38 = new com.thoughtworks.xstream.converters.javabean.PropertyDictionary$OrderRetainingMap
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r38 = new com.thoughtworks.xstream.converters.javabean.PropertyDictionary$OrderRetainingMap >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : specialinvoke $r38.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary$OrderRetainingMap: void <init>(com.thoughtworks.xstream.converters.javabean.PropertyDictionary$1)>(null)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : specialinvoke $r38.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary$OrderRetainingMap: void <init>(com.thoughtworks.xstream.converters.javabean.PropertyDictionary$1)>(null) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r39 = $r38
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r39 = $r38 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r40 = interfaceinvoke r32.<java.util.List: java.util.Iterator iterator()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : r40 = interfaceinvoke r32.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z12 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $z12 = interfaceinvoke r40.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z12 == 0
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : if $z12 == 0 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r45 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: java.util.Map keyedByPropertyNameCache>
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r45 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: java.util.Map keyedByPropertyNameCache> >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r39)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : interfaceinvoke $r45.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r39) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : exitmonitor r3
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : exitmonitor r3 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : goto [?= $r48 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: java.util.Map keyedByPropertyNameCache>]
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : goto [?= $r48 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: java.util.Map keyedByPropertyNameCache>] >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r48 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: java.util.Map keyedByPropertyNameCache>
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r48 = r0.<com.thoughtworks.xstream.converters.javabean.PropertyDictionary: java.util.Map keyedByPropertyNameCache> >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r49 = interfaceinvoke $r48.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r49 = interfaceinvoke $r48.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r50 = (java.util.Map) $r49
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : $r50 = (java.util.Map) $r49 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : return $r50
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.buildMap : return $r50 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r6 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r6 = interfaceinvoke r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : r4 = (com.thoughtworks.xstream.converters.javabean.BeanProperty) $r6
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : r4 = (com.thoughtworks.xstream.converters.javabean.BeanProperty) $r6 >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : if r4 != null
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : if r4 != null >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r7 = new com.thoughtworks.xstream.converters.reflection.ObjectAccessException
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r7 = new com.thoughtworks.xstream.converters.reflection.ObjectAccessException >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r5 = new java.lang.StringBuilder
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r5 = new java.lang.StringBuilder >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : specialinvoke $r5.<java.lang.StringBuilder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such property ")
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r8 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such property ") >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r9 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r9 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".")
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : specialinvoke $r7.<com.thoughtworks.xstream.converters.reflection.ObjectAccessException: void <init>(java.lang.String)>($r13)
com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : specialinvoke $r7.<com.thoughtworks.xstream.converters.reflection.ObjectAccessException: void <init>(java.lang.String)>($r13) >>>>>>>> com.thoughtworks.xstream.converters.javabean.PropertyDictionary.property : throw $r7
