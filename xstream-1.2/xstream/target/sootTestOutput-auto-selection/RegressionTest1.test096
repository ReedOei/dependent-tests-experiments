com.thoughtworks.xstream.mapper.DynamicProxyMapper.setAlias : r0.<com.thoughtworks.xstream.mapper.DynamicProxyMapper: java.lang.String alias> = r1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : if $r4 != null
com.thoughtworks.xstream.io.path.PathTracker.getPath : if $r4 != null >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i2 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i2 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i3 = $i2 + 1
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r1 = newarray (java.lang.String)[$i3]
com.thoughtworks.xstream.io.path.PathTracker.getPath : r1 = newarray (java.lang.String)[$i3] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r1[0] = ""
com.thoughtworks.xstream.io.path.PathTracker.getPath : r1[0] = "" >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : i0 = 0
com.thoughtworks.xstream.io.path.PathTracker.getPath : i0 = 0 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : if i0 >= $i4
com.thoughtworks.xstream.io.path.PathTracker.getPath : if i0 >= $i4 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r22 = new com.thoughtworks.xstream.io.path.Path
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r22 = new com.thoughtworks.xstream.io.path.Path >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : specialinvoke $r22.<com.thoughtworks.xstream.io.path.Path: void <init>(java.lang.String[])>(r1)
com.thoughtworks.xstream.io.path.PathTracker.getPath : specialinvoke $r22.<com.thoughtworks.xstream.io.path.Path: void <init>(java.lang.String[])>(r1) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> = $r22
com.thoughtworks.xstream.io.path.PathTracker.getPath : r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> = $r22 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r23 = r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r23 = r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : return $r23
com.thoughtworks.xstream.io.path.PathTracker.getPath : return $r23 >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : $r2 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String pathAsString>
com.thoughtworks.xstream.io.path.Path.toString : $r2 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String pathAsString> >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : if $r2 != null
com.thoughtworks.xstream.io.path.Path.toString : if $r2 != null >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : $r3 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.path.Path.toString : $r3 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : specialinvoke $r3.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.path.Path.toString : specialinvoke $r3.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : r1 = $r3
com.thoughtworks.xstream.io.path.Path.toString : r1 = $r3 >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : i0 = 0
com.thoughtworks.xstream.io.path.Path.toString : i0 = 0 >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : $r4 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
com.thoughtworks.xstream.io.path.Path.toString : $r4 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks> >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : $i1 = lengthof $r4
com.thoughtworks.xstream.io.path.Path.toString : $i1 = lengthof $r4 >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : if i0 >= $i1
com.thoughtworks.xstream.io.path.Path.toString : if i0 >= $i1 >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : if i0 <= 0
com.thoughtworks.xstream.io.path.Path.toString : if i0 <= 0 >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : $r6 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
com.thoughtworks.xstream.io.path.Path.toString : $r6 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks> >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : $r7 = $r6[i0]
com.thoughtworks.xstream.io.path.Path.toString : $r7 = $r6[i0] >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7)
com.thoughtworks.xstream.io.path.Path.toString : virtualinvoke r1.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7) >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : i0 = i0 + 1
com.thoughtworks.xstream.io.path.Path.toString : i0 = i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : goto [?= $r4 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>]
com.thoughtworks.xstream.io.path.Path.toString : goto [?= $r4 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>] >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : $r9 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.path.Path.toString : $r9 = virtualinvoke r1.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String pathAsString> = $r9
com.thoughtworks.xstream.io.path.Path.toString : r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String pathAsString> = $r9 >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : $r10 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String pathAsString>
com.thoughtworks.xstream.io.path.Path.toString : $r10 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String pathAsString> >>>>>>>> com.thoughtworks.xstream.io.path.Path.toString : return $r10
com.thoughtworks.xstream.io.path.Path.toString : return $r10 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r6 = r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: com.thoughtworks.xstream.converters.reflection.FieldDictionary fieldDictionary>
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r6 = r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: com.thoughtworks.xstream.converters.reflection.FieldDictionary fieldDictionary> >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : r3 = virtualinvoke $r6.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Iterator serializableFieldsFor(java.lang.Class)>($r7)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : r3 = virtualinvoke $r6.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Iterator serializableFieldsFor(java.lang.Class)>($r7) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.serializableFieldsFor : $r2 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)>(r1, 1)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.serializableFieldsFor : $r2 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)>(r1, 1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r9 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r9 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z1 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z1 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z1 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r3 = $r10
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r3 = $r10 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : entermonitor $r10
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : entermonitor $r10 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r11 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r11 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z2 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z2 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z2 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z2 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r12 = new java.util.HashMap
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r12 = new java.util.HashMap >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r12.<java.util.HashMap: void <init>()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r12.<java.util.HashMap: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r4 = $r12
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r4 = $r12 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r13 = new com.thoughtworks.xstream.core.util.OrderRetainingMap
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r13 = new com.thoughtworks.xstream.core.util.OrderRetainingMap >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r13.<com.thoughtworks.xstream.core.util.OrderRetainingMap: void <init>()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r13.<com.thoughtworks.xstream.core.util.OrderRetainingMap: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r5 = $r13
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r5 = $r13 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r14 = class "java/lang/Object"
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r14 = class "java/lang/Object" >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z3 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z3 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z3 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z3 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r6 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r6 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean reverseFieldDefinition()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean reverseFieldDefinition()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.reverseFieldDefinition : $z0 = <com.thoughtworks.xstream.core.JVM: boolean reverseFieldOrder>
com.thoughtworks.xstream.core.JVM.reverseFieldDefinition : $z0 = <com.thoughtworks.xstream.core.JVM: boolean reverseFieldOrder> >>>>>>>> com.thoughtworks.xstream.core.JVM.reverseFieldDefinition : return $z0
com.thoughtworks.xstream.core.JVM.reverseFieldDefinition : return $z0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z4 == 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z4 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : i6 = 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : i6 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $i7 = lengthof r6
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $i7 = lengthof r6 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if i6 >= $i7
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if i6 >= $i7 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r16 = r6[i6]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r16 = r6[i6] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : virtualinvoke r16.<java.lang.reflect.Field: void setAccessible(boolean)>(1)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : virtualinvoke r16.<java.lang.reflect.Field: void setAccessible(boolean)>(1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r17 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r17 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z5 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r17)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z5 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r17) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z5 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z5 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r18 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r18 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r16)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r16) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r20 = new com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r20 = new com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r21 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r21 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r22 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r22 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r20.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: void <init>(java.lang.String,java.lang.Class,int)>($r21, $r22, i6)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r20.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: void <init>(java.lang.String,java.lang.Class,int)>($r21, $r22, i6) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r16)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r16) >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r3 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.Set keyOrder>
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r3 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.Set keyOrder> >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r4 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.List valueOrder>
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r4 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.List valueOrder> >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2)
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r5 = specialinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r5 = specialinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r1 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r1 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : if $r1 == null
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : if $r1 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r2 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r2 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : goto [?= i0 = $i1]
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : goto [?= i0 = $i1] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : i0 = $i1
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : i0 = $i1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i2 = 29 * i0
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i2 = 29 * i0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r3 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r3 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : if $r3 == null
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : if $r3 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r4 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r4 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : goto [?= i4 = $i2 + $i3]
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : goto [?= i4 = $i2 + $i3] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : i4 = $i2 + $i3
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : i4 = $i2 + $i3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : return i4
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : return i4 >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : return $r5
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : return $r5 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : i6 = i6 + 1
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : i6 = i6 + 1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $i7 = lengthof r6]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $i7 = lengthof r6] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $r14 = class "java/lang/Object"]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $r14 = class "java/lang/Object"] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r24 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r24 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r4)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r26 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r26 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : exitmonitor r3
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : exitmonitor r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= (branch)]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if z0 == 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r29 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r29 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r30 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r30 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $r32 = (java.util.Map) $r30]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $r32 = (java.util.Map) $r30] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r32 = (java.util.Map) $r30
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r32 = (java.util.Map) $r30 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r33 = (java.util.Map) $r32
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r33 = (java.util.Map) $r32 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : return $r33
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : return $r33 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.serializableFieldsFor : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.serializableFieldsFor : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.values : $r1 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.List valueOrder>
com.thoughtworks.xstream.core.util.OrderRetainingMap.values : $r1 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.List valueOrder> >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.values : $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1)
com.thoughtworks.xstream.core.util.OrderRetainingMap.values : $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1) >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.values : return $r2
com.thoughtworks.xstream.core.util.OrderRetainingMap.values : return $r2 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.serializableFieldsFor : $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.serializableFieldsFor : $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.serializableFieldsFor : return $r4
com.thoughtworks.xstream.converters.reflection.FieldDictionary.serializableFieldsFor : return $r4 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : if $z0 == 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : r4 = (java.lang.reflect.Field) $r8
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : r4 = (java.lang.reflect.Field) $r8 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $z1 = virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: boolean fieldModifiersSupported(java.lang.reflect.Field)>(r4)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $z1 = virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: boolean fieldModifiersSupported(java.lang.reflect.Field)>(r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $i0 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $i0 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : if $z0 != 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $i1 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $i1 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i1)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : if $z1 != 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $z2 = 1
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $z2 = 1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : goto [?= return $z2]
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : goto [?= return $z2] >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : return $z2
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : return $z2 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : if $z1 != 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: void validateFieldAccess(java.lang.reflect.Field)>(r4)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: void validateFieldAccess(java.lang.reflect.Field)>(r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : $i0 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : $i0 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : if $z0 == 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : $f0 = <com.thoughtworks.xstream.core.JVM: float majorJavaVersion>
com.thoughtworks.xstream.core.JVM.is15 : $f0 = <com.thoughtworks.xstream.core.JVM: float majorJavaVersion> >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : $b0 = $f0 cmpl 1.5F
com.thoughtworks.xstream.core.JVM.is15 : $b0 = $f0 cmpl 1.5F >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : if $b0 < 0
com.thoughtworks.xstream.core.JVM.is15 : if $b0 < 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : $z0 = 1
com.thoughtworks.xstream.core.JVM.is15 : $z0 = 1 >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : goto [?= return $z0]
com.thoughtworks.xstream.core.JVM.is15 : goto [?= return $z0] >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : return $z0
com.thoughtworks.xstream.core.JVM.is15 : return $z0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : if $z1 == 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : virtualinvoke r1.<java.lang.reflect.Field: void setAccessible(boolean)>(1)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : virtualinvoke r1.<java.lang.reflect.Field: void setAccessible(boolean)>(1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : goto [?= return]
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : goto [?= return] >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r9 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r9 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r10 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r10 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r11 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r11 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : interfaceinvoke r2.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor: void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)>($r9, $r10, $r11, r5)
