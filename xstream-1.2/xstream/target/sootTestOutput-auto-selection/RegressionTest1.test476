com.thoughtworks.xstream.mapper.DefaultMapper.shouldSerializeMember : return 1 >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r2 = null
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r2 = null >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r4 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Map fieldNameToTypeMap>
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r4 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Map fieldNameToTypeMap> >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r3 = (java.lang.Class) $r5
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : r3 = (java.lang.Class) $r5 >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : if r3 == null
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : if r3 == null >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : return r2
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromAttribute : return r2 >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.addAttributeFor : $r2 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Set typeSet>
com.thoughtworks.xstream.mapper.AttributeMapper.addAttributeFor : $r2 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Set typeSet> >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.addAttributeFor : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.AttributeMapper.addAttributeFor : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.getMessage : $r1 = new java.lang.StringBuffer
com.thoughtworks.xstream.converters.ConversionException.getMessage : $r1 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.getMessage : specialinvoke $r1.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.converters.ConversionException.getMessage : specialinvoke $r1.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.getMessage : r2 = $r1
com.thoughtworks.xstream.converters.ConversionException.getMessage : r2 = $r1 >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.getMessage : $r6 = specialinvoke r0.<com.thoughtworks.xstream.core.BaseException: java.lang.String getMessage()>()
com.thoughtworks.xstream.converters.ConversionException.getMessage : $r6 = specialinvoke r0.<com.thoughtworks.xstream.core.BaseException: java.lang.String getMessage()>() >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.getMessage : if $r6 == null
com.thoughtworks.xstream.converters.ConversionException.getMessage : if $r6 == null >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.getMessage : $r7 = specialinvoke r0.<com.thoughtworks.xstream.core.BaseException: java.lang.String getMessage()>()
com.thoughtworks.xstream.converters.ConversionException.getMessage : $r7 = specialinvoke r0.<com.thoughtworks.xstream.core.BaseException: java.lang.String getMessage()>() >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.getMessage : virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7)
com.thoughtworks.xstream.converters.ConversionException.getMessage : virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r7) >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.getMessage : virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n---- Debugging information ----")
com.thoughtworks.xstream.converters.ConversionException.getMessage : virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n---- Debugging information ----") >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.getMessage : r3 = virtualinvoke r0.<com.thoughtworks.xstream.converters.ConversionException: java.util.Iterator keys()>()
com.thoughtworks.xstream.converters.ConversionException.getMessage : r3 = virtualinvoke r0.<com.thoughtworks.xstream.converters.ConversionException: java.util.Iterator keys()>() >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.keys : $r1 = r0.<com.thoughtworks.xstream.converters.ConversionException: java.util.Map stuff>
com.thoughtworks.xstream.converters.ConversionException.keys : $r1 = r0.<com.thoughtworks.xstream.converters.ConversionException: java.util.Map stuff> >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.keys : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>()
com.thoughtworks.xstream.converters.ConversionException.keys : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.keys : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>()
com.thoughtworks.xstream.converters.ConversionException.keys : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.keys : return $r3
com.thoughtworks.xstream.converters.ConversionException.keys : return $r3 >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.getMessage : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.converters.ConversionException.getMessage : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.getMessage : if $z0 == 0
com.thoughtworks.xstream.converters.ConversionException.getMessage : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.getMessage : virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n-------------------------------")
com.thoughtworks.xstream.converters.ConversionException.getMessage : virtualinvoke r2.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("\n-------------------------------") >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.getMessage : $r18 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.converters.ConversionException.getMessage : $r18 = virtualinvoke r2.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.getMessage : return $r18
com.thoughtworks.xstream.converters.ConversionException.getMessage : return $r18 >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.add : $r3 = r0.<com.thoughtworks.xstream.converters.ConversionException: java.util.Map stuff>
com.thoughtworks.xstream.converters.ConversionException.add : $r3 = r0.<com.thoughtworks.xstream.converters.ConversionException: java.util.Map stuff> >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.add : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.converters.ConversionException.add : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.get : $r2 = r0.<com.thoughtworks.xstream.converters.ConversionException: java.util.Map stuff>
com.thoughtworks.xstream.converters.ConversionException.get : $r2 = r0.<com.thoughtworks.xstream.converters.ConversionException: java.util.Map stuff> >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.get : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.ConversionException.get : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.get : $r4 = (java.lang.String) $r3
com.thoughtworks.xstream.converters.ConversionException.get : $r4 = (java.lang.String) $r3 >>>>>>>> com.thoughtworks.xstream.converters.ConversionException.get : return $r4
com.thoughtworks.xstream.converters.ConversionException.get : return $r4 >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : $r2 = r0.<com.thoughtworks.xstream.mapper.CGLIBMapper: java.lang.String alias>
com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : $r2 = r0.<com.thoughtworks.xstream.mapper.CGLIBMapper: java.lang.String alias> >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : if $z0 == 0
com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : $r3 = class "com/thoughtworks/xstream/mapper/CGLIBMapper$Marker"
com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : $r3 = class "com/thoughtworks/xstream/mapper/CGLIBMapper$Marker" >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : goto [?= return $r3]
com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : goto [?= return $r3] >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : return $r3
com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : return $r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : $r7 = r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: com.thoughtworks.xstream.converters.reflection.FieldDictionary fieldDictionary>
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : $r7 = r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: com.thoughtworks.xstream.converters.reflection.FieldDictionary fieldDictionary> >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : r5 = virtualinvoke $r7.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)>($r8, r2, r4)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : r5 = virtualinvoke $r7.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)>($r8, r2, r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : if r3 == null
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : if r3 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $z0 = 1
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $z0 = 1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : goto [?= r6 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)>(r1, $z0)]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : goto [?= r6 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)>(r1, $z0)] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r6 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)>(r1, $z0)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r6 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)>(r1, $z0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r9 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r9 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z1 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z1 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z1 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r3 = $r10
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r3 = $r10 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : entermonitor $r10
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : entermonitor $r10 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r11 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r11 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z2 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z2 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z2 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z2 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r12 = new java.util.HashMap
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r12 = new java.util.HashMap >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r12.<java.util.HashMap: void <init>()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r12.<java.util.HashMap: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r4 = $r12
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r4 = $r12 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r13 = new com.thoughtworks.xstream.core.util.OrderRetainingMap
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r13 = new com.thoughtworks.xstream.core.util.OrderRetainingMap >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r13.<com.thoughtworks.xstream.core.util.OrderRetainingMap: void <init>()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r13.<com.thoughtworks.xstream.core.util.OrderRetainingMap: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r5 = $r13
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r5 = $r13 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r14 = class "java/lang/Object"
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r14 = class "java/lang/Object" >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z3 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z3 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z3 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z3 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r6 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r6 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean reverseFieldDefinition()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean reverseFieldDefinition()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.reverseFieldDefinition : $z0 = <com.thoughtworks.xstream.core.JVM: boolean reverseFieldOrder>
com.thoughtworks.xstream.core.JVM.reverseFieldDefinition : $z0 = <com.thoughtworks.xstream.core.JVM: boolean reverseFieldOrder> >>>>>>>> com.thoughtworks.xstream.core.JVM.reverseFieldDefinition : return $z0
com.thoughtworks.xstream.core.JVM.reverseFieldDefinition : return $z0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z4 == 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z4 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : i6 = 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : i6 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $i7 = lengthof r6
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $i7 = lengthof r6 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if i6 >= $i7
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if i6 >= $i7 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $r14 = class "java/lang/Object"]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $r14 = class "java/lang/Object"] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r16 = r6[i6]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r16 = r6[i6] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : virtualinvoke r16.<java.lang.reflect.Field: void setAccessible(boolean)>(1)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : virtualinvoke r16.<java.lang.reflect.Field: void setAccessible(boolean)>(1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r17 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r17 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z5 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r17)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z5 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r17) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z5 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z5 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r18 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r18 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r16)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r16) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r20 = new com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r20 = new com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r21 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r21 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r22 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r22 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r20.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: void <init>(java.lang.String,java.lang.Class,int)>($r21, $r22, i6)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r20.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: void <init>(java.lang.String,java.lang.Class,int)>($r21, $r22, i6) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r16)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r16) >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r3 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.Set keyOrder>
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r3 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.Set keyOrder> >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r4 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.List valueOrder>
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r4 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.List valueOrder> >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2)
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r5 = specialinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r5 = specialinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r1 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r1 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : if $r1 == null
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : if $r1 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r2 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r2 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : goto [?= i0 = $i1]
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : goto [?= i0 = $i1] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : i0 = $i1
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : i0 = $i1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i2 = 29 * i0
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i2 = 29 * i0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r3 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r3 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : if $r3 == null
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : if $r3 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r4 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r4 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : goto [?= i4 = $i2 + $i3]
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : goto [?= i4 = $i2 + $i3] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : i4 = $i2 + $i3
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : i4 = $i2 + $i3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : return i4
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : return i4 >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : return $r5
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : return $r5 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : i6 = i6 + 1
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : i6 = i6 + 1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $i7 = lengthof r6]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $i7 = lengthof r6] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r24 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r24 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r4)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r26 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r26 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : exitmonitor r3
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : exitmonitor r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= (branch)]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if z0 == 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r29 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r29 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r30 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r30 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $r32 = (java.util.Map) $r30]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $r32 = (java.util.Map) $r30] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r32 = (java.util.Map) $r30
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r32 = (java.util.Map) $r30 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r33 = (java.util.Map) $r32
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r33 = (java.util.Map) $r32 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : return $r33
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : return $r33 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r19 = new com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r19 = new com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r9 = r19
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r9 = r19 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : specialinvoke r19.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: void <init>(java.lang.String,java.lang.Class,int)>(r2, r3, 0)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : specialinvoke r19.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: void <init>(java.lang.String,java.lang.Class,int)>(r2, r3, 0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : goto [?= $r10 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9)]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : goto [?= $r10 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9)] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r10 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r10 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r7 = (java.lang.reflect.Field) $r10
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r7 = (java.lang.reflect.Field) $r10 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : if r7 != null
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : if r7 != null >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r21 = new com.thoughtworks.xstream.converters.reflection.ObjectAccessException
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r21 = new com.thoughtworks.xstream.converters.reflection.ObjectAccessException >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r20 = new java.lang.StringBuilder
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r20 = new java.lang.StringBuilder >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : specialinvoke r20.<java.lang.StringBuilder: void <init>()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : specialinvoke r20.<java.lang.StringBuilder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r13 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such field ")
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r13 = virtualinvoke r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("No such field ") >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r14 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r14 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".")
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : specialinvoke r21.<com.thoughtworks.xstream.converters.reflection.ObjectAccessException: void <init>(java.lang.String)>($r18)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : specialinvoke r21.<com.thoughtworks.xstream.converters.reflection.ObjectAccessException: void <init>(java.lang.String)>($r18) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : throw r21
