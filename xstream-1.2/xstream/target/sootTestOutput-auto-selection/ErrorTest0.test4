com.thoughtworks.xstream.core.util.OrderRetainingMap.values : $r1 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.List valueOrder> >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.values : $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1)
com.thoughtworks.xstream.core.util.OrderRetainingMap.values : $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1) >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.values : return $r2
com.thoughtworks.xstream.core.util.OrderRetainingMap.values : return $r2 >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.keys : $r1 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map>
com.thoughtworks.xstream.core.MapBackedDataHolder.keys : $r1 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.keys : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>()
com.thoughtworks.xstream.core.MapBackedDataHolder.keys : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.keySet : $r1 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.Set keyOrder>
com.thoughtworks.xstream.core.util.OrderRetainingMap.keySet : $r1 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.Set keyOrder> >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.keySet : $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1)
com.thoughtworks.xstream.core.util.OrderRetainingMap.keySet : $r2 = staticinvoke <java.util.Collections: java.util.Set unmodifiableSet(java.util.Set)>($r1) >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.keySet : return $r2
com.thoughtworks.xstream.core.util.OrderRetainingMap.keySet : return $r2 >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.keys : $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2)
com.thoughtworks.xstream.core.MapBackedDataHolder.keys : $r3 = staticinvoke <java.util.Collections: java.util.Collection unmodifiableCollection(java.util.Collection)>($r2) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.keys : $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>()
com.thoughtworks.xstream.core.MapBackedDataHolder.keys : $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.keys : return $r4
com.thoughtworks.xstream.core.MapBackedDataHolder.keys : return $r4 >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.entrySet : $r1 = new java.lang.UnsupportedOperationException
com.thoughtworks.xstream.core.util.OrderRetainingMap.entrySet : $r1 = new java.lang.UnsupportedOperationException >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.entrySet : specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>()
com.thoughtworks.xstream.core.util.OrderRetainingMap.entrySet : specialinvoke $r1.<java.lang.UnsupportedOperationException: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.entrySet : throw $r1
