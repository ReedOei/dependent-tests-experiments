com.thoughtworks.xstream.io.xml.SaxWriter.underlyingWriter : return r0 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>()
com.thoughtworks.xstream.core.TreeMarshaller.put : specialinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void lazilyCreateDataHolder()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r2 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : if $r2 != null >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : $r1 = new com.thoughtworks.xstream.core.MapBackedDataHolder >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>()
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : specialinvoke $r1.<com.thoughtworks.xstream.core.MapBackedDataHolder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1
com.thoughtworks.xstream.core.TreeMarshaller.lazilyCreateDataHolder : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = $r1 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder>
com.thoughtworks.xstream.core.TreeMarshaller.put : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.put : interfaceinvoke $r3.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.TreeMarshaller.put : interfaceinvoke $r3.<com.thoughtworks.xstream.converters.DataHolder: void put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.put : $r3 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map>
com.thoughtworks.xstream.core.MapBackedDataHolder.put : $r3 = r0.<com.thoughtworks.xstream.core.MapBackedDataHolder: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.MapBackedDataHolder.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.MapBackedDataHolder.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.xml.SaxWriter: void flushStartTag()>()
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.xml.SaxWriter: void flushStartTag()>() >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.flushStartTag : $z0 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: boolean startTagInProgress>
com.thoughtworks.xstream.io.xml.SaxWriter.flushStartTag : $z0 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: boolean startTagInProgress> >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.flushStartTag : if $z0 == 0
com.thoughtworks.xstream.io.xml.SaxWriter.flushStartTag : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $r2 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: char[] buffer>
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $r2 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $i1 = lengthof $r2
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $i1 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : if i0 <= $i1
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : if i0 <= $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $r4 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: char[] buffer>
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $r4 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r4, 0)
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r4, 0) >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $r5 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: org.xml.sax.ContentHandler contentHandler>
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $r5 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: org.xml.sax.ContentHandler contentHandler> >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $r6 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: char[] buffer>
com.thoughtworks.xstream.io.xml.SaxWriter.setValue : $r6 = r0.<com.thoughtworks.xstream.io.xml.SaxWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.io.xml.SaxWriter.setValue : interfaceinvoke $r5.<org.xml.sax.ContentHandler: void characters(char[],int,int)>($r6, 0, i0)
