com.thoughtworks.xstream.core.util.CustomObjectOutputStream.writeFloat : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream: com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback peekCallback()>() >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.writeFloat : $r1 = new java.lang.Float
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.writeFloat : $r1 = new java.lang.Float >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.writeFloat : specialinvoke $r1.<java.lang.Float: void <init>(float)>(f0)
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.writeFloat : specialinvoke $r1.<java.lang.Float: void <init>(float)>(f0) >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.writeFloat : interfaceinvoke $r2.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback: void writeToStream(java.lang.Object)>($r1)
com.thoughtworks.xstream.core.util.CustomObjectOutputStream.writeFloat : interfaceinvoke $r2.<com.thoughtworks.xstream.core.util.CustomObjectOutputStream$StreamCallback: void writeToStream(java.lang.Object)>($r1) >>>>>>>> com.thoughtworks.xstream.core.util.CustomObjectOutputStream.writeFloat : return
