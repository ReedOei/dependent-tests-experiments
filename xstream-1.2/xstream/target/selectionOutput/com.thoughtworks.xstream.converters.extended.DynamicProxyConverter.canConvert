com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "com/thoughtworks/xstream/mapper/DynamicProxyMapper$DynamicProxy") >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z1 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z2 = 1
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z2 = 1 >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : goto [?= return $z2]
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : goto [?= return $z2] >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z1 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z2 = 1
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : return $z2
