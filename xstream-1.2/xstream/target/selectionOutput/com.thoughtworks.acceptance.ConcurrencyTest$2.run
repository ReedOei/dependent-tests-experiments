com.thoughtworks.acceptance.ConcurrencyTest$2.run : i0 = 0 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : r1 = r0
com.thoughtworks.acceptance.ConcurrencyTest$2.run : i0 = 0 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : r11 = $r10 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : staticinvoke <junit.framework.Assert: void fail(java.lang.String)>("Unexpected InterruptedException")
com.thoughtworks.acceptance.ConcurrencyTest$2.run : staticinvoke <junit.framework.Assert: void fail(java.lang.String)>("Unexpected InterruptedException") >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r12 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: int[] val$counter>
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r12 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: int[] val$counter> >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : r13 = $r12
com.thoughtworks.acceptance.ConcurrencyTest$2.run : r13 = $r12 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : entermonitor $r12
com.thoughtworks.acceptance.ConcurrencyTest$2.run : entermonitor $r12 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r14 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: int[] val$counter>
com.thoughtworks.acceptance.ConcurrencyTest$2.run : entermonitor $r12 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r15 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : r3 = $r15 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : exitmonitor r13
com.thoughtworks.acceptance.ConcurrencyTest$2.run : r3 = $r15 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r15 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : exitmonitor r13 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : throw r3
com.thoughtworks.acceptance.ConcurrencyTest$2.run : exitmonitor r13 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r15 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r14 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: int[] val$counter> >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $b1 = 0
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r14 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: int[] val$counter> >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r15 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $b1 = 0 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $i2 = $r14[$b1]
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $b1 = 0 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r15 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $i2 = $r14[$b1] >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $i3 = $i2 + i0
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $i2 = $r14[$b1] >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r15 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $i3 = $i2 + i0 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r14[$b1] = $i3
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $i3 = $i2 + i0 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r15 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r14[$b1] = $i3 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : exitmonitor r13
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r14[$b1] = $i3 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r15 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : exitmonitor r13 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : goto [?= return]
com.thoughtworks.acceptance.ConcurrencyTest$2.run : exitmonitor r13 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r15 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : goto [?= return] >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : return
com.thoughtworks.acceptance.ConcurrencyTest$2.run : r1 = r0 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : entermonitor r0
com.thoughtworks.acceptance.ConcurrencyTest$2.run : r1 = r0 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : entermonitor r0 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r5 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : entermonitor r0 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : entermonitor r0 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : virtualinvoke r0.<java.lang.Object: void notifyAll()>()
com.thoughtworks.acceptance.ConcurrencyTest$2.run : virtualinvoke r0.<java.lang.Object: void notifyAll()>() >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r5 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : virtualinvoke r0.<java.lang.Object: void notifyAll()>() >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : virtualinvoke r0.<java.lang.Object: void notifyAll()>() >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : virtualinvoke r0.<java.lang.Object: void wait()>()
com.thoughtworks.acceptance.ConcurrencyTest$2.run : virtualinvoke r0.<java.lang.Object: void wait()>() >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r5 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : virtualinvoke r0.<java.lang.Object: void wait()>() >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : virtualinvoke r0.<java.lang.Object: void wait()>() >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : exitmonitor r1
com.thoughtworks.acceptance.ConcurrencyTest$2.run : exitmonitor r1 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r5 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : exitmonitor r1 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : exitmonitor r1 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : goto [?= $z0 = staticinvoke <com.thoughtworks.acceptance.ConcurrencyTest$2: boolean interrupted()>()]
com.thoughtworks.acceptance.ConcurrencyTest$2.run : goto [?= $z0 = staticinvoke <com.thoughtworks.acceptance.ConcurrencyTest$2: boolean interrupted()>()] >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $z0 = staticinvoke <com.thoughtworks.acceptance.ConcurrencyTest$2: boolean interrupted()>()
com.thoughtworks.acceptance.ConcurrencyTest$2.run : goto [?= $z0 = staticinvoke <com.thoughtworks.acceptance.ConcurrencyTest$2: boolean interrupted()>()] >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $z0 = staticinvoke <com.thoughtworks.acceptance.ConcurrencyTest$2: boolean interrupted()>() >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : if $z0 != 0
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $z0 = staticinvoke <com.thoughtworks.acceptance.ConcurrencyTest$2: boolean interrupted()>() >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : if $z0 != 0 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r6 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: com.thoughtworks.acceptance.ConcurrencyTest this$0>
com.thoughtworks.acceptance.ConcurrencyTest$2.run : if $z0 != 0 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : goto [?= $r12 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: int[] val$counter>]
com.thoughtworks.acceptance.ConcurrencyTest$2.run : if $z0 != 0 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : goto [?= $r12 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: int[] val$counter>] >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r12 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: int[] val$counter>
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r6 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: com.thoughtworks.acceptance.ConcurrencyTest this$0> >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r7 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: java.lang.Object val$object>
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r6 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: com.thoughtworks.acceptance.ConcurrencyTest this$0> >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r7 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: java.lang.Object val$object> >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r8 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: java.lang.String val$xml>
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r7 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: java.lang.Object val$object> >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r8 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: java.lang.String val$xml> >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : virtualinvoke $r6.<com.thoughtworks.acceptance.ConcurrencyTest: java.lang.Object assertBothWays(java.lang.Object,java.lang.String)>($r7, $r8)
com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r8 = r0.<com.thoughtworks.acceptance.ConcurrencyTest$2: java.lang.String val$xml> >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : virtualinvoke $r6.<com.thoughtworks.acceptance.ConcurrencyTest: java.lang.Object assertBothWays(java.lang.Object,java.lang.String)>($r7, $r8) >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : i0 = i0 + 1
com.thoughtworks.acceptance.ConcurrencyTest$2.run : virtualinvoke $r6.<com.thoughtworks.acceptance.ConcurrencyTest: java.lang.Object assertBothWays(java.lang.Object,java.lang.String)>($r7, $r8) >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : i0 = i0 + 1 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : goto [?= $z0 = staticinvoke <com.thoughtworks.acceptance.ConcurrencyTest$2: boolean interrupted()>()]
com.thoughtworks.acceptance.ConcurrencyTest$2.run : i0 = i0 + 1 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : goto [?= $z0 = staticinvoke <com.thoughtworks.acceptance.ConcurrencyTest$2: boolean interrupted()>()] >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $z0 = staticinvoke <com.thoughtworks.acceptance.ConcurrencyTest$2: boolean interrupted()>()
com.thoughtworks.acceptance.ConcurrencyTest$2.run : goto [?= $z0 = staticinvoke <com.thoughtworks.acceptance.ConcurrencyTest$2: boolean interrupted()>()] >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : r2 = $r5 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r5 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : r2 = $r5 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : r2 = $r5 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : exitmonitor r1
com.thoughtworks.acceptance.ConcurrencyTest$2.run : exitmonitor r1 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r5 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : exitmonitor r1 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
com.thoughtworks.acceptance.ConcurrencyTest$2.run : exitmonitor r1 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : throw r2
com.thoughtworks.acceptance.ConcurrencyTest$2.run : throw r2 >>>>>>>> com.thoughtworks.acceptance.ConcurrencyTest$2.run : $r10 := @caughtexception
