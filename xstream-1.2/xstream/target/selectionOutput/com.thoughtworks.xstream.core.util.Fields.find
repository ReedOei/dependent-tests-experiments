com.thoughtworks.xstream.core.util.Fields.find : r6 = $r5 >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : $r7 = new java.lang.RuntimeException
com.thoughtworks.xstream.core.util.Fields.find : $r7 = new java.lang.RuntimeException >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : $r3 = new java.lang.StringBuilder
com.thoughtworks.xstream.core.util.Fields.find : $r3 = new java.lang.StringBuilder >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
com.thoughtworks.xstream.core.util.Fields.find : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not access ")
com.thoughtworks.xstream.core.util.Fields.find : $r8 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Could not access ") >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : $r9 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.core.util.Fields.find : $r9 = virtualinvoke r0.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9)
com.thoughtworks.xstream.core.util.Fields.find : $r10 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r9) >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".")
com.thoughtworks.xstream.core.util.Fields.find : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
com.thoughtworks.xstream.core.util.Fields.find : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" field")
com.thoughtworks.xstream.core.util.Fields.find : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" field") >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>()
com.thoughtworks.xstream.core.util.Fields.find : $r14 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14)
com.thoughtworks.xstream.core.util.Fields.find : specialinvoke $r7.<java.lang.RuntimeException: void <init>(java.lang.String)>($r14) >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : throw $r7
com.thoughtworks.xstream.core.util.Fields.find : r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1)
com.thoughtworks.xstream.core.util.Fields.find : r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : $r5 := @caughtexception
com.thoughtworks.xstream.core.util.Fields.find : virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1) >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : return r2
com.thoughtworks.xstream.core.util.Fields.find : virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1) >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : $r5 := @caughtexception
