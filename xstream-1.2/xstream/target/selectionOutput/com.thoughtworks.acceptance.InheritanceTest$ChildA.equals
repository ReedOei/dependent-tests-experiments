com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : r2 = (com.thoughtworks.acceptance.InheritanceTest$ChildA) r1 >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r3 = virtualinvoke r0.<com.thoughtworks.acceptance.InheritanceTest$ChildA: java.util.Map getChildStuff()>()
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r3 = virtualinvoke r0.<com.thoughtworks.acceptance.InheritanceTest$ChildA: java.util.Map getChildStuff()>() >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r5 = virtualinvoke r2.<com.thoughtworks.acceptance.InheritanceTest$ChildA: java.util.Map getChildStuff()>()
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r5 = virtualinvoke r2.<com.thoughtworks.acceptance.InheritanceTest$ChildA: java.util.Map getChildStuff()>() >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r6 = virtualinvoke $r5.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r6)
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $z0 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r6) >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : if $z0 != 0
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : if $z0 != 0 >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : return 0
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : if $z0 != 0 >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r7 = virtualinvoke r0.<com.thoughtworks.acceptance.InheritanceTest$ChildA: java.util.List getParentStuff()>()
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r7 = virtualinvoke r0.<com.thoughtworks.acceptance.InheritanceTest$ChildA: java.util.List getParentStuff()>() >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r9 = virtualinvoke r2.<com.thoughtworks.acceptance.InheritanceTest$ChildA: java.util.List getParentStuff()>()
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r9 = virtualinvoke r2.<com.thoughtworks.acceptance.InheritanceTest$ChildA: java.util.List getParentStuff()>() >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r10 = virtualinvoke $r9.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $z1 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r10)
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $z1 = virtualinvoke $r8.<java.lang.Object: boolean equals(java.lang.Object)>($r10) >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : if $z1 != 0
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : if $z1 != 0 >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : return 0
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : if $z1 != 0 >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r11 = virtualinvoke r0.<com.thoughtworks.acceptance.InheritanceTest$ChildA: java.util.Map getChildStuff()>()
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r11 = virtualinvoke r0.<com.thoughtworks.acceptance.InheritanceTest$ChildA: java.util.Map getChildStuff()>() >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r12 = virtualinvoke r2.<com.thoughtworks.acceptance.InheritanceTest$ChildA: java.util.Map getChildStuff()>()
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r12 = virtualinvoke r2.<com.thoughtworks.acceptance.InheritanceTest$ChildA: java.util.Map getChildStuff()>() >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $z2 = interfaceinvoke $r11.<java.util.Map: boolean equals(java.lang.Object)>($r12)
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $z2 = interfaceinvoke $r11.<java.util.Map: boolean equals(java.lang.Object)>($r12) >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : if $z2 == 0
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : if $z2 == 0 >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r13 = virtualinvoke r0.<com.thoughtworks.acceptance.InheritanceTest$ChildA: java.util.List getParentStuff()>()
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : if $z2 == 0 >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $z4 = 0
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $z4 = 0 >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : return $z4
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r13 = virtualinvoke r0.<com.thoughtworks.acceptance.InheritanceTest$ChildA: java.util.List getParentStuff()>() >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r14 = virtualinvoke r2.<com.thoughtworks.acceptance.InheritanceTest$ChildA: java.util.List getParentStuff()>()
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $r14 = virtualinvoke r2.<com.thoughtworks.acceptance.InheritanceTest$ChildA: java.util.List getParentStuff()>() >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $z3 = interfaceinvoke $r13.<java.util.List: boolean equals(java.lang.Object)>($r14)
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $z3 = interfaceinvoke $r13.<java.util.List: boolean equals(java.lang.Object)>($r14) >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : if $z3 == 0
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : if $z3 == 0 >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $z4 = 1
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : if $z3 == 0 >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $z4 = 0
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : $z4 = 1 >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : goto [?= return $z4]
com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : goto [?= return $z4] >>>>>>>> com.thoughtworks.acceptance.InheritanceTest$ChildA.equals : return $z4
