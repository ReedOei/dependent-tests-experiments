com.thoughtworks.xstream.mapper.CachingMapper.readResolve : $r1 = new java.util.HashMap >>>>>>>> com.thoughtworks.xstream.mapper.CachingMapper.readResolve : specialinvoke $r1.<java.util.HashMap: void <init>()>()
com.thoughtworks.xstream.mapper.CachingMapper.readResolve : specialinvoke $r1.<java.util.HashMap: void <init>()>() >>>>>>>> com.thoughtworks.xstream.mapper.CachingMapper.readResolve : $r2 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r1)
com.thoughtworks.xstream.mapper.CachingMapper.readResolve : $r2 = staticinvoke <java.util.Collections: java.util.Map synchronizedMap(java.util.Map)>($r1) >>>>>>>> com.thoughtworks.xstream.mapper.CachingMapper.readResolve : r0.<com.thoughtworks.xstream.mapper.CachingMapper: java.util.Map cache> = $r2
com.thoughtworks.xstream.mapper.CachingMapper.readResolve : r0.<com.thoughtworks.xstream.mapper.CachingMapper: java.util.Map cache> = $r2 >>>>>>>> com.thoughtworks.xstream.mapper.CachingMapper.readResolve : return r0
