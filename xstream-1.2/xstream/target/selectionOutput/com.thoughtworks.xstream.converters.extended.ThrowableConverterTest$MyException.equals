com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $z0 = specialinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : if $z0 == 0
com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $z1 = r1 instanceof com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException
com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $z3 = 0
com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $z3 = 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : return $z3
com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $z1 = r1 instanceof com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : if $z1 == 0
com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $r2 = r0.<com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException: java.math.BigDecimal number>
com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $z3 = 0
com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $r2 = r0.<com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException: java.math.BigDecimal number> >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $r3 = (com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException) r1
com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $r3 = (com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException) r1 >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $r4 = $r3.<com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException: java.math.BigDecimal number>
com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $r4 = $r3.<com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException: java.math.BigDecimal number> >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $z2 = virtualinvoke $r2.<java.math.BigDecimal: boolean equals(java.lang.Object)>($r4)
com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $z2 = virtualinvoke $r2.<java.math.BigDecimal: boolean equals(java.lang.Object)>($r4) >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : if $z2 == 0
com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $z3 = 1
com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $z3 = 0
com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : $z3 = 1 >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : goto [?= return $z3]
com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : goto [?= return $z3] >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverterTest$MyException.equals : return $z3
