com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("void") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z0 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Void: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("boolean")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("boolean") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z1 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Boolean: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("byte")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("byte") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z2 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Byte: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("char")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("char") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z3 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z3 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Character: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z3 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("short")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("short") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z4 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z4 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Short: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z4 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("int")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("int") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z5 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z5 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Integer: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z5 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("long")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("long") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z6 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z6 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Long: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z6 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("float")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("float") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z7 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z7 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Float: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z7 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("double")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("double") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z8 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z8 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Double: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z8 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = null
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = null >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : return $r2
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Double: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2]
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2] >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : return $r2
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Float: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2]
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2] >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : return $r2
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Long: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2]
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2] >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : return $r2
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Integer: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2]
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2] >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : return $r2
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Short: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2]
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2] >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : return $r2
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Character: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2]
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2] >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : return $r2
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Byte: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2]
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2] >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : return $r2
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Boolean: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2]
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2] >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : return $r2
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Void: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2]
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2] >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : return $r2
