com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r6 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: com.thoughtworks.xstream.io.xml.QNameMap qnameMap> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxWriter: java.lang.String escapeXmlName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxWriter: java.lang.String escapeXmlName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r2 = virtualinvoke $r6.<com.thoughtworks.xstream.io.xml.QNameMap: javax.xml.namespace.QName getQName(java.lang.String)>($r7)
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r2 = virtualinvoke $r6.<com.thoughtworks.xstream.io.xml.QNameMap: javax.xml.namespace.QName getQName(java.lang.String)>($r7) >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r3 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.util.Map javaToQName>
com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r3 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.util.Map javaToQName> >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : if $r3 == null
com.thoughtworks.xstream.io.xml.QNameMap.getQName : if $r3 == null >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r6 = new javax.xml.namespace.QName
com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r6 = new javax.xml.namespace.QName >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r7 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.lang.String defaultNamespace>
com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r7 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.lang.String defaultNamespace> >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r8 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.lang.String defaultPrefix>
com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r8 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.lang.String defaultPrefix> >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : specialinvoke $r6.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r7, r1, $r8)
com.thoughtworks.xstream.io.xml.QNameMap.getQName : specialinvoke $r6.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r7, r1, $r8) >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : return $r6
com.thoughtworks.xstream.io.xml.QNameMap.getQName : return $r6 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r3 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getPrefix()>()
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r3 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getPrefix()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r4 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>()
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r4 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if r3 == null
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if r3 == null >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i0 = virtualinvoke r3.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i0 = virtualinvoke r3.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if $i0 <= 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if $i0 <= 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $z3 = 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $z3 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z0 = $z3
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z0 = $z3 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if r4 == null
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if r4 == null >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i1 = virtualinvoke r4.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i1 = virtualinvoke r4.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if $i1 <= 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if $i1 <= 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $z4 = 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $z4 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z1 = $z4
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z1 = $z4 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z2 = 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z2 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if z1 == 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if z0 == 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r15 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out>
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r15 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r16 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getLocalPart()>()
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r16 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getLocalPart()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : interfaceinvoke $r15.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String,java.lang.String,java.lang.String)>(r3, $r16, r4)
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : interfaceinvoke $r15.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String,java.lang.String,java.lang.String)>(r3, $r16, r4) >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth>
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i3 = $i2 + 1
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> = $i3
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> = $i3 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : goto [?= return]
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.addAttribute : $r4 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out>
com.thoughtworks.xstream.io.xml.StaxWriter.addAttribute : $r4 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.addAttribute : $r5 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxWriter: java.lang.String escapeXmlName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.StaxWriter.addAttribute : $r5 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxWriter: java.lang.String escapeXmlName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.addAttribute : interfaceinvoke $r4.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String)>($r5, r2)
com.thoughtworks.xstream.io.xml.StaxWriter.addAttribute : interfaceinvoke $r4.<javax.xml.stream.XMLStreamWriter: void writeAttribute(java.lang.String,java.lang.String)>($r5, r2) >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.addAttribute : goto [?= return]
com.thoughtworks.xstream.io.xml.StaxWriter.addAttribute : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth>
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i1 = $i0 - 1
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> = $i1
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> = $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out>
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>()
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth>
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : if $i2 != 0
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : if $i2 != 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: boolean writeEnclosingDocument>
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: boolean writeEnclosingDocument> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : if $z0 == 0
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out>
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : interfaceinvoke $r4.<javax.xml.stream.XMLStreamWriter: void writeEndDocument()>()
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : interfaceinvoke $r4.<javax.xml.stream.XMLStreamWriter: void writeEndDocument()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : goto [?= return]
