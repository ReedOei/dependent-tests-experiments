com.thoughtworks.xstream.core.JVM.loadClass : $r3 = r0.<com.thoughtworks.xstream.core.JVM: java.util.Map loaderCache> >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.JVM.loadClass : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : r2 = (java.lang.Class) $r4
com.thoughtworks.xstream.core.JVM.loadClass : r2 = (java.lang.Class) $r4 >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : if r2 != null
com.thoughtworks.xstream.core.JVM.loadClass : if r2 != null >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.core.JVM.loadClass : $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
com.thoughtworks.xstream.core.JVM.loadClass : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, $r6)
com.thoughtworks.xstream.core.JVM.loadClass : r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, $r6) >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : $r7 = r0.<com.thoughtworks.xstream.core.JVM: java.util.Map loaderCache>
com.thoughtworks.xstream.core.JVM.loadClass : $r7 = r0.<com.thoughtworks.xstream.core.JVM: java.util.Map loaderCache> >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.JVM.loadClass : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : return r2
