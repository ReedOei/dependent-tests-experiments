com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $r2 = new com.thoughtworks.xstream.io.binary.Token$StartNode >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry idRegistry>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry idRegistry> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $l0 = virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long getId(java.lang.String)>(r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $l0 = virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long getId(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: java.util.Map ids>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: java.util.Map ids> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r2 = (java.lang.Long) $r5
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r2 = (java.lang.Long) $r5 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : if r2 != null
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : if r2 != null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r6 = new java.lang.Long
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r6 = new java.lang.Long >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long nextId>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long nextId> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l1 = $l0 + 1L
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l1 = $l0 + 1L >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long nextId> = $l1
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long nextId> = $l1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : specialinvoke $r6.<java.lang.Long: void <init>(long)>($l1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : specialinvoke $r6.<java.lang.Long: void <init>(long)>($l1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r2 = $r6
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r2 = $r6 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r7 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: java.util.Map ids>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r7 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: java.util.Map ids> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r9 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: com.thoughtworks.xstream.io.binary.BinaryStreamWriter this$0>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r9 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: com.thoughtworks.xstream.io.binary.BinaryStreamWriter this$0> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r10 = new com.thoughtworks.xstream.io.binary.Token$MapIdToValue
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r10 = new com.thoughtworks.xstream.io.binary.Token$MapIdToValue >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l2 = virtualinvoke r2.<java.lang.Long: long longValue()>()
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l2 = virtualinvoke r2.<java.lang.Long: long longValue()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : specialinvoke $r10.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void <init>(long,java.lang.String)>($l2, r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : specialinvoke $r10.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void <init>(long,java.lang.String)>($l2, r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : staticinvoke <com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void access$100(com.thoughtworks.xstream.io.binary.BinaryStreamWriter,com.thoughtworks.xstream.io.binary.Token)>($r9, $r10)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : staticinvoke <com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void access$100(com.thoughtworks.xstream.io.binary.BinaryStreamWriter,com.thoughtworks.xstream.io.binary.Token)>($r9, $r10) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.access$100 : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>(r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.access$100 : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: com.thoughtworks.xstream.io.binary.Token$Formatter tokenFormatter>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: com.thoughtworks.xstream.io.binary.Token$Formatter tokenFormatter> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: java.io.DataOutputStream out>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: java.io.DataOutputStream out> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.Token$Formatter: void write(java.io.DataOutput,com.thoughtworks.xstream.io.binary.Token)>($r4, r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.Token$Formatter: void write(java.io.DataOutput,com.thoughtworks.xstream.io.binary.Token)>($r4, r1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : l0 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: long getId()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.write : l0 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: long getId()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.Token: long id>
com.thoughtworks.xstream.io.binary.Token.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.Token: long id> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getId : return $l0
com.thoughtworks.xstream.io.binary.Token.getId : return $l0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b2 = l0 cmp 255L
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b2 = l0 cmp 255L >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b2 > 0
com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b2 > 0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : b1 = 8
com.thoughtworks.xstream.io.binary.Token$Formatter.write : b1 = 8 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : goto [?= $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()]
com.thoughtworks.xstream.io.binary.Token$Formatter.write : goto [?= $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()] >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getType : $b0 = r0.<com.thoughtworks.xstream.io.binary.Token: byte type>
com.thoughtworks.xstream.io.binary.Token.getType : $b0 = r0.<com.thoughtworks.xstream.io.binary.Token: byte type> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getType : return $b0
com.thoughtworks.xstream.io.binary.Token.getType : return $b0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $i6 = $b5 + b1
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $i6 = $b5 + b1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i6)
com.thoughtworks.xstream.io.binary.Token$Formatter.write : interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i6) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void writeTo(java.io.DataOutput,byte)>(r1, b1)
com.thoughtworks.xstream.io.binary.Token$Formatter.write : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void writeTo(java.io.DataOutput,byte)>(r1, b1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : $l1 = r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long id>
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : $l1 = r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long id> >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void writeId(java.io.DataOutput,long,byte)>(r1, $l1, b0)
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void writeId(java.io.DataOutput,long,byte)>(r1, $l1, b0) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $b2 = l0 cmp 0L
com.thoughtworks.xstream.io.binary.Token.writeId : $b2 = l0 cmp 0L >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : if $b2 >= 0
com.thoughtworks.xstream.io.binary.Token.writeId : if $b2 >= 0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : lookupswitch(b1) {     case 8:
com.thoughtworks.xstream.io.binary.Token.writeId : lookupswitch(b1) {     case 8: >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $i3 = (int) l0
com.thoughtworks.xstream.io.binary.Token.writeId : $i3 = (int) l0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $b4 = (byte) $i3
com.thoughtworks.xstream.io.binary.Token.writeId : $b4 = (byte) $i3 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $i5 = $b4 + -128
com.thoughtworks.xstream.io.binary.Token.writeId : $i5 = $b4 + -128 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($i5)
com.thoughtworks.xstream.io.binary.Token.writeId : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($i5) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : goto [?= return]
com.thoughtworks.xstream.io.binary.Token.writeId : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : $r2 = r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String value>
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : $r2 = r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String value> >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void writeString(java.io.DataOutput,java.lang.String)>(r1, $r2)
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void writeString(java.io.DataOutput,java.lang.String)>(r1, $r2) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeString : interfaceinvoke r1.<java.io.DataOutput: void writeUTF(java.lang.String)>(r2)
com.thoughtworks.xstream.io.binary.Token.writeString : interfaceinvoke r1.<java.io.DataOutput: void writeUTF(java.lang.String)>(r2) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : goto [?= return]
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l3 = virtualinvoke r2.<java.lang.Long: long longValue()>()
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l3 = virtualinvoke r2.<java.lang.Long: long longValue()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : return $l3
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : return $l3 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : specialinvoke $r2.<com.thoughtworks.xstream.io.binary.Token$StartNode: void <init>(long)>($l0)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : specialinvoke $r2.<com.thoughtworks.xstream.io.binary.Token$StartNode: void <init>(long)>($l0) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>($r2)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>($r2) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : $l1 = r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id>
com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : $l1 = r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id> >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: void writeId(java.io.DataOutput,long,byte)>(r1, $l1, b0)
com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: void writeId(java.io.DataOutput,long,byte)>(r1, $l1, b0) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : $r1 = new com.thoughtworks.xstream.io.binary.Token$EndNode
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : $r1 = new com.thoughtworks.xstream.io.binary.Token$EndNode >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.Token$EndNode: void <init>()>()
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.Token$EndNode: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>($r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>($r1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b3 = l0 cmp 65535L
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b3 = l0 cmp 65535L >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b3 > 0
com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b3 > 0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : b1 = 16
com.thoughtworks.xstream.io.binary.Token$Formatter.write : b1 = 16 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $i6 = (int) l0
com.thoughtworks.xstream.io.binary.Token.writeId : $i6 = (int) l0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $s7 = (short) $i6
com.thoughtworks.xstream.io.binary.Token.writeId : $s7 = (short) $i6 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $i8 = $s7 + -32768
com.thoughtworks.xstream.io.binary.Token.writeId : $i8 = $s7 + -32768 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : interfaceinvoke r1.<java.io.DataOutput: void writeShort(int)>($i8)
com.thoughtworks.xstream.io.binary.Token.writeId : interfaceinvoke r1.<java.io.DataOutput: void writeShort(int)>($i8) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void push()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void push()>() >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : $r1 = new com.thoughtworks.xstream.io.binary.ReaderDepthState$State
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : $r1 = new com.thoughtworks.xstream.io.binary.ReaderDepthState$State >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: void <init>(com.thoughtworks.xstream.io.binary.ReaderDepthState$1)>(null)
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: void <init>(com.thoughtworks.xstream.io.binary.ReaderDepthState$1)>(null) >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r2 = $r1
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r2 = $r1 >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : $r3 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : $r3 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: com.thoughtworks.xstream.io.binary.ReaderDepthState$State parent> = $r3
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: com.thoughtworks.xstream.io.binary.ReaderDepthState$State parent> = $r3 >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> = r2
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> = r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : r1 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : r1 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r2 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r2 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : if $r2 != null
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : if $r2 != null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token$Formatter tokenFormatter>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token$Formatter tokenFormatter> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: java.io.DataInputStream in>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: java.io.DataInputStream in> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r1 = virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.Token$Formatter: com.thoughtworks.xstream.io.binary.Token read(java.io.DataInput)>($r4)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r1 = virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.Token$Formatter: com.thoughtworks.xstream.io.binary.Token read(java.io.DataInput)>($r4) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : b0 = interfaceinvoke r1.<java.io.DataInput: byte readByte()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.read : b0 = interfaceinvoke r1.<java.io.DataInput: byte readByte()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : $b3 = b0 & 7
com.thoughtworks.xstream.io.binary.Token$Formatter.read : $b3 = b0 & 7 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : b1 = (byte) $b3
com.thoughtworks.xstream.io.binary.Token$Formatter.read : b1 = (byte) $b3 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : $b4 = b0 & 56
com.thoughtworks.xstream.io.binary.Token$Formatter.read : $b4 = b0 & 56 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : b2 = (byte) $b4
com.thoughtworks.xstream.io.binary.Token$Formatter.read : b2 = (byte) $b4 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.Token$Formatter: com.thoughtworks.xstream.io.binary.Token contructToken(byte)>(b1)
com.thoughtworks.xstream.io.binary.Token$Formatter.read : r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.Token$Formatter: com.thoughtworks.xstream.io.binary.Token contructToken(byte)>(b1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : tableswitch(b0) {     case 2:
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : tableswitch(b0) {     case 2: >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r2 = new com.thoughtworks.xstream.io.binary.Token$MapIdToValue
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r2 = new com.thoughtworks.xstream.io.binary.Token$MapIdToValue >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r2.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void <init>()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r2.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r2
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void readFrom(java.io.DataInput,byte)>(r1, b2)
com.thoughtworks.xstream.io.binary.Token$Formatter.read : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void readFrom(java.io.DataInput,byte)>(r1, b2) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : $l1 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long readId(java.io.DataInput,byte)>(r1, b0)
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : $l1 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long readId(java.io.DataInput,byte)>(r1, b0) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : lookupswitch(b0) {     case 8:
com.thoughtworks.xstream.io.binary.Token.readId : lookupswitch(b0) {     case 8: >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : $b1 = interfaceinvoke r1.<java.io.DataInput: byte readByte()>()
com.thoughtworks.xstream.io.binary.Token.readId : $b1 = interfaceinvoke r1.<java.io.DataInput: byte readByte()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : $i2 = $b1 - -128
com.thoughtworks.xstream.io.binary.Token.readId : $i2 = $b1 - -128 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : $l3 = (long) $i2
com.thoughtworks.xstream.io.binary.Token.readId : $l3 = (long) $i2 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : return $l3
com.thoughtworks.xstream.io.binary.Token.readId : return $l3 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long id> = $l1
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long id> = $l1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String readString(java.io.DataInput)>(r1)
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String readString(java.io.DataInput)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readString : $r2 = interfaceinvoke r1.<java.io.DataInput: java.lang.String readUTF()>()
com.thoughtworks.xstream.io.binary.Token.readString : $r2 = interfaceinvoke r1.<java.io.DataInput: java.lang.String readUTF()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readString : return $r2
com.thoughtworks.xstream.io.binary.Token.readString : return $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String value> = $r2
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String value> = $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : return r2
com.thoughtworks.xstream.io.binary.Token$Formatter.read : return r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $b0 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $b0 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : lookupswitch($b0) {     case 2:
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : lookupswitch($b0) {     case 2: >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry idRegistry>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry idRegistry> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $l1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: long getId()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $l1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: long getId()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r6 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: java.lang.String getValue()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r6 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: java.lang.String getValue()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getValue : $r1 = r0.<com.thoughtworks.xstream.io.binary.Token: java.lang.String value>
com.thoughtworks.xstream.io.binary.Token.getValue : $r1 = r0.<com.thoughtworks.xstream.io.binary.Token: java.lang.String value> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getValue : return $r1
com.thoughtworks.xstream.io.binary.Token.getValue : return $r1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: void put(long,java.lang.String)>($l1, $r6)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: void put(long,java.lang.String)>($l1, $r6) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.util.Map map>
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : $r2 = new java.lang.Long
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : $r2 = new java.lang.Long >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : specialinvoke $r2.<java.lang.Long: void <init>(long)>(l0)
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : specialinvoke $r2.<java.lang.Long: void <init>(long)>(l0) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1)
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r7 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r7 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r1 = new com.thoughtworks.xstream.io.binary.Token$StartNode
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r1 = new com.thoughtworks.xstream.io.binary.Token$StartNode >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.Token$StartNode: void <init>()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.Token$StartNode: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r1
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.readFrom : $l1 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long readId(java.io.DataInput,byte)>(r1, b0)
com.thoughtworks.xstream.io.binary.Token$StartNode.readFrom : $l1 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long readId(java.io.DataInput,byte)>(r1, b0) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id> = $l1
com.thoughtworks.xstream.io.binary.Token$StartNode.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id> = $l1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return r1
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return r1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return $r7
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return $r7 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $b0 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $b0 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : lookupswitch($b0) {     case 3:
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : lookupswitch($b0) {     case 3: >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry idRegistry>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry idRegistry> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $l1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: long getId()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $l1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: long getId()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r6 = virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.lang.String get(long)>($l1)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r6 = virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.lang.String get(long)>($l1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.util.Map map>
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r1 = new java.lang.Long
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r1 = new java.lang.Long >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : specialinvoke $r1.<java.lang.Long: void <init>(long)>(l0)
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : specialinvoke $r1.<java.lang.Long: void <init>(long)>(l0) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1)
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : r2 = (java.lang.String) $r4
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : r2 = (java.lang.String) $r4 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : if r2 != null
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : if r2 != null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : return r2
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : return r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r4.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setName(java.lang.String)>($r6)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r4.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setName(java.lang.String)>($r6) >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.setName : $r2 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.setName : $r2 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.setName : $r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String name> = r1
com.thoughtworks.xstream.io.binary.ReaderDepthState.setName : $r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String name> = r1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : goto [?= r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()]
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : goto [?= r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()] >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $b2 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $b2 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : tableswitch($b2) {     case 3:
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : tableswitch($b2) {     case 3: >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r15 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r15 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r15.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(1)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r15.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(1) >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.setHasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.setHasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.setHasMoreChildren : $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: boolean hasMoreChildren> = z0
com.thoughtworks.xstream.io.binary.ReaderDepthState.setHasMoreChildren : $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: boolean hasMoreChildren> = z0 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r2)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r2) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : $r2 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : $r2 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : if $r2 != null
com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : if $r2 != null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> = r1
com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> = r1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : goto [?= return]
com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState: java.lang.String getName()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : $r2 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String name>
com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : $r2 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String name> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : return $r2
com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : return $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : return $r2
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : return $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : $z0 = virtualinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState: boolean hasMoreChildren()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : $z0 = virtualinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState: boolean hasMoreChildren()>() >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : $z0 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: boolean hasMoreChildren>
com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : $z0 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: boolean hasMoreChildren> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : return $z0
com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : return $z0 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : return $z0
com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : return $z0 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r12 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r12 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> = null
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> = null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return r12
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return r12 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r4 = new com.thoughtworks.xstream.io.binary.Token$EndNode
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r4 = new com.thoughtworks.xstream.io.binary.Token$EndNode >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r4.<com.thoughtworks.xstream.io.binary.Token$EndNode: void <init>()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r4.<com.thoughtworks.xstream.io.binary.Token$EndNode: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r4
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r4 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r14 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r14 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r14.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(0)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r14.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(0) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void pop()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void pop()>() >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : $r2 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: com.thoughtworks.xstream.io.binary.ReaderDepthState$State parent>
com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : $r2 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: com.thoughtworks.xstream.io.binary.ReaderDepthState$State parent> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> = $r2
com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> = $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : i0 = 0
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : i0 = 0 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : r1 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : r1 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $b1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $b1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : lookupswitch($b1) {     case 3:
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : lookupswitch($b1) {     case 3: >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : if i0 != 0
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : if i0 != 0 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : goto [?= r4 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()]
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : goto [?= r4 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()] >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : r4 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : r4 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $b2 = virtualinvoke r4.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $b2 = virtualinvoke r4.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : lookupswitch($b2) {     case 3:
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : lookupswitch($b2) {     case 3: >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r6 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r6 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke $r6.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(1)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke $r6.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : goto [?= virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r4)]
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : goto [?= virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r4)] >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r4)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r4) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : $s4 = interfaceinvoke r1.<java.io.DataInput: short readShort()>()
com.thoughtworks.xstream.io.binary.Token.readId : $s4 = interfaceinvoke r1.<java.io.DataInput: short readShort()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : $i5 = $s4 - -32768
com.thoughtworks.xstream.io.binary.Token.readId : $i5 = $s4 - -32768 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : $l6 = (long) $i5
com.thoughtworks.xstream.io.binary.Token.readId : $l6 = (long) $i5 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : return $l6
com.thoughtworks.xstream.io.binary.Token.readId : return $l6 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(0)
