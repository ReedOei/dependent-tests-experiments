com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.writeField : $r5 = r0.<com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: com.thoughtworks.xstream.converters.reflection.FieldDictionary fieldDictionary> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.writeField : $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.writeField : $r6 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.writeField : $r7 = virtualinvoke $r5.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)>($r6, r2, r4)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.writeField : $r7 = virtualinvoke $r5.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)>($r6, r2, r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : if r3 == null
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : if r3 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $z0 = 1
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $z0 = 1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : goto [?= r6 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)>(r1, $z0)]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : goto [?= r6 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)>(r1, $z0)] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r6 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)>(r1, $z0)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r6 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)>(r1, $z0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r9 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r9 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z1 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z1 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z1 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r3 = $r10
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r3 = $r10 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : entermonitor $r10
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : entermonitor $r10 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r11 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r11 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z2 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z2 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z2 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z2 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r12 = new java.util.HashMap
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r12 = new java.util.HashMap >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r12.<java.util.HashMap: void <init>()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r12.<java.util.HashMap: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r4 = $r12
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r4 = $r12 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r13 = new com.thoughtworks.xstream.core.util.OrderRetainingMap
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r13 = new com.thoughtworks.xstream.core.util.OrderRetainingMap >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r13.<com.thoughtworks.xstream.core.util.OrderRetainingMap: void <init>()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r13.<com.thoughtworks.xstream.core.util.OrderRetainingMap: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r5 = $r13
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r5 = $r13 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r14 = class "java/lang/Object"
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r14 = class "java/lang/Object" >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z3 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z3 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z3 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z3 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r6 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r6 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean reverseFieldDefinition()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean reverseFieldDefinition()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.reverseFieldDefinition : $z0 = <com.thoughtworks.xstream.core.JVM: boolean reverseFieldOrder>
com.thoughtworks.xstream.core.JVM.reverseFieldDefinition : $z0 = <com.thoughtworks.xstream.core.JVM: boolean reverseFieldOrder> >>>>>>>> com.thoughtworks.xstream.core.JVM.reverseFieldDefinition : return $z0
com.thoughtworks.xstream.core.JVM.reverseFieldDefinition : return $z0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z4 == 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z4 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : i6 = 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : i6 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $i7 = lengthof r6
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $i7 = lengthof r6 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if i6 >= $i7
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if i6 >= $i7 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r16 = r6[i6]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r16 = r6[i6] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : virtualinvoke r16.<java.lang.reflect.Field: void setAccessible(boolean)>(1)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : virtualinvoke r16.<java.lang.reflect.Field: void setAccessible(boolean)>(1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r17 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r17 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z5 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r17)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z5 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r17) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z5 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z5 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r18 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r18 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r16)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r16) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r20 = new com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r20 = new com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r21 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r21 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r22 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r22 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r20.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: void <init>(java.lang.String,java.lang.Class,int)>($r21, $r22, i6)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r20.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: void <init>(java.lang.String,java.lang.Class,int)>($r21, $r22, i6) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r16)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r16) >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r3 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.Set keyOrder>
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r3 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.Set keyOrder> >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r4 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.List valueOrder>
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r4 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.List valueOrder> >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2)
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r5 = specialinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r5 = specialinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r1 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r1 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : if $r1 == null
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : if $r1 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r2 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r2 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : goto [?= i0 = $i1]
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : goto [?= i0 = $i1] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : i0 = $i1
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : i0 = $i1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i2 = 29 * i0
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i2 = 29 * i0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r3 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r3 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : if $r3 == null
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : if $r3 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r4 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r4 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : goto [?= i4 = $i2 + $i3]
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : goto [?= i4 = $i2 + $i3] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : i4 = $i2 + $i3
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : i4 = $i2 + $i3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : return i4
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : return i4 >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : return $r5
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : return $r5 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : i6 = i6 + 1
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : i6 = i6 + 1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $i7 = lengthof r6]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $i7 = lengthof r6] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $r14 = class "java/lang/Object"]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $r14 = class "java/lang/Object"] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r24 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r24 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r4)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r26 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r26 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : exitmonitor r3
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : exitmonitor r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= (branch)]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if z0 == 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r29 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r29 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r30 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r30 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $r32 = (java.util.Map) $r30]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $r32 = (java.util.Map) $r30] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r32 = (java.util.Map) $r30
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r32 = (java.util.Map) $r30 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r33 = (java.util.Map) $r32
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r33 = (java.util.Map) $r32 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : return $r33
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : return $r33 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r19 = new com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r19 = new com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r9 = r19
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r9 = r19 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : specialinvoke r19.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: void <init>(java.lang.String,java.lang.Class,int)>(r2, r3, 0)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : specialinvoke r19.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: void <init>(java.lang.String,java.lang.Class,int)>(r2, r3, 0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : goto [?= $r10 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9)]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : goto [?= $r10 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9)] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r10 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r10 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : if r0 != r1
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : if r0 != r1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $z0 = r1 instanceof com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $z0 = r1 instanceof com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : if $z0 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : r2 = (com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey) r1
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : r2 = (com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey) r1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $r3 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $r3 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : if $r3 == null
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : if $r3 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $r4 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $r4 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $r5 = r2.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $r5 = r2.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5)
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $z1 = virtualinvoke $r4.<java.lang.Object: boolean equals(java.lang.Object)>($r5) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : if $z1 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $r7 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $r7 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : if $r7 == null
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : if $r7 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $r8 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $r8 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $r9 = r2.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $r9 = r2.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9)
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : $z2 = virtualinvoke $r8.<java.lang.String: boolean equals(java.lang.Object)>($r9) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : if $z2 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : if $z2 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : return 1
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.equals : return 1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r7 = (java.lang.reflect.Field) $r10
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r7 = (java.lang.reflect.Field) $r10 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : if r7 != null
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : if r7 != null >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : return r7
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : return r7 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.writeField : specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: void write(java.lang.reflect.Field,java.lang.Object,java.lang.Object)>($r7, r1, r3)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.writeField : specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: void write(java.lang.reflect.Field,java.lang.Object,java.lang.Object)>($r7, r1, r3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r4 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: java.lang.Exception exception>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r4 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: java.lang.Exception exception> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $r4 == null
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $r4 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r16 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r16 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : l0 = virtualinvoke $r16.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>(r1)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : l0 = virtualinvoke $r16.<sun.misc.Unsafe: long objectFieldOffset(java.lang.reflect.Field)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : r6 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>()
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : r6 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.Class getType()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z0 = virtualinvoke r6.<java.lang.Class: boolean isPrimitive()>()
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z0 = virtualinvoke r6.<java.lang.Class: boolean isPrimitive()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z0 == 0
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r52 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r52 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r52.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r2, l0, r3)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r52.<sun.misc.Unsafe: void putObject(java.lang.Object,long,java.lang.Object)>(r2, l0, r3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : goto [?= return]
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : goto [?= return] >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r17 = <java.lang.Integer: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r17 = <java.lang.Integer: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z1 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r17)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z1 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r17) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z1 == 0
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r18 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r18 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r19 = (java.lang.Integer) r3
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r19 = (java.lang.Integer) r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $i1 = virtualinvoke $r19.<java.lang.Integer: int intValue()>()
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $i1 = virtualinvoke $r19.<java.lang.Integer: int intValue()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r18.<sun.misc.Unsafe: void putInt(java.lang.Object,long,int)>(r2, l0, $i1)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r18.<sun.misc.Unsafe: void putInt(java.lang.Object,long,int)>(r2, l0, $i1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : goto [?= (branch)]
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r20 = <java.lang.Long: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r20 = <java.lang.Long: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z2 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r20)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z2 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r20) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z2 == 0
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r21 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r21 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r22 = (java.lang.Long) r3
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r22 = (java.lang.Long) r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $l2 = virtualinvoke $r22.<java.lang.Long: long longValue()>()
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $l2 = virtualinvoke $r22.<java.lang.Long: long longValue()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r21.<sun.misc.Unsafe: void putLong(java.lang.Object,long,long)>(r2, l0, $l2)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r21.<sun.misc.Unsafe: void putLong(java.lang.Object,long,long)>(r2, l0, $l2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r23 = <java.lang.Short: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r23 = <java.lang.Short: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z3 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r23)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z3 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r23) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z3 == 0
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z3 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r24 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r24 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r25 = (java.lang.Short) r3
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r25 = (java.lang.Short) r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $s3 = virtualinvoke $r25.<java.lang.Short: short shortValue()>()
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $s3 = virtualinvoke $r25.<java.lang.Short: short shortValue()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r24.<sun.misc.Unsafe: void putShort(java.lang.Object,long,short)>(r2, l0, $s3)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r24.<sun.misc.Unsafe: void putShort(java.lang.Object,long,short)>(r2, l0, $s3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r26 = <java.lang.Character: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r26 = <java.lang.Character: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z4 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r26)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z4 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r26) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z4 == 0
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z4 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r27 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r27 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r28 = (java.lang.Character) r3
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r28 = (java.lang.Character) r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $c4 = virtualinvoke $r28.<java.lang.Character: char charValue()>()
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $c4 = virtualinvoke $r28.<java.lang.Character: char charValue()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r27.<sun.misc.Unsafe: void putChar(java.lang.Object,long,char)>(r2, l0, $c4)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r27.<sun.misc.Unsafe: void putChar(java.lang.Object,long,char)>(r2, l0, $c4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r29 = <java.lang.Byte: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r29 = <java.lang.Byte: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z5 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r29)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z5 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r29) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z5 == 0
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z5 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r30 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r30 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r31 = (java.lang.Byte) r3
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r31 = (java.lang.Byte) r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $b5 = virtualinvoke $r31.<java.lang.Byte: byte byteValue()>()
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $b5 = virtualinvoke $r31.<java.lang.Byte: byte byteValue()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r30.<sun.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r2, l0, $b5)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r30.<sun.misc.Unsafe: void putByte(java.lang.Object,long,byte)>(r2, l0, $b5) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r32 = <java.lang.Float: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r32 = <java.lang.Float: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z6 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r32)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z6 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r32) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z6 == 0
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z6 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r33 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r33 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r34 = (java.lang.Float) r3
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r34 = (java.lang.Float) r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $f0 = virtualinvoke $r34.<java.lang.Float: float floatValue()>()
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $f0 = virtualinvoke $r34.<java.lang.Float: float floatValue()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r33.<sun.misc.Unsafe: void putFloat(java.lang.Object,long,float)>(r2, l0, $f0)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r33.<sun.misc.Unsafe: void putFloat(java.lang.Object,long,float)>(r2, l0, $f0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r35 = <java.lang.Double: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r35 = <java.lang.Double: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z7 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r35)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z7 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r35) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z7 == 0
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z7 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r36 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r36 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r37 = (java.lang.Double) r3
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r37 = (java.lang.Double) r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $d0 = virtualinvoke $r37.<java.lang.Double: double doubleValue()>()
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $d0 = virtualinvoke $r37.<java.lang.Double: double doubleValue()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r36.<sun.misc.Unsafe: void putDouble(java.lang.Object,long,double)>(r2, l0, $d0)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r36.<sun.misc.Unsafe: void putDouble(java.lang.Object,long,double)>(r2, l0, $d0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r38 = <java.lang.Boolean: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r38 = <java.lang.Boolean: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z8 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r38)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z8 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>($r38) >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z8 == 0
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : if $z8 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r39 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe>
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r39 = <com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider: sun.misc.Unsafe unsafe> >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r40 = (java.lang.Boolean) r3
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $r40 = (java.lang.Boolean) r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z9 = virtualinvoke $r40.<java.lang.Boolean: boolean booleanValue()>()
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : $z9 = virtualinvoke $r40.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r39.<sun.misc.Unsafe: void putBoolean(java.lang.Object,long,boolean)>(r2, l0, $z9)
com.thoughtworks.xstream.converters.reflection.Sun14ReflectionProvider.write : virtualinvoke $r39.<sun.misc.Unsafe: void putBoolean(java.lang.Object,long,boolean)>(r2, l0, $z9) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $z0 = 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r31 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r31 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r30 = interfaceinvoke $r31.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r30 = interfaceinvoke $r31.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r9 = r2
