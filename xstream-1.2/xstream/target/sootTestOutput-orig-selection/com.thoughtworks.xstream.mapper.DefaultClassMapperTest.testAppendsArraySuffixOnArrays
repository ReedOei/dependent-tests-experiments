com.thoughtworks.xstream.core.util.CompositeClassLoader.add : if r1 == null >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.add : $r2 = r0.<com.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders>
com.thoughtworks.xstream.core.util.CompositeClassLoader.add : $r2 = r0.<com.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders> >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.add : interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(0, r1)
com.thoughtworks.xstream.core.util.CompositeClassLoader.add : interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(0, r1) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : r3 = $r2
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>()
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>() >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : if $z0 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>()
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getComponentType()>() >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-array")
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>("-array") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : goto [?= $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>()]
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : goto [?= $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>()] >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.ArrayMapper: java.lang.String boxedTypeName(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.ArrayMapper: java.lang.String boxedTypeName(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : $r2 = <com.thoughtworks.xstream.mapper.ArrayMapper: java.util.Collection BOXED_TYPES>
com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : $r2 = <com.thoughtworks.xstream.mapper.ArrayMapper: java.util.Collection BOXED_TYPES> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : if $z0 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : $r3 = null
com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : $r3 = null >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : return $r3
com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : if r4 != null
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : if r4 != null >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String serializedClass(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String serializedClass(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedClass(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedClass(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultMapper.serializedClass : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.mapper.DefaultMapper.serializedClass : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.mapper.DefaultMapper.serializedClass : return $r2
com.thoughtworks.xstream.mapper.DefaultMapper.serializedClass : return $r2 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : return $r3
com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $i0 = virtualinvoke r3.<java.lang.StringBuffer: int length()>()
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $i0 = virtualinvoke r3.<java.lang.StringBuffer: int length()>() >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : if $i0 <= 0
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : if $i0 <= 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $r6 = new java.lang.StringBuilder
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $r6 = new java.lang.StringBuilder >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4)
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r4) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : return $r9
