com.thoughtworks.xstream.io.binary.Token$Formatter.write : l0 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: long getId()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.Token: long id>
com.thoughtworks.xstream.io.binary.Token.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.Token: long id> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getId : return $l0
com.thoughtworks.xstream.io.binary.Token.getId : return $l0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b2 = l0 cmp 255L
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b2 = l0 cmp 255L >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b2 > 0
com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b2 > 0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : b1 = 8
com.thoughtworks.xstream.io.binary.Token$Formatter.write : b1 = 8 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : goto [?= $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()]
com.thoughtworks.xstream.io.binary.Token$Formatter.write : goto [?= $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()] >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getType : $b0 = r0.<com.thoughtworks.xstream.io.binary.Token: byte type>
com.thoughtworks.xstream.io.binary.Token.getType : $b0 = r0.<com.thoughtworks.xstream.io.binary.Token: byte type> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getType : return $b0
com.thoughtworks.xstream.io.binary.Token.getType : return $b0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $i6 = $b5 + b1
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $i6 = $b5 + b1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i6)
com.thoughtworks.xstream.io.binary.Token$Formatter.write : interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i6) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void writeTo(java.io.DataOutput,byte)>(r1, b1)
com.thoughtworks.xstream.io.binary.Token$Formatter.write : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void writeTo(java.io.DataOutput,byte)>(r1, b1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : $l1 = r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id>
com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : $l1 = r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id> >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: void writeId(java.io.DataOutput,long,byte)>(r1, $l1, b0)
com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: void writeId(java.io.DataOutput,long,byte)>(r1, $l1, b0) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $b2 = l0 cmp 0L
com.thoughtworks.xstream.io.binary.Token.writeId : $b2 = l0 cmp 0L >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : if $b2 >= 0
com.thoughtworks.xstream.io.binary.Token.writeId : if $b2 >= 0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $r2 = new java.io.IOException
com.thoughtworks.xstream.io.binary.Token.writeId : $r2 = new java.io.IOException >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $r3 = new java.lang.StringBuilder
com.thoughtworks.xstream.io.binary.Token.writeId : $r3 = new java.lang.StringBuilder >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
com.thoughtworks.xstream.io.binary.Token.writeId : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("id must not be negative ")
com.thoughtworks.xstream.io.binary.Token.writeId : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("id must not be negative ") >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
com.thoughtworks.xstream.io.binary.Token.writeId : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
com.thoughtworks.xstream.io.binary.Token.writeId : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6)
com.thoughtworks.xstream.io.binary.Token.writeId : specialinvoke $r2.<java.io.IOException: void <init>(java.lang.String)>($r6) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : throw $r2
