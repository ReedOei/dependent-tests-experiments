com.thoughtworks.xstream.persistence.XmlMap.put : $r3 = r0.<com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy streamStrategy> >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.put : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.persistence.StreamStrategy: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.persistence.XmlMap.put : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.persistence.StreamStrategy: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.put : $r3 = r0.<com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy: java.util.Map map>
com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.put : $r3 = r0.<com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.put : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.put : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.put : return $r4
com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.put : return $r4 >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.put : return $r4
com.thoughtworks.xstream.persistence.XmlMap.put : return $r4 >>>>>>>> com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.access$100 : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy: java.util.Map map>
com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.access$100 : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.access$100 : return $r1
com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.access$100 : return $r1 >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.remove : $r2 = r0.<com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy streamStrategy>
com.thoughtworks.xstream.persistence.XmlMap.remove : $r2 = r0.<com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy streamStrategy> >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.remove : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.persistence.StreamStrategy: java.lang.Object remove(java.lang.Object)>(r1)
com.thoughtworks.xstream.persistence.XmlMap.remove : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.persistence.StreamStrategy: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.remove : $r2 = r0.<com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy: java.util.Map map>
com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.remove : $r2 = r0.<com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.remove : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1)
com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.remove : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object remove(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.remove : return $r3
com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.remove : return $r3 >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.remove : return $r3
