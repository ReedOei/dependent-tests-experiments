com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $r2 = r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : if $r2 != null
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : if $r2 != null >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $z0 = specialinvoke r0.<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>()
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $z0 = specialinvoke r0.<com.thoughtworks.xstream.core.JVM: boolean canUseSun14ReflectionProvider()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isSun()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isSun()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isSun : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isSun : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isSun : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Sun")
com.thoughtworks.xstream.core.JVM.isSun : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Sun") >>>>>>>> com.thoughtworks.xstream.core.JVM.isSun : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isSun : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isSun : $z0 = 0
com.thoughtworks.xstream.core.JVM.isSun : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.isSun : return $z0
com.thoughtworks.xstream.core.JVM.isSun : return $z0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z0 != 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isApple()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isApple()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isApple : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isApple : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isApple : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Apple")
com.thoughtworks.xstream.core.JVM.isApple : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Apple") >>>>>>>> com.thoughtworks.xstream.core.JVM.isApple : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isApple : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isApple : $z0 = 0
com.thoughtworks.xstream.core.JVM.isApple : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.isApple : return $z0
com.thoughtworks.xstream.core.JVM.isApple : return $z0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z1 != 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z2 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isHPUX()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z2 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isHPUX()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isHPUX : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isHPUX : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isHPUX : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Hewlett-Packard Company")
com.thoughtworks.xstream.core.JVM.isHPUX : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Hewlett-Packard Company") >>>>>>>> com.thoughtworks.xstream.core.JVM.isHPUX : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isHPUX : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isHPUX : $z0 = 0
com.thoughtworks.xstream.core.JVM.isHPUX : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.isHPUX : return $z0
com.thoughtworks.xstream.core.JVM.isHPUX : return $z0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z2 != 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z2 != 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z3 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isIBM()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z3 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isIBM()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isIBM : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isIBM : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isIBM : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("IBM")
com.thoughtworks.xstream.core.JVM.isIBM : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("IBM") >>>>>>>> com.thoughtworks.xstream.core.JVM.isIBM : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isIBM : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isIBM : $z0 = 0
com.thoughtworks.xstream.core.JVM.isIBM : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.isIBM : return $z0
com.thoughtworks.xstream.core.JVM.isIBM : return $z0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z3 != 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z3 != 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isBlackdown()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isBlackdown()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isBlackdown : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isBlackdown : $r0 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isBlackdown : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Blackdown")
com.thoughtworks.xstream.core.JVM.isBlackdown : $i0 = virtualinvoke $r0.<java.lang.String: int indexOf(java.lang.String)>("Blackdown") >>>>>>>> com.thoughtworks.xstream.core.JVM.isBlackdown : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isBlackdown : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isBlackdown : $z0 = 0
com.thoughtworks.xstream.core.JVM.isBlackdown : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.isBlackdown : return $z0
com.thoughtworks.xstream.core.JVM.isBlackdown : return $z0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z4 != 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z4 != 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z5 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isBEAWithUnsafeSupport()>()
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z5 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean isBEAWithUnsafeSupport()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor")
com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : $r2 = staticinvoke <java.lang.System: java.lang.String getProperty(java.lang.String)>("java.vm.vendor") >>>>>>>> com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("BEA")
com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : $i0 = virtualinvoke $r2.<java.lang.String: int indexOf(java.lang.String)>("BEA") >>>>>>>> com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : if $i0 == -1
com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : if $i0 == -1 >>>>>>>> com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : return 0
com.thoughtworks.xstream.core.JVM.isBEAWithUnsafeSupport : return 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z5 == 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : if $z5 == 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z7 = 0
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : $z7 = 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : return $z7
com.thoughtworks.xstream.core.JVM.canUseSun14ReflectionProvider : return $z7 >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : if $z0 == 0
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $r6 = new com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $r6 = new com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : specialinvoke $r6.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: void <init>()>()
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : specialinvoke $r6.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: void <init>()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> = $r6
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> = $r6 >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : goto [?= $r16 = r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>]
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : goto [?= $r16 = r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>] >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $r16 = r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : $r16 = r0.<com.thoughtworks.xstream.core.JVM: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.core.JVM.bestReflectionProvider : return $r16
com.thoughtworks.xstream.core.JVM.bestReflectionProvider : return $r16 >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.add : if r1 == null
com.thoughtworks.xstream.core.util.CompositeClassLoader.add : if r1 == null >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.add : $r2 = r0.<com.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders>
com.thoughtworks.xstream.core.util.CompositeClassLoader.add : $r2 = r0.<com.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders> >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.add : interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(0, r1)
com.thoughtworks.xstream.core.util.CompositeClassLoader.add : interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(0, r1) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r1 = new com.thoughtworks.xstream.mapper.DefaultMapper
com.thoughtworks.xstream.XStream.buildMapper : $r1 = new com.thoughtworks.xstream.mapper.DefaultMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference>
com.thoughtworks.xstream.XStream.buildMapper : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference> >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r1.<com.thoughtworks.xstream.mapper.DefaultMapper: void <init>(java.lang.ClassLoader)>($r3)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r1.<com.thoughtworks.xstream.mapper.DefaultMapper: void <init>(java.lang.ClassLoader)>($r3) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r2 = $r1
com.thoughtworks.xstream.XStream.buildMapper : r2 = $r1 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : if z0 == 0
com.thoughtworks.xstream.XStream.buildMapper : if z0 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r4 = new com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper
com.thoughtworks.xstream.XStream.buildMapper : $r4 = new com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r4.<com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r2)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r4.<com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r2) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r2 = $r4
com.thoughtworks.xstream.XStream.buildMapper : r2 = $r4 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r5 = new com.thoughtworks.xstream.mapper.ClassAliasingMapper
com.thoughtworks.xstream.XStream.buildMapper : $r5 = new com.thoughtworks.xstream.mapper.ClassAliasingMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r5.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r2)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r5.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r2) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r6 = $r5
com.thoughtworks.xstream.XStream.buildMapper : r6 = $r5 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r7 = new com.thoughtworks.xstream.mapper.FieldAliasingMapper
com.thoughtworks.xstream.XStream.buildMapper : $r7 = new com.thoughtworks.xstream.mapper.FieldAliasingMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r7.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r6)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r7.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r6) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r8 = $r7
com.thoughtworks.xstream.XStream.buildMapper : r8 = $r7 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r9 = new com.thoughtworks.xstream.mapper.AttributeAliasingMapper
com.thoughtworks.xstream.XStream.buildMapper : $r9 = new com.thoughtworks.xstream.mapper.AttributeAliasingMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r9.<com.thoughtworks.xstream.mapper.AttributeAliasingMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r8)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r9.<com.thoughtworks.xstream.mapper.AttributeAliasingMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r8) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r10 = $r9
com.thoughtworks.xstream.XStream.buildMapper : r10 = $r9 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r11 = new com.thoughtworks.xstream.mapper.AttributeMapper
com.thoughtworks.xstream.XStream.buildMapper : $r11 = new com.thoughtworks.xstream.mapper.AttributeMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r11.<com.thoughtworks.xstream.mapper.AttributeMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r10)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r11.<com.thoughtworks.xstream.mapper.AttributeMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r10) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r12 = $r11
com.thoughtworks.xstream.XStream.buildMapper : r12 = $r11 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r13 = new com.thoughtworks.xstream.mapper.ImplicitCollectionMapper
com.thoughtworks.xstream.XStream.buildMapper : $r13 = new com.thoughtworks.xstream.mapper.ImplicitCollectionMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r13.<com.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r12)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r13.<com.thoughtworks.xstream.mapper.ImplicitCollectionMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r12) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r14 = $r13
com.thoughtworks.xstream.XStream.buildMapper : r14 = $r13 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r15 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.buildMapper : $r15 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r16 = virtualinvoke $r15.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("net.sf.cglib.proxy.Enhancer")
com.thoughtworks.xstream.XStream.buildMapper : $r16 = virtualinvoke $r15.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("net.sf.cglib.proxy.Enhancer") >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : $r3 = r0.<com.thoughtworks.xstream.core.JVM: java.util.Map loaderCache>
com.thoughtworks.xstream.core.JVM.loadClass : $r3 = r0.<com.thoughtworks.xstream.core.JVM: java.util.Map loaderCache> >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.JVM.loadClass : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : r2 = (java.lang.Class) $r4
com.thoughtworks.xstream.core.JVM.loadClass : r2 = (java.lang.Class) $r4 >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : if r2 != null
com.thoughtworks.xstream.core.JVM.loadClass : if r2 != null >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.core.JVM.loadClass : $r5 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
com.thoughtworks.xstream.core.JVM.loadClass : $r6 = virtualinvoke $r5.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, $r6)
com.thoughtworks.xstream.core.JVM.loadClass : r2 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, $r6) >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : $r7 = r0.<com.thoughtworks.xstream.core.JVM: java.util.Map loaderCache>
com.thoughtworks.xstream.core.JVM.loadClass : $r7 = r0.<com.thoughtworks.xstream.core.JVM: java.util.Map loaderCache> >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.JVM.loadClass : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.core.JVM.loadClass : return r2
com.thoughtworks.xstream.core.JVM.loadClass : return r2 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : if $r16 == null
com.thoughtworks.xstream.XStream.buildMapper : if $r16 == null >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r17 = newarray (java.lang.Class)[1]
com.thoughtworks.xstream.XStream.buildMapper : $r17 = newarray (java.lang.Class)[1] >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r17[0] = class "com/thoughtworks/xstream/mapper/Mapper"
com.thoughtworks.xstream.XStream.buildMapper : $r17[0] = class "com/thoughtworks/xstream/mapper/Mapper" >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r18 = newarray (java.lang.Object)[1]
com.thoughtworks.xstream.XStream.buildMapper : $r18 = newarray (java.lang.Object)[1] >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r18[0] = r14
com.thoughtworks.xstream.XStream.buildMapper : $r18[0] = r14 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r14 = specialinvoke r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper buildMapperDynamically(java.lang.String,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.mapper.CGLIBMapper", $r17, $r18)
com.thoughtworks.xstream.XStream.buildMapper : r14 = specialinvoke r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper buildMapperDynamically(java.lang.String,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.mapper.CGLIBMapper", $r17, $r18) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapperDynamically : $r6 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference>
com.thoughtworks.xstream.XStream.buildMapperDynamically : $r6 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference> >>>>>>>> com.thoughtworks.xstream.XStream.buildMapperDynamically : $r7 = virtualinvoke $r6.<com.thoughtworks.xstream.core.util.ClassLoaderReference: java.lang.ClassLoader getReference()>()
com.thoughtworks.xstream.XStream.buildMapperDynamically : $r7 = virtualinvoke $r6.<com.thoughtworks.xstream.core.util.ClassLoaderReference: java.lang.ClassLoader getReference()>() >>>>>>>> com.thoughtworks.xstream.core.util.ClassLoaderReference.getReference : $r1 = r0.<com.thoughtworks.xstream.core.util.ClassLoaderReference: java.lang.ClassLoader reference>
com.thoughtworks.xstream.core.util.ClassLoaderReference.getReference : $r1 = r0.<com.thoughtworks.xstream.core.util.ClassLoaderReference: java.lang.ClassLoader reference> >>>>>>>> com.thoughtworks.xstream.core.util.ClassLoaderReference.getReference : return $r1
com.thoughtworks.xstream.core.util.ClassLoaderReference.getReference : return $r1 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapperDynamically : r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, $r7)
com.thoughtworks.xstream.XStream.buildMapperDynamically : r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, $r7) >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : $r5 = r0.<com.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders>
com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : $r5 = r0.<com.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders> >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>()
com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : r2 = interfaceinvoke $r5.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : if $z0 == 0
com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : $r6 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : r3 = (java.lang.ClassLoader) $r6
com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : r3 = (java.lang.ClassLoader) $r6 >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : $r7 = virtualinvoke r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1)
com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : $r7 = virtualinvoke r3.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : return $r7
com.thoughtworks.xstream.core.util.CompositeClassLoader.loadClass : return $r7 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapperDynamically : r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r2)
com.thoughtworks.xstream.XStream.buildMapperDynamically : r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r2) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapperDynamically : $r8 = virtualinvoke r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r3)
com.thoughtworks.xstream.XStream.buildMapperDynamically : $r8 = virtualinvoke r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r3) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapperDynamically : $r9 = (com.thoughtworks.xstream.mapper.Mapper) $r8
com.thoughtworks.xstream.XStream.buildMapperDynamically : $r9 = (com.thoughtworks.xstream.mapper.Mapper) $r8 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapperDynamically : return $r9
com.thoughtworks.xstream.XStream.buildMapperDynamically : return $r9 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r19 = new com.thoughtworks.xstream.mapper.DynamicProxyMapper
com.thoughtworks.xstream.XStream.buildMapper : $r19 = new com.thoughtworks.xstream.mapper.DynamicProxyMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r19.<com.thoughtworks.xstream.mapper.DynamicProxyMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r14)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r19.<com.thoughtworks.xstream.mapper.DynamicProxyMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r14) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r20 = $r19
com.thoughtworks.xstream.XStream.buildMapper : r20 = $r19 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>()
com.thoughtworks.xstream.XStream.buildMapper : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : $f0 = <com.thoughtworks.xstream.core.JVM: float majorJavaVersion>
com.thoughtworks.xstream.core.JVM.is15 : $f0 = <com.thoughtworks.xstream.core.JVM: float majorJavaVersion> >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : $b0 = $f0 cmpl 1.5F
com.thoughtworks.xstream.core.JVM.is15 : $b0 = $f0 cmpl 1.5F >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : if $b0 < 0
com.thoughtworks.xstream.core.JVM.is15 : if $b0 < 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : $z0 = 1
com.thoughtworks.xstream.core.JVM.is15 : $z0 = 1 >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : goto [?= return $z0]
com.thoughtworks.xstream.core.JVM.is15 : goto [?= return $z0] >>>>>>>> com.thoughtworks.xstream.core.JVM.is15 : return $z0
com.thoughtworks.xstream.core.JVM.is15 : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : if $z1 == 0
com.thoughtworks.xstream.XStream.buildMapper : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r21 = new com.thoughtworks.xstream.mapper.EnumMapper
com.thoughtworks.xstream.XStream.buildMapper : $r21 = new com.thoughtworks.xstream.mapper.EnumMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r21.<com.thoughtworks.xstream.mapper.EnumMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r20)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r21.<com.thoughtworks.xstream.mapper.EnumMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r20) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r20 = $r21
com.thoughtworks.xstream.XStream.buildMapper : r20 = $r21 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r22 = new com.thoughtworks.xstream.mapper.OuterClassMapper
com.thoughtworks.xstream.XStream.buildMapper : $r22 = new com.thoughtworks.xstream.mapper.OuterClassMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r22.<com.thoughtworks.xstream.mapper.OuterClassMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r20)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r22.<com.thoughtworks.xstream.mapper.OuterClassMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r20) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r23 = $r22
com.thoughtworks.xstream.XStream.buildMapper : r23 = $r22 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r24 = new com.thoughtworks.xstream.mapper.ArrayMapper
com.thoughtworks.xstream.XStream.buildMapper : $r24 = new com.thoughtworks.xstream.mapper.ArrayMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r24.<com.thoughtworks.xstream.mapper.ArrayMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r23)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r24.<com.thoughtworks.xstream.mapper.ArrayMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r23) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r25 = $r24
com.thoughtworks.xstream.XStream.buildMapper : r25 = $r24 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r26 = new com.thoughtworks.xstream.mapper.DefaultImplementationsMapper
com.thoughtworks.xstream.XStream.buildMapper : $r26 = new com.thoughtworks.xstream.mapper.DefaultImplementationsMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r26.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r25)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r26.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r25) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(null, class "com/thoughtworks/xstream/mapper/Mapper$Null")
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(null, class "com/thoughtworks/xstream/mapper/Mapper$Null") >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : $r3 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map typeToImpl>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : $r3 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map typeToImpl> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : $r5 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map implToType>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : $r5 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map implToType> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaultImplementation : interfaceinvoke $r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r1 = <java.lang.Boolean: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r1 = <java.lang.Boolean: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Boolean", $r1)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Boolean", $r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r2 = <java.lang.Character: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r2 = <java.lang.Character: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Character", $r2)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Character", $r2) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r3 = <java.lang.Integer: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r3 = <java.lang.Integer: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Integer", $r3)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Integer", $r3) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r4 = <java.lang.Float: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r4 = <java.lang.Float: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Float", $r4)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Float", $r4) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r5 = <java.lang.Double: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r5 = <java.lang.Double: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Double", $r5)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Double", $r5) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r6 = <java.lang.Short: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r6 = <java.lang.Short: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Short", $r6)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Short", $r6) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r7 = <java.lang.Byte: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r7 = <java.lang.Byte: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Byte", $r7)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Byte", $r7) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r8 = <java.lang.Long: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : $r8 = <java.lang.Long: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Long", $r8)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.addDefaults : virtualinvoke r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/lang/Long", $r8) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r27 = $r26
com.thoughtworks.xstream.XStream.buildMapper : r27 = $r26 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r28 = new com.thoughtworks.xstream.mapper.ImmutableTypesMapper
com.thoughtworks.xstream.XStream.buildMapper : $r28 = new com.thoughtworks.xstream.mapper.ImmutableTypesMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r28.<com.thoughtworks.xstream.mapper.ImmutableTypesMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r27)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r28.<com.thoughtworks.xstream.mapper.ImmutableTypesMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r27) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r29 = $r28
com.thoughtworks.xstream.XStream.buildMapper : r29 = $r28 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r30 = (com.thoughtworks.xstream.mapper.MapperWrapper) r29
com.thoughtworks.xstream.XStream.buildMapper : $r30 = (com.thoughtworks.xstream.mapper.MapperWrapper) r29 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r31 = virtualinvoke r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.MapperWrapper wrapMapper(com.thoughtworks.xstream.mapper.MapperWrapper)>($r30)
com.thoughtworks.xstream.XStream.buildMapper : r31 = virtualinvoke r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.MapperWrapper wrapMapper(com.thoughtworks.xstream.mapper.MapperWrapper)>($r30) >>>>>>>> com.thoughtworks.xstream.XStream.wrapMapper : return r1
com.thoughtworks.xstream.XStream.wrapMapper : return r1 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : $r32 = new com.thoughtworks.xstream.mapper.CachingMapper
com.thoughtworks.xstream.XStream.buildMapper : $r32 = new com.thoughtworks.xstream.mapper.CachingMapper >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r32.<com.thoughtworks.xstream.mapper.CachingMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r31)
com.thoughtworks.xstream.XStream.buildMapper : specialinvoke $r32.<com.thoughtworks.xstream.mapper.CachingMapper: void <init>(com.thoughtworks.xstream.mapper.Mapper)>(r31) >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : r33 = $r32
com.thoughtworks.xstream.XStream.buildMapper : r33 = $r32 >>>>>>>> com.thoughtworks.xstream.XStream.buildMapper : return r33
com.thoughtworks.xstream.XStream.buildMapper : return r33 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r1 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupMappers : $r1 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r2 = interfaceinvoke $r1.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/ClassAliasingMapper")
com.thoughtworks.xstream.XStream.setupMappers : $r2 = interfaceinvoke $r1.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/ClassAliasingMapper") >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r2 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2)
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $z0 = virtualinvoke r1.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r2) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : if $z0 == 0
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r4 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r4 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r3 = interfaceinvoke $r4.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r3 = interfaceinvoke $r4.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r3 = r0
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : $r3 = r0 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : goto [?= return $r3]
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : goto [?= return $r3] >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : return $r3
com.thoughtworks.xstream.mapper.MapperWrapper.lookupMapperOfType : return $r3 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r3 = (com.thoughtworks.xstream.mapper.ClassAliasingMapper) $r2
com.thoughtworks.xstream.XStream.setupMappers : $r3 = (com.thoughtworks.xstream.mapper.ClassAliasingMapper) $r2 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper> = $r3
com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper> = $r3 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupMappers : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r5 = interfaceinvoke $r4.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/FieldAliasingMapper")
com.thoughtworks.xstream.XStream.setupMappers : $r5 = interfaceinvoke $r4.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/FieldAliasingMapper") >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r6 = (com.thoughtworks.xstream.mapper.FieldAliasingMapper) $r5
com.thoughtworks.xstream.XStream.setupMappers : $r6 = (com.thoughtworks.xstream.mapper.FieldAliasingMapper) $r5 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.FieldAliasingMapper fieldAliasingMapper> = $r6
com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.FieldAliasingMapper fieldAliasingMapper> = $r6 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r7 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupMappers : $r7 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r8 = interfaceinvoke $r7.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/AttributeMapper")
com.thoughtworks.xstream.XStream.setupMappers : $r8 = interfaceinvoke $r7.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/AttributeMapper") >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r9 = (com.thoughtworks.xstream.mapper.AttributeMapper) $r8
com.thoughtworks.xstream.XStream.setupMappers : $r9 = (com.thoughtworks.xstream.mapper.AttributeMapper) $r8 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.AttributeMapper attributeMapper> = $r9
com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.AttributeMapper attributeMapper> = $r9 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r10 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupMappers : $r10 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r11 = interfaceinvoke $r10.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/AttributeAliasingMapper")
com.thoughtworks.xstream.XStream.setupMappers : $r11 = interfaceinvoke $r10.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/AttributeAliasingMapper") >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r12 = (com.thoughtworks.xstream.mapper.AttributeAliasingMapper) $r11
com.thoughtworks.xstream.XStream.setupMappers : $r12 = (com.thoughtworks.xstream.mapper.AttributeAliasingMapper) $r11 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.AttributeAliasingMapper attributeAliasingMapper> = $r12
com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.AttributeAliasingMapper attributeAliasingMapper> = $r12 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r13 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupMappers : $r13 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r14 = interfaceinvoke $r13.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/ImplicitCollectionMapper")
com.thoughtworks.xstream.XStream.setupMappers : $r14 = interfaceinvoke $r13.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/ImplicitCollectionMapper") >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r15 = (com.thoughtworks.xstream.mapper.ImplicitCollectionMapper) $r14
com.thoughtworks.xstream.XStream.setupMappers : $r15 = (com.thoughtworks.xstream.mapper.ImplicitCollectionMapper) $r14 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper implicitCollectionMapper> = $r15
com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper implicitCollectionMapper> = $r15 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r16 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupMappers : $r16 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r17 = interfaceinvoke $r16.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/DefaultImplementationsMapper")
com.thoughtworks.xstream.XStream.setupMappers : $r17 = interfaceinvoke $r16.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/DefaultImplementationsMapper") >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r18 = (com.thoughtworks.xstream.mapper.DefaultImplementationsMapper) $r17
com.thoughtworks.xstream.XStream.setupMappers : $r18 = (com.thoughtworks.xstream.mapper.DefaultImplementationsMapper) $r17 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper> = $r18
com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper> = $r18 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r19 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupMappers : $r19 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r20 = interfaceinvoke $r19.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/ImmutableTypesMapper")
com.thoughtworks.xstream.XStream.setupMappers : $r20 = interfaceinvoke $r19.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper lookupMapperOfType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/ImmutableTypesMapper") >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r21 = (com.thoughtworks.xstream.mapper.ImmutableTypesMapper) $r20
com.thoughtworks.xstream.XStream.setupMappers : $r21 = (com.thoughtworks.xstream.mapper.ImmutableTypesMapper) $r20 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper> = $r21
com.thoughtworks.xstream.XStream.setupMappers : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper> = $r21 >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r22 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.AttributeMapper attributeMapper>
com.thoughtworks.xstream.XStream.setupMappers : $r22 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.AttributeMapper attributeMapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : if $r22 == null
com.thoughtworks.xstream.XStream.setupMappers : if $r22 == null >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r23 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.AttributeMapper attributeMapper>
com.thoughtworks.xstream.XStream.setupMappers : $r23 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.AttributeMapper attributeMapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : $r24 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup>
com.thoughtworks.xstream.XStream.setupMappers : $r24 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup> >>>>>>>> com.thoughtworks.xstream.XStream.setupMappers : virtualinvoke $r23.<com.thoughtworks.xstream.mapper.AttributeMapper: void setConverterLookup(com.thoughtworks.xstream.converters.ConverterLookup)>($r24)
com.thoughtworks.xstream.XStream.setupMappers : virtualinvoke $r23.<com.thoughtworks.xstream.mapper.AttributeMapper: void setConverterLookup(com.thoughtworks.xstream.converters.ConverterLookup)>($r24) >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.setConverterLookup : r0.<com.thoughtworks.xstream.mapper.AttributeMapper: com.thoughtworks.xstream.converters.ConverterLookup converterLookup> = r1
com.thoughtworks.xstream.mapper.AttributeMapper.setConverterLookup : r0.<com.thoughtworks.xstream.mapper.AttributeMapper: com.thoughtworks.xstream.converters.ConverterLookup converterLookup> = r1 >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r2 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper>
com.thoughtworks.xstream.XStream.setupAliases : $r2 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : if $r2 != null
com.thoughtworks.xstream.XStream.setupAliases : if $r2 != null >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("null", class "com/thoughtworks/xstream/mapper/Mapper$Null")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("null", class "com/thoughtworks/xstream/mapper/Mapper$Null") >>>>>>>> com.thoughtworks.xstream.XStream.alias : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper>
com.thoughtworks.xstream.XStream.alias : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper> >>>>>>>> com.thoughtworks.xstream.XStream.alias : if $r4 != null
com.thoughtworks.xstream.XStream.alias : if $r4 != null >>>>>>>> com.thoughtworks.xstream.XStream.alias : $r12 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper>
com.thoughtworks.xstream.XStream.alias : $r12 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper> >>>>>>>> com.thoughtworks.xstream.XStream.alias : virtualinvoke $r12.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: void addClassAlias(java.lang.String,java.lang.Class)>(r1, r2)
com.thoughtworks.xstream.XStream.alias : virtualinvoke $r12.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: void addClassAlias(java.lang.String,java.lang.Class)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : $r3 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map nameToType>
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : $r3 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map nameToType> >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : $r4 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : $r4 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4)
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4) >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : $r6 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map classToName>
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : $r6 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map classToName> >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : $r7 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : $r7 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r1)
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addClassAlias : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r7, r1) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("int", class "java/lang/Integer")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("int", class "java/lang/Integer") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("float", class "java/lang/Float")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("float", class "java/lang/Float") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("double", class "java/lang/Double")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("double", class "java/lang/Double") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("long", class "java/lang/Long")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("long", class "java/lang/Long") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("short", class "java/lang/Short")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("short", class "java/lang/Short") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("char", class "java/lang/Character")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("char", class "java/lang/Character") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("byte", class "java/lang/Byte")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("byte", class "java/lang/Byte") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("boolean", class "java/lang/Boolean")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("boolean", class "java/lang/Boolean") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("number", class "java/lang/Number")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("number", class "java/lang/Number") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("object", class "java/lang/Object")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("object", class "java/lang/Object") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("big-int", class "java/math/BigInteger")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("big-int", class "java/math/BigInteger") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("big-decimal", class "java/math/BigDecimal")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("big-decimal", class "java/math/BigDecimal") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("string-buffer", class "java/lang/StringBuffer")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("string-buffer", class "java/lang/StringBuffer") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("string", class "java/lang/String")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("string", class "java/lang/String") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("java-class", class "java/lang/Class")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("java-class", class "java/lang/Class") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("method", class "java/lang/reflect/Method")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("method", class "java/lang/reflect/Method") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("constructor", class "java/lang/reflect/Constructor")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("constructor", class "java/lang/reflect/Constructor") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("date", class "java/util/Date")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("date", class "java/util/Date") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("url", class "java/net/URL")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("url", class "java/net/URL") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("bit-set", class "java/util/BitSet")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("bit-set", class "java/util/BitSet") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("map", class "java/util/Map")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("map", class "java/util/Map") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("entry", class "java/util/Map$Entry")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("entry", class "java/util/Map$Entry") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("properties", class "java/util/Properties")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("properties", class "java/util/Properties") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("list", class "java/util/List")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("list", class "java/util/List") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("set", class "java/util/Set")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("set", class "java/util/Set") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("linked-list", class "java/util/LinkedList")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("linked-list", class "java/util/LinkedList") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("vector", class "java/util/Vector")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("vector", class "java/util/Vector") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("tree-map", class "java/util/TreeMap")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("tree-map", class "java/util/TreeMap") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("tree-set", class "java/util/TreeSet")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("tree-set", class "java/util/TreeSet") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("hashtable", class "java/util/Hashtable")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("hashtable", class "java/util/Hashtable") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.awt.Color")
com.thoughtworks.xstream.XStream.setupAliases : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.awt.Color") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("awt-color", $r4)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("awt-color", $r4) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r5 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r5 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r6 = virtualinvoke $r5.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.awt.Font")
com.thoughtworks.xstream.XStream.setupAliases : $r6 = virtualinvoke $r5.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.awt.Font") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("awt-font", $r6)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("awt-font", $r6) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("awt-text-attribute", class "java/awt/font/TextAttribute")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("awt-text-attribute", class "java/awt/font/TextAttribute") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("sql-timestamp", class "java/sql/Timestamp")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("sql-timestamp", class "java/sql/Timestamp") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("sql-time", class "java/sql/Time")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("sql-time", class "java/sql/Time") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("sql-date", class "java/sql/Date")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("sql-date", class "java/sql/Date") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("file", class "java/io/File")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("file", class "java/io/File") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("locale", class "java/util/Locale")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("locale", class "java/util/Locale") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("gregorian-calendar", class "java/util/Calendar")
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("gregorian-calendar", class "java/util/Calendar") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r7 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r7 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : r1 = virtualinvoke $r7.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("javax.security.auth.Subject")
com.thoughtworks.xstream.XStream.setupAliases : r1 = virtualinvoke $r7.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("javax.security.auth.Subject") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : if r1 == null
com.thoughtworks.xstream.XStream.setupAliases : if r1 == null >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("auth-subject", r1)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("auth-subject", r1) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>()
com.thoughtworks.xstream.XStream.setupAliases : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.is14 : $f0 = <com.thoughtworks.xstream.core.JVM: float majorJavaVersion>
com.thoughtworks.xstream.core.JVM.is14 : $f0 = <com.thoughtworks.xstream.core.JVM: float majorJavaVersion> >>>>>>>> com.thoughtworks.xstream.core.JVM.is14 : $b0 = $f0 cmpl 1.4F
com.thoughtworks.xstream.core.JVM.is14 : $b0 = $f0 cmpl 1.4F >>>>>>>> com.thoughtworks.xstream.core.JVM.is14 : if $b0 < 0
com.thoughtworks.xstream.core.JVM.is14 : if $b0 < 0 >>>>>>>> com.thoughtworks.xstream.core.JVM.is14 : $z0 = 1
com.thoughtworks.xstream.core.JVM.is14 : $z0 = 1 >>>>>>>> com.thoughtworks.xstream.core.JVM.is14 : goto [?= return $z0]
com.thoughtworks.xstream.core.JVM.is14 : goto [?= return $z0] >>>>>>>> com.thoughtworks.xstream.core.JVM.is14 : return $z0
com.thoughtworks.xstream.core.JVM.is14 : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : if $z0 == 0
com.thoughtworks.xstream.XStream.setupAliases : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r8 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r8 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r9 = virtualinvoke $r8.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.LinkedHashMap")
com.thoughtworks.xstream.XStream.setupAliases : $r9 = virtualinvoke $r8.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.LinkedHashMap") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("linked-hash-map", $r9)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("linked-hash-map", $r9) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r10 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r10 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r11 = virtualinvoke $r10.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.LinkedHashSet")
com.thoughtworks.xstream.XStream.setupAliases : $r11 = virtualinvoke $r10.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.LinkedHashSet") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("linked-hash-set", $r11)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("linked-hash-set", $r11) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r12 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r12 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r13 = virtualinvoke $r12.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.lang.StackTraceElement")
com.thoughtworks.xstream.XStream.setupAliases : $r13 = virtualinvoke $r12.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.lang.StackTraceElement") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("trace", $r13)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("trace", $r13) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r14 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r14 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r15 = virtualinvoke $r14.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.Currency")
com.thoughtworks.xstream.XStream.setupAliases : $r15 = virtualinvoke $r14.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.Currency") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("currency", $r15)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("currency", $r15) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r16 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r16 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r17 = virtualinvoke $r16.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.nio.charset.Charset")
com.thoughtworks.xstream.XStream.setupAliases : $r17 = virtualinvoke $r16.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.nio.charset.Charset") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void aliasType(java.lang.String,java.lang.Class)>("charset", $r17)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void aliasType(java.lang.String,java.lang.Class)>("charset", $r17) >>>>>>>> com.thoughtworks.xstream.XStream.aliasType : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper>
com.thoughtworks.xstream.XStream.aliasType : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper> >>>>>>>> com.thoughtworks.xstream.XStream.aliasType : if $r4 != null
com.thoughtworks.xstream.XStream.aliasType : if $r4 != null >>>>>>>> com.thoughtworks.xstream.XStream.aliasType : $r12 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper>
com.thoughtworks.xstream.XStream.aliasType : $r12 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ClassAliasingMapper classAliasingMapper> >>>>>>>> com.thoughtworks.xstream.XStream.aliasType : virtualinvoke $r12.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: void addTypeAlias(java.lang.String,java.lang.Class)>(r1, r2)
com.thoughtworks.xstream.XStream.aliasType : virtualinvoke $r12.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: void addTypeAlias(java.lang.String,java.lang.Class)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : $r3 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map nameToType>
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : $r3 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map nameToType> >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : $r4 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : $r4 = virtualinvoke r2.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4)
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r4) >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : $r6 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map typeToName>
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : $r6 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map typeToName> >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1)
com.thoughtworks.xstream.mapper.ClassAliasingMapper.addTypeAlias : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r1) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>()
com.thoughtworks.xstream.XStream.setupAliases : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : if $z1 == 0
com.thoughtworks.xstream.XStream.setupAliases : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r18 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r18 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r19 = virtualinvoke $r18.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.EnumSet")
com.thoughtworks.xstream.XStream.setupAliases : $r19 = virtualinvoke $r18.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.EnumSet") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("enum-set", $r19)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("enum-set", $r19) >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r20 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupAliases : $r20 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : $r21 = virtualinvoke $r20.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.EnumMap")
com.thoughtworks.xstream.XStream.setupAliases : $r21 = virtualinvoke $r20.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("java.util.EnumMap") >>>>>>>> com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("enum-map", $r21)
com.thoughtworks.xstream.XStream.setupAliases : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void alias(java.lang.String,java.lang.Class)>("enum-map", $r21) >>>>>>>> com.thoughtworks.xstream.XStream.setupDefaultImplementations : $r1 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper>
com.thoughtworks.xstream.XStream.setupDefaultImplementations : $r1 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupDefaultImplementations : if $r1 != null
com.thoughtworks.xstream.XStream.setupDefaultImplementations : if $r1 != null >>>>>>>> com.thoughtworks.xstream.XStream.setupDefaultImplementations : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/util/HashMap", class "java/util/Map")
com.thoughtworks.xstream.XStream.setupDefaultImplementations : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/util/HashMap", class "java/util/Map") >>>>>>>> com.thoughtworks.xstream.XStream.addDefaultImplementation : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper>
com.thoughtworks.xstream.XStream.addDefaultImplementation : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper> >>>>>>>> com.thoughtworks.xstream.XStream.addDefaultImplementation : if $r4 != null
com.thoughtworks.xstream.XStream.addDefaultImplementation : if $r4 != null >>>>>>>> com.thoughtworks.xstream.XStream.addDefaultImplementation : $r12 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper>
com.thoughtworks.xstream.XStream.addDefaultImplementation : $r12 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.DefaultImplementationsMapper defaultImplementationsMapper> >>>>>>>> com.thoughtworks.xstream.XStream.addDefaultImplementation : virtualinvoke $r12.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(r1, r2)
com.thoughtworks.xstream.XStream.addDefaultImplementation : virtualinvoke $r12.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.XStream.setupDefaultImplementations : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/util/ArrayList", class "java/util/List")
com.thoughtworks.xstream.XStream.setupDefaultImplementations : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/util/ArrayList", class "java/util/List") >>>>>>>> com.thoughtworks.xstream.XStream.setupDefaultImplementations : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/util/HashSet", class "java/util/Set")
com.thoughtworks.xstream.XStream.setupDefaultImplementations : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/util/HashSet", class "java/util/Set") >>>>>>>> com.thoughtworks.xstream.XStream.setupDefaultImplementations : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/util/GregorianCalendar", class "java/util/Calendar")
com.thoughtworks.xstream.XStream.setupDefaultImplementations : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addDefaultImplementation(java.lang.Class,java.lang.Class)>(class "java/util/GregorianCalendar", class "java/util/Calendar") >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>()
com.thoughtworks.xstream.XStream.setupConverters : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : if $z0 == 0
com.thoughtworks.xstream.XStream.setupConverters : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupConverters : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : r1 = virtualinvoke $r3.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("com.thoughtworks.xstream.annotations.AnnotationProvider")
com.thoughtworks.xstream.XStream.setupConverters : r1 = virtualinvoke $r3.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("com.thoughtworks.xstream.annotations.AnnotationProvider") >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r4 = newarray (java.lang.Class)[3]
com.thoughtworks.xstream.XStream.setupConverters : $r4 = newarray (java.lang.Class)[3] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r4[0] = class "com/thoughtworks/xstream/mapper/Mapper"
com.thoughtworks.xstream.XStream.setupConverters : $r4[0] = class "com/thoughtworks/xstream/mapper/Mapper" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r4[1] = class "com/thoughtworks/xstream/converters/reflection/ReflectionProvider"
com.thoughtworks.xstream.XStream.setupConverters : $r4[1] = class "com/thoughtworks/xstream/converters/reflection/ReflectionProvider" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r4[2] = r1
com.thoughtworks.xstream.XStream.setupConverters : $r4[2] = r1 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r5 = newarray (java.lang.Object)[3]
com.thoughtworks.xstream.XStream.setupConverters : $r5 = newarray (java.lang.Object)[3] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r6 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r6 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r5[0] = $r6
com.thoughtworks.xstream.XStream.setupConverters : $r5[0] = $r6 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r7 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.XStream.setupConverters : $r7 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r5[1] = $r7
com.thoughtworks.xstream.XStream.setupConverters : $r5[1] = $r7 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r8 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.XStream.setupConverters : $r8 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r9 = interfaceinvoke $r8.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: java.lang.Object newInstance(java.lang.Class)>(r1)
com.thoughtworks.xstream.XStream.setupConverters : $r9 = interfaceinvoke $r8.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: java.lang.Object newInstance(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : r2 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor[] getDeclaredConstructors()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : i0 = 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : i0 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $i1 = lengthof r2
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $i1 = lengthof r2 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : if i0 >= $i1
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : if i0 >= $i1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r4 = r2[i0]
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r4 = r2[i0] >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r5 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r5 = virtualinvoke $r4.<java.lang.reflect.Constructor: java.lang.Class[] getParameterTypes()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $i2 = lengthof $r5
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $i2 = lengthof $r5 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : if $i2 != 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : if $i2 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r6 = r2[i0]
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r6 = r2[i0] >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $i3 = virtualinvoke $r6.<java.lang.reflect.Constructor: int getModifiers()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $i3 = virtualinvoke $r6.<java.lang.reflect.Constructor: int getModifiers()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i3)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isPublic(int)>($i3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : if $z0 != 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r8 = r2[i0]
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r8 = r2[i0] >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r9 = newarray (java.lang.Object)[0]
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r9 = newarray (java.lang.Object)[0] >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r10 = virtualinvoke $r8.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : $r10 = virtualinvoke $r8.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : return $r10
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.newInstance : return $r10 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r5[2] = $r9
com.thoughtworks.xstream.XStream.setupConverters : $r5[2] = $r9 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.annotations.AnnotationReflectionConverter", -20, $r4, $r5)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.annotations.AnnotationReflectionConverter", -20, $r4, $r5) >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $r7 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference>
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $r7 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference> >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $r8 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.ClassLoaderReference: java.lang.ClassLoader getReference()>()
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $r8 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.ClassLoaderReference: java.lang.ClassLoader getReference()>() >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, $r8)
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : r4 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String,boolean,java.lang.ClassLoader)>(r1, 0, $r8) >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r2)
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : r5 = virtualinvoke r4.<java.lang.Class: java.lang.reflect.Constructor getConstructor(java.lang.Class[])>(r2) >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : r6 = virtualinvoke r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r3)
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : r6 = virtualinvoke r5.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>(r3) >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $z0 = r6 instanceof com.thoughtworks.xstream.converters.Converter
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $z0 = r6 instanceof com.thoughtworks.xstream.converters.Converter >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : if $z0 == 0
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $r9 = (com.thoughtworks.xstream.converters.Converter) r6
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $r9 = (com.thoughtworks.xstream.converters.Converter) r6 >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r9, i0)
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r9, i0) >>>>>>>> com.thoughtworks.xstream.XStream.registerConverter : $r2 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup>
com.thoughtworks.xstream.XStream.registerConverter : $r2 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup> >>>>>>>> com.thoughtworks.xstream.XStream.registerConverter : virtualinvoke $r2.<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>(r1, i0)
com.thoughtworks.xstream.XStream.registerConverter : virtualinvoke $r2.<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>(r1, i0) >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r4 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.core.util.PrioritizedList converters>
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r4 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.core.util.PrioritizedList converters> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList: void add(java.lang.Object,int)>(r1, i0)
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList: void add(java.lang.Object,int)>(r1, i0) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $i1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority>
com.thoughtworks.xstream.core.util.PrioritizedList.add : $i1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : if $i1 <= i0
com.thoughtworks.xstream.core.util.PrioritizedList.add : if $i1 <= i0 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority> = i0
com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lowestPriority> = i0 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $r3 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Set set>
com.thoughtworks.xstream.core.util.PrioritizedList.add : $r3 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Set set> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $r4 = new com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem
com.thoughtworks.xstream.core.util.PrioritizedList.add : $r4 = new com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $i2 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId>
com.thoughtworks.xstream.core.util.PrioritizedList.add : $i2 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : $i3 = $i2 + 1
com.thoughtworks.xstream.core.util.PrioritizedList.add : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId> = $i3
com.thoughtworks.xstream.core.util.PrioritizedList.add : r0.<com.thoughtworks.xstream.core.util.PrioritizedList: int lastId> = $i3 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : specialinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: void <init>(java.lang.Object,int,int)>(r1, i0, $i3)
com.thoughtworks.xstream.core.util.PrioritizedList.add : specialinvoke $r4.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: void <init>(java.lang.Object,int,int)>(r1, i0, $i3) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.add : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4)
com.thoughtworks.xstream.core.util.PrioritizedList.add : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>($r4) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : r2 = (com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem) r1
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : r2 = (com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem) r1 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i0 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i0 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i1 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i1 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : if $i0 == $i1
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : if $i0 == $i1 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i5 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i5 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i6 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i6 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int id> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i7 = $i5 - $i6
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i7 = $i5 - $i6 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : return $i7
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : return $i7 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r5 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap>
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r5 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r6 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : r2 = interfaceinvoke $r6.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : if $z0 == 0
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : goto [?= (branch)]
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : goto [?= return]
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : goto [?= return] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r10 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup>
com.thoughtworks.xstream.XStream.setupConverters : $r10 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r11 = virtualinvoke $r10.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)>(class "java/lang/Object")
com.thoughtworks.xstream.XStream.setupConverters : $r11 = virtualinvoke $r10.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)>(class "java/lang/Object") >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r6 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap>
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r6 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r7 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : r2 = (com.thoughtworks.xstream.converters.Converter) $r7
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : r2 = (com.thoughtworks.xstream.converters.Converter) $r7 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : if r2 == null
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : if r2 == null >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r8 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r8 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : r3 = interfaceinvoke $r8.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class defaultImplementationOf(java.lang.Class)>(r1)
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : r3 = interfaceinvoke $r8.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class defaultImplementationOf(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.defaultImplementationOf : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.defaultImplementationOf : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.defaultImplementationOf : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class defaultImplementationOf(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.MapperWrapper.defaultImplementationOf : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class defaultImplementationOf(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : $r2 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map typeToImpl>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : $r2 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map typeToImpl> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : $z0 = interfaceinvoke $r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : if $z0 == 0
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : $r6 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.Class defaultImplementationOf(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : $r6 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.Class defaultImplementationOf(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultMapper.defaultImplementationOf : return r1
com.thoughtworks.xstream.mapper.DefaultMapper.defaultImplementationOf : return r1 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.defaultImplementationOf : return $r3
com.thoughtworks.xstream.mapper.MapperWrapper.defaultImplementationOf : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : return $r6
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.defaultImplementationOf : return $r6 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r9 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.core.util.PrioritizedList converters>
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r9 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: com.thoughtworks.xstream.core.util.PrioritizedList converters> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : r4 = virtualinvoke $r9.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Iterator iterator()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : r4 = virtualinvoke $r9.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.iterator : $r1 = new com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator
com.thoughtworks.xstream.core.util.PrioritizedList.iterator : $r1 = new com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.iterator : $r2 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Set set>
com.thoughtworks.xstream.core.util.PrioritizedList.iterator : $r2 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Set set> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.iterator : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>()
com.thoughtworks.xstream.core.util.PrioritizedList.iterator : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.iterator : specialinvoke $r1.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator: void <init>(java.util.Iterator)>($r3)
com.thoughtworks.xstream.core.util.PrioritizedList.iterator : specialinvoke $r1.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator: void <init>(java.util.Iterator)>($r3) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList.iterator : return $r1
com.thoughtworks.xstream.core.util.PrioritizedList.iterator : return $r1 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.hasNext : $r1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator: java.util.Iterator iterator>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.hasNext : $r1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator: java.util.Iterator iterator> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.hasNext : $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.hasNext : $z0 = interfaceinvoke $r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.hasNext : return $z0
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.hasNext : return $z0 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : if $z0 == 0
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r10 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : $r1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator: java.util.Iterator iterator>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : $r1 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator: java.util.Iterator iterator> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>()
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : $r2 = interfaceinvoke $r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : $r3 = (com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem) $r2
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : $r3 = (com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem) $r2 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : $r4 = $r3.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: java.lang.Object value>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : $r4 = $r3.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: java.lang.Object value> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : return $r4
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItemIterator.next : return $r4 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : r5 = (com.thoughtworks.xstream.converters.Converter) $r10
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : r5 = (com.thoughtworks.xstream.converters.Converter) $r10 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $z1 = interfaceinvoke r5.<com.thoughtworks.xstream.converters.Converter: boolean canConvert(java.lang.Class)>(r3)
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $z1 = interfaceinvoke r5.<com.thoughtworks.xstream.converters.Converter: boolean canConvert(java.lang.Class)>(r3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.ReflectionConverter.canConvert : return 1
com.thoughtworks.xstream.converters.reflection.ReflectionConverter.canConvert : return 1 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : if $z1 == 0
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r11 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap>
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : $r11 = r0.<com.thoughtworks.xstream.core.DefaultConverterLookup: java.util.Map typeToConverterMap> >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5)
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : interfaceinvoke $r11.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r5) >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : return r5
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : return r5 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : r2 = (com.thoughtworks.xstream.converters.reflection.ReflectionConverter) $r11
com.thoughtworks.xstream.XStream.setupConverters : r2 = (com.thoughtworks.xstream.converters.reflection.ReflectionConverter) $r11 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : goto [?= $r15 = new com.thoughtworks.xstream.converters.reflection.SerializableConverter]
com.thoughtworks.xstream.XStream.setupConverters : goto [?= $r15 = new com.thoughtworks.xstream.converters.reflection.SerializableConverter] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r15 = new com.thoughtworks.xstream.converters.reflection.SerializableConverter
com.thoughtworks.xstream.XStream.setupConverters : $r15 = new com.thoughtworks.xstream.converters.reflection.SerializableConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r16 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r16 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r17 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.XStream.setupConverters : $r17 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r15.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.reflection.ReflectionProvider)>($r16, $r17)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r15.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.reflection.ReflectionProvider)>($r16, $r17) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r15, -10)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r15, -10) >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i2 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i2 = r2.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i3 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority>
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i3 = r0.<com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem: int priority> >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i4 = $i2 - $i3
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : $i4 = $i2 - $i3 >>>>>>>> com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : return $i4
com.thoughtworks.xstream.core.util.PrioritizedList$PrioritizedItem.compareTo : return $i4 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $r7 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : r3 = (java.lang.Class) $r7
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : r3 = (java.lang.Class) $r7 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $z1 = interfaceinvoke r1.<com.thoughtworks.xstream.converters.Converter: boolean canConvert(java.lang.Class)>(r3)
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : $z1 = interfaceinvoke r1.<com.thoughtworks.xstream.converters.Converter: boolean canConvert(java.lang.Class)>(r3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.canConvert : $z0 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: boolean isSerializable(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.reflection.SerializableConverter.canConvert : $z0 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: boolean isSerializable(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $r2 = class "java/io/Serializable"
com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $r2 = class "java/io/Serializable" >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : if $z0 == 0
com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $z3 = 0
com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $z3 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : return $z3
com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : return $z3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.reflection.SerializableConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : if $z1 == 0
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
com.thoughtworks.xstream.core.DefaultConverterLookup.registerConverter : goto [?= $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r18 = new com.thoughtworks.xstream.converters.reflection.ExternalizableConverter
com.thoughtworks.xstream.XStream.setupConverters : $r18 = new com.thoughtworks.xstream.converters.reflection.ExternalizableConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r19 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r19 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r18.<com.thoughtworks.xstream.converters.reflection.ExternalizableConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r19)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r18.<com.thoughtworks.xstream.converters.reflection.ExternalizableConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r19) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r18, -10)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r18, -10) >>>>>>>> com.thoughtworks.xstream.converters.reflection.ExternalizableConverter.canConvert : $r2 = class "java/io/Externalizable"
com.thoughtworks.xstream.converters.reflection.ExternalizableConverter.canConvert : $r2 = class "java/io/Externalizable" >>>>>>>> com.thoughtworks.xstream.converters.reflection.ExternalizableConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.reflection.ExternalizableConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.ExternalizableConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.reflection.ExternalizableConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r20 = new com.thoughtworks.xstream.converters.basic.NullConverter
com.thoughtworks.xstream.XStream.setupConverters : $r20 = new com.thoughtworks.xstream.converters.basic.NullConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r20.<com.thoughtworks.xstream.converters.basic.NullConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r20.<com.thoughtworks.xstream.converters.basic.NullConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r20, 10000)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r20, 10000) >>>>>>>> com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : if r1 == null
com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : if r1 == null >>>>>>>> com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : $r2 = class "com/thoughtworks/xstream/mapper/Mapper$Null"
com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : $r2 = class "com/thoughtworks/xstream/mapper/Mapper$Null" >>>>>>>> com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : if $z0 == 0
com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : $z1 = 0
com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : $z1 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : return $z1
com.thoughtworks.xstream.converters.basic.NullConverter.canConvert : return $z1 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r21 = new com.thoughtworks.xstream.converters.basic.IntConverter
com.thoughtworks.xstream.XStream.setupConverters : $r21 = new com.thoughtworks.xstream.converters.basic.IntConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r21.<com.thoughtworks.xstream.converters.basic.IntConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r21.<com.thoughtworks.xstream.converters.basic.IntConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r21, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r21, 0) >>>>>>>> com.thoughtworks.xstream.XStream.registerConverter : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup>
com.thoughtworks.xstream.XStream.registerConverter : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup> >>>>>>>> com.thoughtworks.xstream.XStream.registerConverter : $r2 = new com.thoughtworks.xstream.converters.SingleValueConverterWrapper
com.thoughtworks.xstream.XStream.registerConverter : $r2 = new com.thoughtworks.xstream.converters.SingleValueConverterWrapper >>>>>>>> com.thoughtworks.xstream.XStream.registerConverter : specialinvoke $r2.<com.thoughtworks.xstream.converters.SingleValueConverterWrapper: void <init>(com.thoughtworks.xstream.converters.SingleValueConverter)>(r1)
com.thoughtworks.xstream.XStream.registerConverter : specialinvoke $r2.<com.thoughtworks.xstream.converters.SingleValueConverterWrapper: void <init>(com.thoughtworks.xstream.converters.SingleValueConverter)>(r1) >>>>>>>> com.thoughtworks.xstream.XStream.registerConverter : virtualinvoke $r3.<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r2, i0)
com.thoughtworks.xstream.XStream.registerConverter : virtualinvoke $r3.<com.thoughtworks.xstream.core.DefaultConverterLookup: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r2, i0) >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.canConvert : $r2 = r0.<com.thoughtworks.xstream.converters.SingleValueConverterWrapper: com.thoughtworks.xstream.converters.SingleValueConverter wrapped>
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.canConvert : $r2 = r0.<com.thoughtworks.xstream.converters.SingleValueConverterWrapper: com.thoughtworks.xstream.converters.SingleValueConverter wrapped> >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.canConvert : $z0 = interfaceinvoke $r2.<com.thoughtworks.xstream.converters.SingleValueConverter: boolean canConvert(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.canConvert : $z0 = interfaceinvoke $r2.<com.thoughtworks.xstream.converters.SingleValueConverter: boolean canConvert(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : $r2 = <java.lang.Integer: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : $r2 = <java.lang.Integer: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Integer")
com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Integer") >>>>>>>> com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.basic.IntConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.canConvert : return $z0
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r22 = new com.thoughtworks.xstream.converters.basic.FloatConverter
com.thoughtworks.xstream.XStream.setupConverters : $r22 = new com.thoughtworks.xstream.converters.basic.FloatConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r22.<com.thoughtworks.xstream.converters.basic.FloatConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r22.<com.thoughtworks.xstream.converters.basic.FloatConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r22, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r22, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : $r2 = <java.lang.Float: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : $r2 = <java.lang.Float: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Float")
com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Float") >>>>>>>> com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.basic.FloatConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r23 = new com.thoughtworks.xstream.converters.basic.DoubleConverter
com.thoughtworks.xstream.XStream.setupConverters : $r23 = new com.thoughtworks.xstream.converters.basic.DoubleConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r23.<com.thoughtworks.xstream.converters.basic.DoubleConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r23.<com.thoughtworks.xstream.converters.basic.DoubleConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r23, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r23, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : $r2 = <java.lang.Double: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : $r2 = <java.lang.Double: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Double")
com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Double") >>>>>>>> com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.basic.DoubleConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r24 = new com.thoughtworks.xstream.converters.basic.LongConverter
com.thoughtworks.xstream.XStream.setupConverters : $r24 = new com.thoughtworks.xstream.converters.basic.LongConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r24.<com.thoughtworks.xstream.converters.basic.LongConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r24.<com.thoughtworks.xstream.converters.basic.LongConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r24, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r24, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : $r2 = <java.lang.Long: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : $r2 = <java.lang.Long: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Long")
com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Long") >>>>>>>> com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.basic.LongConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r25 = new com.thoughtworks.xstream.converters.basic.ShortConverter
com.thoughtworks.xstream.XStream.setupConverters : $r25 = new com.thoughtworks.xstream.converters.basic.ShortConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r25.<com.thoughtworks.xstream.converters.basic.ShortConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r25.<com.thoughtworks.xstream.converters.basic.ShortConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r25, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r25, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : $r2 = <java.lang.Short: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : $r2 = <java.lang.Short: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Short")
com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Short") >>>>>>>> com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.basic.ShortConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r26 = new com.thoughtworks.xstream.converters.basic.CharConverter
com.thoughtworks.xstream.XStream.setupConverters : $r26 = new com.thoughtworks.xstream.converters.basic.CharConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r26.<com.thoughtworks.xstream.converters.basic.CharConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r26.<com.thoughtworks.xstream.converters.basic.CharConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r26, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r26, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : $r2 = <java.lang.Character: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : $r2 = <java.lang.Character: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Character")
com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Character") >>>>>>>> com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.basic.CharConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r27 = new com.thoughtworks.xstream.converters.basic.BooleanConverter
com.thoughtworks.xstream.XStream.setupConverters : $r27 = new com.thoughtworks.xstream.converters.basic.BooleanConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r27.<com.thoughtworks.xstream.converters.basic.BooleanConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r27.<com.thoughtworks.xstream.converters.basic.BooleanConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r27, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r27, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : $r2 = <java.lang.Boolean: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : $r2 = <java.lang.Boolean: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Boolean")
com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Boolean") >>>>>>>> com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.basic.BooleanConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r28 = new com.thoughtworks.xstream.converters.basic.ByteConverter
com.thoughtworks.xstream.XStream.setupConverters : $r28 = new com.thoughtworks.xstream.converters.basic.ByteConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r28.<com.thoughtworks.xstream.converters.basic.ByteConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r28.<com.thoughtworks.xstream.converters.basic.ByteConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r28, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r28, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : $r2 = <java.lang.Byte: java.lang.Class TYPE>
com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : $r2 = <java.lang.Byte: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Byte")
com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/Byte") >>>>>>>> com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.basic.ByteConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r29 = new com.thoughtworks.xstream.converters.basic.StringConverter
com.thoughtworks.xstream.XStream.setupConverters : $r29 = new com.thoughtworks.xstream.converters.basic.StringConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r29.<com.thoughtworks.xstream.converters.basic.StringConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r29.<com.thoughtworks.xstream.converters.basic.StringConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r29, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r29, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.StringConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/String")
com.thoughtworks.xstream.converters.basic.StringConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/String") >>>>>>>> com.thoughtworks.xstream.converters.basic.StringConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.basic.StringConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r30 = new com.thoughtworks.xstream.converters.basic.StringBufferConverter
com.thoughtworks.xstream.XStream.setupConverters : $r30 = new com.thoughtworks.xstream.converters.basic.StringBufferConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r30.<com.thoughtworks.xstream.converters.basic.StringBufferConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r30.<com.thoughtworks.xstream.converters.basic.StringBufferConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r30, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r30, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.StringBufferConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/StringBuffer")
com.thoughtworks.xstream.converters.basic.StringBufferConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/StringBuffer") >>>>>>>> com.thoughtworks.xstream.converters.basic.StringBufferConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.basic.StringBufferConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r31 = new com.thoughtworks.xstream.converters.basic.DateConverter
com.thoughtworks.xstream.XStream.setupConverters : $r31 = new com.thoughtworks.xstream.converters.basic.DateConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r31.<com.thoughtworks.xstream.converters.basic.DateConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r31.<com.thoughtworks.xstream.converters.basic.DateConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r31, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r31, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.DateConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Date")
com.thoughtworks.xstream.converters.basic.DateConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Date") >>>>>>>> com.thoughtworks.xstream.converters.basic.DateConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.basic.DateConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r32 = new com.thoughtworks.xstream.converters.collections.BitSetConverter
com.thoughtworks.xstream.XStream.setupConverters : $r32 = new com.thoughtworks.xstream.converters.collections.BitSetConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r32.<com.thoughtworks.xstream.converters.collections.BitSetConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r32.<com.thoughtworks.xstream.converters.collections.BitSetConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r32, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r32, 0) >>>>>>>> com.thoughtworks.xstream.converters.collections.BitSetConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/BitSet")
com.thoughtworks.xstream.converters.collections.BitSetConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/BitSet") >>>>>>>> com.thoughtworks.xstream.converters.collections.BitSetConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.collections.BitSetConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r33 = new com.thoughtworks.xstream.converters.basic.URLConverter
com.thoughtworks.xstream.XStream.setupConverters : $r33 = new com.thoughtworks.xstream.converters.basic.URLConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r33.<com.thoughtworks.xstream.converters.basic.URLConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r33.<com.thoughtworks.xstream.converters.basic.URLConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r33, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r33, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.URLConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/net/URL")
com.thoughtworks.xstream.converters.basic.URLConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/net/URL") >>>>>>>> com.thoughtworks.xstream.converters.basic.URLConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.basic.URLConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r34 = new com.thoughtworks.xstream.converters.basic.BigIntegerConverter
com.thoughtworks.xstream.XStream.setupConverters : $r34 = new com.thoughtworks.xstream.converters.basic.BigIntegerConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r34.<com.thoughtworks.xstream.converters.basic.BigIntegerConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r34.<com.thoughtworks.xstream.converters.basic.BigIntegerConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r34, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r34, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.BigIntegerConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/math/BigInteger")
com.thoughtworks.xstream.converters.basic.BigIntegerConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/math/BigInteger") >>>>>>>> com.thoughtworks.xstream.converters.basic.BigIntegerConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.basic.BigIntegerConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r35 = new com.thoughtworks.xstream.converters.basic.BigDecimalConverter
com.thoughtworks.xstream.XStream.setupConverters : $r35 = new com.thoughtworks.xstream.converters.basic.BigDecimalConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r35.<com.thoughtworks.xstream.converters.basic.BigDecimalConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r35.<com.thoughtworks.xstream.converters.basic.BigDecimalConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r35, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r35, 0) >>>>>>>> com.thoughtworks.xstream.converters.basic.BigDecimalConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/math/BigDecimal")
com.thoughtworks.xstream.converters.basic.BigDecimalConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/math/BigDecimal") >>>>>>>> com.thoughtworks.xstream.converters.basic.BigDecimalConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.basic.BigDecimalConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r36 = new com.thoughtworks.xstream.converters.collections.ArrayConverter
com.thoughtworks.xstream.XStream.setupConverters : $r36 = new com.thoughtworks.xstream.converters.collections.ArrayConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r37 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r37 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r36.<com.thoughtworks.xstream.converters.collections.ArrayConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r37)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r36.<com.thoughtworks.xstream.converters.collections.ArrayConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r37) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r36, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r36, 0) >>>>>>>> com.thoughtworks.xstream.converters.collections.ArrayConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>()
com.thoughtworks.xstream.converters.collections.ArrayConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>() >>>>>>>> com.thoughtworks.xstream.converters.collections.ArrayConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.collections.ArrayConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r38 = new com.thoughtworks.xstream.converters.collections.CharArrayConverter
com.thoughtworks.xstream.XStream.setupConverters : $r38 = new com.thoughtworks.xstream.converters.collections.CharArrayConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r38.<com.thoughtworks.xstream.converters.collections.CharArrayConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r38.<com.thoughtworks.xstream.converters.collections.CharArrayConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r38, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r38, 0) >>>>>>>> com.thoughtworks.xstream.converters.collections.CharArrayConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>()
com.thoughtworks.xstream.converters.collections.CharArrayConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>() >>>>>>>> com.thoughtworks.xstream.converters.collections.CharArrayConverter.canConvert : if $z0 == 0
com.thoughtworks.xstream.converters.collections.CharArrayConverter.canConvert : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CharArrayConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.collections.CharArrayConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CharArrayConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.collections.CharArrayConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r39 = new com.thoughtworks.xstream.converters.collections.CollectionConverter
com.thoughtworks.xstream.XStream.setupConverters : $r39 = new com.thoughtworks.xstream.converters.collections.CollectionConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r40 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r40 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r39.<com.thoughtworks.xstream.converters.collections.CollectionConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r40)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r39.<com.thoughtworks.xstream.converters.collections.CollectionConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r40) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r39, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r39, 0) >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/ArrayList")
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/ArrayList") >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/HashSet")
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/HashSet") >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z1 != 0
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/LinkedList")
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z2 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/LinkedList") >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z2 != 0
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z2 != 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z3 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Vector")
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z3 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Vector") >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z3 != 0
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z3 != 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>()
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>() >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z4 == 0
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z4 == 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z5 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.util.LinkedHashSet")
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z5 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.util.LinkedHashSet") >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z5 == 0
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : if $z5 == 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z6 = 0
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : $z6 = 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : return $z6
com.thoughtworks.xstream.converters.collections.CollectionConverter.canConvert : return $z6 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r41 = new com.thoughtworks.xstream.converters.collections.MapConverter
com.thoughtworks.xstream.XStream.setupConverters : $r41 = new com.thoughtworks.xstream.converters.collections.MapConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r42 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r42 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r41.<com.thoughtworks.xstream.converters.collections.MapConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r42)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r41.<com.thoughtworks.xstream.converters.collections.MapConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r42) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r41, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r41, 0) >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/HashMap")
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/HashMap") >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Hashtable")
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Hashtable") >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : if $z1 != 0
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z2 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>()
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z2 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>() >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : if $z2 == 0
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.util.LinkedHashMap")
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z3 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.util.LinkedHashMap") >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : if $z3 == 0
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : if $z3 == 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z4 = 0
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : $z4 = 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : return $z4
com.thoughtworks.xstream.converters.collections.MapConverter.canConvert : return $z4 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r43 = new com.thoughtworks.xstream.converters.collections.TreeMapConverter
com.thoughtworks.xstream.XStream.setupConverters : $r43 = new com.thoughtworks.xstream.converters.collections.TreeMapConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r44 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r44 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r43.<com.thoughtworks.xstream.converters.collections.TreeMapConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r44)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r43.<com.thoughtworks.xstream.converters.collections.TreeMapConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r44) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r43, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r43, 0) >>>>>>>> com.thoughtworks.xstream.converters.collections.TreeMapConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/TreeMap")
com.thoughtworks.xstream.converters.collections.TreeMapConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/TreeMap") >>>>>>>> com.thoughtworks.xstream.converters.collections.TreeMapConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.collections.TreeMapConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r45 = new com.thoughtworks.xstream.converters.collections.TreeSetConverter
com.thoughtworks.xstream.XStream.setupConverters : $r45 = new com.thoughtworks.xstream.converters.collections.TreeSetConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r46 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r46 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r45.<com.thoughtworks.xstream.converters.collections.TreeSetConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r46)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r45.<com.thoughtworks.xstream.converters.collections.TreeSetConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper)>($r46) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r45, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r45, 0) >>>>>>>> com.thoughtworks.xstream.converters.collections.TreeSetConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/TreeSet")
com.thoughtworks.xstream.converters.collections.TreeSetConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/TreeSet") >>>>>>>> com.thoughtworks.xstream.converters.collections.TreeSetConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.collections.TreeSetConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r47 = new com.thoughtworks.xstream.converters.collections.PropertiesConverter
com.thoughtworks.xstream.XStream.setupConverters : $r47 = new com.thoughtworks.xstream.converters.collections.PropertiesConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r47.<com.thoughtworks.xstream.converters.collections.PropertiesConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r47.<com.thoughtworks.xstream.converters.collections.PropertiesConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r47, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r47, 0) >>>>>>>> com.thoughtworks.xstream.converters.collections.PropertiesConverter.canConvert : if class "java/util/Properties" != r1
com.thoughtworks.xstream.converters.collections.PropertiesConverter.canConvert : if class "java/util/Properties" != r1 >>>>>>>> com.thoughtworks.xstream.converters.collections.PropertiesConverter.canConvert : $z0 = 0
com.thoughtworks.xstream.converters.collections.PropertiesConverter.canConvert : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.converters.collections.PropertiesConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.collections.PropertiesConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r48 = new com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter
com.thoughtworks.xstream.XStream.setupConverters : $r48 = new com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r48.<com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r48.<com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r48, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r48, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>()
com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>() >>>>>>>> com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter.canConvert : if $z0 == 0
com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter.canConvert : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.extended.EncodedByteArrayConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r49 = new com.thoughtworks.xstream.converters.extended.FileConverter
com.thoughtworks.xstream.XStream.setupConverters : $r49 = new com.thoughtworks.xstream.converters.extended.FileConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r49.<com.thoughtworks.xstream.converters.extended.FileConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r49.<com.thoughtworks.xstream.converters.extended.FileConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r49, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r49, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.FileConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/io/File")
com.thoughtworks.xstream.converters.extended.FileConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/io/File") >>>>>>>> com.thoughtworks.xstream.converters.extended.FileConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.FileConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r50 = new com.thoughtworks.xstream.converters.extended.SqlTimestampConverter
com.thoughtworks.xstream.XStream.setupConverters : $r50 = new com.thoughtworks.xstream.converters.extended.SqlTimestampConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r50.<com.thoughtworks.xstream.converters.extended.SqlTimestampConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r50.<com.thoughtworks.xstream.converters.extended.SqlTimestampConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r50, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r50, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.SqlTimestampConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/sql/Timestamp")
com.thoughtworks.xstream.converters.extended.SqlTimestampConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/sql/Timestamp") >>>>>>>> com.thoughtworks.xstream.converters.extended.SqlTimestampConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.SqlTimestampConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r51 = new com.thoughtworks.xstream.converters.extended.SqlTimeConverter
com.thoughtworks.xstream.XStream.setupConverters : $r51 = new com.thoughtworks.xstream.converters.extended.SqlTimeConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r51.<com.thoughtworks.xstream.converters.extended.SqlTimeConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r51.<com.thoughtworks.xstream.converters.extended.SqlTimeConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r51, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r51, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.SqlTimeConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/sql/Time")
com.thoughtworks.xstream.converters.extended.SqlTimeConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/sql/Time") >>>>>>>> com.thoughtworks.xstream.converters.extended.SqlTimeConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.SqlTimeConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r52 = new com.thoughtworks.xstream.converters.extended.SqlDateConverter
com.thoughtworks.xstream.XStream.setupConverters : $r52 = new com.thoughtworks.xstream.converters.extended.SqlDateConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r52.<com.thoughtworks.xstream.converters.extended.SqlDateConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r52.<com.thoughtworks.xstream.converters.extended.SqlDateConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r52, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r52, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.SqlDateConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/sql/Date")
com.thoughtworks.xstream.converters.extended.SqlDateConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/sql/Date") >>>>>>>> com.thoughtworks.xstream.converters.extended.SqlDateConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.SqlDateConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r53 = new com.thoughtworks.xstream.converters.extended.DynamicProxyConverter
com.thoughtworks.xstream.XStream.setupConverters : $r53 = new com.thoughtworks.xstream.converters.extended.DynamicProxyConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r54 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r54 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r55 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference>
com.thoughtworks.xstream.XStream.setupConverters : $r55 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r53.<com.thoughtworks.xstream.converters.extended.DynamicProxyConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper,java.lang.ClassLoader)>($r54, $r55)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r53.<com.thoughtworks.xstream.converters.extended.DynamicProxyConverter: void <init>(com.thoughtworks.xstream.mapper.Mapper,java.lang.ClassLoader)>($r54, $r55) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r53, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r53, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "com/thoughtworks/xstream/mapper/DynamicProxyMapper$DynamicProxy")
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "com/thoughtworks/xstream/mapper/DynamicProxyMapper$DynamicProxy") >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z1 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z1 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.extended.DynamicProxyConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r56 = new com.thoughtworks.xstream.converters.extended.JavaClassConverter
com.thoughtworks.xstream.XStream.setupConverters : $r56 = new com.thoughtworks.xstream.converters.extended.JavaClassConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r57 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference>
com.thoughtworks.xstream.XStream.setupConverters : $r57 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r56.<com.thoughtworks.xstream.converters.extended.JavaClassConverter: void <init>(java.lang.ClassLoader)>($r57)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r56.<com.thoughtworks.xstream.converters.extended.JavaClassConverter: void <init>(java.lang.ClassLoader)>($r57) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r56, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r56, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaClassConverter.canConvert : $r2 = class "java/lang/Class"
com.thoughtworks.xstream.converters.extended.JavaClassConverter.canConvert : $r2 = class "java/lang/Class" >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaClassConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.extended.JavaClassConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaClassConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.JavaClassConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r58 = new com.thoughtworks.xstream.converters.extended.JavaMethodConverter
com.thoughtworks.xstream.XStream.setupConverters : $r58 = new com.thoughtworks.xstream.converters.extended.JavaMethodConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r59 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference>
com.thoughtworks.xstream.XStream.setupConverters : $r59 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.util.ClassLoaderReference classLoaderReference> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r58.<com.thoughtworks.xstream.converters.extended.JavaMethodConverter: void <init>(java.lang.ClassLoader)>($r59)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r58.<com.thoughtworks.xstream.converters.extended.JavaMethodConverter: void <init>(java.lang.ClassLoader)>($r59) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r58, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r58, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/reflect/Method")
com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/reflect/Method") >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/reflect/Constructor")
com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : $z1 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/lang/reflect/Constructor") >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.extended.JavaMethodConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r60 = new com.thoughtworks.xstream.converters.extended.FontConverter
com.thoughtworks.xstream.XStream.setupConverters : $r60 = new com.thoughtworks.xstream.converters.extended.FontConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r60.<com.thoughtworks.xstream.converters.extended.FontConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r60.<com.thoughtworks.xstream.converters.extended.FontConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r60, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r60, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.awt.Font")
com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.awt.Font") >>>>>>>> com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("javax.swing.plaf.FontUIResource")
com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $z1 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>("javax.swing.plaf.FontUIResource") >>>>>>>> com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.extended.FontConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r61 = new com.thoughtworks.xstream.converters.extended.ColorConverter
com.thoughtworks.xstream.XStream.setupConverters : $r61 = new com.thoughtworks.xstream.converters.extended.ColorConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r61.<com.thoughtworks.xstream.converters.extended.ColorConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r61.<com.thoughtworks.xstream.converters.extended.ColorConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r61, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r61, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.ColorConverter.canConvert : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.extended.ColorConverter.canConvert : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.extended.ColorConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.awt.Color")
com.thoughtworks.xstream.converters.extended.ColorConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.String: boolean equals(java.lang.Object)>("java.awt.Color") >>>>>>>> com.thoughtworks.xstream.converters.extended.ColorConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.ColorConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r62 = new com.thoughtworks.xstream.converters.extended.TextAttributeConverter
com.thoughtworks.xstream.XStream.setupConverters : $r62 = new com.thoughtworks.xstream.converters.extended.TextAttributeConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r62.<com.thoughtworks.xstream.converters.extended.TextAttributeConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r62.<com.thoughtworks.xstream.converters.extended.TextAttributeConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r62, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r62, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.TextAttributeConverter.canConvert : if r1 != class "java/awt/font/TextAttribute"
com.thoughtworks.xstream.converters.extended.TextAttributeConverter.canConvert : if r1 != class "java/awt/font/TextAttribute" >>>>>>>> com.thoughtworks.xstream.converters.extended.TextAttributeConverter.canConvert : $z0 = 0
com.thoughtworks.xstream.converters.extended.TextAttributeConverter.canConvert : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.converters.extended.TextAttributeConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.TextAttributeConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r63 = new com.thoughtworks.xstream.converters.extended.LocaleConverter
com.thoughtworks.xstream.XStream.setupConverters : $r63 = new com.thoughtworks.xstream.converters.extended.LocaleConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r63.<com.thoughtworks.xstream.converters.extended.LocaleConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r63.<com.thoughtworks.xstream.converters.extended.LocaleConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r63, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r63, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.LocaleConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Locale")
com.thoughtworks.xstream.converters.extended.LocaleConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Locale") >>>>>>>> com.thoughtworks.xstream.converters.extended.LocaleConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.LocaleConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r64 = new com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter
com.thoughtworks.xstream.XStream.setupConverters : $r64 = new com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r64.<com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter: void <init>()>()
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r64.<com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r64, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r64, 0) >>>>>>>> com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/GregorianCalendar")
com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/GregorianCalendar") >>>>>>>> com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.GregorianCalendarConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r65 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupConverters : $r65 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r66 = virtualinvoke $r65.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("javax.security.auth.Subject")
com.thoughtworks.xstream.XStream.setupConverters : $r66 = virtualinvoke $r65.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("javax.security.auth.Subject") >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : if $r66 == null
com.thoughtworks.xstream.XStream.setupConverters : if $r66 == null >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r67 = newarray (java.lang.Class)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r67 = newarray (java.lang.Class)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r67[0] = class "com/thoughtworks/xstream/mapper/Mapper"
com.thoughtworks.xstream.XStream.setupConverters : $r67[0] = class "com/thoughtworks/xstream/mapper/Mapper" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r68 = newarray (java.lang.Object)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r68 = newarray (java.lang.Object)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r69 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r69 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r68[0] = $r69
com.thoughtworks.xstream.XStream.setupConverters : $r68[0] = $r69 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.SubjectConverter", 0, $r67, $r68)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.SubjectConverter", 0, $r67, $r68) >>>>>>>> com.thoughtworks.xstream.converters.extended.SubjectConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "javax/security/auth/Subject")
com.thoughtworks.xstream.converters.extended.SubjectConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "javax/security/auth/Subject") >>>>>>>> com.thoughtworks.xstream.converters.extended.SubjectConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.SubjectConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>()
com.thoughtworks.xstream.XStream.setupConverters : $z1 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : if $z1 == 0
com.thoughtworks.xstream.XStream.setupConverters : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r70 = newarray (java.lang.Class)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r70 = newarray (java.lang.Class)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r70[0] = class "com/thoughtworks/xstream/converters/Converter"
com.thoughtworks.xstream.XStream.setupConverters : $r70[0] = class "com/thoughtworks/xstream/converters/Converter" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r71 = newarray (java.lang.Object)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r71 = newarray (java.lang.Object)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r71[0] = r2
com.thoughtworks.xstream.XStream.setupConverters : $r71[0] = r2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.ThrowableConverter", 0, $r70, $r71)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.ThrowableConverter", 0, $r70, $r71) >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverter.canConvert : $r2 = class "java/lang/Throwable"
com.thoughtworks.xstream.converters.extended.ThrowableConverter.canConvert : $r2 = class "java/lang/Throwable" >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.extended.ThrowableConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.extended.ThrowableConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.ThrowableConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.StackTraceElementConverter", 0, null, null)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.StackTraceElementConverter", 0, null, null) >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $z1 = r6 instanceof com.thoughtworks.xstream.converters.SingleValueConverter
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $z1 = r6 instanceof com.thoughtworks.xstream.converters.SingleValueConverter >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : if $z1 == 0
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $r10 = (com.thoughtworks.xstream.converters.SingleValueConverter) r6
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : $r10 = (com.thoughtworks.xstream.converters.SingleValueConverter) r6 >>>>>>>> com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r10, i0)
com.thoughtworks.xstream.XStream.dynamicallyRegisterConverter : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.SingleValueConverter,int)>($r10, i0) >>>>>>>> com.thoughtworks.xstream.converters.extended.StackTraceElementConverter.canConvert : $r2 = class "java/lang/StackTraceElement"
com.thoughtworks.xstream.converters.extended.StackTraceElementConverter.canConvert : $r2 = class "java/lang/StackTraceElement" >>>>>>>> com.thoughtworks.xstream.converters.extended.StackTraceElementConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.extended.StackTraceElementConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.extended.StackTraceElementConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.StackTraceElementConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.CurrencyConverter", 0, null, null)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.CurrencyConverter", 0, null, null) >>>>>>>> com.thoughtworks.xstream.converters.extended.CurrencyConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Currency")
com.thoughtworks.xstream.converters.extended.CurrencyConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/Currency") >>>>>>>> com.thoughtworks.xstream.converters.extended.CurrencyConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.CurrencyConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r72 = newarray (java.lang.Class)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r72 = newarray (java.lang.Class)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r72[0] = class "com/thoughtworks/xstream/converters/Converter"
com.thoughtworks.xstream.XStream.setupConverters : $r72[0] = class "com/thoughtworks/xstream/converters/Converter" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r73 = newarray (java.lang.Object)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r73 = newarray (java.lang.Object)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r73[0] = r2
com.thoughtworks.xstream.XStream.setupConverters : $r73[0] = r2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.RegexPatternConverter", 0, $r72, $r73)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.RegexPatternConverter", 0, $r72, $r73) >>>>>>>> com.thoughtworks.xstream.converters.extended.RegexPatternConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/regex/Pattern")
com.thoughtworks.xstream.converters.extended.RegexPatternConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Object: boolean equals(java.lang.Object)>(class "java/util/regex/Pattern") >>>>>>>> com.thoughtworks.xstream.converters.extended.RegexPatternConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.RegexPatternConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.CharsetConverter", 0, null, null)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.extended.CharsetConverter", 0, null, null) >>>>>>>> com.thoughtworks.xstream.converters.extended.CharsetConverter.canConvert : $r2 = class "java/nio/charset/Charset"
com.thoughtworks.xstream.converters.extended.CharsetConverter.canConvert : $r2 = class "java/nio/charset/Charset" >>>>>>>> com.thoughtworks.xstream.converters.extended.CharsetConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.extended.CharsetConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.extended.CharsetConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.extended.CharsetConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $z2 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>()
com.thoughtworks.xstream.XStream.setupConverters : $z2 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is15()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : if $z2 == 0
com.thoughtworks.xstream.XStream.setupConverters : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.enums.EnumConverter", 0, null, null)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.enums.EnumConverter", 0, null, null) >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isEnum()>()
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z0 = virtualinvoke r1.<java.lang.Class: boolean isEnum()>() >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : if $z0 != 0
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $r2 = class "java/lang/Enum"
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $r2 = class "java/lang/Enum" >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z1 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : if $z1 == 0
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z2 = 0
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : $z2 = 0 >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : return $z2
com.thoughtworks.xstream.converters.enums.EnumConverter.canConvert : return $z2 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r74 = newarray (java.lang.Class)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r74 = newarray (java.lang.Class)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r74[0] = class "com/thoughtworks/xstream/mapper/Mapper"
com.thoughtworks.xstream.XStream.setupConverters : $r74[0] = class "com/thoughtworks/xstream/mapper/Mapper" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r75 = newarray (java.lang.Object)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r75 = newarray (java.lang.Object)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r76 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r76 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r75[0] = $r76
com.thoughtworks.xstream.XStream.setupConverters : $r75[0] = $r76 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.enums.EnumSetConverter", 0, $r74, $r75)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.enums.EnumSetConverter", 0, $r74, $r75) >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1)
com.thoughtworks.xstream.core.util.Fields.find : r2 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Field getDeclaredField(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1)
com.thoughtworks.xstream.core.util.Fields.find : virtualinvoke r2.<java.lang.reflect.Field: void setAccessible(boolean)>(1) >>>>>>>> com.thoughtworks.xstream.core.util.Fields.find : return r2
com.thoughtworks.xstream.core.util.Fields.find : return r2 >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumSetConverter.canConvert : $r2 = class "java/util/EnumSet"
com.thoughtworks.xstream.converters.enums.EnumSetConverter.canConvert : $r2 = class "java/util/EnumSet" >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumSetConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.enums.EnumSetConverter.canConvert : $z0 = virtualinvoke $r2.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumSetConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.enums.EnumSetConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r77 = newarray (java.lang.Class)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r77 = newarray (java.lang.Class)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r77[0] = class "com/thoughtworks/xstream/mapper/Mapper"
com.thoughtworks.xstream.XStream.setupConverters : $r77[0] = class "com/thoughtworks/xstream/mapper/Mapper" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r78 = newarray (java.lang.Object)[1]
com.thoughtworks.xstream.XStream.setupConverters : $r78 = newarray (java.lang.Object)[1] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r79 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r79 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r78[0] = $r79
com.thoughtworks.xstream.XStream.setupConverters : $r78[0] = $r79 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.enums.EnumMapConverter", 0, $r77, $r78)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.enums.EnumMapConverter", 0, $r77, $r78) >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumMapConverter.canConvert : if r1 != class "java/util/EnumMap"
com.thoughtworks.xstream.converters.enums.EnumMapConverter.canConvert : if r1 != class "java/util/EnumMap" >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumMapConverter.canConvert : $z0 = 0
com.thoughtworks.xstream.converters.enums.EnumMapConverter.canConvert : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.converters.enums.EnumMapConverter.canConvert : return $z0
com.thoughtworks.xstream.converters.enums.EnumMapConverter.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r80 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupConverters : $r80 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r81 = virtualinvoke $r80.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("net.sf.cglib.proxy.Enhancer")
com.thoughtworks.xstream.XStream.setupConverters : $r81 = virtualinvoke $r80.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("net.sf.cglib.proxy.Enhancer") >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : if $r81 == null
com.thoughtworks.xstream.XStream.setupConverters : if $r81 == null >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r82 = newarray (java.lang.Class)[2]
com.thoughtworks.xstream.XStream.setupConverters : $r82 = newarray (java.lang.Class)[2] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r82[0] = class "com/thoughtworks/xstream/mapper/Mapper"
com.thoughtworks.xstream.XStream.setupConverters : $r82[0] = class "com/thoughtworks/xstream/mapper/Mapper" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r82[1] = class "com/thoughtworks/xstream/converters/reflection/ReflectionProvider"
com.thoughtworks.xstream.XStream.setupConverters : $r82[1] = class "com/thoughtworks/xstream/converters/reflection/ReflectionProvider" >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r83 = newarray (java.lang.Object)[2]
com.thoughtworks.xstream.XStream.setupConverters : $r83 = newarray (java.lang.Object)[2] >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r84 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.setupConverters : $r84 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r83[0] = $r84
com.thoughtworks.xstream.XStream.setupConverters : $r83[0] = $r84 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r85 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.XStream.setupConverters : $r85 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r83[1] = $r85
com.thoughtworks.xstream.XStream.setupConverters : $r83[1] = $r85 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter", 0, $r82, $r83)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke r0.<com.thoughtworks.xstream.XStream: void dynamicallyRegisterConverter(java.lang.String,int,java.lang.Class[],java.lang.Object[])>("com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter", 0, $r82, $r83) >>>>>>>> com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : $z0 = staticinvoke <net.sf.cglib.proxy.Enhancer: boolean isEnhanced(java.lang.Class)>(r1)
com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : $z0 = staticinvoke <net.sf.cglib.proxy.Enhancer: boolean isEnhanced(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : if $z0 == 0
com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : if r1 != class "com/thoughtworks/xstream/mapper/CGLIBMapper$Marker"
com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : if r1 != class "com/thoughtworks/xstream/mapper/CGLIBMapper$Marker" >>>>>>>> com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : $z1 = 0
com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : $z1 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : return $z1
com.thoughtworks.xstream.converters.reflection.CGLIBEnhancedConverter.canConvert : return $z1 >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : $r86 = new com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker
com.thoughtworks.xstream.XStream.setupConverters : $r86 = new com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r86.<com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker: void <init>(com.thoughtworks.xstream.converters.Converter,java.lang.Object)>(r2, r0)
com.thoughtworks.xstream.XStream.setupConverters : specialinvoke $r86.<com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker: void <init>(com.thoughtworks.xstream.converters.Converter,java.lang.Object)>(r2, r0) >>>>>>>> com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r86, 0)
com.thoughtworks.xstream.XStream.setupConverters : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void registerConverter(com.thoughtworks.xstream.converters.Converter,int)>($r86, 0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : $r2 = r0.<com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker: java.lang.Object self>
com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : $r2 = r0.<com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker: java.lang.Object self> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : $r3 = virtualinvoke $r2.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : if r1 != $r3
com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : if r1 != $r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : $z0 = 0
com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : return $z0
com.thoughtworks.xstream.converters.reflection.SelfStreamingInstanceChecker.canConvert : return $z0 >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : if $r3 != null
com.thoughtworks.xstream.XStream.setupImmutableTypes : if $r3 != null >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r1 = <java.lang.Boolean: java.lang.Class TYPE>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r1 = <java.lang.Boolean: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r1)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r1) >>>>>>>> com.thoughtworks.xstream.XStream.addImmutableType : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper>
com.thoughtworks.xstream.XStream.addImmutableType : $r3 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper> >>>>>>>> com.thoughtworks.xstream.XStream.addImmutableType : if $r3 != null
com.thoughtworks.xstream.XStream.addImmutableType : if $r3 != null >>>>>>>> com.thoughtworks.xstream.XStream.addImmutableType : $r11 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper>
com.thoughtworks.xstream.XStream.addImmutableType : $r11 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.ImmutableTypesMapper immutableTypesMapper> >>>>>>>> com.thoughtworks.xstream.XStream.addImmutableType : virtualinvoke $r11.<com.thoughtworks.xstream.mapper.ImmutableTypesMapper: void addImmutableType(java.lang.Class)>(r1)
com.thoughtworks.xstream.XStream.addImmutableType : virtualinvoke $r11.<com.thoughtworks.xstream.mapper.ImmutableTypesMapper: void addImmutableType(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ImmutableTypesMapper.addImmutableType : $r2 = r0.<com.thoughtworks.xstream.mapper.ImmutableTypesMapper: java.util.Set immutableTypes>
com.thoughtworks.xstream.mapper.ImmutableTypesMapper.addImmutableType : $r2 = r0.<com.thoughtworks.xstream.mapper.ImmutableTypesMapper: java.util.Set immutableTypes> >>>>>>>> com.thoughtworks.xstream.mapper.ImmutableTypesMapper.addImmutableType : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.ImmutableTypesMapper.addImmutableType : interfaceinvoke $r2.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Boolean")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Boolean") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r4 = <java.lang.Byte: java.lang.Class TYPE>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r4 = <java.lang.Byte: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r4)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r4) >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Byte")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Byte") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r5 = <java.lang.Character: java.lang.Class TYPE>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r5 = <java.lang.Character: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r5)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r5) >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Character")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Character") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r6 = <java.lang.Double: java.lang.Class TYPE>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r6 = <java.lang.Double: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r6)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r6) >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Double")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Double") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r7 = <java.lang.Float: java.lang.Class TYPE>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r7 = <java.lang.Float: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r7)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r7) >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Float")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Float") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r8 = <java.lang.Integer: java.lang.Class TYPE>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r8 = <java.lang.Integer: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r8)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r8) >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Integer")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Integer") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r9 = <java.lang.Long: java.lang.Class TYPE>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r9 = <java.lang.Long: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r9)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r9) >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Long")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Long") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r10 = <java.lang.Short: java.lang.Class TYPE>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r10 = <java.lang.Short: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r10)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>($r10) >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Short")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Short") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/Mapper$Null")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "com/thoughtworks/xstream/mapper/Mapper$Null") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/math/BigDecimal")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/math/BigDecimal") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/math/BigInteger")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/math/BigInteger") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/String")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/String") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/net/URL")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/net/URL") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/io/File")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/io/File") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Class")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/lang/Class") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/awt/font/TextAttribute")
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(class "java/awt/font/TextAttribute") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>()
com.thoughtworks.xstream.XStream.setupImmutableTypes : $z0 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean is14()>() >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : if $z0 == 0
com.thoughtworks.xstream.XStream.setupImmutableTypes : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : $r11 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm>
com.thoughtworks.xstream.XStream.setupImmutableTypes : $r11 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.JVM jvm> >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : r2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("com.thoughtworks.xstream.converters.extended.CharsetConverter")
com.thoughtworks.xstream.XStream.setupImmutableTypes : r2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.JVM: java.lang.Class loadClass(java.lang.String)>("com.thoughtworks.xstream.converters.extended.CharsetConverter") >>>>>>>> com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(r2)
com.thoughtworks.xstream.XStream.setupImmutableTypes : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void addImmutableType(java.lang.Class)>(r2) >>>>>>>> com.thoughtworks.xstream.XStream.setMode : tableswitch(i0) {     case 1001:
com.thoughtworks.xstream.XStream.setMode : tableswitch(i0) {     case 1001: >>>>>>>> com.thoughtworks.xstream.XStream.setMode : $r3 = new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy
com.thoughtworks.xstream.XStream.setMode : $r3 = new com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy >>>>>>>> com.thoughtworks.xstream.XStream.setMode : $i1 = <com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int RELATIVE>
com.thoughtworks.xstream.XStream.setMode : $i1 = <com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int RELATIVE> >>>>>>>> com.thoughtworks.xstream.XStream.setMode : specialinvoke $r3.<com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: void <init>(int)>($i1)
com.thoughtworks.xstream.XStream.setMode : specialinvoke $r3.<com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: void <init>(int)>($i1) >>>>>>>> com.thoughtworks.xstream.XStream.setMode : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void setMarshallingStrategy(com.thoughtworks.xstream.MarshallingStrategy)>($r3)
com.thoughtworks.xstream.XStream.setMode : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void setMarshallingStrategy(com.thoughtworks.xstream.MarshallingStrategy)>($r3) >>>>>>>> com.thoughtworks.xstream.XStream.setMarshallingStrategy : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.MarshallingStrategy marshallingStrategy> = r1
com.thoughtworks.xstream.XStream.setMarshallingStrategy : r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.MarshallingStrategy marshallingStrategy> = r1 >>>>>>>> com.thoughtworks.xstream.XStream.setMode : goto [?= return]
com.thoughtworks.xstream.XStream.setMode : goto [?= return] >>>>>>>> com.thoughtworks.xstream.XStream.aliasField : $r5 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.FieldAliasingMapper fieldAliasingMapper>
com.thoughtworks.xstream.XStream.aliasField : $r5 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.FieldAliasingMapper fieldAliasingMapper> >>>>>>>> com.thoughtworks.xstream.XStream.aliasField : if $r5 != null
com.thoughtworks.xstream.XStream.aliasField : if $r5 != null >>>>>>>> com.thoughtworks.xstream.XStream.aliasField : $r13 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.FieldAliasingMapper fieldAliasingMapper>
com.thoughtworks.xstream.XStream.aliasField : $r13 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.FieldAliasingMapper fieldAliasingMapper> >>>>>>>> com.thoughtworks.xstream.XStream.aliasField : virtualinvoke $r13.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: void addFieldAlias(java.lang.String,java.lang.Class,java.lang.String)>(r1, r2, r3)
com.thoughtworks.xstream.XStream.aliasField : virtualinvoke $r13.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: void addFieldAlias(java.lang.String,java.lang.Class,java.lang.String)>(r1, r2, r3) >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.addFieldAlias : $r4 = r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.util.Map fieldToAliasMap>
com.thoughtworks.xstream.mapper.FieldAliasingMapper.addFieldAlias : $r4 = r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.util.Map fieldToAliasMap> >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.addFieldAlias : $r5 = specialinvoke r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.lang.Object key(java.lang.Class,java.lang.String)>(r2, r3)
com.thoughtworks.xstream.mapper.FieldAliasingMapper.addFieldAlias : $r5 = specialinvoke r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.lang.Object key(java.lang.Class,java.lang.String)>(r2, r3) >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.key : $r3 = new java.lang.StringBuilder
com.thoughtworks.xstream.mapper.FieldAliasingMapper.key : $r3 = new java.lang.StringBuilder >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.key : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>()
com.thoughtworks.xstream.mapper.FieldAliasingMapper.key : specialinvoke $r3.<java.lang.StringBuilder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.key : $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.mapper.FieldAliasingMapper.key : $r4 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.key : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4)
com.thoughtworks.xstream.mapper.FieldAliasingMapper.key : $r5 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r4) >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.key : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46)
com.thoughtworks.xstream.mapper.FieldAliasingMapper.key : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>(46) >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.key : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
com.thoughtworks.xstream.mapper.FieldAliasingMapper.key : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.key : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>()
com.thoughtworks.xstream.mapper.FieldAliasingMapper.key : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.key : return $r8
com.thoughtworks.xstream.mapper.FieldAliasingMapper.key : return $r8 >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.addFieldAlias : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1)
com.thoughtworks.xstream.mapper.FieldAliasingMapper.addFieldAlias : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r5, r1) >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.addFieldAlias : $r7 = r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.util.Map aliasToFieldMap>
com.thoughtworks.xstream.mapper.FieldAliasingMapper.addFieldAlias : $r7 = r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.util.Map aliasToFieldMap> >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.addFieldAlias : $r8 = specialinvoke r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.lang.Object key(java.lang.Class,java.lang.String)>(r2, r1)
com.thoughtworks.xstream.mapper.FieldAliasingMapper.addFieldAlias : $r8 = specialinvoke r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.lang.Object key(java.lang.Class,java.lang.String)>(r2, r1) >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.addFieldAlias : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r3)
com.thoughtworks.xstream.mapper.FieldAliasingMapper.addFieldAlias : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r8, r3) >>>>>>>> com.thoughtworks.xstream.XStream.toXML : $r2 = new java.io.StringWriter
com.thoughtworks.xstream.XStream.toXML : $r2 = new java.io.StringWriter >>>>>>>> com.thoughtworks.xstream.XStream.toXML : specialinvoke $r2.<java.io.StringWriter: void <init>()>()
com.thoughtworks.xstream.XStream.toXML : specialinvoke $r2.<java.io.StringWriter: void <init>()>() >>>>>>>> com.thoughtworks.xstream.XStream.toXML : r3 = $r2
com.thoughtworks.xstream.XStream.toXML : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.XStream.toXML : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void toXML(java.lang.Object,java.io.Writer)>(r1, r3)
com.thoughtworks.xstream.XStream.toXML : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void toXML(java.lang.Object,java.io.Writer)>(r1, r3) >>>>>>>> com.thoughtworks.xstream.XStream.toXML : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.io.HierarchicalStreamDriver hierarchicalStreamDriver>
com.thoughtworks.xstream.XStream.toXML : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.io.HierarchicalStreamDriver hierarchicalStreamDriver> >>>>>>>> com.thoughtworks.xstream.XStream.toXML : r3 = interfaceinvoke $r4.<com.thoughtworks.xstream.io.HierarchicalStreamDriver: com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.Writer)>(r2)
com.thoughtworks.xstream.XStream.toXML : r3 = interfaceinvoke $r4.<com.thoughtworks.xstream.io.HierarchicalStreamDriver: com.thoughtworks.xstream.io.HierarchicalStreamWriter createWriter(java.io.Writer)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.createWriter : $r2 = new com.thoughtworks.xstream.io.xml.PrettyPrintWriter
com.thoughtworks.xstream.io.xml.XppDriver.createWriter : $r2 = new com.thoughtworks.xstream.io.xml.PrettyPrintWriter >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.createWriter : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer xmlFriendlyReplacer()>()
com.thoughtworks.xstream.io.xml.XppDriver.createWriter : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer xmlFriendlyReplacer()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : return $r1
com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.createWriter : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void <init>(java.io.Writer,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)>(r1, $r3)
com.thoughtworks.xstream.io.xml.XppDriver.createWriter : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void <init>(java.io.Writer,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)>(r1, $r3) >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.createWriter : return $r2
com.thoughtworks.xstream.io.xml.XppDriver.createWriter : return $r2 >>>>>>>> com.thoughtworks.xstream.XStream.toXML : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)>(r1, r3)
com.thoughtworks.xstream.XStream.toXML : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter)>(r1, r3) >>>>>>>> com.thoughtworks.xstream.XStream.marshal : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.DataHolder)>(r1, r2, null)
com.thoughtworks.xstream.XStream.marshal : virtualinvoke r0.<com.thoughtworks.xstream.XStream: void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.DataHolder)>(r1, r2, null) >>>>>>>> com.thoughtworks.xstream.XStream.marshal : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.MarshallingStrategy marshallingStrategy>
com.thoughtworks.xstream.XStream.marshal : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.MarshallingStrategy marshallingStrategy> >>>>>>>> com.thoughtworks.xstream.XStream.marshal : $r5 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup>
com.thoughtworks.xstream.XStream.marshal : $r5 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup> >>>>>>>> com.thoughtworks.xstream.XStream.marshal : $r6 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.marshal : $r6 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.marshal : interfaceinvoke $r4.<com.thoughtworks.xstream.MarshallingStrategy: void marshal(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.Object,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.DataHolder)>(r2, r1, $r5, $r6, r3)
com.thoughtworks.xstream.XStream.marshal : interfaceinvoke $r4.<com.thoughtworks.xstream.MarshallingStrategy: void marshal(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.Object,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper,com.thoughtworks.xstream.converters.DataHolder)>(r2, r1, $r5, $r6, r3) >>>>>>>> com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.marshal : $r6 = new com.thoughtworks.xstream.core.ReferenceByXPathMarshaller
com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.marshal : $r6 = new com.thoughtworks.xstream.core.ReferenceByXPathMarshaller >>>>>>>> com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.marshal : $i0 = r0.<com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int mode>
com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.marshal : $i0 = r0.<com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy: int mode> >>>>>>>> com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.marshal : specialinvoke $r6.<com.thoughtworks.xstream.core.ReferenceByXPathMarshaller: void <init>(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper,int)>(r1, r3, r4, $i0)
com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.marshal : specialinvoke $r6.<com.thoughtworks.xstream.core.ReferenceByXPathMarshaller: void <init>(com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper,int)>(r1, r3, r4, $i0) >>>>>>>> com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.marshal : virtualinvoke $r6.<com.thoughtworks.xstream.core.ReferenceByXPathMarshaller: void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)>(r2, r5)
com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.marshal : virtualinvoke $r6.<com.thoughtworks.xstream.core.ReferenceByXPathMarshaller: void start(java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)>(r2, r5) >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = r2
com.thoughtworks.xstream.core.TreeMarshaller.start : r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = r2 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : if r1 != null
com.thoughtworks.xstream.core.TreeMarshaller.start : if r1 != null >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : $r7 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.io.HierarchicalStreamWriter writer>
com.thoughtworks.xstream.core.TreeMarshaller.start : $r7 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.io.HierarchicalStreamWriter writer> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : $r8 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.core.TreeMarshaller.start : $r8 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.core.TreeMarshaller.start : $r9 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : $r10 = interfaceinvoke $r8.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedClass(java.lang.Class)>($r9)
com.thoughtworks.xstream.core.TreeMarshaller.start : $r10 = interfaceinvoke $r8.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedClass(java.lang.Class)>($r9) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedClass(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedClass(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.serializedClass : $r3 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map implToType>
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.serializedClass : $r3 = r0.<com.thoughtworks.xstream.mapper.DefaultImplementationsMapper: java.util.Map implToType> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.serializedClass : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.serializedClass : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.serializedClass : r2 = (java.lang.Class) $r4
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.serializedClass : r2 = (java.lang.Class) $r4 >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.serializedClass : if r2 != null
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.serializedClass : if r2 != null >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.serializedClass : $r5 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String serializedClass(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.serializedClass : $r5 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String serializedClass(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : r3 = $r2
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>()
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $z0 = virtualinvoke r1.<java.lang.Class: boolean isArray()>() >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : if $z0 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.ArrayMapper: java.lang.String boxedTypeName(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.ArrayMapper: java.lang.String boxedTypeName(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : $r2 = <com.thoughtworks.xstream.mapper.ArrayMapper: java.util.Collection BOXED_TYPES>
com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : $r2 = <com.thoughtworks.xstream.mapper.ArrayMapper: java.util.Collection BOXED_TYPES> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : $z0 = interfaceinvoke $r2.<java.util.Collection: boolean contains(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : if $z0 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : $r3 = null
com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : $r3 = null >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : return $r3
com.thoughtworks.xstream.mapper.ArrayMapper.boxedTypeName : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : if r4 != null
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : if r4 != null >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String serializedClass(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String serializedClass(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : $z0 = <com.thoughtworks.xstream.mapper.EnumMapper: boolean active>
com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : $z0 = <com.thoughtworks.xstream.mapper.EnumMapper: boolean active> >>>>>>>> com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : if $z0 != 0
com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : $r3 = <com.thoughtworks.xstream.mapper.EnumMapper: java.lang.Class enumClass>
com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : $r3 = <com.thoughtworks.xstream.mapper.EnumMapper: java.lang.Class enumClass> >>>>>>>> com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : $z1 = virtualinvoke $r3.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : if $z1 == 0
com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : $r8 = <com.thoughtworks.xstream.mapper.EnumMapper: java.lang.Class enumSetClass>
com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : $r8 = <com.thoughtworks.xstream.mapper.EnumMapper: java.lang.Class enumSetClass> >>>>>>>> com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : $z2 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : $z2 = virtualinvoke $r8.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : if $z2 == 0
com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : $r11 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String serializedClass(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : $r11 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String serializedClass(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.DynamicProxyMapper.serializedClass : $z0 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.DynamicProxyMapper.serializedClass : $z0 = staticinvoke <java.lang.reflect.Proxy: boolean isProxyClass(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.DynamicProxyMapper.serializedClass : if $z0 == 0
com.thoughtworks.xstream.mapper.DynamicProxyMapper.serializedClass : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.DynamicProxyMapper.serializedClass : $r3 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String serializedClass(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.DynamicProxyMapper.serializedClass : $r3 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String serializedClass(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.serializedClass : $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.mapper.CGLIBMapper.serializedClass : $r3 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.serializedClass : $r2 = <com.thoughtworks.xstream.mapper.CGLIBMapper: java.lang.String DEFAULT_NAMING_MARKER>
com.thoughtworks.xstream.mapper.CGLIBMapper.serializedClass : $r2 = <com.thoughtworks.xstream.mapper.CGLIBMapper: java.lang.String DEFAULT_NAMING_MARKER> >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.serializedClass : $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>($r2)
com.thoughtworks.xstream.mapper.CGLIBMapper.serializedClass : $i0 = virtualinvoke $r3.<java.lang.String: int indexOf(java.lang.String)>($r2) >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.serializedClass : if $i0 <= 0
com.thoughtworks.xstream.mapper.CGLIBMapper.serializedClass : if $i0 <= 0 >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.serializedClass : $r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String serializedClass(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.CGLIBMapper.serializedClass : $r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String serializedClass(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.serializedClass : $r5 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map classToName>
com.thoughtworks.xstream.mapper.ClassAliasingMapper.serializedClass : $r5 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map classToName> >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.serializedClass : $r6 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.mapper.ClassAliasingMapper.serializedClass : $r6 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.serializedClass : $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6)
com.thoughtworks.xstream.mapper.ClassAliasingMapper.serializedClass : $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6) >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.serializedClass : r2 = (java.lang.String) $r7
com.thoughtworks.xstream.mapper.ClassAliasingMapper.serializedClass : r2 = (java.lang.String) $r7 >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.serializedClass : if r2 == null
com.thoughtworks.xstream.mapper.ClassAliasingMapper.serializedClass : if r2 == null >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.serializedClass : return r2
com.thoughtworks.xstream.mapper.ClassAliasingMapper.serializedClass : return r2 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : return $r3
com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.serializedClass : return $r4
com.thoughtworks.xstream.mapper.CGLIBMapper.serializedClass : return $r4 >>>>>>>> com.thoughtworks.xstream.mapper.DynamicProxyMapper.serializedClass : return $r3
com.thoughtworks.xstream.mapper.DynamicProxyMapper.serializedClass : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : return $r11
com.thoughtworks.xstream.mapper.EnumMapper.serializedClass : return $r11 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $i0 = virtualinvoke r3.<java.lang.StringBuffer: int length()>()
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : $i0 = virtualinvoke r3.<java.lang.StringBuffer: int length()>() >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : if $i0 <= 0
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : if $i0 <= 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : return r4
com.thoughtworks.xstream.mapper.ArrayMapper.serializedClass : return r4 >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.serializedClass : goto [?= return $r5]
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.serializedClass : goto [?= return $r5] >>>>>>>> com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.serializedClass : return $r5
com.thoughtworks.xstream.mapper.DefaultImplementationsMapper.serializedClass : return $r5 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : $r11 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.core.TreeMarshaller.start : $r11 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : staticinvoke <com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper: void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)>($r7, $r10, $r11)
com.thoughtworks.xstream.core.TreeMarshaller.start : staticinvoke <com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper: void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)>($r7, $r10, $r11) >>>>>>>> com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : $z0 = r0 instanceof com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriter
com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : $z0 = r0 instanceof com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriter >>>>>>>> com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : if $z0 == 0
com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : $r3 = (com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriter) r0
com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : $r3 = (com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriter) r0 >>>>>>>> com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : interfaceinvoke $r3.<com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriter: void startNode(java.lang.String,java.lang.Class)>(r1, r2)
com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : interfaceinvoke $r3.<com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriter: void startNode(java.lang.String,java.lang.Class)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.path.PathTrackingWriter: com.thoughtworks.xstream.io.path.PathTracker pathTracker>
com.thoughtworks.xstream.io.path.PathTrackingWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.path.PathTrackingWriter: com.thoughtworks.xstream.io.path.PathTracker pathTracker> >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingWriter.startNode : virtualinvoke $r3.<com.thoughtworks.xstream.io.path.PathTracker: void pushElement(java.lang.String)>(r1)
com.thoughtworks.xstream.io.path.PathTrackingWriter.startNode : virtualinvoke $r3.<com.thoughtworks.xstream.io.path.PathTracker: void pushElement(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i0 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i0 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i1 = $i0 + 1
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i1 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i2 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int capacity>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i2 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int capacity> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : if $i1 < $i2
com.thoughtworks.xstream.io.path.PathTracker.pushElement : if $i1 < $i2 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r3 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.lang.String[] pathStack>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r3 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.lang.String[] pathStack> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i5 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i5 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r3[$i5] = r1
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r3[$i5] = r1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.util.Map[] indexMapStack>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.util.Map[] indexMapStack> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i6 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i6 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : r2 = $r4[$i6]
com.thoughtworks.xstream.io.path.PathTracker.pushElement : r2 = $r4[$i6] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : if r2 != null
com.thoughtworks.xstream.io.path.PathTracker.pushElement : if r2 != null >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r5 = new java.util.HashMap
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r5 = new java.util.HashMap >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : specialinvoke $r5.<java.util.HashMap: void <init>()>()
com.thoughtworks.xstream.io.path.PathTracker.pushElement : specialinvoke $r5.<java.util.HashMap: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : r2 = $r5
com.thoughtworks.xstream.io.path.PathTracker.pushElement : r2 = $r5 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r6 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.util.Map[] indexMapStack>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r6 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.util.Map[] indexMapStack> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i7 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i7 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r6[$i7] = r2
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r6[$i7] = r2 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : if $z0 == 0
com.thoughtworks.xstream.io.path.PathTracker.pushElement : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r11 = new java.lang.Integer
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r11 = new java.lang.Integer >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : specialinvoke $r11.<java.lang.Integer: void <init>(int)>(1)
com.thoughtworks.xstream.io.path.PathTracker.pushElement : specialinvoke $r11.<java.lang.Integer: void <init>(int)>(1) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r11)
com.thoughtworks.xstream.io.path.PathTracker.pushElement : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r11) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i10 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i10 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i11 = $i10 + 1
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i11 = $i10 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> = $i11
com.thoughtworks.xstream.io.path.PathTracker.pushElement : r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> = $i11 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> = null
com.thoughtworks.xstream.io.path.PathTracker.pushElement : r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> = null >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.WriterWrapper: void startNode(java.lang.String,java.lang.Class)>(r1, r2)
com.thoughtworks.xstream.io.path.PathTrackingWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.WriterWrapper: void startNode(java.lang.String,java.lang.Class)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.io.WriterWrapper.startNode : $r3 = r0.<com.thoughtworks.xstream.io.WriterWrapper: com.thoughtworks.xstream.io.HierarchicalStreamWriter wrapped>
com.thoughtworks.xstream.io.WriterWrapper.startNode : $r3 = r0.<com.thoughtworks.xstream.io.WriterWrapper: com.thoughtworks.xstream.io.HierarchicalStreamWriter wrapped> >>>>>>>> com.thoughtworks.xstream.io.WriterWrapper.startNode : $r4 = (com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriter) $r3
com.thoughtworks.xstream.io.WriterWrapper.startNode : $r4 = (com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriter) $r3 >>>>>>>> com.thoughtworks.xstream.io.WriterWrapper.startNode : interfaceinvoke $r4.<com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriter: void startNode(java.lang.String,java.lang.Class)>(r1, r2)
com.thoughtworks.xstream.io.WriterWrapper.startNode : interfaceinvoke $r4.<com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriter: void startNode(java.lang.String,java.lang.Class)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void startNode(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void startNode(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: java.lang.String escapeXmlName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: java.lang.String escapeXmlName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z0 == 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z1 == 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(60)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(60) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = $i2 + 1
com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i4 = lengthof $r1
com.thoughtworks.xstream.core.util.QuickWriter.write : $i4 = lengthof $r1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : if $i3 < $i4
com.thoughtworks.xstream.core.util.QuickWriter.write : if $i3 < $i4 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = $i1 + 1
com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i5
com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i5 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r2[$i1] = c0
com.thoughtworks.xstream.core.util.QuickWriter.write : $r2[$i1] = c0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>(r2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>(r2) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = $i1 + i0
com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = $i1 + i0 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : if $i2 < $i3
com.thoughtworks.xstream.core.util.QuickWriter.write : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r5, $i5)
com.thoughtworks.xstream.core.util.QuickWriter.write : virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r5, $i5) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i6 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i6 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i7 = $i6 + i0
com.thoughtworks.xstream.core.util.QuickWriter.write : $i7 = $i6 + i0 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i7
com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i7 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r5 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r5 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i1 = $i0 + 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i1 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 1 >>>>>>>> com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : goto [?= return]
com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper.startNode : goto [?= return] >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : virtualinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void convertAnother(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.TreeMarshaller.start : virtualinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void convertAnother(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.convertAnother : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.ConverterLookup converterLookup>
com.thoughtworks.xstream.core.TreeMarshaller.convertAnother : $r3 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.converters.ConverterLookup converterLookup> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.convertAnother : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.core.TreeMarshaller.convertAnother : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.convertAnother : r2 = interfaceinvoke $r3.<com.thoughtworks.xstream.converters.ConverterLookup: com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)>($r4)
com.thoughtworks.xstream.core.TreeMarshaller.convertAnother : r2 = interfaceinvoke $r3.<com.thoughtworks.xstream.converters.ConverterLookup: com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)>($r4) >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : goto [?= $z0 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $r3 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker serializationMethodInvoker>
com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $r3 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker serializationMethodInvoker> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $z1 = virtualinvoke $r3.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: boolean supportsReadObject(java.lang.Class,boolean)>(r1, 1)
com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $z1 = virtualinvoke $r3.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: boolean supportsReadObject(java.lang.Class,boolean)>(r1, 1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsReadObject : $r2 = newarray (java.lang.Class)[1]
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsReadObject : $r2 = newarray (java.lang.Class)[1] >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsReadObject : $r2[0] = class "java/io/ObjectInputStream"
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsReadObject : $r2[0] = class "java/io/ObjectInputStream" >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsReadObject : $r3 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[],boolean)>(r1, "readObject", $r2, z0)
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsReadObject : $r3 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[],boolean)>(r1, "readObject", $r2, z0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r4 = new java.lang.StringBuilder
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r4 = new java.lang.StringBuilder >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>()
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : specialinvoke $r4.<java.lang.StringBuilder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r7 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r7 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7)
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r8 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r7) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".")
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r10 = virtualinvoke $r9.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".")
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r11 = virtualinvoke $r10.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(".") >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0)
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r12 = virtualinvoke $r11.<java.lang.StringBuilder: java.lang.StringBuilder append(boolean)>(z0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>()
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : r5 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r13 = r0.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.util.Map cache>
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r13 = r0.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.util.Map cache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $z1 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>(r5)
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $z1 = interfaceinvoke $r13.<java.util.Map: boolean containsKey(java.lang.Object)>(r5) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : if $z1 == 0
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : if z0 == 0
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : if z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : if r1 == null
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : if r1 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : r19 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r2, r3)
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : r19 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>(r2, r3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : r24 = $r23
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : r24 = $r23 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>()
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : goto [?= (branch)]
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r25 = r0.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.util.Map cache>
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r25 = r0.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.util.Map cache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r26 = <com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.Object NO_METHOD>
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r26 = <com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.Object NO_METHOD> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r26)
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : interfaceinvoke $r25.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, $r26) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : return null
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : return null >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsReadObject : if $r3 == null
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsReadObject : if $r3 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsReadObject : $z1 = 0
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsReadObject : $z1 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsReadObject : return $z1
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsReadObject : return $z1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : if $z1 != 0
com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $r4 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker serializationMethodInvoker>
com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $r4 = r0.<com.thoughtworks.xstream.converters.reflection.SerializableConverter: com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker serializationMethodInvoker> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $z2 = virtualinvoke $r4.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: boolean supportsWriteObject(java.lang.Class,boolean)>(r1, 1)
com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : $z2 = virtualinvoke $r4.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: boolean supportsWriteObject(java.lang.Class,boolean)>(r1, 1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsWriteObject : $r2 = newarray (java.lang.Class)[1]
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsWriteObject : $r2 = newarray (java.lang.Class)[1] >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsWriteObject : $r2[0] = class "java/io/ObjectOutputStream"
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsWriteObject : $r2[0] = class "java/io/ObjectOutputStream" >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsWriteObject : $r3 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[],boolean)>(r1, "writeObject", $r2, z0)
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsWriteObject : $r3 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[],boolean)>(r1, "writeObject", $r2, z0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsWriteObject : if $r3 == null
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsWriteObject : if $r3 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsWriteObject : $z1 = 0
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsWriteObject : $z1 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsWriteObject : return $z1
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.supportsWriteObject : return $z1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : if $z2 == 0
com.thoughtworks.xstream.converters.reflection.SerializableConverter.isSerializable : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.convertAnother : virtualinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)>(r1, r2)
com.thoughtworks.xstream.core.TreeMarshaller.convertAnother : virtualinvoke r0.<com.thoughtworks.xstream.core.TreeMarshaller: void convert(java.lang.Object,com.thoughtworks.xstream.converters.Converter)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r6 = virtualinvoke r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.mapper.Mapper getMapper()>()
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r6 = virtualinvoke r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.mapper.Mapper getMapper()>() >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.getMapper : $r1 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.core.TreeMarshaller.getMapper : $r1 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.getMapper : return $r1
com.thoughtworks.xstream.core.TreeMarshaller.getMapper : return $r1 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $z0 = interfaceinvoke $r6.<com.thoughtworks.xstream.mapper.Mapper: boolean isImmutableValueType(java.lang.Class)>($r7)
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $z0 = interfaceinvoke $r6.<com.thoughtworks.xstream.mapper.Mapper: boolean isImmutableValueType(java.lang.Class)>($r7) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.isImmutableValueType : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.isImmutableValueType : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.isImmutableValueType : $z0 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: boolean isImmutableValueType(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.MapperWrapper.isImmutableValueType : $z0 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: boolean isImmutableValueType(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : $r2 = r0.<com.thoughtworks.xstream.mapper.ImmutableTypesMapper: java.util.Set immutableTypes>
com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : $r2 = r0.<com.thoughtworks.xstream.mapper.ImmutableTypesMapper: java.util.Set immutableTypes> >>>>>>>> com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : if $z0 == 0
com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : $z1 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: boolean isImmutableValueType(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : $z1 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: boolean isImmutableValueType(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultMapper.isImmutableValueType : return 0
com.thoughtworks.xstream.mapper.DefaultMapper.isImmutableValueType : return 0 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.isImmutableValueType : return $z0
com.thoughtworks.xstream.mapper.MapperWrapper.isImmutableValueType : return $z0 >>>>>>>> com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : return $z1
com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : return $z1 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : if $z0 == 0
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r9 = r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.io.path.PathTracker pathTracker>
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r9 = r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.io.path.PathTracker pathTracker> >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : r3 = virtualinvoke $r9.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path getPath()>()
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : r3 = virtualinvoke $r9.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path getPath()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : if $r4 != null
com.thoughtworks.xstream.io.path.PathTracker.getPath : if $r4 != null >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i2 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i2 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i3 = $i2 + 1
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r1 = newarray (java.lang.String)[$i3]
com.thoughtworks.xstream.io.path.PathTracker.getPath : r1 = newarray (java.lang.String)[$i3] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r1[0] = ""
com.thoughtworks.xstream.io.path.PathTracker.getPath : r1[0] = "" >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : i0 = 0
com.thoughtworks.xstream.io.path.PathTracker.getPath : i0 = 0 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : if i0 >= $i4
com.thoughtworks.xstream.io.path.PathTracker.getPath : if i0 >= $i4 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r5 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.util.Map[] indexMapStack>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r5 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.util.Map[] indexMapStack> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r6 = $r5[i0]
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r6 = $r5[i0] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r7 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.lang.String[] pathStack>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r7 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.lang.String[] pathStack> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r8 = $r7[i0]
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r8 = $r7[i0] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r9 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8)
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r9 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r2 = (java.lang.Integer) $r9
com.thoughtworks.xstream.io.path.PathTracker.getPath : r2 = (java.lang.Integer) $r9 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>()
com.thoughtworks.xstream.io.path.PathTracker.getPath : i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : if i1 <= 1
com.thoughtworks.xstream.io.path.PathTracker.getPath : if i1 <= 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i8 = i0 + 1
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i8 = i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r20 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.lang.String[] pathStack>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r20 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.lang.String[] pathStack> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r21 = $r20[i0]
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r21 = $r20[i0] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r1[$i8] = $r21
com.thoughtworks.xstream.io.path.PathTracker.getPath : r1[$i8] = $r21 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : i0 = i0 + 1
com.thoughtworks.xstream.io.path.PathTracker.getPath : i0 = i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : goto [?= $i4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>]
com.thoughtworks.xstream.io.path.PathTracker.getPath : goto [?= $i4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r22 = new com.thoughtworks.xstream.io.path.Path
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r22 = new com.thoughtworks.xstream.io.path.Path >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : specialinvoke $r22.<com.thoughtworks.xstream.io.path.Path: void <init>(java.lang.String[])>(r1)
com.thoughtworks.xstream.io.path.PathTracker.getPath : specialinvoke $r22.<com.thoughtworks.xstream.io.path.Path: void <init>(java.lang.String[])>(r1) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> = $r22
com.thoughtworks.xstream.io.path.PathTracker.getPath : r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> = $r22 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r23 = r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r23 = r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : return $r23
com.thoughtworks.xstream.io.path.PathTracker.getPath : return $r23 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r10 = r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.core.util.ObjectIdDictionary references>
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r10 = r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.core.util.ObjectIdDictionary references> >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : r4 = virtualinvoke $r10.<com.thoughtworks.xstream.core.util.ObjectIdDictionary: java.lang.Object lookupId(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : r4 = virtualinvoke $r10.<com.thoughtworks.xstream.core.util.ObjectIdDictionary: java.lang.Object lookupId(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.lookupId : $r3 = r0.<com.thoughtworks.xstream.core.util.ObjectIdDictionary: java.util.Map map>
com.thoughtworks.xstream.core.util.ObjectIdDictionary.lookupId : $r3 = r0.<com.thoughtworks.xstream.core.util.ObjectIdDictionary: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.lookupId : $r2 = new com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper
com.thoughtworks.xstream.core.util.ObjectIdDictionary.lookupId : $r2 = new com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.lookupId : specialinvoke $r2.<com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper: void <init>(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.util.ObjectIdDictionary.lookupId : specialinvoke $r2.<com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper: void <init>(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.lookupId : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2)
com.thoughtworks.xstream.core.util.ObjectIdDictionary.lookupId : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.lookupId : return $r4
com.thoughtworks.xstream.core.util.ObjectIdDictionary.lookupId : return $r4 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : if r4 == null
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : if r4 == null >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : r5 = virtualinvoke r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: java.lang.Object createReferenceKey(com.thoughtworks.xstream.io.path.Path)>(r3)
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : r5 = virtualinvoke r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: java.lang.Object createReferenceKey(com.thoughtworks.xstream.io.path.Path)>(r3) >>>>>>>> com.thoughtworks.xstream.core.ReferenceByXPathMarshaller.createReferenceKey : return r1
com.thoughtworks.xstream.core.ReferenceByXPathMarshaller.createReferenceKey : return r1 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r22 = r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.io.path.Path lastPath>
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r22 = r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.io.path.Path lastPath> >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : if $r22 == null
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : if $r22 == null >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : virtualinvoke r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: void fireValidReference(java.lang.Object)>(r5)
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : virtualinvoke r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: void fireValidReference(java.lang.Object)>(r5) >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.io.path.Path lastPath> = r3
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.io.path.Path lastPath> = r3 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : goto [?= $r25 = r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.core.util.ObjectIdDictionary references>]
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : goto [?= $r25 = r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.core.util.ObjectIdDictionary references>] >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r25 = r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.core.util.ObjectIdDictionary references>
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r25 = r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.core.util.ObjectIdDictionary references> >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : virtualinvoke $r25.<com.thoughtworks.xstream.core.util.ObjectIdDictionary: void associateId(java.lang.Object,java.lang.Object)>(r1, r5)
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : virtualinvoke $r25.<com.thoughtworks.xstream.core.util.ObjectIdDictionary: void associateId(java.lang.Object,java.lang.Object)>(r1, r5) >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.associateId : $r4 = r0.<com.thoughtworks.xstream.core.util.ObjectIdDictionary: java.util.Map map>
com.thoughtworks.xstream.core.util.ObjectIdDictionary.associateId : $r4 = r0.<com.thoughtworks.xstream.core.util.ObjectIdDictionary: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.associateId : $r3 = new com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper
com.thoughtworks.xstream.core.util.ObjectIdDictionary.associateId : $r3 = new com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.associateId : specialinvoke $r3.<com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper: void <init>(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.util.ObjectIdDictionary.associateId : specialinvoke $r3.<com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper: void <init>(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary.associateId : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r2)
com.thoughtworks.xstream.core.util.ObjectIdDictionary.associateId : interfaceinvoke $r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r3, r2) >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper.hashCode : $r1 = r0.<com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper: java.lang.Object obj>
com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper.hashCode : $r1 = r0.<com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper: java.lang.Object obj> >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper.hashCode : $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r1)
com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper.hashCode : $i0 = staticinvoke <java.lang.System: int identityHashCode(java.lang.Object)>($r1) >>>>>>>> com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper.hashCode : return $i0
com.thoughtworks.xstream.core.util.ObjectIdDictionary$IdWrapper.hashCode : return $i0 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r26 = r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.io.HierarchicalStreamWriter writer>
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r26 = r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.io.HierarchicalStreamWriter writer> >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : interfaceinvoke r2.<com.thoughtworks.xstream.converters.Converter: void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)>(r1, $r26, r0)
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : interfaceinvoke r2.<com.thoughtworks.xstream.converters.Converter: void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)>(r1, $r26, r0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r5 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker serializationMethodInvoker>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r5 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker serializationMethodInvoker> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : r4 = virtualinvoke $r5.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.Object callWriteReplace(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : r4 = virtualinvoke $r5.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.Object callWriteReplace(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callWriteReplace : if r1 != null
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callWriteReplace : if r1 != null >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callWriteReplace : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callWriteReplace : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callWriteReplace : r2 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[],boolean)>($r4, "writeReplace", null, 1)
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callWriteReplace : r2 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[],boolean)>($r4, "writeReplace", null, 1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callWriteReplace : if r2 == null
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callWriteReplace : if r2 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callWriteReplace : return r1
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callWriteReplace : return r1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r6 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r6 = virtualinvoke r4.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : if $r6 == $r7
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : if $r6 == $r7 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)>(r4, r2, r3)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.marshal : virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: void doMarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)>(r4, r2, r3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : $r4 = new java.util.HashSet
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : $r4 = new java.util.HashSet >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : specialinvoke $r4.<java.util.HashSet: void <init>()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : specialinvoke $r4.<java.util.HashSet: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : r5 = $r4
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : r5 = $r4 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : $r8 = new java.util.HashSet
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : $r8 = new java.util.HashSet >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : specialinvoke $r8.<java.util.HashSet: void <init>()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : specialinvoke $r8.<java.util.HashSet: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : r6 = $r8
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : r6 = $r8 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : $r9 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : $r9 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : $r7 = new com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : $r7 = new com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : specialinvoke $r7.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1: void <init>(com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter,com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.util.Set)>(r0, r2, r6)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : specialinvoke $r7.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1: void <init>(com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter,com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.util.Set)>(r0, r2, r6) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : interfaceinvoke $r9.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)>(r1, $r7)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : interfaceinvoke $r9.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)>(r1, $r7) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r6 = r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: com.thoughtworks.xstream.converters.reflection.FieldDictionary fieldDictionary>
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r6 = r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: com.thoughtworks.xstream.converters.reflection.FieldDictionary fieldDictionary> >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r7 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : r3 = virtualinvoke $r6.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Iterator serializableFieldsFor(java.lang.Class)>($r7)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : r3 = virtualinvoke $r6.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Iterator serializableFieldsFor(java.lang.Class)>($r7) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.serializableFieldsFor : $r2 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)>(r1, 1)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.serializableFieldsFor : $r2 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)>(r1, 1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r9 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r9 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z1 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z1 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z1 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r3 = $r10
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r3 = $r10 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : entermonitor $r10
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : entermonitor $r10 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r11 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r11 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z2 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z2 = interfaceinvoke $r11.<java.util.Map: boolean containsKey(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z2 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z2 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r12 = new java.util.HashMap
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r12 = new java.util.HashMap >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r12.<java.util.HashMap: void <init>()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r12.<java.util.HashMap: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r4 = $r12
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r4 = $r12 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r13 = new com.thoughtworks.xstream.core.util.OrderRetainingMap
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r13 = new com.thoughtworks.xstream.core.util.OrderRetainingMap >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r13.<com.thoughtworks.xstream.core.util.OrderRetainingMap: void <init>()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r13.<com.thoughtworks.xstream.core.util.OrderRetainingMap: void <init>()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r5 = $r13
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r5 = $r13 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r14 = class "java/lang/Object"
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r14 = class "java/lang/Object" >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z3 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z3 = virtualinvoke $r14.<java.lang.Object: boolean equals(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z3 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z3 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r6 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r6 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Field[] getDeclaredFields()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean reverseFieldDefinition()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z4 = staticinvoke <com.thoughtworks.xstream.core.JVM: boolean reverseFieldDefinition()>() >>>>>>>> com.thoughtworks.xstream.core.JVM.reverseFieldDefinition : $z0 = <com.thoughtworks.xstream.core.JVM: boolean reverseFieldOrder>
com.thoughtworks.xstream.core.JVM.reverseFieldDefinition : $z0 = <com.thoughtworks.xstream.core.JVM: boolean reverseFieldOrder> >>>>>>>> com.thoughtworks.xstream.core.JVM.reverseFieldDefinition : return $z0
com.thoughtworks.xstream.core.JVM.reverseFieldDefinition : return $z0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z4 == 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z4 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : i6 = 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : i6 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $i7 = lengthof r6
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $i7 = lengthof r6 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if i6 >= $i7
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if i6 >= $i7 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r16 = r6[i6]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r16 = r6[i6] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : virtualinvoke r16.<java.lang.reflect.Field: void setAccessible(boolean)>(1)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : virtualinvoke r16.<java.lang.reflect.Field: void setAccessible(boolean)>(1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r17 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r17 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z5 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r17)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $z5 = interfaceinvoke r4.<java.util.Map: boolean containsKey(java.lang.Object)>($r17) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z5 != 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if $z5 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r18 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r18 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r16)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke r4.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r18, r16) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r20 = new com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r20 = new com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r21 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r21 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r22 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r22 = virtualinvoke r16.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r20.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: void <init>(java.lang.String,java.lang.Class,int)>($r21, $r22, i6)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : specialinvoke $r20.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: void <init>(java.lang.String,java.lang.Class,int)>($r21, $r22, i6) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r16)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke r5.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r20, r16) >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r3 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.Set keyOrder>
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r3 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.Set keyOrder> >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1)
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : interfaceinvoke $r3.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r4 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.List valueOrder>
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r4 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.List valueOrder> >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2)
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : interfaceinvoke $r4.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r5 = specialinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : $r5 = specialinvoke r0.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r1 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r1 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : if $r1 == null
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : if $r1 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r2 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r2 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.String fieldName> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i1 = virtualinvoke $r2.<java.lang.String: int hashCode()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : goto [?= i0 = $i1]
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : goto [?= i0 = $i1] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : i0 = $i1
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : i0 = $i1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i2 = 29 * i0
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i2 = 29 * i0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r3 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r3 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : if $r3 == null
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : if $r3 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r4 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass>
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $r4 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey: java.lang.Class declaringClass> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : $i3 = virtualinvoke $r4.<java.lang.Object: int hashCode()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : goto [?= i4 = $i2 + $i3]
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : goto [?= i4 = $i2 + $i3] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : i4 = $i2 + $i3
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : i4 = $i2 + $i3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : return i4
com.thoughtworks.xstream.converters.reflection.FieldDictionary$FieldKey.hashCode : return i4 >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.put : return $r5
com.thoughtworks.xstream.core.util.OrderRetainingMap.put : return $r5 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : i6 = i6 + 1
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : i6 = i6 + 1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $i7 = lengthof r6]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $i7 = lengthof r6] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $r14 = class "java/lang/Object"]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $r14 = class "java/lang/Object"] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r24 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r24 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r4)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke $r24.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r26 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r26 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : interfaceinvoke $r26.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, r5) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : exitmonitor r3
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : exitmonitor r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= (branch)]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if z0 == 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : if z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r29 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r29 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldKeyCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r30 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r30 = interfaceinvoke $r29.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $r32 = (java.util.Map) $r30]
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : goto [?= $r32 = (java.util.Map) $r30] >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r32 = (java.util.Map) $r30
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r32 = (java.util.Map) $r30 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r33 = (java.util.Map) $r32
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r33 = (java.util.Map) $r32 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : return $r33
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : return $r33 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.serializableFieldsFor : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.serializableFieldsFor : $r3 = interfaceinvoke $r2.<java.util.Map: java.util.Collection values()>() >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.values : $r1 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.List valueOrder>
com.thoughtworks.xstream.core.util.OrderRetainingMap.values : $r1 = r0.<com.thoughtworks.xstream.core.util.OrderRetainingMap: java.util.List valueOrder> >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.values : $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1)
com.thoughtworks.xstream.core.util.OrderRetainingMap.values : $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1) >>>>>>>> com.thoughtworks.xstream.core.util.OrderRetainingMap.values : return $r2
com.thoughtworks.xstream.core.util.OrderRetainingMap.values : return $r2 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.serializableFieldsFor : $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>()
com.thoughtworks.xstream.converters.reflection.FieldDictionary.serializableFieldsFor : $r4 = interfaceinvoke $r3.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.serializableFieldsFor : return $r4
com.thoughtworks.xstream.converters.reflection.FieldDictionary.serializableFieldsFor : return $r4 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : if $z0 == 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : r4 = (java.lang.reflect.Field) $r8
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : r4 = (java.lang.reflect.Field) $r8 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $z1 = virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: boolean fieldModifiersSupported(java.lang.reflect.Field)>(r4)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $z1 = virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: boolean fieldModifiersSupported(java.lang.reflect.Field)>(r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $i0 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $i0 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isStatic(int)>($i0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : if $z0 != 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $i1 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $i1 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i1)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $z1 = staticinvoke <java.lang.reflect.Modifier: boolean isTransient(int)>($i1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : if $z1 != 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $z2 = 1
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : $z2 = 1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : goto [?= return $z2]
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : goto [?= return $z2] >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : return $z2
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldModifiersSupported : return $z2 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : if $z1 != 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: void validateFieldAccess(java.lang.reflect.Field)>(r4)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: void validateFieldAccess(java.lang.reflect.Field)>(r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : $i0 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : $i0 = virtualinvoke r1.<java.lang.reflect.Field: int getModifiers()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : $z0 = staticinvoke <java.lang.reflect.Modifier: boolean isFinal(int)>($i0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : if $z0 == 0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.validateFieldAccess : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : r5 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r9 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r9 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r10 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r10 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getType()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r11 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : $r11 = virtualinvoke r4.<java.lang.reflect.Field: java.lang.Class getDeclaringClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : interfaceinvoke r2.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor: void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)>($r9, $r10, $r11, r5)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : interfaceinvoke r2.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor: void visit(java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)>($r9, $r10, $r11, r5) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1.visit : $r7 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter this$0>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1.visit : $r7 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter this$0> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1.visit : $r8 = $r7.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1.visit : $r8 = $r7.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1.visit : r5 = interfaceinvoke $r8.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class)>(r1, r2)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1.visit : r5 = interfaceinvoke $r8.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.getConverterFromItemType : $r3 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.getConverterFromItemType : $r3 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.getConverterFromItemType : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class)>(r1, r2)
com.thoughtworks.xstream.mapper.MapperWrapper.getConverterFromItemType : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.String,java.lang.Class)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromItemType : $r3 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Map fieldNameToTypeMap>
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromItemType : $r3 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Map fieldNameToTypeMap> >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromItemType : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromItemType : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromItemType : if $r4 != r2
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromItemType : if $r4 != r2 >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromItemType : return null
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromItemType : return null >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.getConverterFromItemType : return $r4
com.thoughtworks.xstream.mapper.MapperWrapper.getConverterFromItemType : return $r4 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1.visit : if r5 != null
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1.visit : if r5 != null >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1.visit : $r9 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter this$0>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1.visit : $r9 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter this$0> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1.visit : $r10 = $r9.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1.visit : $r10 = $r9.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1.visit : r5 = interfaceinvoke $r10.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.Class)>(r2)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1.visit : r5 = interfaceinvoke $r10.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.Class)>(r2) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.getConverterFromItemType : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.getConverterFromItemType : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.getConverterFromItemType : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.MapperWrapper.getConverterFromItemType : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.converters.SingleValueConverter getConverterFromItemType(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromItemType : $r2 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Set typeSet>
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromItemType : $r2 = r0.<com.thoughtworks.xstream.mapper.AttributeMapper: java.util.Set typeSet> >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromItemType : $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromItemType : $z0 = interfaceinvoke $r2.<java.util.Set: boolean contains(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromItemType : if $z0 == 0
com.thoughtworks.xstream.mapper.AttributeMapper.getConverterFromItemType : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.getConverterFromItemType : return $r3
com.thoughtworks.xstream.mapper.MapperWrapper.getConverterFromItemType : return $r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1.visit : if r5 == null
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1.visit : if r5 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : goto [?= (branch)]
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.visitSerializableFields : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : $r11 = new com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : $r11 = new com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : specialinvoke $r11.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: void <init>(com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter,java.util.Set,java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter)>(r0, r6, r1, r3, r5, r2)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : specialinvoke $r11.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: void <init>(com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter,java.util.Set,java.lang.Object,com.thoughtworks.xstream.converters.MarshallingContext,java.util.Set,com.thoughtworks.xstream.io.HierarchicalStreamWriter)>(r0, r6, r1, r3, r5, r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : interfaceinvoke $r10.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)>(r1, $r11)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doMarshal : interfaceinvoke $r10.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: void visitSerializableFields(java.lang.Object,com.thoughtworks.xstream.converters.reflection.ReflectionProvider$Visitor)>(r1, $r11) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : $r9 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: java.util.Set val$seenAsAttributes>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : $r9 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: java.util.Set val$seenAsAttributes> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : $z0 = interfaceinvoke $r9.<java.util.Set: boolean contains(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : $z0 = interfaceinvoke $r9.<java.util.Set: boolean contains(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : if $z0 != 0
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : if r4 == null
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : if r4 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter this$0>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter this$0> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : $r11 = $r10.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : $r11 = $r10.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : $r12 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: java.lang.Object val$source>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : $r12 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: java.lang.Object val$source> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : $r13 = virtualinvoke $r12.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : r5 = interfaceinvoke $r11.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper$ImplicitCollectionMapping getImplicitCollectionDefForFieldName(java.lang.Class,java.lang.String)>($r13, r1)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : r5 = interfaceinvoke $r11.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper$ImplicitCollectionMapping getImplicitCollectionDefForFieldName(java.lang.Class,java.lang.String)>($r13, r1) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.getImplicitCollectionDefForFieldName : $r3 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.getImplicitCollectionDefForFieldName : $r3 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.getImplicitCollectionDefForFieldName : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper$ImplicitCollectionMapping getImplicitCollectionDefForFieldName(java.lang.Class,java.lang.String)>(r1, r2)
com.thoughtworks.xstream.mapper.MapperWrapper.getImplicitCollectionDefForFieldName : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper$ImplicitCollectionMapping getImplicitCollectionDefForFieldName(java.lang.Class,java.lang.String)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getImplicitCollectionDefForFieldName : r3 = specialinvoke r0.<com.thoughtworks.xstream.mapper.ImplicitCollectionMapper: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass getMapper(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getImplicitCollectionDefForFieldName : r3 = specialinvoke r0.<com.thoughtworks.xstream.mapper.ImplicitCollectionMapper: com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass getMapper(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getMapper : if r1 == null
com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getMapper : if r1 == null >>>>>>>> com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getMapper : $r3 = r0.<com.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.util.Map classNameToMapper>
com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getMapper : $r3 = r0.<com.thoughtworks.xstream.mapper.ImplicitCollectionMapper: java.util.Map classNameToMapper> >>>>>>>> com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getMapper : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getMapper : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getMapper : r2 = (com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass) $r4
com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getMapper : r2 = (com.thoughtworks.xstream.mapper.ImplicitCollectionMapper$ImplicitCollectionMapperForClass) $r4 >>>>>>>> com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getMapper : if r2 == null
com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getMapper : if r2 == null >>>>>>>> com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getMapper : r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>()
com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getMapper : r1 = virtualinvoke r1.<java.lang.Class: java.lang.Class getSuperclass()>() >>>>>>>> com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getMapper : goto [?= (branch)]
com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getMapper : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getMapper : return null
com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getMapper : return null >>>>>>>> com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getImplicitCollectionDefForFieldName : if r3 == null
com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getImplicitCollectionDefForFieldName : if r3 == null >>>>>>>> com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getImplicitCollectionDefForFieldName : return null
com.thoughtworks.xstream.mapper.ImplicitCollectionMapper.getImplicitCollectionDefForFieldName : return null >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.getImplicitCollectionDefForFieldName : return $r4
com.thoughtworks.xstream.mapper.MapperWrapper.getImplicitCollectionDefForFieldName : return $r4 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : if r5 == null
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : if r5 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)>(r1, r1, r2, r3, r4)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: void writeField(java.lang.String,java.lang.String,java.lang.Class,java.lang.Class,java.lang.Object)>(r1, r1, r2, r3, r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r9 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter this$0>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r9 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter this$0> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r10 = $r9.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r10 = $r9.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $z0 = interfaceinvoke $r10.<com.thoughtworks.xstream.mapper.Mapper: boolean shouldSerializeMember(java.lang.Class,java.lang.String)>(r4, r2)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $z0 = interfaceinvoke $r10.<com.thoughtworks.xstream.mapper.Mapper: boolean shouldSerializeMember(java.lang.Class,java.lang.String)>(r4, r2) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.shouldSerializeMember : $r3 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.shouldSerializeMember : $r3 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.shouldSerializeMember : $z0 = interfaceinvoke $r3.<com.thoughtworks.xstream.mapper.Mapper: boolean shouldSerializeMember(java.lang.Class,java.lang.String)>(r1, r2)
com.thoughtworks.xstream.mapper.MapperWrapper.shouldSerializeMember : $z0 = interfaceinvoke $r3.<com.thoughtworks.xstream.mapper.Mapper: boolean shouldSerializeMember(java.lang.Class,java.lang.String)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.shouldSerializeMember : $r3 = r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.util.Set fieldsToOmit>
com.thoughtworks.xstream.mapper.FieldAliasingMapper.shouldSerializeMember : $r3 = r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.util.Set fieldsToOmit> >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.shouldSerializeMember : $r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.lang.Object key(java.lang.Class,java.lang.String)>(r1, r2)
com.thoughtworks.xstream.mapper.FieldAliasingMapper.shouldSerializeMember : $r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.lang.Object key(java.lang.Class,java.lang.String)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.shouldSerializeMember : $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r4)
com.thoughtworks.xstream.mapper.FieldAliasingMapper.shouldSerializeMember : $z0 = interfaceinvoke $r3.<java.util.Set: boolean contains(java.lang.Object)>($r4) >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.shouldSerializeMember : if $z0 != 0
com.thoughtworks.xstream.mapper.FieldAliasingMapper.shouldSerializeMember : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.shouldSerializeMember : $z1 = 1
com.thoughtworks.xstream.mapper.FieldAliasingMapper.shouldSerializeMember : $z1 = 1 >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.shouldSerializeMember : goto [?= return $z1]
com.thoughtworks.xstream.mapper.FieldAliasingMapper.shouldSerializeMember : goto [?= return $z1] >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.shouldSerializeMember : return $z1
com.thoughtworks.xstream.mapper.FieldAliasingMapper.shouldSerializeMember : return $z1 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.shouldSerializeMember : return $z0
com.thoughtworks.xstream.mapper.MapperWrapper.shouldSerializeMember : return $z0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : if $z0 != 0
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r11 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.io.HierarchicalStreamWriter val$writer>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r11 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.io.HierarchicalStreamWriter val$writer> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r12 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter this$0>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r12 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter this$0> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r13 = $r12.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r13 = $r12.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r14 = interfaceinvoke $r13.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedMember(java.lang.Class,java.lang.String)>(r4, r2)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r14 = interfaceinvoke $r13.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedMember(java.lang.Class,java.lang.String)>(r4, r2) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.serializedMember : $r3 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.serializedMember : $r3 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.serializedMember : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedMember(java.lang.Class,java.lang.String)>(r1, r2)
com.thoughtworks.xstream.mapper.MapperWrapper.serializedMember : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedMember(java.lang.Class,java.lang.String)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.OuterClassMapper.serializedMember : $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("this$0")
com.thoughtworks.xstream.mapper.OuterClassMapper.serializedMember : $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>("this$0") >>>>>>>> com.thoughtworks.xstream.mapper.OuterClassMapper.serializedMember : if $z0 == 0
com.thoughtworks.xstream.mapper.OuterClassMapper.serializedMember : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.OuterClassMapper.serializedMember : $r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String serializedMember(java.lang.Class,java.lang.String)>(r1, r2)
com.thoughtworks.xstream.mapper.OuterClassMapper.serializedMember : $r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String serializedMember(java.lang.Class,java.lang.String)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.serializedMember : $r4 = r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.util.Map fieldToAliasMap>
com.thoughtworks.xstream.mapper.FieldAliasingMapper.serializedMember : $r4 = r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.util.Map fieldToAliasMap> >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.serializedMember : $r5 = specialinvoke r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.lang.Object key(java.lang.Class,java.lang.String)>(r1, r2)
com.thoughtworks.xstream.mapper.FieldAliasingMapper.serializedMember : $r5 = specialinvoke r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.lang.Object key(java.lang.Class,java.lang.String)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.serializedMember : $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5)
com.thoughtworks.xstream.mapper.FieldAliasingMapper.serializedMember : $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5) >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.serializedMember : r3 = (java.lang.String) $r6
com.thoughtworks.xstream.mapper.FieldAliasingMapper.serializedMember : r3 = (java.lang.String) $r6 >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.serializedMember : if r3 != null
com.thoughtworks.xstream.mapper.FieldAliasingMapper.serializedMember : if r3 != null >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.serializedMember : return r3
com.thoughtworks.xstream.mapper.FieldAliasingMapper.serializedMember : return r3 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.serializedMember : return $r4
com.thoughtworks.xstream.mapper.MapperWrapper.serializedMember : return $r4 >>>>>>>> com.thoughtworks.xstream.mapper.OuterClassMapper.serializedMember : return $r4
com.thoughtworks.xstream.mapper.OuterClassMapper.serializedMember : return $r4 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : staticinvoke <com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper: void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)>($r11, $r14, r3)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : staticinvoke <com.thoughtworks.xstream.io.ExtendedHierarchicalStreamWriterHelper: void startNode(com.thoughtworks.xstream.io.HierarchicalStreamWriter,java.lang.String,java.lang.Class)>($r11, $r14, r3) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $r1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $r1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : virtualinvoke $r1.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(62)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : virtualinvoke $r1.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(62) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void endOfLine()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void endOfLine()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : $r1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : $r1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : $r2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: java.lang.String newLine>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : $r2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: java.lang.String newLine> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : virtualinvoke $r1.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>($r2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : virtualinvoke $r1.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>($r2) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : i0 = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : i0 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : $i1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : $i1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : if i0 >= $i1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : if i0 >= $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : $r3 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : $r3 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: char[] lineIndenter>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: char[] lineIndenter> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char[])>($r4)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char[])>($r4) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = lengthof r1
com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = lengthof r1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r4 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r4 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, $i5, i0)
com.thoughtworks.xstream.core.util.QuickWriter.write : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, $i5, i0) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : i0 = i0 + 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : i0 = i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : goto [?= $i1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth>]
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endOfLine : goto [?= $i1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth>] >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : r6 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : r6 = virtualinvoke r5.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r15 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter this$0>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r15 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter this$0> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r16 = $r15.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r16 = $r15.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : r7 = interfaceinvoke $r16.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class defaultImplementationOf(java.lang.Class)>(r3)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : r7 = interfaceinvoke $r16.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class defaultImplementationOf(java.lang.Class)>(r3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $z1 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>(r7)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $z1 = virtualinvoke r6.<java.lang.Object: boolean equals(java.lang.Object)>(r7) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : if $z1 != 0
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r24 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: java.util.Set val$seenFields>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r24 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: java.util.Set val$seenFields> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $z2 = interfaceinvoke $r24.<java.util.Set: boolean contains(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $z2 = interfaceinvoke $r24.<java.util.Set: boolean contains(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : if $z2 == 0
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r32 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter this$0>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r32 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter this$0> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r33 = $r32.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r33 = $r32.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : r8 = interfaceinvoke $r33.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: java.lang.reflect.Field getField(java.lang.Class,java.lang.String)>(r4, r1)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : r8 = interfaceinvoke $r33.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: java.lang.reflect.Field getField(java.lang.Class,java.lang.String)>(r4, r1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.getField : $r3 = r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: com.thoughtworks.xstream.converters.reflection.FieldDictionary fieldDictionary>
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.getField : $r3 = r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: com.thoughtworks.xstream.converters.reflection.FieldDictionary fieldDictionary> >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.getField : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)>(r1, r2, null)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.getField : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)>(r1, r2, null) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : if r3 == null
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : if r3 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $z0 = 0
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r6 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)>(r1, $z0)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r6 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map buildMap(java.lang.Class,boolean)>(r1, $z0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r31 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache>
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r31 = r0.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.util.Map keyedByFieldNameCache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r30 = interfaceinvoke $r31.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.buildMap : $r30 = interfaceinvoke $r31.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r9 = r2
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r9 = r2 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r10 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9)
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : $r10 = interfaceinvoke r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r9) >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r7 = (java.lang.reflect.Field) $r10
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : r7 = (java.lang.reflect.Field) $r10 >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : if r7 != null
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : if r7 != null >>>>>>>> com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : return r7
com.thoughtworks.xstream.converters.reflection.FieldDictionary.field : return r7 >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.getField : return $r4
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.getField : return $r4 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r34 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter this$0>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r34 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter this$0> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r35 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.converters.MarshallingContext val$context>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r35 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.converters.MarshallingContext val$context> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : virtualinvoke $r34.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: void marshallField(com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object,java.lang.reflect.Field)>($r35, r5, r8)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : virtualinvoke $r34.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: void marshallField(com.thoughtworks.xstream.converters.MarshallingContext,java.lang.Object,java.lang.reflect.Field)>($r35, r5, r8) >>>>>>>> com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.marshallField : $r5 = r0.<com.thoughtworks.xstream.annotations.AnnotationReflectionConverter: com.thoughtworks.xstream.annotations.AnnotationProvider annotationProvider>
com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.marshallField : $r5 = r0.<com.thoughtworks.xstream.annotations.AnnotationReflectionConverter: com.thoughtworks.xstream.annotations.AnnotationProvider annotationProvider> >>>>>>>> com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.marshallField : $r6 = virtualinvoke $r5.<com.thoughtworks.xstream.annotations.AnnotationProvider: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Field,java.lang.Class)>(r3, class "com/thoughtworks/xstream/annotations/XStreamConverter")
com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.marshallField : $r6 = virtualinvoke $r5.<com.thoughtworks.xstream.annotations.AnnotationProvider: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Field,java.lang.Class)>(r3, class "com/thoughtworks/xstream/annotations/XStreamConverter") >>>>>>>> com.thoughtworks.xstream.annotations.AnnotationProvider.getAnnotation : $r3 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(r2)
com.thoughtworks.xstream.annotations.AnnotationProvider.getAnnotation : $r3 = virtualinvoke r1.<java.lang.reflect.Field: java.lang.annotation.Annotation getAnnotation(java.lang.Class)>(r2) >>>>>>>> com.thoughtworks.xstream.annotations.AnnotationProvider.getAnnotation : return $r3
com.thoughtworks.xstream.annotations.AnnotationProvider.getAnnotation : return $r3 >>>>>>>> com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.marshallField : r4 = (com.thoughtworks.xstream.annotations.XStreamConverter) $r6
com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.marshallField : r4 = (com.thoughtworks.xstream.annotations.XStreamConverter) $r6 >>>>>>>> com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.marshallField : if r4 == null
com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.marshallField : if r4 == null >>>>>>>> com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.marshallField : interfaceinvoke r1.<com.thoughtworks.xstream.converters.MarshallingContext: void convertAnother(java.lang.Object)>(r2)
com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.marshallField : interfaceinvoke r1.<com.thoughtworks.xstream.converters.MarshallingContext: void convertAnother(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : return 1
com.thoughtworks.xstream.mapper.ImmutableTypesMapper.isImmutableValueType : return 1 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r8 = r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.io.HierarchicalStreamWriter writer>
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : $r8 = r0.<com.thoughtworks.xstream.core.AbstractReferenceMarshaller: com.thoughtworks.xstream.io.HierarchicalStreamWriter writer> >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : interfaceinvoke r2.<com.thoughtworks.xstream.converters.Converter: void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)>(r1, $r8, r0)
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : interfaceinvoke r2.<com.thoughtworks.xstream.converters.Converter: void marshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamWriter,com.thoughtworks.xstream.converters.MarshallingContext)>(r1, $r8, r0) >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.marshal : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.converters.SingleValueConverterWrapper: java.lang.String toString(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.marshal : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.converters.SingleValueConverterWrapper: java.lang.String toString(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.toString : $r2 = r0.<com.thoughtworks.xstream.converters.SingleValueConverterWrapper: com.thoughtworks.xstream.converters.SingleValueConverter wrapped>
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.toString : $r2 = r0.<com.thoughtworks.xstream.converters.SingleValueConverterWrapper: com.thoughtworks.xstream.converters.SingleValueConverter wrapped> >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.toString : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.converters.SingleValueConverter: java.lang.String toString(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.toString : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.converters.SingleValueConverter: java.lang.String toString(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter.toString : if r1 != null
com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter.toString : if r1 != null >>>>>>>> com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter.toString : $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>()
com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter.toString : $r2 = virtualinvoke r1.<java.lang.Object: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter.toString : return $r2
com.thoughtworks.xstream.converters.basic.AbstractSingleValueConverter.toString : return $r2 >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.toString : return $r3
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.toString : return $r3 >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.marshal : interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void setValue(java.lang.String)>($r4)
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.marshal : interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void setValue(java.lang.String)>($r4) >>>>>>>> com.thoughtworks.xstream.io.WriterWrapper.setValue : $r2 = r0.<com.thoughtworks.xstream.io.WriterWrapper: com.thoughtworks.xstream.io.HierarchicalStreamWriter wrapped>
com.thoughtworks.xstream.io.WriterWrapper.setValue : $r2 = r0.<com.thoughtworks.xstream.io.WriterWrapper: com.thoughtworks.xstream.io.HierarchicalStreamWriter wrapped> >>>>>>>> com.thoughtworks.xstream.io.WriterWrapper.setValue : interfaceinvoke $r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void setValue(java.lang.String)>(r1)
com.thoughtworks.xstream.io.WriterWrapper.setValue : interfaceinvoke $r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void setValue(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : $r2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : $r2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void writeText(com.thoughtworks.xstream.core.util.QuickWriter,java.lang.String)>($r2, r1)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void writeText(com.thoughtworks.xstream.core.util.QuickWriter,java.lang.String)>($r2, r1) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void writeText(java.lang.String)>(r2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void writeText(java.lang.String)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i1 = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : if i1 >= i0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : lookupswitch(c2) {     case 0:
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : lookupswitch(c2) {     case 0: >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : $r16 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : $r16 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : virtualinvoke $r16.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(c2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : virtualinvoke $r16.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : goto [?= return]
com.thoughtworks.xstream.core.AbstractReferenceMarshaller.convert : goto [?= return] >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r36 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.io.HierarchicalStreamWriter val$writer>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : $r36 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: com.thoughtworks.xstream.io.HierarchicalStreamWriter val$writer> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : interfaceinvoke $r36.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void endNode()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.writeField : interfaceinvoke $r36.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void endNode()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.WriterWrapper: void endNode()>()
com.thoughtworks.xstream.io.path.PathTrackingWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.WriterWrapper: void endNode()>() >>>>>>>> com.thoughtworks.xstream.io.WriterWrapper.endNode : $r1 = r0.<com.thoughtworks.xstream.io.WriterWrapper: com.thoughtworks.xstream.io.HierarchicalStreamWriter wrapped>
com.thoughtworks.xstream.io.WriterWrapper.endNode : $r1 = r0.<com.thoughtworks.xstream.io.WriterWrapper: com.thoughtworks.xstream.io.HierarchicalStreamWriter wrapped> >>>>>>>> com.thoughtworks.xstream.io.WriterWrapper.endNode : interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void endNode()>()
com.thoughtworks.xstream.io.WriterWrapper.endNode : interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void endNode()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i1 = $i0 - 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : if $z0 == 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r5 = <com.thoughtworks.xstream.io.xml.PrettyPrintWriter: char[] CLOSE>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r5 = <com.thoughtworks.xstream.io.xml.PrettyPrintWriter: char[] CLOSE> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char[])>($r5)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char[])>($r5) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r6 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r6 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r7 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r7 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r8 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r8 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1
com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1
com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1]
com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null
com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : return r2
com.thoughtworks.xstream.core.util.FastStack.pop : return r2 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r9 = (java.lang.String) $r8
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r9 = (java.lang.String) $r8 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r6.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>($r9)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r6.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>($r9) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r10 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r10 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r10.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(62)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r10.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(62) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : if $i2 != 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : if $i2 != 0 >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingWriter.endNode : $r1 = r0.<com.thoughtworks.xstream.io.path.PathTrackingWriter: com.thoughtworks.xstream.io.path.PathTracker pathTracker>
com.thoughtworks.xstream.io.path.PathTrackingWriter.endNode : $r1 = r0.<com.thoughtworks.xstream.io.path.PathTrackingWriter: com.thoughtworks.xstream.io.path.PathTracker pathTracker> >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingWriter.endNode : virtualinvoke $r1.<com.thoughtworks.xstream.io.path.PathTracker: void popElement()>()
com.thoughtworks.xstream.io.path.PathTrackingWriter.endNode : virtualinvoke $r1.<com.thoughtworks.xstream.io.path.PathTracker: void popElement()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.popElement : $r1 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.util.Map[] indexMapStack>
com.thoughtworks.xstream.io.path.PathTracker.popElement : $r1 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.util.Map[] indexMapStack> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.popElement : $i0 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.popElement : $i0 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.popElement : $r1[$i0] = null
com.thoughtworks.xstream.io.path.PathTracker.popElement : $r1[$i0] = null >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.popElement : r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> = null
com.thoughtworks.xstream.io.path.PathTracker.popElement : r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> = null >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.popElement : $i1 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.popElement : $i1 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.popElement : $i2 = $i1 - 1
com.thoughtworks.xstream.io.path.PathTracker.popElement : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.popElement : r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> = $i2
com.thoughtworks.xstream.io.path.PathTracker.popElement : r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> = $i2 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : $r18 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: java.util.Set val$seenFields>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : $r18 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2: java.util.Set val$seenFields> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>(r1)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$2.visit : interfaceinvoke $r18.<java.util.Set: boolean add(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : return r2
com.thoughtworks.xstream.core.DefaultConverterLookup.lookupConverterForType : return r2 >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : $r12 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.io.HierarchicalStreamWriter writer>
com.thoughtworks.xstream.core.TreeMarshaller.start : $r12 = r0.<com.thoughtworks.xstream.core.TreeMarshaller: com.thoughtworks.xstream.io.HierarchicalStreamWriter writer> >>>>>>>> com.thoughtworks.xstream.core.TreeMarshaller.start : interfaceinvoke $r12.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void endNode()>()
com.thoughtworks.xstream.core.TreeMarshaller.start : interfaceinvoke $r12.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void endNode()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r11 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r11 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r11.<com.thoughtworks.xstream.core.util.QuickWriter: void flush()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r11.<com.thoughtworks.xstream.core.util.QuickWriter: void flush()>() >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: java.io.Writer writer>
com.thoughtworks.xstream.core.util.QuickWriter.flush : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: java.io.Writer writer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : $r3 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.flush : $r3 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : $i0 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.flush : $i0 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i0)
com.thoughtworks.xstream.core.util.QuickWriter.flush : virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i0) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = 0
com.thoughtworks.xstream.core.util.QuickWriter.flush : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = 0 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : $r4 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: java.io.Writer writer>
com.thoughtworks.xstream.core.util.QuickWriter.flush : $r4 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: java.io.Writer writer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : virtualinvoke $r4.<java.io.Writer: void flush()>()
com.thoughtworks.xstream.core.util.QuickWriter.flush : virtualinvoke $r4.<java.io.Writer: void flush()>() >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : goto [?= return]
com.thoughtworks.xstream.core.util.QuickWriter.flush : goto [?= return] >>>>>>>> com.thoughtworks.xstream.XStream.toXML : interfaceinvoke r3.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void flush()>()
com.thoughtworks.xstream.XStream.toXML : interfaceinvoke r3.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void flush()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.flush : $r1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.flush : $r1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.flush : virtualinvoke $r1.<com.thoughtworks.xstream.core.util.QuickWriter: void flush()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.flush : virtualinvoke $r1.<com.thoughtworks.xstream.core.util.QuickWriter: void flush()>() >>>>>>>> com.thoughtworks.xstream.XStream.toXML : $r4 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>()
com.thoughtworks.xstream.XStream.toXML : $r4 = virtualinvoke r3.<java.lang.Object: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.XStream.toXML : return $r4
com.thoughtworks.xstream.XStream.toXML : return $r4 >>>>>>>> com.thoughtworks.xstream.XStream.fromXML : $r2 = new java.io.StringReader
com.thoughtworks.xstream.XStream.fromXML : $r2 = new java.io.StringReader >>>>>>>> com.thoughtworks.xstream.XStream.fromXML : specialinvoke $r2.<java.io.StringReader: void <init>(java.lang.String)>(r1)
com.thoughtworks.xstream.XStream.fromXML : specialinvoke $r2.<java.io.StringReader: void <init>(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.XStream.fromXML : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.XStream: java.lang.Object fromXML(java.io.Reader)>($r2)
com.thoughtworks.xstream.XStream.fromXML : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.XStream: java.lang.Object fromXML(java.io.Reader)>($r2) >>>>>>>> com.thoughtworks.xstream.XStream.fromXML : $r2 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.io.HierarchicalStreamDriver hierarchicalStreamDriver>
com.thoughtworks.xstream.XStream.fromXML : $r2 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.io.HierarchicalStreamDriver hierarchicalStreamDriver> >>>>>>>> com.thoughtworks.xstream.XStream.fromXML : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.io.HierarchicalStreamDriver: com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)>(r1)
com.thoughtworks.xstream.XStream.fromXML : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.io.HierarchicalStreamDriver: com.thoughtworks.xstream.io.HierarchicalStreamReader createReader(java.io.Reader)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.createReader : specialinvoke r0.<com.thoughtworks.xstream.io.xml.XppDriver: void loadLibrary()>()
com.thoughtworks.xstream.io.xml.XppDriver.createReader : specialinvoke r0.<com.thoughtworks.xstream.io.xml.XppDriver: void loadLibrary()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.loadLibrary : $z0 = <com.thoughtworks.xstream.io.xml.XppDriver: boolean xppLibraryPresent>
com.thoughtworks.xstream.io.xml.XppDriver.loadLibrary : $z0 = <com.thoughtworks.xstream.io.xml.XppDriver: boolean xppLibraryPresent> >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.loadLibrary : if $z0 != 0
com.thoughtworks.xstream.io.xml.XppDriver.loadLibrary : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.createReader : $r2 = new com.thoughtworks.xstream.io.xml.XppReader
com.thoughtworks.xstream.io.xml.XppDriver.createReader : $r2 = new com.thoughtworks.xstream.io.xml.XppReader >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.createReader : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer xmlFriendlyReplacer()>()
com.thoughtworks.xstream.io.xml.XppDriver.createReader : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer xmlFriendlyReplacer()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.createReader : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.XppReader: void <init>(java.io.Reader,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)>(r1, $r3)
com.thoughtworks.xstream.io.xml.XppDriver.createReader : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.XppReader: void <init>(java.io.Reader,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)>(r1, $r3) >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.createParser : $r1 = new org.xmlpull.mxp1.MXParser
com.thoughtworks.xstream.io.xml.XppReader.createParser : $r1 = new org.xmlpull.mxp1.MXParser >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.createParser : specialinvoke $r1.<org.xmlpull.mxp1.MXParser: void <init>()>()
com.thoughtworks.xstream.io.xml.XppReader.createParser : specialinvoke $r1.<org.xmlpull.mxp1.MXParser: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.createParser : return $r1
com.thoughtworks.xstream.io.xml.XppReader.createParser : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.size : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.size : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.size : return $i0
com.thoughtworks.xstream.core.util.FastStack.size : return $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i1 > i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i1 > i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z0 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z0 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z0 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r11 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r11 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : if $i0 <= 0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : if $i0 <= 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : return $z0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : return $z0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z2 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r15 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r15 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r1 = new com.thoughtworks.xstream.io.xml.AbstractPullReader$Event
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r1 = new com.thoughtworks.xstream.io.xml.AbstractPullReader$Event >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : specialinvoke $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: void <init>(com.thoughtworks.xstream.io.xml.AbstractPullReader$1)>(null)
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : specialinvoke $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: void <init>(com.thoughtworks.xstream.io.xml.AbstractPullReader$1)>(null) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2 = $r1
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2 = $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i0 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: int pullNextEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i0 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: int pullNextEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $i0 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int next()>()
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $i0 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int next()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : tableswitch($i0) {     case 0:
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : tableswitch($i0) {     case 0: >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b1 = 1
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b1 = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b1
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> = $i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> = $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i1 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i1 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i1 != 3
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i1 != 3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i2 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i2 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i2 != 1
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i2 != 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>()
com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullElementName : return $r2
com.thoughtworks.xstream.io.xml.XppReader.pullElementName : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> = $r4
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> = $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : return r2
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : return r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r15
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r15 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : lookupswitch($i0) {     case 1:
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : lookupswitch($i0) {     case 1: >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r3)
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r3) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : goto [?= return]
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i2 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i2 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i2 >= i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i2 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDriver.createReader : return $r2
com.thoughtworks.xstream.io.xml.XppDriver.createReader : return $r2 >>>>>>>> com.thoughtworks.xstream.XStream.fromXML : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.XStream: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object)>($r3, null)
com.thoughtworks.xstream.XStream.fromXML : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.XStream: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object)>($r3, null) >>>>>>>> com.thoughtworks.xstream.XStream.unmarshal : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.XStream: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)>(r1, r2, null)
com.thoughtworks.xstream.XStream.unmarshal : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.XStream: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)>(r1, r2, null) >>>>>>>> com.thoughtworks.xstream.XStream.unmarshal : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.MarshallingStrategy marshallingStrategy>
com.thoughtworks.xstream.XStream.unmarshal : $r4 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.MarshallingStrategy marshallingStrategy> >>>>>>>> com.thoughtworks.xstream.XStream.unmarshal : $r5 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup>
com.thoughtworks.xstream.XStream.unmarshal : $r5 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.core.DefaultConverterLookup converterLookup> >>>>>>>> com.thoughtworks.xstream.XStream.unmarshal : $r6 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.XStream.unmarshal : $r6 = r0.<com.thoughtworks.xstream.XStream: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.XStream.unmarshal : $r7 = interfaceinvoke $r4.<com.thoughtworks.xstream.MarshallingStrategy: java.lang.Object unmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper)>(r2, r1, r3, $r5, $r6)
com.thoughtworks.xstream.XStream.unmarshal : $r7 = interfaceinvoke $r4.<com.thoughtworks.xstream.MarshallingStrategy: java.lang.Object unmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.DataHolder,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper)>(r2, r1, r3, $r5, $r6) >>>>>>>> com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.unmarshal : $r6 = new com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller
com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.unmarshal : $r6 = new com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller >>>>>>>> com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.unmarshal : specialinvoke $r6.<com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller: void <init>(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper)>(r1, r2, r4, r5)
com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.unmarshal : specialinvoke $r6.<com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller: void <init>(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.ConverterLookup,com.thoughtworks.xstream.mapper.Mapper)>(r1, r2, r4, r5) >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped>
com.thoughtworks.xstream.io.ReaderWrapper.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped> >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.getNodeName : $r2 = interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getNodeName()>()
com.thoughtworks.xstream.io.ReaderWrapper.getNodeName : $r2 = interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getNodeName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0
com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1
com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2]
com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : return $r1
com.thoughtworks.xstream.core.util.FastStack.peek : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r3 = (java.lang.String) $r2
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r3 = (java.lang.String) $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String unescapeXmlName(java.lang.String)>($r3)
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String unescapeXmlName(java.lang.String)>($r3) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : return $r4
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : return $r4 >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.getNodeName : return $r2
com.thoughtworks.xstream.io.ReaderWrapper.getNodeName : return $r2 >>>>>>>> com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.unmarshal : $r7 = virtualinvoke $r6.<com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller: java.lang.Object start(com.thoughtworks.xstream.converters.DataHolder)>(r3)
com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.unmarshal : $r7 = virtualinvoke $r6.<com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller: java.lang.Object start(com.thoughtworks.xstream.converters.DataHolder)>(r3) >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = r1
com.thoughtworks.xstream.core.TreeUnmarshaller.start : r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.converters.DataHolder dataHolder> = r1 >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : $r7 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.io.HierarchicalStreamReader reader>
com.thoughtworks.xstream.core.TreeUnmarshaller.start : $r7 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.io.HierarchicalStreamReader reader> >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : $r8 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.core.TreeUnmarshaller.start : $r8 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : $r9 = interfaceinvoke $r8.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String aliasForAttribute(java.lang.String)>("class")
com.thoughtworks.xstream.core.TreeUnmarshaller.start : $r9 = interfaceinvoke $r8.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String aliasForAttribute(java.lang.String)>("class") >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.aliasForAttribute : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.aliasForAttribute : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.aliasForAttribute : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String aliasForAttribute(java.lang.String)>(r1)
com.thoughtworks.xstream.mapper.MapperWrapper.aliasForAttribute : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String aliasForAttribute(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.AttributeAliasingMapper.aliasForAttribute : $r3 = r0.<com.thoughtworks.xstream.mapper.AttributeAliasingMapper: java.util.Map nameToAlias>
com.thoughtworks.xstream.mapper.AttributeAliasingMapper.aliasForAttribute : $r3 = r0.<com.thoughtworks.xstream.mapper.AttributeAliasingMapper: java.util.Map nameToAlias> >>>>>>>> com.thoughtworks.xstream.mapper.AttributeAliasingMapper.aliasForAttribute : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.AttributeAliasingMapper.aliasForAttribute : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.AttributeAliasingMapper.aliasForAttribute : r2 = (java.lang.String) $r4
com.thoughtworks.xstream.mapper.AttributeAliasingMapper.aliasForAttribute : r2 = (java.lang.String) $r4 >>>>>>>> com.thoughtworks.xstream.mapper.AttributeAliasingMapper.aliasForAttribute : if r2 != null
com.thoughtworks.xstream.mapper.AttributeAliasingMapper.aliasForAttribute : if r2 != null >>>>>>>> com.thoughtworks.xstream.mapper.AttributeAliasingMapper.aliasForAttribute : $r5 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String aliasForAttribute(java.lang.String)>(r1)
com.thoughtworks.xstream.mapper.AttributeAliasingMapper.aliasForAttribute : $r5 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String aliasForAttribute(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultMapper.aliasForAttribute : return r1
com.thoughtworks.xstream.mapper.DefaultMapper.aliasForAttribute : return r1 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.aliasForAttribute : return $r3
com.thoughtworks.xstream.mapper.MapperWrapper.aliasForAttribute : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.AttributeAliasingMapper.aliasForAttribute : goto [?= return $r5]
com.thoughtworks.xstream.mapper.AttributeAliasingMapper.aliasForAttribute : goto [?= return $r5] >>>>>>>> com.thoughtworks.xstream.mapper.AttributeAliasingMapper.aliasForAttribute : return $r5
com.thoughtworks.xstream.mapper.AttributeAliasingMapper.aliasForAttribute : return $r5 >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : r2 = interfaceinvoke $r7.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getAttribute(java.lang.String)>($r9)
com.thoughtworks.xstream.core.TreeUnmarshaller.start : r2 = interfaceinvoke $r7.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getAttribute(java.lang.String)>($r9) >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.getAttribute : $r2 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped>
com.thoughtworks.xstream.io.ReaderWrapper.getAttribute : $r2 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped> >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.getAttribute : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getAttribute(java.lang.String)>(r1)
com.thoughtworks.xstream.io.ReaderWrapper.getAttribute : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getAttribute(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.getAttribute : $r2 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.getAttribute : $r2 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.getAttribute : $r3 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, r1)
com.thoughtworks.xstream.io.xml.XppReader.getAttribute : $r3 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: java.lang.String getAttributeValue(java.lang.String,java.lang.String)>(null, r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.getAttribute : return $r3
com.thoughtworks.xstream.io.xml.XppReader.getAttribute : return $r3 >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.getAttribute : return $r3
com.thoughtworks.xstream.io.ReaderWrapper.getAttribute : return $r3 >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : if r2 != null
com.thoughtworks.xstream.core.TreeUnmarshaller.start : if r2 != null >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : $r10 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.core.TreeUnmarshaller.start : $r10 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : $r11 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.io.HierarchicalStreamReader reader>
com.thoughtworks.xstream.core.TreeUnmarshaller.start : $r11 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.io.HierarchicalStreamReader reader> >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : $r12 = interfaceinvoke $r11.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getNodeName()>()
com.thoughtworks.xstream.core.TreeUnmarshaller.start : $r12 = interfaceinvoke $r11.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getNodeName()>() >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : r3 = interfaceinvoke $r10.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class realClass(java.lang.String)>($r12)
com.thoughtworks.xstream.core.TreeUnmarshaller.start : r3 = interfaceinvoke $r10.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class realClass(java.lang.String)>($r12) >>>>>>>> com.thoughtworks.xstream.mapper.CachingMapper.realClass : $r4 = r0.<com.thoughtworks.xstream.mapper.CachingMapper: java.util.Map cache>
com.thoughtworks.xstream.mapper.CachingMapper.realClass : $r4 = r0.<com.thoughtworks.xstream.mapper.CachingMapper: java.util.Map cache> >>>>>>>> com.thoughtworks.xstream.mapper.CachingMapper.realClass : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.CachingMapper.realClass : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.CachingMapper.realClass : r2 = (java.lang.Class) $r5
com.thoughtworks.xstream.mapper.CachingMapper.realClass : r2 = (java.lang.Class) $r5 >>>>>>>> com.thoughtworks.xstream.mapper.CachingMapper.realClass : if r2 == null
com.thoughtworks.xstream.mapper.CachingMapper.realClass : if r2 == null >>>>>>>> com.thoughtworks.xstream.mapper.CachingMapper.realClass : r3 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.Class realClass(java.lang.String)>(r1)
com.thoughtworks.xstream.mapper.CachingMapper.realClass : r3 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.Class realClass(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.realClass : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.realClass : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.realClass : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class realClass(java.lang.String)>(r1)
com.thoughtworks.xstream.mapper.MapperWrapper.realClass : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class realClass(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : i0 = 0
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : i0 = 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("-array")
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("-array") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : if $z0 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : if i0 <= 0
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : if i0 <= 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : $r13 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.Class realClass(java.lang.String)>(r1)
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : $r13 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.Class realClass(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.DynamicProxyMapper.realClass : $r2 = r0.<com.thoughtworks.xstream.mapper.DynamicProxyMapper: java.lang.String alias>
com.thoughtworks.xstream.mapper.DynamicProxyMapper.realClass : $r2 = r0.<com.thoughtworks.xstream.mapper.DynamicProxyMapper: java.lang.String alias> >>>>>>>> com.thoughtworks.xstream.mapper.DynamicProxyMapper.realClass : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.mapper.DynamicProxyMapper.realClass : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.mapper.DynamicProxyMapper.realClass : if $z0 == 0
com.thoughtworks.xstream.mapper.DynamicProxyMapper.realClass : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.DynamicProxyMapper.realClass : $r3 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.Class realClass(java.lang.String)>(r1)
com.thoughtworks.xstream.mapper.DynamicProxyMapper.realClass : $r3 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.Class realClass(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : $r2 = r0.<com.thoughtworks.xstream.mapper.CGLIBMapper: java.lang.String alias>
com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : $r2 = r0.<com.thoughtworks.xstream.mapper.CGLIBMapper: java.lang.String alias> >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2)
com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : if $z0 == 0
com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : $r3 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.Class realClass(java.lang.String)>(r1)
com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : $r3 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.Class realClass(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.realClass : $r3 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map nameToType>
com.thoughtworks.xstream.mapper.ClassAliasingMapper.realClass : $r3 = r0.<com.thoughtworks.xstream.mapper.ClassAliasingMapper: java.util.Map nameToType> >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.realClass : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.mapper.ClassAliasingMapper.realClass : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.realClass : r2 = (java.lang.String) $r4
com.thoughtworks.xstream.mapper.ClassAliasingMapper.realClass : r2 = (java.lang.String) $r4 >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.realClass : if r2 == null
com.thoughtworks.xstream.mapper.ClassAliasingMapper.realClass : if r2 == null >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.realClass : r1 = r2
com.thoughtworks.xstream.mapper.ClassAliasingMapper.realClass : r1 = r2 >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.realClass : $r5 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.Class realClass(java.lang.String)>(r1)
com.thoughtworks.xstream.mapper.ClassAliasingMapper.realClass : $r5 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.Class realClass(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper.realClass : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper: java.lang.String unescapeClassName(java.lang.String)>(r1)
com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper.realClass : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper: java.lang.String unescapeClassName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : $r2 = new java.lang.StringBuilder
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : $r2 = new java.lang.StringBuilder >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>()
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : specialinvoke $r2.<java.lang.StringBuilder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : $r3 = r0.<com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper: java.lang.String noPackagePrefix>
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : $r3 = r0.<com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper: java.lang.String noPackagePrefix> >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3)
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : $r4 = virtualinvoke $r2.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r3) >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : $c0 = r0.<com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper: char dollarReplacementInClass>
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : $c0 = r0.<com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper: char dollarReplacementInClass> >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0)
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(char)>($c0) >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r6)
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : $z0 = virtualinvoke r1.<java.lang.String: boolean startsWith(java.lang.String)>($r6) >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : if $z0 == 0
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : $c2 = r0.<com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper: char dollarReplacementInClass>
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : $c2 = r0.<com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper: char dollarReplacementInClass> >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : r8 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>($c2, 36)
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : r8 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>($c2, 36) >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : return r8
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.unescapeClassName : return r8 >>>>>>>> com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper.realClass : $r3 = specialinvoke r0.<com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper: java.lang.Class realClass(java.lang.String)>($r2)
com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper.realClass : $r3 = specialinvoke r0.<com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper: java.lang.Class realClass(java.lang.String)>($r2) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultMapper.realClass : $r4 = r0.<com.thoughtworks.xstream.mapper.DefaultMapper: java.lang.ClassLoader classLoader>
com.thoughtworks.xstream.mapper.DefaultMapper.realClass : $r4 = r0.<com.thoughtworks.xstream.mapper.DefaultMapper: java.lang.ClassLoader classLoader> >>>>>>>> com.thoughtworks.xstream.mapper.DefaultMapper.realClass : $r5 = virtualinvoke $r4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1)
com.thoughtworks.xstream.mapper.DefaultMapper.realClass : $r5 = virtualinvoke $r4.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.ClassLoaderReference.loadClass : $r2 = r0.<com.thoughtworks.xstream.core.util.ClassLoaderReference: java.lang.ClassLoader reference>
com.thoughtworks.xstream.core.util.ClassLoaderReference.loadClass : $r2 = r0.<com.thoughtworks.xstream.core.util.ClassLoaderReference: java.lang.ClassLoader reference> >>>>>>>> com.thoughtworks.xstream.core.util.ClassLoaderReference.loadClass : $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1)
com.thoughtworks.xstream.core.util.ClassLoaderReference.loadClass : $r3 = virtualinvoke $r2.<java.lang.ClassLoader: java.lang.Class loadClass(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.core.util.ClassLoaderReference.loadClass : return $r3
com.thoughtworks.xstream.core.util.ClassLoaderReference.loadClass : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.DefaultMapper.realClass : return $r5
com.thoughtworks.xstream.mapper.DefaultMapper.realClass : return $r5 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.realClass : return $r3
com.thoughtworks.xstream.mapper.MapperWrapper.realClass : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper.realClass : return $r3
com.thoughtworks.xstream.mapper.XStream11XmlFriendlyMapper.realClass : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.ClassAliasingMapper.realClass : return $r5
com.thoughtworks.xstream.mapper.ClassAliasingMapper.realClass : return $r5 >>>>>>>> com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : return $r3
com.thoughtworks.xstream.mapper.CGLIBMapper.realClass : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.DynamicProxyMapper.realClass : return $r3
com.thoughtworks.xstream.mapper.DynamicProxyMapper.realClass : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : return $r13
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : return $r13 >>>>>>>> com.thoughtworks.xstream.mapper.CachingMapper.realClass : $r6 = r0.<com.thoughtworks.xstream.mapper.CachingMapper: java.util.Map cache>
com.thoughtworks.xstream.mapper.CachingMapper.realClass : $r6 = r0.<com.thoughtworks.xstream.mapper.CachingMapper: java.util.Map cache> >>>>>>>> com.thoughtworks.xstream.mapper.CachingMapper.realClass : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3)
com.thoughtworks.xstream.mapper.CachingMapper.realClass : interfaceinvoke $r6.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> com.thoughtworks.xstream.mapper.CachingMapper.realClass : return r3
com.thoughtworks.xstream.mapper.CachingMapper.realClass : return r3 >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : goto [?= r4 = virtualinvoke r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: java.lang.Object convertAnother(java.lang.Object,java.lang.Class)>(null, r3)]
com.thoughtworks.xstream.core.TreeUnmarshaller.start : goto [?= r4 = virtualinvoke r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: java.lang.Object convertAnother(java.lang.Object,java.lang.Class)>(null, r3)] >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : r4 = virtualinvoke r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: java.lang.Object convertAnother(java.lang.Object,java.lang.Class)>(null, r3)
com.thoughtworks.xstream.core.TreeUnmarshaller.start : r4 = virtualinvoke r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: java.lang.Object convertAnother(java.lang.Object,java.lang.Class)>(null, r3) >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother : $r4 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.converters.ConverterLookup converterLookup>
com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother : $r4 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.converters.ConverterLookup converterLookup> >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother : r3 = interfaceinvoke $r4.<com.thoughtworks.xstream.converters.ConverterLookup: com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)>(r2)
com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother : r3 = interfaceinvoke $r4.<com.thoughtworks.xstream.converters.ConverterLookup: com.thoughtworks.xstream.converters.Converter lookupConverterForType(java.lang.Class)>(r2) >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother : $r5 = virtualinvoke r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)>(r1, r2, r3)
com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother : $r5 = virtualinvoke r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)>(r1, r2, r3) >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r7 = r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: com.thoughtworks.xstream.core.util.FastStack parentStack>
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r7 = r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: com.thoughtworks.xstream.core.util.FastStack parentStack> >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $i0 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $i0 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : if $i0 <= 0
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : if $i0 <= 0 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r12 = r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: com.thoughtworks.xstream.io.HierarchicalStreamReader reader>
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r12 = r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: com.thoughtworks.xstream.io.HierarchicalStreamReader reader> >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r13 = virtualinvoke r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: com.thoughtworks.xstream.mapper.Mapper getMapper()>()
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r13 = virtualinvoke r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: com.thoughtworks.xstream.mapper.Mapper getMapper()>() >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.getMapper : $r1 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.core.TreeUnmarshaller.getMapper : $r1 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.getMapper : return $r1
com.thoughtworks.xstream.core.TreeUnmarshaller.getMapper : return $r1 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r14 = interfaceinvoke $r13.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String aliasForAttribute(java.lang.String)>("reference")
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r14 = interfaceinvoke $r13.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String aliasForAttribute(java.lang.String)>("reference") >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : r15 = interfaceinvoke $r12.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getAttribute(java.lang.String)>($r14)
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : r15 = interfaceinvoke $r12.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getAttribute(java.lang.String)>($r14) >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : if r15 == null
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : if r15 == null >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : r5 = virtualinvoke r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: java.lang.Object getCurrentReferenceKey()>()
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : r5 = virtualinvoke r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: java.lang.Object getCurrentReferenceKey()>() >>>>>>>> com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller.getCurrentReferenceKey : $r1 = r0.<com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller: com.thoughtworks.xstream.io.path.PathTracker pathTracker>
com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller.getCurrentReferenceKey : $r1 = r0.<com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller: com.thoughtworks.xstream.io.path.PathTracker pathTracker> >>>>>>>> com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller.getCurrentReferenceKey : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path getPath()>()
com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller.getCurrentReferenceKey : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path getPath()>() >>>>>>>> com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller.getCurrentReferenceKey : return $r2
com.thoughtworks.xstream.core.ReferenceByXPathUnmarshaller.getCurrentReferenceKey : return $r2 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r19 = r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: com.thoughtworks.xstream.core.util.FastStack parentStack>
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r19 = r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: com.thoughtworks.xstream.core.util.FastStack parentStack> >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : virtualinvoke $r19.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r5)
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : virtualinvoke $r19.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r5) >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : r6 = specialinvoke r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)>(r1, r2, r3)
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : r6 = specialinvoke r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: java.lang.Object convert(java.lang.Object,java.lang.Class,com.thoughtworks.xstream.converters.Converter)>(r1, r2, r3) >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.convert : $r6 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.core.util.FastStack types>
com.thoughtworks.xstream.core.TreeUnmarshaller.convert : $r6 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.core.util.FastStack types> >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.convert : $r7 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.core.TreeUnmarshaller.convert : $r7 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.convert : $r8 = interfaceinvoke $r7.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class defaultImplementationOf(java.lang.Class)>(r2)
com.thoughtworks.xstream.core.TreeUnmarshaller.convert : $r8 = interfaceinvoke $r7.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class defaultImplementationOf(java.lang.Class)>(r2) >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.convert : virtualinvoke $r6.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r8)
com.thoughtworks.xstream.core.TreeUnmarshaller.convert : virtualinvoke $r6.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r8) >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.convert : $r10 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.io.HierarchicalStreamReader reader>
com.thoughtworks.xstream.core.TreeUnmarshaller.convert : $r10 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.io.HierarchicalStreamReader reader> >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.convert : r4 = interfaceinvoke r3.<com.thoughtworks.xstream.converters.Converter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>($r10, r0)
com.thoughtworks.xstream.core.TreeUnmarshaller.convert : r4 = interfaceinvoke r3.<com.thoughtworks.xstream.converters.Converter: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>($r10, r0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.unmarshal : r3 = virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>(r1, r2)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.unmarshal : r3 = virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: java.lang.Object instantiateNewInstance(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : $r5 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : $r5 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : $r6 = interfaceinvoke $r5.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String aliasForAttribute(java.lang.String)>("resolves-to")
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : $r6 = interfaceinvoke $r5.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String aliasForAttribute(java.lang.String)>("resolves-to") >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : r3 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getAttribute(java.lang.String)>($r6)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : r3 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getAttribute(java.lang.String)>($r6) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : r4 = interfaceinvoke r2.<com.thoughtworks.xstream.converters.UnmarshallingContext: java.lang.Object currentObject()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : r4 = interfaceinvoke r2.<com.thoughtworks.xstream.converters.UnmarshallingContext: java.lang.Object currentObject()>() >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.currentObject : $r1 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.core.util.FastStack types>
com.thoughtworks.xstream.core.TreeUnmarshaller.currentObject : $r1 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.core.util.FastStack types> >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.currentObject : $i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.core.TreeUnmarshaller.currentObject : $i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.currentObject : if $i0 != 1
com.thoughtworks.xstream.core.TreeUnmarshaller.currentObject : if $i0 != 1 >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.currentObject : $r2 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: java.lang.Object root>
com.thoughtworks.xstream.core.TreeUnmarshaller.currentObject : $r2 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: java.lang.Object root> >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.currentObject : goto [?= return $r2]
com.thoughtworks.xstream.core.TreeUnmarshaller.currentObject : goto [?= return $r2] >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.currentObject : return $r2
com.thoughtworks.xstream.core.TreeUnmarshaller.currentObject : return $r2 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : if r4 == null
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : if r4 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : if r3 == null
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : if r3 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : $r11 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : $r11 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : $r12 = interfaceinvoke r2.<com.thoughtworks.xstream.converters.UnmarshallingContext: java.lang.Class getRequiredType()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : $r12 = interfaceinvoke r2.<com.thoughtworks.xstream.converters.UnmarshallingContext: java.lang.Class getRequiredType()>() >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.getRequiredType : $r1 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.core.util.FastStack types>
com.thoughtworks.xstream.core.TreeUnmarshaller.getRequiredType : $r1 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.core.util.FastStack types> >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.getRequiredType : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.core.TreeUnmarshaller.getRequiredType : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.getRequiredType : $r3 = (java.lang.Class) $r2
com.thoughtworks.xstream.core.TreeUnmarshaller.getRequiredType : $r3 = (java.lang.Class) $r2 >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.getRequiredType : return $r3
com.thoughtworks.xstream.core.TreeUnmarshaller.getRequiredType : return $r3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : $r13 = interfaceinvoke $r11.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: java.lang.Object newInstance(java.lang.Class)>($r12)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : $r13 = interfaceinvoke $r11.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: java.lang.Object newInstance(java.lang.Class)>($r12) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : return $r13
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.instantiateNewInstance : return $r13 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.unmarshal : r4 = virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>(r3, r1, r2)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.unmarshal : r4 = virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: java.lang.Object doUnmarshal(java.lang.Object,com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.converters.UnmarshallingContext)>(r3, r1, r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r4 = new com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r4 = new com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : specialinvoke $r4.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields: void <init>(com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1)>(null)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : specialinvoke $r4.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields: void <init>(com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$1)>(null) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : r5 = $r4
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : r5 = $r4 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : r6 = interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.util.Iterator getAttributeNames()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : r6 = interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.util.Iterator getAttributeNames()>() >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.getAttributeNames : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped>
com.thoughtworks.xstream.io.ReaderWrapper.getAttributeNames : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped> >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.getAttributeNames : $r2 = interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.util.Iterator getAttributeNames()>()
com.thoughtworks.xstream.io.ReaderWrapper.getAttributeNames : $r2 = interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.util.Iterator getAttributeNames()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getAttributeNames : $r1 = new com.thoughtworks.xstream.io.AttributeNameIterator
com.thoughtworks.xstream.io.xml.AbstractPullReader.getAttributeNames : $r1 = new com.thoughtworks.xstream.io.AttributeNameIterator >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getAttributeNames : specialinvoke $r1.<com.thoughtworks.xstream.io.AttributeNameIterator: void <init>(com.thoughtworks.xstream.io.HierarchicalStreamReader)>(r0)
com.thoughtworks.xstream.io.xml.AbstractPullReader.getAttributeNames : specialinvoke $r1.<com.thoughtworks.xstream.io.AttributeNameIterator: void <init>(com.thoughtworks.xstream.io.HierarchicalStreamReader)>(r0) >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : $i0 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>()
com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : $i0 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : return $i0
com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : return $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getAttributeNames : return $r1
com.thoughtworks.xstream.io.xml.AbstractPullReader.getAttributeNames : return $r1 >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.getAttributeNames : return $r2
com.thoughtworks.xstream.io.ReaderWrapper.getAttributeNames : return $r2 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.io.AttributeNameIterator.hasNext : $i0 = r0.<com.thoughtworks.xstream.io.AttributeNameIterator: int current>
com.thoughtworks.xstream.io.AttributeNameIterator.hasNext : $i0 = r0.<com.thoughtworks.xstream.io.AttributeNameIterator: int current> >>>>>>>> com.thoughtworks.xstream.io.AttributeNameIterator.hasNext : $i1 = r0.<com.thoughtworks.xstream.io.AttributeNameIterator: int count>
com.thoughtworks.xstream.io.AttributeNameIterator.hasNext : $i1 = r0.<com.thoughtworks.xstream.io.AttributeNameIterator: int count> >>>>>>>> com.thoughtworks.xstream.io.AttributeNameIterator.hasNext : if $i0 >= $i1
com.thoughtworks.xstream.io.AttributeNameIterator.hasNext : if $i0 >= $i1 >>>>>>>> com.thoughtworks.xstream.io.AttributeNameIterator.hasNext : $z0 = 0
com.thoughtworks.xstream.io.AttributeNameIterator.hasNext : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.io.AttributeNameIterator.hasNext : return $z0
com.thoughtworks.xstream.io.AttributeNameIterator.hasNext : return $z0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : if $z1 == 0
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : r24 = null
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : r24 = null >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $z2 = interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: boolean hasMoreChildren()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $z2 = interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: boolean hasMoreChildren()>() >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.hasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped>
com.thoughtworks.xstream.io.ReaderWrapper.hasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped> >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.hasMoreChildren : $z0 = interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: boolean hasMoreChildren()>()
com.thoughtworks.xstream.io.ReaderWrapper.hasMoreChildren : $z0 = interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: boolean hasMoreChildren()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void mark()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void mark()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.mark : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 1
com.thoughtworks.xstream.io.xml.AbstractPullReader.mark : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z1 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z1 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z1 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r7 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r7 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r8 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r8 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b3 = 3
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b3 = 3 >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b3
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullText()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullText()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullText : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.pullText : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullText : $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>()
com.thoughtworks.xstream.io.xml.XppReader.pullText : $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullText : return $r2
com.thoughtworks.xstream.io.xml.XppReader.pullText : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> = $r3
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> = $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : goto [?= return r2]
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : goto [?= return r2] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r9 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r8)
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r9 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r8) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r10 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r9
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r10 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r10
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r10 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : lookupswitch($i0) {     case 1:
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : lookupswitch($i0) {     case 1: >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : goto [?= $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()]
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : goto [?= $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $z0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $z0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 1
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : goto [?= return $z0]
com.thoughtworks.xstream.core.util.FastStack.hasStuff : goto [?= return $z0] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : if $z0 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r4)
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r4) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : goto [?= $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>]
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : goto [?= $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 1
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 1 >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.hasMoreChildren : return $z0
com.thoughtworks.xstream.io.ReaderWrapper.hasMoreChildren : return $z0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : if $z2 == 0
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveDown()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveDown()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.ReaderWrapper: void moveDown()>()
com.thoughtworks.xstream.io.path.PathTrackingReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.ReaderWrapper: void moveDown()>() >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped>
com.thoughtworks.xstream.io.ReaderWrapper.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped> >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.moveDown : interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveDown()>()
com.thoughtworks.xstream.io.ReaderWrapper.moveDown : interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveDown()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r12 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r12 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r13 = virtualinvoke $r12.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r13 = virtualinvoke $r12.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r14 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r13
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r14 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r13 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r14
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r14 >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.path.PathTrackingReader: com.thoughtworks.xstream.io.path.PathTracker pathTracker>
com.thoughtworks.xstream.io.path.PathTrackingReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.path.PathTrackingReader: com.thoughtworks.xstream.io.path.PathTracker pathTracker> >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingReader.moveDown : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.path.PathTrackingReader: java.lang.String getNodeName()>()
com.thoughtworks.xstream.io.path.PathTrackingReader.moveDown : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.path.PathTrackingReader: java.lang.String getNodeName()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingReader.moveDown : virtualinvoke $r1.<com.thoughtworks.xstream.io.path.PathTracker: void pushElement(java.lang.String)>($r2)
com.thoughtworks.xstream.io.path.PathTrackingReader.moveDown : virtualinvoke $r1.<com.thoughtworks.xstream.io.path.PathTracker: void pushElement(java.lang.String)>($r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r25 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r25 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r26 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r26 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r27 = interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getNodeName()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r27 = interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getNodeName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : r28 = interfaceinvoke $r25.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String realMember(java.lang.Class,java.lang.String)>($r26, $r27)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : r28 = interfaceinvoke $r25.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String realMember(java.lang.Class,java.lang.String)>($r26, $r27) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.realMember : $r3 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.realMember : $r3 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.realMember : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String realMember(java.lang.Class,java.lang.String)>(r1, r2)
com.thoughtworks.xstream.mapper.MapperWrapper.realMember : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String realMember(java.lang.Class,java.lang.String)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.OuterClassMapper.realMember : $r3 = r0.<com.thoughtworks.xstream.mapper.OuterClassMapper: java.lang.String alias>
com.thoughtworks.xstream.mapper.OuterClassMapper.realMember : $r3 = r0.<com.thoughtworks.xstream.mapper.OuterClassMapper: java.lang.String alias> >>>>>>>> com.thoughtworks.xstream.mapper.OuterClassMapper.realMember : $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r3)
com.thoughtworks.xstream.mapper.OuterClassMapper.realMember : $z0 = virtualinvoke r2.<java.lang.String: boolean equals(java.lang.Object)>($r3) >>>>>>>> com.thoughtworks.xstream.mapper.OuterClassMapper.realMember : if $z0 == 0
com.thoughtworks.xstream.mapper.OuterClassMapper.realMember : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.OuterClassMapper.realMember : $r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String realMember(java.lang.Class,java.lang.String)>(r1, r2)
com.thoughtworks.xstream.mapper.OuterClassMapper.realMember : $r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.MapperWrapper: java.lang.String realMember(java.lang.Class,java.lang.String)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.realMember : $r4 = r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.util.Map aliasToFieldMap>
com.thoughtworks.xstream.mapper.FieldAliasingMapper.realMember : $r4 = r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.util.Map aliasToFieldMap> >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.realMember : $r5 = specialinvoke r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.lang.Object key(java.lang.Class,java.lang.String)>(r1, r2)
com.thoughtworks.xstream.mapper.FieldAliasingMapper.realMember : $r5 = specialinvoke r0.<com.thoughtworks.xstream.mapper.FieldAliasingMapper: java.lang.Object key(java.lang.Class,java.lang.String)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.realMember : $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5)
com.thoughtworks.xstream.mapper.FieldAliasingMapper.realMember : $r6 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>($r5) >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.realMember : r3 = (java.lang.String) $r6
com.thoughtworks.xstream.mapper.FieldAliasingMapper.realMember : r3 = (java.lang.String) $r6 >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.realMember : if r3 != null
com.thoughtworks.xstream.mapper.FieldAliasingMapper.realMember : if r3 != null >>>>>>>> com.thoughtworks.xstream.mapper.FieldAliasingMapper.realMember : return r3
com.thoughtworks.xstream.mapper.FieldAliasingMapper.realMember : return r3 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.realMember : return $r4
com.thoughtworks.xstream.mapper.MapperWrapper.realMember : return $r4 >>>>>>>> com.thoughtworks.xstream.mapper.OuterClassMapper.realMember : return $r4
com.thoughtworks.xstream.mapper.OuterClassMapper.realMember : return $r4 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r29 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r29 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r30 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r30 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r31 = interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getNodeName()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r31 = interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getNodeName()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r32 = interfaceinvoke $r29.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper$ImplicitCollectionMapping getImplicitCollectionDefForFieldName(java.lang.Class,java.lang.String)>($r30, $r31)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r32 = interfaceinvoke $r29.<com.thoughtworks.xstream.mapper.Mapper: com.thoughtworks.xstream.mapper.Mapper$ImplicitCollectionMapping getImplicitCollectionDefForFieldName(java.lang.Class,java.lang.String)>($r30, $r31) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : if $r32 == null
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : if $r32 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $z3 = 0
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $z3 = 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : z4 = $z3
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : z4 = $z3 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : r33 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)>(r2)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : r33 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: java.lang.Class determineWhichClassDefinesField(com.thoughtworks.xstream.io.HierarchicalStreamReader)>(r2) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineWhichClassDefinesField : $r3 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineWhichClassDefinesField : $r3 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineWhichClassDefinesField : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String aliasForAttribute(java.lang.String)>("defined-in")
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineWhichClassDefinesField : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String aliasForAttribute(java.lang.String)>("defined-in") >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineWhichClassDefinesField : r2 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getAttribute(java.lang.String)>($r4)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineWhichClassDefinesField : r2 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getAttribute(java.lang.String)>($r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineWhichClassDefinesField : if r2 != null
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineWhichClassDefinesField : if r2 != null >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineWhichClassDefinesField : $r5 = null
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineWhichClassDefinesField : $r5 = null >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineWhichClassDefinesField : goto [?= return $r5]
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineWhichClassDefinesField : goto [?= return $r5] >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineWhichClassDefinesField : return $r5
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineWhichClassDefinesField : return $r5 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : if z4 != 0
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : if z4 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r34 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r34 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r35 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r35 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $z5 = interfaceinvoke $r34.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: boolean fieldDefinedInClass(java.lang.String,java.lang.Class)>(r28, $r35)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $z5 = interfaceinvoke $r34.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: boolean fieldDefinedInClass(java.lang.String,java.lang.Class)>(r28, $r35) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldDefinedInClass : $r4 = r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: com.thoughtworks.xstream.converters.reflection.FieldDictionary fieldDictionary>
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldDefinedInClass : $r4 = r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: com.thoughtworks.xstream.converters.reflection.FieldDictionary fieldDictionary> >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldDefinedInClass : r3 = virtualinvoke $r4.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)>(r2, r1, null)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldDefinedInClass : r3 = virtualinvoke $r4.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)>(r2, r1, null) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldDefinedInClass : $z0 = virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: boolean fieldModifiersSupported(java.lang.reflect.Field)>(r3)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldDefinedInClass : $z0 = virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: boolean fieldModifiersSupported(java.lang.reflect.Field)>(r3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldDefinedInClass : return $z0
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.fieldDefinedInClass : return $z0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : if $z5 == 0
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : if $z5 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $z6 = 1
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $z6 = 1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : goto [?= z7 = $z6]
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : goto [?= z7 = $z6] >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : z7 = $z6
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : z7 = $z6 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : r36 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)>(r2, z7, r1, r28, r33)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : r36 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: java.lang.Class determineType(com.thoughtworks.xstream.io.HierarchicalStreamReader,boolean,java.lang.Object,java.lang.String,java.lang.Class)>(r2, z7, r1, r28, r33) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : $r7 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : $r7 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : $r8 = interfaceinvoke $r7.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String aliasForAttribute(java.lang.String)>("class")
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : $r8 = interfaceinvoke $r7.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String aliasForAttribute(java.lang.String)>("class") >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : r5 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getAttribute(java.lang.String)>($r8)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : r5 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getAttribute(java.lang.String)>($r8) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : if r5 == null
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : if r5 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : if z0 != 0
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : if z0 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : $r16 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : $r16 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.mapper.Mapper mapper> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : $r17 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : $r17 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : $r18 = interfaceinvoke $r17.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: java.lang.Class getFieldType(java.lang.Object,java.lang.String,java.lang.Class)>(r2, r3, r4)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : $r18 = interfaceinvoke $r17.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: java.lang.Class getFieldType(java.lang.Object,java.lang.String,java.lang.Class)>(r2, r3, r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.getFieldType : $r4 = r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: com.thoughtworks.xstream.converters.reflection.FieldDictionary fieldDictionary>
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.getFieldType : $r4 = r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: com.thoughtworks.xstream.converters.reflection.FieldDictionary fieldDictionary> >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.getFieldType : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.getFieldType : $r5 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.getFieldType : $r6 = virtualinvoke $r4.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)>($r5, r2, r3)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.getFieldType : $r6 = virtualinvoke $r4.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)>($r5, r2, r3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.getFieldType : $r7 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.Class getType()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.getFieldType : $r7 = virtualinvoke $r6.<java.lang.reflect.Field: java.lang.Class getType()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.getFieldType : return $r7
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.getFieldType : return $r7 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : $r19 = interfaceinvoke $r16.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class defaultImplementationOf(java.lang.Class)>($r18)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : $r19 = interfaceinvoke $r16.<com.thoughtworks.xstream.mapper.Mapper: java.lang.Class defaultImplementationOf(java.lang.Class)>($r18) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : return $r19
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.determineType : return $r19 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : if z7 == 0
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : if z7 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r37 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r37 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r38 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r38 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : r12 = interfaceinvoke $r37.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: java.lang.reflect.Field getField(java.lang.Class,java.lang.String)>($r38, r28)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : r12 = interfaceinvoke $r37.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: java.lang.reflect.Field getField(java.lang.Class,java.lang.String)>($r38, r28) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : r13 = virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: java.lang.Object unmarshallField(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.lang.Class,java.lang.reflect.Field)>(r3, r1, r36, r12)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : r13 = virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: java.lang.Object unmarshallField(com.thoughtworks.xstream.converters.UnmarshallingContext,java.lang.Object,java.lang.Class,java.lang.reflect.Field)>(r3, r1, r36, r12) >>>>>>>> com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.unmarshallField : $r6 = r0.<com.thoughtworks.xstream.annotations.AnnotationReflectionConverter: com.thoughtworks.xstream.annotations.AnnotationProvider annotationProvider>
com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.unmarshallField : $r6 = r0.<com.thoughtworks.xstream.annotations.AnnotationReflectionConverter: com.thoughtworks.xstream.annotations.AnnotationProvider annotationProvider> >>>>>>>> com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.unmarshallField : $r7 = virtualinvoke $r6.<com.thoughtworks.xstream.annotations.AnnotationProvider: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Field,java.lang.Class)>(r4, class "com/thoughtworks/xstream/annotations/XStreamConverter")
com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.unmarshallField : $r7 = virtualinvoke $r6.<com.thoughtworks.xstream.annotations.AnnotationProvider: java.lang.annotation.Annotation getAnnotation(java.lang.reflect.Field,java.lang.Class)>(r4, class "com/thoughtworks/xstream/annotations/XStreamConverter") >>>>>>>> com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.unmarshallField : r5 = (com.thoughtworks.xstream.annotations.XStreamConverter) $r7
com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.unmarshallField : r5 = (com.thoughtworks.xstream.annotations.XStreamConverter) $r7 >>>>>>>> com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.unmarshallField : if r5 == null
com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.unmarshallField : if r5 == null >>>>>>>> com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.unmarshallField : $r13 = interfaceinvoke r1.<com.thoughtworks.xstream.converters.UnmarshallingContext: java.lang.Object convertAnother(java.lang.Object,java.lang.Class)>(r2, r3)
com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.unmarshallField : $r13 = interfaceinvoke r1.<com.thoughtworks.xstream.converters.UnmarshallingContext: java.lang.Object convertAnother(java.lang.Object,java.lang.Class)>(r2, r3) >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r8 = r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: com.thoughtworks.xstream.core.util.FastStack parentStack>
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r8 = r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: com.thoughtworks.xstream.core.util.FastStack parentStack> >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : r4 = virtualinvoke $r8.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : r4 = virtualinvoke $r8.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : if r4 == null
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : if r4 == null >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r9 = r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: java.util.Map values>
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r9 = r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: java.util.Map values> >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $z0 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r4)
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $z0 = interfaceinvoke $r9.<java.util.Map: boolean containsKey(java.lang.Object)>(r4) >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : if $z0 != 0
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r10 = r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: java.util.Map values>
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r10 = r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: java.util.Map values> >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r1)
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : interfaceinvoke $r10.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r4, r1) >>>>>>>> com.thoughtworks.xstream.io.path.Path.hashCode : i0 = 543645643
com.thoughtworks.xstream.io.path.Path.hashCode : i0 = 543645643 >>>>>>>> com.thoughtworks.xstream.io.path.Path.hashCode : i1 = 0
com.thoughtworks.xstream.io.path.Path.hashCode : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.path.Path.hashCode : $r1 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
com.thoughtworks.xstream.io.path.Path.hashCode : $r1 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks> >>>>>>>> com.thoughtworks.xstream.io.path.Path.hashCode : $i2 = lengthof $r1
com.thoughtworks.xstream.io.path.Path.hashCode : $i2 = lengthof $r1 >>>>>>>> com.thoughtworks.xstream.io.path.Path.hashCode : if i1 >= $i2
com.thoughtworks.xstream.io.path.Path.hashCode : if i1 >= $i2 >>>>>>>> com.thoughtworks.xstream.io.path.Path.hashCode : $i3 = 29 * i0
com.thoughtworks.xstream.io.path.Path.hashCode : $i3 = 29 * i0 >>>>>>>> com.thoughtworks.xstream.io.path.Path.hashCode : $r2 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
com.thoughtworks.xstream.io.path.Path.hashCode : $r2 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks> >>>>>>>> com.thoughtworks.xstream.io.path.Path.hashCode : $r3 = $r2[i1]
com.thoughtworks.xstream.io.path.Path.hashCode : $r3 = $r2[i1] >>>>>>>> com.thoughtworks.xstream.io.path.Path.hashCode : $i4 = virtualinvoke $r3.<java.lang.String: int hashCode()>()
com.thoughtworks.xstream.io.path.Path.hashCode : $i4 = virtualinvoke $r3.<java.lang.String: int hashCode()>() >>>>>>>> com.thoughtworks.xstream.io.path.Path.hashCode : i0 = $i3 + $i4
com.thoughtworks.xstream.io.path.Path.hashCode : i0 = $i3 + $i4 >>>>>>>> com.thoughtworks.xstream.io.path.Path.hashCode : i1 = i1 + 1
com.thoughtworks.xstream.io.path.Path.hashCode : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.Path.hashCode : goto [?= $r1 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>]
com.thoughtworks.xstream.io.path.Path.hashCode : goto [?= $r1 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>] >>>>>>>> com.thoughtworks.xstream.io.path.Path.hashCode : return i0
com.thoughtworks.xstream.io.path.Path.hashCode : return i0 >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.unmarshal : $r3 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getValue()>()
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.unmarshal : $r3 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getValue()>() >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.getValue : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped>
com.thoughtworks.xstream.io.ReaderWrapper.getValue : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped> >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.getValue : $r2 = interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getValue()>()
com.thoughtworks.xstream.io.ReaderWrapper.getValue : $r2 = interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getValue()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r1 = null
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r1 = null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r2 = null
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r2 = null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void mark()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void mark()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r3 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r3 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $i0 = r3.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $i0 = r3.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if $i0 != 3
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if $i0 != 3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r4 = r3.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value>
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r4 = r3.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if r4 == null
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if r4 == null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $i1 = virtualinvoke r4.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $i1 = virtualinvoke r4.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if $i1 <= 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if $i1 <= 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if r1 != null
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if r1 != null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r1 = r4
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r1 = r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : goto [?= r3 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()]
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : goto [?= r3 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()] >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b2 = 2
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b2 = 2 >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b2
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : goto [?= $i0 = r3.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>]
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : goto [?= $i0 = r3.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $i2 = r3.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $i2 = r3.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if $i2 == 4
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if $i2 == 4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : goto [?= virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>()]
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : goto [?= virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>()] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if r2 == null
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if r2 == null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $r8 = r1
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $r8 = r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : return $r8
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : return $r8 >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.getValue : return $r2
com.thoughtworks.xstream.io.ReaderWrapper.getValue : return $r2 >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.unmarshal : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.converters.SingleValueConverterWrapper: java.lang.Object fromString(java.lang.String)>($r3)
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.unmarshal : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.converters.SingleValueConverterWrapper: java.lang.Object fromString(java.lang.String)>($r3) >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.fromString : $r2 = r0.<com.thoughtworks.xstream.converters.SingleValueConverterWrapper: com.thoughtworks.xstream.converters.SingleValueConverter wrapped>
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.fromString : $r2 = r0.<com.thoughtworks.xstream.converters.SingleValueConverterWrapper: com.thoughtworks.xstream.converters.SingleValueConverter wrapped> >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.fromString : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.converters.SingleValueConverter: java.lang.Object fromString(java.lang.String)>(r1)
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.fromString : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.converters.SingleValueConverter: java.lang.Object fromString(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.converters.basic.StringConverter.fromString : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String intern()>()
com.thoughtworks.xstream.converters.basic.StringConverter.fromString : $r2 = virtualinvoke r1.<java.lang.String: java.lang.String intern()>() >>>>>>>> com.thoughtworks.xstream.converters.basic.StringConverter.fromString : return $r2
com.thoughtworks.xstream.converters.basic.StringConverter.fromString : return $r2 >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.fromString : return $r3
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.fromString : return $r3 >>>>>>>> com.thoughtworks.xstream.converters.SingleValueConverterWrapper.unmarshal : return $r4
com.thoughtworks.xstream.converters.SingleValueConverterWrapper.unmarshal : return $r4 >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.convert : $r11 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.core.util.FastStack types>
com.thoughtworks.xstream.core.TreeUnmarshaller.convert : $r11 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.core.util.FastStack types> >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.convert : virtualinvoke $r11.<com.thoughtworks.xstream.core.util.FastStack: void popSilently()>()
com.thoughtworks.xstream.core.TreeUnmarshaller.convert : virtualinvoke $r11.<com.thoughtworks.xstream.core.util.FastStack: void popSilently()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.popSilently : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $i1 = $i0 - 1
com.thoughtworks.xstream.core.util.FastStack.popSilently : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1
com.thoughtworks.xstream.core.util.FastStack.popSilently : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2[$i1] = null
com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2[$i1] = null >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.convert : return r4
com.thoughtworks.xstream.core.TreeUnmarshaller.convert : return r4 >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : if r5 == null
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : if r5 == null >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r21 = r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: java.util.Map values>
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r21 = r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: java.util.Map values> >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6)
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : interfaceinvoke $r21.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r5, r6) >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r23 = r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: com.thoughtworks.xstream.core.util.FastStack parentStack>
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : $r23 = r0.<com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller: com.thoughtworks.xstream.core.util.FastStack parentStack> >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : virtualinvoke $r23.<com.thoughtworks.xstream.core.util.FastStack: void popSilently()>()
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : virtualinvoke $r23.<com.thoughtworks.xstream.core.util.FastStack: void popSilently()>() >>>>>>>> com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : return r6
com.thoughtworks.xstream.core.AbstractReferenceUnmarshaller.convert : return r6 >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother : return $r5
com.thoughtworks.xstream.core.TreeUnmarshaller.convertAnother : return $r5 >>>>>>>> com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.unmarshallField : return $r13
com.thoughtworks.xstream.annotations.AnnotationReflectionConverter.unmarshallField : return $r13 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : goto [?= (branch)]
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : if r13 == null
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : if r13 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r39 = virtualinvoke r13.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r39 = virtualinvoke r13.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $z8 = virtualinvoke r36.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r39)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $z8 = virtualinvoke r36.<java.lang.Class: boolean isAssignableFrom(java.lang.Class)>($r39) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : if $z8 != 0
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : if $z8 != 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r50 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : $r50 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.ReflectionProvider reflectionProvider> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : interfaceinvoke $r50.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)>(r1, r28, r13, r33)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : interfaceinvoke $r50.<com.thoughtworks.xstream.converters.reflection.ReflectionProvider: void writeField(java.lang.Object,java.lang.String,java.lang.Object,java.lang.Class)>(r1, r28, r13, r33) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : $r7 = r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: com.thoughtworks.xstream.converters.reflection.FieldDictionary fieldDictionary>
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : $r7 = r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: com.thoughtworks.xstream.converters.reflection.FieldDictionary fieldDictionary> >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : $r8 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : r5 = virtualinvoke $r7.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)>($r8, r2, r4)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : r5 = virtualinvoke $r7.<com.thoughtworks.xstream.converters.reflection.FieldDictionary: java.lang.reflect.Field field(java.lang.Class,java.lang.String,java.lang.Class)>($r8, r2, r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: void validateFieldAccess(java.lang.reflect.Field)>(r5)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : virtualinvoke r0.<com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider: void validateFieldAccess(java.lang.reflect.Field)>(r5) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : virtualinvoke r5.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r1, r3)
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : virtualinvoke r5.<java.lang.reflect.Field: void set(java.lang.Object,java.lang.Object)>(r1, r3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : goto [?= return]
com.thoughtworks.xstream.converters.reflection.PureJavaReflectionProvider.writeField : goto [?= return] >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : virtualinvoke r5.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields: void add(java.lang.Class,java.lang.String)>(r33, r28)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : virtualinvoke r5.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields: void add(java.lang.Class,java.lang.String)>(r33, r28) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields.add : r3 = r2
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields.add : r3 = r2 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields.add : if r1 == null
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields.add : if r1 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields.add : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields: java.util.Set seen>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields.add : $r10 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields: java.util.Set seen> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields.add : $z0 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>(r3)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields.add : $z0 = interfaceinvoke $r10.<java.util.Set: boolean contains(java.lang.Object)>(r3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields.add : if $z0 == 0
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields.add : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields.add : $r12 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields: java.util.Set seen>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields.add : $r12 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields: java.util.Set seen> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields.add : interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>(r3)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter$SeenFields.add : interfaceinvoke $r12.<java.util.Set: boolean add(java.lang.Object)>(r3) >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : goto [?= interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveUp()>()]
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : goto [?= interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveUp()>()] >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveUp()>()
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveUp()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingReader.moveUp : specialinvoke r0.<com.thoughtworks.xstream.io.ReaderWrapper: void moveUp()>()
com.thoughtworks.xstream.io.path.PathTrackingReader.moveUp : specialinvoke r0.<com.thoughtworks.xstream.io.ReaderWrapper: void moveUp()>() >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped>
com.thoughtworks.xstream.io.ReaderWrapper.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped> >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.moveUp : interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveUp()>()
com.thoughtworks.xstream.io.ReaderWrapper.moveUp : interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveUp()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : if $i1 < i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : if $i1 < i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : goto [?= $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>]
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : goto [?= $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingReader.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.path.PathTrackingReader: com.thoughtworks.xstream.io.path.PathTracker pathTracker>
com.thoughtworks.xstream.io.path.PathTrackingReader.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.path.PathTrackingReader: com.thoughtworks.xstream.io.path.PathTracker pathTracker> >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingReader.moveUp : virtualinvoke $r1.<com.thoughtworks.xstream.io.path.PathTracker: void popElement()>()
com.thoughtworks.xstream.io.path.PathTrackingReader.moveUp : virtualinvoke $r1.<com.thoughtworks.xstream.io.path.PathTracker: void popElement()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : goto [?= $z2 = interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: boolean hasMoreChildren()>()]
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : goto [?= $z2 = interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamReader: boolean hasMoreChildren()>()] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 0 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : return r1
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.doUnmarshal : return r1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.unmarshal : $r5 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker serializationMethodInvoker>
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.unmarshal : $r5 = r0.<com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter: com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker serializationMethodInvoker> >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.unmarshal : $r6 = virtualinvoke $r5.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.Object callReadResolve(java.lang.Object)>(r4)
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.unmarshal : $r6 = virtualinvoke $r5.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.Object callReadResolve(java.lang.Object)>(r4) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callReadResolve : if r1 != null
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callReadResolve : if r1 != null >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callReadResolve : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callReadResolve : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callReadResolve : r2 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[],boolean)>($r4, "readResolve", null, 1)
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callReadResolve : r2 = specialinvoke r0.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.reflect.Method getMethod(java.lang.Class,java.lang.String,java.lang.Class[],boolean)>($r4, "readResolve", null, 1) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callReadResolve : if r2 == null
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callReadResolve : if r2 == null >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callReadResolve : return r1
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.callReadResolve : return r1 >>>>>>>> com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.unmarshal : return $r6
com.thoughtworks.xstream.converters.reflection.AbstractReflectionConverter.unmarshal : return $r6 >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : $r14 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.core.util.PrioritizedList validationList>
com.thoughtworks.xstream.core.TreeUnmarshaller.start : $r14 = r0.<com.thoughtworks.xstream.core.TreeUnmarshaller: com.thoughtworks.xstream.core.util.PrioritizedList validationList> >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : r5 = virtualinvoke $r14.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Iterator iterator()>()
com.thoughtworks.xstream.core.TreeUnmarshaller.start : r5 = virtualinvoke $r14.<com.thoughtworks.xstream.core.util.PrioritizedList: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
com.thoughtworks.xstream.core.TreeUnmarshaller.start : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : if $z0 == 0
com.thoughtworks.xstream.core.TreeUnmarshaller.start : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.core.TreeUnmarshaller.start : return r4
com.thoughtworks.xstream.core.TreeUnmarshaller.start : return r4 >>>>>>>> com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.unmarshal : return $r7
com.thoughtworks.xstream.core.ReferenceByXPathMarshallingStrategy.unmarshal : return $r7 >>>>>>>> com.thoughtworks.xstream.XStream.unmarshal : return $r7
com.thoughtworks.xstream.XStream.unmarshal : return $r7 >>>>>>>> com.thoughtworks.xstream.XStream.unmarshal : return $r3
com.thoughtworks.xstream.XStream.unmarshal : return $r3 >>>>>>>> com.thoughtworks.xstream.XStream.fromXML : return $r4
com.thoughtworks.xstream.XStream.fromXML : return $r4 >>>>>>>> com.thoughtworks.xstream.XStream.fromXML : return $r3
com.thoughtworks.xstream.XStream.fromXML : return $r3 >>>>>>>> com.thoughtworks.acceptance.StandardObject.equals : $z0 = staticinvoke <org.apache.commons.lang.builder.EqualsBuilder: boolean reflectionEquals(java.lang.Object,java.lang.Object)>(r0, r1)
com.thoughtworks.acceptance.StandardObject.equals : $z0 = staticinvoke <org.apache.commons.lang.builder.EqualsBuilder: boolean reflectionEquals(java.lang.Object,java.lang.Object)>(r0, r1) >>>>>>>> com.thoughtworks.acceptance.StandardObject.equals : return $z0
com.thoughtworks.acceptance.StandardObject.equals : return $z0 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void startNode(java.lang.String)>(r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void startNode(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $r2 = new com.thoughtworks.xstream.io.binary.Token$StartNode
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $r2 = new com.thoughtworks.xstream.io.binary.Token$StartNode >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry idRegistry>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry idRegistry> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $l0 = virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long getId(java.lang.String)>(r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $l0 = virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long getId(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: java.util.Map ids>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: java.util.Map ids> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r2 = (java.lang.Long) $r5
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r2 = (java.lang.Long) $r5 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : if r2 != null
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : if r2 != null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r6 = new java.lang.Long
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r6 = new java.lang.Long >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long nextId>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long nextId> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l1 = $l0 + 1L
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l1 = $l0 + 1L >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long nextId> = $l1
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long nextId> = $l1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : specialinvoke $r6.<java.lang.Long: void <init>(long)>($l1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : specialinvoke $r6.<java.lang.Long: void <init>(long)>($l1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r2 = $r6
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r2 = $r6 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r7 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: java.util.Map ids>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r7 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: java.util.Map ids> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r9 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: com.thoughtworks.xstream.io.binary.BinaryStreamWriter this$0>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r9 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: com.thoughtworks.xstream.io.binary.BinaryStreamWriter this$0> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r10 = new com.thoughtworks.xstream.io.binary.Token$MapIdToValue
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r10 = new com.thoughtworks.xstream.io.binary.Token$MapIdToValue >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l2 = virtualinvoke r2.<java.lang.Long: long longValue()>()
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l2 = virtualinvoke r2.<java.lang.Long: long longValue()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : specialinvoke $r10.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void <init>(long,java.lang.String)>($l2, r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : specialinvoke $r10.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void <init>(long,java.lang.String)>($l2, r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : staticinvoke <com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void access$100(com.thoughtworks.xstream.io.binary.BinaryStreamWriter,com.thoughtworks.xstream.io.binary.Token)>($r9, $r10)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : staticinvoke <com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void access$100(com.thoughtworks.xstream.io.binary.BinaryStreamWriter,com.thoughtworks.xstream.io.binary.Token)>($r9, $r10) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.access$100 : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>(r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.access$100 : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: com.thoughtworks.xstream.io.binary.Token$Formatter tokenFormatter>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: com.thoughtworks.xstream.io.binary.Token$Formatter tokenFormatter> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: java.io.DataOutputStream out>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: java.io.DataOutputStream out> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.Token$Formatter: void write(java.io.DataOutput,com.thoughtworks.xstream.io.binary.Token)>($r4, r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.Token$Formatter: void write(java.io.DataOutput,com.thoughtworks.xstream.io.binary.Token)>($r4, r1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : l0 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: long getId()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.write : l0 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: long getId()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.Token: long id>
com.thoughtworks.xstream.io.binary.Token.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.Token: long id> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getId : return $l0
com.thoughtworks.xstream.io.binary.Token.getId : return $l0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b2 = l0 cmp 255L
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b2 = l0 cmp 255L >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b2 > 0
com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b2 > 0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : b1 = 8
com.thoughtworks.xstream.io.binary.Token$Formatter.write : b1 = 8 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : goto [?= $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()]
com.thoughtworks.xstream.io.binary.Token$Formatter.write : goto [?= $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()] >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getType : $b0 = r0.<com.thoughtworks.xstream.io.binary.Token: byte type>
com.thoughtworks.xstream.io.binary.Token.getType : $b0 = r0.<com.thoughtworks.xstream.io.binary.Token: byte type> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getType : return $b0
com.thoughtworks.xstream.io.binary.Token.getType : return $b0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $i6 = $b5 + b1
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $i6 = $b5 + b1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i6)
com.thoughtworks.xstream.io.binary.Token$Formatter.write : interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i6) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void writeTo(java.io.DataOutput,byte)>(r1, b1)
com.thoughtworks.xstream.io.binary.Token$Formatter.write : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void writeTo(java.io.DataOutput,byte)>(r1, b1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : $l1 = r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long id>
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : $l1 = r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long id> >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void writeId(java.io.DataOutput,long,byte)>(r1, $l1, b0)
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void writeId(java.io.DataOutput,long,byte)>(r1, $l1, b0) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $b2 = l0 cmp 0L
com.thoughtworks.xstream.io.binary.Token.writeId : $b2 = l0 cmp 0L >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : if $b2 >= 0
com.thoughtworks.xstream.io.binary.Token.writeId : if $b2 >= 0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : lookupswitch(b1) {     case 8:
com.thoughtworks.xstream.io.binary.Token.writeId : lookupswitch(b1) {     case 8: >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $i3 = (int) l0
com.thoughtworks.xstream.io.binary.Token.writeId : $i3 = (int) l0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $b4 = (byte) $i3
com.thoughtworks.xstream.io.binary.Token.writeId : $b4 = (byte) $i3 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $i5 = $b4 + -128
com.thoughtworks.xstream.io.binary.Token.writeId : $i5 = $b4 + -128 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($i5)
com.thoughtworks.xstream.io.binary.Token.writeId : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($i5) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : goto [?= return]
com.thoughtworks.xstream.io.binary.Token.writeId : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : $r2 = r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String value>
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : $r2 = r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String value> >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void writeString(java.io.DataOutput,java.lang.String)>(r1, $r2)
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void writeString(java.io.DataOutput,java.lang.String)>(r1, $r2) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeString : interfaceinvoke r1.<java.io.DataOutput: void writeUTF(java.lang.String)>(r2)
com.thoughtworks.xstream.io.binary.Token.writeString : interfaceinvoke r1.<java.io.DataOutput: void writeUTF(java.lang.String)>(r2) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : goto [?= return]
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l3 = virtualinvoke r2.<java.lang.Long: long longValue()>()
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l3 = virtualinvoke r2.<java.lang.Long: long longValue()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : return $l3
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : return $l3 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : specialinvoke $r2.<com.thoughtworks.xstream.io.binary.Token$StartNode: void <init>(long)>($l0)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : specialinvoke $r2.<com.thoughtworks.xstream.io.binary.Token$StartNode: void <init>(long)>($l0) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>($r2)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>($r2) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : $l1 = r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id>
com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : $l1 = r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id> >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: void writeId(java.io.DataOutput,long,byte)>(r1, $l1, b0)
com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: void writeId(java.io.DataOutput,long,byte)>(r1, $l1, b0) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r14 = r0.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.util.Map cache>
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r14 = r0.<com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.util.Map cache> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : r6 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5)
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : r6 = interfaceinvoke $r14.<java.util.Map: java.lang.Object get(java.lang.Object)>(r5) >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r15 = <com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.Object NO_METHOD>
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r15 = <com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker: java.lang.Object NO_METHOD> >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : if r6 != $r15
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : if r6 != $r15 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r16 = null
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r16 = null >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : goto [?= $r17 = (java.lang.reflect.Method) $r16]
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : goto [?= $r17 = (java.lang.reflect.Method) $r16] >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r17 = (java.lang.reflect.Method) $r16
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r17 = (java.lang.reflect.Method) $r16 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r18 = (java.lang.reflect.Method) $r17
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : $r18 = (java.lang.reflect.Method) $r17 >>>>>>>> com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : return $r18
com.thoughtworks.xstream.converters.reflection.SerializationMethodInvoker.getMethod : return $r18 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.setValue : $r2 = new com.thoughtworks.xstream.io.binary.Token$Value
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.setValue : $r2 = new com.thoughtworks.xstream.io.binary.Token$Value >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.setValue : specialinvoke $r2.<com.thoughtworks.xstream.io.binary.Token$Value: void <init>(java.lang.String)>(r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.setValue : specialinvoke $r2.<com.thoughtworks.xstream.io.binary.Token$Value: void <init>(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>($r2)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>($r2) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Value.writeTo : $r2 = r0.<com.thoughtworks.xstream.io.binary.Token$Value: java.lang.String value>
com.thoughtworks.xstream.io.binary.Token$Value.writeTo : $r2 = r0.<com.thoughtworks.xstream.io.binary.Token$Value: java.lang.String value> >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Value.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$Value: void writeString(java.io.DataOutput,java.lang.String)>(r1, $r2)
com.thoughtworks.xstream.io.binary.Token$Value.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$Value: void writeString(java.io.DataOutput,java.lang.String)>(r1, $r2) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : $r1 = new com.thoughtworks.xstream.io.binary.Token$EndNode
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : $r1 = new com.thoughtworks.xstream.io.binary.Token$EndNode >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.Token$EndNode: void <init>()>()
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.Token$EndNode: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>($r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>($r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void push()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void push()>() >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : $r1 = new com.thoughtworks.xstream.io.binary.ReaderDepthState$State
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : $r1 = new com.thoughtworks.xstream.io.binary.ReaderDepthState$State >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: void <init>(com.thoughtworks.xstream.io.binary.ReaderDepthState$1)>(null)
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: void <init>(com.thoughtworks.xstream.io.binary.ReaderDepthState$1)>(null) >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r2 = $r1
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r2 = $r1 >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : $r3 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : $r3 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: com.thoughtworks.xstream.io.binary.ReaderDepthState$State parent> = $r3
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: com.thoughtworks.xstream.io.binary.ReaderDepthState$State parent> = $r3 >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> = r2
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> = r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : r1 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : r1 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r2 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r2 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : if $r2 != null
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : if $r2 != null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token$Formatter tokenFormatter>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token$Formatter tokenFormatter> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: java.io.DataInputStream in>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: java.io.DataInputStream in> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r1 = virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.Token$Formatter: com.thoughtworks.xstream.io.binary.Token read(java.io.DataInput)>($r4)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r1 = virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.Token$Formatter: com.thoughtworks.xstream.io.binary.Token read(java.io.DataInput)>($r4) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : b0 = interfaceinvoke r1.<java.io.DataInput: byte readByte()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.read : b0 = interfaceinvoke r1.<java.io.DataInput: byte readByte()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : $b3 = b0 & 7
com.thoughtworks.xstream.io.binary.Token$Formatter.read : $b3 = b0 & 7 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : b1 = (byte) $b3
com.thoughtworks.xstream.io.binary.Token$Formatter.read : b1 = (byte) $b3 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : $b4 = b0 & 56
com.thoughtworks.xstream.io.binary.Token$Formatter.read : $b4 = b0 & 56 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : b2 = (byte) $b4
com.thoughtworks.xstream.io.binary.Token$Formatter.read : b2 = (byte) $b4 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.Token$Formatter: com.thoughtworks.xstream.io.binary.Token contructToken(byte)>(b1)
com.thoughtworks.xstream.io.binary.Token$Formatter.read : r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.Token$Formatter: com.thoughtworks.xstream.io.binary.Token contructToken(byte)>(b1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : tableswitch(b0) {     case 2:
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : tableswitch(b0) {     case 2: >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r2 = new com.thoughtworks.xstream.io.binary.Token$MapIdToValue
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r2 = new com.thoughtworks.xstream.io.binary.Token$MapIdToValue >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r2.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void <init>()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r2.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r2
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void readFrom(java.io.DataInput,byte)>(r1, b2)
com.thoughtworks.xstream.io.binary.Token$Formatter.read : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void readFrom(java.io.DataInput,byte)>(r1, b2) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : $l1 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long readId(java.io.DataInput,byte)>(r1, b0)
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : $l1 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long readId(java.io.DataInput,byte)>(r1, b0) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : lookupswitch(b0) {     case 8:
com.thoughtworks.xstream.io.binary.Token.readId : lookupswitch(b0) {     case 8: >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : $b1 = interfaceinvoke r1.<java.io.DataInput: byte readByte()>()
com.thoughtworks.xstream.io.binary.Token.readId : $b1 = interfaceinvoke r1.<java.io.DataInput: byte readByte()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : $i2 = $b1 - -128
com.thoughtworks.xstream.io.binary.Token.readId : $i2 = $b1 - -128 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : $l3 = (long) $i2
com.thoughtworks.xstream.io.binary.Token.readId : $l3 = (long) $i2 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : return $l3
com.thoughtworks.xstream.io.binary.Token.readId : return $l3 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long id> = $l1
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long id> = $l1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String readString(java.io.DataInput)>(r1)
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String readString(java.io.DataInput)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readString : $r2 = interfaceinvoke r1.<java.io.DataInput: java.lang.String readUTF()>()
com.thoughtworks.xstream.io.binary.Token.readString : $r2 = interfaceinvoke r1.<java.io.DataInput: java.lang.String readUTF()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readString : return $r2
com.thoughtworks.xstream.io.binary.Token.readString : return $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String value> = $r2
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String value> = $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : return r2
com.thoughtworks.xstream.io.binary.Token$Formatter.read : return r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $b0 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $b0 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : lookupswitch($b0) {     case 2:
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : lookupswitch($b0) {     case 2: >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry idRegistry>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry idRegistry> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $l1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: long getId()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $l1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: long getId()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r6 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: java.lang.String getValue()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r6 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: java.lang.String getValue()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getValue : $r1 = r0.<com.thoughtworks.xstream.io.binary.Token: java.lang.String value>
com.thoughtworks.xstream.io.binary.Token.getValue : $r1 = r0.<com.thoughtworks.xstream.io.binary.Token: java.lang.String value> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getValue : return $r1
com.thoughtworks.xstream.io.binary.Token.getValue : return $r1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: void put(long,java.lang.String)>($l1, $r6)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: void put(long,java.lang.String)>($l1, $r6) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.util.Map map>
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : $r2 = new java.lang.Long
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : $r2 = new java.lang.Long >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : specialinvoke $r2.<java.lang.Long: void <init>(long)>(l0)
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : specialinvoke $r2.<java.lang.Long: void <init>(long)>(l0) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1)
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r7 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r7 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r1 = new com.thoughtworks.xstream.io.binary.Token$StartNode
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r1 = new com.thoughtworks.xstream.io.binary.Token$StartNode >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.Token$StartNode: void <init>()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.Token$StartNode: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r1
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.readFrom : $l1 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long readId(java.io.DataInput,byte)>(r1, b0)
com.thoughtworks.xstream.io.binary.Token$StartNode.readFrom : $l1 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long readId(java.io.DataInput,byte)>(r1, b0) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id> = $l1
com.thoughtworks.xstream.io.binary.Token$StartNode.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id> = $l1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return r1
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return r1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return $r7
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return $r7 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $b0 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $b0 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : lookupswitch($b0) {     case 3:
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : lookupswitch($b0) {     case 3: >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry idRegistry>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry idRegistry> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $l1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: long getId()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $l1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: long getId()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r6 = virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.lang.String get(long)>($l1)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r6 = virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.lang.String get(long)>($l1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.util.Map map>
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r1 = new java.lang.Long
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r1 = new java.lang.Long >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : specialinvoke $r1.<java.lang.Long: void <init>(long)>(l0)
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : specialinvoke $r1.<java.lang.Long: void <init>(long)>(l0) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1)
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : r2 = (java.lang.String) $r4
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : r2 = (java.lang.String) $r4 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : if r2 != null
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : if r2 != null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : return r2
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : return r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r4.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setName(java.lang.String)>($r6)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r4.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setName(java.lang.String)>($r6) >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.setName : $r2 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.setName : $r2 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.setName : $r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String name> = r1
com.thoughtworks.xstream.io.binary.ReaderDepthState.setName : $r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String name> = r1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : goto [?= r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()]
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : goto [?= r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()] >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $b2 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $b2 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : tableswitch($b2) {     case 3:
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : tableswitch($b2) {     case 3: >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r15 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r15 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r15.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(1)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r15.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(1) >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.setHasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.setHasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.setHasMoreChildren : $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: boolean hasMoreChildren> = z0
com.thoughtworks.xstream.io.binary.ReaderDepthState.setHasMoreChildren : $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: boolean hasMoreChildren> = z0 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r2)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r2) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : $r2 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : $r2 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : if $r2 != null
com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : if $r2 != null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> = r1
com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> = r1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : goto [?= return]
com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : goto [?= return] >>>>>>>> com.thoughtworks.xstream.XStream.unmarshal : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.XStream: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)>(r1, null, null)
com.thoughtworks.xstream.XStream.unmarshal : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.XStream: java.lang.Object unmarshal(com.thoughtworks.xstream.io.HierarchicalStreamReader,java.lang.Object,com.thoughtworks.xstream.converters.DataHolder)>(r1, null, null) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState: java.lang.String getName()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : $r2 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String name>
com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : $r2 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String name> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : return $r2
com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : return $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : return $r2
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : return $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getAttribute : $r2 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getAttribute : $r2 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getAttribute : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState: java.lang.String getAttribute(java.lang.String)>(r1)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getAttribute : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState: java.lang.String getAttribute(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttribute : $r4 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttribute : $r4 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttribute : $r5 = $r4.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.util.List attributes>
com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttribute : $r5 = $r4.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.util.List attributes> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttribute : if $r5 != null
com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttribute : if $r5 != null >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttribute : return null
com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttribute : return null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getAttribute : return $r3
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getAttribute : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.CachingMapper.realClass : return r2
com.thoughtworks.xstream.mapper.CachingMapper.realClass : return r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getAttributeNames : $r1 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getAttributeNames : $r1 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getAttributeNames : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState: java.util.Iterator getAttributeNames()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getAttributeNames : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState: java.util.Iterator getAttributeNames()>() >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttributeNames : $r2 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttributeNames : $r2 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttributeNames : $r3 = $r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.util.List attributes>
com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttributeNames : $r3 = $r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.util.List attributes> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttributeNames : if $r3 != null
com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttributeNames : if $r3 != null >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttributeNames : $r4 = <java.util.Collections: java.util.Set EMPTY_SET>
com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttributeNames : $r4 = <java.util.Collections: java.util.Set EMPTY_SET> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttributeNames : $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>()
com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttributeNames : $r5 = interfaceinvoke $r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttributeNames : return $r5
com.thoughtworks.xstream.io.binary.ReaderDepthState.getAttributeNames : return $r5 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getAttributeNames : return $r2
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getAttributeNames : return $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : $z0 = virtualinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState: boolean hasMoreChildren()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : $z0 = virtualinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState: boolean hasMoreChildren()>() >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : $z0 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: boolean hasMoreChildren>
com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : $z0 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: boolean hasMoreChildren> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : return $z0
com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : return $z0 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : return $z0
com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : return $z0 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r12 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r12 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> = null
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> = null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return r12
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return r12 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r5 = new com.thoughtworks.xstream.io.binary.Token$Value
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r5 = new com.thoughtworks.xstream.io.binary.Token$Value >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r5.<com.thoughtworks.xstream.io.binary.Token$Value: void <init>()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r5.<com.thoughtworks.xstream.io.binary.Token$Value: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r5
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r5 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Value.readFrom : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$Value: java.lang.String readString(java.io.DataInput)>(r1)
com.thoughtworks.xstream.io.binary.Token$Value.readFrom : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$Value: java.lang.String readString(java.io.DataInput)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Value.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$Value: java.lang.String value> = $r2
com.thoughtworks.xstream.io.binary.Token$Value.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$Value: java.lang.String value> = $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r12 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r12 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r13 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: java.lang.String getValue()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r13 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: java.lang.String getValue()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r12.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setValue(java.lang.String)>($r13)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r12.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setValue(java.lang.String)>($r13) >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.setValue : $r2 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.setValue : $r2 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.setValue : $r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String value> = r1
com.thoughtworks.xstream.io.binary.ReaderDepthState.setValue : $r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String value> = r1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : goto [?= (branch)]
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r4 = new com.thoughtworks.xstream.io.binary.Token$EndNode
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r4 = new com.thoughtworks.xstream.io.binary.Token$EndNode >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r4.<com.thoughtworks.xstream.io.binary.Token$EndNode: void <init>()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r4.<com.thoughtworks.xstream.io.binary.Token$EndNode: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r4
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r4 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r14 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r14 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r14.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(0)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r14.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(0) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getValue : $r1 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getValue : $r1 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getValue : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState: java.lang.String getValue()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getValue : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState: java.lang.String getValue()>() >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getValue : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.getValue : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getValue : $r2 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String value>
com.thoughtworks.xstream.io.binary.ReaderDepthState.getValue : $r2 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String value> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getValue : if $r2 != null
com.thoughtworks.xstream.io.binary.ReaderDepthState.getValue : if $r2 != null >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getValue : $r4 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.getValue : $r4 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getValue : $r3 = $r4.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String value>
com.thoughtworks.xstream.io.binary.ReaderDepthState.getValue : $r3 = $r4.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String value> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getValue : return $r3
com.thoughtworks.xstream.io.binary.ReaderDepthState.getValue : return $r3 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getValue : return $r2
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getValue : return $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void pop()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void pop()>() >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : $r2 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: com.thoughtworks.xstream.io.binary.ReaderDepthState$State parent>
com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : $r2 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: com.thoughtworks.xstream.io.binary.ReaderDepthState$State parent> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> = $r2
com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> = $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : i0 = 0
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : i0 = 0 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : r1 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : r1 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $b1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $b1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : lookupswitch($b1) {     case 3:
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : lookupswitch($b1) {     case 3: >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : if i0 != 0
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : if i0 != 0 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : goto [?= r4 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()]
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : goto [?= r4 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()] >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : r4 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : r4 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $b2 = virtualinvoke r4.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $b2 = virtualinvoke r4.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : lookupswitch($b2) {     case 3:
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : lookupswitch($b2) {     case 3: >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r6 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r6 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke $r6.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(1)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke $r6.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : goto [?= virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r4)]
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : goto [?= virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r4)] >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r4)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r4) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(0)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(0) >>>>>>>> com.thoughtworks.xstream.XStream.unmarshal : return $r2
