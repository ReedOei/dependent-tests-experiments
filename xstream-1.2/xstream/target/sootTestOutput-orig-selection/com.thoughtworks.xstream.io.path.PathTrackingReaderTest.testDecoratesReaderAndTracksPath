com.thoughtworks.xstream.io.xml.XppReader.createParser : $r1 = new org.xmlpull.mxp1.MXParser >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.createParser : specialinvoke $r1.<org.xmlpull.mxp1.MXParser: void <init>()>()
com.thoughtworks.xstream.io.xml.XppReader.createParser : specialinvoke $r1.<org.xmlpull.mxp1.MXParser: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.createParser : return $r1
com.thoughtworks.xstream.io.xml.XppReader.createParser : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.size : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.size : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.size : return $i0
com.thoughtworks.xstream.core.util.FastStack.size : return $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i1 > i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i1 > i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z0 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z0 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z0 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r11 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r11 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : if $i0 <= 0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : if $i0 <= 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : return $z0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : return $z0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z2 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r15 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r15 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r1 = new com.thoughtworks.xstream.io.xml.AbstractPullReader$Event
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r1 = new com.thoughtworks.xstream.io.xml.AbstractPullReader$Event >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : specialinvoke $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: void <init>(com.thoughtworks.xstream.io.xml.AbstractPullReader$1)>(null)
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : specialinvoke $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: void <init>(com.thoughtworks.xstream.io.xml.AbstractPullReader$1)>(null) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2 = $r1
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2 = $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i0 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: int pullNextEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i0 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: int pullNextEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $i0 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int next()>()
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $i0 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int next()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : tableswitch($i0) {     case 0:
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : tableswitch($i0) {     case 0: >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b1 = 1
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b1 = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b1
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> = $i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> = $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i1 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i1 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i1 != 3
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i1 != 3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i2 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i2 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i2 != 1
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i2 != 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>()
com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullElementName : return $r2
com.thoughtworks.xstream.io.xml.XppReader.pullElementName : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> = $r4
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> = $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : return r2
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : return r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r15
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r15 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : lookupswitch($i0) {     case 1:
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : lookupswitch($i0) {     case 1: >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r3)
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r3) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : goto [?= return]
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i2 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i2 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i2 >= i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i2 >= i0 >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped>
com.thoughtworks.xstream.io.ReaderWrapper.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped> >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.getNodeName : $r2 = interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getNodeName()>()
com.thoughtworks.xstream.io.ReaderWrapper.getNodeName : $r2 = interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getNodeName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0
com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1
com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2]
com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : return $r1
com.thoughtworks.xstream.core.util.FastStack.peek : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r3 = (java.lang.String) $r2
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r3 = (java.lang.String) $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String unescapeXmlName(java.lang.String)>($r3)
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String unescapeXmlName(java.lang.String)>($r3) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : return $r4
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : return $r4 >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.getNodeName : return $r2
com.thoughtworks.xstream.io.ReaderWrapper.getNodeName : return $r2 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i0 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i0 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i1 = $i0 + 1
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i1 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i2 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int capacity>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i2 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int capacity> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : if $i1 < $i2
com.thoughtworks.xstream.io.path.PathTracker.pushElement : if $i1 < $i2 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r3 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.lang.String[] pathStack>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r3 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.lang.String[] pathStack> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i5 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i5 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r3[$i5] = r1
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r3[$i5] = r1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.util.Map[] indexMapStack>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.util.Map[] indexMapStack> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i6 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i6 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : r2 = $r4[$i6]
com.thoughtworks.xstream.io.path.PathTracker.pushElement : r2 = $r4[$i6] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : if r2 != null
com.thoughtworks.xstream.io.path.PathTracker.pushElement : if r2 != null >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r5 = new java.util.HashMap
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r5 = new java.util.HashMap >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : specialinvoke $r5.<java.util.HashMap: void <init>()>()
com.thoughtworks.xstream.io.path.PathTracker.pushElement : specialinvoke $r5.<java.util.HashMap: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : r2 = $r5
com.thoughtworks.xstream.io.path.PathTracker.pushElement : r2 = $r5 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r6 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.util.Map[] indexMapStack>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r6 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.util.Map[] indexMapStack> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i7 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i7 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r6[$i7] = r2
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r6[$i7] = r2 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1)
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $z0 = interfaceinvoke r2.<java.util.Map: boolean containsKey(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : if $z0 == 0
com.thoughtworks.xstream.io.path.PathTracker.pushElement : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r11 = new java.lang.Integer
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r11 = new java.lang.Integer >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : specialinvoke $r11.<java.lang.Integer: void <init>(int)>(1)
com.thoughtworks.xstream.io.path.PathTracker.pushElement : specialinvoke $r11.<java.lang.Integer: void <init>(int)>(1) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r11)
com.thoughtworks.xstream.io.path.PathTracker.pushElement : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r11) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i10 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i10 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i11 = $i10 + 1
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i11 = $i10 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> = $i11
com.thoughtworks.xstream.io.path.PathTracker.pushElement : r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> = $i11 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> = null
com.thoughtworks.xstream.io.path.PathTracker.pushElement : r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> = null >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : if $r4 != null
com.thoughtworks.xstream.io.path.PathTracker.getPath : if $r4 != null >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i2 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i2 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i3 = $i2 + 1
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r1 = newarray (java.lang.String)[$i3]
com.thoughtworks.xstream.io.path.PathTracker.getPath : r1 = newarray (java.lang.String)[$i3] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r1[0] = ""
com.thoughtworks.xstream.io.path.PathTracker.getPath : r1[0] = "" >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : i0 = 0
com.thoughtworks.xstream.io.path.PathTracker.getPath : i0 = 0 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : if i0 >= $i4
com.thoughtworks.xstream.io.path.PathTracker.getPath : if i0 >= $i4 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r5 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.util.Map[] indexMapStack>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r5 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.util.Map[] indexMapStack> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r6 = $r5[i0]
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r6 = $r5[i0] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r7 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.lang.String[] pathStack>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r7 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.lang.String[] pathStack> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r8 = $r7[i0]
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r8 = $r7[i0] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r9 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8)
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r9 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r2 = (java.lang.Integer) $r9
com.thoughtworks.xstream.io.path.PathTracker.getPath : r2 = (java.lang.Integer) $r9 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>()
com.thoughtworks.xstream.io.path.PathTracker.getPath : i1 = virtualinvoke r2.<java.lang.Integer: int intValue()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : if i1 <= 1
com.thoughtworks.xstream.io.path.PathTracker.getPath : if i1 <= 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i8 = i0 + 1
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i8 = i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r20 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.lang.String[] pathStack>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r20 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.lang.String[] pathStack> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r21 = $r20[i0]
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r21 = $r20[i0] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r1[$i8] = $r21
com.thoughtworks.xstream.io.path.PathTracker.getPath : r1[$i8] = $r21 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : i0 = i0 + 1
com.thoughtworks.xstream.io.path.PathTracker.getPath : i0 = i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : goto [?= $i4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>]
com.thoughtworks.xstream.io.path.PathTracker.getPath : goto [?= $i4 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r22 = new com.thoughtworks.xstream.io.path.Path
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r22 = new com.thoughtworks.xstream.io.path.Path >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : specialinvoke $r22.<com.thoughtworks.xstream.io.path.Path: void <init>(java.lang.String[])>(r1)
com.thoughtworks.xstream.io.path.PathTracker.getPath : specialinvoke $r22.<com.thoughtworks.xstream.io.path.Path: void <init>(java.lang.String[])>(r1) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> = $r22
com.thoughtworks.xstream.io.path.PathTracker.getPath : r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> = $r22 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r23 = r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r23 = r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : return $r23
com.thoughtworks.xstream.io.path.PathTracker.getPath : return $r23 >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : if r0 != r1
com.thoughtworks.xstream.io.path.Path.equals : if r0 != r1 >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : $z0 = r1 instanceof com.thoughtworks.xstream.io.path.Path
com.thoughtworks.xstream.io.path.Path.equals : $z0 = r1 instanceof com.thoughtworks.xstream.io.path.Path >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : if $z0 != 0
com.thoughtworks.xstream.io.path.Path.equals : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : r2 = (com.thoughtworks.xstream.io.path.Path) r1
com.thoughtworks.xstream.io.path.Path.equals : r2 = (com.thoughtworks.xstream.io.path.Path) r1 >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : $r3 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
com.thoughtworks.xstream.io.path.Path.equals : $r3 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks> >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : $i1 = lengthof $r3
com.thoughtworks.xstream.io.path.Path.equals : $i1 = lengthof $r3 >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : $r4 = r2.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
com.thoughtworks.xstream.io.path.Path.equals : $r4 = r2.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks> >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : $i2 = lengthof $r4
com.thoughtworks.xstream.io.path.Path.equals : $i2 = lengthof $r4 >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : if $i1 == $i2
com.thoughtworks.xstream.io.path.Path.equals : if $i1 == $i2 >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : i0 = 0
com.thoughtworks.xstream.io.path.Path.equals : i0 = 0 >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : $r5 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
com.thoughtworks.xstream.io.path.Path.equals : $r5 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks> >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : $i3 = lengthof $r5
com.thoughtworks.xstream.io.path.Path.equals : $i3 = lengthof $r5 >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : if i0 >= $i3
com.thoughtworks.xstream.io.path.Path.equals : if i0 >= $i3 >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : $r6 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
com.thoughtworks.xstream.io.path.Path.equals : $r6 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks> >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : $r7 = $r6[i0]
com.thoughtworks.xstream.io.path.Path.equals : $r7 = $r6[i0] >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : $r8 = r2.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>
com.thoughtworks.xstream.io.path.Path.equals : $r8 = r2.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks> >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : $r9 = $r8[i0]
com.thoughtworks.xstream.io.path.Path.equals : $r9 = $r8[i0] >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9)
com.thoughtworks.xstream.io.path.Path.equals : $z1 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>($r9) >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : if $z1 != 0
com.thoughtworks.xstream.io.path.Path.equals : if $z1 != 0 >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : i0 = i0 + 1
com.thoughtworks.xstream.io.path.Path.equals : i0 = i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : goto [?= $r5 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>]
com.thoughtworks.xstream.io.path.Path.equals : goto [?= $r5 = r0.<com.thoughtworks.xstream.io.path.Path: java.lang.String[] chunks>] >>>>>>>> com.thoughtworks.xstream.io.path.Path.equals : return 1
com.thoughtworks.xstream.io.path.Path.equals : return 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.ReaderWrapper: void moveDown()>()
com.thoughtworks.xstream.io.path.PathTrackingReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.ReaderWrapper: void moveDown()>() >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped>
com.thoughtworks.xstream.io.ReaderWrapper.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped> >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.moveDown : interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveDown()>()
com.thoughtworks.xstream.io.ReaderWrapper.moveDown : interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveDown()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b3 = 3
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b3 = 3 >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b3
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullText()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullText()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullText : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.pullText : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullText : $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>()
com.thoughtworks.xstream.io.xml.XppReader.pullText : $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getText()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullText : return $r2
com.thoughtworks.xstream.io.xml.XppReader.pullText : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> = $r3
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> = $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : goto [?= return r2]
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : goto [?= return r2] >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.path.PathTrackingReader: com.thoughtworks.xstream.io.path.PathTracker pathTracker>
com.thoughtworks.xstream.io.path.PathTrackingReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.path.PathTrackingReader: com.thoughtworks.xstream.io.path.PathTracker pathTracker> >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingReader.moveDown : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.path.PathTrackingReader: java.lang.String getNodeName()>()
com.thoughtworks.xstream.io.path.PathTrackingReader.moveDown : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.path.PathTrackingReader: java.lang.String getNodeName()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingReader.moveDown : virtualinvoke $r1.<com.thoughtworks.xstream.io.path.PathTracker: void pushElement(java.lang.String)>($r2)
com.thoughtworks.xstream.io.path.PathTrackingReader.moveDown : virtualinvoke $r1.<com.thoughtworks.xstream.io.path.PathTracker: void pushElement(java.lang.String)>($r2) >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingReader.moveUp : specialinvoke r0.<com.thoughtworks.xstream.io.ReaderWrapper: void moveUp()>()
com.thoughtworks.xstream.io.path.PathTrackingReader.moveUp : specialinvoke r0.<com.thoughtworks.xstream.io.ReaderWrapper: void moveUp()>() >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped>
com.thoughtworks.xstream.io.ReaderWrapper.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.ReaderWrapper: com.thoughtworks.xstream.io.HierarchicalStreamReader wrapped> >>>>>>>> com.thoughtworks.xstream.io.ReaderWrapper.moveUp : interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveUp()>()
com.thoughtworks.xstream.io.ReaderWrapper.moveUp : interfaceinvoke $r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveUp()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : if $i1 < i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : if $i1 < i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b2 = 2
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b2 = 2 >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b2
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1
com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1
com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1]
com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null
com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : return r2
com.thoughtworks.xstream.core.util.FastStack.pop : return r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : goto [?= $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>]
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : goto [?= $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>] >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingReader.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.path.PathTrackingReader: com.thoughtworks.xstream.io.path.PathTracker pathTracker>
com.thoughtworks.xstream.io.path.PathTrackingReader.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.path.PathTrackingReader: com.thoughtworks.xstream.io.path.PathTracker pathTracker> >>>>>>>> com.thoughtworks.xstream.io.path.PathTrackingReader.moveUp : virtualinvoke $r1.<com.thoughtworks.xstream.io.path.PathTracker: void popElement()>()
com.thoughtworks.xstream.io.path.PathTrackingReader.moveUp : virtualinvoke $r1.<com.thoughtworks.xstream.io.path.PathTracker: void popElement()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.popElement : $r1 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.util.Map[] indexMapStack>
com.thoughtworks.xstream.io.path.PathTracker.popElement : $r1 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.util.Map[] indexMapStack> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.popElement : $i0 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.popElement : $i0 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.popElement : $r1[$i0] = null
com.thoughtworks.xstream.io.path.PathTracker.popElement : $r1[$i0] = null >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.popElement : r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> = null
com.thoughtworks.xstream.io.path.PathTracker.popElement : r0.<com.thoughtworks.xstream.io.path.PathTracker: com.thoughtworks.xstream.io.path.Path currentPath> = null >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.popElement : $i1 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>
com.thoughtworks.xstream.io.path.PathTracker.popElement : $i1 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.popElement : $i2 = $i1 - 1
com.thoughtworks.xstream.io.path.PathTracker.popElement : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.popElement : r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> = $i2
com.thoughtworks.xstream.io.path.PathTracker.popElement : r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer> = $i2 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r7 = new java.lang.Integer
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r7 = new java.lang.Integer >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r8 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r8 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r9 = (java.lang.Integer) $r8
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $r9 = (java.lang.Integer) $r8 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i8 = virtualinvoke $r9.<java.lang.Integer: int intValue()>()
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i8 = virtualinvoke $r9.<java.lang.Integer: int intValue()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i9 = $i8 + 1
com.thoughtworks.xstream.io.path.PathTracker.pushElement : $i9 = $i8 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : specialinvoke $r7.<java.lang.Integer: void <init>(int)>($i9)
com.thoughtworks.xstream.io.path.PathTracker.pushElement : specialinvoke $r7.<java.lang.Integer: void <init>(int)>($i9) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7)
com.thoughtworks.xstream.io.path.PathTracker.pushElement : interfaceinvoke r2.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r7) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.pushElement : goto [?= $i10 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>]
com.thoughtworks.xstream.io.path.PathTracker.pushElement : goto [?= $i10 = r0.<com.thoughtworks.xstream.io.path.PathTracker: int pointer>] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r10 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r10 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r11 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.lang.String[] pathStack>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r11 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.lang.String[] pathStack> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r12 = $r11[i0]
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r12 = $r11[i0] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i5 = virtualinvoke $r12.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i5 = virtualinvoke $r12.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i6 = $i5 + 6
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i6 = $i5 + 6 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : specialinvoke $r10.<java.lang.StringBuffer: void <init>(int)>($i6)
com.thoughtworks.xstream.io.path.PathTracker.getPath : specialinvoke $r10.<java.lang.StringBuffer: void <init>(int)>($i6) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r3 = $r10
com.thoughtworks.xstream.io.path.PathTracker.getPath : r3 = $r10 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r13 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.lang.String[] pathStack>
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r13 = r0.<com.thoughtworks.xstream.io.path.PathTracker: java.lang.String[] pathStack> >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r14 = $r13[i0]
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r14 = $r13[i0] >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r15 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14)
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r15 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(java.lang.String)>($r14) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91)
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r16 = virtualinvoke $r15.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1)
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r17 = virtualinvoke $r16.<java.lang.StringBuffer: java.lang.StringBuffer append(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93)
com.thoughtworks.xstream.io.path.PathTracker.getPath : virtualinvoke $r17.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(93) >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $i7 = i0 + 1
com.thoughtworks.xstream.io.path.PathTracker.getPath : $i7 = i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : $r19 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.path.PathTracker.getPath : $r19 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : r1[$i7] = $r19
com.thoughtworks.xstream.io.path.PathTracker.getPath : r1[$i7] = $r19 >>>>>>>> com.thoughtworks.xstream.io.path.PathTracker.getPath : goto [?= i0 = i0 + 1]
