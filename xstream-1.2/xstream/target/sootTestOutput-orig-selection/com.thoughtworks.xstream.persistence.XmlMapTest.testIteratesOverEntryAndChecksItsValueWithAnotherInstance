com.thoughtworks.xstream.persistence.XmlMap.put : $r3 = r0.<com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy streamStrategy> >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.put : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.persistence.StreamStrategy: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.persistence.XmlMap.put : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.persistence.StreamStrategy: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.put : $r3 = r0.<com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy: java.util.Map map>
com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.put : $r3 = r0.<com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.put : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.put : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.put : return $r4
com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.put : return $r4 >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.put : return $r4
com.thoughtworks.xstream.persistence.XmlMap.put : return $r4 >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.entrySet : $r1 = new com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries
com.thoughtworks.xstream.persistence.XmlMap.entrySet : $r1 = new com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.entrySet : specialinvoke $r1.<com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries: void <init>(com.thoughtworks.xstream.persistence.XmlMap)>(r0)
com.thoughtworks.xstream.persistence.XmlMap.entrySet : specialinvoke $r1.<com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries: void <init>(com.thoughtworks.xstream.persistence.XmlMap)>(r0) >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.entrySet : return $r1
com.thoughtworks.xstream.persistence.XmlMap.entrySet : return $r1 >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries.iterator : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries: com.thoughtworks.xstream.persistence.XmlMap this$0>
com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries.iterator : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries: com.thoughtworks.xstream.persistence.XmlMap this$0> >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries.iterator : $r2 = staticinvoke <com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy access$000(com.thoughtworks.xstream.persistence.XmlMap)>($r1)
com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries.iterator : $r2 = staticinvoke <com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy access$000(com.thoughtworks.xstream.persistence.XmlMap)>($r1) >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.access$000 : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy streamStrategy>
com.thoughtworks.xstream.persistence.XmlMap.access$000 : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy streamStrategy> >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.access$000 : return $r1
com.thoughtworks.xstream.persistence.XmlMap.access$000 : return $r1 >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries.iterator : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.persistence.StreamStrategy: java.util.Iterator iterator()>()
com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries.iterator : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.persistence.StreamStrategy: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.iterator : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy: java.util.Map map>
com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.iterator : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.iterator : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>()
com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.iterator : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.iterator : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>()
com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.iterator : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.iterator : return $r3
com.thoughtworks.xstream.persistence.XmlMapTest$MockedStrategy.iterator : return $r3 >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries.iterator : return $r3
