com.thoughtworks.xstream.io.binary.Token$Formatter.write : l0 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: long getId()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.Token: long id>
com.thoughtworks.xstream.io.binary.Token.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.Token: long id> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getId : return $l0
com.thoughtworks.xstream.io.binary.Token.getId : return $l0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b2 = l0 cmp 255L
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b2 = l0 cmp 255L >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b2 > 0
com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b2 > 0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b3 = l0 cmp 65535L
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b3 = l0 cmp 65535L >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b3 > 0
com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b3 > 0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b4 = l0 cmp 4294967295L
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b4 = l0 cmp 4294967295L >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b4 > 0
com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b4 > 0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : b1 = 24
com.thoughtworks.xstream.io.binary.Token$Formatter.write : b1 = 24 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : goto [?= $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()]
com.thoughtworks.xstream.io.binary.Token$Formatter.write : goto [?= $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()] >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getType : $b0 = r0.<com.thoughtworks.xstream.io.binary.Token: byte type>
com.thoughtworks.xstream.io.binary.Token.getType : $b0 = r0.<com.thoughtworks.xstream.io.binary.Token: byte type> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getType : return $b0
com.thoughtworks.xstream.io.binary.Token.getType : return $b0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $i6 = $b5 + b1
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $i6 = $b5 + b1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i6)
com.thoughtworks.xstream.io.binary.Token$Formatter.write : interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i6) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void writeTo(java.io.DataOutput,byte)>(r1, b1)
com.thoughtworks.xstream.io.binary.Token$Formatter.write : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void writeTo(java.io.DataOutput,byte)>(r1, b1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : $l1 = r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id>
com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : $l1 = r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id> >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: void writeId(java.io.DataOutput,long,byte)>(r1, $l1, b0)
com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: void writeId(java.io.DataOutput,long,byte)>(r1, $l1, b0) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $b2 = l0 cmp 0L
com.thoughtworks.xstream.io.binary.Token.writeId : $b2 = l0 cmp 0L >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : if $b2 >= 0
com.thoughtworks.xstream.io.binary.Token.writeId : if $b2 >= 0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : lookupswitch(b1) {     case 8:
com.thoughtworks.xstream.io.binary.Token.writeId : lookupswitch(b1) {     case 8: >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $i9 = (int) l0
com.thoughtworks.xstream.io.binary.Token.writeId : $i9 = (int) l0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $i10 = $i9 + -2147483648
com.thoughtworks.xstream.io.binary.Token.writeId : $i10 = $i9 + -2147483648 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>($i10)
com.thoughtworks.xstream.io.binary.Token.writeId : interfaceinvoke r1.<java.io.DataOutput: void writeInt(int)>($i10) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : goto [?= return]
com.thoughtworks.xstream.io.binary.Token.writeId : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : b0 = interfaceinvoke r1.<java.io.DataInput: byte readByte()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.read : b0 = interfaceinvoke r1.<java.io.DataInput: byte readByte()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : $b3 = b0 & 7
com.thoughtworks.xstream.io.binary.Token$Formatter.read : $b3 = b0 & 7 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : b1 = (byte) $b3
com.thoughtworks.xstream.io.binary.Token$Formatter.read : b1 = (byte) $b3 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : $b4 = b0 & 56
com.thoughtworks.xstream.io.binary.Token$Formatter.read : $b4 = b0 & 56 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : b2 = (byte) $b4
com.thoughtworks.xstream.io.binary.Token$Formatter.read : b2 = (byte) $b4 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.Token$Formatter: com.thoughtworks.xstream.io.binary.Token contructToken(byte)>(b1)
com.thoughtworks.xstream.io.binary.Token$Formatter.read : r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.Token$Formatter: com.thoughtworks.xstream.io.binary.Token contructToken(byte)>(b1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : tableswitch(b0) {     case 2:
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : tableswitch(b0) {     case 2: >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r1 = new com.thoughtworks.xstream.io.binary.Token$StartNode
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r1 = new com.thoughtworks.xstream.io.binary.Token$StartNode >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.Token$StartNode: void <init>()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.Token$StartNode: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r1
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void readFrom(java.io.DataInput,byte)>(r1, b2)
com.thoughtworks.xstream.io.binary.Token$Formatter.read : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void readFrom(java.io.DataInput,byte)>(r1, b2) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.readFrom : $l1 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long readId(java.io.DataInput,byte)>(r1, b0)
com.thoughtworks.xstream.io.binary.Token$StartNode.readFrom : $l1 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long readId(java.io.DataInput,byte)>(r1, b0) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : lookupswitch(b0) {     case 8:
com.thoughtworks.xstream.io.binary.Token.readId : lookupswitch(b0) {     case 8: >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : $i7 = interfaceinvoke r1.<java.io.DataInput: int readInt()>()
com.thoughtworks.xstream.io.binary.Token.readId : $i7 = interfaceinvoke r1.<java.io.DataInput: int readInt()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : $i8 = $i7 - -2147483648
com.thoughtworks.xstream.io.binary.Token.readId : $i8 = $i7 - -2147483648 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : $l9 = (long) $i8
com.thoughtworks.xstream.io.binary.Token.readId : $l9 = (long) $i8 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : return $l9
com.thoughtworks.xstream.io.binary.Token.readId : return $l9 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id> = $l1
com.thoughtworks.xstream.io.binary.Token$StartNode.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id> = $l1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : return r2
com.thoughtworks.xstream.io.binary.Token$Formatter.read : return r2 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : if r0 != r1
com.thoughtworks.xstream.io.binary.Token.equals : if r0 != r1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : if r1 == null
com.thoughtworks.xstream.io.binary.Token.equals : if r1 == null >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.io.binary.Token.equals : $r3 = virtualinvoke r0.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
com.thoughtworks.xstream.io.binary.Token.equals : $r4 = virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : if $r3 == $r4
com.thoughtworks.xstream.io.binary.Token.equals : if $r3 == $r4 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : r2 = (com.thoughtworks.xstream.io.binary.Token) r1
com.thoughtworks.xstream.io.binary.Token.equals : r2 = (com.thoughtworks.xstream.io.binary.Token) r1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : $l0 = r0.<com.thoughtworks.xstream.io.binary.Token: long id>
com.thoughtworks.xstream.io.binary.Token.equals : $l0 = r0.<com.thoughtworks.xstream.io.binary.Token: long id> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : $l1 = r2.<com.thoughtworks.xstream.io.binary.Token: long id>
com.thoughtworks.xstream.io.binary.Token.equals : $l1 = r2.<com.thoughtworks.xstream.io.binary.Token: long id> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : $b2 = $l0 cmp $l1
com.thoughtworks.xstream.io.binary.Token.equals : $b2 = $l0 cmp $l1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : if $b2 == 0
com.thoughtworks.xstream.io.binary.Token.equals : if $b2 == 0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : $b3 = r0.<com.thoughtworks.xstream.io.binary.Token: byte type>
com.thoughtworks.xstream.io.binary.Token.equals : $b3 = r0.<com.thoughtworks.xstream.io.binary.Token: byte type> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : $b4 = r2.<com.thoughtworks.xstream.io.binary.Token: byte type>
com.thoughtworks.xstream.io.binary.Token.equals : $b4 = r2.<com.thoughtworks.xstream.io.binary.Token: byte type> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : if $b3 == $b4
com.thoughtworks.xstream.io.binary.Token.equals : if $b3 == $b4 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : $r5 = r0.<com.thoughtworks.xstream.io.binary.Token: java.lang.String value>
com.thoughtworks.xstream.io.binary.Token.equals : $r5 = r0.<com.thoughtworks.xstream.io.binary.Token: java.lang.String value> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : if $r5 == null
com.thoughtworks.xstream.io.binary.Token.equals : if $r5 == null >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : $r8 = r2.<com.thoughtworks.xstream.io.binary.Token: java.lang.String value>
com.thoughtworks.xstream.io.binary.Token.equals : $r8 = r2.<com.thoughtworks.xstream.io.binary.Token: java.lang.String value> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : if $r8 != null
com.thoughtworks.xstream.io.binary.Token.equals : if $r8 != null >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : $z1 = 1
com.thoughtworks.xstream.io.binary.Token.equals : $z1 = 1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : goto [?= return $z1]
com.thoughtworks.xstream.io.binary.Token.equals : goto [?= return $z1] >>>>>>>> com.thoughtworks.xstream.io.binary.Token.equals : return $z1
