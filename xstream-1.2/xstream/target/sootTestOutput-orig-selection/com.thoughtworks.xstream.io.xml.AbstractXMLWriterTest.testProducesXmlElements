com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: java.lang.String escapeXmlName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z0 == 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z1 == 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(60)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(60) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = $i2 + 1
com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i4 = lengthof $r1
com.thoughtworks.xstream.core.util.QuickWriter.write : $i4 = lengthof $r1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : if $i3 < $i4
com.thoughtworks.xstream.core.util.QuickWriter.write : if $i3 < $i4 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = $i1 + 1
com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i5
com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i5 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r2[$i1] = c0
com.thoughtworks.xstream.core.util.QuickWriter.write : $r2[$i1] = c0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>(r2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>(r2) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = $i1 + i0
com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = $i1 + i0 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : if $i2 < $i3
com.thoughtworks.xstream.core.util.QuickWriter.write : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r5, $i5)
com.thoughtworks.xstream.core.util.QuickWriter.write : virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r5, $i5) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i6 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i6 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i7 = $i6 + i0
com.thoughtworks.xstream.core.util.QuickWriter.write : $i7 = $i6 + i0 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i7
com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i7 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r5 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r5 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i1 = $i0 + 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i1 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $r1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $r1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : virtualinvoke $r1.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(62)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : virtualinvoke $r1.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(62) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : $r2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : $r2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void writeText(com.thoughtworks.xstream.core.util.QuickWriter,java.lang.String)>($r2, r1)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void writeText(com.thoughtworks.xstream.core.util.QuickWriter,java.lang.String)>($r2, r1) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void writeText(java.lang.String)>(r2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void writeText(java.lang.String)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i1 = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : if i1 >= i0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : lookupswitch(c2) {     case 0:
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : lookupswitch(c2) {     case 0: >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : $r16 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : $r16 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : virtualinvoke $r16.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(c2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : virtualinvoke $r16.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i1 = $i0 - 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : if $z0 == 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r5 = <com.thoughtworks.xstream.io.xml.PrettyPrintWriter: char[] CLOSE>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r5 = <com.thoughtworks.xstream.io.xml.PrettyPrintWriter: char[] CLOSE> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char[])>($r5)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char[])>($r5) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = lengthof r1
com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = lengthof r1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r4 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r4 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, $i5, i0)
com.thoughtworks.xstream.core.util.QuickWriter.write : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, $i5, i0) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r6 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r6 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r7 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r7 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r8 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r8 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1
com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1
com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1]
com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null
com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : return r2
com.thoughtworks.xstream.core.util.FastStack.pop : return r2 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r9 = (java.lang.String) $r8
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r9 = (java.lang.String) $r8 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r6.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>($r9)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r6.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>($r9) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r10 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r10 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r10.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(62)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r10.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(62) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : if $i2 != 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : if $i2 != 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r11 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r11 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r11.<com.thoughtworks.xstream.core.util.QuickWriter: void flush()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r11.<com.thoughtworks.xstream.core.util.QuickWriter: void flush()>() >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: java.io.Writer writer>
com.thoughtworks.xstream.core.util.QuickWriter.flush : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: java.io.Writer writer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : $r3 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.flush : $r3 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : $i0 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.flush : $i0 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i0)
com.thoughtworks.xstream.core.util.QuickWriter.flush : virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i0) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = 0
com.thoughtworks.xstream.core.util.QuickWriter.flush : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = 0 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : $r4 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: java.io.Writer writer>
com.thoughtworks.xstream.core.util.QuickWriter.flush : $r4 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: java.io.Writer writer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : virtualinvoke $r4.<java.io.Writer: void flush()>()
com.thoughtworks.xstream.core.util.QuickWriter.flush : virtualinvoke $r4.<java.io.Writer: void flush()>() >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : goto [?= return]
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: java.lang.String escapeXmlName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z0 == 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z1 == 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(60)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(60) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = $i2 + 1
com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i4 = lengthof $r1
com.thoughtworks.xstream.core.util.QuickWriter.write : $i4 = lengthof $r1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : if $i3 < $i4
com.thoughtworks.xstream.core.util.QuickWriter.write : if $i3 < $i4 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = $i1 + 1
com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i5
com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i5 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r2[$i1] = c0
com.thoughtworks.xstream.core.util.QuickWriter.write : $r2[$i1] = c0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>(r2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>(r2) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = $i1 + i0
com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = $i1 + i0 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : if $i2 < $i3
com.thoughtworks.xstream.core.util.QuickWriter.write : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r5, $i5)
com.thoughtworks.xstream.core.util.QuickWriter.write : virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r5, $i5) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i6 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i6 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i7 = $i6 + i0
com.thoughtworks.xstream.core.util.QuickWriter.write : $i7 = $i6 + i0 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i7
com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i7 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r5 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r5 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i1 = $i0 + 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i1 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $r1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $r1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : virtualinvoke $r1.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(62)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : virtualinvoke $r1.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(62) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : $r2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : $r2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void writeText(com.thoughtworks.xstream.core.util.QuickWriter,java.lang.String)>($r2, r1)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.setValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void writeText(com.thoughtworks.xstream.core.util.QuickWriter,java.lang.String)>($r2, r1) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void writeText(java.lang.String)>(r2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void writeText(java.lang.String)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i1 = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : if i1 >= i0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : lookupswitch(c2) {     case 0:
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : lookupswitch(c2) {     case 0: >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : $r16 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : $r16 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : virtualinvoke $r16.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(c2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : virtualinvoke $r16.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.writeText : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i1 = $i0 - 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : if $z0 == 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r5 = <com.thoughtworks.xstream.io.xml.PrettyPrintWriter: char[] CLOSE>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r5 = <com.thoughtworks.xstream.io.xml.PrettyPrintWriter: char[] CLOSE> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char[])>($r5)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char[])>($r5) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = lengthof r1
com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = lengthof r1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r4 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r4 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, $i5, i0)
com.thoughtworks.xstream.core.util.QuickWriter.write : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, $i5, i0) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r6 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r6 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r7 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r7 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r8 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r8 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1
com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1
com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1]
com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null
com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : return r2
com.thoughtworks.xstream.core.util.FastStack.pop : return r2 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r9 = (java.lang.String) $r8
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r9 = (java.lang.String) $r8 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r6.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>($r9)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r6.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>($r9) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r10 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r10 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r10.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(62)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r10.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(62) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : if $i2 != 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : if $i2 != 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r11 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r11 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r11.<com.thoughtworks.xstream.core.util.QuickWriter: void flush()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r11.<com.thoughtworks.xstream.core.util.QuickWriter: void flush()>() >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: java.io.Writer writer>
com.thoughtworks.xstream.core.util.QuickWriter.flush : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: java.io.Writer writer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : $r3 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.flush : $r3 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : $i0 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.flush : $i0 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i0)
com.thoughtworks.xstream.core.util.QuickWriter.flush : virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i0) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = 0
com.thoughtworks.xstream.core.util.QuickWriter.flush : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = 0 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : $r4 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: java.io.Writer writer>
com.thoughtworks.xstream.core.util.QuickWriter.flush : $r4 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: java.io.Writer writer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : virtualinvoke $r4.<java.io.Writer: void flush()>()
com.thoughtworks.xstream.core.util.QuickWriter.flush : virtualinvoke $r4.<java.io.Writer: void flush()>() >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : goto [?= return]
com.thoughtworks.xstream.io.xml.JDomWriter.getResult : $r1 = r0.<com.thoughtworks.xstream.io.xml.JDomWriter: java.util.List result> >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.getResult : return $r1
com.thoughtworks.xstream.io.xml.JDomWriter.getResult : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.startNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.JDomWriter: org.jdom.JDOMFactory documentFactory>
com.thoughtworks.xstream.io.xml.JDomWriter.startNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.JDomWriter: org.jdom.JDOMFactory documentFactory> >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.startNode : $r5 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.JDomWriter: java.lang.String escapeXmlName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.JDomWriter.startNode : $r5 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.JDomWriter: java.lang.String escapeXmlName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.startNode : r2 = interfaceinvoke $r4.<org.jdom.JDOMFactory: org.jdom.Element element(java.lang.String)>($r5)
com.thoughtworks.xstream.io.xml.JDomWriter.startNode : r2 = interfaceinvoke $r4.<org.jdom.JDOMFactory: org.jdom.Element element(java.lang.String)>($r5) >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.startNode : r3 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.JDomWriter: org.jdom.Element top()>()
com.thoughtworks.xstream.io.xml.JDomWriter.startNode : r3 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.JDomWriter: org.jdom.Element top()>() >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.top : r1 = null
com.thoughtworks.xstream.io.xml.JDomWriter.top : r1 = null >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.top : $r2 = r0.<com.thoughtworks.xstream.io.xml.JDomWriter: java.util.List elementStack>
com.thoughtworks.xstream.io.xml.JDomWriter.top : $r2 = r0.<com.thoughtworks.xstream.io.xml.JDomWriter: java.util.List elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.top : $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>()
com.thoughtworks.xstream.io.xml.JDomWriter.top : $z0 = interfaceinvoke $r2.<java.util.List: boolean isEmpty()>() >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.top : if $z0 != 0
com.thoughtworks.xstream.io.xml.JDomWriter.top : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.top : return r1
com.thoughtworks.xstream.io.xml.JDomWriter.top : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.startNode : if r3 == null
com.thoughtworks.xstream.io.xml.JDomWriter.startNode : if r3 == null >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.startNode : $r7 = r0.<com.thoughtworks.xstream.io.xml.JDomWriter: java.util.List result>
com.thoughtworks.xstream.io.xml.JDomWriter.startNode : $r7 = r0.<com.thoughtworks.xstream.io.xml.JDomWriter: java.util.List result> >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.startNode : interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r2)
com.thoughtworks.xstream.io.xml.JDomWriter.startNode : interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.startNode : $r8 = r0.<com.thoughtworks.xstream.io.xml.JDomWriter: java.util.List elementStack>
com.thoughtworks.xstream.io.xml.JDomWriter.startNode : $r8 = r0.<com.thoughtworks.xstream.io.xml.JDomWriter: java.util.List elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.startNode : interfaceinvoke $r8.<java.util.List: void add(int,java.lang.Object)>(0, r2)
com.thoughtworks.xstream.io.xml.JDomWriter.startNode : interfaceinvoke $r8.<java.util.List: void add(int,java.lang.Object)>(0, r2) >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.setValue : $r2 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.JDomWriter: org.jdom.Element top()>()
com.thoughtworks.xstream.io.xml.JDomWriter.setValue : $r2 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.JDomWriter: org.jdom.Element top()>() >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.top : $r3 = r0.<com.thoughtworks.xstream.io.xml.JDomWriter: java.util.List elementStack>
com.thoughtworks.xstream.io.xml.JDomWriter.top : $r3 = r0.<com.thoughtworks.xstream.io.xml.JDomWriter: java.util.List elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.top : $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0)
com.thoughtworks.xstream.io.xml.JDomWriter.top : $r4 = interfaceinvoke $r3.<java.util.List: java.lang.Object get(int)>(0) >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.top : r1 = (org.jdom.Element) $r4
com.thoughtworks.xstream.io.xml.JDomWriter.top : r1 = (org.jdom.Element) $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.setValue : $r3 = r0.<com.thoughtworks.xstream.io.xml.JDomWriter: org.jdom.JDOMFactory documentFactory>
com.thoughtworks.xstream.io.xml.JDomWriter.setValue : $r3 = r0.<com.thoughtworks.xstream.io.xml.JDomWriter: org.jdom.JDOMFactory documentFactory> >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.setValue : $r4 = interfaceinvoke $r3.<org.jdom.JDOMFactory: org.jdom.Text text(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.JDomWriter.setValue : $r4 = interfaceinvoke $r3.<org.jdom.JDOMFactory: org.jdom.Text text(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.setValue : virtualinvoke $r2.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r4)
com.thoughtworks.xstream.io.xml.JDomWriter.setValue : virtualinvoke $r2.<org.jdom.Element: org.jdom.Element addContent(org.jdom.Content)>($r4) >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.endNode : $r1 = r0.<com.thoughtworks.xstream.io.xml.JDomWriter: java.util.List elementStack>
com.thoughtworks.xstream.io.xml.JDomWriter.endNode : $r1 = r0.<com.thoughtworks.xstream.io.xml.JDomWriter: java.util.List elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.JDomWriter.endNode : interfaceinvoke $r1.<java.util.List: java.lang.Object remove(int)>(0)
com.thoughtworks.xstream.io.xml.DomWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.DomWriter: org.w3c.dom.Document document> >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.startNode : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.DomWriter: java.lang.String escapeXmlName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.DomWriter.startNode : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.DomWriter: java.lang.String escapeXmlName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.startNode : r2 = interfaceinvoke $r3.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>($r4)
com.thoughtworks.xstream.io.xml.DomWriter.startNode : r2 = interfaceinvoke $r3.<org.w3c.dom.Document: org.w3c.dom.Element createElement(java.lang.String)>($r4) >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.startNode : $r5 = r0.<com.thoughtworks.xstream.io.xml.DomWriter: org.w3c.dom.Element current>
com.thoughtworks.xstream.io.xml.DomWriter.startNode : $r5 = r0.<com.thoughtworks.xstream.io.xml.DomWriter: org.w3c.dom.Element current> >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.startNode : if $r5 != null
com.thoughtworks.xstream.io.xml.DomWriter.startNode : if $r5 != null >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.startNode : $r6 = r0.<com.thoughtworks.xstream.io.xml.DomWriter: org.w3c.dom.Document document>
com.thoughtworks.xstream.io.xml.DomWriter.startNode : $r6 = r0.<com.thoughtworks.xstream.io.xml.DomWriter: org.w3c.dom.Document document> >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.startNode : interfaceinvoke $r6.<org.w3c.dom.Document: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r2)
com.thoughtworks.xstream.io.xml.DomWriter.startNode : interfaceinvoke $r6.<org.w3c.dom.Document: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.startNode : goto [?= r0.<com.thoughtworks.xstream.io.xml.DomWriter: org.w3c.dom.Element current> = r2]
com.thoughtworks.xstream.io.xml.DomWriter.startNode : goto [?= r0.<com.thoughtworks.xstream.io.xml.DomWriter: org.w3c.dom.Element current> = r2] >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.DomWriter: org.w3c.dom.Element current> = r2
com.thoughtworks.xstream.io.xml.DomWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.DomWriter: org.w3c.dom.Element current> = r2 >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.setValue : $r2 = r0.<com.thoughtworks.xstream.io.xml.DomWriter: org.w3c.dom.Element current>
com.thoughtworks.xstream.io.xml.DomWriter.setValue : $r2 = r0.<com.thoughtworks.xstream.io.xml.DomWriter: org.w3c.dom.Element current> >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.setValue : $r3 = r0.<com.thoughtworks.xstream.io.xml.DomWriter: org.w3c.dom.Document document>
com.thoughtworks.xstream.io.xml.DomWriter.setValue : $r3 = r0.<com.thoughtworks.xstream.io.xml.DomWriter: org.w3c.dom.Document document> >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.setValue : $r4 = interfaceinvoke $r3.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.DomWriter.setValue : $r4 = interfaceinvoke $r3.<org.w3c.dom.Document: org.w3c.dom.Text createTextNode(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.setValue : interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r4)
com.thoughtworks.xstream.io.xml.DomWriter.setValue : interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.Node appendChild(org.w3c.dom.Node)>($r4) >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.endNode : $r2 = r0.<com.thoughtworks.xstream.io.xml.DomWriter: org.w3c.dom.Element current>
com.thoughtworks.xstream.io.xml.DomWriter.endNode : $r2 = r0.<com.thoughtworks.xstream.io.xml.DomWriter: org.w3c.dom.Element current> >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.endNode : r1 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.Node getParentNode()>()
com.thoughtworks.xstream.io.xml.DomWriter.endNode : r1 = interfaceinvoke $r2.<org.w3c.dom.Element: org.w3c.dom.Node getParentNode()>() >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.endNode : $z0 = r1 instanceof org.w3c.dom.Element
com.thoughtworks.xstream.io.xml.DomWriter.endNode : $z0 = r1 instanceof org.w3c.dom.Element >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.endNode : if $z0 == 0
com.thoughtworks.xstream.io.xml.DomWriter.endNode : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.endNode : $r4 = null
com.thoughtworks.xstream.io.xml.DomWriter.endNode : $r4 = null >>>>>>>> com.thoughtworks.xstream.io.xml.DomWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.DomWriter: org.w3c.dom.Element current> = $r4
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r6 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: com.thoughtworks.xstream.io.xml.QNameMap qnameMap> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxWriter: java.lang.String escapeXmlName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxWriter: java.lang.String escapeXmlName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r2 = virtualinvoke $r6.<com.thoughtworks.xstream.io.xml.QNameMap: javax.xml.namespace.QName getQName(java.lang.String)>($r7)
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r2 = virtualinvoke $r6.<com.thoughtworks.xstream.io.xml.QNameMap: javax.xml.namespace.QName getQName(java.lang.String)>($r7) >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r3 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.util.Map javaToQName>
com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r3 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.util.Map javaToQName> >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : if $r3 == null
com.thoughtworks.xstream.io.xml.QNameMap.getQName : if $r3 == null >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r6 = new javax.xml.namespace.QName
com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r6 = new javax.xml.namespace.QName >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r7 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.lang.String defaultNamespace>
com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r7 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.lang.String defaultNamespace> >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r8 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.lang.String defaultPrefix>
com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r8 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.lang.String defaultPrefix> >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : specialinvoke $r6.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r7, r1, $r8)
com.thoughtworks.xstream.io.xml.QNameMap.getQName : specialinvoke $r6.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r7, r1, $r8) >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : return $r6
com.thoughtworks.xstream.io.xml.QNameMap.getQName : return $r6 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r3 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getPrefix()>()
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r3 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getPrefix()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r4 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>()
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r4 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if r3 == null
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if r3 == null >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i0 = virtualinvoke r3.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i0 = virtualinvoke r3.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if $i0 <= 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if $i0 <= 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $z3 = 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $z3 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z0 = $z3
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z0 = $z3 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if r4 == null
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if r4 == null >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i1 = virtualinvoke r4.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i1 = virtualinvoke r4.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if $i1 <= 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if $i1 <= 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $z4 = 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $z4 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z1 = $z4
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z1 = $z4 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z2 = 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z2 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if z1 == 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if z0 == 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r15 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out>
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r15 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r16 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getLocalPart()>()
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r16 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getLocalPart()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : interfaceinvoke $r15.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String,java.lang.String,java.lang.String)>(r3, $r16, r4)
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : interfaceinvoke $r15.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String,java.lang.String,java.lang.String)>(r3, $r16, r4) >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth>
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i3 = $i2 + 1
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> = $i3
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> = $i3 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : goto [?= return]
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.setValue : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out>
com.thoughtworks.xstream.io.xml.StaxWriter.setValue : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.setValue : interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.StaxWriter.setValue : interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.setValue : goto [?= return]
com.thoughtworks.xstream.io.xml.StaxWriter.setValue : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth>
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i1 = $i0 - 1
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> = $i1
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> = $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out>
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>()
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth>
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : if $i2 != 0
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : if $i2 != 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: boolean writeEnclosingDocument>
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: boolean writeEnclosingDocument> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : if $z0 == 0
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out>
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : interfaceinvoke $r4.<javax.xml.stream.XMLStreamWriter: void writeEndDocument()>()
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : interfaceinvoke $r4.<javax.xml.stream.XMLStreamWriter: void writeEndDocument()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : goto [?= return]
com.thoughtworks.xstream.io.xml.XomWriter.startNode : $r2 = new nu.xom.Element >>>>>>>> com.thoughtworks.xstream.io.xml.XomWriter.startNode : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XomWriter: java.lang.String escapeXmlName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.XomWriter.startNode : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XomWriter: java.lang.String escapeXmlName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.XomWriter.startNode : specialinvoke $r2.<nu.xom.Element: void <init>(java.lang.String)>($r4)
com.thoughtworks.xstream.io.xml.XomWriter.startNode : specialinvoke $r2.<nu.xom.Element: void <init>(java.lang.String)>($r4) >>>>>>>> com.thoughtworks.xstream.io.xml.XomWriter.startNode : r3 = $r2
com.thoughtworks.xstream.io.xml.XomWriter.startNode : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XomWriter.startNode : $r5 = r0.<com.thoughtworks.xstream.io.xml.XomWriter: nu.xom.Element node>
com.thoughtworks.xstream.io.xml.XomWriter.startNode : $r5 = r0.<com.thoughtworks.xstream.io.xml.XomWriter: nu.xom.Element node> >>>>>>>> com.thoughtworks.xstream.io.xml.XomWriter.startNode : virtualinvoke $r5.<nu.xom.Element: void appendChild(nu.xom.Node)>(r3)
com.thoughtworks.xstream.io.xml.XomWriter.startNode : virtualinvoke $r5.<nu.xom.Element: void appendChild(nu.xom.Node)>(r3) >>>>>>>> com.thoughtworks.xstream.io.xml.XomWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.XomWriter: nu.xom.Element node> = r3
com.thoughtworks.xstream.io.xml.XomWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.XomWriter: nu.xom.Element node> = r3 >>>>>>>> com.thoughtworks.xstream.io.xml.XomWriter.setValue : $r2 = r0.<com.thoughtworks.xstream.io.xml.XomWriter: nu.xom.Element node>
com.thoughtworks.xstream.io.xml.XomWriter.setValue : $r2 = r0.<com.thoughtworks.xstream.io.xml.XomWriter: nu.xom.Element node> >>>>>>>> com.thoughtworks.xstream.io.xml.XomWriter.setValue : virtualinvoke $r2.<nu.xom.Element: void appendChild(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.XomWriter.setValue : virtualinvoke $r2.<nu.xom.Element: void appendChild(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XomWriter.endNode : $r1 = r0.<com.thoughtworks.xstream.io.xml.XomWriter: nu.xom.Element node>
com.thoughtworks.xstream.io.xml.XomWriter.endNode : $r1 = r0.<com.thoughtworks.xstream.io.xml.XomWriter: nu.xom.Element node> >>>>>>>> com.thoughtworks.xstream.io.xml.XomWriter.endNode : $r2 = virtualinvoke $r1.<nu.xom.Element: nu.xom.ParentNode getParent()>()
com.thoughtworks.xstream.io.xml.XomWriter.endNode : $r2 = virtualinvoke $r1.<nu.xom.Element: nu.xom.ParentNode getParent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XomWriter.endNode : $r3 = (nu.xom.Element) $r2
com.thoughtworks.xstream.io.xml.XomWriter.endNode : $r3 = (nu.xom.Element) $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XomWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.XomWriter: nu.xom.Element node> = $r3
com.thoughtworks.xstream.io.xml.Dom4JDriver.setOutputFormat : r0.<com.thoughtworks.xstream.io.xml.Dom4JDriver: org.dom4j.io.OutputFormat outputFormat> = r1 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : r2 = newarray (com.thoughtworks.xstream.io.HierarchicalStreamWriter)[1]
com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : r2 = newarray (com.thoughtworks.xstream.io.HierarchicalStreamWriter)[1] >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : $r4 = new com.thoughtworks.xstream.io.xml.Dom4JDriver$1
com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : $r4 = new com.thoughtworks.xstream.io.xml.Dom4JDriver$1 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : specialinvoke $r4.<com.thoughtworks.xstream.io.xml.Dom4JDriver$1: void <init>(com.thoughtworks.xstream.io.xml.Dom4JDriver,java.io.Writer,com.thoughtworks.xstream.io.HierarchicalStreamWriter[])>(r0, r1, r2)
com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : specialinvoke $r4.<com.thoughtworks.xstream.io.xml.Dom4JDriver$1: void <init>(com.thoughtworks.xstream.io.xml.Dom4JDriver,java.io.Writer,com.thoughtworks.xstream.io.HierarchicalStreamWriter[])>(r0, r1, r2) >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : r3 = $r4
com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : r3 = $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : $r5 = new com.thoughtworks.xstream.io.xml.Dom4JWriter
com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : $r5 = new com.thoughtworks.xstream.io.xml.Dom4JWriter >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : $r6 = new org.dom4j.io.XMLWriter
com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : $r6 = new org.dom4j.io.XMLWriter >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : $r7 = r0.<com.thoughtworks.xstream.io.xml.Dom4JDriver: org.dom4j.io.OutputFormat outputFormat>
com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : $r7 = r0.<com.thoughtworks.xstream.io.xml.Dom4JDriver: org.dom4j.io.OutputFormat outputFormat> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : specialinvoke $r6.<org.dom4j.io.XMLWriter: void <init>(java.io.Writer,org.dom4j.io.OutputFormat)>(r3, $r7)
com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : specialinvoke $r6.<org.dom4j.io.XMLWriter: void <init>(java.io.Writer,org.dom4j.io.OutputFormat)>(r3, $r7) >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : $r8 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.Dom4JDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer xmlFriendlyReplacer()>()
com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : $r8 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.Dom4JDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer xmlFriendlyReplacer()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : return $r1
com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : specialinvoke $r5.<com.thoughtworks.xstream.io.xml.Dom4JWriter: void <init>(org.dom4j.io.XMLWriter,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)>($r6, $r8)
com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : specialinvoke $r5.<com.thoughtworks.xstream.io.xml.Dom4JWriter: void <init>(org.dom4j.io.XMLWriter,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)>($r6, $r8) >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : r2[0] = $r5
com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : r2[0] = $r5 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : $r9 = r2[0]
com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : $r9 = r2[0] >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : return $r9
com.thoughtworks.xstream.io.xml.Dom4JDriver.createWriter : return $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.Dom4JWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startNode : $i0 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.Dom4JWriter.startNode : $i0 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.size : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.size : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.size : return $i0
com.thoughtworks.xstream.core.util.FastStack.size : return $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startNode : if $i0 <= 0
com.thoughtworks.xstream.io.xml.Dom4JWriter.startNode : if $i0 <= 0 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startNode : $r6 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.Dom4JWriter.startNode : $r6 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startNode : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: java.lang.String escapeXmlName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.Dom4JWriter.startNode : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: java.lang.String escapeXmlName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startNode : virtualinvoke $r6.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r7)
com.thoughtworks.xstream.io.xml.Dom4JWriter.startNode : virtualinvoke $r6.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r7) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: boolean children> = 0
com.thoughtworks.xstream.io.xml.Dom4JWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: boolean children> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>()
com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : r2 = virtualinvoke r1.<java.lang.String: char[] toCharArray()>() >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : $i0 = lengthof r2
com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : $i0 = lengthof r2 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : if $i0 <= 0
com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : if $i0 <= 0 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: void startElement()>()
com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : specialinvoke r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: void startElement()>() >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : $z0 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: boolean started>
com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : $z0 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: boolean started> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : if $z0 != 0
com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : $r1 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: org.dom4j.io.XMLWriter writer>
com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : $r1 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: org.dom4j.io.XMLWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : $r2 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : $r2 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0
com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1
com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2]
com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : return $r1
com.thoughtworks.xstream.core.util.FastStack.peek : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : $r4 = (java.lang.String) $r3
com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : $r4 = (java.lang.String) $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : $r5 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: org.xml.sax.helpers.AttributesImpl attributes>
com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : $r5 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: org.xml.sax.helpers.AttributesImpl attributes> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : virtualinvoke $r1.<org.dom4j.io.XMLWriter: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>("", "", $r4, $r5)
com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : virtualinvoke $r1.<org.dom4j.io.XMLWriter: void startElement(java.lang.String,java.lang.String,java.lang.String,org.xml.sax.Attributes)>("", "", $r4, $r5) >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : $r6 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: org.xml.sax.helpers.AttributesImpl attributes>
com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : $r6 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: org.xml.sax.helpers.AttributesImpl attributes> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : virtualinvoke $r6.<org.xml.sax.helpers.AttributesImpl: void clear()>()
com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : virtualinvoke $r6.<org.xml.sax.helpers.AttributesImpl: void clear()>() >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: boolean started> = 1
com.thoughtworks.xstream.io.xml.Dom4JWriter.startElement : r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: boolean started> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : $r4 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: org.dom4j.io.XMLWriter writer>
com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : $r4 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: org.dom4j.io.XMLWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : $i1 = lengthof r2
com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : $i1 = lengthof r2 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : virtualinvoke $r4.<org.dom4j.io.XMLWriter: void characters(char[],int,int)>(r2, 0, $i1)
com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : virtualinvoke $r4.<org.dom4j.io.XMLWriter: void characters(char[],int,int)>(r2, 0, $i1) >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : goto [?= r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: boolean children> = 1]
com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : goto [?= r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: boolean children> = 1] >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: boolean children> = 1
com.thoughtworks.xstream.io.xml.Dom4JWriter.setValue : r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: boolean children> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: boolean children>
com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: boolean children> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : if $z0 != 0
com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: void startElement()>()
com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: void startElement()>() >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : $r13 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: org.dom4j.io.XMLWriter writer>
com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : $r13 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: org.dom4j.io.XMLWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : $r14 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : $r14 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : $r15 = virtualinvoke $r14.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : $r15 = virtualinvoke $r14.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1
com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1
com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1]
com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null
com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : return r2
com.thoughtworks.xstream.core.util.FastStack.pop : return r2 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : $r16 = (java.lang.String) $r15
com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : $r16 = (java.lang.String) $r15 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : virtualinvoke $r13.<org.dom4j.io.XMLWriter: void endElement(java.lang.String,java.lang.String,java.lang.String)>("", "", $r16)
com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : virtualinvoke $r13.<org.dom4j.io.XMLWriter: void endElement(java.lang.String,java.lang.String,java.lang.String)>("", "", $r16) >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : goto [?= return]
com.thoughtworks.xstream.io.xml.Dom4JWriter.endNode : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.close : $r2 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: org.dom4j.io.XMLWriter writer>
com.thoughtworks.xstream.io.xml.Dom4JWriter.close : $r2 = r0.<com.thoughtworks.xstream.io.xml.Dom4JWriter: org.dom4j.io.XMLWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.close : virtualinvoke $r2.<org.dom4j.io.XMLWriter: void endDocument()>()
com.thoughtworks.xstream.io.xml.Dom4JWriter.close : virtualinvoke $r2.<org.dom4j.io.XMLWriter: void endDocument()>() >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JWriter.close : goto [?= return]
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r6 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: com.thoughtworks.xstream.io.xml.QNameMap qnameMap> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxWriter: java.lang.String escapeXmlName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxWriter: java.lang.String escapeXmlName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r2 = virtualinvoke $r6.<com.thoughtworks.xstream.io.xml.QNameMap: javax.xml.namespace.QName getQName(java.lang.String)>($r7)
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r2 = virtualinvoke $r6.<com.thoughtworks.xstream.io.xml.QNameMap: javax.xml.namespace.QName getQName(java.lang.String)>($r7) >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r3 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.util.Map javaToQName>
com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r3 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.util.Map javaToQName> >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : if $r3 == null
com.thoughtworks.xstream.io.xml.QNameMap.getQName : if $r3 == null >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r6 = new javax.xml.namespace.QName
com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r6 = new javax.xml.namespace.QName >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r7 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.lang.String defaultNamespace>
com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r7 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.lang.String defaultNamespace> >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r8 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.lang.String defaultPrefix>
com.thoughtworks.xstream.io.xml.QNameMap.getQName : $r8 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.lang.String defaultPrefix> >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : specialinvoke $r6.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r7, r1, $r8)
com.thoughtworks.xstream.io.xml.QNameMap.getQName : specialinvoke $r6.<javax.xml.namespace.QName: void <init>(java.lang.String,java.lang.String,java.lang.String)>($r7, r1, $r8) >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getQName : return $r6
com.thoughtworks.xstream.io.xml.QNameMap.getQName : return $r6 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r3 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getPrefix()>()
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r3 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getPrefix()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r4 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>()
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r4 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getNamespaceURI()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if r3 == null
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if r3 == null >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i0 = virtualinvoke r3.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i0 = virtualinvoke r3.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if $i0 <= 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if $i0 <= 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $z3 = 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $z3 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z0 = $z3
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z0 = $z3 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if r4 == null
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if r4 == null >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i1 = virtualinvoke r4.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i1 = virtualinvoke r4.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if $i1 <= 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if $i1 <= 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $z4 = 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $z4 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z1 = $z4
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z1 = $z4 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z2 = 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : z2 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if z1 == 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if z0 == 0
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : if z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r15 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out>
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r15 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r16 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getLocalPart()>()
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $r16 = virtualinvoke r2.<javax.xml.namespace.QName: java.lang.String getLocalPart()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : interfaceinvoke $r15.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String,java.lang.String,java.lang.String)>(r3, $r16, r4)
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : interfaceinvoke $r15.<javax.xml.stream.XMLStreamWriter: void writeStartElement(java.lang.String,java.lang.String,java.lang.String)>(r3, $r16, r4) >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth>
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i3 = $i2 + 1
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> = $i3
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> = $i3 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.startNode : goto [?= return]
com.thoughtworks.xstream.io.xml.StaxWriter.startNode : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.setValue : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out>
com.thoughtworks.xstream.io.xml.StaxWriter.setValue : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.setValue : interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.StaxWriter.setValue : interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeCharacters(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.setValue : goto [?= return]
com.thoughtworks.xstream.io.xml.StaxWriter.setValue : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth>
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i1 = $i0 - 1
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> = $i1
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> = $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out>
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>()
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : interfaceinvoke $r3.<javax.xml.stream.XMLStreamWriter: void writeEndElement()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth>
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: int tagDepth> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : if $i2 != 0
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : if $i2 != 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: boolean writeEnclosingDocument>
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: boolean writeEnclosingDocument> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : if $z0 == 0
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out>
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.StaxWriter: javax.xml.stream.XMLStreamWriter out> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : interfaceinvoke $r4.<javax.xml.stream.XMLStreamWriter: void writeEndDocument()>()
com.thoughtworks.xstream.io.xml.StaxWriter.endNode : interfaceinvoke $r4.<javax.xml.stream.XMLStreamWriter: void writeEndDocument()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxWriter.endNode : goto [?= return]
