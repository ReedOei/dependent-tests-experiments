com.thoughtworks.xstream.persistence.XmlArrayList.size : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlArrayList: com.thoughtworks.xstream.persistence.XmlMap map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.size : $i0 = virtualinvoke $r1.<com.thoughtworks.xstream.persistence.XmlMap: int size()>()
com.thoughtworks.xstream.persistence.XmlArrayList.size : $i0 = virtualinvoke $r1.<com.thoughtworks.xstream.persistence.XmlMap: int size()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.size : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy streamStrategy>
com.thoughtworks.xstream.persistence.XmlMap.size : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy streamStrategy> >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.size : $i0 = interfaceinvoke $r1.<com.thoughtworks.xstream.persistence.StreamStrategy: int size()>()
com.thoughtworks.xstream.persistence.XmlMap.size : $i0 = interfaceinvoke $r1.<com.thoughtworks.xstream.persistence.StreamStrategy: int size()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.size : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy: java.util.Map map>
com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.size : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.size : $i0 = interfaceinvoke $r1.<java.util.Map: int size()>()
com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.size : $i0 = interfaceinvoke $r1.<java.util.Map: int size()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.size : return $i0
com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.size : return $i0 >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.size : return $i0
com.thoughtworks.xstream.persistence.XmlMap.size : return $i0 >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.size : return $i0
com.thoughtworks.xstream.persistence.XmlArrayList.size : return $i0 >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.add : i1 = virtualinvoke r0.<com.thoughtworks.xstream.persistence.XmlArrayList: int size()>()
com.thoughtworks.xstream.persistence.XmlArrayList.add : i1 = virtualinvoke r0.<com.thoughtworks.xstream.persistence.XmlArrayList: int size()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.add : $i4 = i1 + 1
com.thoughtworks.xstream.persistence.XmlArrayList.add : $i4 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.add : if i0 >= $i4
com.thoughtworks.xstream.persistence.XmlArrayList.add : if i0 >= $i4 >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.add : if i0 >= 0
com.thoughtworks.xstream.persistence.XmlArrayList.add : if i0 >= 0 >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.add : if i0 == i1
com.thoughtworks.xstream.persistence.XmlArrayList.add : if i0 == i1 >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.add : $i5 = i0
com.thoughtworks.xstream.persistence.XmlArrayList.add : $i5 = i0 >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.add : i2 = $i5
com.thoughtworks.xstream.persistence.XmlArrayList.add : i2 = $i5 >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.add : i3 = i1
com.thoughtworks.xstream.persistence.XmlArrayList.add : i3 = i1 >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.add : if i3 <= i2
com.thoughtworks.xstream.persistence.XmlArrayList.add : if i3 <= i2 >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.add : $r15 = r0.<com.thoughtworks.xstream.persistence.XmlArrayList: com.thoughtworks.xstream.persistence.XmlMap map>
com.thoughtworks.xstream.persistence.XmlArrayList.add : $r15 = r0.<com.thoughtworks.xstream.persistence.XmlArrayList: com.thoughtworks.xstream.persistence.XmlMap map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.add : $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0)
com.thoughtworks.xstream.persistence.XmlArrayList.add : $r16 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0) >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.add : virtualinvoke $r15.<com.thoughtworks.xstream.persistence.XmlMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r1)
com.thoughtworks.xstream.persistence.XmlArrayList.add : virtualinvoke $r15.<com.thoughtworks.xstream.persistence.XmlMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r16, r1) >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.put : $r3 = r0.<com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy streamStrategy>
com.thoughtworks.xstream.persistence.XmlMap.put : $r3 = r0.<com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy streamStrategy> >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.put : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.persistence.StreamStrategy: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.persistence.XmlMap.put : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.persistence.StreamStrategy: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.put : $r3 = r0.<com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy: java.util.Map map>
com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.put : $r3 = r0.<com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.put : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.put : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.put : return $r4
com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.put : return $r4 >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.put : return $r4
com.thoughtworks.xstream.persistence.XmlMap.put : return $r4 >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.get : specialinvoke r0.<com.thoughtworks.xstream.persistence.XmlArrayList: void rangeCheck(int)>(i0)
com.thoughtworks.xstream.persistence.XmlArrayList.get : specialinvoke r0.<com.thoughtworks.xstream.persistence.XmlArrayList: void rangeCheck(int)>(i0) >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.rangeCheck : i1 = virtualinvoke r0.<com.thoughtworks.xstream.persistence.XmlArrayList: int size()>()
com.thoughtworks.xstream.persistence.XmlArrayList.rangeCheck : i1 = virtualinvoke r0.<com.thoughtworks.xstream.persistence.XmlArrayList: int size()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.rangeCheck : if i0 >= i1
com.thoughtworks.xstream.persistence.XmlArrayList.rangeCheck : if i0 >= i1 >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.rangeCheck : if i0 >= 0
com.thoughtworks.xstream.persistence.XmlArrayList.rangeCheck : if i0 >= 0 >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.get : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlArrayList: com.thoughtworks.xstream.persistence.XmlMap map>
com.thoughtworks.xstream.persistence.XmlArrayList.get : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlArrayList: com.thoughtworks.xstream.persistence.XmlMap map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.get : $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0)
com.thoughtworks.xstream.persistence.XmlArrayList.get : $r2 = staticinvoke <java.lang.String: java.lang.String valueOf(int)>(i0) >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.get : $r3 = virtualinvoke $r1.<com.thoughtworks.xstream.persistence.XmlMap: java.lang.Object get(java.lang.Object)>($r2)
com.thoughtworks.xstream.persistence.XmlArrayList.get : $r3 = virtualinvoke $r1.<com.thoughtworks.xstream.persistence.XmlMap: java.lang.Object get(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.get : $r2 = r0.<com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy streamStrategy>
com.thoughtworks.xstream.persistence.XmlMap.get : $r2 = r0.<com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy streamStrategy> >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.get : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.persistence.StreamStrategy: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.persistence.XmlMap.get : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.persistence.StreamStrategy: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.get : $r2 = r0.<com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy: java.util.Map map>
com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.get : $r2 = r0.<com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.get : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.get : $r3 = interfaceinvoke $r2.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.get : return $r3
com.thoughtworks.xstream.persistence.XmlArrayListTest$MockedStrategy.get : return $r3 >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.get : return $r3
com.thoughtworks.xstream.persistence.XmlMap.get : return $r3 >>>>>>>> com.thoughtworks.xstream.persistence.XmlArrayList.get : return $r3
