com.thoughtworks.xstream.core.util.CompositeClassLoader.add : if r1 == null >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.add : $r2 = r0.<com.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders>
com.thoughtworks.xstream.core.util.CompositeClassLoader.add : $r2 = r0.<com.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders> >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.add : interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(0, r1)
com.thoughtworks.xstream.core.util.CompositeClassLoader.add : interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(0, r1) >>>>>>>> com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : $r0 = class "com/thoughtworks/acceptance/objects/SampleDynamicProxy$InterfaceOne"
com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : $r0 = class "com/thoughtworks/acceptance/objects/SampleDynamicProxy$InterfaceOne" >>>>>>>> com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>()
com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : $r1 = virtualinvoke $r0.<java.lang.Class: java.lang.ClassLoader getClassLoader()>() >>>>>>>> com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : $r2 = newarray (java.lang.Class)[2]
com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : $r2 = newarray (java.lang.Class)[2] >>>>>>>> com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : $r2[0] = class "com/thoughtworks/acceptance/objects/SampleDynamicProxy$InterfaceOne"
com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : $r2[0] = class "com/thoughtworks/acceptance/objects/SampleDynamicProxy$InterfaceOne" >>>>>>>> com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : $r2[1] = class "com/thoughtworks/acceptance/objects/SampleDynamicProxy$InterfaceTwo"
com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : $r2[1] = class "com/thoughtworks/acceptance/objects/SampleDynamicProxy$InterfaceTwo" >>>>>>>> com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : $r3 = new com.thoughtworks.acceptance.objects.SampleDynamicProxy
com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : $r3 = new com.thoughtworks.acceptance.objects.SampleDynamicProxy >>>>>>>> com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : specialinvoke $r3.<com.thoughtworks.acceptance.objects.SampleDynamicProxy: void <init>()>()
com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : specialinvoke $r3.<com.thoughtworks.acceptance.objects.SampleDynamicProxy: void <init>()>() >>>>>>>> com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : $r4 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r1, $r2, $r3)
com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : $r4 = staticinvoke <java.lang.reflect.Proxy: java.lang.Object newProxyInstance(java.lang.ClassLoader,java.lang.Class[],java.lang.reflect.InvocationHandler)>($r1, $r2, $r3) >>>>>>>> com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : return $r4
com.thoughtworks.acceptance.objects.SampleDynamicProxy.newInstance : return $r4 >>>>>>>> com.thoughtworks.xstream.mapper.XmlFriendlyMapper.serializedClass : $r2 = specialinvoke r0.<com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper: java.lang.String serializedClass(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.XmlFriendlyMapper.serializedClass : $r2 = specialinvoke r0.<com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper: java.lang.String serializedClass(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped>
com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : $r2 = r0.<com.thoughtworks.xstream.mapper.MapperWrapper: com.thoughtworks.xstream.mapper.Mapper wrapped> >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedClass(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.mapper.Mapper: java.lang.String serializedClass(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.DefaultMapper.serializedClass : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>()
com.thoughtworks.xstream.mapper.DefaultMapper.serializedClass : $r2 = virtualinvoke r1.<java.lang.Class: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.mapper.DefaultMapper.serializedClass : return $r2
com.thoughtworks.xstream.mapper.DefaultMapper.serializedClass : return $r2 >>>>>>>> com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : return $r3
com.thoughtworks.xstream.mapper.MapperWrapper.serializedClass : return $r3 >>>>>>>> com.thoughtworks.xstream.mapper.XmlFriendlyMapper.serializedClass : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.mapper.XmlFriendlyMapper: java.lang.String escapeClassName(java.lang.String)>($r2)
com.thoughtworks.xstream.mapper.XmlFriendlyMapper.serializedClass : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.mapper.XmlFriendlyMapper: java.lang.String escapeClassName(java.lang.String)>($r2) >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeClassName : $c0 = r0.<com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper: char dollarReplacementInClass>
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeClassName : $c0 = r0.<com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper: char dollarReplacementInClass> >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeClassName : r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(36, $c0)
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeClassName : r2 = virtualinvoke r1.<java.lang.String: java.lang.String replace(char,char)>(36, $c0) >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeClassName : $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0)
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeClassName : $c1 = virtualinvoke r2.<java.lang.String: char charAt(int)>(0) >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeClassName : $c2 = r0.<com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper: char dollarReplacementInClass>
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeClassName : $c2 = r0.<com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper: char dollarReplacementInClass> >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeClassName : if $c1 != $c2
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeClassName : if $c1 != $c2 >>>>>>>> com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeClassName : return r2
com.thoughtworks.xstream.mapper.AbstractXmlFriendlyMapper.escapeClassName : return r2 >>>>>>>> com.thoughtworks.xstream.mapper.XmlFriendlyMapper.serializedClass : return $r3
