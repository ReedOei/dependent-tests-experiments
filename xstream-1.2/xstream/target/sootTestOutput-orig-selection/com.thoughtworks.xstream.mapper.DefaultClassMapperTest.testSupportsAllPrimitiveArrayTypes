com.thoughtworks.xstream.core.util.CompositeClassLoader.add : if r1 == null >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.add : $r2 = r0.<com.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders>
com.thoughtworks.xstream.core.util.CompositeClassLoader.add : $r2 = r0.<com.thoughtworks.xstream.core.util.CompositeClassLoader: java.util.List classLoaders> >>>>>>>> com.thoughtworks.xstream.core.util.CompositeClassLoader.add : interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(0, r1)
com.thoughtworks.xstream.core.util.CompositeClassLoader.add : interfaceinvoke $r2.<java.util.List: void add(int,java.lang.Object)>(0, r1) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : i0 = 0
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : i0 = 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("-array")
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("-array") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : if $z0 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : $i1 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : $i1 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : $i2 = $i1 - 6
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : $i2 = $i1 - 6 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i2)
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : r1 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(0, $i2) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : i0 = i0 + 1
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : i0 = i0 + 1 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : goto [?= $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("-array")]
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : goto [?= $z0 = virtualinvoke r1.<java.lang.String: boolean endsWith(java.lang.String)>("-array")] >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : if i0 <= 0
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : if i0 <= 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : r2 = specialinvoke r0.<com.thoughtworks.xstream.mapper.ArrayMapper: java.lang.Class primitiveClassNamed(java.lang.String)>(r1)
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : r2 = specialinvoke r0.<com.thoughtworks.xstream.mapper.ArrayMapper: java.lang.Class primitiveClassNamed(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("void")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z0 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("void") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z0 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("boolean")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z1 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("boolean") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z1 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("byte")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z2 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("byte") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z2 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("char")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z3 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("char") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z3 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z3 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("short")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z4 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("short") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z4 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z4 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("int")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z5 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("int") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z5 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z5 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Integer: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Integer: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2]
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : goto [?= return $r2] >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : return $r2
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : return $r2 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : if r2 != null
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : if r2 != null >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : $r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.ArrayMapper: java.lang.Class arrayType(int,java.lang.Class)>(i0, r2)
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : $r4 = specialinvoke r0.<com.thoughtworks.xstream.mapper.ArrayMapper: java.lang.Class arrayType(int,java.lang.Class)>(i0, r2) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : r3 = $r2
com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : i1 = 0
com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : i1 = 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : if i1 >= i0
com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91)
com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(91) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : i1 = i1 + 1
com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : goto [?= (branch)]
com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : $z0 = virtualinvoke r1.<java.lang.Class: boolean isPrimitive()>()
com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : $z0 = virtualinvoke r1.<java.lang.Class: boolean isPrimitive()>() >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : if $z0 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : $c2 = specialinvoke r0.<com.thoughtworks.xstream.mapper.ArrayMapper: char charThatJavaUsesToRepresentPrimitiveArrayType(java.lang.Class)>(r1)
com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : $c2 = specialinvoke r0.<com.thoughtworks.xstream.mapper.ArrayMapper: char charThatJavaUsesToRepresentPrimitiveArrayType(java.lang.Class)>(r1) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $r2 = <java.lang.Boolean: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $r2 = <java.lang.Boolean: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : if r1 != $r2
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : if r1 != $r2 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $r3 = <java.lang.Byte: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $r3 = <java.lang.Byte: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : if r1 != $r3
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : if r1 != $r3 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $r4 = <java.lang.Character: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $r4 = <java.lang.Character: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : if r1 != $r4
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : if r1 != $r4 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $r5 = <java.lang.Short: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $r5 = <java.lang.Short: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : if r1 != $r5
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : if r1 != $r5 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $r6 = <java.lang.Integer: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $r6 = <java.lang.Integer: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : if r1 != $r6
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : if r1 != $r6 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $c0 = 73
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $c0 = 73 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : goto [?= return $c0]
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : goto [?= return $c0] >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : return $c0
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : return $c0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2)
com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>($c2) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : $r6 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : $r6 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r6)
com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : $r7 = staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>($r6) >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : return $r7
com.thoughtworks.xstream.mapper.ArrayMapper.arrayType : return $r7 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.realClass : return $r4
com.thoughtworks.xstream.mapper.ArrayMapper.realClass : return $r4 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Short: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Short: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $c0 = 83
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $c0 = 83 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("long")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z6 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("long") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z6 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z6 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Long: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Long: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $r7 = <java.lang.Long: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $r7 = <java.lang.Long: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : if r1 != $r7
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : if r1 != $r7 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $c0 = 74
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $c0 = 74 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Character: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Character: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $c0 = 67
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $c0 = 67 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Boolean: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Boolean: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $c0 = 90
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $c0 = 90 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("float")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z7 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("float") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z7 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z7 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Float: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Float: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $r8 = <java.lang.Float: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $r8 = <java.lang.Float: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : if r1 != $r8
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : if r1 != $r8 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $c0 = 70
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $c0 = 70 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("double")
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $z8 = virtualinvoke r1.<java.lang.String: boolean equals(java.lang.Object)>("double") >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z8 == 0
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : if $z8 == 0 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Double: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Double: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $r9 = <java.lang.Double: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $r9 = <java.lang.Double: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : if r1 != $r9
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : if r1 != $r9 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $c0 = 68
com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $c0 = 68 >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Byte: java.lang.Class TYPE>
com.thoughtworks.xstream.mapper.ArrayMapper.primitiveClassNamed : $r2 = <java.lang.Byte: java.lang.Class TYPE> >>>>>>>> com.thoughtworks.xstream.mapper.ArrayMapper.charThatJavaUsesToRepresentPrimitiveArrayType : $c0 = 66
