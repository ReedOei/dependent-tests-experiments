com.thoughtworks.xstream.io.xml.XppReader.createParser : $r1 = new org.xmlpull.mxp1.MXParser >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.createParser : specialinvoke $r1.<org.xmlpull.mxp1.MXParser: void <init>()>()
com.thoughtworks.xstream.io.xml.XppReader.createParser : specialinvoke $r1.<org.xmlpull.mxp1.MXParser: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.createParser : return $r1
com.thoughtworks.xstream.io.xml.XppReader.createParser : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.size : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.size : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.size : return $i0
com.thoughtworks.xstream.core.util.FastStack.size : return $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i1 > i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i1 > i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z0 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z0 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z0 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r11 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r11 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : if $i0 <= 0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : if $i0 <= 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : return $z0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : return $z0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z2 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r15 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r15 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r1 = new com.thoughtworks.xstream.io.xml.AbstractPullReader$Event
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r1 = new com.thoughtworks.xstream.io.xml.AbstractPullReader$Event >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : specialinvoke $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: void <init>(com.thoughtworks.xstream.io.xml.AbstractPullReader$1)>(null)
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : specialinvoke $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: void <init>(com.thoughtworks.xstream.io.xml.AbstractPullReader$1)>(null) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2 = $r1
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2 = $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i0 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: int pullNextEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i0 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: int pullNextEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $i0 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int next()>()
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $i0 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int next()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : tableswitch($i0) {     case 0:
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : tableswitch($i0) {     case 0: >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b1 = 1
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b1 = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b1
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> = $i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> = $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i1 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i1 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i1 != 3
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i1 != 3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i2 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i2 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i2 != 1
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i2 != 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>()
com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullElementName : return $r2
com.thoughtworks.xstream.io.xml.XppReader.pullElementName : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> = $r4
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> = $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : return r2
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : return r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r15
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r15 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : lookupswitch($i0) {     case 1:
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : lookupswitch($i0) {     case 1: >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r3)
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r3) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : goto [?= return]
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i2 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i2 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i2 >= i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i2 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0
com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1
com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2]
com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : return $r1
com.thoughtworks.xstream.core.util.FastStack.peek : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r3 = (java.lang.String) $r2
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r3 = (java.lang.String) $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String unescapeXmlName(java.lang.String)>($r3)
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String unescapeXmlName(java.lang.String)>($r3) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : return $r4
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : return $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void mark()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void mark()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.mark : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 1
com.thoughtworks.xstream.io.xml.AbstractPullReader.mark : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z1 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z1 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z1 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r7 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r7 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r8 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r8 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r9 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r8)
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r9 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r8) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r10 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r9
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r10 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r10
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r10 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : lookupswitch($i0) {     case 1:
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : lookupswitch($i0) {     case 1: >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $z0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $z0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 1
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : goto [?= return $z0]
com.thoughtworks.xstream.core.util.FastStack.hasStuff : goto [?= return $z0] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : if $z0 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1
com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1
com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1]
com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null
com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : return r2
com.thoughtworks.xstream.core.util.FastStack.pop : return r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r4)
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r4) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : goto [?= $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>]
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : goto [?= $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 1
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r12 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r12 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r13 = virtualinvoke $r12.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r13 = virtualinvoke $r12.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r14 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r13
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r14 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r13 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r14
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r14 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b2 = 2
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b2 = 2 >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b2
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : if $i1 < i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : if $i1 < i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : goto [?= $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>]
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.reassignCurrentElement : $r2 = (org.dom4j.Element) r1
com.thoughtworks.xstream.io.xml.Dom4JReader.reassignCurrentElement : $r2 = (org.dom4j.Element) r1 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.reassignCurrentElement : r0.<com.thoughtworks.xstream.io.xml.Dom4JReader: org.dom4j.Element currentElement> = $r2
com.thoughtworks.xstream.io.xml.Dom4JReader.reassignCurrentElement : r0.<com.thoughtworks.xstream.io.xml.Dom4JReader: org.dom4j.Element currentElement> = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.Dom4JReader: org.dom4j.Element currentElement>
com.thoughtworks.xstream.io.xml.Dom4JReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.Dom4JReader: org.dom4j.Element currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.getNodeName : $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String getName()>()
com.thoughtworks.xstream.io.xml.Dom4JReader.getNodeName : $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.getNodeName : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.Dom4JReader: java.lang.String unescapeXmlName(java.lang.String)>($r2)
com.thoughtworks.xstream.io.xml.Dom4JReader.getNodeName : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.Dom4JReader: java.lang.String unescapeXmlName(java.lang.String)>($r2) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.getNodeName : return $r3
com.thoughtworks.xstream.io.xml.Dom4JReader.getNodeName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0
com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1
com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2]
com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : return $r1
com.thoughtworks.xstream.core.util.FastStack.peek : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r3
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: int getChildCount()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: int getChildCount()>() >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.getChildCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.Dom4JReader: org.dom4j.Element currentElement>
com.thoughtworks.xstream.io.xml.Dom4JReader.getChildCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.Dom4JReader: org.dom4j.Element currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.getChildCount : $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.util.List elements()>()
com.thoughtworks.xstream.io.xml.Dom4JReader.getChildCount : $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.util.List elements()>() >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.getChildCount : $i0 = interfaceinvoke $r2.<java.util.List: int size()>()
com.thoughtworks.xstream.io.xml.Dom4JReader.getChildCount : $i0 = interfaceinvoke $r2.<java.util.List: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.getChildCount : return $i0
com.thoughtworks.xstream.io.xml.Dom4JReader.getChildCount : return $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : if $i0 >= $i1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : if $i0 >= $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r4
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r2 = new com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r2 = new com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: void <init>(com.thoughtworks.xstream.io.xml.AbstractDocumentReader$1)>(null)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: void <init>(com.thoughtworks.xstream.io.xml.AbstractDocumentReader$1)>(null) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r2)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getChild(int)>($i0)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getChild(int)>($i0) >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.getChild : $r1 = r0.<com.thoughtworks.xstream.io.xml.Dom4JReader: org.dom4j.Element currentElement>
com.thoughtworks.xstream.io.xml.Dom4JReader.getChild : $r1 = r0.<com.thoughtworks.xstream.io.xml.Dom4JReader: org.dom4j.Element currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.getChild : $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.util.List elements()>()
com.thoughtworks.xstream.io.xml.Dom4JReader.getChild : $r2 = interfaceinvoke $r1.<org.dom4j.Element: java.util.List elements()>() >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.getChild : $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0)
com.thoughtworks.xstream.io.xml.Dom4JReader.getChild : $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.getChild : return $r3
com.thoughtworks.xstream.io.xml.Dom4JReader.getChild : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r7
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r7 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i1 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i1 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i2 = $i1 + 1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> = $i2
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> = $i2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r9 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r9 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: void reassignCurrentElement(java.lang.Object)>($r9)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: void reassignCurrentElement(java.lang.Object)>($r9) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 0
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getParent()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getParent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.getParent : $r1 = r0.<com.thoughtworks.xstream.io.xml.Dom4JReader: org.dom4j.Element currentElement>
com.thoughtworks.xstream.io.xml.Dom4JReader.getParent : $r1 = r0.<com.thoughtworks.xstream.io.xml.Dom4JReader: org.dom4j.Element currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.getParent : $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element getParent()>()
com.thoughtworks.xstream.io.xml.Dom4JReader.getParent : $r2 = interfaceinvoke $r1.<org.dom4j.Element: org.dom4j.Element getParent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.Dom4JReader.getParent : return $r2
com.thoughtworks.xstream.io.xml.Dom4JReader.getParent : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: void popSilently()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: void popSilently()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.popSilently : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $i1 = $i0 - 1
com.thoughtworks.xstream.core.util.FastStack.popSilently : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1
com.thoughtworks.xstream.core.util.FastStack.popSilently : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2[$i1] = null
com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2[$i1] = null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: void reassignCurrentElement(java.lang.Object)>($r3)
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : $r4 = (org.w3c.dom.Element) r1
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : $r4 = (org.w3c.dom.Element) r1 >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : r0.<com.thoughtworks.xstream.io.xml.DomReader: org.w3c.dom.Element currentElement> = $r4
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : r0.<com.thoughtworks.xstream.io.xml.DomReader: org.w3c.dom.Element currentElement> = $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : $r5 = r0.<com.thoughtworks.xstream.io.xml.DomReader: org.w3c.dom.Element currentElement>
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : $r5 = r0.<com.thoughtworks.xstream.io.xml.DomReader: org.w3c.dom.Element currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : r2 = interfaceinvoke $r5.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>()
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : r2 = interfaceinvoke $r5.<org.w3c.dom.Element: org.w3c.dom.NodeList getChildNodes()>() >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : $r6 = new java.util.ArrayList
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : $r6 = new java.util.ArrayList >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : specialinvoke $r6.<java.util.ArrayList: void <init>()>()
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : specialinvoke $r6.<java.util.ArrayList: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : r0.<com.thoughtworks.xstream.io.xml.DomReader: java.util.List childElements> = $r6
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : r0.<com.thoughtworks.xstream.io.xml.DomReader: java.util.List childElements> = $r6 >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : i0 = 0
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : i0 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : $i1 = interfaceinvoke r2.<org.w3c.dom.NodeList: int getLength()>()
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : $i1 = interfaceinvoke r2.<org.w3c.dom.NodeList: int getLength()>() >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : if i0 >= $i1
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : if i0 >= $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : r3 = interfaceinvoke r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0)
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : r3 = interfaceinvoke r2.<org.w3c.dom.NodeList: org.w3c.dom.Node item(int)>(i0) >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : $z0 = r3 instanceof org.w3c.dom.Element
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : $z0 = r3 instanceof org.w3c.dom.Element >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : if $z0 == 0
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : $r7 = r0.<com.thoughtworks.xstream.io.xml.DomReader: java.util.List childElements>
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : $r7 = r0.<com.thoughtworks.xstream.io.xml.DomReader: java.util.List childElements> >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r3)
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : interfaceinvoke $r7.<java.util.List: boolean add(java.lang.Object)>(r3) >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : i0 = i0 + 1
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : i0 = i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : goto [?= $i1 = interfaceinvoke r2.<org.w3c.dom.NodeList: int getLength()>()]
com.thoughtworks.xstream.io.xml.DomReader.reassignCurrentElement : goto [?= $i1 = interfaceinvoke r2.<org.w3c.dom.NodeList: int getLength()>()] >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.DomReader: org.w3c.dom.Element currentElement>
com.thoughtworks.xstream.io.xml.DomReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.DomReader: org.w3c.dom.Element currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.getNodeName : $r2 = interfaceinvoke $r1.<org.w3c.dom.Element: java.lang.String getTagName()>()
com.thoughtworks.xstream.io.xml.DomReader.getNodeName : $r2 = interfaceinvoke $r1.<org.w3c.dom.Element: java.lang.String getTagName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.getNodeName : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.DomReader: java.lang.String unescapeXmlName(java.lang.String)>($r2)
com.thoughtworks.xstream.io.xml.DomReader.getNodeName : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.DomReader: java.lang.String unescapeXmlName(java.lang.String)>($r2) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.getNodeName : return $r3
com.thoughtworks.xstream.io.xml.DomReader.getNodeName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0
com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1
com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2]
com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : return $r1
com.thoughtworks.xstream.core.util.FastStack.peek : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r3
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: int getChildCount()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: int getChildCount()>() >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.getChildCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.DomReader: java.util.List childElements>
com.thoughtworks.xstream.io.xml.DomReader.getChildCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.DomReader: java.util.List childElements> >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.getChildCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
com.thoughtworks.xstream.io.xml.DomReader.getChildCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.getChildCount : return $i0
com.thoughtworks.xstream.io.xml.DomReader.getChildCount : return $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : if $i0 >= $i1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : if $i0 >= $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r4
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r2 = new com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r2 = new com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: void <init>(com.thoughtworks.xstream.io.xml.AbstractDocumentReader$1)>(null)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: void <init>(com.thoughtworks.xstream.io.xml.AbstractDocumentReader$1)>(null) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r2)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getChild(int)>($i0)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getChild(int)>($i0) >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.getChild : $r1 = r0.<com.thoughtworks.xstream.io.xml.DomReader: java.util.List childElements>
com.thoughtworks.xstream.io.xml.DomReader.getChild : $r1 = r0.<com.thoughtworks.xstream.io.xml.DomReader: java.util.List childElements> >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.getChild : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0)
com.thoughtworks.xstream.io.xml.DomReader.getChild : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.getChild : return $r2
com.thoughtworks.xstream.io.xml.DomReader.getChild : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r7
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r7 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i1 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i1 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i2 = $i1 + 1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> = $i2
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> = $i2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r9 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r9 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: void reassignCurrentElement(java.lang.Object)>($r9)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: void reassignCurrentElement(java.lang.Object)>($r9) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 0
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getParent()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getParent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.getParent : $r1 = r0.<com.thoughtworks.xstream.io.xml.DomReader: org.w3c.dom.Element currentElement>
com.thoughtworks.xstream.io.xml.DomReader.getParent : $r1 = r0.<com.thoughtworks.xstream.io.xml.DomReader: org.w3c.dom.Element currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.getParent : $r2 = interfaceinvoke $r1.<org.w3c.dom.Element: org.w3c.dom.Node getParentNode()>()
com.thoughtworks.xstream.io.xml.DomReader.getParent : $r2 = interfaceinvoke $r1.<org.w3c.dom.Element: org.w3c.dom.Node getParentNode()>() >>>>>>>> com.thoughtworks.xstream.io.xml.DomReader.getParent : return $r2
com.thoughtworks.xstream.io.xml.DomReader.getParent : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: void popSilently()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: void popSilently()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.popSilently : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $i1 = $i0 - 1
com.thoughtworks.xstream.core.util.FastStack.popSilently : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1
com.thoughtworks.xstream.core.util.FastStack.popSilently : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2[$i1] = null
com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2[$i1] = null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: void reassignCurrentElement(java.lang.Object)>($r3)
com.thoughtworks.xstream.io.xml.StaxDriver.createReader : specialinvoke r0.<com.thoughtworks.xstream.io.xml.StaxDriver: void loadLibrary()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.loadLibrary : $z0 = <com.thoughtworks.xstream.io.xml.StaxDriver: boolean libraryPresent>
com.thoughtworks.xstream.io.xml.StaxDriver.loadLibrary : $z0 = <com.thoughtworks.xstream.io.xml.StaxDriver: boolean libraryPresent> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.loadLibrary : if $z0 != 0
com.thoughtworks.xstream.io.xml.StaxDriver.loadLibrary : if $z0 != 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.loadLibrary : staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("javax.xml.stream.XMLStreamReader")
com.thoughtworks.xstream.io.xml.StaxDriver.loadLibrary : staticinvoke <java.lang.Class: java.lang.Class forName(java.lang.String)>("javax.xml.stream.XMLStreamReader") >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.loadLibrary : goto [?= <com.thoughtworks.xstream.io.xml.StaxDriver: boolean libraryPresent> = 1]
com.thoughtworks.xstream.io.xml.StaxDriver.loadLibrary : goto [?= <com.thoughtworks.xstream.io.xml.StaxDriver: boolean libraryPresent> = 1] >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.loadLibrary : <com.thoughtworks.xstream.io.xml.StaxDriver: boolean libraryPresent> = 1
com.thoughtworks.xstream.io.xml.StaxDriver.loadLibrary : <com.thoughtworks.xstream.io.xml.StaxDriver: boolean libraryPresent> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createReader : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLStreamReader createParser(java.io.Reader)>(r1)
com.thoughtworks.xstream.io.xml.StaxDriver.createReader : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLStreamReader createParser(java.io.Reader)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createParser : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLInputFactory getInputFactory()>()
com.thoughtworks.xstream.io.xml.StaxDriver.createParser : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLInputFactory getInputFactory()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : $r2 = r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLInputFactory inputFactory>
com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : $r2 = r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLInputFactory inputFactory> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : if $r2 != null
com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : if $r2 != null >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : $r1 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>()
com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : $r1 = staticinvoke <javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLInputFactory newInstance()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLInputFactory inputFactory> = $r1
com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLInputFactory inputFactory> = $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLInputFactory inputFactory>
com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxDriver: javax.xml.stream.XMLInputFactory inputFactory> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : return $r3
com.thoughtworks.xstream.io.xml.StaxDriver.getInputFactory : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createParser : $r3 = virtualinvoke $r2.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader)>(r1)
com.thoughtworks.xstream.io.xml.StaxDriver.createParser : $r3 = virtualinvoke $r2.<javax.xml.stream.XMLInputFactory: javax.xml.stream.XMLStreamReader createXMLStreamReader(java.io.Reader)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createParser : return $r3
com.thoughtworks.xstream.io.xml.StaxDriver.createParser : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createReader : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxDriver: com.thoughtworks.xstream.io.xml.AbstractPullReader createStaxReader(javax.xml.stream.XMLStreamReader)>($r3)
com.thoughtworks.xstream.io.xml.StaxDriver.createReader : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxDriver: com.thoughtworks.xstream.io.xml.AbstractPullReader createStaxReader(javax.xml.stream.XMLStreamReader)>($r3) >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createStaxReader : $r2 = new com.thoughtworks.xstream.io.xml.StaxReader
com.thoughtworks.xstream.io.xml.StaxDriver.createStaxReader : $r2 = new com.thoughtworks.xstream.io.xml.StaxReader >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createStaxReader : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxDriver: com.thoughtworks.xstream.io.xml.QNameMap qnameMap>
com.thoughtworks.xstream.io.xml.StaxDriver.createStaxReader : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxDriver: com.thoughtworks.xstream.io.xml.QNameMap qnameMap> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createStaxReader : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer xmlFriendlyReplacer()>()
com.thoughtworks.xstream.io.xml.StaxDriver.createStaxReader : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.StaxDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer xmlFriendlyReplacer()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : return $r1
com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createStaxReader : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.StaxReader: void <init>(com.thoughtworks.xstream.io.xml.QNameMap,javax.xml.stream.XMLStreamReader,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)>($r3, r1, $r4)
com.thoughtworks.xstream.io.xml.StaxDriver.createStaxReader : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.StaxReader: void <init>(com.thoughtworks.xstream.io.xml.QNameMap,javax.xml.stream.XMLStreamReader,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)>($r3, r1, $r4) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.size : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.size : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.size : return $i0
com.thoughtworks.xstream.core.util.FastStack.size : return $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i1 > i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i1 > i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z0 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z0 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z0 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r11 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r11 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : if $i0 <= 0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : if $i0 <= 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : return $z0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : return $z0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z2 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r15 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r15 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r1 = new com.thoughtworks.xstream.io.xml.AbstractPullReader$Event
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r1 = new com.thoughtworks.xstream.io.xml.AbstractPullReader$Event >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : specialinvoke $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: void <init>(com.thoughtworks.xstream.io.xml.AbstractPullReader$1)>(null)
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : specialinvoke $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: void <init>(com.thoughtworks.xstream.io.xml.AbstractPullReader$1)>(null) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2 = $r1
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2 = $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i0 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: int pullNextEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i0 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: int pullNextEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxReader.pullNextEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.StaxReader: javax.xml.stream.XMLStreamReader in>
com.thoughtworks.xstream.io.xml.StaxReader.pullNextEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.StaxReader: javax.xml.stream.XMLStreamReader in> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxReader.pullNextEvent : $i0 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: int next()>()
com.thoughtworks.xstream.io.xml.StaxReader.pullNextEvent : $i0 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: int next()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxReader.pullNextEvent : tableswitch($i0) {     case 1:
com.thoughtworks.xstream.io.xml.StaxReader.pullNextEvent : tableswitch($i0) {     case 1: >>>>>>>> com.thoughtworks.xstream.io.xml.StaxReader.pullNextEvent : $b1 = 1
com.thoughtworks.xstream.io.xml.StaxReader.pullNextEvent : $b1 = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxReader.pullNextEvent : return $b1
com.thoughtworks.xstream.io.xml.StaxReader.pullNextEvent : return $b1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> = $i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> = $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i1 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i1 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i1 != 3
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i1 != 3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i2 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i2 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i2 != 1
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i2 != 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxReader.pullElementName : $r2 = r0.<com.thoughtworks.xstream.io.xml.StaxReader: javax.xml.stream.XMLStreamReader in>
com.thoughtworks.xstream.io.xml.StaxReader.pullElementName : $r2 = r0.<com.thoughtworks.xstream.io.xml.StaxReader: javax.xml.stream.XMLStreamReader in> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxReader.pullElementName : r1 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.QName getName()>()
com.thoughtworks.xstream.io.xml.StaxReader.pullElementName : r1 = interfaceinvoke $r2.<javax.xml.stream.XMLStreamReader: javax.xml.namespace.QName getName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.StaxReader.pullElementName : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxReader: com.thoughtworks.xstream.io.xml.QNameMap qnameMap>
com.thoughtworks.xstream.io.xml.StaxReader.pullElementName : $r3 = r0.<com.thoughtworks.xstream.io.xml.StaxReader: com.thoughtworks.xstream.io.xml.QNameMap qnameMap> >>>>>>>> com.thoughtworks.xstream.io.xml.StaxReader.pullElementName : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.io.xml.QNameMap: java.lang.String getJavaClassName(javax.xml.namespace.QName)>(r1)
com.thoughtworks.xstream.io.xml.StaxReader.pullElementName : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.io.xml.QNameMap: java.lang.String getJavaClassName(javax.xml.namespace.QName)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getJavaClassName : $r3 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.util.Map qnameToJava>
com.thoughtworks.xstream.io.xml.QNameMap.getJavaClassName : $r3 = r0.<com.thoughtworks.xstream.io.xml.QNameMap: java.util.Map qnameToJava> >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getJavaClassName : if $r3 == null
com.thoughtworks.xstream.io.xml.QNameMap.getJavaClassName : if $r3 == null >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getJavaClassName : $r6 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>()
com.thoughtworks.xstream.io.xml.QNameMap.getJavaClassName : $r6 = virtualinvoke r1.<javax.xml.namespace.QName: java.lang.String getLocalPart()>() >>>>>>>> com.thoughtworks.xstream.io.xml.QNameMap.getJavaClassName : return $r6
com.thoughtworks.xstream.io.xml.QNameMap.getJavaClassName : return $r6 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxReader.pullElementName : return $r4
com.thoughtworks.xstream.io.xml.StaxReader.pullElementName : return $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> = $r4
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> = $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : return r2
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : return r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r15
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r15 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : lookupswitch($i0) {     case 1:
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : lookupswitch($i0) {     case 1: >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r3)
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r3) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : goto [?= return]
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i2 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i2 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i2 >= i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i2 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createStaxReader : return $r2
com.thoughtworks.xstream.io.xml.StaxDriver.createStaxReader : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxDriver.createReader : return $r4
com.thoughtworks.xstream.io.xml.StaxDriver.createReader : return $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0
com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1
com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2]
com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : return $r1
com.thoughtworks.xstream.core.util.FastStack.peek : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r3 = (java.lang.String) $r2
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r3 = (java.lang.String) $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String unescapeXmlName(java.lang.String)>($r3)
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String unescapeXmlName(java.lang.String)>($r3) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : return $r4
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : return $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void mark()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void mark()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.mark : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 1
com.thoughtworks.xstream.io.xml.AbstractPullReader.mark : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z1 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z1 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z1 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r7 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r7 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r8 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r8 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r9 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r8)
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r9 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r8) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r10 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r9
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r10 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r10
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r10 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : lookupswitch($i0) {     case 1:
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : lookupswitch($i0) {     case 1: >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $z0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $z0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 1
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : goto [?= return $z0]
com.thoughtworks.xstream.core.util.FastStack.hasStuff : goto [?= return $z0] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : if $z0 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1
com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1
com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1]
com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null
com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : return r2
com.thoughtworks.xstream.core.util.FastStack.pop : return r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r4)
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r4) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : goto [?= $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>]
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : goto [?= $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 1
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r12 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r12 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r13 = virtualinvoke $r12.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r13 = virtualinvoke $r12.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r14 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r13
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r14 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r13 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r14
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r14 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxReader.pullNextEvent : $b2 = 2
com.thoughtworks.xstream.io.xml.StaxReader.pullNextEvent : $b2 = 2 >>>>>>>> com.thoughtworks.xstream.io.xml.StaxReader.pullNextEvent : return $b2
com.thoughtworks.xstream.io.xml.StaxReader.pullNextEvent : return $b2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : if $i1 < i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : if $i1 < i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : goto [?= $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>]
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.reassignCurrentElement : $r2 = (org.jdom.Element) r1
com.thoughtworks.xstream.io.xml.JDomReader.reassignCurrentElement : $r2 = (org.jdom.Element) r1 >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.reassignCurrentElement : r0.<com.thoughtworks.xstream.io.xml.JDomReader: org.jdom.Element currentElement> = $r2
com.thoughtworks.xstream.io.xml.JDomReader.reassignCurrentElement : r0.<com.thoughtworks.xstream.io.xml.JDomReader: org.jdom.Element currentElement> = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.JDomReader: org.jdom.Element currentElement>
com.thoughtworks.xstream.io.xml.JDomReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.JDomReader: org.jdom.Element currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getNodeName : $r2 = virtualinvoke $r1.<org.jdom.Element: java.lang.String getName()>()
com.thoughtworks.xstream.io.xml.JDomReader.getNodeName : $r2 = virtualinvoke $r1.<org.jdom.Element: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getNodeName : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.JDomReader: java.lang.String unescapeXmlName(java.lang.String)>($r2)
com.thoughtworks.xstream.io.xml.JDomReader.getNodeName : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.JDomReader: java.lang.String unescapeXmlName(java.lang.String)>($r2) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getNodeName : return $r3
com.thoughtworks.xstream.io.xml.JDomReader.getNodeName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0
com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1
com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2]
com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : return $r1
com.thoughtworks.xstream.core.util.FastStack.peek : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r3
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: int getChildCount()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: int getChildCount()>() >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getChildCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.JDomReader: org.jdom.Element currentElement>
com.thoughtworks.xstream.io.xml.JDomReader.getChildCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.JDomReader: org.jdom.Element currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getChildCount : $r2 = virtualinvoke $r1.<org.jdom.Element: java.util.List getChildren()>()
com.thoughtworks.xstream.io.xml.JDomReader.getChildCount : $r2 = virtualinvoke $r1.<org.jdom.Element: java.util.List getChildren()>() >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getChildCount : $i0 = interfaceinvoke $r2.<java.util.List: int size()>()
com.thoughtworks.xstream.io.xml.JDomReader.getChildCount : $i0 = interfaceinvoke $r2.<java.util.List: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getChildCount : return $i0
com.thoughtworks.xstream.io.xml.JDomReader.getChildCount : return $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : if $i0 >= $i1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : if $i0 >= $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r4
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r2 = new com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r2 = new com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: void <init>(com.thoughtworks.xstream.io.xml.AbstractDocumentReader$1)>(null)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: void <init>(com.thoughtworks.xstream.io.xml.AbstractDocumentReader$1)>(null) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r2)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getChild(int)>($i0)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getChild(int)>($i0) >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getChild : $r1 = r0.<com.thoughtworks.xstream.io.xml.JDomReader: org.jdom.Element currentElement>
com.thoughtworks.xstream.io.xml.JDomReader.getChild : $r1 = r0.<com.thoughtworks.xstream.io.xml.JDomReader: org.jdom.Element currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getChild : $r2 = virtualinvoke $r1.<org.jdom.Element: java.util.List getChildren()>()
com.thoughtworks.xstream.io.xml.JDomReader.getChild : $r2 = virtualinvoke $r1.<org.jdom.Element: java.util.List getChildren()>() >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getChild : $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0)
com.thoughtworks.xstream.io.xml.JDomReader.getChild : $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getChild : return $r3
com.thoughtworks.xstream.io.xml.JDomReader.getChild : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r7
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r7 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i1 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i1 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i2 = $i1 + 1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> = $i2
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> = $i2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r9 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r9 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: void reassignCurrentElement(java.lang.Object)>($r9)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: void reassignCurrentElement(java.lang.Object)>($r9) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 0
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getParent()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getParent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getParent : $r1 = r0.<com.thoughtworks.xstream.io.xml.JDomReader: org.jdom.Element currentElement>
com.thoughtworks.xstream.io.xml.JDomReader.getParent : $r1 = r0.<com.thoughtworks.xstream.io.xml.JDomReader: org.jdom.Element currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getParent : $r2 = virtualinvoke $r1.<org.jdom.Element: org.jdom.Element getParentElement()>()
com.thoughtworks.xstream.io.xml.JDomReader.getParent : $r2 = virtualinvoke $r1.<org.jdom.Element: org.jdom.Element getParentElement()>() >>>>>>>> com.thoughtworks.xstream.io.xml.JDomReader.getParent : return $r2
com.thoughtworks.xstream.io.xml.JDomReader.getParent : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: void popSilently()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: void popSilently()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.popSilently : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $i1 = $i0 - 1
com.thoughtworks.xstream.core.util.FastStack.popSilently : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1
com.thoughtworks.xstream.core.util.FastStack.popSilently : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2[$i1] = null
com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2[$i1] = null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: void reassignCurrentElement(java.lang.Object)>($r3)
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.reassignCurrentElement : $r2 = (nu.xom.Element) r1
com.thoughtworks.xstream.io.xml.XomReader.reassignCurrentElement : $r2 = (nu.xom.Element) r1 >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.reassignCurrentElement : r0.<com.thoughtworks.xstream.io.xml.XomReader: nu.xom.Element currentElement> = $r2
com.thoughtworks.xstream.io.xml.XomReader.reassignCurrentElement : r0.<com.thoughtworks.xstream.io.xml.XomReader: nu.xom.Element currentElement> = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.XomReader: nu.xom.Element currentElement>
com.thoughtworks.xstream.io.xml.XomReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.XomReader: nu.xom.Element currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.getNodeName : $r2 = virtualinvoke $r1.<nu.xom.Element: java.lang.String getLocalName()>()
com.thoughtworks.xstream.io.xml.XomReader.getNodeName : $r2 = virtualinvoke $r1.<nu.xom.Element: java.lang.String getLocalName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.getNodeName : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XomReader: java.lang.String unescapeXmlName(java.lang.String)>($r2)
com.thoughtworks.xstream.io.xml.XomReader.getNodeName : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XomReader: java.lang.String unescapeXmlName(java.lang.String)>($r2) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.getNodeName : return $r3
com.thoughtworks.xstream.io.xml.XomReader.getNodeName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0
com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1
com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2]
com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : return $r1
com.thoughtworks.xstream.core.util.FastStack.peek : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r3
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: int getChildCount()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: int getChildCount()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.getChildCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.XomReader: nu.xom.Element currentElement>
com.thoughtworks.xstream.io.xml.XomReader.getChildCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.XomReader: nu.xom.Element currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.getChildCount : $r2 = virtualinvoke $r1.<nu.xom.Element: nu.xom.Elements getChildElements()>()
com.thoughtworks.xstream.io.xml.XomReader.getChildCount : $r2 = virtualinvoke $r1.<nu.xom.Element: nu.xom.Elements getChildElements()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.getChildCount : $i0 = virtualinvoke $r2.<nu.xom.Elements: int size()>()
com.thoughtworks.xstream.io.xml.XomReader.getChildCount : $i0 = virtualinvoke $r2.<nu.xom.Elements: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.getChildCount : return $i0
com.thoughtworks.xstream.io.xml.XomReader.getChildCount : return $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : if $i0 >= $i1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : if $i0 >= $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r4
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r2 = new com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r2 = new com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: void <init>(com.thoughtworks.xstream.io.xml.AbstractDocumentReader$1)>(null)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: void <init>(com.thoughtworks.xstream.io.xml.AbstractDocumentReader$1)>(null) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r2)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getChild(int)>($i0)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getChild(int)>($i0) >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.getChild : $r1 = r0.<com.thoughtworks.xstream.io.xml.XomReader: nu.xom.Element currentElement>
com.thoughtworks.xstream.io.xml.XomReader.getChild : $r1 = r0.<com.thoughtworks.xstream.io.xml.XomReader: nu.xom.Element currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.getChild : $r2 = virtualinvoke $r1.<nu.xom.Element: nu.xom.Elements getChildElements()>()
com.thoughtworks.xstream.io.xml.XomReader.getChild : $r2 = virtualinvoke $r1.<nu.xom.Element: nu.xom.Elements getChildElements()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.getChild : $r3 = virtualinvoke $r2.<nu.xom.Elements: nu.xom.Element get(int)>(i0)
com.thoughtworks.xstream.io.xml.XomReader.getChild : $r3 = virtualinvoke $r2.<nu.xom.Elements: nu.xom.Element get(int)>(i0) >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.getChild : return $r3
com.thoughtworks.xstream.io.xml.XomReader.getChild : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r7
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r7 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i1 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i1 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i2 = $i1 + 1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> = $i2
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> = $i2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r9 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r9 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: void reassignCurrentElement(java.lang.Object)>($r9)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: void reassignCurrentElement(java.lang.Object)>($r9) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 0
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getParent()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getParent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.getParent : $r1 = r0.<com.thoughtworks.xstream.io.xml.XomReader: nu.xom.Element currentElement>
com.thoughtworks.xstream.io.xml.XomReader.getParent : $r1 = r0.<com.thoughtworks.xstream.io.xml.XomReader: nu.xom.Element currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.getParent : $r2 = virtualinvoke $r1.<nu.xom.Element: nu.xom.ParentNode getParent()>()
com.thoughtworks.xstream.io.xml.XomReader.getParent : $r2 = virtualinvoke $r1.<nu.xom.Element: nu.xom.ParentNode getParent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XomReader.getParent : return $r2
com.thoughtworks.xstream.io.xml.XomReader.getParent : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: void popSilently()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: void popSilently()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.popSilently : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $i1 = $i0 - 1
com.thoughtworks.xstream.core.util.FastStack.popSilently : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1
com.thoughtworks.xstream.core.util.FastStack.popSilently : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2[$i1] = null
com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2[$i1] = null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: void reassignCurrentElement(java.lang.Object)>($r3)
com.thoughtworks.xstream.io.xml.XppDomDriver.createReader : $r2 = new com.thoughtworks.xstream.io.xml.XppDomReader >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createReader : $r4 = staticinvoke <com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom build(java.io.Reader)>(r1)
com.thoughtworks.xstream.io.xml.XppDomDriver.createReader : $r4 = staticinvoke <com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom build(java.io.Reader)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $r1 = new java.util.ArrayList
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $r1 = new java.util.ArrayList >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : specialinvoke $r1.<java.util.ArrayList: void <init>()>()
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : specialinvoke $r1.<java.util.ArrayList: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r2 = $r1
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r2 = $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $r11 = new java.util.ArrayList
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $r11 = new java.util.ArrayList >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : specialinvoke $r11.<java.util.ArrayList: void <init>()>()
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : specialinvoke $r11.<java.util.ArrayList: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r3 = $r11
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r3 = $r11 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r4 = null
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r4 = null >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $r12 = new org.xmlpull.mxp1.MXParser
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $r12 = new org.xmlpull.mxp1.MXParser >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : specialinvoke $r12.<org.xmlpull.mxp1.MXParser: void <init>()>()
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : specialinvoke $r12.<org.xmlpull.mxp1.MXParser: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r5 = $r12
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r5 = $r12 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>(r0)
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: void setInput(java.io.Reader)>(r0) >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : i0 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int getEventType()>()
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : i0 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int getEventType()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : if i0 == 1
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : if i0 == 1 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : if i0 != 2
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : if i0 != 2 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : if i0 != 4
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : if i0 != 4 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : if i0 != 3
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : if i0 != 3 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : i0 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int next()>()
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : i0 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int next()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r6 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>()
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r6 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $r13 = new com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $r13 = new com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : specialinvoke $r13.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: void <init>(java.lang.String)>(r6)
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : specialinvoke $r13.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: void <init>(java.lang.String)>(r6) >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r7 = $r13
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r7 = $r13 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : i1 = interfaceinvoke r2.<java.util.List: int size()>()
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : i1 = interfaceinvoke r2.<java.util.List: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : if i1 <= 0
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : if i1 <= 0 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r7)
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $r15 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $r15 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : specialinvoke $r15.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : specialinvoke $r15.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r15)
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : interfaceinvoke r3.<java.util.List: boolean add(java.lang.Object)>($r15) >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : i4 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>()
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : i4 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : i2 = 0
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : i2 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : if i2 >= i4
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : if i2 >= i4 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : goto [?= i0 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int next()>()]
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : goto [?= i0 = interfaceinvoke r5.<org.xmlpull.v1.XmlPullParser: int next()>()] >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $i3 = i1 - 1
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $i3 = i1 - 1 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $r14 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i3)
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $r14 = interfaceinvoke r2.<java.util.List: java.lang.Object get(int)>($i3) >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r8 = (com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom) $r14
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r8 = (com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom) $r14 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : virtualinvoke r8.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: void addChild(com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom)>(r7)
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : virtualinvoke r8.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: void addChild(com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom)>(r7) >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.addChild : virtualinvoke r1.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: void setParent(com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom)>(r0)
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.addChild : virtualinvoke r1.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: void setParent(com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom)>(r0) >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.setParent : r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom parent> = r1
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.setParent : r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom parent> = r1 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.addChild : $r2 = r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.util.List childList>
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.addChild : $r2 = r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.util.List childList> >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.addChild : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.addChild : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.addChild : $r3 = r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.util.Map childMap>
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.addChild : $r3 = r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.util.Map childMap> >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.addChild : $r4 = virtualinvoke r1.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.lang.String getName()>()
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.addChild : $r4 = virtualinvoke r1.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getName : $r1 = r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.lang.String name>
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getName : $r1 = r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.lang.String name> >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getName : return $r1
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getName : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.addChild : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1)
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.addChild : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1) >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $i7 = interfaceinvoke r2.<java.util.List: int size()>()
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $i7 = interfaceinvoke r2.<java.util.List: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : i8 = $i7 - 1
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : i8 = $i7 - 1 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $r20 = interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>(i8)
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $r20 = interfaceinvoke r2.<java.util.List: java.lang.Object remove(int)>(i8) >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r21 = (com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom) $r20
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r21 = (com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom) $r20 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $r22 = interfaceinvoke r3.<java.util.List: java.lang.Object remove(int)>(i8)
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $r22 = interfaceinvoke r3.<java.util.List: java.lang.Object remove(int)>(i8) >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r23 = virtualinvoke $r22.<java.lang.Object: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r23 = virtualinvoke $r22.<java.lang.Object: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $i9 = virtualinvoke r23.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : $i9 = virtualinvoke r23.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : if 0 != $i9
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : if 0 != $i9 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r24 = null
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r24 = null >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : goto [?= virtualinvoke r21.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: void setValue(java.lang.String)>(r24)]
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : goto [?= virtualinvoke r21.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: void setValue(java.lang.String)>(r24)] >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : virtualinvoke r21.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: void setValue(java.lang.String)>(r24)
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : virtualinvoke r21.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: void setValue(java.lang.String)>(r24) >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.setValue : r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.lang.String value> = r1
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.setValue : r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.lang.String value> = r1 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : if 0 != i8
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : if 0 != i8 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r4 = r21
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : r4 = r21 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : virtualinvoke r0.<java.io.Reader: void close()>()
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : virtualinvoke r0.<java.io.Reader: void close()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : return r4
com.thoughtworks.xstream.io.xml.xppdom.Xpp3DomBuilder.build : return r4 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createReader : $r5 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDomDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer xmlFriendlyReplacer()>()
com.thoughtworks.xstream.io.xml.XppDomDriver.createReader : $r5 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDomDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer xmlFriendlyReplacer()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlDriver: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : return $r1
com.thoughtworks.xstream.io.xml.AbstractXmlDriver.xmlFriendlyReplacer : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createReader : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.XppDomReader: void <init>(com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)>($r4, $r5)
com.thoughtworks.xstream.io.xml.XppDomDriver.createReader : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.XppDomReader: void <init>(com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom,com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer)>($r4, $r5) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomReader.reassignCurrentElement : $r2 = (com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom) r1
com.thoughtworks.xstream.io.xml.XppDomReader.reassignCurrentElement : $r2 = (com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom) r1 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomReader.reassignCurrentElement : r0.<com.thoughtworks.xstream.io.xml.XppDomReader: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom currentElement> = $r2
com.thoughtworks.xstream.io.xml.XppDomReader.reassignCurrentElement : r0.<com.thoughtworks.xstream.io.xml.XppDomReader: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom currentElement> = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomDriver.createReader : return $r2
com.thoughtworks.xstream.io.xml.XppDomDriver.createReader : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppDomReader: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom currentElement>
com.thoughtworks.xstream.io.xml.XppDomReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppDomReader: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.lang.String getName()>()
com.thoughtworks.xstream.io.xml.XppDomReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomReader.getNodeName : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDomReader: java.lang.String unescapeXmlName(java.lang.String)>($r2)
com.thoughtworks.xstream.io.xml.XppDomReader.getNodeName : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.XppDomReader: java.lang.String unescapeXmlName(java.lang.String)>($r2) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomReader.getNodeName : return $r3
com.thoughtworks.xstream.io.xml.XppDomReader.getNodeName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0
com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1
com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2]
com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : return $r1
com.thoughtworks.xstream.core.util.FastStack.peek : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r3
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: int getChildCount()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : $i1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: int getChildCount()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomReader.getChildCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppDomReader: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom currentElement>
com.thoughtworks.xstream.io.xml.XppDomReader.getChildCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppDomReader: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomReader.getChildCount : $i0 = virtualinvoke $r1.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: int getChildCount()>()
com.thoughtworks.xstream.io.xml.XppDomReader.getChildCount : $i0 = virtualinvoke $r1.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: int getChildCount()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChildCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.util.List childList>
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChildCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.util.List childList> >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChildCount : if null != $r1
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChildCount : if null != $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChildCount : $r2 = r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.util.List childList>
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChildCount : $r2 = r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.util.List childList> >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChildCount : $i0 = interfaceinvoke $r2.<java.util.List: int size()>()
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChildCount : $i0 = interfaceinvoke $r2.<java.util.List: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChildCount : return $i0
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChildCount : return $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomReader.getChildCount : return $i0
com.thoughtworks.xstream.io.xml.XppDomReader.getChildCount : return $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : if $i0 >= $i1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : if $i0 >= $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r4
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1 = (com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer) $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r2 = new com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r2 = new com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: void <init>(com.thoughtworks.xstream.io.xml.AbstractDocumentReader$1)>(null)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : specialinvoke $r2.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: void <init>(com.thoughtworks.xstream.io.xml.AbstractDocumentReader$1)>(null) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r2)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r2) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i0 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getChild(int)>($i0)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r7 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getChild(int)>($i0) >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomReader.getChild : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppDomReader: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom currentElement>
com.thoughtworks.xstream.io.xml.XppDomReader.getChild : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppDomReader: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomReader.getChild : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom getChild(int)>(i0)
com.thoughtworks.xstream.io.xml.XppDomReader.getChild : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom getChild(int)>(i0) >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChild : $r1 = r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.util.List childList>
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChild : $r1 = r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: java.util.List childList> >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChild : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0)
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChild : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChild : $r3 = (com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom) $r2
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChild : $r3 = (com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom) $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChild : return $r3
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getChild : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomReader.getChild : return $r2
com.thoughtworks.xstream.io.xml.XppDomReader.getChild : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r7
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r7 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i1 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i1 = r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i2 = $i1 + 1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> = $i2
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : r1.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader$Pointer: int v> = $i2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r9 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : $r9 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: void reassignCurrentElement(java.lang.Object)>($r9)
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveDown : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: void reassignCurrentElement(java.lang.Object)>($r9) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 0
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.hasMoreChildren : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getParent()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r1 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object getParent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomReader.getParent : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppDomReader: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom currentElement>
com.thoughtworks.xstream.io.xml.XppDomReader.getParent : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppDomReader: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom currentElement> >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomReader.getParent : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom getParent()>()
com.thoughtworks.xstream.io.xml.XppDomReader.getParent : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom getParent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getParent : $r1 = r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom parent>
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getParent : $r1 = r0.<com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom: com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom parent> >>>>>>>> com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getParent : return $r1
com.thoughtworks.xstream.io.xml.xppdom.Xpp3Dom.getParent : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.XppDomReader.getParent : return $r2
com.thoughtworks.xstream.io.xml.XppDomReader.getParent : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r1
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> = $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: com.thoughtworks.xstream.core.util.FastStack pointers> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: void popSilently()>()
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: void popSilently()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.popSilently : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $i1 = $i0 - 1
com.thoughtworks.xstream.core.util.FastStack.popSilently : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1
com.thoughtworks.xstream.core.util.FastStack.popSilently : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2[$i1] = null
com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2[$i1] = null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current>
com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: java.lang.Object current> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractDocumentReader.moveUp : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractDocumentReader: void reassignCurrentElement(java.lang.Object)>($r3)
com.thoughtworks.xstream.io.xml.XppReader.createParser : $r1 = new org.xmlpull.mxp1.MXParser >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.createParser : specialinvoke $r1.<org.xmlpull.mxp1.MXParser: void <init>()>()
com.thoughtworks.xstream.io.xml.XppReader.createParser : specialinvoke $r1.<org.xmlpull.mxp1.MXParser: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.createParser : return $r1
com.thoughtworks.xstream.io.xml.XppReader.createParser : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.size : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.size : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.size : return $i0
com.thoughtworks.xstream.core.util.FastStack.size : return $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i1 > i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i1 > i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z0 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z0 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z0 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r11 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r11 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : if $i0 <= 0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : if $i0 <= 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : return $z0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : return $z0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z2 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r15 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r15 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r1 = new com.thoughtworks.xstream.io.xml.AbstractPullReader$Event
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r1 = new com.thoughtworks.xstream.io.xml.AbstractPullReader$Event >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : specialinvoke $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: void <init>(com.thoughtworks.xstream.io.xml.AbstractPullReader$1)>(null)
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : specialinvoke $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: void <init>(com.thoughtworks.xstream.io.xml.AbstractPullReader$1)>(null) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2 = $r1
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2 = $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i0 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: int pullNextEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i0 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: int pullNextEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $i0 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int next()>()
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $i0 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int next()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : tableswitch($i0) {     case 0:
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : tableswitch($i0) {     case 0: >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b1 = 1
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b1 = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b1
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> = $i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> = $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i1 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i1 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i1 != 3
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i1 != 3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i2 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i2 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i2 != 1
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i2 != 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>()
com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullElementName : return $r2
com.thoughtworks.xstream.io.xml.XppReader.pullElementName : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> = $r4
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> = $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : return r2
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : return r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r15
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r15 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : lookupswitch($i0) {     case 1:
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : lookupswitch($i0) {     case 1: >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r3)
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r3) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : goto [?= return]
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i2 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i2 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i2 >= i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i2 >= i0 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : $r3 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getNodeName()>()
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : $r3 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getNodeName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0
com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1
com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2]
com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : return $r1
com.thoughtworks.xstream.core.util.FastStack.peek : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r3 = (java.lang.String) $r2
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r3 = (java.lang.String) $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String unescapeXmlName(java.lang.String)>($r3)
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String unescapeXmlName(java.lang.String)>($r3) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : return $r4
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : return $r4 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void startNode(java.lang.String)>($r3)
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void startNode(java.lang.String)>($r3) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $r2 = new com.thoughtworks.xstream.io.binary.Token$StartNode
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $r2 = new com.thoughtworks.xstream.io.binary.Token$StartNode >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry idRegistry>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry idRegistry> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $l0 = virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long getId(java.lang.String)>(r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : $l0 = virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long getId(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: java.util.Map ids>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: java.util.Map ids> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r5 = interfaceinvoke $r4.<java.util.Map: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r2 = (java.lang.Long) $r5
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r2 = (java.lang.Long) $r5 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : if r2 != null
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : if r2 != null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r6 = new java.lang.Long
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r6 = new java.lang.Long >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long nextId>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long nextId> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l1 = $l0 + 1L
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l1 = $l0 + 1L >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long nextId> = $l1
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: long nextId> = $l1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : specialinvoke $r6.<java.lang.Long: void <init>(long)>($l1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : specialinvoke $r6.<java.lang.Long: void <init>(long)>($l1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r2 = $r6
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : r2 = $r6 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r7 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: java.util.Map ids>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r7 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: java.util.Map ids> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : interfaceinvoke $r7.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r9 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: com.thoughtworks.xstream.io.binary.BinaryStreamWriter this$0>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r9 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry: com.thoughtworks.xstream.io.binary.BinaryStreamWriter this$0> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r10 = new com.thoughtworks.xstream.io.binary.Token$MapIdToValue
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $r10 = new com.thoughtworks.xstream.io.binary.Token$MapIdToValue >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l2 = virtualinvoke r2.<java.lang.Long: long longValue()>()
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l2 = virtualinvoke r2.<java.lang.Long: long longValue()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : specialinvoke $r10.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void <init>(long,java.lang.String)>($l2, r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : specialinvoke $r10.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void <init>(long,java.lang.String)>($l2, r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : staticinvoke <com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void access$100(com.thoughtworks.xstream.io.binary.BinaryStreamWriter,com.thoughtworks.xstream.io.binary.Token)>($r9, $r10)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : staticinvoke <com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void access$100(com.thoughtworks.xstream.io.binary.BinaryStreamWriter,com.thoughtworks.xstream.io.binary.Token)>($r9, $r10) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.access$100 : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>(r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.access$100 : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: com.thoughtworks.xstream.io.binary.Token$Formatter tokenFormatter>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: com.thoughtworks.xstream.io.binary.Token$Formatter tokenFormatter> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: java.io.DataOutputStream out>
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: java.io.DataOutputStream out> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.Token$Formatter: void write(java.io.DataOutput,com.thoughtworks.xstream.io.binary.Token)>($r4, r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.Token$Formatter: void write(java.io.DataOutput,com.thoughtworks.xstream.io.binary.Token)>($r4, r1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : l0 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: long getId()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.write : l0 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: long getId()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.Token: long id>
com.thoughtworks.xstream.io.binary.Token.getId : $l0 = r0.<com.thoughtworks.xstream.io.binary.Token: long id> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getId : return $l0
com.thoughtworks.xstream.io.binary.Token.getId : return $l0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b2 = l0 cmp 255L
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b2 = l0 cmp 255L >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b2 > 0
com.thoughtworks.xstream.io.binary.Token$Formatter.write : if $b2 > 0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : b1 = 8
com.thoughtworks.xstream.io.binary.Token$Formatter.write : b1 = 8 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : goto [?= $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()]
com.thoughtworks.xstream.io.binary.Token$Formatter.write : goto [?= $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()] >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $b5 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getType : $b0 = r0.<com.thoughtworks.xstream.io.binary.Token: byte type>
com.thoughtworks.xstream.io.binary.Token.getType : $b0 = r0.<com.thoughtworks.xstream.io.binary.Token: byte type> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getType : return $b0
com.thoughtworks.xstream.io.binary.Token.getType : return $b0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : $i6 = $b5 + b1
com.thoughtworks.xstream.io.binary.Token$Formatter.write : $i6 = $b5 + b1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i6)
com.thoughtworks.xstream.io.binary.Token$Formatter.write : interfaceinvoke r1.<java.io.DataOutput: void write(int)>($i6) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.write : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void writeTo(java.io.DataOutput,byte)>(r1, b1)
com.thoughtworks.xstream.io.binary.Token$Formatter.write : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void writeTo(java.io.DataOutput,byte)>(r1, b1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : $l1 = r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long id>
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : $l1 = r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long id> >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void writeId(java.io.DataOutput,long,byte)>(r1, $l1, b0)
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void writeId(java.io.DataOutput,long,byte)>(r1, $l1, b0) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $b2 = l0 cmp 0L
com.thoughtworks.xstream.io.binary.Token.writeId : $b2 = l0 cmp 0L >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : if $b2 >= 0
com.thoughtworks.xstream.io.binary.Token.writeId : if $b2 >= 0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : lookupswitch(b1) {     case 8:
com.thoughtworks.xstream.io.binary.Token.writeId : lookupswitch(b1) {     case 8: >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $i3 = (int) l0
com.thoughtworks.xstream.io.binary.Token.writeId : $i3 = (int) l0 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $b4 = (byte) $i3
com.thoughtworks.xstream.io.binary.Token.writeId : $b4 = (byte) $i3 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : $i5 = $b4 + -128
com.thoughtworks.xstream.io.binary.Token.writeId : $i5 = $b4 + -128 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($i5)
com.thoughtworks.xstream.io.binary.Token.writeId : interfaceinvoke r1.<java.io.DataOutput: void writeByte(int)>($i5) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeId : goto [?= return]
com.thoughtworks.xstream.io.binary.Token.writeId : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : $r2 = r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String value>
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : $r2 = r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String value> >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void writeString(java.io.DataOutput,java.lang.String)>(r1, $r2)
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void writeString(java.io.DataOutput,java.lang.String)>(r1, $r2) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.writeString : interfaceinvoke r1.<java.io.DataOutput: void writeUTF(java.lang.String)>(r2)
com.thoughtworks.xstream.io.binary.Token.writeString : interfaceinvoke r1.<java.io.DataOutput: void writeUTF(java.lang.String)>(r2) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : goto [?= return]
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.write : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l3 = virtualinvoke r2.<java.lang.Long: long longValue()>()
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : $l3 = virtualinvoke r2.<java.lang.Long: long longValue()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : return $l3
com.thoughtworks.xstream.io.binary.BinaryStreamWriter$IdRegistry.getId : return $l3 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : specialinvoke $r2.<com.thoughtworks.xstream.io.binary.Token$StartNode: void <init>(long)>($l0)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : specialinvoke $r2.<com.thoughtworks.xstream.io.binary.Token$StartNode: void <init>(long)>($l0) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>($r2)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>($r2) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : $l1 = r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id>
com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : $l1 = r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id> >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: void writeId(java.io.DataOutput,long,byte)>(r1, $l1, b0)
com.thoughtworks.xstream.io.binary.Token$StartNode.writeTo : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: void writeId(java.io.DataOutput,long,byte)>(r1, $l1, b0) >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : i0 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: int getAttributeCount()>()
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : i0 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: int getAttributeCount()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : $i0 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>()
com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : $i0 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : return $i0
com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : return $i0 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : i1 = 0
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : if i1 >= i0
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : r6 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getValue()>()
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : r6 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getValue()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r1 = null
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r1 = null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r2 = null
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r2 = null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void mark()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void mark()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.mark : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 1
com.thoughtworks.xstream.io.xml.AbstractPullReader.mark : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r3 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r3 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z1 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z1 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z1 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r7 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r7 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r8 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r8 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r9 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r8)
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r9 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r8) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r10 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r9
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r10 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r10
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r10 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $i0 = r3.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $i0 = r3.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if $i0 != 3
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if $i0 != 3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $i2 = r3.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $i2 = r3.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if $i2 == 4
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if $i2 == 4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : goto [?= virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>()]
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : goto [?= virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>()] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $z0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $z0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 1
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : goto [?= return $z0]
com.thoughtworks.xstream.core.util.FastStack.hasStuff : goto [?= return $z0] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : if $z0 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1
com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1
com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1]
com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null
com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : return r2
com.thoughtworks.xstream.core.util.FastStack.pop : return r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r4)
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r4) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : goto [?= $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>]
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : goto [?= $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if r2 == null
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if r2 == null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if r1 != null
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if r1 != null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $r8 = ""
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $r8 = "" >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : goto [?= return $r8]
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : goto [?= return $r8] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : return $r8
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : return $r8 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : if r6 == null
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : if r6 == null >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : $i2 = virtualinvoke r6.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : $i2 = virtualinvoke r6.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : if $i2 <= 0
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : if $i2 <= 0 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : $z0 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: boolean hasMoreChildren()>()
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : $z0 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: boolean hasMoreChildren()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void mark()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void mark()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r5 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r4)
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r5 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r4) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r6 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r5
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r6 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r5 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r6
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r6 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : lookupswitch($i0) {     case 1:
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : lookupswitch($i0) {     case 1: >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 1
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 1 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : if $z0 == 0
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveDown()>()
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveDown()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r12 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r12 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r13 = virtualinvoke $r12.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r13 = virtualinvoke $r12.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r14 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r13
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r14 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r13 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r14
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r14 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : virtualinvoke r0.<com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier: void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)>(r1, r2)
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : virtualinvoke r0.<com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier: void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b2 = 2
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b2 = 2 >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b2
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 0 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void endNode()>()
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void endNode()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : $r1 = new com.thoughtworks.xstream.io.binary.Token$EndNode
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : $r1 = new com.thoughtworks.xstream.io.binary.Token$EndNode >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.Token$EndNode: void <init>()>()
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.Token$EndNode: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>($r1)
com.thoughtworks.xstream.io.binary.BinaryStreamWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamWriter: void write(com.thoughtworks.xstream.io.binary.Token)>($r1) >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveUp()>()
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveUp()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : if $i1 < i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : if $i1 < i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : goto [?= $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>]
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : goto [?= $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>] >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : goto [?= $z0 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: boolean hasMoreChildren()>()]
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : goto [?= $z0 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: boolean hasMoreChildren()>()] >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void push()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void push()>() >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : $r1 = new com.thoughtworks.xstream.io.binary.ReaderDepthState$State
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : $r1 = new com.thoughtworks.xstream.io.binary.ReaderDepthState$State >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: void <init>(com.thoughtworks.xstream.io.binary.ReaderDepthState$1)>(null)
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: void <init>(com.thoughtworks.xstream.io.binary.ReaderDepthState$1)>(null) >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r2 = $r1
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r2 = $r1 >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : $r3 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : $r3 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: com.thoughtworks.xstream.io.binary.ReaderDepthState$State parent> = $r3
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: com.thoughtworks.xstream.io.binary.ReaderDepthState$State parent> = $r3 >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> = r2
com.thoughtworks.xstream.io.binary.ReaderDepthState.push : r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> = r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : r1 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : r1 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r2 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r2 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : if $r2 != null
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : if $r2 != null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token$Formatter tokenFormatter>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token$Formatter tokenFormatter> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: java.io.DataInputStream in>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: java.io.DataInputStream in> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r1 = virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.Token$Formatter: com.thoughtworks.xstream.io.binary.Token read(java.io.DataInput)>($r4)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r1 = virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.Token$Formatter: com.thoughtworks.xstream.io.binary.Token read(java.io.DataInput)>($r4) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : b0 = interfaceinvoke r1.<java.io.DataInput: byte readByte()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.read : b0 = interfaceinvoke r1.<java.io.DataInput: byte readByte()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : $b3 = b0 & 7
com.thoughtworks.xstream.io.binary.Token$Formatter.read : $b3 = b0 & 7 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : b1 = (byte) $b3
com.thoughtworks.xstream.io.binary.Token$Formatter.read : b1 = (byte) $b3 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : $b4 = b0 & 56
com.thoughtworks.xstream.io.binary.Token$Formatter.read : $b4 = b0 & 56 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : b2 = (byte) $b4
com.thoughtworks.xstream.io.binary.Token$Formatter.read : b2 = (byte) $b4 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.Token$Formatter: com.thoughtworks.xstream.io.binary.Token contructToken(byte)>(b1)
com.thoughtworks.xstream.io.binary.Token$Formatter.read : r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.Token$Formatter: com.thoughtworks.xstream.io.binary.Token contructToken(byte)>(b1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : tableswitch(b0) {     case 2:
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : tableswitch(b0) {     case 2: >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r2 = new com.thoughtworks.xstream.io.binary.Token$MapIdToValue
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r2 = new com.thoughtworks.xstream.io.binary.Token$MapIdToValue >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r2.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void <init>()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r2.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r2
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void readFrom(java.io.DataInput,byte)>(r1, b2)
com.thoughtworks.xstream.io.binary.Token$Formatter.read : virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: void readFrom(java.io.DataInput,byte)>(r1, b2) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : $l1 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long readId(java.io.DataInput,byte)>(r1, b0)
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : $l1 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long readId(java.io.DataInput,byte)>(r1, b0) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : lookupswitch(b0) {     case 8:
com.thoughtworks.xstream.io.binary.Token.readId : lookupswitch(b0) {     case 8: >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : $b1 = interfaceinvoke r1.<java.io.DataInput: byte readByte()>()
com.thoughtworks.xstream.io.binary.Token.readId : $b1 = interfaceinvoke r1.<java.io.DataInput: byte readByte()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : $i2 = $b1 - -128
com.thoughtworks.xstream.io.binary.Token.readId : $i2 = $b1 - -128 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : $l3 = (long) $i2
com.thoughtworks.xstream.io.binary.Token.readId : $l3 = (long) $i2 >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readId : return $l3
com.thoughtworks.xstream.io.binary.Token.readId : return $l3 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long id> = $l1
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: long id> = $l1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String readString(java.io.DataInput)>(r1)
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : $r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String readString(java.io.DataInput)>(r1) >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readString : $r2 = interfaceinvoke r1.<java.io.DataInput: java.lang.String readUTF()>()
com.thoughtworks.xstream.io.binary.Token.readString : $r2 = interfaceinvoke r1.<java.io.DataInput: java.lang.String readUTF()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.readString : return $r2
com.thoughtworks.xstream.io.binary.Token.readString : return $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String value> = $r2
com.thoughtworks.xstream.io.binary.Token$MapIdToValue.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$MapIdToValue: java.lang.String value> = $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.read : return r2
com.thoughtworks.xstream.io.binary.Token$Formatter.read : return r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $b0 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $b0 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : lookupswitch($b0) {     case 2:
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : lookupswitch($b0) {     case 2: >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry idRegistry>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry idRegistry> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $l1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: long getId()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $l1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: long getId()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r6 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: java.lang.String getValue()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r6 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: java.lang.String getValue()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getValue : $r1 = r0.<com.thoughtworks.xstream.io.binary.Token: java.lang.String value>
com.thoughtworks.xstream.io.binary.Token.getValue : $r1 = r0.<com.thoughtworks.xstream.io.binary.Token: java.lang.String value> >>>>>>>> com.thoughtworks.xstream.io.binary.Token.getValue : return $r1
com.thoughtworks.xstream.io.binary.Token.getValue : return $r1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: void put(long,java.lang.String)>($l1, $r6)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: void put(long,java.lang.String)>($l1, $r6) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.util.Map map>
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : $r2 = new java.lang.Long
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : $r2 = new java.lang.Long >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : specialinvoke $r2.<java.lang.Long: void <init>(long)>(l0)
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : specialinvoke $r2.<java.lang.Long: void <init>(long)>(l0) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1)
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.put : interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r2, r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r7 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : $r7 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r1 = new com.thoughtworks.xstream.io.binary.Token$StartNode
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r1 = new com.thoughtworks.xstream.io.binary.Token$StartNode >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.Token$StartNode: void <init>()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r1.<com.thoughtworks.xstream.io.binary.Token$StartNode: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r1
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r1 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.readFrom : $l1 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long readId(java.io.DataInput,byte)>(r1, b0)
com.thoughtworks.xstream.io.binary.Token$StartNode.readFrom : $l1 = virtualinvoke r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long readId(java.io.DataInput,byte)>(r1, b0) >>>>>>>> com.thoughtworks.xstream.io.binary.Token$StartNode.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id> = $l1
com.thoughtworks.xstream.io.binary.Token$StartNode.readFrom : r0.<com.thoughtworks.xstream.io.binary.Token$StartNode: long id> = $l1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return r1
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return r1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return $r7
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return $r7 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $b0 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $b0 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : lookupswitch($b0) {     case 3:
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : lookupswitch($b0) {     case 3: >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r4 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry idRegistry>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry idRegistry> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $l1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: long getId()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $l1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: long getId()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r6 = virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.lang.String get(long)>($l1)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r6 = virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.lang.String get(long)>($l1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.util.Map map>
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r1 = new java.lang.Long
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r1 = new java.lang.Long >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : specialinvoke $r1.<java.lang.Long: void <init>(long)>(l0)
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : specialinvoke $r1.<java.lang.Long: void <init>(long)>(l0) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1)
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object get(java.lang.Object)>($r1) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : r2 = (java.lang.String) $r4
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : r2 = (java.lang.String) $r4 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : if r2 != null
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : if r2 != null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : return r2
com.thoughtworks.xstream.io.binary.BinaryStreamReader$IdRegistry.get : return r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r4.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setName(java.lang.String)>($r6)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r4.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setName(java.lang.String)>($r6) >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.setName : $r2 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.setName : $r2 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.setName : $r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String name> = r1
com.thoughtworks.xstream.io.binary.ReaderDepthState.setName : $r2.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String name> = r1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : goto [?= r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()]
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : goto [?= r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()] >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : r2 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $b2 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $b2 = virtualinvoke r2.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : tableswitch($b2) {     case 3:
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : tableswitch($b2) {     case 3: >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r15 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r15 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r15.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(1)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r15.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(1) >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.setHasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.setHasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.setHasMoreChildren : $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: boolean hasMoreChildren> = z0
com.thoughtworks.xstream.io.binary.ReaderDepthState.setHasMoreChildren : $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: boolean hasMoreChildren> = z0 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r2)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r2) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : $r2 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : $r2 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : if $r2 != null
com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : if $r2 != null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> = r1
com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> = r1 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : goto [?= return]
com.thoughtworks.xstream.io.binary.BinaryStreamReader.pushBack : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState: java.lang.String getName()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : $r2 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String name>
com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : $r2 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: java.lang.String name> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : return $r2
com.thoughtworks.xstream.io.binary.ReaderDepthState.getName : return $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : return $r2
com.thoughtworks.xstream.io.binary.BinaryStreamReader.getNodeName : return $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : $z0 = virtualinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState: boolean hasMoreChildren()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : $z0 = virtualinvoke $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState: boolean hasMoreChildren()>() >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : $z0 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: boolean hasMoreChildren>
com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : $z0 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: boolean hasMoreChildren> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : return $z0
com.thoughtworks.xstream.io.binary.ReaderDepthState.hasMoreChildren : return $z0 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : return $z0
com.thoughtworks.xstream.io.binary.BinaryStreamReader.hasMoreChildren : return $z0 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r12 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r12 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> = null
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token pushback> = null >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return r12
com.thoughtworks.xstream.io.binary.BinaryStreamReader.readToken : return r12 >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r4 = new com.thoughtworks.xstream.io.binary.Token$EndNode
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : $r4 = new com.thoughtworks.xstream.io.binary.Token$EndNode >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r4.<com.thoughtworks.xstream.io.binary.Token$EndNode: void <init>()>()
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : specialinvoke $r4.<com.thoughtworks.xstream.io.binary.Token$EndNode: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r4
com.thoughtworks.xstream.io.binary.Token$Formatter.contructToken : return $r4 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r14 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : $r14 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r14.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(0)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveDown : virtualinvoke $r14.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(0) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r3 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void pop()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke $r3.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void pop()>() >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current>
com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : $r1 = r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : $r2 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: com.thoughtworks.xstream.io.binary.ReaderDepthState$State parent>
com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : $r2 = $r1.<com.thoughtworks.xstream.io.binary.ReaderDepthState$State: com.thoughtworks.xstream.io.binary.ReaderDepthState$State parent> >>>>>>>> com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> = $r2
com.thoughtworks.xstream.io.binary.ReaderDepthState.pop : r0.<com.thoughtworks.xstream.io.binary.ReaderDepthState: com.thoughtworks.xstream.io.binary.ReaderDepthState$State current> = $r2 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : i0 = 0
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : i0 = 0 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : r1 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : r1 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $b1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $b1 = virtualinvoke r1.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : lookupswitch($b1) {     case 3:
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : lookupswitch($b1) {     case 3: >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : if i0 != 0
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : if i0 != 0 >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : goto [?= r4 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()]
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : goto [?= r4 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()] >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : r4 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : r4 = specialinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.Token readToken()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $b2 = virtualinvoke r4.<com.thoughtworks.xstream.io.binary.Token: byte getType()>()
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $b2 = virtualinvoke r4.<com.thoughtworks.xstream.io.binary.Token: byte getType()>() >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : lookupswitch($b2) {     case 3:
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : lookupswitch($b2) {     case 3: >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r5 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(0)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke $r5.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(0) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : goto [?= virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r4)]
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : goto [?= virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r4)] >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r4)
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: void pushBack(com.thoughtworks.xstream.io.binary.Token)>(r4) >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r6 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState>
com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : $r6 = r0.<com.thoughtworks.xstream.io.binary.BinaryStreamReader: com.thoughtworks.xstream.io.binary.ReaderDepthState depthState> >>>>>>>> com.thoughtworks.xstream.io.binary.BinaryStreamReader.moveUp : virtualinvoke $r6.<com.thoughtworks.xstream.io.binary.ReaderDepthState: void setHasMoreChildren(boolean)>(1)
com.thoughtworks.xstream.io.xml.XppReader.createParser : $r1 = new org.xmlpull.mxp1.MXParser >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.createParser : specialinvoke $r1.<org.xmlpull.mxp1.MXParser: void <init>()>()
com.thoughtworks.xstream.io.xml.XppReader.createParser : specialinvoke $r1.<org.xmlpull.mxp1.MXParser: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.createParser : return $r1
com.thoughtworks.xstream.io.xml.XppReader.createParser : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.size : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.size : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.size : return $i0
com.thoughtworks.xstream.core.util.FastStack.size : return $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i1 > i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i1 > i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z0 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z0 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z0 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r11 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r11 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z2 = virtualinvoke $r11.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : if $i0 <= 0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : if $i0 <= 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : return $z0
com.thoughtworks.xstream.core.util.FastStack.hasStuff : return $z0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z2 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z2 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r15 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r15 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r1 = new com.thoughtworks.xstream.io.xml.AbstractPullReader$Event
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r1 = new com.thoughtworks.xstream.io.xml.AbstractPullReader$Event >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : specialinvoke $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: void <init>(com.thoughtworks.xstream.io.xml.AbstractPullReader$1)>(null)
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : specialinvoke $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: void <init>(com.thoughtworks.xstream.io.xml.AbstractPullReader$1)>(null) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2 = $r1
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2 = $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i0 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: int pullNextEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i0 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: int pullNextEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $i0 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int next()>()
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $i0 = interfaceinvoke $r2.<org.xmlpull.v1.XmlPullParser: int next()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : tableswitch($i0) {     case 0:
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : tableswitch($i0) {     case 0: >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b1 = 1
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b1 = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b1
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> = $i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> = $i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i1 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i1 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i1 != 3
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i1 != 3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i2 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $i2 = r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i2 != 1
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : if $i2 != 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>()
com.thoughtworks.xstream.io.xml.XppReader.pullElementName : $r2 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: java.lang.String getName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullElementName : return $r2
com.thoughtworks.xstream.io.xml.XppReader.pullElementName : return $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> = $r4
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : r2.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: java.lang.String value> = $r4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : return r2
com.thoughtworks.xstream.io.xml.AbstractPullReader.readRealEvent : return r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r15
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r15 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : lookupswitch($i0) {     case 1:
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : lookupswitch($i0) {     case 1: >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r3 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String pullElementName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r3)
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r3) >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i2 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.FastStack.push : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3
com.thoughtworks.xstream.core.util.FastStack.push : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.push : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.push : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1
com.thoughtworks.xstream.core.util.FastStack.push : $i6 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6
com.thoughtworks.xstream.core.util.FastStack.push : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i6 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1
com.thoughtworks.xstream.core.util.FastStack.push : $r4[$i0] = r1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.push : return r1
com.thoughtworks.xstream.core.util.FastStack.push : return r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : goto [?= return]
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : goto [?= return] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i2 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : $i2 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i2 >= i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveDown : if $i2 >= i0 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : $r3 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getNodeName()>()
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : $r3 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getNodeName()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object peek()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0
com.thoughtworks.xstream.core.util.FastStack.peek : if $i0 != 0 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.peek : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.peek : $i1 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1
com.thoughtworks.xstream.core.util.FastStack.peek : $i2 = $i1 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2]
com.thoughtworks.xstream.core.util.FastStack.peek : $r1 = $r2[$i2] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.peek : return $r1
com.thoughtworks.xstream.core.util.FastStack.peek : return $r1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r3 = (java.lang.String) $r2
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r3 = (java.lang.String) $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String unescapeXmlName(java.lang.String)>($r3)
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : $r4 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: java.lang.String unescapeXmlName(java.lang.String)>($r3) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlReader: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String unescapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r4 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String underscoreReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z0 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r4) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i1 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i2 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i3 = i0 + $i2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $i1 < $i3 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : return 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement>
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r7 = r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String dollarReplacement> >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $z1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: boolean stringFoundAt(java.lang.String,int,java.lang.String)>(r1, i1, $r7) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : $r11 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.unescapeName : return $r11 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlReader.unescapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : return $r4
com.thoughtworks.xstream.io.xml.AbstractPullReader.getNodeName : return $r4 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void startNode(java.lang.String)>($r3)
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void startNode(java.lang.String)>($r3) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: java.lang.String escapeXmlName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r2 = virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: java.lang.String escapeXmlName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer>
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractXmlWriter: com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer replacer> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1)
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : $r3 = virtualinvoke $r2.<com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer: java.lang.String escapeName(java.lang.String)>(r1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r2 = new java.lang.StringBuffer >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : specialinvoke $r2.<java.lang.StringBuffer: void <init>()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : r3 = $r2 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : c2 = virtualinvoke r1.<java.lang.String: char charAt(int)>(i1) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 36 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : if c2 != 95 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : virtualinvoke r3.<java.lang.StringBuffer: java.lang.StringBuffer append(char)>(c2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : i1 = i1 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)]
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : goto [?= (branch)] >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : $r9 = virtualinvoke r3.<java.lang.StringBuffer: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.escapeName : return $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3
com.thoughtworks.xstream.io.xml.AbstractXmlWriter.escapeXmlName : return $r3 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z0 == 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $z1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z1 == 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(60)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(60) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = $i2 + 1
com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = $i2 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i4 = lengthof $r1
com.thoughtworks.xstream.core.util.QuickWriter.write : $i4 = lengthof $r1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : if $i3 < $i4
com.thoughtworks.xstream.core.util.QuickWriter.write : if $i3 < $i4 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i1 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = $i1 + 1
com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = $i1 + 1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i5
com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i5 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r2[$i1] = c0
com.thoughtworks.xstream.core.util.QuickWriter.write : $r2[$i1] = c0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>(r2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>(r2) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = virtualinvoke r1.<java.lang.String: int length()>()
com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = virtualinvoke r1.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = $i1 + i0
com.thoughtworks.xstream.core.util.QuickWriter.write : $i2 = $i1 + i0 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = lengthof $r2
com.thoughtworks.xstream.core.util.QuickWriter.write : $i3 = lengthof $r2 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : if $i2 < $i3
com.thoughtworks.xstream.core.util.QuickWriter.write : if $i2 < $i3 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i5 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r5, $i5)
com.thoughtworks.xstream.core.util.QuickWriter.write : virtualinvoke r1.<java.lang.String: void getChars(int,int,char[],int)>(0, i0, $r5, $i5) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i6 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $i6 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $i7 = $i6 + i0
com.thoughtworks.xstream.core.util.QuickWriter.write : $i7 = $i6 + i0 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i7
com.thoughtworks.xstream.core.util.QuickWriter.write : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = $i7 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r5 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $r5 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r2)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagInProgress> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i1 = $i0 + 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : $i1 = $i0 + 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.startNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> = 1 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : i0 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: int getAttributeCount()>()
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : i0 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: int getAttributeCount()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser>
com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : $r1 = r0.<com.thoughtworks.xstream.io.xml.XppReader: org.xmlpull.v1.XmlPullParser parser> >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : $i0 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>()
com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : $i0 = interfaceinvoke $r1.<org.xmlpull.v1.XmlPullParser: int getAttributeCount()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : return $i0
com.thoughtworks.xstream.io.xml.XppReader.getAttributeCount : return $i0 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : i1 = 0
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : i1 = 0 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : if i1 >= i0
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : if i1 >= i0 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : r6 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getValue()>()
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : r6 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: java.lang.String getValue()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r1 = null
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r1 = null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r2 = null
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r2 = null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void mark()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void mark()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.mark : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 1
com.thoughtworks.xstream.io.xml.AbstractPullReader.mark : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r3 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : r3 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z1 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $z1 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z1 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : if $z1 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r7 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r7 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r8 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r8 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readRealEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r9 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r8)
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r9 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r8) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r10 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r9
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r10 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r9 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r10
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r10 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $i0 = r3.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $i0 = r3.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if $i0 != 3
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if $i0 != 3 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $i2 = r3.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $i2 = r3.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if $i2 == 4
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if $i2 == 4 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : goto [?= virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>()]
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : goto [?= virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>()] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $z0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $z0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: boolean hasStuff()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 1
com.thoughtworks.xstream.core.util.FastStack.hasStuff : $z0 = 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.hasStuff : goto [?= return $z0]
com.thoughtworks.xstream.core.util.FastStack.hasStuff : goto [?= return $z0] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : if $z0 == 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r3 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1
com.thoughtworks.xstream.core.util.FastStack.pop : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1
com.thoughtworks.xstream.core.util.FastStack.pop : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1]
com.thoughtworks.xstream.core.util.FastStack.pop : r2 = $r3[$i1] >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.pop : $r4 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.pop : $i2 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null
com.thoughtworks.xstream.core.util.FastStack.pop : $r4[$i2] = null >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.pop : return r2
com.thoughtworks.xstream.core.util.FastStack.pop : return r2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r4)
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r4) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : goto [?= $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>]
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : goto [?= $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.reset : r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: boolean marked> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if r2 == null
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if r2 == null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if r1 != null
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : if r1 != null >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $r8 = ""
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : $r8 = "" >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : goto [?= return $r8]
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : goto [?= return $r8] >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : return $r8
com.thoughtworks.xstream.io.xml.AbstractPullReader.getValue : return $r8 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : if r6 == null
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : if r6 == null >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : $i2 = virtualinvoke r6.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : $i2 = virtualinvoke r6.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : if $i2 <= 0
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : if $i2 <= 0 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : $z0 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: boolean hasMoreChildren()>()
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : $z0 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: boolean hasMoreChildren()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void mark()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void mark()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $r1 = specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.io.xml.AbstractPullReader$Event readEvent()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookahead> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r3 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r4 = virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r5 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r4)
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r5 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object push(java.lang.Object)>($r4) >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r6 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r5
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r6 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r5 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r6
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r6 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type>
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : $i0 = $r1.<com.thoughtworks.xstream.io.xml.AbstractPullReader$Event: int type> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : lookupswitch($i0) {     case 1:
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : lookupswitch($i0) {     case 1: >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void reset()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 1
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 1 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : if $z0 == 0
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveDown()>()
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveDown()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r12 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback>
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r12 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack lookback> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r13 = virtualinvoke $r12.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r13 = virtualinvoke $r12.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r14 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r13
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : $r14 = (com.thoughtworks.xstream.io.xml.AbstractPullReader$Event) $r13 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r14
com.thoughtworks.xstream.io.xml.AbstractPullReader.readEvent : return $r14 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : virtualinvoke r0.<com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier: void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)>(r1, r2)
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : virtualinvoke r0.<com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier: void copy(com.thoughtworks.xstream.io.HierarchicalStreamReader,com.thoughtworks.xstream.io.HierarchicalStreamWriter)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $r1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : $r1 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : virtualinvoke $r1.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(62)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : virtualinvoke $r1.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(62) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void endOfLine()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.finishTag : virtualinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void endOfLine()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>()
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i4 = virtualinvoke r2.<java.lang.String: int length()>() >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $i5 = i0 + $i4 >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $r3 = virtualinvoke r1.<java.lang.String: java.lang.String substring(int,int)>(i0, $i5) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2)
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : $z0 = virtualinvoke $r3.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0
com.thoughtworks.xstream.io.xml.XmlFriendlyReplacer.stringFoundAt : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b2 = 2
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : $b2 = 2 >>>>>>>> com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b2
com.thoughtworks.xstream.io.xml.XppReader.pullNextEvent : return $b2 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 0
com.thoughtworks.xstream.io.xml.AbstractPullReader.hasMoreChildren : return 0 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void endNode()>()
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : interfaceinvoke r2.<com.thoughtworks.xstream.io.HierarchicalStreamWriter: void endNode()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i1 = $i0 - 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> = $i1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $z0 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean tagIsEmpty> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : if $z0 == 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(47)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r2.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(47) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 0 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : specialinvoke r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: void finishTag()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r3 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: void popSilently()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r3.<com.thoughtworks.xstream.core.util.FastStack: void popSilently()>() >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack>
com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2 = r0.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object[] stack> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer>
com.thoughtworks.xstream.core.util.FastStack.popSilently : $i0 = r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $i1 = $i0 - 1
com.thoughtworks.xstream.core.util.FastStack.popSilently : $i1 = $i0 - 1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1
com.thoughtworks.xstream.core.util.FastStack.popSilently : r0.<com.thoughtworks.xstream.core.util.FastStack: int pointer> = $i1 >>>>>>>> com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2[$i1] = null
com.thoughtworks.xstream.core.util.FastStack.popSilently : $r2[$i1] = null >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : goto [?= r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1]
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : goto [?= r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1] >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: boolean readyForNewLine> = 1 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $i2 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: int depth> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : if $i2 != 0
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : if $i2 != 0 >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveUp()>()
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: void moveUp()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r1 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : i0 = virtualinvoke $r1.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : $i1 = virtualinvoke $r2.<com.thoughtworks.xstream.core.util.FastStack: int size()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : if $i1 < i0
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : if $i1 < i0 >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : specialinvoke r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: void move()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : $r5 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.AbstractPullReader.move : virtualinvoke $r5.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : goto [?= $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>]
com.thoughtworks.xstream.io.xml.AbstractPullReader.moveUp : goto [?= $r2 = r0.<com.thoughtworks.xstream.io.xml.AbstractPullReader: com.thoughtworks.xstream.core.util.FastStack elementStack>] >>>>>>>> com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : goto [?= $z0 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: boolean hasMoreChildren()>()]
com.thoughtworks.xstream.io.copy.HierarchicalStreamCopier.copy : goto [?= $z0 = interfaceinvoke r1.<com.thoughtworks.xstream.io.HierarchicalStreamReader: boolean hasMoreChildren()>()] >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r4 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r5 = <com.thoughtworks.xstream.io.xml.PrettyPrintWriter: char[] CLOSE>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r5 = <com.thoughtworks.xstream.io.xml.PrettyPrintWriter: char[] CLOSE> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char[])>($r5)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r4.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char[])>($r5) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = lengthof r1
com.thoughtworks.xstream.core.util.QuickWriter.write : i0 = lengthof r1 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : $r4 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.write : $r4 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.write : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, $i5, i0)
com.thoughtworks.xstream.core.util.QuickWriter.write : staticinvoke <java.lang.System: void arraycopy(java.lang.Object,int,java.lang.Object,int,int)>(r1, 0, $r4, $i5, i0) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r6 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r6 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r7 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r7 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.FastStack elementStack> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r8 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r8 = virtualinvoke $r7.<com.thoughtworks.xstream.core.util.FastStack: java.lang.Object pop()>() >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r9 = (java.lang.String) $r8
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r9 = (java.lang.String) $r8 >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r6.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>($r9)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r6.<com.thoughtworks.xstream.core.util.QuickWriter: void write(java.lang.String)>($r9) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r10 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r10 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r10.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(62)
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r10.<com.thoughtworks.xstream.core.util.QuickWriter: void write(char)>(62) >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r11 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer>
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : $r11 = r0.<com.thoughtworks.xstream.io.xml.PrettyPrintWriter: com.thoughtworks.xstream.core.util.QuickWriter writer> >>>>>>>> com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r11.<com.thoughtworks.xstream.core.util.QuickWriter: void flush()>()
com.thoughtworks.xstream.io.xml.PrettyPrintWriter.endNode : virtualinvoke $r11.<com.thoughtworks.xstream.core.util.QuickWriter: void flush()>() >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: java.io.Writer writer>
com.thoughtworks.xstream.core.util.QuickWriter.flush : $r2 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: java.io.Writer writer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : $r3 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer>
com.thoughtworks.xstream.core.util.QuickWriter.flush : $r3 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: char[] buffer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : $i0 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer>
com.thoughtworks.xstream.core.util.QuickWriter.flush : $i0 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i0)
com.thoughtworks.xstream.core.util.QuickWriter.flush : virtualinvoke $r2.<java.io.Writer: void write(char[],int,int)>($r3, 0, $i0) >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = 0
com.thoughtworks.xstream.core.util.QuickWriter.flush : r0.<com.thoughtworks.xstream.core.util.QuickWriter: int pointer> = 0 >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : $r4 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: java.io.Writer writer>
com.thoughtworks.xstream.core.util.QuickWriter.flush : $r4 = r0.<com.thoughtworks.xstream.core.util.QuickWriter: java.io.Writer writer> >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : virtualinvoke $r4.<java.io.Writer: void flush()>()
com.thoughtworks.xstream.core.util.QuickWriter.flush : virtualinvoke $r4.<java.io.Writer: void flush()>() >>>>>>>> com.thoughtworks.xstream.core.util.QuickWriter.flush : goto [?= return]
