com.thoughtworks.xstream.persistence.XmlSet.add : $r2 = r0.<com.thoughtworks.xstream.persistence.XmlSet: com.thoughtworks.xstream.persistence.XmlMap map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.add : $z0 = virtualinvoke $r2.<com.thoughtworks.xstream.persistence.XmlMap: boolean containsValue(java.lang.Object)>(r1)
com.thoughtworks.xstream.persistence.XmlSet.add : $z0 = virtualinvoke $r2.<com.thoughtworks.xstream.persistence.XmlMap: boolean containsValue(java.lang.Object)>(r1) >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.entrySet : $r1 = new com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries
com.thoughtworks.xstream.persistence.XmlMap.entrySet : $r1 = new com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.entrySet : specialinvoke $r1.<com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries: void <init>(com.thoughtworks.xstream.persistence.XmlMap)>(r0)
com.thoughtworks.xstream.persistence.XmlMap.entrySet : specialinvoke $r1.<com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries: void <init>(com.thoughtworks.xstream.persistence.XmlMap)>(r0) >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.entrySet : return $r1
com.thoughtworks.xstream.persistence.XmlMap.entrySet : return $r1 >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries.iterator : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries: com.thoughtworks.xstream.persistence.XmlMap this$0>
com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries.iterator : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries: com.thoughtworks.xstream.persistence.XmlMap this$0> >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries.iterator : $r2 = staticinvoke <com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy access$000(com.thoughtworks.xstream.persistence.XmlMap)>($r1)
com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries.iterator : $r2 = staticinvoke <com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy access$000(com.thoughtworks.xstream.persistence.XmlMap)>($r1) >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.access$000 : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy streamStrategy>
com.thoughtworks.xstream.persistence.XmlMap.access$000 : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy streamStrategy> >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.access$000 : return $r1
com.thoughtworks.xstream.persistence.XmlMap.access$000 : return $r1 >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries.iterator : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.persistence.StreamStrategy: java.util.Iterator iterator()>()
com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries.iterator : $r3 = interfaceinvoke $r2.<com.thoughtworks.xstream.persistence.StreamStrategy: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy.iterator : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy: java.util.Map map>
com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy.iterator : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy.iterator : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>()
com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy.iterator : $r2 = interfaceinvoke $r1.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy.iterator : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>()
com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy.iterator : $r3 = interfaceinvoke $r2.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy.iterator : return $r3
com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy.iterator : return $r3 >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries.iterator : return $r3
com.thoughtworks.xstream.persistence.XmlMap$XmlMapEntries.iterator : return $r3 >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.add : if $z0 == 0
com.thoughtworks.xstream.persistence.XmlSet.add : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.add : $r3 = r0.<com.thoughtworks.xstream.persistence.XmlSet: com.thoughtworks.xstream.persistence.XmlMap map>
com.thoughtworks.xstream.persistence.XmlSet.add : $r3 = r0.<com.thoughtworks.xstream.persistence.XmlSet: com.thoughtworks.xstream.persistence.XmlMap map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.add : $r4 = specialinvoke r0.<com.thoughtworks.xstream.persistence.XmlSet: java.lang.String findEmptyKey()>()
com.thoughtworks.xstream.persistence.XmlSet.add : $r4 = specialinvoke r0.<com.thoughtworks.xstream.persistence.XmlSet: java.lang.String findEmptyKey()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>()
com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : l0 = staticinvoke <java.lang.System: long currentTimeMillis()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r2 = r0.<com.thoughtworks.xstream.persistence.XmlSet: com.thoughtworks.xstream.persistence.XmlMap map>
com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r2 = r0.<com.thoughtworks.xstream.persistence.XmlSet: com.thoughtworks.xstream.persistence.XmlMap map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r1 = new java.lang.StringBuilder
com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r1 = new java.lang.StringBuilder >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>()
com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $z0 = virtualinvoke $r2.<com.thoughtworks.xstream.persistence.XmlMap: boolean containsKey(java.lang.Object)>($r5)
com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $z0 = virtualinvoke $r2.<com.thoughtworks.xstream.persistence.XmlMap: boolean containsKey(java.lang.Object)>($r5) >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : if $z0 == 0
com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : if $z0 == 0 >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r6 = new java.lang.StringBuilder
com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r6 = new java.lang.StringBuilder >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>()
com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : specialinvoke $r6.<java.lang.StringBuilder: void <init>()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("")
com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r7 = virtualinvoke $r6.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("") >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0)
com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r8 = virtualinvoke $r7.<java.lang.StringBuilder: java.lang.StringBuilder append(long)>(l0) >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>()
com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : $r9 = virtualinvoke $r8.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : return $r9
com.thoughtworks.xstream.persistence.XmlSet.findEmptyKey : return $r9 >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.add : virtualinvoke $r3.<com.thoughtworks.xstream.persistence.XmlMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1)
com.thoughtworks.xstream.persistence.XmlSet.add : virtualinvoke $r3.<com.thoughtworks.xstream.persistence.XmlMap: java.lang.Object put(java.lang.Object,java.lang.Object)>($r4, r1) >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.put : $r3 = r0.<com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy streamStrategy>
com.thoughtworks.xstream.persistence.XmlMap.put : $r3 = r0.<com.thoughtworks.xstream.persistence.XmlMap: com.thoughtworks.xstream.persistence.StreamStrategy streamStrategy> >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.put : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.persistence.StreamStrategy: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.persistence.XmlMap.put : $r4 = interfaceinvoke $r3.<com.thoughtworks.xstream.persistence.StreamStrategy: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy.put : $r3 = r0.<com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy: java.util.Map map>
com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy.put : $r3 = r0.<com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy: java.util.Map map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy.put : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2)
com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy.put : $r4 = interfaceinvoke $r3.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, r2) >>>>>>>> com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy.put : return $r4
com.thoughtworks.xstream.persistence.XmlSetTest$MockedStrategy.put : return $r4 >>>>>>>> com.thoughtworks.xstream.persistence.XmlMap.put : return $r4
com.thoughtworks.xstream.persistence.XmlMap.put : return $r4 >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.add : return 1
com.thoughtworks.xstream.persistence.XmlSet.add : return 1 >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.iterator : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlSet: com.thoughtworks.xstream.persistence.XmlMap map>
com.thoughtworks.xstream.persistence.XmlSet.iterator : $r1 = r0.<com.thoughtworks.xstream.persistence.XmlSet: com.thoughtworks.xstream.persistence.XmlMap map> >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.iterator : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.persistence.XmlMap: java.util.Collection values()>()
com.thoughtworks.xstream.persistence.XmlSet.iterator : $r2 = virtualinvoke $r1.<com.thoughtworks.xstream.persistence.XmlMap: java.util.Collection values()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.iterator : $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>()
com.thoughtworks.xstream.persistence.XmlSet.iterator : $r3 = interfaceinvoke $r2.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> com.thoughtworks.xstream.persistence.XmlSet.iterator : return $r3
