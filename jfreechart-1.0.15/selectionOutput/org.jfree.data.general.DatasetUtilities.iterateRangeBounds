org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d0 = #Infinity >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d1 = #-Infinity
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d1 = #-Infinity >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i0 = interfaceinvoke r0.<org.jfree.data.xy.XYDataset: int getSeriesCount()>()
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i0 = interfaceinvoke r0.<org.jfree.data.xy.XYDataset: int getSeriesCount()>() >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if z0 == 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if z0 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z1 = r0 instanceof org.jfree.data.xy.IntervalXYDataset
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if z0 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if z0 == 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if z0 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z5 = r0 instanceof org.jfree.data.xy.OHLCDataset
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if z0 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i7 = 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i7 = 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i7 >= i0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i7 >= i0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i8 = interfaceinvoke r0.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(i7)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i7 >= i0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $b10 = d0 cmpl #Infinity
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $b10 = d0 cmpl #Infinity >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $b10 != 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $b10 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : return null
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $b10 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $r3 = new org.jfree.data.Range
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $r3 = new org.jfree.data.Range >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : specialinvoke $r3.<org.jfree.data.Range: void <init>(double,double)>(d0, d1)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : specialinvoke $r3.<org.jfree.data.Range: void <init>(double,double)>(d0, d1) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : return $r3
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i8 = interfaceinvoke r0.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(i7) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i9 = 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i9 = 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i9 >= i8
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i9 >= i8 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d7 = interfaceinvoke r0.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(i7, i9)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i9 >= i8 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i7 = i7 + 1
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i7 = i7 + 1 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= (branch)]
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= (branch)] >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i7 >= i0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d7 = interfaceinvoke r0.<org.jfree.data.xy.XYDataset: double getYValue(int,int)>(i7, i9) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z8 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d7)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z8 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d7) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z8 != 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z8 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d7)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z8 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i9 = i9 + 1
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i9 = i9 + 1 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= (branch)]
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= (branch)] >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i9 >= i8
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d7) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d7)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d7) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i9 = i9 + 1
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z5 = r0 instanceof org.jfree.data.xy.OHLCDataset >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z5 == 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z5 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : r2 = (org.jfree.data.xy.OHLCDataset) r0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z5 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i7 = 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : r2 = (org.jfree.data.xy.OHLCDataset) r0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i4 = 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i4 = 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i4 >= i0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i4 >= i0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i5 = interfaceinvoke r0.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(i4)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i4 >= i0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= $b10 = d0 cmpl #Infinity]
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= $b10 = d0 cmpl #Infinity] >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $b10 = d0 cmpl #Infinity
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i5 = interfaceinvoke r0.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(i4) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i6 = 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i6 = 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i6 >= i5
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i6 >= i5 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d5 = interfaceinvoke r2.<org.jfree.data.xy.OHLCDataset: double getLowValue(int,int)>(i4, i6)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i6 >= i5 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i4 = i4 + 1
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i4 = i4 + 1 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= (branch)]
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= (branch)] >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i4 >= i0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d5 = interfaceinvoke r2.<org.jfree.data.xy.OHLCDataset: double getLowValue(int,int)>(i4, i6) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d6 = interfaceinvoke r2.<org.jfree.data.xy.OHLCDataset: double getHighValue(int,int)>(i4, i6)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d6 = interfaceinvoke r2.<org.jfree.data.xy.OHLCDataset: double getHighValue(int,int)>(i4, i6) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z6 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d5)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z6 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d5) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z6 != 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z6 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d5)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z6 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z7 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d6)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z7 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d6) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z7 != 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z7 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d6)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z7 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i6 = i6 + 1
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i6 = i6 + 1 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= (branch)]
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= (branch)] >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i6 >= i5
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d6) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i6 = i6 + 1
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d5) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z7 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d6)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z1 = r0 instanceof org.jfree.data.xy.IntervalXYDataset >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z1 == 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z1 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : r1 = (org.jfree.data.xy.IntervalXYDataset) r0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z1 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if z0 == 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : r1 = (org.jfree.data.xy.IntervalXYDataset) r0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i1 = 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i1 = 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i1 >= i0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i1 >= i0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i2 = interfaceinvoke r0.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(i1)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i1 >= i0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= $b10 = d0 cmpl #Infinity]
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= $b10 = d0 cmpl #Infinity] >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $b10 = d0 cmpl #Infinity
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i2 = interfaceinvoke r0.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(i1) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i3 = 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i3 = 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i3 >= i2
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i3 >= i2 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d2 = interfaceinvoke r1.<org.jfree.data.xy.IntervalXYDataset: double getYValue(int,int)>(i1, i3)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i3 >= i2 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i1 = i1 + 1
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i1 = i1 + 1 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= (branch)]
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= (branch)] >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i1 >= i0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d2 = interfaceinvoke r1.<org.jfree.data.xy.IntervalXYDataset: double getYValue(int,int)>(i1, i3) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d3 = interfaceinvoke r1.<org.jfree.data.xy.IntervalXYDataset: double getStartYValue(int,int)>(i1, i3)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d3 = interfaceinvoke r1.<org.jfree.data.xy.IntervalXYDataset: double getStartYValue(int,int)>(i1, i3) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d4 = interfaceinvoke r1.<org.jfree.data.xy.IntervalXYDataset: double getEndYValue(int,int)>(i1, i3)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d4 = interfaceinvoke r1.<org.jfree.data.xy.IntervalXYDataset: double getEndYValue(int,int)>(i1, i3) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z2 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z2 != 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z2 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d2)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z2 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d3)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d3) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z3 != 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z3 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d3)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z3 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d4)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d4) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z4 != 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z4 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d4)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z4 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i3 = i3 + 1
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i3 = i3 + 1 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= (branch)]
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= (branch)] >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i3 >= i2
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d4) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d4)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d4) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i3 = i3 + 1
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d3) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d3)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d3) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d4)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d2) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d2)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d2) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d3)
