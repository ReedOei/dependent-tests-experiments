org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r3 = null >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r4 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : if $z1 == 0
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : if $z1 == 0 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>()
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : if $z1 == 0 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : return r3
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $r7 = interfaceinvoke r4.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r5 = (java.lang.Comparable) $r7
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r5 = (java.lang.Comparable) $r7 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r6 = virtualinvoke r0.<org.jfree.data.time.TimeSeriesCollection: org.jfree.data.time.TimeSeries getSeries(java.lang.Comparable)>(r5)
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r6 = virtualinvoke r0.<org.jfree.data.time.TimeSeriesCollection: org.jfree.data.time.TimeSeries getSeries(java.lang.Comparable)>(r5) >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : n0 = null
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : n0 = null >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $r8 = new org.jfree.data.Range
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $r8 = new org.jfree.data.Range >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $d0 = virtualinvoke r6.<org.jfree.data.time.TimeSeries: double getMinY()>()
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $d0 = virtualinvoke r6.<org.jfree.data.time.TimeSeries: double getMinY()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $d1 = virtualinvoke r6.<org.jfree.data.time.TimeSeries: double getMaxY()>()
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $d1 = virtualinvoke r6.<org.jfree.data.time.TimeSeries: double getMaxY()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : specialinvoke $r8.<org.jfree.data.Range: void <init>(double,double)>($d0, $d1)
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : specialinvoke $r8.<org.jfree.data.Range: void <init>(double,double)>($d0, $d1) >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r9 = $r8
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r9 = $r8 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r3 = staticinvoke <org.jfree.data.Range: org.jfree.data.Range combineIgnoringNaN(org.jfree.data.Range,org.jfree.data.Range)>(r3, r9)
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r3 = staticinvoke <org.jfree.data.Range: org.jfree.data.Range combineIgnoringNaN(org.jfree.data.Range,org.jfree.data.Range)>(r3, r9) >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()]
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : goto [?= $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $z1 = interfaceinvoke r4.<java.util.Iterator: boolean hasNext()>()
