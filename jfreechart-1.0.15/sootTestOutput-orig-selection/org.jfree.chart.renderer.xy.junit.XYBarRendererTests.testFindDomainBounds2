org.jfree.chart.util.ParamChecks.nullNotPermitted : if r0 != null >>>>>>>> org.jfree.data.xy.XYIntervalSeries.add : $r1 = new org.jfree.data.xy.XYIntervalDataItem
org.jfree.data.xy.XYIntervalSeries.add : $r1 = new org.jfree.data.xy.XYIntervalDataItem >>>>>>>> org.jfree.data.xy.XYIntervalSeries.add : specialinvoke $r1.<org.jfree.data.xy.XYIntervalDataItem: void <init>(double,double,double,double,double,double)>(d0, d1, d2, d3, d4, d5)
org.jfree.data.xy.XYIntervalSeries.add : specialinvoke $r1.<org.jfree.data.xy.XYIntervalDataItem: void <init>(double,double,double,double,double,double)>(d0, d1, d2, d3, d4, d5) >>>>>>>> org.jfree.data.xy.XYIntervalSeries.add : specialinvoke r0.<org.jfree.data.ComparableObjectSeries: void add(org.jfree.data.ComparableObjectItem,boolean)>($r1, 1)
org.jfree.data.xy.XYIntervalSeries.add : specialinvoke r0.<org.jfree.data.ComparableObjectSeries: void add(org.jfree.data.ComparableObjectItem,boolean)>($r1, 1) >>>>>>>> org.jfree.data.ComparableObjectSeries.add : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "item")
org.jfree.data.ComparableObjectSeries.add : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "item") >>>>>>>> org.jfree.data.ComparableObjectSeries.add : $z1 = r0.<org.jfree.data.ComparableObjectSeries: boolean autoSort>
org.jfree.data.ComparableObjectSeries.add : $z1 = r0.<org.jfree.data.ComparableObjectSeries: boolean autoSort> >>>>>>>> org.jfree.data.ComparableObjectSeries.add : if $z1 == 0
org.jfree.data.ComparableObjectSeries.add : if $z1 == 0 >>>>>>>> org.jfree.data.ComparableObjectSeries.add : $r2 = r0.<org.jfree.data.ComparableObjectSeries: java.util.List data>
org.jfree.data.ComparableObjectSeries.add : $r2 = r0.<org.jfree.data.ComparableObjectSeries: java.util.List data> >>>>>>>> org.jfree.data.ComparableObjectSeries.add : i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>($r2, r1)
org.jfree.data.ComparableObjectSeries.add : i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>($r2, r1) >>>>>>>> org.jfree.data.ComparableObjectSeries.add : if i0 >= 0
org.jfree.data.ComparableObjectSeries.add : if i0 >= 0 >>>>>>>> org.jfree.data.ComparableObjectSeries.add : $r3 = r0.<org.jfree.data.ComparableObjectSeries: java.util.List data>
org.jfree.data.ComparableObjectSeries.add : $r3 = r0.<org.jfree.data.ComparableObjectSeries: java.util.List data> >>>>>>>> org.jfree.data.ComparableObjectSeries.add : $i2 = neg i0
org.jfree.data.ComparableObjectSeries.add : $i2 = neg i0 >>>>>>>> org.jfree.data.ComparableObjectSeries.add : $i3 = $i2 - 1
org.jfree.data.ComparableObjectSeries.add : $i3 = $i2 - 1 >>>>>>>> org.jfree.data.ComparableObjectSeries.add : interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>($i3, r1)
org.jfree.data.ComparableObjectSeries.add : interfaceinvoke $r3.<java.util.List: void add(int,java.lang.Object)>($i3, r1) >>>>>>>> org.jfree.data.ComparableObjectSeries.add : goto [?= (branch)]
org.jfree.data.ComparableObjectSeries.add : goto [?= (branch)] >>>>>>>> org.jfree.data.ComparableObjectSeries.add : goto [?= $i7 = virtualinvoke r0.<org.jfree.data.ComparableObjectSeries: int getItemCount()>()]
org.jfree.data.ComparableObjectSeries.add : goto [?= $i7 = virtualinvoke r0.<org.jfree.data.ComparableObjectSeries: int getItemCount()>()] >>>>>>>> org.jfree.data.ComparableObjectSeries.add : $i7 = virtualinvoke r0.<org.jfree.data.ComparableObjectSeries: int getItemCount()>()
org.jfree.data.ComparableObjectSeries.add : $i7 = virtualinvoke r0.<org.jfree.data.ComparableObjectSeries: int getItemCount()>() >>>>>>>> org.jfree.data.ComparableObjectSeries.getItemCount : $r1 = r0.<org.jfree.data.ComparableObjectSeries: java.util.List data>
org.jfree.data.ComparableObjectSeries.getItemCount : $r1 = r0.<org.jfree.data.ComparableObjectSeries: java.util.List data> >>>>>>>> org.jfree.data.ComparableObjectSeries.getItemCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.jfree.data.ComparableObjectSeries.getItemCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.jfree.data.ComparableObjectSeries.getItemCount : return $i0
org.jfree.data.ComparableObjectSeries.getItemCount : return $i0 >>>>>>>> org.jfree.data.ComparableObjectSeries.add : $i8 = r0.<org.jfree.data.ComparableObjectSeries: int maximumItemCount>
org.jfree.data.ComparableObjectSeries.add : $i8 = r0.<org.jfree.data.ComparableObjectSeries: int maximumItemCount> >>>>>>>> org.jfree.data.ComparableObjectSeries.add : if $i7 <= $i8
org.jfree.data.ComparableObjectSeries.add : if $i7 <= $i8 >>>>>>>> org.jfree.data.ComparableObjectSeries.add : if z0 == 0
org.jfree.data.ComparableObjectSeries.add : if z0 == 0 >>>>>>>> org.jfree.data.ComparableObjectSeries.add : virtualinvoke r0.<org.jfree.data.ComparableObjectSeries: void fireSeriesChanged()>()
org.jfree.data.ComparableObjectSeries.add : virtualinvoke r0.<org.jfree.data.ComparableObjectSeries: void fireSeriesChanged()>() >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : $z0 = r0.<org.jfree.data.general.Series: boolean notify>
org.jfree.data.general.Series.fireSeriesChanged : $z0 = r0.<org.jfree.data.general.Series: boolean notify> >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : if $z0 == 0
org.jfree.data.general.Series.fireSeriesChanged : if $z0 == 0 >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : $r1 = new org.jfree.data.general.SeriesChangeEvent
org.jfree.data.general.Series.fireSeriesChanged : $r1 = new org.jfree.data.general.SeriesChangeEvent >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : specialinvoke $r1.<org.jfree.data.general.SeriesChangeEvent: void <init>(java.lang.Object)>(r0)
org.jfree.data.general.Series.fireSeriesChanged : specialinvoke $r1.<org.jfree.data.general.SeriesChangeEvent: void <init>(java.lang.Object)>(r0) >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : virtualinvoke r0.<org.jfree.data.general.Series: void notifyListeners(org.jfree.data.general.SeriesChangeEvent)>($r1)
org.jfree.data.general.Series.fireSeriesChanged : virtualinvoke r0.<org.jfree.data.general.Series: void notifyListeners(org.jfree.data.general.SeriesChangeEvent)>($r1) >>>>>>>> org.jfree.data.general.Series.notifyListeners : $r3 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners>
org.jfree.data.general.Series.notifyListeners : $r3 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners> >>>>>>>> org.jfree.data.general.Series.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.data.general.Series.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.data.general.Series.notifyListeners : $i1 = lengthof r2
org.jfree.data.general.Series.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.data.general.Series.notifyListeners : i0 = $i1 - 2
org.jfree.data.general.Series.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.data.general.Series.notifyListeners : if i0 < 0
org.jfree.data.general.Series.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.data.ComparableObjectItem.compareTo : $z0 = r1 instanceof org.jfree.data.ComparableObjectItem
org.jfree.data.ComparableObjectItem.compareTo : $z0 = r1 instanceof org.jfree.data.ComparableObjectItem >>>>>>>> org.jfree.data.ComparableObjectItem.compareTo : if $z0 == 0
org.jfree.data.ComparableObjectItem.compareTo : if $z0 == 0 >>>>>>>> org.jfree.data.ComparableObjectItem.compareTo : r2 = (org.jfree.data.ComparableObjectItem) r1
org.jfree.data.ComparableObjectItem.compareTo : r2 = (org.jfree.data.ComparableObjectItem) r1 >>>>>>>> org.jfree.data.ComparableObjectItem.compareTo : $r3 = r0.<org.jfree.data.ComparableObjectItem: java.lang.Comparable x>
org.jfree.data.ComparableObjectItem.compareTo : $r3 = r0.<org.jfree.data.ComparableObjectItem: java.lang.Comparable x> >>>>>>>> org.jfree.data.ComparableObjectItem.compareTo : $r4 = r2.<org.jfree.data.ComparableObjectItem: java.lang.Comparable x>
org.jfree.data.ComparableObjectItem.compareTo : $r4 = r2.<org.jfree.data.ComparableObjectItem: java.lang.Comparable x> >>>>>>>> org.jfree.data.ComparableObjectItem.compareTo : $i1 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4)
org.jfree.data.ComparableObjectItem.compareTo : $i1 = interfaceinvoke $r3.<java.lang.Comparable: int compareTo(java.lang.Object)>($r4) >>>>>>>> org.jfree.data.ComparableObjectItem.compareTo : return $i1
org.jfree.data.ComparableObjectItem.compareTo : return $i1 >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.addSeries : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "series")
org.jfree.data.xy.XYIntervalSeriesCollection.addSeries : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "series") >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.addSeries : $r2 = r0.<org.jfree.data.xy.XYIntervalSeriesCollection: java.util.List data>
org.jfree.data.xy.XYIntervalSeriesCollection.addSeries : $r2 = r0.<org.jfree.data.xy.XYIntervalSeriesCollection: java.util.List data> >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.addSeries : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.jfree.data.xy.XYIntervalSeriesCollection.addSeries : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.addSeries : virtualinvoke r1.<org.jfree.data.xy.XYIntervalSeries: void addChangeListener(org.jfree.data.general.SeriesChangeListener)>(r0)
org.jfree.data.xy.XYIntervalSeriesCollection.addSeries : virtualinvoke r1.<org.jfree.data.xy.XYIntervalSeries: void addChangeListener(org.jfree.data.general.SeriesChangeListener)>(r0) >>>>>>>> org.jfree.data.general.Series.addChangeListener : $r2 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners>
org.jfree.data.general.Series.addChangeListener : $r2 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners> >>>>>>>> org.jfree.data.general.Series.addChangeListener : virtualinvoke $r2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "org/jfree/data/general/SeriesChangeListener", r1)
org.jfree.data.general.Series.addChangeListener : virtualinvoke $r2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "org/jfree/data/general/SeriesChangeListener", r1) >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.addSeries : virtualinvoke r0.<org.jfree.data.xy.XYIntervalSeriesCollection: void fireDatasetChanged()>()
org.jfree.data.xy.XYIntervalSeriesCollection.addSeries : virtualinvoke r0.<org.jfree.data.xy.XYIntervalSeriesCollection: void fireDatasetChanged()>() >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : $r1 = new org.jfree.data.general.DatasetChangeEvent
org.jfree.data.general.AbstractDataset.fireDatasetChanged : $r1 = new org.jfree.data.general.DatasetChangeEvent >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : specialinvoke $r1.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, r0)
org.jfree.data.general.AbstractDataset.fireDatasetChanged : specialinvoke $r1.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, r0) >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : virtualinvoke r0.<org.jfree.data.general.AbstractDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>($r1)
org.jfree.data.general.AbstractDataset.fireDatasetChanged : virtualinvoke r0.<org.jfree.data.general.AbstractDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>($r1) >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : $r3 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList>
org.jfree.data.general.AbstractDataset.notifyListeners : $r3 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.data.general.AbstractDataset.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : $i1 = lengthof r2
org.jfree.data.general.AbstractDataset.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : i0 = $i1 - 2
org.jfree.data.general.AbstractDataset.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : if i0 < 0
org.jfree.data.general.AbstractDataset.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter : $r0 = <org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.chart.renderer.xy.XYBarPainter defaultBarPainter>
org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter : $r0 = <org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.chart.renderer.xy.XYBarPainter defaultBarPainter> >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter : return $r0
org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter : return $r0 >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible : $z0 = <org.jfree.chart.renderer.xy.XYBarRenderer: boolean defaultShadowsVisible>
org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible : $z0 = <org.jfree.chart.renderer.xy.XYBarRenderer: boolean defaultShadowsVisible> >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible : return $z0
org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible : return $z0 >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.findDomainBounds : $r2 = virtualinvoke r0.<org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>(r1, 1)
org.jfree.chart.renderer.xy.XYBarRenderer.findDomainBounds : $r2 = virtualinvoke r0.<org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>(r1, 1) >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : if r1 != null
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : if r1 != null >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : $z1 = virtualinvoke r0.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean getDataBoundsIncludesVisibleSeriesOnly()>()
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : $z1 = virtualinvoke r0.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean getDataBoundsIncludesVisibleSeriesOnly()>() >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly : $z0 = r0.<org.jfree.chart.renderer.AbstractRenderer: boolean dataBoundsIncludesVisibleSeriesOnly>
org.jfree.chart.renderer.AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly : $z0 = r0.<org.jfree.chart.renderer.AbstractRenderer: boolean dataBoundsIncludesVisibleSeriesOnly> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly : return $z0
org.jfree.chart.renderer.AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly : return $z0 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : if $z1 == 0
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : if $z1 == 0 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : $r3 = new java.util.ArrayList
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : $r3 = new java.util.ArrayList >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : specialinvoke $r3.<java.util.ArrayList: void <init>()>()
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : specialinvoke $r3.<java.util.ArrayList: void <init>()>() >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : r2 = $r3
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : r2 = $r3 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : i0 = interfaceinvoke r1.<org.jfree.data.xy.XYDataset: int getSeriesCount()>()
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : i0 = interfaceinvoke r1.<org.jfree.data.xy.XYDataset: int getSeriesCount()>() >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesCount : $r1 = r0.<org.jfree.data.xy.XYIntervalSeriesCollection: java.util.List data>
org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesCount : $r1 = r0.<org.jfree.data.xy.XYIntervalSeriesCollection: java.util.List data> >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesCount : return $i0
org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesCount : return $i0 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : i1 = 0
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : i1 = 0 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : if i1 >= i0
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : if i1 >= i0 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : $z2 = virtualinvoke r0.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean isSeriesVisible(int)>(i1)
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : $z2 = virtualinvoke r0.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean isSeriesVisible(int)>(i1) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible : z0 = r0.<org.jfree.chart.renderer.AbstractRenderer: boolean baseSeriesVisible>
org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible : z0 = r0.<org.jfree.chart.renderer.AbstractRenderer: boolean baseSeriesVisible> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible : $r2 = r0.<org.jfree.chart.renderer.AbstractRenderer: java.lang.Boolean seriesVisible>
org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible : $r2 = r0.<org.jfree.chart.renderer.AbstractRenderer: java.lang.Boolean seriesVisible> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible : if $r2 == null
org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible : if $r2 == null >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible : $r4 = r0.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.util.BooleanList seriesVisibleList>
org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible : $r4 = r0.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.util.BooleanList seriesVisibleList> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible : r1 = virtualinvoke $r4.<org.jfree.util.BooleanList: java.lang.Boolean getBoolean(int)>(i0)
org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible : r1 = virtualinvoke $r4.<org.jfree.util.BooleanList: java.lang.Boolean getBoolean(int)>(i0) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible : if r1 == null
org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible : if r1 == null >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible : return z0
org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible : return z0 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : if $z2 == 0
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : if $z2 == 0 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : $r4 = interfaceinvoke r1.<org.jfree.data.xy.XYDataset: java.lang.Comparable getSeriesKey(int)>(i1)
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : $r4 = interfaceinvoke r1.<org.jfree.data.xy.XYDataset: java.lang.Comparable getSeriesKey(int)>(i1) >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesKey : $r1 = virtualinvoke r0.<org.jfree.data.xy.XYIntervalSeriesCollection: org.jfree.data.xy.XYIntervalSeries getSeries(int)>(i0)
org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesKey : $r1 = virtualinvoke r0.<org.jfree.data.xy.XYIntervalSeriesCollection: org.jfree.data.xy.XYIntervalSeries getSeries(int)>(i0) >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getSeries : if i0 < 0
org.jfree.data.xy.XYIntervalSeriesCollection.getSeries : if i0 < 0 >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getSeries : $i1 = virtualinvoke r0.<org.jfree.data.xy.XYIntervalSeriesCollection: int getSeriesCount()>()
org.jfree.data.xy.XYIntervalSeriesCollection.getSeries : $i1 = virtualinvoke r0.<org.jfree.data.xy.XYIntervalSeriesCollection: int getSeriesCount()>() >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getSeries : if i0 < $i1
org.jfree.data.xy.XYIntervalSeriesCollection.getSeries : if i0 < $i1 >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getSeries : $r2 = r0.<org.jfree.data.xy.XYIntervalSeriesCollection: java.util.List data>
org.jfree.data.xy.XYIntervalSeriesCollection.getSeries : $r2 = r0.<org.jfree.data.xy.XYIntervalSeriesCollection: java.util.List data> >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getSeries : $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0)
org.jfree.data.xy.XYIntervalSeriesCollection.getSeries : $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getSeries : $r4 = (org.jfree.data.xy.XYIntervalSeries) $r3
org.jfree.data.xy.XYIntervalSeriesCollection.getSeries : $r4 = (org.jfree.data.xy.XYIntervalSeries) $r3 >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getSeries : return $r4
org.jfree.data.xy.XYIntervalSeriesCollection.getSeries : return $r4 >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesKey : $r2 = virtualinvoke $r1.<org.jfree.data.xy.XYIntervalSeries: java.lang.Comparable getKey()>()
org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesKey : $r2 = virtualinvoke $r1.<org.jfree.data.xy.XYIntervalSeries: java.lang.Comparable getKey()>() >>>>>>>> org.jfree.data.general.Series.getKey : $r1 = r0.<org.jfree.data.general.Series: java.lang.Comparable key>
org.jfree.data.general.Series.getKey : $r1 = r0.<org.jfree.data.general.Series: java.lang.Comparable key> >>>>>>>> org.jfree.data.general.Series.getKey : return $r1
org.jfree.data.general.Series.getKey : return $r1 >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesKey : return $r2
org.jfree.data.xy.XYIntervalSeriesCollection.getSeriesKey : return $r2 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r4)
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r4) >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : i1 = i1 + 1
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : i1 = i1 + 1 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : goto [?= (branch)]
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : goto [?= (branch)] >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : $r5 = staticinvoke <org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)>(r1, r2, z0)
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : $r5 = staticinvoke <org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)>(r1, r2, z0) >>>>>>>> org.jfree.data.general.DatasetUtilities.findDomainBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "dataset")
org.jfree.data.general.DatasetUtilities.findDomainBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "dataset") >>>>>>>> org.jfree.data.general.DatasetUtilities.findDomainBounds : $z1 = r0 instanceof org.jfree.data.xy.XYDomainInfo
org.jfree.data.general.DatasetUtilities.findDomainBounds : $z1 = r0 instanceof org.jfree.data.xy.XYDomainInfo >>>>>>>> org.jfree.data.general.DatasetUtilities.findDomainBounds : if $z1 == 0
org.jfree.data.general.DatasetUtilities.findDomainBounds : if $z1 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.findDomainBounds : r3 = staticinvoke <org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)>(r0, r1, z0)
org.jfree.data.general.DatasetUtilities.findDomainBounds : r3 = staticinvoke <org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)>(r0, r1, z0) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "dataset")
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "dataset") >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "visibleSeriesKeys")
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "visibleSeriesKeys") >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : d0 = #Infinity
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : d0 = #Infinity >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : d1 = #-Infinity
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : d1 = #-Infinity >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if z0 == 0
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if z0 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $z1 = r0 instanceof org.jfree.data.xy.IntervalXYDataset
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $z1 = r0 instanceof org.jfree.data.xy.IntervalXYDataset >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if $z1 == 0
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if $z1 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : r2 = (org.jfree.data.xy.IntervalXYDataset) r0
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : r2 = (org.jfree.data.xy.IntervalXYDataset) r0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if $z2 == 0
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if $z2 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $r5 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : r4 = (java.lang.Comparable) $r5
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : r4 = (java.lang.Comparable) $r5 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : i0 = interfaceinvoke r0.<org.jfree.data.xy.XYDataset: int indexOf(java.lang.Comparable)>(r4)
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : i0 = interfaceinvoke r0.<org.jfree.data.xy.XYDataset: int indexOf(java.lang.Comparable)>(r4) >>>>>>>> org.jfree.data.general.AbstractSeriesDataset.indexOf : i0 = virtualinvoke r0.<org.jfree.data.general.AbstractSeriesDataset: int getSeriesCount()>()
org.jfree.data.general.AbstractSeriesDataset.indexOf : i0 = virtualinvoke r0.<org.jfree.data.general.AbstractSeriesDataset: int getSeriesCount()>() >>>>>>>> org.jfree.data.general.AbstractSeriesDataset.indexOf : i1 = 0
org.jfree.data.general.AbstractSeriesDataset.indexOf : i1 = 0 >>>>>>>> org.jfree.data.general.AbstractSeriesDataset.indexOf : if i1 >= i0
org.jfree.data.general.AbstractSeriesDataset.indexOf : if i1 >= i0 >>>>>>>> org.jfree.data.general.AbstractSeriesDataset.indexOf : $r2 = virtualinvoke r0.<org.jfree.data.general.AbstractSeriesDataset: java.lang.Comparable getSeriesKey(int)>(i1)
org.jfree.data.general.AbstractSeriesDataset.indexOf : $r2 = virtualinvoke r0.<org.jfree.data.general.AbstractSeriesDataset: java.lang.Comparable getSeriesKey(int)>(i1) >>>>>>>> org.jfree.data.general.AbstractSeriesDataset.indexOf : $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1)
org.jfree.data.general.AbstractSeriesDataset.indexOf : $z0 = virtualinvoke $r2.<java.lang.Object: boolean equals(java.lang.Object)>(r1) >>>>>>>> org.jfree.data.general.AbstractSeriesDataset.indexOf : if $z0 == 0
org.jfree.data.general.AbstractSeriesDataset.indexOf : if $z0 == 0 >>>>>>>> org.jfree.data.general.AbstractSeriesDataset.indexOf : return i1
org.jfree.data.general.AbstractSeriesDataset.indexOf : return i1 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : i1 = interfaceinvoke r0.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(i0)
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : i1 = interfaceinvoke r0.<org.jfree.data.xy.XYDataset: int getItemCount(int)>(i0) >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getItemCount : $r1 = virtualinvoke r0.<org.jfree.data.xy.XYIntervalSeriesCollection: org.jfree.data.xy.XYIntervalSeries getSeries(int)>(i0)
org.jfree.data.xy.XYIntervalSeriesCollection.getItemCount : $r1 = virtualinvoke r0.<org.jfree.data.xy.XYIntervalSeriesCollection: org.jfree.data.xy.XYIntervalSeries getSeries(int)>(i0) >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getItemCount : $i1 = virtualinvoke $r1.<org.jfree.data.xy.XYIntervalSeries: int getItemCount()>()
org.jfree.data.xy.XYIntervalSeriesCollection.getItemCount : $i1 = virtualinvoke $r1.<org.jfree.data.xy.XYIntervalSeries: int getItemCount()>() >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getItemCount : return $i1
org.jfree.data.xy.XYIntervalSeriesCollection.getItemCount : return $i1 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : i2 = 0
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : i2 = 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if i2 >= i1
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if i2 >= i1 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : d2 = interfaceinvoke r2.<org.jfree.data.xy.IntervalXYDataset: double getStartXValue(int,int)>(i0, i2)
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : d2 = interfaceinvoke r2.<org.jfree.data.xy.IntervalXYDataset: double getStartXValue(int,int)>(i0, i2) >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getStartXValue : $r2 = r0.<org.jfree.data.xy.XYIntervalSeriesCollection: java.util.List data>
org.jfree.data.xy.XYIntervalSeriesCollection.getStartXValue : $r2 = r0.<org.jfree.data.xy.XYIntervalSeriesCollection: java.util.List data> >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getStartXValue : $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0)
org.jfree.data.xy.XYIntervalSeriesCollection.getStartXValue : $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getStartXValue : r1 = (org.jfree.data.xy.XYIntervalSeries) $r3
org.jfree.data.xy.XYIntervalSeriesCollection.getStartXValue : r1 = (org.jfree.data.xy.XYIntervalSeries) $r3 >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getStartXValue : $d0 = virtualinvoke r1.<org.jfree.data.xy.XYIntervalSeries: double getXLowValue(int)>(i1)
org.jfree.data.xy.XYIntervalSeriesCollection.getStartXValue : $d0 = virtualinvoke r1.<org.jfree.data.xy.XYIntervalSeries: double getXLowValue(int)>(i1) >>>>>>>> org.jfree.data.xy.XYIntervalSeries.getXLowValue : $r2 = virtualinvoke r0.<org.jfree.data.xy.XYIntervalSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>(i0)
org.jfree.data.xy.XYIntervalSeries.getXLowValue : $r2 = virtualinvoke r0.<org.jfree.data.xy.XYIntervalSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>(i0) >>>>>>>> org.jfree.data.xy.XYIntervalSeries.getDataItem : $r1 = specialinvoke r0.<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>(i0)
org.jfree.data.xy.XYIntervalSeries.getDataItem : $r1 = specialinvoke r0.<org.jfree.data.ComparableObjectSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>(i0) >>>>>>>> org.jfree.data.ComparableObjectSeries.getDataItem : $r1 = r0.<org.jfree.data.ComparableObjectSeries: java.util.List data>
org.jfree.data.ComparableObjectSeries.getDataItem : $r1 = r0.<org.jfree.data.ComparableObjectSeries: java.util.List data> >>>>>>>> org.jfree.data.ComparableObjectSeries.getDataItem : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0)
org.jfree.data.ComparableObjectSeries.getDataItem : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.data.ComparableObjectSeries.getDataItem : $r3 = (org.jfree.data.ComparableObjectItem) $r2
org.jfree.data.ComparableObjectSeries.getDataItem : $r3 = (org.jfree.data.ComparableObjectItem) $r2 >>>>>>>> org.jfree.data.ComparableObjectSeries.getDataItem : return $r3
org.jfree.data.ComparableObjectSeries.getDataItem : return $r3 >>>>>>>> org.jfree.data.xy.XYIntervalSeries.getDataItem : return $r1
org.jfree.data.xy.XYIntervalSeries.getDataItem : return $r1 >>>>>>>> org.jfree.data.xy.XYIntervalSeries.getXLowValue : r1 = (org.jfree.data.xy.XYIntervalDataItem) $r2
org.jfree.data.xy.XYIntervalSeries.getXLowValue : r1 = (org.jfree.data.xy.XYIntervalDataItem) $r2 >>>>>>>> org.jfree.data.xy.XYIntervalSeries.getXLowValue : $d0 = virtualinvoke r1.<org.jfree.data.xy.XYIntervalDataItem: double getXLowValue()>()
org.jfree.data.xy.XYIntervalSeries.getXLowValue : $d0 = virtualinvoke r1.<org.jfree.data.xy.XYIntervalDataItem: double getXLowValue()>() >>>>>>>> org.jfree.data.xy.XYIntervalDataItem.getXLowValue : $r2 = virtualinvoke r0.<org.jfree.data.xy.XYIntervalDataItem: java.lang.Object getObject()>()
org.jfree.data.xy.XYIntervalDataItem.getXLowValue : $r2 = virtualinvoke r0.<org.jfree.data.xy.XYIntervalDataItem: java.lang.Object getObject()>() >>>>>>>> org.jfree.data.ComparableObjectItem.getObject : $r1 = r0.<org.jfree.data.ComparableObjectItem: java.lang.Object obj>
org.jfree.data.ComparableObjectItem.getObject : $r1 = r0.<org.jfree.data.ComparableObjectItem: java.lang.Object obj> >>>>>>>> org.jfree.data.ComparableObjectItem.getObject : return $r1
org.jfree.data.ComparableObjectItem.getObject : return $r1 >>>>>>>> org.jfree.data.xy.XYIntervalDataItem.getXLowValue : r1 = (org.jfree.data.xy.XYInterval) $r2
org.jfree.data.xy.XYIntervalDataItem.getXLowValue : r1 = (org.jfree.data.xy.XYInterval) $r2 >>>>>>>> org.jfree.data.xy.XYIntervalDataItem.getXLowValue : if r1 == null
org.jfree.data.xy.XYIntervalDataItem.getXLowValue : if r1 == null >>>>>>>> org.jfree.data.xy.XYIntervalDataItem.getXLowValue : $d0 = virtualinvoke r1.<org.jfree.data.xy.XYInterval: double getXLow()>()
org.jfree.data.xy.XYIntervalDataItem.getXLowValue : $d0 = virtualinvoke r1.<org.jfree.data.xy.XYInterval: double getXLow()>() >>>>>>>> org.jfree.data.xy.XYInterval.getXLow : $d0 = r0.<org.jfree.data.xy.XYInterval: double xLow>
org.jfree.data.xy.XYInterval.getXLow : $d0 = r0.<org.jfree.data.xy.XYInterval: double xLow> >>>>>>>> org.jfree.data.xy.XYInterval.getXLow : return $d0
org.jfree.data.xy.XYInterval.getXLow : return $d0 >>>>>>>> org.jfree.data.xy.XYIntervalDataItem.getXLowValue : return $d0
org.jfree.data.xy.XYIntervalDataItem.getXLowValue : return $d0 >>>>>>>> org.jfree.data.xy.XYIntervalSeries.getXLowValue : return $d0
org.jfree.data.xy.XYIntervalSeries.getXLowValue : return $d0 >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getStartXValue : return $d0
org.jfree.data.xy.XYIntervalSeriesCollection.getStartXValue : return $d0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : d3 = interfaceinvoke r2.<org.jfree.data.xy.IntervalXYDataset: double getEndXValue(int,int)>(i0, i2)
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : d3 = interfaceinvoke r2.<org.jfree.data.xy.IntervalXYDataset: double getEndXValue(int,int)>(i0, i2) >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getEndXValue : $r2 = r0.<org.jfree.data.xy.XYIntervalSeriesCollection: java.util.List data>
org.jfree.data.xy.XYIntervalSeriesCollection.getEndXValue : $r2 = r0.<org.jfree.data.xy.XYIntervalSeriesCollection: java.util.List data> >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getEndXValue : $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0)
org.jfree.data.xy.XYIntervalSeriesCollection.getEndXValue : $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getEndXValue : r1 = (org.jfree.data.xy.XYIntervalSeries) $r3
org.jfree.data.xy.XYIntervalSeriesCollection.getEndXValue : r1 = (org.jfree.data.xy.XYIntervalSeries) $r3 >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getEndXValue : $d0 = virtualinvoke r1.<org.jfree.data.xy.XYIntervalSeries: double getXHighValue(int)>(i1)
org.jfree.data.xy.XYIntervalSeriesCollection.getEndXValue : $d0 = virtualinvoke r1.<org.jfree.data.xy.XYIntervalSeries: double getXHighValue(int)>(i1) >>>>>>>> org.jfree.data.xy.XYIntervalSeries.getXHighValue : $r2 = virtualinvoke r0.<org.jfree.data.xy.XYIntervalSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>(i0)
org.jfree.data.xy.XYIntervalSeries.getXHighValue : $r2 = virtualinvoke r0.<org.jfree.data.xy.XYIntervalSeries: org.jfree.data.ComparableObjectItem getDataItem(int)>(i0) >>>>>>>> org.jfree.data.xy.XYIntervalSeries.getXHighValue : r1 = (org.jfree.data.xy.XYIntervalDataItem) $r2
org.jfree.data.xy.XYIntervalSeries.getXHighValue : r1 = (org.jfree.data.xy.XYIntervalDataItem) $r2 >>>>>>>> org.jfree.data.xy.XYIntervalSeries.getXHighValue : $d0 = virtualinvoke r1.<org.jfree.data.xy.XYIntervalDataItem: double getXHighValue()>()
org.jfree.data.xy.XYIntervalSeries.getXHighValue : $d0 = virtualinvoke r1.<org.jfree.data.xy.XYIntervalDataItem: double getXHighValue()>() >>>>>>>> org.jfree.data.xy.XYIntervalDataItem.getXHighValue : $r2 = virtualinvoke r0.<org.jfree.data.xy.XYIntervalDataItem: java.lang.Object getObject()>()
org.jfree.data.xy.XYIntervalDataItem.getXHighValue : $r2 = virtualinvoke r0.<org.jfree.data.xy.XYIntervalDataItem: java.lang.Object getObject()>() >>>>>>>> org.jfree.data.xy.XYIntervalDataItem.getXHighValue : r1 = (org.jfree.data.xy.XYInterval) $r2
org.jfree.data.xy.XYIntervalDataItem.getXHighValue : r1 = (org.jfree.data.xy.XYInterval) $r2 >>>>>>>> org.jfree.data.xy.XYIntervalDataItem.getXHighValue : if r1 == null
org.jfree.data.xy.XYIntervalDataItem.getXHighValue : if r1 == null >>>>>>>> org.jfree.data.xy.XYIntervalDataItem.getXHighValue : $d0 = virtualinvoke r1.<org.jfree.data.xy.XYInterval: double getXHigh()>()
org.jfree.data.xy.XYIntervalDataItem.getXHighValue : $d0 = virtualinvoke r1.<org.jfree.data.xy.XYInterval: double getXHigh()>() >>>>>>>> org.jfree.data.xy.XYInterval.getXHigh : $d0 = r0.<org.jfree.data.xy.XYInterval: double xHigh>
org.jfree.data.xy.XYInterval.getXHigh : $d0 = r0.<org.jfree.data.xy.XYInterval: double xHigh> >>>>>>>> org.jfree.data.xy.XYInterval.getXHigh : return $d0
org.jfree.data.xy.XYInterval.getXHigh : return $d0 >>>>>>>> org.jfree.data.xy.XYIntervalDataItem.getXHighValue : return $d0
org.jfree.data.xy.XYIntervalDataItem.getXHighValue : return $d0 >>>>>>>> org.jfree.data.xy.XYIntervalSeries.getXHighValue : return $d0
org.jfree.data.xy.XYIntervalSeries.getXHighValue : return $d0 >>>>>>>> org.jfree.data.xy.XYIntervalSeriesCollection.getEndXValue : return $d0
org.jfree.data.xy.XYIntervalSeriesCollection.getEndXValue : return $d0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2)
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $z3 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d2) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if $z3 != 0
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if $z3 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d2)
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d2) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d3)
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $z4 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d3) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if $z4 != 0
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if $z4 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d3)
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d3) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : i2 = i2 + 1
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : i2 = i2 + 1 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : goto [?= (branch)]
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : goto [?= (branch)] >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : goto [?= $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : goto [?= $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.jfree.data.general.AbstractSeriesDataset.indexOf : i1 = i1 + 1
org.jfree.data.general.AbstractSeriesDataset.indexOf : i1 = i1 + 1 >>>>>>>> org.jfree.data.general.AbstractSeriesDataset.indexOf : goto [?= (branch)]
org.jfree.data.general.AbstractSeriesDataset.indexOf : goto [?= (branch)] >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : goto [?= $b6 = d0 cmpl #Infinity]
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : goto [?= $b6 = d0 cmpl #Infinity] >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $b6 = d0 cmpl #Infinity
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $b6 = d0 cmpl #Infinity >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if $b6 != 0
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if $b6 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $r9 = new org.jfree.data.Range
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $r9 = new org.jfree.data.Range >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : specialinvoke $r9.<org.jfree.data.Range: void <init>(double,double)>(d0, d1)
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : specialinvoke $r9.<org.jfree.data.Range: void <init>(double,double)>(d0, d1) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : return $r9
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : return $r9 >>>>>>>> org.jfree.data.general.DatasetUtilities.findDomainBounds : return r3
org.jfree.data.general.DatasetUtilities.findDomainBounds : return r3 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : return $r5
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : return $r5 >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.findDomainBounds : return $r2
org.jfree.chart.renderer.xy.XYBarRenderer.findDomainBounds : return $r2 >>>>>>>> org.jfree.data.Range.getLowerBound : $d0 = r0.<org.jfree.data.Range: double lower>
org.jfree.data.Range.getLowerBound : $d0 = r0.<org.jfree.data.Range: double lower> >>>>>>>> org.jfree.data.Range.getLowerBound : return $d0
org.jfree.data.Range.getLowerBound : return $d0 >>>>>>>> org.jfree.data.Range.getUpperBound : $d0 = r0.<org.jfree.data.Range: double upper>
org.jfree.data.Range.getUpperBound : $d0 = r0.<org.jfree.data.Range: double upper> >>>>>>>> org.jfree.data.Range.getUpperBound : return $d0
org.jfree.data.Range.getUpperBound : return $d0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesVisible(int,java.lang.Boolean,boolean)>(i0, r1, 1)
org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void setSeriesVisible(int,java.lang.Boolean,boolean)>(i0, r1, 1) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : $r3 = r0.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.util.BooleanList seriesVisibleList>
org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : $r3 = r0.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.util.BooleanList seriesVisibleList> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : virtualinvoke $r3.<org.jfree.util.BooleanList: void setBoolean(int,java.lang.Boolean)>(i0, r1)
org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : virtualinvoke $r3.<org.jfree.util.BooleanList: void setBoolean(int,java.lang.Boolean)>(i0, r1) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : if z0 == 0
org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : if z0 == 0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : $r4 = new org.jfree.chart.event.RendererChangeEvent
org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : $r4 = new org.jfree.chart.event.RendererChangeEvent >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : specialinvoke $r4.<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object,boolean)>(r0, 1)
org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : specialinvoke $r4.<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object,boolean)>(r0, 1) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : r2 = $r4
org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : r2 = $r4 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>(r2)
org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>(r2) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : $r3 = r0.<org.jfree.chart.renderer.AbstractRenderer: javax.swing.event.EventListenerList listenerList>
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : $r3 = r0.<org.jfree.chart.renderer.AbstractRenderer: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : $i1 = lengthof r2
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : i0 = $i1 - 2
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : if i0 < 0
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.isSeriesVisible : z0 = virtualinvoke r1.<java.lang.Boolean: boolean booleanValue()>()
