org.jfree.chart.util.ParamChecks.nullNotPermitted : if r0 != null >>>>>>>> org.jfree.data.time.Year.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Year: long getFirstMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Year.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Year: long getFirstMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getFirstMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 0, 1, 0, 0, 0)
org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 0, 1, 0, 0, 0) >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0)
org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0) >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Year.getFirstMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : return $l1
org.jfree.data.time.Year.getFirstMillisecond : return $l1 >>>>>>>> org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long firstMillisecond> = $l0
org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long firstMillisecond> = $l0 >>>>>>>> org.jfree.data.time.Year.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Year: long getLastMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Year.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Year: long getLastMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getLastMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 11, 31, 23, 59, 59)
org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 11, 31, 23, 59, 59) >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999)
org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999) >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Year.getLastMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : return $l1
org.jfree.data.time.Year.getLastMillisecond : return $l1 >>>>>>>> org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long lastMillisecond> = $l1
org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long lastMillisecond> = $l1 >>>>>>>> org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)>(r1, r2, 1)
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)>(r1, r2, 1) >>>>>>>> org.jfree.data.time.TimeSeries.add : $r3 = new org.jfree.data.time.TimeSeriesDataItem
org.jfree.data.time.TimeSeries.add : $r3 = new org.jfree.data.time.TimeSeriesDataItem >>>>>>>> org.jfree.data.time.TimeSeries.add : specialinvoke $r3.<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>(r1, r2)
org.jfree.data.time.TimeSeries.add : specialinvoke $r3.<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>(r1, r2) >>>>>>>> org.jfree.data.time.TimeSeries.add : r4 = $r3
org.jfree.data.time.TimeSeries.add : r4 = $r3 >>>>>>>> org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem,boolean)>(r4, z0)
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem,boolean)>(r4, z0) >>>>>>>> org.jfree.data.time.TimeSeries.add : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "item")
org.jfree.data.time.TimeSeries.add : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "item") >>>>>>>> org.jfree.data.time.TimeSeries.add : $r6 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Object clone()>()
org.jfree.data.time.TimeSeries.add : $r6 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Object clone()>() >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.clone : r1 = null
org.jfree.data.time.TimeSeriesDataItem.clone : r1 = null >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.clone : r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>()
org.jfree.data.time.TimeSeriesDataItem.clone : r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.clone : goto [?= return r1]
org.jfree.data.time.TimeSeriesDataItem.clone : goto [?= return r1] >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.clone : return r1
org.jfree.data.time.TimeSeriesDataItem.clone : return r1 >>>>>>>> org.jfree.data.time.TimeSeries.add : r7 = (org.jfree.data.time.TimeSeriesDataItem) $r6
org.jfree.data.time.TimeSeries.add : r7 = (org.jfree.data.time.TimeSeriesDataItem) $r6 >>>>>>>> org.jfree.data.time.TimeSeries.add : $r8 = virtualinvoke r7.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>()
org.jfree.data.time.TimeSeries.add : $r8 = virtualinvoke r7.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>() >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.getPeriod : $r1 = r0.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod period>
org.jfree.data.time.TimeSeriesDataItem.getPeriod : $r1 = r0.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod period> >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.getPeriod : return $r1
org.jfree.data.time.TimeSeriesDataItem.getPeriod : return $r1 >>>>>>>> org.jfree.data.time.TimeSeries.add : r2 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>()
org.jfree.data.time.TimeSeries.add : r2 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.jfree.data.time.TimeSeries.add : $r9 = r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass>
org.jfree.data.time.TimeSeries.add : $r9 = r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass> >>>>>>>> org.jfree.data.time.TimeSeries.add : if $r9 != null
org.jfree.data.time.TimeSeries.add : if $r9 != null >>>>>>>> org.jfree.data.time.TimeSeries.add : $r10 = r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass>
org.jfree.data.time.TimeSeries.add : $r10 = r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass> >>>>>>>> org.jfree.data.time.TimeSeries.add : $z1 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(r2)
org.jfree.data.time.TimeSeries.add : $z1 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.jfree.data.time.TimeSeries.add : if $z1 != 0
org.jfree.data.time.TimeSeries.add : if $z1 != 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : z2 = 0
org.jfree.data.time.TimeSeries.add : z2 = 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : i0 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.add : i0 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>() >>>>>>>> org.jfree.data.time.TimeSeries.getItemCount : $r1 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.getItemCount : $r1 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.getItemCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.jfree.data.time.TimeSeries.getItemCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.jfree.data.time.TimeSeries.getItemCount : return $i0
org.jfree.data.time.TimeSeries.getItemCount : return $i0 >>>>>>>> org.jfree.data.time.TimeSeries.add : if i0 != 0
org.jfree.data.time.TimeSeries.add : if i0 != 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : $r25 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.add : $r25 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.add : interfaceinvoke $r25.<java.util.List: boolean add(java.lang.Object)>(r7)
org.jfree.data.time.TimeSeries.add : interfaceinvoke $r25.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.jfree.data.time.TimeSeries.add : z4 = 1
org.jfree.data.time.TimeSeries.add : z4 = 1 >>>>>>>> org.jfree.data.time.TimeSeries.add : goto [?= (branch)]
org.jfree.data.time.TimeSeries.add : goto [?= (branch)] >>>>>>>> org.jfree.data.time.TimeSeries.add : if z4 == 0
org.jfree.data.time.TimeSeries.add : if z4 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : specialinvoke r0.<org.jfree.data.time.TimeSeries: void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)>(r7)
org.jfree.data.time.TimeSeries.add : specialinvoke r0.<org.jfree.data.time.TimeSeries: void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)>(r7) >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r2 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number getValue()>()
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r2 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number getValue()>() >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.getValue : $r1 = r0.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number value>
org.jfree.data.time.TimeSeriesDataItem.getValue : $r1 = r0.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number value> >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.getValue : return $r1
org.jfree.data.time.TimeSeriesDataItem.getValue : return $r1 >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $r3 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number getValue()>()
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $r3 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number getValue()>() >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : if $r3 == null
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : if $r3 == null >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : d0 = virtualinvoke r2.<java.lang.Number: double doubleValue()>()
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : d0 = virtualinvoke r2.<java.lang.Number: double doubleValue()>() >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d1 = r0.<org.jfree.data.time.TimeSeries: double minY>
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d1 = r0.<org.jfree.data.time.TimeSeries: double minY> >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d2 = specialinvoke r0.<org.jfree.data.time.TimeSeries: double minIgnoreNaN(double,double)>($d1, d0)
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d2 = specialinvoke r0.<org.jfree.data.time.TimeSeries: double minIgnoreNaN(double,double)>($d1, d0) >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0)
org.jfree.data.time.TimeSeries.minIgnoreNaN : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0) >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : if $z0 == 0
org.jfree.data.time.TimeSeries.minIgnoreNaN : if $z0 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : return d1
org.jfree.data.time.TimeSeries.minIgnoreNaN : return d1 >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r0.<org.jfree.data.time.TimeSeries: double minY> = $d2
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r0.<org.jfree.data.time.TimeSeries: double minY> = $d2 >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d3 = r0.<org.jfree.data.time.TimeSeries: double maxY>
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d3 = r0.<org.jfree.data.time.TimeSeries: double maxY> >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d4 = specialinvoke r0.<org.jfree.data.time.TimeSeries: double maxIgnoreNaN(double,double)>($d3, d0)
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d4 = specialinvoke r0.<org.jfree.data.time.TimeSeries: double maxIgnoreNaN(double,double)>($d3, d0) >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0)
org.jfree.data.time.TimeSeries.maxIgnoreNaN : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0) >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : if $z0 == 0
org.jfree.data.time.TimeSeries.maxIgnoreNaN : if $z0 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : return d1
org.jfree.data.time.TimeSeries.maxIgnoreNaN : return d1 >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r0.<org.jfree.data.time.TimeSeries: double maxY> = $d4
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r0.<org.jfree.data.time.TimeSeries: double maxY> = $d4 >>>>>>>> org.jfree.data.time.TimeSeries.add : $i7 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.add : $i7 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>() >>>>>>>> org.jfree.data.time.TimeSeries.add : $i8 = r0.<org.jfree.data.time.TimeSeries: int maximumItemCount>
org.jfree.data.time.TimeSeries.add : $i8 = r0.<org.jfree.data.time.TimeSeries: int maximumItemCount> >>>>>>>> org.jfree.data.time.TimeSeries.add : if $i7 <= $i8
org.jfree.data.time.TimeSeries.add : if $i7 <= $i8 >>>>>>>> org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void removeAgedItems(boolean)>(0)
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void removeAgedItems(boolean)>(0) >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $i1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.removeAgedItems : $i1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>() >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : if $i1 <= 1
org.jfree.data.time.TimeSeries.removeAgedItems : if $i1 <= 1 >>>>>>>> org.jfree.data.time.TimeSeries.add : if z0 == 0
org.jfree.data.time.TimeSeries.add : if z0 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void fireSeriesChanged()>()
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void fireSeriesChanged()>() >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : $z0 = r0.<org.jfree.data.general.Series: boolean notify>
org.jfree.data.general.Series.fireSeriesChanged : $z0 = r0.<org.jfree.data.general.Series: boolean notify> >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : if $z0 == 0
org.jfree.data.general.Series.fireSeriesChanged : if $z0 == 0 >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : $r1 = new org.jfree.data.general.SeriesChangeEvent
org.jfree.data.general.Series.fireSeriesChanged : $r1 = new org.jfree.data.general.SeriesChangeEvent >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : specialinvoke $r1.<org.jfree.data.general.SeriesChangeEvent: void <init>(java.lang.Object)>(r0)
org.jfree.data.general.Series.fireSeriesChanged : specialinvoke $r1.<org.jfree.data.general.SeriesChangeEvent: void <init>(java.lang.Object)>(r0) >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : virtualinvoke r0.<org.jfree.data.general.Series: void notifyListeners(org.jfree.data.general.SeriesChangeEvent)>($r1)
org.jfree.data.general.Series.fireSeriesChanged : virtualinvoke r0.<org.jfree.data.general.Series: void notifyListeners(org.jfree.data.general.SeriesChangeEvent)>($r1) >>>>>>>> org.jfree.data.general.Series.notifyListeners : $r3 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners>
org.jfree.data.general.Series.notifyListeners : $r3 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners> >>>>>>>> org.jfree.data.general.Series.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.data.general.Series.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.data.general.Series.notifyListeners : $i1 = lengthof r2
org.jfree.data.general.Series.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.data.general.Series.notifyListeners : i0 = $i1 - 2
org.jfree.data.general.Series.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.data.general.Series.notifyListeners : if i0 < 0
org.jfree.data.general.Series.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : $i2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.add : $i2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>() >>>>>>>> org.jfree.data.time.TimeSeries.add : $i3 = $i2 - 1
org.jfree.data.time.TimeSeries.add : $i3 = $i2 - 1 >>>>>>>> org.jfree.data.time.TimeSeries.add : r4 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.RegularTimePeriod getTimePeriod(int)>($i3)
org.jfree.data.time.TimeSeries.add : r4 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.RegularTimePeriod getTimePeriod(int)>($i3) >>>>>>>> org.jfree.data.time.TimeSeries.getTimePeriod : $r1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.TimeSeriesDataItem getRawDataItem(int)>(i0)
org.jfree.data.time.TimeSeries.getTimePeriod : $r1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.TimeSeriesDataItem getRawDataItem(int)>(i0) >>>>>>>> org.jfree.data.time.TimeSeries.getRawDataItem : $r1 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.getRawDataItem : $r1 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.getRawDataItem : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0)
org.jfree.data.time.TimeSeries.getRawDataItem : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.data.time.TimeSeries.getRawDataItem : $r3 = (org.jfree.data.time.TimeSeriesDataItem) $r2
org.jfree.data.time.TimeSeries.getRawDataItem : $r3 = (org.jfree.data.time.TimeSeriesDataItem) $r2 >>>>>>>> org.jfree.data.time.TimeSeries.getRawDataItem : return $r3
org.jfree.data.time.TimeSeries.getRawDataItem : return $r3 >>>>>>>> org.jfree.data.time.TimeSeries.getTimePeriod : $r2 = virtualinvoke $r1.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>()
org.jfree.data.time.TimeSeries.getTimePeriod : $r2 = virtualinvoke $r1.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>() >>>>>>>> org.jfree.data.time.TimeSeries.getTimePeriod : return $r2
org.jfree.data.time.TimeSeries.getTimePeriod : return $r2 >>>>>>>> org.jfree.data.time.TimeSeries.add : $r26 = virtualinvoke r7.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>()
org.jfree.data.time.TimeSeries.add : $r26 = virtualinvoke r7.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>() >>>>>>>> org.jfree.data.time.TimeSeries.add : $i4 = virtualinvoke $r26.<org.jfree.data.time.RegularTimePeriod: int compareTo(java.lang.Object)>(r4)
org.jfree.data.time.TimeSeries.add : $i4 = virtualinvoke $r26.<org.jfree.data.time.RegularTimePeriod: int compareTo(java.lang.Object)>(r4) >>>>>>>> org.jfree.data.time.Year.compareTo : $z0 = r1 instanceof org.jfree.data.time.Year
org.jfree.data.time.Year.compareTo : $z0 = r1 instanceof org.jfree.data.time.Year >>>>>>>> org.jfree.data.time.Year.compareTo : if $z0 == 0
org.jfree.data.time.Year.compareTo : if $z0 == 0 >>>>>>>> org.jfree.data.time.Year.compareTo : r2 = (org.jfree.data.time.Year) r1
org.jfree.data.time.Year.compareTo : r2 = (org.jfree.data.time.Year) r1 >>>>>>>> org.jfree.data.time.Year.compareTo : $s1 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.compareTo : $s1 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.compareTo : $i2 = virtualinvoke r2.<org.jfree.data.time.Year: int getYear()>()
org.jfree.data.time.Year.compareTo : $i2 = virtualinvoke r2.<org.jfree.data.time.Year: int getYear()>() >>>>>>>> org.jfree.data.time.Year.getYear : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getYear : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.getYear : return $s0
org.jfree.data.time.Year.getYear : return $s0 >>>>>>>> org.jfree.data.time.Year.compareTo : i0 = $s1 - $i2
org.jfree.data.time.Year.compareTo : i0 = $s1 - $i2 >>>>>>>> org.jfree.data.time.Year.compareTo : goto [?= return i0]
org.jfree.data.time.Year.compareTo : goto [?= return i0] >>>>>>>> org.jfree.data.time.Year.compareTo : return i0
org.jfree.data.time.Year.compareTo : return i0 >>>>>>>> org.jfree.data.time.TimeSeries.add : if $i4 <= 0
org.jfree.data.time.TimeSeries.add : if $i4 <= 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : $r27 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.add : $r27 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.add : interfaceinvoke $r27.<java.util.List: boolean add(java.lang.Object)>(r7)
org.jfree.data.time.TimeSeries.add : interfaceinvoke $r27.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1)
org.jfree.data.time.TimeSeries.minIgnoreNaN : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1) >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : if $z1 == 0
org.jfree.data.time.TimeSeries.minIgnoreNaN : if $z1 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : $d2 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1)
org.jfree.data.time.TimeSeries.minIgnoreNaN : $d2 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1) >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : return $d2
org.jfree.data.time.TimeSeries.minIgnoreNaN : return $d2 >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1)
org.jfree.data.time.TimeSeries.maxIgnoreNaN : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1) >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : if $z1 == 0
org.jfree.data.time.TimeSeries.maxIgnoreNaN : if $z1 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : $d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1)
org.jfree.data.time.TimeSeries.maxIgnoreNaN : $d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1) >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : return $d2
org.jfree.data.time.TimeSeries.maxIgnoreNaN : return $d2 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $i2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.removeAgedItems : $i2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>() >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $i3 = $i2 - 1
org.jfree.data.time.TimeSeries.removeAgedItems : $i3 = $i2 - 1 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.RegularTimePeriod getTimePeriod(int)>($i3)
org.jfree.data.time.TimeSeries.removeAgedItems : $r1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.RegularTimePeriod getTimePeriod(int)>($i3) >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : l0 = virtualinvoke $r1.<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>()
org.jfree.data.time.TimeSeries.removeAgedItems : l0 = virtualinvoke $r1.<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>() >>>>>>>> org.jfree.data.time.Year.getSerialIndex : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getSerialIndex : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.getSerialIndex : $l1 = (long) $s0
org.jfree.data.time.Year.getSerialIndex : $l1 = (long) $s0 >>>>>>>> org.jfree.data.time.Year.getSerialIndex : return $l1
org.jfree.data.time.Year.getSerialIndex : return $l1 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : z1 = 0
org.jfree.data.time.TimeSeries.removeAgedItems : z1 = 0 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.RegularTimePeriod getTimePeriod(int)>(0)
org.jfree.data.time.TimeSeries.removeAgedItems : $r2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.RegularTimePeriod getTimePeriod(int)>(0) >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $l4 = virtualinvoke $r2.<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>()
org.jfree.data.time.TimeSeries.removeAgedItems : $l4 = virtualinvoke $r2.<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>() >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $l5 = l0 - $l4
org.jfree.data.time.TimeSeries.removeAgedItems : $l5 = l0 - $l4 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $l6 = r0.<org.jfree.data.time.TimeSeries: long maximumItemAge>
org.jfree.data.time.TimeSeries.removeAgedItems : $l6 = r0.<org.jfree.data.time.TimeSeries: long maximumItemAge> >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $b7 = $l5 cmp $l6
org.jfree.data.time.TimeSeries.removeAgedItems : $b7 = $l5 cmp $l6 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : if $b7 <= 0
org.jfree.data.time.TimeSeries.removeAgedItems : if $b7 <= 0 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : if z1 == 0
org.jfree.data.time.TimeSeries.removeAgedItems : if z1 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.RegularTimePeriod,double,boolean)>(r1, d0, 1)
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.RegularTimePeriod,double,boolean)>(r1, d0, 1) >>>>>>>> org.jfree.data.time.TimeSeries.add : $r2 = new org.jfree.data.time.TimeSeriesDataItem
org.jfree.data.time.TimeSeries.add : $r2 = new org.jfree.data.time.TimeSeriesDataItem >>>>>>>> org.jfree.data.time.TimeSeries.add : specialinvoke $r2.<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,double)>(r1, d0)
org.jfree.data.time.TimeSeries.add : specialinvoke $r2.<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,double)>(r1, d0) >>>>>>>> org.jfree.data.time.TimeSeries.add : r3 = $r2
org.jfree.data.time.TimeSeries.add : r3 = $r2 >>>>>>>> org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem,boolean)>(r3, z0)
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem,boolean)>(r3, z0) >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemCount : if i0 >= 0
org.jfree.data.time.TimeSeries.setMaximumItemCount : if i0 >= 0 >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemCount : r0.<org.jfree.data.time.TimeSeries: int maximumItemCount> = i0
org.jfree.data.time.TimeSeries.setMaximumItemCount : r0.<org.jfree.data.time.TimeSeries: int maximumItemCount> = i0 >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemCount : $r2 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.setMaximumItemCount : $r2 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemCount : i1 = interfaceinvoke $r2.<java.util.List: int size()>()
org.jfree.data.time.TimeSeries.setMaximumItemCount : i1 = interfaceinvoke $r2.<java.util.List: int size()>() >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemCount : if i1 <= i0
org.jfree.data.time.TimeSeries.setMaximumItemCount : if i1 <= i0 >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemCount : $i2 = i1 - i0
org.jfree.data.time.TimeSeries.setMaximumItemCount : $i2 = i1 - i0 >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemCount : $i3 = $i2 - 1
org.jfree.data.time.TimeSeries.setMaximumItemCount : $i3 = $i2 - 1 >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemCount : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void delete(int,int)>(0, $i3)
org.jfree.data.time.TimeSeries.setMaximumItemCount : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void delete(int,int)>(0, $i3) >>>>>>>> org.jfree.data.time.TimeSeries.delete : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void delete(int,int,boolean)>(i0, i1, 1)
org.jfree.data.time.TimeSeries.delete : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void delete(int,int,boolean)>(i0, i1, 1) >>>>>>>> org.jfree.data.time.TimeSeries.delete : if i1 >= i0
org.jfree.data.time.TimeSeries.delete : if i1 >= i0 >>>>>>>> org.jfree.data.time.TimeSeries.delete : i2 = 0
org.jfree.data.time.TimeSeries.delete : i2 = 0 >>>>>>>> org.jfree.data.time.TimeSeries.delete : $i3 = i1 - i0
org.jfree.data.time.TimeSeries.delete : $i3 = i1 - i0 >>>>>>>> org.jfree.data.time.TimeSeries.delete : if i2 > $i3
org.jfree.data.time.TimeSeries.delete : if i2 > $i3 >>>>>>>> org.jfree.data.time.TimeSeries.delete : $r2 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.delete : $r2 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.delete : interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(i0)
org.jfree.data.time.TimeSeries.delete : interfaceinvoke $r2.<java.util.List: java.lang.Object remove(int)>(i0) >>>>>>>> org.jfree.data.time.TimeSeries.delete : i2 = i2 + 1
org.jfree.data.time.TimeSeries.delete : i2 = i2 + 1 >>>>>>>> org.jfree.data.time.TimeSeries.delete : goto [?= $i3 = i1 - i0]
org.jfree.data.time.TimeSeries.delete : goto [?= $i3 = i1 - i0] >>>>>>>> org.jfree.data.time.TimeSeries.delete : specialinvoke r0.<org.jfree.data.time.TimeSeries: void findBoundsByIteration()>()
org.jfree.data.time.TimeSeries.delete : specialinvoke r0.<org.jfree.data.time.TimeSeries: void findBoundsByIteration()>() >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : r0.<org.jfree.data.time.TimeSeries: double minY> = #NaN
org.jfree.data.time.TimeSeries.findBoundsByIteration : r0.<org.jfree.data.time.TimeSeries: double minY> = #NaN >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : r0.<org.jfree.data.time.TimeSeries: double maxY> = #NaN
org.jfree.data.time.TimeSeries.findBoundsByIteration : r0.<org.jfree.data.time.TimeSeries: double maxY> = #NaN >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : $r3 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.findBoundsByIteration : $r3 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
org.jfree.data.time.TimeSeries.findBoundsByIteration : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.jfree.data.time.TimeSeries.findBoundsByIteration : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : if $z0 == 0
org.jfree.data.time.TimeSeries.findBoundsByIteration : if $z0 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.jfree.data.time.TimeSeries.findBoundsByIteration : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : r2 = (org.jfree.data.time.TimeSeriesDataItem) $r4
org.jfree.data.time.TimeSeries.findBoundsByIteration : r2 = (org.jfree.data.time.TimeSeriesDataItem) $r4 >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : specialinvoke r0.<org.jfree.data.time.TimeSeries: void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)>(r2)
org.jfree.data.time.TimeSeries.findBoundsByIteration : specialinvoke r0.<org.jfree.data.time.TimeSeries: void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)>(r2) >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
org.jfree.data.time.TimeSeries.findBoundsByIteration : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.jfree.data.time.TimeSeries.delete : $r4 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.delete : $r4 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.delete : $z1 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>()
org.jfree.data.time.TimeSeries.delete : $z1 = interfaceinvoke $r4.<java.util.List: boolean isEmpty()>() >>>>>>>> org.jfree.data.time.TimeSeries.delete : if $z1 == 0
org.jfree.data.time.TimeSeries.delete : if $z1 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.delete : if z0 == 0
org.jfree.data.time.TimeSeries.delete : if z0 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.delete : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void fireSeriesChanged()>()
org.jfree.data.time.TimeSeries.delete : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void fireSeriesChanged()>() >>>>>>>> org.jfree.data.time.TimeSeries.getDataItem : $r2 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.getDataItem : $r2 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.getDataItem : $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0)
org.jfree.data.time.TimeSeries.getDataItem : $r3 = interfaceinvoke $r2.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.data.time.TimeSeries.getDataItem : r1 = (org.jfree.data.time.TimeSeriesDataItem) $r3
org.jfree.data.time.TimeSeries.getDataItem : r1 = (org.jfree.data.time.TimeSeriesDataItem) $r3 >>>>>>>> org.jfree.data.time.TimeSeries.getDataItem : $r4 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Object clone()>()
org.jfree.data.time.TimeSeries.getDataItem : $r4 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Object clone()>() >>>>>>>> org.jfree.data.time.TimeSeries.getDataItem : $r5 = (org.jfree.data.time.TimeSeriesDataItem) $r4
org.jfree.data.time.TimeSeries.getDataItem : $r5 = (org.jfree.data.time.TimeSeriesDataItem) $r4 >>>>>>>> org.jfree.data.time.TimeSeries.getDataItem : return $r5
org.jfree.data.time.TimeSeries.getDataItem : return $r5 >>>>>>>> org.jfree.data.time.Year.equals : if r1 != r0
org.jfree.data.time.Year.equals : if r1 != r0 >>>>>>>> org.jfree.data.time.Year.equals : $z0 = r1 instanceof org.jfree.data.time.Year
org.jfree.data.time.Year.equals : $z0 = r1 instanceof org.jfree.data.time.Year >>>>>>>> org.jfree.data.time.Year.equals : if $z0 != 0
org.jfree.data.time.Year.equals : if $z0 != 0 >>>>>>>> org.jfree.data.time.Year.equals : r2 = (org.jfree.data.time.Year) r1
org.jfree.data.time.Year.equals : r2 = (org.jfree.data.time.Year) r1 >>>>>>>> org.jfree.data.time.Year.equals : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.equals : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.equals : $s1 = r2.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.equals : $s1 = r2.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.equals : if $s0 != $s1
org.jfree.data.time.Year.equals : if $s0 != $s1 >>>>>>>> org.jfree.data.time.Year.equals : $z1 = 1
org.jfree.data.time.Year.equals : $z1 = 1 >>>>>>>> org.jfree.data.time.Year.equals : goto [?= return $z1]
org.jfree.data.time.Year.equals : goto [?= return $z1] >>>>>>>> org.jfree.data.time.Year.equals : return $z1
org.jfree.data.time.Year.equals : return $z1 >>>>>>>> org.jfree.data.time.TimeSeries.getMinY : $d0 = r0.<org.jfree.data.time.TimeSeries: double minY>
org.jfree.data.time.TimeSeries.getMinY : $d0 = r0.<org.jfree.data.time.TimeSeries: double minY> >>>>>>>> org.jfree.data.time.TimeSeries.getMinY : return $d0
org.jfree.data.time.TimeSeries.getMinY : return $d0 >>>>>>>> org.jfree.data.time.TimeSeries.getMaxY : $d0 = r0.<org.jfree.data.time.TimeSeries: double maxY>
org.jfree.data.time.TimeSeries.getMaxY : $d0 = r0.<org.jfree.data.time.TimeSeries: double maxY> >>>>>>>> org.jfree.data.time.TimeSeries.getMaxY : return $d0
