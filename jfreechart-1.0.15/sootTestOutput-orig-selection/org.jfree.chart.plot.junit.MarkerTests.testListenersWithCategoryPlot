org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(0, r1, z0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : if i0 != 0
org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : if i0 != 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : if r1 != null
org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : if r1 != null >>>>>>>> org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList domainAxisLocations>
org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList domainAxisLocations> >>>>>>>> org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : virtualinvoke $r3.<org.jfree.util.ObjectList: void set(int,java.lang.Object)>(i0, r1)
org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : virtualinvoke $r3.<org.jfree.util.ObjectList: void set(int,java.lang.Object)>(i0, r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : if z0 == 0
org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : if z0 == 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(0, r1, z0)
org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(0, r1, z0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : if i0 != 0
org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : if i0 != 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : if r1 != null
org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : if r1 != null >>>>>>>> org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxisLocations>
org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxisLocations> >>>>>>>> org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : virtualinvoke $r3.<org.jfree.util.ObjectList: void set(int,java.lang.Object)>(i0, r1)
org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : virtualinvoke $r3.<org.jfree.util.ObjectList: void set(int,java.lang.Object)>(i0, r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : if z0 == 0
org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : if z0 == 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : $r1 = new java.util.ArrayList
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : $r1 = new java.util.ArrayList >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(1)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : r2 = $r1
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : r2 = $r1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : $r3 = new java.lang.Integer
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : $r3 = new java.lang.Integer >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i1)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void mapDatasetToDomainAxes(int,java.util.List)>(i0, r2)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void mapDatasetToDomainAxes(int,java.util.List)>(i0, r2) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : if i0 >= 0
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : if i0 >= 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : specialinvoke r0.<org.jfree.chart.plot.CategoryPlot: void checkAxisIndices(java.util.List)>(r1)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : specialinvoke r0.<org.jfree.chart.plot.CategoryPlot: void checkAxisIndices(java.util.List)>(r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if r1 != null
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if r1 != null >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : i0 = interfaceinvoke r1.<java.util.List: int size()>()
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : i0 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if i0 != 0
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if i0 != 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : $r5 = new java.util.HashSet
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : $r5 = new java.util.HashSet >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : specialinvoke $r5.<java.util.HashSet: void <init>()>()
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : specialinvoke $r5.<java.util.HashSet: void <init>()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : r2 = $r5
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : r2 = $r5 >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : i1 = 0
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : i1 = 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if i1 >= i0
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if i1 >= i0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1)
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : $z0 = r3 instanceof java.lang.Integer
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : $z0 = r3 instanceof java.lang.Integer >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if $z0 != 0
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if $z0 != 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : $z1 = virtualinvoke r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r3)
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : $z1 = virtualinvoke r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r3) >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if $z1 == 0
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if $z1 == 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : virtualinvoke r2.<java.util.HashSet: boolean add(java.lang.Object)>(r3)
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : virtualinvoke r2.<java.util.HashSet: boolean add(java.lang.Object)>(r3) >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : i1 = i1 + 1
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : i1 = i1 + 1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : goto [?= (branch)]
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : goto [?= (branch)] >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r4 = new java.lang.Integer
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r4 = new java.lang.Integer >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : r2 = $r4
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : r2 = $r4 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToDomainAxesMap>
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToDomainAxesMap> >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r6 = new java.util.ArrayList
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r6 = new java.util.ArrayList >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>(r1)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>(r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : virtualinvoke $r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : virtualinvoke $r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r8 = new org.jfree.data.general.DatasetChangeEvent
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r8 = new org.jfree.data.general.DatasetChangeEvent >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r9 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(i0)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r9 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.getDataset : r1 = null
org.jfree.chart.plot.CategoryPlot.getDataset : r1 = null >>>>>>>> org.jfree.chart.plot.CategoryPlot.getDataset : $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList datasets>
org.jfree.chart.plot.CategoryPlot.getDataset : $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList datasets> >>>>>>>> org.jfree.chart.plot.CategoryPlot.getDataset : $i1 = virtualinvoke $r2.<org.jfree.util.ObjectList: int size()>()
org.jfree.chart.plot.CategoryPlot.getDataset : $i1 = virtualinvoke $r2.<org.jfree.util.ObjectList: int size()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.getDataset : if $i1 <= i0
org.jfree.chart.plot.CategoryPlot.getDataset : if $i1 <= i0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.getDataset : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList datasets>
org.jfree.chart.plot.CategoryPlot.getDataset : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList datasets> >>>>>>>> org.jfree.chart.plot.CategoryPlot.getDataset : $r4 = virtualinvoke $r3.<org.jfree.util.ObjectList: java.lang.Object get(int)>(i0)
org.jfree.chart.plot.CategoryPlot.getDataset : $r4 = virtualinvoke $r3.<org.jfree.util.ObjectList: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.getDataset : r1 = (org.jfree.data.category.CategoryDataset) $r4
org.jfree.chart.plot.CategoryPlot.getDataset : r1 = (org.jfree.data.category.CategoryDataset) $r4 >>>>>>>> org.jfree.chart.plot.CategoryPlot.getDataset : return r1
org.jfree.chart.plot.CategoryPlot.getDataset : return r1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : specialinvoke $r8.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, $r9)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : specialinvoke $r8.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, $r9) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>($r8)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>($r8) >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes>
org.jfree.chart.plot.CategoryPlot.datasetChanged : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes> >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : i0 = virtualinvoke $r3.<org.jfree.util.ObjectList: int size()>()
org.jfree.chart.plot.CategoryPlot.datasetChanged : i0 = virtualinvoke $r3.<org.jfree.util.ObjectList: int size()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : i1 = 0
org.jfree.chart.plot.CategoryPlot.datasetChanged : i1 = 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : if i1 >= i0
org.jfree.chart.plot.CategoryPlot.datasetChanged : if i1 >= i0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : $r4 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.Plot getParent()>()
org.jfree.chart.plot.CategoryPlot.datasetChanged : $r4 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.Plot getParent()>() >>>>>>>> org.jfree.chart.plot.Plot.getParent : $r1 = r0.<org.jfree.chart.plot.Plot: org.jfree.chart.plot.Plot parent>
org.jfree.chart.plot.Plot.getParent : $r1 = r0.<org.jfree.chart.plot.Plot: org.jfree.chart.plot.Plot parent> >>>>>>>> org.jfree.chart.plot.Plot.getParent : return $r1
org.jfree.chart.plot.Plot.getParent : return $r1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : if $r4 == null
org.jfree.chart.plot.CategoryPlot.datasetChanged : if $r4 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : $r6 = new org.jfree.chart.event.PlotChangeEvent
org.jfree.chart.plot.CategoryPlot.datasetChanged : $r6 = new org.jfree.chart.event.PlotChangeEvent >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : specialinvoke $r6.<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>(r0)
org.jfree.chart.plot.CategoryPlot.datasetChanged : specialinvoke $r6.<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>(r0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : r7 = $r6
org.jfree.chart.plot.CategoryPlot.datasetChanged : r7 = $r6 >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : $r8 = <org.jfree.chart.event.ChartChangeEventType: org.jfree.chart.event.ChartChangeEventType DATASET_UPDATED>
org.jfree.chart.plot.CategoryPlot.datasetChanged : $r8 = <org.jfree.chart.event.ChartChangeEventType: org.jfree.chart.event.ChartChangeEventType DATASET_UPDATED> >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : virtualinvoke r7.<org.jfree.chart.event.PlotChangeEvent: void setType(org.jfree.chart.event.ChartChangeEventType)>($r8)
org.jfree.chart.plot.CategoryPlot.datasetChanged : virtualinvoke r7.<org.jfree.chart.event.PlotChangeEvent: void setType(org.jfree.chart.event.ChartChangeEventType)>($r8) >>>>>>>> org.jfree.chart.event.ChartChangeEvent.setType : r0.<org.jfree.chart.event.ChartChangeEvent: org.jfree.chart.event.ChartChangeEventType type> = r1
org.jfree.chart.event.ChartChangeEvent.setType : r0.<org.jfree.chart.event.ChartChangeEvent: org.jfree.chart.event.ChartChangeEventType type> = r1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void notifyListeners(org.jfree.chart.event.PlotChangeEvent)>(r7)
org.jfree.chart.plot.CategoryPlot.datasetChanged : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void notifyListeners(org.jfree.chart.event.PlotChangeEvent)>(r7) >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : $z0 = r0.<org.jfree.chart.plot.Plot: boolean notify>
org.jfree.chart.plot.Plot.notifyListeners : $z0 = r0.<org.jfree.chart.plot.Plot: boolean notify> >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : if $z0 != 0
org.jfree.chart.plot.Plot.notifyListeners : if $z0 != 0 >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : $r3 = r0.<org.jfree.chart.plot.Plot: javax.swing.event.EventListenerList listenerList>
org.jfree.chart.plot.Plot.notifyListeners : $r3 = r0.<org.jfree.chart.plot.Plot: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.chart.plot.Plot.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : $i1 = lengthof r2
org.jfree.chart.plot.Plot.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : i0 = $i1 - 2
org.jfree.chart.plot.Plot.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : if i0 < 0
org.jfree.chart.plot.Plot.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : $r1 = new java.util.ArrayList
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : $r1 = new java.util.ArrayList >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(1)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : r2 = $r1
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : r2 = $r1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : $r3 = new java.lang.Integer
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : $r3 = new java.lang.Integer >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i1)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void mapDatasetToRangeAxes(int,java.util.List)>(i0, r2)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void mapDatasetToRangeAxes(int,java.util.List)>(i0, r2) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : if i0 >= 0
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : if i0 >= 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : specialinvoke r0.<org.jfree.chart.plot.CategoryPlot: void checkAxisIndices(java.util.List)>(r1)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : specialinvoke r0.<org.jfree.chart.plot.CategoryPlot: void checkAxisIndices(java.util.List)>(r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r4 = new java.lang.Integer
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r4 = new java.lang.Integer >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : r2 = $r4
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : r2 = $r4 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToRangeAxesMap>
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToRangeAxesMap> >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r6 = new java.util.ArrayList
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r6 = new java.util.ArrayList >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>(r1)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>(r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : virtualinvoke $r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : virtualinvoke $r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r8 = new org.jfree.data.general.DatasetChangeEvent
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r8 = new org.jfree.data.general.DatasetChangeEvent >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r9 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(i0)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r9 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : specialinvoke $r8.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, $r9)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : specialinvoke $r8.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, $r9) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>($r8)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>($r8) >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : r2 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis(int)>(i1)
org.jfree.chart.plot.CategoryPlot.datasetChanged : r2 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis(int)>(i1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : r1 = null
org.jfree.chart.plot.CategoryPlot.getRangeAxis : r1 = null >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : $r4 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes>
org.jfree.chart.plot.CategoryPlot.getRangeAxis : $r4 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes> >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : $i1 = virtualinvoke $r4.<org.jfree.util.ObjectList: int size()>()
org.jfree.chart.plot.CategoryPlot.getRangeAxis : $i1 = virtualinvoke $r4.<org.jfree.util.ObjectList: int size()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : if i0 >= $i1
org.jfree.chart.plot.CategoryPlot.getRangeAxis : if i0 >= $i1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes>
org.jfree.chart.plot.CategoryPlot.getRangeAxis : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes> >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : $r6 = virtualinvoke $r5.<org.jfree.util.ObjectList: java.lang.Object get(int)>(i0)
org.jfree.chart.plot.CategoryPlot.getRangeAxis : $r6 = virtualinvoke $r5.<org.jfree.util.ObjectList: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : r1 = (org.jfree.chart.axis.ValueAxis) $r6
org.jfree.chart.plot.CategoryPlot.getRangeAxis : r1 = (org.jfree.chart.axis.ValueAxis) $r6 >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : if r1 != null
org.jfree.chart.plot.CategoryPlot.getRangeAxis : if r1 != null >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : r2 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.Plot getParent()>()
org.jfree.chart.plot.CategoryPlot.getRangeAxis : r2 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.Plot getParent()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : $z0 = r2 instanceof org.jfree.chart.plot.CategoryPlot
org.jfree.chart.plot.CategoryPlot.getRangeAxis : $z0 = r2 instanceof org.jfree.chart.plot.CategoryPlot >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : if $z0 == 0
org.jfree.chart.plot.CategoryPlot.getRangeAxis : if $z0 == 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : return r1
org.jfree.chart.plot.CategoryPlot.getRangeAxis : return r1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : if r2 == null
org.jfree.chart.plot.CategoryPlot.datasetChanged : if r2 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : i1 = i1 + 1
org.jfree.chart.plot.CategoryPlot.datasetChanged : i1 = i1 + 1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : goto [?= (branch)]
org.jfree.chart.plot.CategoryPlot.datasetChanged : goto [?= (branch)] >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : i0 = 0
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : i0 = 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList domainAxes>
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList domainAxes> >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : $i1 = virtualinvoke $r2.<org.jfree.util.ObjectList: int size()>()
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : $i1 = virtualinvoke $r2.<org.jfree.util.ObjectList: int size()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : if i0 >= $i1
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : if i0 >= $i1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList domainAxes>
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList domainAxes> >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : $r4 = virtualinvoke $r3.<org.jfree.util.ObjectList: java.lang.Object get(int)>(i0)
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : $r4 = virtualinvoke $r3.<org.jfree.util.ObjectList: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : r1 = (org.jfree.chart.axis.CategoryAxis) $r4
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : r1 = (org.jfree.chart.axis.CategoryAxis) $r4 >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : if r1 == null
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : if r1 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : i0 = i0 + 1
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : i0 = i0 + 1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : goto [?= $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList domainAxes>]
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : goto [?= $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList domainAxes>] >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : i0 = 0
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : i0 = 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes>
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes> >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : $i1 = virtualinvoke $r2.<org.jfree.util.ObjectList: int size()>()
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : $i1 = virtualinvoke $r2.<org.jfree.util.ObjectList: int size()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : if i0 >= $i1
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : if i0 >= $i1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes>
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes> >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : $r4 = virtualinvoke $r3.<org.jfree.util.ObjectList: java.lang.Object get(int)>(i0)
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : $r4 = virtualinvoke $r3.<org.jfree.util.ObjectList: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : r1 = (org.jfree.chart.axis.ValueAxis) $r4
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : r1 = (org.jfree.chart.axis.ValueAxis) $r4 >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : if r1 == null
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : if r1 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : i0 = i0 + 1
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : i0 = i0 + 1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : goto [?= $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes>]
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : goto [?= $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes>] >>>>>>>> org.jfree.chart.util.ParamChecks.nullNotPermitted : if r0 != null
org.jfree.chart.util.ParamChecks.nullNotPermitted : if r0 != null >>>>>>>> org.jfree.chart.plot.Marker.setLabelOffsetType : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "adj")
org.jfree.chart.plot.Marker.setLabelOffsetType : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "adj") >>>>>>>> org.jfree.chart.plot.Marker.setLabelOffsetType : r0.<org.jfree.chart.plot.Marker: org.jfree.ui.LengthAdjustmentType labelOffsetType> = r1
org.jfree.chart.plot.Marker.setLabelOffsetType : r0.<org.jfree.chart.plot.Marker: org.jfree.ui.LengthAdjustmentType labelOffsetType> = r1 >>>>>>>> org.jfree.chart.plot.Marker.setLabelOffsetType : $r2 = new org.jfree.chart.event.MarkerChangeEvent
org.jfree.chart.plot.Marker.setLabelOffsetType : $r2 = new org.jfree.chart.event.MarkerChangeEvent >>>>>>>> org.jfree.chart.plot.Marker.setLabelOffsetType : specialinvoke $r2.<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>(r0)
org.jfree.chart.plot.Marker.setLabelOffsetType : specialinvoke $r2.<org.jfree.chart.event.MarkerChangeEvent: void <init>(org.jfree.chart.plot.Marker)>(r0) >>>>>>>> org.jfree.chart.plot.Marker.setLabelOffsetType : virtualinvoke r0.<org.jfree.chart.plot.Marker: void notifyListeners(org.jfree.chart.event.MarkerChangeEvent)>($r2)
org.jfree.chart.plot.Marker.setLabelOffsetType : virtualinvoke r0.<org.jfree.chart.plot.Marker: void notifyListeners(org.jfree.chart.event.MarkerChangeEvent)>($r2) >>>>>>>> org.jfree.chart.plot.Marker.notifyListeners : $r3 = r0.<org.jfree.chart.plot.Marker: javax.swing.event.EventListenerList listenerList>
org.jfree.chart.plot.Marker.notifyListeners : $r3 = r0.<org.jfree.chart.plot.Marker: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.chart.plot.Marker.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.chart.plot.Marker.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.chart.plot.Marker.notifyListeners : $i1 = lengthof r2
org.jfree.chart.plot.Marker.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.chart.plot.Marker.notifyListeners : i0 = $i1 - 2
org.jfree.chart.plot.Marker.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.chart.plot.Marker.notifyListeners : if i0 < 0
org.jfree.chart.plot.Marker.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : $r2 = <org.jfree.ui.Layer: org.jfree.ui.Layer FOREGROUND>
org.jfree.chart.plot.CategoryPlot.addDomainMarker : $r2 = <org.jfree.ui.Layer: org.jfree.ui.Layer FOREGROUND> >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.ui.Layer)>(r1, $r2)
org.jfree.chart.plot.CategoryPlot.addDomainMarker : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void addDomainMarker(org.jfree.chart.plot.CategoryMarker,org.jfree.ui.Layer)>(r1, $r2) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.ui.Layer)>(0, r1, r2)
org.jfree.chart.plot.CategoryPlot.addDomainMarker : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.ui.Layer)>(0, r1, r2) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.ui.Layer,boolean)>(i0, r1, r2, 1)
org.jfree.chart.plot.CategoryPlot.addDomainMarker : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void addDomainMarker(int,org.jfree.chart.plot.CategoryMarker,org.jfree.ui.Layer,boolean)>(i0, r1, r2, 1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "marker")
org.jfree.chart.plot.CategoryPlot.addDomainMarker : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "marker") >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r2, "layer")
org.jfree.chart.plot.CategoryPlot.addDomainMarker : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r2, "layer") >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : $r4 = <org.jfree.ui.Layer: org.jfree.ui.Layer FOREGROUND>
org.jfree.chart.plot.CategoryPlot.addDomainMarker : $r4 = <org.jfree.ui.Layer: org.jfree.ui.Layer FOREGROUND> >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : if r2 != $r4
org.jfree.chart.plot.CategoryPlot.addDomainMarker : if r2 != $r4 >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>
org.jfree.chart.plot.CategoryPlot.addDomainMarker : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : $r6 = new java.lang.Integer
org.jfree.chart.plot.CategoryPlot.addDomainMarker : $r6 = new java.lang.Integer >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : specialinvoke $r6.<java.lang.Integer: void <init>(int)>(i0)
org.jfree.chart.plot.CategoryPlot.addDomainMarker : specialinvoke $r6.<java.lang.Integer: void <init>(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6)
org.jfree.chart.plot.CategoryPlot.addDomainMarker : $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : r3 = (java.util.Collection) $r7
org.jfree.chart.plot.CategoryPlot.addDomainMarker : r3 = (java.util.Collection) $r7 >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : if r3 != null
org.jfree.chart.plot.CategoryPlot.addDomainMarker : if r3 != null >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : $r8 = new java.util.ArrayList
org.jfree.chart.plot.CategoryPlot.addDomainMarker : $r8 = new java.util.ArrayList >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : specialinvoke $r8.<java.util.ArrayList: void <init>()>()
org.jfree.chart.plot.CategoryPlot.addDomainMarker : specialinvoke $r8.<java.util.ArrayList: void <init>()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : r3 = $r8
org.jfree.chart.plot.CategoryPlot.addDomainMarker : r3 = $r8 >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : $r9 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>
org.jfree.chart.plot.CategoryPlot.addDomainMarker : $r9 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : $r10 = new java.lang.Integer
org.jfree.chart.plot.CategoryPlot.addDomainMarker : $r10 = new java.lang.Integer >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : specialinvoke $r10.<java.lang.Integer: void <init>(int)>(i0)
org.jfree.chart.plot.CategoryPlot.addDomainMarker : specialinvoke $r10.<java.lang.Integer: void <init>(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r3)
org.jfree.chart.plot.CategoryPlot.addDomainMarker : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r3) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : interfaceinvoke r3.<java.util.Collection: boolean add(java.lang.Object)>(r1)
org.jfree.chart.plot.CategoryPlot.addDomainMarker : interfaceinvoke r3.<java.util.Collection: boolean add(java.lang.Object)>(r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : goto [?= virtualinvoke r1.<org.jfree.chart.plot.CategoryMarker: void addChangeListener(org.jfree.chart.event.MarkerChangeListener)>(r0)]
org.jfree.chart.plot.CategoryPlot.addDomainMarker : goto [?= virtualinvoke r1.<org.jfree.chart.plot.CategoryMarker: void addChangeListener(org.jfree.chart.event.MarkerChangeListener)>(r0)] >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : virtualinvoke r1.<org.jfree.chart.plot.CategoryMarker: void addChangeListener(org.jfree.chart.event.MarkerChangeListener)>(r0)
org.jfree.chart.plot.CategoryPlot.addDomainMarker : virtualinvoke r1.<org.jfree.chart.plot.CategoryMarker: void addChangeListener(org.jfree.chart.event.MarkerChangeListener)>(r0) >>>>>>>> org.jfree.chart.plot.Marker.addChangeListener : $r2 = r0.<org.jfree.chart.plot.Marker: javax.swing.event.EventListenerList listenerList>
org.jfree.chart.plot.Marker.addChangeListener : $r2 = r0.<org.jfree.chart.plot.Marker: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.chart.plot.Marker.addChangeListener : virtualinvoke $r2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "org/jfree/chart/event/MarkerChangeListener", r1)
org.jfree.chart.plot.Marker.addChangeListener : virtualinvoke $r2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "org/jfree/chart/event/MarkerChangeListener", r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : if z0 == 0
org.jfree.chart.plot.CategoryPlot.addDomainMarker : if z0 == 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.addDomainMarker : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>()
org.jfree.chart.plot.CategoryPlot.addDomainMarker : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>() >>>>>>>> org.jfree.chart.plot.Plot.fireChangeEvent : $r1 = new org.jfree.chart.event.PlotChangeEvent
org.jfree.chart.plot.Plot.fireChangeEvent : $r1 = new org.jfree.chart.event.PlotChangeEvent >>>>>>>> org.jfree.chart.plot.Plot.fireChangeEvent : specialinvoke $r1.<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>(r0)
org.jfree.chart.plot.Plot.fireChangeEvent : specialinvoke $r1.<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>(r0) >>>>>>>> org.jfree.chart.plot.Plot.fireChangeEvent : virtualinvoke r0.<org.jfree.chart.plot.Plot: void notifyListeners(org.jfree.chart.event.PlotChangeEvent)>($r1)
org.jfree.chart.plot.Plot.fireChangeEvent : virtualinvoke r0.<org.jfree.chart.plot.Plot: void notifyListeners(org.jfree.chart.event.PlotChangeEvent)>($r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : $r2 = <org.jfree.ui.Layer: org.jfree.ui.Layer FOREGROUND>
org.jfree.chart.plot.CategoryPlot.addRangeMarker : $r2 = <org.jfree.ui.Layer: org.jfree.ui.Layer FOREGROUND> >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.ui.Layer)>(r1, $r2)
org.jfree.chart.plot.CategoryPlot.addRangeMarker : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void addRangeMarker(org.jfree.chart.plot.Marker,org.jfree.ui.Layer)>(r1, $r2) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer)>(0, r1, r2)
org.jfree.chart.plot.CategoryPlot.addRangeMarker : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer)>(0, r1, r2) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer,boolean)>(i0, r1, r2, 1)
org.jfree.chart.plot.CategoryPlot.addRangeMarker : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void addRangeMarker(int,org.jfree.chart.plot.Marker,org.jfree.ui.Layer,boolean)>(i0, r1, r2, 1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : $r3 = <org.jfree.ui.Layer: org.jfree.ui.Layer FOREGROUND>
org.jfree.chart.plot.CategoryPlot.addRangeMarker : $r3 = <org.jfree.ui.Layer: org.jfree.ui.Layer FOREGROUND> >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : if r2 != $r3
org.jfree.chart.plot.CategoryPlot.addRangeMarker : if r2 != $r3 >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>
org.jfree.chart.plot.CategoryPlot.addRangeMarker : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : $r6 = new java.lang.Integer
org.jfree.chart.plot.CategoryPlot.addRangeMarker : $r6 = new java.lang.Integer >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : specialinvoke $r6.<java.lang.Integer: void <init>(int)>(i0)
org.jfree.chart.plot.CategoryPlot.addRangeMarker : specialinvoke $r6.<java.lang.Integer: void <init>(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6)
org.jfree.chart.plot.CategoryPlot.addRangeMarker : $r7 = interfaceinvoke $r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r6) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : r4 = (java.util.Collection) $r7
org.jfree.chart.plot.CategoryPlot.addRangeMarker : r4 = (java.util.Collection) $r7 >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : if r4 != null
org.jfree.chart.plot.CategoryPlot.addRangeMarker : if r4 != null >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : $r8 = new java.util.ArrayList
org.jfree.chart.plot.CategoryPlot.addRangeMarker : $r8 = new java.util.ArrayList >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : specialinvoke $r8.<java.util.ArrayList: void <init>()>()
org.jfree.chart.plot.CategoryPlot.addRangeMarker : specialinvoke $r8.<java.util.ArrayList: void <init>()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : r4 = $r8
org.jfree.chart.plot.CategoryPlot.addRangeMarker : r4 = $r8 >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : $r9 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>
org.jfree.chart.plot.CategoryPlot.addRangeMarker : $r9 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : $r10 = new java.lang.Integer
org.jfree.chart.plot.CategoryPlot.addRangeMarker : $r10 = new java.lang.Integer >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : specialinvoke $r10.<java.lang.Integer: void <init>(int)>(i0)
org.jfree.chart.plot.CategoryPlot.addRangeMarker : specialinvoke $r10.<java.lang.Integer: void <init>(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r4)
org.jfree.chart.plot.CategoryPlot.addRangeMarker : interfaceinvoke $r9.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r10, r4) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>(r1)
org.jfree.chart.plot.CategoryPlot.addRangeMarker : interfaceinvoke r4.<java.util.Collection: boolean add(java.lang.Object)>(r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : goto [?= virtualinvoke r1.<org.jfree.chart.plot.Marker: void addChangeListener(org.jfree.chart.event.MarkerChangeListener)>(r0)]
org.jfree.chart.plot.CategoryPlot.addRangeMarker : goto [?= virtualinvoke r1.<org.jfree.chart.plot.Marker: void addChangeListener(org.jfree.chart.event.MarkerChangeListener)>(r0)] >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : virtualinvoke r1.<org.jfree.chart.plot.Marker: void addChangeListener(org.jfree.chart.event.MarkerChangeListener)>(r0)
org.jfree.chart.plot.CategoryPlot.addRangeMarker : virtualinvoke r1.<org.jfree.chart.plot.Marker: void addChangeListener(org.jfree.chart.event.MarkerChangeListener)>(r0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : if z0 == 0
org.jfree.chart.plot.CategoryPlot.addRangeMarker : if z0 == 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.addRangeMarker : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>()
org.jfree.chart.plot.CategoryPlot.addRangeMarker : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>() >>>>>>>> org.jfree.chart.plot.Marker.getListeners : $r2 = r0.<org.jfree.chart.plot.Marker: javax.swing.event.EventListenerList listenerList>
org.jfree.chart.plot.Marker.getListeners : $r2 = r0.<org.jfree.chart.plot.Marker: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.chart.plot.Marker.getListeners : $r3 = virtualinvoke $r2.<javax.swing.event.EventListenerList: java.util.EventListener[] getListeners(java.lang.Class)>(r1)
org.jfree.chart.plot.Marker.getListeners : $r3 = virtualinvoke $r2.<javax.swing.event.EventListenerList: java.util.EventListener[] getListeners(java.lang.Class)>(r1) >>>>>>>> org.jfree.chart.plot.Marker.getListeners : return $r3
org.jfree.chart.plot.Marker.getListeners : return $r3 >>>>>>>> org.jfree.chart.plot.CategoryPlot.equals : if r1 != r0
org.jfree.chart.plot.CategoryPlot.equals : if r1 != r0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.equals : return 1
org.jfree.chart.plot.CategoryPlot.equals : return 1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r4 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r4 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : if $r4 == null
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : if $r4 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r1 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>()
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r1 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>()
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : if $z0 == 0
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : if $z0 == 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r7 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r7 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : interfaceinvoke $r7.<java.util.Map: void clear()>()
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : interfaceinvoke $r7.<java.util.Map: void clear()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r8 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r8 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : if $r8 == null
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : if $r8 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r9 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r9 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>()
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r11 = interfaceinvoke r10.<java.util.Set: java.util.Iterator iterator()>()
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r11 = interfaceinvoke r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : if $z1 == 0
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : if $z1 == 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>()
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r13 = (java.lang.Integer) $r12
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r13 = (java.lang.Integer) $r12 >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $i1 = virtualinvoke r13.<java.lang.Integer: int intValue()>()
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $i1 = virtualinvoke r13.<java.lang.Integer: int intValue()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void clearDomainMarkers(int)>($i1)
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void clearDomainMarkers(int)>($i1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r1 = new java.lang.Integer
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r1 = new java.lang.Integer >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0)
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r2 = $r1
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r2 = $r1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r6 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers>
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r6 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundDomainMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : if $r6 == null
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : if $r6 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r3 = (java.util.Collection) $r8
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r3 = (java.util.Collection) $r8 >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : if r3 == null
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : if r3 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r10 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r10 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : if $r10 == null
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : if $r10 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r11 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r11 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r13 = (java.util.Collection) $r12
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r13 = (java.util.Collection) $r12 >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : if r13 == null
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : if r13 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r14 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>()
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r14 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>()
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r16 = (org.jfree.chart.plot.Marker) $r15
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : r16 = (org.jfree.chart.plot.Marker) $r15 >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : virtualinvoke r16.<org.jfree.chart.plot.Marker: void removeChangeListener(org.jfree.chart.event.MarkerChangeListener)>(r0)
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : virtualinvoke r16.<org.jfree.chart.plot.Marker: void removeChangeListener(org.jfree.chart.event.MarkerChangeListener)>(r0) >>>>>>>> org.jfree.chart.plot.Marker.removeChangeListener : $r2 = r0.<org.jfree.chart.plot.Marker: javax.swing.event.EventListenerList listenerList>
org.jfree.chart.plot.Marker.removeChangeListener : $r2 = r0.<org.jfree.chart.plot.Marker: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.chart.plot.Marker.removeChangeListener : virtualinvoke $r2.<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>(class "org/jfree/chart/event/MarkerChangeListener", r1)
org.jfree.chart.plot.Marker.removeChangeListener : virtualinvoke $r2.<javax.swing.event.EventListenerList: void remove(java.lang.Class,java.util.EventListener)>(class "org/jfree/chart/event/MarkerChangeListener", r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : goto [?= $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()]
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : goto [?= $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : interfaceinvoke r13.<java.util.Collection: void clear()>()
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : interfaceinvoke r13.<java.util.Collection: void clear()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>()
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : goto [?= $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()]
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : goto [?= $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r14 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers>
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : $r14 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundDomainMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : interfaceinvoke $r14.<java.util.Map: void clear()>()
org.jfree.chart.plot.CategoryPlot.clearDomainMarkers : interfaceinvoke $r14.<java.util.Map: void clear()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r4 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r4 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : if $r4 == null
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : if $r4 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r1 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>()
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r1 = interfaceinvoke $r5.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>()
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r2 = interfaceinvoke r1.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $z0 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : if $z0 == 0
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : if $z0 == 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r7 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r7 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : interfaceinvoke $r7.<java.util.Map: void clear()>()
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : interfaceinvoke $r7.<java.util.Map: void clear()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r8 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r8 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : if $r8 == null
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : if $r8 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r9 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r9 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>()
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r10 = interfaceinvoke $r9.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r11 = interfaceinvoke r10.<java.util.Set: java.util.Iterator iterator()>()
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r11 = interfaceinvoke r10.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : if $z1 == 0
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : if $z1 == 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>()
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r12 = interfaceinvoke r11.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r13 = (java.lang.Integer) $r12
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r13 = (java.lang.Integer) $r12 >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $i1 = virtualinvoke r13.<java.lang.Integer: int intValue()>()
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $i1 = virtualinvoke r13.<java.lang.Integer: int intValue()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void clearRangeMarkers(int)>($i1)
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void clearRangeMarkers(int)>($i1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r1 = new java.lang.Integer
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r1 = new java.lang.Integer >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0)
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r2 = $r1
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r2 = $r1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r6 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers>
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r6 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map backgroundRangeMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : if $r6 == null
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : if $r6 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r8 = interfaceinvoke $r7.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r3 = (java.util.Collection) $r8
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r3 = (java.util.Collection) $r8 >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : if r3 == null
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : if r3 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r10 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r10 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : if $r10 == null
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : if $r10 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r11 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r11 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2)
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r12 = interfaceinvoke $r11.<java.util.Map: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r13 = (java.util.Collection) $r12
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r13 = (java.util.Collection) $r12 >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : if r13 == null
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : if r13 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r14 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>()
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r14 = interfaceinvoke r13.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>()
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r15 = interfaceinvoke r14.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r16 = (org.jfree.chart.plot.Marker) $r15
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : r16 = (org.jfree.chart.plot.Marker) $r15 >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : virtualinvoke r16.<org.jfree.chart.plot.Marker: void removeChangeListener(org.jfree.chart.event.MarkerChangeListener)>(r0)
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : virtualinvoke r16.<org.jfree.chart.plot.Marker: void removeChangeListener(org.jfree.chart.event.MarkerChangeListener)>(r0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : goto [?= $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()]
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : goto [?= $z1 = interfaceinvoke r14.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : interfaceinvoke r13.<java.util.Collection: void clear()>()
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : interfaceinvoke r13.<java.util.Collection: void clear()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>()
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void fireChangeEvent()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : goto [?= $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()]
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : goto [?= $z1 = interfaceinvoke r11.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r14 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers>
org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : $r14 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.Map foregroundRangeMarkers> >>>>>>>> org.jfree.chart.plot.CategoryPlot.clearRangeMarkers : interfaceinvoke $r14.<java.util.Map: void clear()>()
