org.jfree.chart.util.ParamChecks.nullNotPermitted : if r0 != null >>>>>>>> org.jfree.data.time.Year.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Year: long getFirstMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Year.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Year: long getFirstMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getFirstMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 0, 1, 0, 0, 0)
org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 0, 1, 0, 0, 0) >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0)
org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0) >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Year.getFirstMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : return $l1
org.jfree.data.time.Year.getFirstMillisecond : return $l1 >>>>>>>> org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long firstMillisecond> = $l0
org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long firstMillisecond> = $l0 >>>>>>>> org.jfree.data.time.Year.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Year: long getLastMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Year.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Year: long getLastMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getLastMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 11, 31, 23, 59, 59)
org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 11, 31, 23, 59, 59) >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999)
org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999) >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Year.getLastMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : return $l1
org.jfree.data.time.Year.getLastMillisecond : return $l1 >>>>>>>> org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long lastMillisecond> = $l1
org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long lastMillisecond> = $l1 >>>>>>>> org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)>(r1, r2, 1)
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)>(r1, r2, 1) >>>>>>>> org.jfree.data.time.TimeSeries.add : $r3 = new org.jfree.data.time.TimeSeriesDataItem
org.jfree.data.time.TimeSeries.add : $r3 = new org.jfree.data.time.TimeSeriesDataItem >>>>>>>> org.jfree.data.time.TimeSeries.add : specialinvoke $r3.<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>(r1, r2)
org.jfree.data.time.TimeSeries.add : specialinvoke $r3.<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,java.lang.Number)>(r1, r2) >>>>>>>> org.jfree.data.time.TimeSeries.add : r4 = $r3
org.jfree.data.time.TimeSeries.add : r4 = $r3 >>>>>>>> org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem,boolean)>(r4, z0)
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem,boolean)>(r4, z0) >>>>>>>> org.jfree.data.time.TimeSeries.add : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "item")
org.jfree.data.time.TimeSeries.add : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "item") >>>>>>>> org.jfree.data.time.TimeSeries.add : $r6 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Object clone()>()
org.jfree.data.time.TimeSeries.add : $r6 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Object clone()>() >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.clone : r1 = null
org.jfree.data.time.TimeSeriesDataItem.clone : r1 = null >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.clone : r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>()
org.jfree.data.time.TimeSeriesDataItem.clone : r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.clone : goto [?= return r1]
org.jfree.data.time.TimeSeriesDataItem.clone : goto [?= return r1] >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.clone : return r1
org.jfree.data.time.TimeSeriesDataItem.clone : return r1 >>>>>>>> org.jfree.data.time.TimeSeries.add : r7 = (org.jfree.data.time.TimeSeriesDataItem) $r6
org.jfree.data.time.TimeSeries.add : r7 = (org.jfree.data.time.TimeSeriesDataItem) $r6 >>>>>>>> org.jfree.data.time.TimeSeries.add : $r8 = virtualinvoke r7.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>()
org.jfree.data.time.TimeSeries.add : $r8 = virtualinvoke r7.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>() >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.getPeriod : $r1 = r0.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod period>
org.jfree.data.time.TimeSeriesDataItem.getPeriod : $r1 = r0.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod period> >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.getPeriod : return $r1
org.jfree.data.time.TimeSeriesDataItem.getPeriod : return $r1 >>>>>>>> org.jfree.data.time.TimeSeries.add : r2 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>()
org.jfree.data.time.TimeSeries.add : r2 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.jfree.data.time.TimeSeries.add : $r9 = r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass>
org.jfree.data.time.TimeSeries.add : $r9 = r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass> >>>>>>>> org.jfree.data.time.TimeSeries.add : if $r9 != null
org.jfree.data.time.TimeSeries.add : if $r9 != null >>>>>>>> org.jfree.data.time.TimeSeries.add : $r10 = r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass>
org.jfree.data.time.TimeSeries.add : $r10 = r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass> >>>>>>>> org.jfree.data.time.TimeSeries.add : $z1 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(r2)
org.jfree.data.time.TimeSeries.add : $z1 = virtualinvoke $r10.<java.lang.Object: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.jfree.data.time.TimeSeries.add : if $z1 != 0
org.jfree.data.time.TimeSeries.add : if $z1 != 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : z2 = 0
org.jfree.data.time.TimeSeries.add : z2 = 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : i0 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.add : i0 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>() >>>>>>>> org.jfree.data.time.TimeSeries.getItemCount : $r1 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.getItemCount : $r1 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.getItemCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.jfree.data.time.TimeSeries.getItemCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.jfree.data.time.TimeSeries.getItemCount : return $i0
org.jfree.data.time.TimeSeries.getItemCount : return $i0 >>>>>>>> org.jfree.data.time.TimeSeries.add : if i0 != 0
org.jfree.data.time.TimeSeries.add : if i0 != 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : $r25 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.add : $r25 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.add : interfaceinvoke $r25.<java.util.List: boolean add(java.lang.Object)>(r7)
org.jfree.data.time.TimeSeries.add : interfaceinvoke $r25.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.jfree.data.time.TimeSeries.add : z4 = 1
org.jfree.data.time.TimeSeries.add : z4 = 1 >>>>>>>> org.jfree.data.time.TimeSeries.add : goto [?= (branch)]
org.jfree.data.time.TimeSeries.add : goto [?= (branch)] >>>>>>>> org.jfree.data.time.TimeSeries.add : if z4 == 0
org.jfree.data.time.TimeSeries.add : if z4 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : specialinvoke r0.<org.jfree.data.time.TimeSeries: void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)>(r7)
org.jfree.data.time.TimeSeries.add : specialinvoke r0.<org.jfree.data.time.TimeSeries: void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)>(r7) >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r2 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number getValue()>()
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r2 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number getValue()>() >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.getValue : $r1 = r0.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number value>
org.jfree.data.time.TimeSeriesDataItem.getValue : $r1 = r0.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number value> >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.getValue : return $r1
org.jfree.data.time.TimeSeriesDataItem.getValue : return $r1 >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $r3 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number getValue()>()
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $r3 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number getValue()>() >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : if $r3 == null
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : if $r3 == null >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : d0 = virtualinvoke r2.<java.lang.Number: double doubleValue()>()
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : d0 = virtualinvoke r2.<java.lang.Number: double doubleValue()>() >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d1 = r0.<org.jfree.data.time.TimeSeries: double minY>
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d1 = r0.<org.jfree.data.time.TimeSeries: double minY> >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d2 = specialinvoke r0.<org.jfree.data.time.TimeSeries: double minIgnoreNaN(double,double)>($d1, d0)
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d2 = specialinvoke r0.<org.jfree.data.time.TimeSeries: double minIgnoreNaN(double,double)>($d1, d0) >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0)
org.jfree.data.time.TimeSeries.minIgnoreNaN : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0) >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : if $z0 == 0
org.jfree.data.time.TimeSeries.minIgnoreNaN : if $z0 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : return d1
org.jfree.data.time.TimeSeries.minIgnoreNaN : return d1 >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r0.<org.jfree.data.time.TimeSeries: double minY> = $d2
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r0.<org.jfree.data.time.TimeSeries: double minY> = $d2 >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d3 = r0.<org.jfree.data.time.TimeSeries: double maxY>
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d3 = r0.<org.jfree.data.time.TimeSeries: double maxY> >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d4 = specialinvoke r0.<org.jfree.data.time.TimeSeries: double maxIgnoreNaN(double,double)>($d3, d0)
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d4 = specialinvoke r0.<org.jfree.data.time.TimeSeries: double maxIgnoreNaN(double,double)>($d3, d0) >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0)
org.jfree.data.time.TimeSeries.maxIgnoreNaN : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0) >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : if $z0 == 0
org.jfree.data.time.TimeSeries.maxIgnoreNaN : if $z0 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : return d1
org.jfree.data.time.TimeSeries.maxIgnoreNaN : return d1 >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r0.<org.jfree.data.time.TimeSeries: double maxY> = $d4
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r0.<org.jfree.data.time.TimeSeries: double maxY> = $d4 >>>>>>>> org.jfree.data.time.TimeSeries.add : $i7 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.add : $i7 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>() >>>>>>>> org.jfree.data.time.TimeSeries.add : $i8 = r0.<org.jfree.data.time.TimeSeries: int maximumItemCount>
org.jfree.data.time.TimeSeries.add : $i8 = r0.<org.jfree.data.time.TimeSeries: int maximumItemCount> >>>>>>>> org.jfree.data.time.TimeSeries.add : if $i7 <= $i8
org.jfree.data.time.TimeSeries.add : if $i7 <= $i8 >>>>>>>> org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void removeAgedItems(boolean)>(0)
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void removeAgedItems(boolean)>(0) >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $i1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.removeAgedItems : $i1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>() >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : if $i1 <= 1
org.jfree.data.time.TimeSeries.removeAgedItems : if $i1 <= 1 >>>>>>>> org.jfree.data.time.TimeSeries.add : if z0 == 0
org.jfree.data.time.TimeSeries.add : if z0 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void fireSeriesChanged()>()
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void fireSeriesChanged()>() >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : $z0 = r0.<org.jfree.data.general.Series: boolean notify>
org.jfree.data.general.Series.fireSeriesChanged : $z0 = r0.<org.jfree.data.general.Series: boolean notify> >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : if $z0 == 0
org.jfree.data.general.Series.fireSeriesChanged : if $z0 == 0 >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : $r1 = new org.jfree.data.general.SeriesChangeEvent
org.jfree.data.general.Series.fireSeriesChanged : $r1 = new org.jfree.data.general.SeriesChangeEvent >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : specialinvoke $r1.<org.jfree.data.general.SeriesChangeEvent: void <init>(java.lang.Object)>(r0)
org.jfree.data.general.Series.fireSeriesChanged : specialinvoke $r1.<org.jfree.data.general.SeriesChangeEvent: void <init>(java.lang.Object)>(r0) >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : virtualinvoke r0.<org.jfree.data.general.Series: void notifyListeners(org.jfree.data.general.SeriesChangeEvent)>($r1)
org.jfree.data.general.Series.fireSeriesChanged : virtualinvoke r0.<org.jfree.data.general.Series: void notifyListeners(org.jfree.data.general.SeriesChangeEvent)>($r1) >>>>>>>> org.jfree.data.general.Series.notifyListeners : $r3 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners>
org.jfree.data.general.Series.notifyListeners : $r3 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners> >>>>>>>> org.jfree.data.general.Series.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.data.general.Series.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.data.general.Series.notifyListeners : $i1 = lengthof r2
org.jfree.data.general.Series.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.data.general.Series.notifyListeners : i0 = $i1 - 2
org.jfree.data.general.Series.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.data.general.Series.notifyListeners : if i0 < 0
org.jfree.data.general.Series.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : $i2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.add : $i2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>() >>>>>>>> org.jfree.data.time.TimeSeries.add : $i3 = $i2 - 1
org.jfree.data.time.TimeSeries.add : $i3 = $i2 - 1 >>>>>>>> org.jfree.data.time.TimeSeries.add : r4 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.RegularTimePeriod getTimePeriod(int)>($i3)
org.jfree.data.time.TimeSeries.add : r4 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.RegularTimePeriod getTimePeriod(int)>($i3) >>>>>>>> org.jfree.data.time.TimeSeries.getTimePeriod : $r1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.TimeSeriesDataItem getRawDataItem(int)>(i0)
org.jfree.data.time.TimeSeries.getTimePeriod : $r1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.TimeSeriesDataItem getRawDataItem(int)>(i0) >>>>>>>> org.jfree.data.time.TimeSeries.getRawDataItem : $r1 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.getRawDataItem : $r1 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.getRawDataItem : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0)
org.jfree.data.time.TimeSeries.getRawDataItem : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.data.time.TimeSeries.getRawDataItem : $r3 = (org.jfree.data.time.TimeSeriesDataItem) $r2
org.jfree.data.time.TimeSeries.getRawDataItem : $r3 = (org.jfree.data.time.TimeSeriesDataItem) $r2 >>>>>>>> org.jfree.data.time.TimeSeries.getRawDataItem : return $r3
org.jfree.data.time.TimeSeries.getRawDataItem : return $r3 >>>>>>>> org.jfree.data.time.TimeSeries.getTimePeriod : $r2 = virtualinvoke $r1.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>()
org.jfree.data.time.TimeSeries.getTimePeriod : $r2 = virtualinvoke $r1.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>() >>>>>>>> org.jfree.data.time.TimeSeries.getTimePeriod : return $r2
org.jfree.data.time.TimeSeries.getTimePeriod : return $r2 >>>>>>>> org.jfree.data.time.TimeSeries.add : $r26 = virtualinvoke r7.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>()
org.jfree.data.time.TimeSeries.add : $r26 = virtualinvoke r7.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>() >>>>>>>> org.jfree.data.time.TimeSeries.add : $i4 = virtualinvoke $r26.<org.jfree.data.time.RegularTimePeriod: int compareTo(java.lang.Object)>(r4)
org.jfree.data.time.TimeSeries.add : $i4 = virtualinvoke $r26.<org.jfree.data.time.RegularTimePeriod: int compareTo(java.lang.Object)>(r4) >>>>>>>> org.jfree.data.time.Year.compareTo : $z0 = r1 instanceof org.jfree.data.time.Year
org.jfree.data.time.Year.compareTo : $z0 = r1 instanceof org.jfree.data.time.Year >>>>>>>> org.jfree.data.time.Year.compareTo : if $z0 == 0
org.jfree.data.time.Year.compareTo : if $z0 == 0 >>>>>>>> org.jfree.data.time.Year.compareTo : r2 = (org.jfree.data.time.Year) r1
org.jfree.data.time.Year.compareTo : r2 = (org.jfree.data.time.Year) r1 >>>>>>>> org.jfree.data.time.Year.compareTo : $s1 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.compareTo : $s1 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.compareTo : $i2 = virtualinvoke r2.<org.jfree.data.time.Year: int getYear()>()
org.jfree.data.time.Year.compareTo : $i2 = virtualinvoke r2.<org.jfree.data.time.Year: int getYear()>() >>>>>>>> org.jfree.data.time.Year.getYear : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getYear : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.getYear : return $s0
org.jfree.data.time.Year.getYear : return $s0 >>>>>>>> org.jfree.data.time.Year.compareTo : i0 = $s1 - $i2
org.jfree.data.time.Year.compareTo : i0 = $s1 - $i2 >>>>>>>> org.jfree.data.time.Year.compareTo : goto [?= return i0]
org.jfree.data.time.Year.compareTo : goto [?= return i0] >>>>>>>> org.jfree.data.time.Year.compareTo : return i0
org.jfree.data.time.Year.compareTo : return i0 >>>>>>>> org.jfree.data.time.TimeSeries.add : if $i4 <= 0
org.jfree.data.time.TimeSeries.add : if $i4 <= 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : $r27 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.add : $r27 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.add : interfaceinvoke $r27.<java.util.List: boolean add(java.lang.Object)>(r7)
org.jfree.data.time.TimeSeries.add : interfaceinvoke $r27.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1)
org.jfree.data.time.TimeSeries.minIgnoreNaN : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1) >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : if $z1 == 0
org.jfree.data.time.TimeSeries.minIgnoreNaN : if $z1 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : $d2 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1)
org.jfree.data.time.TimeSeries.minIgnoreNaN : $d2 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1) >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : return $d2
org.jfree.data.time.TimeSeries.minIgnoreNaN : return $d2 >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1)
org.jfree.data.time.TimeSeries.maxIgnoreNaN : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1) >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : if $z1 == 0
org.jfree.data.time.TimeSeries.maxIgnoreNaN : if $z1 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : $d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1)
org.jfree.data.time.TimeSeries.maxIgnoreNaN : $d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1) >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : return $d2
org.jfree.data.time.TimeSeries.maxIgnoreNaN : return $d2 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $i2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.removeAgedItems : $i2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>() >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $i3 = $i2 - 1
org.jfree.data.time.TimeSeries.removeAgedItems : $i3 = $i2 - 1 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.RegularTimePeriod getTimePeriod(int)>($i3)
org.jfree.data.time.TimeSeries.removeAgedItems : $r1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.RegularTimePeriod getTimePeriod(int)>($i3) >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : l0 = virtualinvoke $r1.<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>()
org.jfree.data.time.TimeSeries.removeAgedItems : l0 = virtualinvoke $r1.<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>() >>>>>>>> org.jfree.data.time.Year.getSerialIndex : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getSerialIndex : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.getSerialIndex : $l1 = (long) $s0
org.jfree.data.time.Year.getSerialIndex : $l1 = (long) $s0 >>>>>>>> org.jfree.data.time.Year.getSerialIndex : return $l1
org.jfree.data.time.Year.getSerialIndex : return $l1 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : z1 = 0
org.jfree.data.time.TimeSeries.removeAgedItems : z1 = 0 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.RegularTimePeriod getTimePeriod(int)>(0)
org.jfree.data.time.TimeSeries.removeAgedItems : $r2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.RegularTimePeriod getTimePeriod(int)>(0) >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $l4 = virtualinvoke $r2.<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>()
org.jfree.data.time.TimeSeries.removeAgedItems : $l4 = virtualinvoke $r2.<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>() >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $l5 = l0 - $l4
org.jfree.data.time.TimeSeries.removeAgedItems : $l5 = l0 - $l4 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $l6 = r0.<org.jfree.data.time.TimeSeries: long maximumItemAge>
org.jfree.data.time.TimeSeries.removeAgedItems : $l6 = r0.<org.jfree.data.time.TimeSeries: long maximumItemAge> >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $b7 = $l5 cmp $l6
org.jfree.data.time.TimeSeries.removeAgedItems : $b7 = $l5 cmp $l6 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : if $b7 <= 0
org.jfree.data.time.TimeSeries.removeAgedItems : if $b7 <= 0 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : if z1 == 0
org.jfree.data.time.TimeSeries.removeAgedItems : if z1 == 0 >>>>>>>> org.jfree.data.general.Series.addChangeListener : $r2 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners>
org.jfree.data.general.Series.addChangeListener : $r2 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners> >>>>>>>> org.jfree.data.general.Series.addChangeListener : virtualinvoke $r2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "org/jfree/data/general/SeriesChangeListener", r1)
org.jfree.data.general.Series.addChangeListener : virtualinvoke $r2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "org/jfree/data/general/SeriesChangeListener", r1) >>>>>>>> org.jfree.data.time.TimeSeries.getMaximumItemAge : $l0 = r0.<org.jfree.data.time.TimeSeries: long maximumItemAge>
org.jfree.data.time.TimeSeries.getMaximumItemAge : $l0 = r0.<org.jfree.data.time.TimeSeries: long maximumItemAge> >>>>>>>> org.jfree.data.time.TimeSeries.getMaximumItemAge : return $l0
org.jfree.data.time.TimeSeries.getMaximumItemAge : return $l0 >>>>>>>> org.jfree.data.time.TimeSeries.getMaximumItemCount : $i0 = r0.<org.jfree.data.time.TimeSeries: int maximumItemCount>
org.jfree.data.time.TimeSeries.getMaximumItemCount : $i0 = r0.<org.jfree.data.time.TimeSeries: int maximumItemCount> >>>>>>>> org.jfree.data.time.TimeSeries.getMaximumItemCount : return $i0
org.jfree.data.time.TimeSeries.getMaximumItemCount : return $i0 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r3 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.removeAgedItems : $r3 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $z1 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>()
org.jfree.data.time.TimeSeries.removeAgedItems : $z1 = interfaceinvoke $r3.<java.util.List: boolean isEmpty()>() >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : if $z1 == 0
org.jfree.data.time.TimeSeries.removeAgedItems : if $z1 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.RegularTimePeriod,double,boolean)>(r1, d0, 1)
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.RegularTimePeriod,double,boolean)>(r1, d0, 1) >>>>>>>> org.jfree.data.time.TimeSeries.add : $r2 = new org.jfree.data.time.TimeSeriesDataItem
org.jfree.data.time.TimeSeries.add : $r2 = new org.jfree.data.time.TimeSeriesDataItem >>>>>>>> org.jfree.data.time.TimeSeries.add : specialinvoke $r2.<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,double)>(r1, d0)
org.jfree.data.time.TimeSeries.add : specialinvoke $r2.<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,double)>(r1, d0) >>>>>>>> org.jfree.data.time.TimeSeries.add : r3 = $r2
org.jfree.data.time.TimeSeries.add : r3 = $r2 >>>>>>>> org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem,boolean)>(r3, z0)
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem,boolean)>(r3, z0) >>>>>>>> org.jfree.data.general.Series.notifyListeners : $r4 = r2[i0]
org.jfree.data.general.Series.notifyListeners : $r4 = r2[i0] >>>>>>>> org.jfree.data.general.Series.notifyListeners : if $r4 != class "org/jfree/data/general/SeriesChangeListener"
org.jfree.data.general.Series.notifyListeners : if $r4 != class "org/jfree/data/general/SeriesChangeListener" >>>>>>>> org.jfree.data.general.Series.notifyListeners : $i2 = i0 + 1
org.jfree.data.general.Series.notifyListeners : $i2 = i0 + 1 >>>>>>>> org.jfree.data.general.Series.notifyListeners : $r5 = r2[$i2]
org.jfree.data.general.Series.notifyListeners : $r5 = r2[$i2] >>>>>>>> org.jfree.data.general.Series.notifyListeners : $r6 = (org.jfree.data.general.SeriesChangeListener) $r5
org.jfree.data.general.Series.notifyListeners : $r6 = (org.jfree.data.general.SeriesChangeListener) $r5 >>>>>>>> org.jfree.data.general.Series.notifyListeners : interfaceinvoke $r6.<org.jfree.data.general.SeriesChangeListener: void seriesChanged(org.jfree.data.general.SeriesChangeEvent)>(r1)
org.jfree.data.general.Series.notifyListeners : interfaceinvoke $r6.<org.jfree.data.general.SeriesChangeListener: void seriesChanged(org.jfree.data.general.SeriesChangeEvent)>(r1) >>>>>>>> org.jfree.data.general.Series.notifyListeners : i0 = i0 + -2
org.jfree.data.general.Series.notifyListeners : i0 = i0 + -2 >>>>>>>> org.jfree.data.general.Series.notifyListeners : goto [?= (branch)]
org.jfree.data.general.Series.notifyListeners : goto [?= (branch)] >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemAge : $b1 = l0 cmp 0L
org.jfree.data.time.TimeSeries.setMaximumItemAge : $b1 = l0 cmp 0L >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemAge : if $b1 >= 0
org.jfree.data.time.TimeSeries.setMaximumItemAge : if $b1 >= 0 >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemAge : r0.<org.jfree.data.time.TimeSeries: long maximumItemAge> = l0
org.jfree.data.time.TimeSeries.setMaximumItemAge : r0.<org.jfree.data.time.TimeSeries: long maximumItemAge> = l0 >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemAge : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void removeAgedItems(boolean)>(1)
org.jfree.data.time.TimeSeries.setMaximumItemAge : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void removeAgedItems(boolean)>(1) >>>>>>>> org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond : l0 = virtualinvoke r0.<org.jfree.data.time.RegularTimePeriod: long getFirstMillisecond()>()
org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond : l0 = virtualinvoke r0.<org.jfree.data.time.RegularTimePeriod: long getFirstMillisecond()>() >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : $l0 = r0.<org.jfree.data.time.Year: long firstMillisecond>
org.jfree.data.time.Year.getFirstMillisecond : $l0 = r0.<org.jfree.data.time.Year: long firstMillisecond> >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : return $l0
org.jfree.data.time.Year.getFirstMillisecond : return $l0 >>>>>>>> org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond : l1 = virtualinvoke r0.<org.jfree.data.time.RegularTimePeriod: long getLastMillisecond()>()
org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond : l1 = virtualinvoke r0.<org.jfree.data.time.RegularTimePeriod: long getLastMillisecond()>() >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : $l0 = r0.<org.jfree.data.time.Year: long lastMillisecond>
org.jfree.data.time.Year.getLastMillisecond : $l0 = r0.<org.jfree.data.time.Year: long lastMillisecond> >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : return $l0
org.jfree.data.time.Year.getLastMillisecond : return $l0 >>>>>>>> org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond : $l2 = l1 - l0
org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond : $l2 = l1 - l0 >>>>>>>> org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond : $l3 = $l2 / 2L
org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond : $l3 = $l2 / 2L >>>>>>>> org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond : $l4 = l0 + $l3
org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond : $l4 = l0 + $l3 >>>>>>>> org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond : return $l4
org.jfree.data.time.RegularTimePeriod.getMiddleMillisecond : return $l4 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : l1 = 9223372036854775807L
org.jfree.data.time.TimeSeries.removeAgedItems : l1 = 9223372036854775807L >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r4 = class "org/jfree/data/time/RegularTimePeriod"
org.jfree.data.time.TimeSeries.removeAgedItems : $r4 = class "org/jfree/data/time/RegularTimePeriod" >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r5 = newarray (java.lang.Class)[3]
org.jfree.data.time.TimeSeries.removeAgedItems : $r5 = newarray (java.lang.Class)[3] >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r5[0] = class "java/lang/Class"
org.jfree.data.time.TimeSeries.removeAgedItems : $r5[0] = class "java/lang/Class" >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r5[1] = class "java/util/Date"
org.jfree.data.time.TimeSeries.removeAgedItems : $r5[1] = class "java/util/Date" >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r5[2] = class "java/util/TimeZone"
org.jfree.data.time.TimeSeries.removeAgedItems : $r5[2] = class "java/util/TimeZone" >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : r1 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("createInstance", $r5)
org.jfree.data.time.TimeSeries.removeAgedItems : r1 = virtualinvoke $r4.<java.lang.Class: java.lang.reflect.Method getDeclaredMethod(java.lang.String,java.lang.Class[])>("createInstance", $r5) >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r6 = r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass>
org.jfree.data.time.TimeSeries.removeAgedItems : $r6 = r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass> >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r7 = newarray (java.lang.Object)[3]
org.jfree.data.time.TimeSeries.removeAgedItems : $r7 = newarray (java.lang.Object)[3] >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r8 = r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass>
org.jfree.data.time.TimeSeries.removeAgedItems : $r8 = r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass> >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r7[0] = $r8
org.jfree.data.time.TimeSeries.removeAgedItems : $r7[0] = $r8 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r9 = new java.util.Date
org.jfree.data.time.TimeSeries.removeAgedItems : $r9 = new java.util.Date >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : specialinvoke $r9.<java.util.Date: void <init>(long)>(l0)
org.jfree.data.time.TimeSeries.removeAgedItems : specialinvoke $r9.<java.util.Date: void <init>(long)>(l0) >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r7[1] = $r9
org.jfree.data.time.TimeSeries.removeAgedItems : $r7[1] = $r9 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r10 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>()
org.jfree.data.time.TimeSeries.removeAgedItems : $r10 = staticinvoke <java.util.TimeZone: java.util.TimeZone getDefault()>() >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r7[2] = $r10
org.jfree.data.time.TimeSeries.removeAgedItems : $r7[2] = $r10 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r11 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r7)
org.jfree.data.time.TimeSeries.removeAgedItems : $r11 = virtualinvoke r1.<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>($r6, $r7) >>>>>>>> org.jfree.data.time.RegularTimePeriod.createInstance : r3 = null
org.jfree.data.time.RegularTimePeriod.createInstance : r3 = null >>>>>>>> org.jfree.data.time.RegularTimePeriod.createInstance : $r5 = newarray (java.lang.Class)[2]
org.jfree.data.time.RegularTimePeriod.createInstance : $r5 = newarray (java.lang.Class)[2] >>>>>>>> org.jfree.data.time.RegularTimePeriod.createInstance : $r5[0] = class "java/util/Date"
org.jfree.data.time.RegularTimePeriod.createInstance : $r5[0] = class "java/util/Date" >>>>>>>> org.jfree.data.time.RegularTimePeriod.createInstance : $r5[1] = class "java/util/TimeZone"
org.jfree.data.time.RegularTimePeriod.createInstance : $r5[1] = class "java/util/TimeZone" >>>>>>>> org.jfree.data.time.RegularTimePeriod.createInstance : r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r5)
org.jfree.data.time.RegularTimePeriod.createInstance : r4 = virtualinvoke r0.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r5) >>>>>>>> org.jfree.data.time.RegularTimePeriod.createInstance : $r6 = newarray (java.lang.Object)[2]
org.jfree.data.time.RegularTimePeriod.createInstance : $r6 = newarray (java.lang.Object)[2] >>>>>>>> org.jfree.data.time.RegularTimePeriod.createInstance : $r6[0] = r1
org.jfree.data.time.RegularTimePeriod.createInstance : $r6[0] = r1 >>>>>>>> org.jfree.data.time.RegularTimePeriod.createInstance : $r6[1] = r2
org.jfree.data.time.RegularTimePeriod.createInstance : $r6[1] = r2 >>>>>>>> org.jfree.data.time.RegularTimePeriod.createInstance : $r7 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6)
org.jfree.data.time.RegularTimePeriod.createInstance : $r7 = virtualinvoke r4.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r6) >>>>>>>> org.jfree.data.time.RegularTimePeriod.createInstance : r3 = (org.jfree.data.time.RegularTimePeriod) $r7
org.jfree.data.time.RegularTimePeriod.createInstance : r3 = (org.jfree.data.time.RegularTimePeriod) $r7 >>>>>>>> org.jfree.data.time.RegularTimePeriod.createInstance : goto [?= return r3]
org.jfree.data.time.RegularTimePeriod.createInstance : goto [?= return r3] >>>>>>>> org.jfree.data.time.RegularTimePeriod.createInstance : return r3
org.jfree.data.time.RegularTimePeriod.createInstance : return r3 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : r2 = (org.jfree.data.time.RegularTimePeriod) $r11
org.jfree.data.time.TimeSeries.removeAgedItems : r2 = (org.jfree.data.time.RegularTimePeriod) $r11 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : l1 = virtualinvoke r2.<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>()
org.jfree.data.time.TimeSeries.removeAgedItems : l1 = virtualinvoke r2.<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>() >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : goto [?= z2 = 0]
org.jfree.data.time.TimeSeries.removeAgedItems : goto [?= z2 = 0] >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : z2 = 0
org.jfree.data.time.TimeSeries.removeAgedItems : z2 = 0 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : if $i2 <= 0
org.jfree.data.time.TimeSeries.removeAgedItems : if $i2 <= 0 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r18 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.RegularTimePeriod getTimePeriod(int)>(0)
org.jfree.data.time.TimeSeries.removeAgedItems : $r18 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.RegularTimePeriod getTimePeriod(int)>(0) >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $l3 = virtualinvoke $r18.<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>()
org.jfree.data.time.TimeSeries.removeAgedItems : $l3 = virtualinvoke $r18.<org.jfree.data.time.RegularTimePeriod: long getSerialIndex()>() >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $l4 = l1 - $l3
org.jfree.data.time.TimeSeries.removeAgedItems : $l4 = l1 - $l3 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $l5 = r0.<org.jfree.data.time.TimeSeries: long maximumItemAge>
org.jfree.data.time.TimeSeries.removeAgedItems : $l5 = r0.<org.jfree.data.time.TimeSeries: long maximumItemAge> >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $b6 = $l4 cmp $l5
org.jfree.data.time.TimeSeries.removeAgedItems : $b6 = $l4 cmp $l5 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : if $b6 <= 0
org.jfree.data.time.TimeSeries.removeAgedItems : if $b6 <= 0 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : if z2 == 0
org.jfree.data.time.TimeSeries.removeAgedItems : if z2 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $r19 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.removeAgedItems : $r19 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : interfaceinvoke $r19.<java.util.List: java.lang.Object remove(int)>(0)
org.jfree.data.time.TimeSeries.removeAgedItems : interfaceinvoke $r19.<java.util.List: java.lang.Object remove(int)>(0) >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : z2 = 1
org.jfree.data.time.TimeSeries.removeAgedItems : z2 = 1 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : goto [?= $i2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()]
org.jfree.data.time.TimeSeries.removeAgedItems : goto [?= $i2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()] >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : specialinvoke r0.<org.jfree.data.time.TimeSeries: void findBoundsByIteration()>()
org.jfree.data.time.TimeSeries.removeAgedItems : specialinvoke r0.<org.jfree.data.time.TimeSeries: void findBoundsByIteration()>() >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : r0.<org.jfree.data.time.TimeSeries: double minY> = #NaN
org.jfree.data.time.TimeSeries.findBoundsByIteration : r0.<org.jfree.data.time.TimeSeries: double minY> = #NaN >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : r0.<org.jfree.data.time.TimeSeries: double maxY> = #NaN
org.jfree.data.time.TimeSeries.findBoundsByIteration : r0.<org.jfree.data.time.TimeSeries: double maxY> = #NaN >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : $r3 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.findBoundsByIteration : $r3 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>()
org.jfree.data.time.TimeSeries.findBoundsByIteration : r1 = interfaceinvoke $r3.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.jfree.data.time.TimeSeries.findBoundsByIteration : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : if $z0 == 0
org.jfree.data.time.TimeSeries.findBoundsByIteration : if $z0 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : if z0 == 0
org.jfree.data.time.TimeSeries.removeAgedItems : if z0 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void fireSeriesChanged()>()
org.jfree.data.time.TimeSeries.removeAgedItems : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void fireSeriesChanged()>() >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.jfree.data.time.TimeSeries.findBoundsByIteration : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : r2 = (org.jfree.data.time.TimeSeriesDataItem) $r4
org.jfree.data.time.TimeSeries.findBoundsByIteration : r2 = (org.jfree.data.time.TimeSeriesDataItem) $r4 >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : specialinvoke r0.<org.jfree.data.time.TimeSeries: void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)>(r2)
org.jfree.data.time.TimeSeries.findBoundsByIteration : specialinvoke r0.<org.jfree.data.time.TimeSeries: void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)>(r2) >>>>>>>> org.jfree.data.time.TimeSeries.findBoundsByIteration : goto [?= $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()]
