org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r1 = null >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $r4 = r0.<org.jfree.data.time.TimeSeriesCollection: java.util.List data>
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $r4 = r0.<org.jfree.data.time.TimeSeriesCollection: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>()
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r2 = interfaceinvoke $r4.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : if $z1 == 0
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : if $z1 == 0 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : return r1
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : return r1 >>>>>>>> org.jfree.chart.util.ParamChecks.nullNotPermitted : if r0 != null
org.jfree.chart.util.ParamChecks.nullNotPermitted : if r0 != null >>>>>>>> org.jfree.data.time.TimeSeriesCollection.addSeries : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "series")
org.jfree.data.time.TimeSeriesCollection.addSeries : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "series") >>>>>>>> org.jfree.data.time.TimeSeriesCollection.addSeries : $r2 = r0.<org.jfree.data.time.TimeSeriesCollection: java.util.List data>
org.jfree.data.time.TimeSeriesCollection.addSeries : $r2 = r0.<org.jfree.data.time.TimeSeriesCollection: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeriesCollection.addSeries : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1)
org.jfree.data.time.TimeSeriesCollection.addSeries : interfaceinvoke $r2.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.jfree.data.time.TimeSeriesCollection.addSeries : virtualinvoke r1.<org.jfree.data.time.TimeSeries: void addChangeListener(org.jfree.data.general.SeriesChangeListener)>(r0)
org.jfree.data.time.TimeSeriesCollection.addSeries : virtualinvoke r1.<org.jfree.data.time.TimeSeries: void addChangeListener(org.jfree.data.general.SeriesChangeListener)>(r0) >>>>>>>> org.jfree.data.general.Series.addChangeListener : $r2 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners>
org.jfree.data.general.Series.addChangeListener : $r2 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners> >>>>>>>> org.jfree.data.general.Series.addChangeListener : virtualinvoke $r2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "org/jfree/data/general/SeriesChangeListener", r1)
org.jfree.data.general.Series.addChangeListener : virtualinvoke $r2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "org/jfree/data/general/SeriesChangeListener", r1) >>>>>>>> org.jfree.data.time.TimeSeriesCollection.addSeries : virtualinvoke r0.<org.jfree.data.time.TimeSeriesCollection: void fireDatasetChanged()>()
org.jfree.data.time.TimeSeriesCollection.addSeries : virtualinvoke r0.<org.jfree.data.time.TimeSeriesCollection: void fireDatasetChanged()>() >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : $r1 = new org.jfree.data.general.DatasetChangeEvent
org.jfree.data.general.AbstractDataset.fireDatasetChanged : $r1 = new org.jfree.data.general.DatasetChangeEvent >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : specialinvoke $r1.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, r0)
org.jfree.data.general.AbstractDataset.fireDatasetChanged : specialinvoke $r1.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, r0) >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : virtualinvoke r0.<org.jfree.data.general.AbstractDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>($r1)
org.jfree.data.general.AbstractDataset.fireDatasetChanged : virtualinvoke r0.<org.jfree.data.general.AbstractDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>($r1) >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : $r3 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList>
org.jfree.data.general.AbstractDataset.notifyListeners : $r3 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.data.general.AbstractDataset.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : $i1 = lengthof r2
org.jfree.data.general.AbstractDataset.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : i0 = $i1 - 2
org.jfree.data.general.AbstractDataset.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : if i0 < 0
org.jfree.data.general.AbstractDataset.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>()
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $r5 = interfaceinvoke r2.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r3 = (org.jfree.data.time.TimeSeries) $r5
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r3 = (org.jfree.data.time.TimeSeries) $r5 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : n0 = null
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : n0 = null >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $r6 = new org.jfree.data.Range
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $r6 = new org.jfree.data.Range >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $d0 = virtualinvoke r3.<org.jfree.data.time.TimeSeries: double getMinY()>()
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $d0 = virtualinvoke r3.<org.jfree.data.time.TimeSeries: double getMinY()>() >>>>>>>> org.jfree.data.time.TimeSeries.getMinY : $d0 = r0.<org.jfree.data.time.TimeSeries: double minY>
org.jfree.data.time.TimeSeries.getMinY : $d0 = r0.<org.jfree.data.time.TimeSeries: double minY> >>>>>>>> org.jfree.data.time.TimeSeries.getMinY : return $d0
org.jfree.data.time.TimeSeries.getMinY : return $d0 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $d1 = virtualinvoke r3.<org.jfree.data.time.TimeSeries: double getMaxY()>()
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : $d1 = virtualinvoke r3.<org.jfree.data.time.TimeSeries: double getMaxY()>() >>>>>>>> org.jfree.data.time.TimeSeries.getMaxY : $d0 = r0.<org.jfree.data.time.TimeSeries: double maxY>
org.jfree.data.time.TimeSeries.getMaxY : $d0 = r0.<org.jfree.data.time.TimeSeries: double maxY> >>>>>>>> org.jfree.data.time.TimeSeries.getMaxY : return $d0
org.jfree.data.time.TimeSeries.getMaxY : return $d0 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : specialinvoke $r6.<org.jfree.data.Range: void <init>(double,double)>($d0, $d1)
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : specialinvoke $r6.<org.jfree.data.Range: void <init>(double,double)>($d0, $d1) >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r7 = $r6
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r7 = $r6 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r1 = staticinvoke <org.jfree.data.Range: org.jfree.data.Range combineIgnoringNaN(org.jfree.data.Range,org.jfree.data.Range)>(r1, r7)
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : r1 = staticinvoke <org.jfree.data.Range: org.jfree.data.Range combineIgnoringNaN(org.jfree.data.Range,org.jfree.data.Range)>(r1, r7) >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : if r0 != null
org.jfree.data.Range.combineIgnoringNaN : if r0 != null >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : return r1
org.jfree.data.Range.combineIgnoringNaN : return r1 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getRangeBounds : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()]
org.jfree.data.time.TimeSeriesCollection.getRangeBounds : goto [?= $z1 = interfaceinvoke r2.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.jfree.data.Range.getLowerBound : $d0 = r0.<org.jfree.data.Range: double lower>
org.jfree.data.Range.getLowerBound : $d0 = r0.<org.jfree.data.Range: double lower> >>>>>>>> org.jfree.data.Range.getLowerBound : return $d0
org.jfree.data.Range.getLowerBound : return $d0 >>>>>>>> org.jfree.data.Range.getUpperBound : $d0 = r0.<org.jfree.data.Range: double upper>
org.jfree.data.Range.getUpperBound : $d0 = r0.<org.jfree.data.Range: double upper> >>>>>>>> org.jfree.data.Range.getUpperBound : return $d0
org.jfree.data.Range.getUpperBound : return $d0 >>>>>>>> org.jfree.data.time.Year.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Year: long getFirstMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Year.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Year: long getFirstMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getFirstMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 0, 1, 0, 0, 0)
org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 0, 1, 0, 0, 0) >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0)
org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0) >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Year.getFirstMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : return $l1
org.jfree.data.time.Year.getFirstMillisecond : return $l1 >>>>>>>> org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long firstMillisecond> = $l0
org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long firstMillisecond> = $l0 >>>>>>>> org.jfree.data.time.Year.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Year: long getLastMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Year.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Year: long getLastMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getLastMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 11, 31, 23, 59, 59)
org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 11, 31, 23, 59, 59) >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999)
org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999) >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Year.getLastMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : return $l1
org.jfree.data.time.Year.getLastMillisecond : return $l1 >>>>>>>> org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long lastMillisecond> = $l1
org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long lastMillisecond> = $l1 >>>>>>>> org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.RegularTimePeriod,double,boolean)>(r1, d0, 1)
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.RegularTimePeriod,double,boolean)>(r1, d0, 1) >>>>>>>> org.jfree.data.time.TimeSeries.add : $r2 = new org.jfree.data.time.TimeSeriesDataItem
org.jfree.data.time.TimeSeries.add : $r2 = new org.jfree.data.time.TimeSeriesDataItem >>>>>>>> org.jfree.data.time.TimeSeries.add : specialinvoke $r2.<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,double)>(r1, d0)
org.jfree.data.time.TimeSeries.add : specialinvoke $r2.<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,double)>(r1, d0) >>>>>>>> org.jfree.data.time.TimeSeries.add : r3 = $r2
org.jfree.data.time.TimeSeries.add : r3 = $r2 >>>>>>>> org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem,boolean)>(r3, z0)
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem,boolean)>(r3, z0) >>>>>>>> org.jfree.data.time.TimeSeries.add : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "item")
org.jfree.data.time.TimeSeries.add : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "item") >>>>>>>> org.jfree.data.time.TimeSeries.add : $r6 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Object clone()>()
org.jfree.data.time.TimeSeries.add : $r6 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Object clone()>() >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.clone : r1 = null
org.jfree.data.time.TimeSeriesDataItem.clone : r1 = null >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.clone : r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>()
org.jfree.data.time.TimeSeriesDataItem.clone : r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.clone : goto [?= return r1]
org.jfree.data.time.TimeSeriesDataItem.clone : goto [?= return r1] >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.clone : return r1
org.jfree.data.time.TimeSeriesDataItem.clone : return r1 >>>>>>>> org.jfree.data.time.TimeSeries.add : r7 = (org.jfree.data.time.TimeSeriesDataItem) $r6
org.jfree.data.time.TimeSeries.add : r7 = (org.jfree.data.time.TimeSeriesDataItem) $r6 >>>>>>>> org.jfree.data.time.TimeSeries.add : $r8 = virtualinvoke r7.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>()
org.jfree.data.time.TimeSeries.add : $r8 = virtualinvoke r7.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>() >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.getPeriod : $r1 = r0.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod period>
org.jfree.data.time.TimeSeriesDataItem.getPeriod : $r1 = r0.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod period> >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.getPeriod : return $r1
org.jfree.data.time.TimeSeriesDataItem.getPeriod : return $r1 >>>>>>>> org.jfree.data.time.TimeSeries.add : r2 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>()
org.jfree.data.time.TimeSeries.add : r2 = virtualinvoke $r8.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.jfree.data.time.TimeSeries.add : $r9 = r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass>
org.jfree.data.time.TimeSeries.add : $r9 = r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass> >>>>>>>> org.jfree.data.time.TimeSeries.add : if $r9 != null
org.jfree.data.time.TimeSeries.add : if $r9 != null >>>>>>>> org.jfree.data.time.TimeSeries.add : r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass> = r2
org.jfree.data.time.TimeSeries.add : r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass> = r2 >>>>>>>> org.jfree.data.time.TimeSeries.add : goto [?= z2 = 0]
org.jfree.data.time.TimeSeries.add : goto [?= z2 = 0] >>>>>>>> org.jfree.data.time.TimeSeries.add : z2 = 0
org.jfree.data.time.TimeSeries.add : z2 = 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : i0 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.add : i0 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>() >>>>>>>> org.jfree.data.time.TimeSeries.getItemCount : $r1 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.getItemCount : $r1 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.getItemCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.jfree.data.time.TimeSeries.getItemCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.jfree.data.time.TimeSeries.getItemCount : return $i0
org.jfree.data.time.TimeSeries.getItemCount : return $i0 >>>>>>>> org.jfree.data.time.TimeSeries.add : if i0 != 0
org.jfree.data.time.TimeSeries.add : if i0 != 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : $r25 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.add : $r25 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.add : interfaceinvoke $r25.<java.util.List: boolean add(java.lang.Object)>(r7)
org.jfree.data.time.TimeSeries.add : interfaceinvoke $r25.<java.util.List: boolean add(java.lang.Object)>(r7) >>>>>>>> org.jfree.data.time.TimeSeries.add : z4 = 1
org.jfree.data.time.TimeSeries.add : z4 = 1 >>>>>>>> org.jfree.data.time.TimeSeries.add : goto [?= (branch)]
org.jfree.data.time.TimeSeries.add : goto [?= (branch)] >>>>>>>> org.jfree.data.time.TimeSeries.add : if z4 == 0
org.jfree.data.time.TimeSeries.add : if z4 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : specialinvoke r0.<org.jfree.data.time.TimeSeries: void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)>(r7)
org.jfree.data.time.TimeSeries.add : specialinvoke r0.<org.jfree.data.time.TimeSeries: void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)>(r7) >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r2 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number getValue()>()
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r2 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number getValue()>() >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.getValue : $r1 = r0.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number value>
org.jfree.data.time.TimeSeriesDataItem.getValue : $r1 = r0.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number value> >>>>>>>> org.jfree.data.time.TimeSeriesDataItem.getValue : return $r1
org.jfree.data.time.TimeSeriesDataItem.getValue : return $r1 >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $r3 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number getValue()>()
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $r3 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number getValue()>() >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : if $r3 == null
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : if $r3 == null >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : d0 = virtualinvoke r2.<java.lang.Number: double doubleValue()>()
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : d0 = virtualinvoke r2.<java.lang.Number: double doubleValue()>() >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d1 = r0.<org.jfree.data.time.TimeSeries: double minY>
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d1 = r0.<org.jfree.data.time.TimeSeries: double minY> >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d2 = specialinvoke r0.<org.jfree.data.time.TimeSeries: double minIgnoreNaN(double,double)>($d1, d0)
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d2 = specialinvoke r0.<org.jfree.data.time.TimeSeries: double minIgnoreNaN(double,double)>($d1, d0) >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0)
org.jfree.data.time.TimeSeries.minIgnoreNaN : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0) >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : if $z0 == 0
org.jfree.data.time.TimeSeries.minIgnoreNaN : if $z0 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.minIgnoreNaN : return d1
org.jfree.data.time.TimeSeries.minIgnoreNaN : return d1 >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r0.<org.jfree.data.time.TimeSeries: double minY> = $d2
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r0.<org.jfree.data.time.TimeSeries: double minY> = $d2 >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d3 = r0.<org.jfree.data.time.TimeSeries: double maxY>
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d3 = r0.<org.jfree.data.time.TimeSeries: double maxY> >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d4 = specialinvoke r0.<org.jfree.data.time.TimeSeries: double maxIgnoreNaN(double,double)>($d3, d0)
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d4 = specialinvoke r0.<org.jfree.data.time.TimeSeries: double maxIgnoreNaN(double,double)>($d3, d0) >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0)
org.jfree.data.time.TimeSeries.maxIgnoreNaN : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0) >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : if $z0 == 0
org.jfree.data.time.TimeSeries.maxIgnoreNaN : if $z0 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.maxIgnoreNaN : return d1
org.jfree.data.time.TimeSeries.maxIgnoreNaN : return d1 >>>>>>>> org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r0.<org.jfree.data.time.TimeSeries: double maxY> = $d4
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r0.<org.jfree.data.time.TimeSeries: double maxY> = $d4 >>>>>>>> org.jfree.data.time.TimeSeries.add : $i7 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.add : $i7 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>() >>>>>>>> org.jfree.data.time.TimeSeries.add : $i8 = r0.<org.jfree.data.time.TimeSeries: int maximumItemCount>
org.jfree.data.time.TimeSeries.add : $i8 = r0.<org.jfree.data.time.TimeSeries: int maximumItemCount> >>>>>>>> org.jfree.data.time.TimeSeries.add : if $i7 <= $i8
org.jfree.data.time.TimeSeries.add : if $i7 <= $i8 >>>>>>>> org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void removeAgedItems(boolean)>(0)
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void removeAgedItems(boolean)>(0) >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : $i1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.removeAgedItems : $i1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>() >>>>>>>> org.jfree.data.time.TimeSeries.removeAgedItems : if $i1 <= 1
org.jfree.data.time.TimeSeries.removeAgedItems : if $i1 <= 1 >>>>>>>> org.jfree.data.time.TimeSeries.add : if z0 == 0
org.jfree.data.time.TimeSeries.add : if z0 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void fireSeriesChanged()>()
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void fireSeriesChanged()>() >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : $z0 = r0.<org.jfree.data.general.Series: boolean notify>
org.jfree.data.general.Series.fireSeriesChanged : $z0 = r0.<org.jfree.data.general.Series: boolean notify> >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : if $z0 == 0
org.jfree.data.general.Series.fireSeriesChanged : if $z0 == 0 >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : $r1 = new org.jfree.data.general.SeriesChangeEvent
org.jfree.data.general.Series.fireSeriesChanged : $r1 = new org.jfree.data.general.SeriesChangeEvent >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : specialinvoke $r1.<org.jfree.data.general.SeriesChangeEvent: void <init>(java.lang.Object)>(r0)
org.jfree.data.general.Series.fireSeriesChanged : specialinvoke $r1.<org.jfree.data.general.SeriesChangeEvent: void <init>(java.lang.Object)>(r0) >>>>>>>> org.jfree.data.general.Series.fireSeriesChanged : virtualinvoke r0.<org.jfree.data.general.Series: void notifyListeners(org.jfree.data.general.SeriesChangeEvent)>($r1)
org.jfree.data.general.Series.fireSeriesChanged : virtualinvoke r0.<org.jfree.data.general.Series: void notifyListeners(org.jfree.data.general.SeriesChangeEvent)>($r1) >>>>>>>> org.jfree.data.general.Series.notifyListeners : $r3 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners>
org.jfree.data.general.Series.notifyListeners : $r3 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners> >>>>>>>> org.jfree.data.general.Series.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.data.general.Series.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.data.general.Series.notifyListeners : $i1 = lengthof r2
org.jfree.data.general.Series.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.data.general.Series.notifyListeners : i0 = $i1 - 2
org.jfree.data.general.Series.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.data.general.Series.notifyListeners : if i0 < 0
org.jfree.data.general.Series.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.data.general.Series.notifyListeners : $r4 = r2[i0]
org.jfree.data.general.Series.notifyListeners : $r4 = r2[i0] >>>>>>>> org.jfree.data.general.Series.notifyListeners : if $r4 != class "org/jfree/data/general/SeriesChangeListener"
org.jfree.data.general.Series.notifyListeners : if $r4 != class "org/jfree/data/general/SeriesChangeListener" >>>>>>>> org.jfree.data.general.Series.notifyListeners : $i2 = i0 + 1
org.jfree.data.general.Series.notifyListeners : $i2 = i0 + 1 >>>>>>>> org.jfree.data.general.Series.notifyListeners : $r5 = r2[$i2]
org.jfree.data.general.Series.notifyListeners : $r5 = r2[$i2] >>>>>>>> org.jfree.data.general.Series.notifyListeners : $r6 = (org.jfree.data.general.SeriesChangeListener) $r5
org.jfree.data.general.Series.notifyListeners : $r6 = (org.jfree.data.general.SeriesChangeListener) $r5 >>>>>>>> org.jfree.data.general.Series.notifyListeners : interfaceinvoke $r6.<org.jfree.data.general.SeriesChangeListener: void seriesChanged(org.jfree.data.general.SeriesChangeEvent)>(r1)
org.jfree.data.general.Series.notifyListeners : interfaceinvoke $r6.<org.jfree.data.general.SeriesChangeListener: void seriesChanged(org.jfree.data.general.SeriesChangeEvent)>(r1) >>>>>>>> org.jfree.data.general.AbstractSeriesDataset.seriesChanged : virtualinvoke r0.<org.jfree.data.general.AbstractSeriesDataset: void fireDatasetChanged()>()
org.jfree.data.general.AbstractSeriesDataset.seriesChanged : virtualinvoke r0.<org.jfree.data.general.AbstractSeriesDataset: void fireDatasetChanged()>() >>>>>>>> org.jfree.data.general.Series.notifyListeners : i0 = i0 + -2
org.jfree.data.general.Series.notifyListeners : i0 = i0 + -2 >>>>>>>> org.jfree.data.general.Series.notifyListeners : goto [?= (branch)]
org.jfree.data.general.Series.notifyListeners : goto [?= (branch)] >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : if r1 != null
org.jfree.data.Range.combineIgnoringNaN : if r1 != null >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : $d2 = virtualinvoke r0.<org.jfree.data.Range: double getLowerBound()>()
org.jfree.data.Range.combineIgnoringNaN : $d2 = virtualinvoke r0.<org.jfree.data.Range: double getLowerBound()>() >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : $d3 = virtualinvoke r1.<org.jfree.data.Range: double getLowerBound()>()
org.jfree.data.Range.combineIgnoringNaN : $d3 = virtualinvoke r1.<org.jfree.data.Range: double getLowerBound()>() >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : d0 = staticinvoke <org.jfree.data.Range: double min(double,double)>($d2, $d3)
org.jfree.data.Range.combineIgnoringNaN : d0 = staticinvoke <org.jfree.data.Range: double min(double,double)>($d2, $d3) >>>>>>>> org.jfree.data.Range.min : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0)
org.jfree.data.Range.min : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0) >>>>>>>> org.jfree.data.Range.min : if $z0 == 0
org.jfree.data.Range.min : if $z0 == 0 >>>>>>>> org.jfree.data.Range.min : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1)
org.jfree.data.Range.min : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1) >>>>>>>> org.jfree.data.Range.min : if $z1 == 0
org.jfree.data.Range.min : if $z1 == 0 >>>>>>>> org.jfree.data.Range.min : return d0
org.jfree.data.Range.min : return d0 >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : $d4 = virtualinvoke r0.<org.jfree.data.Range: double getUpperBound()>()
org.jfree.data.Range.combineIgnoringNaN : $d4 = virtualinvoke r0.<org.jfree.data.Range: double getUpperBound()>() >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : $d5 = virtualinvoke r1.<org.jfree.data.Range: double getUpperBound()>()
org.jfree.data.Range.combineIgnoringNaN : $d5 = virtualinvoke r1.<org.jfree.data.Range: double getUpperBound()>() >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : d1 = staticinvoke <org.jfree.data.Range: double max(double,double)>($d4, $d5)
org.jfree.data.Range.combineIgnoringNaN : d1 = staticinvoke <org.jfree.data.Range: double max(double,double)>($d4, $d5) >>>>>>>> org.jfree.data.Range.max : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0)
org.jfree.data.Range.max : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0) >>>>>>>> org.jfree.data.Range.max : if $z0 == 0
org.jfree.data.Range.max : if $z0 == 0 >>>>>>>> org.jfree.data.Range.max : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1)
org.jfree.data.Range.max : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1) >>>>>>>> org.jfree.data.Range.max : if $z1 == 0
org.jfree.data.Range.max : if $z1 == 0 >>>>>>>> org.jfree.data.Range.max : return d0
org.jfree.data.Range.max : return d0 >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : $r2 = new org.jfree.data.Range
org.jfree.data.Range.combineIgnoringNaN : $r2 = new org.jfree.data.Range >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : specialinvoke $r2.<org.jfree.data.Range: void <init>(double,double)>(d0, d1)
org.jfree.data.Range.combineIgnoringNaN : specialinvoke $r2.<org.jfree.data.Range: void <init>(double,double)>(d0, d1) >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : return $r2
