org.jfree.chart.util.ParamChecks.nullNotPermitted : if r0 != null >>>>>>>> org.jfree.data.time.Week.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Week: long getFirstMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Week.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Week: long getFirstMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Week.getFirstMillisecond : $r3 = virtualinvoke r1.<java.util.Calendar: java.lang.Object clone()>()
org.jfree.data.time.Week.getFirstMillisecond : $r3 = virtualinvoke r1.<java.util.Calendar: java.lang.Object clone()>() >>>>>>>> org.jfree.data.time.Week.getFirstMillisecond : r2 = (java.util.Calendar) $r3
org.jfree.data.time.Week.getFirstMillisecond : r2 = (java.util.Calendar) $r3 >>>>>>>> org.jfree.data.time.Week.getFirstMillisecond : virtualinvoke r2.<java.util.Calendar: void clear()>()
org.jfree.data.time.Week.getFirstMillisecond : virtualinvoke r2.<java.util.Calendar: void clear()>() >>>>>>>> org.jfree.data.time.Week.getFirstMillisecond : $s0 = r0.<org.jfree.data.time.Week: short year>
org.jfree.data.time.Week.getFirstMillisecond : $s0 = r0.<org.jfree.data.time.Week: short year> >>>>>>>> org.jfree.data.time.Week.getFirstMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(1, $s0)
org.jfree.data.time.Week.getFirstMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(1, $s0) >>>>>>>> org.jfree.data.time.Week.getFirstMillisecond : $b1 = r0.<org.jfree.data.time.Week: byte week>
org.jfree.data.time.Week.getFirstMillisecond : $b1 = r0.<org.jfree.data.time.Week: byte week> >>>>>>>> org.jfree.data.time.Week.getFirstMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(3, $b1)
org.jfree.data.time.Week.getFirstMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(3, $b1) >>>>>>>> org.jfree.data.time.Week.getFirstMillisecond : $i2 = virtualinvoke r2.<java.util.Calendar: int getFirstDayOfWeek()>()
org.jfree.data.time.Week.getFirstMillisecond : $i2 = virtualinvoke r2.<java.util.Calendar: int getFirstDayOfWeek()>() >>>>>>>> org.jfree.data.time.Week.getFirstMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(7, $i2)
org.jfree.data.time.Week.getFirstMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(7, $i2) >>>>>>>> org.jfree.data.time.Week.getFirstMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(10, 0)
org.jfree.data.time.Week.getFirstMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(10, 0) >>>>>>>> org.jfree.data.time.Week.getFirstMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(12, 0)
org.jfree.data.time.Week.getFirstMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(12, 0) >>>>>>>> org.jfree.data.time.Week.getFirstMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(13, 0)
org.jfree.data.time.Week.getFirstMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(13, 0) >>>>>>>> org.jfree.data.time.Week.getFirstMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(14, 0)
org.jfree.data.time.Week.getFirstMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(14, 0) >>>>>>>> org.jfree.data.time.Week.getFirstMillisecond : $l3 = virtualinvoke r2.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Week.getFirstMillisecond : $l3 = virtualinvoke r2.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Week.getFirstMillisecond : return $l3
org.jfree.data.time.Week.getFirstMillisecond : return $l3 >>>>>>>> org.jfree.data.time.Week.peg : r0.<org.jfree.data.time.Week: long firstMillisecond> = $l0
org.jfree.data.time.Week.peg : r0.<org.jfree.data.time.Week: long firstMillisecond> = $l0 >>>>>>>> org.jfree.data.time.Week.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Week: long getLastMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Week.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Week: long getLastMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : $r3 = virtualinvoke r1.<java.util.Calendar: java.lang.Object clone()>()
org.jfree.data.time.Week.getLastMillisecond : $r3 = virtualinvoke r1.<java.util.Calendar: java.lang.Object clone()>() >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : r2 = (java.util.Calendar) $r3
org.jfree.data.time.Week.getLastMillisecond : r2 = (java.util.Calendar) $r3 >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : virtualinvoke r2.<java.util.Calendar: void clear()>()
org.jfree.data.time.Week.getLastMillisecond : virtualinvoke r2.<java.util.Calendar: void clear()>() >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : $s0 = r0.<org.jfree.data.time.Week: short year>
org.jfree.data.time.Week.getLastMillisecond : $s0 = r0.<org.jfree.data.time.Week: short year> >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(1, $s0)
org.jfree.data.time.Week.getLastMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(1, $s0) >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : $b1 = r0.<org.jfree.data.time.Week: byte week>
org.jfree.data.time.Week.getLastMillisecond : $b1 = r0.<org.jfree.data.time.Week: byte week> >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : $i2 = $b1 + 1
org.jfree.data.time.Week.getLastMillisecond : $i2 = $b1 + 1 >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(3, $i2)
org.jfree.data.time.Week.getLastMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(3, $i2) >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : $i3 = virtualinvoke r2.<java.util.Calendar: int getFirstDayOfWeek()>()
org.jfree.data.time.Week.getLastMillisecond : $i3 = virtualinvoke r2.<java.util.Calendar: int getFirstDayOfWeek()>() >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(7, $i3)
org.jfree.data.time.Week.getLastMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(7, $i3) >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(10, 0)
org.jfree.data.time.Week.getLastMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(10, 0) >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(12, 0)
org.jfree.data.time.Week.getLastMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(12, 0) >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(13, 0)
org.jfree.data.time.Week.getLastMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(13, 0) >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(14, 0)
org.jfree.data.time.Week.getLastMillisecond : virtualinvoke r2.<java.util.Calendar: void set(int,int)>(14, 0) >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : $l4 = virtualinvoke r2.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Week.getLastMillisecond : $l4 = virtualinvoke r2.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : $l5 = $l4 - 1L
org.jfree.data.time.Week.getLastMillisecond : $l5 = $l4 - 1L >>>>>>>> org.jfree.data.time.Week.getLastMillisecond : return $l5
org.jfree.data.time.Week.getLastMillisecond : return $l5 >>>>>>>> org.jfree.data.time.Week.peg : r0.<org.jfree.data.time.Week: long lastMillisecond> = $l1
org.jfree.data.time.Week.peg : r0.<org.jfree.data.time.Week: long lastMillisecond> = $l1 >>>>>>>> org.jfree.data.time.TimeTableXYDataset.remove : $r3 = r0.<org.jfree.data.time.TimeTableXYDataset: org.jfree.data.DefaultKeyedValues2D values>
org.jfree.data.time.TimeTableXYDataset.remove : $r3 = r0.<org.jfree.data.time.TimeTableXYDataset: org.jfree.data.DefaultKeyedValues2D values> >>>>>>>> org.jfree.data.time.TimeTableXYDataset.remove : virtualinvoke $r3.<org.jfree.data.DefaultKeyedValues2D: void removeValue(java.lang.Comparable,java.lang.Comparable)>(r1, r2)
org.jfree.data.time.TimeTableXYDataset.remove : virtualinvoke $r3.<org.jfree.data.DefaultKeyedValues2D: void removeValue(java.lang.Comparable,java.lang.Comparable)>(r1, r2) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : virtualinvoke r0.<org.jfree.data.DefaultKeyedValues2D: void setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)>(null, r1, r2)
org.jfree.data.DefaultKeyedValues2D.removeValue : virtualinvoke r0.<org.jfree.data.DefaultKeyedValues2D: void setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)>(null, r1, r2) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : i0 = virtualinvoke r0.<org.jfree.data.DefaultKeyedValues2D: int getRowIndex(java.lang.Comparable)>(r2)
org.jfree.data.DefaultKeyedValues2D.setValue : i0 = virtualinvoke r0.<org.jfree.data.DefaultKeyedValues2D: int getRowIndex(java.lang.Comparable)>(r2) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "key")
org.jfree.data.DefaultKeyedValues2D.getRowIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "key") >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : $z0 = r0.<org.jfree.data.DefaultKeyedValues2D: boolean sortRowKeys>
org.jfree.data.DefaultKeyedValues2D.getRowIndex : $z0 = r0.<org.jfree.data.DefaultKeyedValues2D: boolean sortRowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : if $z0 == 0
org.jfree.data.DefaultKeyedValues2D.getRowIndex : if $z0 == 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : $r2 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys>
org.jfree.data.DefaultKeyedValues2D.getRowIndex : $r2 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : $i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>($r2, r1)
org.jfree.data.DefaultKeyedValues2D.getRowIndex : $i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>($r2, r1) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : return $i0
org.jfree.data.DefaultKeyedValues2D.getRowIndex : return $i0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : if i0 < 0
org.jfree.data.DefaultKeyedValues2D.setValue : if i0 < 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : $r7 = new org.jfree.data.DefaultKeyedValues
org.jfree.data.DefaultKeyedValues2D.setValue : $r7 = new org.jfree.data.DefaultKeyedValues >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : specialinvoke $r7.<org.jfree.data.DefaultKeyedValues: void <init>()>()
org.jfree.data.DefaultKeyedValues2D.setValue : specialinvoke $r7.<org.jfree.data.DefaultKeyedValues: void <init>()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : r4 = $r7
org.jfree.data.DefaultKeyedValues2D.setValue : r4 = $r7 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : $z0 = r0.<org.jfree.data.DefaultKeyedValues2D: boolean sortRowKeys>
org.jfree.data.DefaultKeyedValues2D.setValue : $z0 = r0.<org.jfree.data.DefaultKeyedValues2D: boolean sortRowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : if $z0 == 0
org.jfree.data.DefaultKeyedValues2D.setValue : if $z0 == 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : $i2 = neg i0
org.jfree.data.DefaultKeyedValues2D.setValue : $i2 = neg i0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : i3 = $i2 - 1
org.jfree.data.DefaultKeyedValues2D.setValue : i3 = $i2 - 1 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : $r8 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys>
org.jfree.data.DefaultKeyedValues2D.setValue : $r8 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : interfaceinvoke $r8.<java.util.List: void add(int,java.lang.Object)>(i3, r2)
org.jfree.data.DefaultKeyedValues2D.setValue : interfaceinvoke $r8.<java.util.List: void add(int,java.lang.Object)>(i3, r2) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : $r9 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows>
org.jfree.data.DefaultKeyedValues2D.setValue : $r9 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : interfaceinvoke $r9.<java.util.List: void add(int,java.lang.Object)>(i3, r4)
org.jfree.data.DefaultKeyedValues2D.setValue : interfaceinvoke $r9.<java.util.List: void add(int,java.lang.Object)>(i3, r4) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : goto [?= virtualinvoke r4.<org.jfree.data.DefaultKeyedValues: void setValue(java.lang.Comparable,java.lang.Number)>(r3, r1)]
org.jfree.data.DefaultKeyedValues2D.setValue : goto [?= virtualinvoke r4.<org.jfree.data.DefaultKeyedValues: void setValue(java.lang.Comparable,java.lang.Number)>(r3, r1)] >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : virtualinvoke r4.<org.jfree.data.DefaultKeyedValues: void setValue(java.lang.Comparable,java.lang.Number)>(r3, r1)
org.jfree.data.DefaultKeyedValues2D.setValue : virtualinvoke r4.<org.jfree.data.DefaultKeyedValues: void setValue(java.lang.Comparable,java.lang.Number)>(r3, r1) >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "key")
org.jfree.data.DefaultKeyedValues.setValue : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "key") >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : i0 = virtualinvoke r0.<org.jfree.data.DefaultKeyedValues: int getIndex(java.lang.Comparable)>(r1)
org.jfree.data.DefaultKeyedValues.setValue : i0 = virtualinvoke r0.<org.jfree.data.DefaultKeyedValues: int getIndex(java.lang.Comparable)>(r1) >>>>>>>> org.jfree.data.DefaultKeyedValues.getIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "key")
org.jfree.data.DefaultKeyedValues.getIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "key") >>>>>>>> org.jfree.data.DefaultKeyedValues.getIndex : $r3 = r0.<org.jfree.data.DefaultKeyedValues: java.util.HashMap indexMap>
org.jfree.data.DefaultKeyedValues.getIndex : $r3 = r0.<org.jfree.data.DefaultKeyedValues: java.util.HashMap indexMap> >>>>>>>> org.jfree.data.DefaultKeyedValues.getIndex : $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1)
org.jfree.data.DefaultKeyedValues.getIndex : $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.jfree.data.DefaultKeyedValues.getIndex : r2 = (java.lang.Integer) $r4
org.jfree.data.DefaultKeyedValues.getIndex : r2 = (java.lang.Integer) $r4 >>>>>>>> org.jfree.data.DefaultKeyedValues.getIndex : if r2 != null
org.jfree.data.DefaultKeyedValues.getIndex : if r2 != null >>>>>>>> org.jfree.data.DefaultKeyedValues.getIndex : return -1
org.jfree.data.DefaultKeyedValues.getIndex : return -1 >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : if i0 < 0
org.jfree.data.DefaultKeyedValues.setValue : if i0 < 0 >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : $r7 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList keys>
org.jfree.data.DefaultKeyedValues.setValue : $r7 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList keys> >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
org.jfree.data.DefaultKeyedValues.setValue : virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : $r8 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList values>
org.jfree.data.DefaultKeyedValues.setValue : $r8 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList values> >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)
org.jfree.data.DefaultKeyedValues.setValue : virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r2) >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : $r9 = r0.<org.jfree.data.DefaultKeyedValues: java.util.HashMap indexMap>
org.jfree.data.DefaultKeyedValues.setValue : $r9 = r0.<org.jfree.data.DefaultKeyedValues: java.util.HashMap indexMap> >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : $r10 = new java.lang.Integer
org.jfree.data.DefaultKeyedValues.setValue : $r10 = new java.lang.Integer >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : $r11 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList keys>
org.jfree.data.DefaultKeyedValues.setValue : $r11 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList keys> >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : $i1 = virtualinvoke $r11.<java.util.ArrayList: int size()>()
org.jfree.data.DefaultKeyedValues.setValue : $i1 = virtualinvoke $r11.<java.util.ArrayList: int size()>() >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : $i2 = $i1 - 1
org.jfree.data.DefaultKeyedValues.setValue : $i2 = $i1 - 1 >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : specialinvoke $r10.<java.lang.Integer: void <init>(int)>($i2)
org.jfree.data.DefaultKeyedValues.setValue : specialinvoke $r10.<java.lang.Integer: void <init>(int)>($i2) >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r10)
org.jfree.data.DefaultKeyedValues.setValue : virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r10) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : $r12 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys>
org.jfree.data.DefaultKeyedValues2D.setValue : $r12 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : i1 = interfaceinvoke $r12.<java.util.List: int indexOf(java.lang.Object)>(r3)
org.jfree.data.DefaultKeyedValues2D.setValue : i1 = interfaceinvoke $r12.<java.util.List: int indexOf(java.lang.Object)>(r3) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : if i1 >= 0
org.jfree.data.DefaultKeyedValues2D.setValue : if i1 >= 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : $r13 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys>
org.jfree.data.DefaultKeyedValues2D.setValue : $r13 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r3)
org.jfree.data.DefaultKeyedValues2D.setValue : interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r3) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : z0 = 1
org.jfree.data.DefaultKeyedValues2D.removeValue : z0 = 1 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : i0 = virtualinvoke r0.<org.jfree.data.DefaultKeyedValues2D: int getRowIndex(java.lang.Comparable)>(r1)
org.jfree.data.DefaultKeyedValues2D.removeValue : i0 = virtualinvoke r0.<org.jfree.data.DefaultKeyedValues2D: int getRowIndex(java.lang.Comparable)>(r1) >>>>>>>> org.jfree.data.time.Week.compareTo : $z0 = r1 instanceof org.jfree.data.time.Week
org.jfree.data.time.Week.compareTo : $z0 = r1 instanceof org.jfree.data.time.Week >>>>>>>> org.jfree.data.time.Week.compareTo : if $z0 == 0
org.jfree.data.time.Week.compareTo : if $z0 == 0 >>>>>>>> org.jfree.data.time.Week.compareTo : r2 = (org.jfree.data.time.Week) r1
org.jfree.data.time.Week.compareTo : r2 = (org.jfree.data.time.Week) r1 >>>>>>>> org.jfree.data.time.Week.compareTo : $s1 = r0.<org.jfree.data.time.Week: short year>
org.jfree.data.time.Week.compareTo : $s1 = r0.<org.jfree.data.time.Week: short year> >>>>>>>> org.jfree.data.time.Week.compareTo : $r3 = virtualinvoke r2.<org.jfree.data.time.Week: org.jfree.data.time.Year getYear()>()
org.jfree.data.time.Week.compareTo : $r3 = virtualinvoke r2.<org.jfree.data.time.Week: org.jfree.data.time.Year getYear()>() >>>>>>>> org.jfree.data.time.Week.getYear : $r1 = new org.jfree.data.time.Year
org.jfree.data.time.Week.getYear : $r1 = new org.jfree.data.time.Year >>>>>>>> org.jfree.data.time.Week.getYear : $s0 = r0.<org.jfree.data.time.Week: short year>
org.jfree.data.time.Week.getYear : $s0 = r0.<org.jfree.data.time.Week: short year> >>>>>>>> org.jfree.data.time.Week.getYear : specialinvoke $r1.<org.jfree.data.time.Year: void <init>(int)>($s0)
org.jfree.data.time.Week.getYear : specialinvoke $r1.<org.jfree.data.time.Year: void <init>(int)>($s0) >>>>>>>> org.jfree.data.time.Year.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Year: long getFirstMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Year.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Year: long getFirstMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getFirstMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 0, 1, 0, 0, 0)
org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 0, 1, 0, 0, 0) >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0)
org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0) >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Year.getFirstMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : return $l1
org.jfree.data.time.Year.getFirstMillisecond : return $l1 >>>>>>>> org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long firstMillisecond> = $l0
org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long firstMillisecond> = $l0 >>>>>>>> org.jfree.data.time.Year.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Year: long getLastMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Year.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Year: long getLastMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getLastMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 11, 31, 23, 59, 59)
org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 11, 31, 23, 59, 59) >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999)
org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999) >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Year.getLastMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : return $l1
org.jfree.data.time.Year.getLastMillisecond : return $l1 >>>>>>>> org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long lastMillisecond> = $l1
org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long lastMillisecond> = $l1 >>>>>>>> org.jfree.data.time.Week.getYear : return $r1
org.jfree.data.time.Week.getYear : return $r1 >>>>>>>> org.jfree.data.time.Week.compareTo : $i2 = virtualinvoke $r3.<org.jfree.data.time.Year: int getYear()>()
org.jfree.data.time.Week.compareTo : $i2 = virtualinvoke $r3.<org.jfree.data.time.Year: int getYear()>() >>>>>>>> org.jfree.data.time.Year.getYear : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getYear : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.getYear : return $s0
org.jfree.data.time.Year.getYear : return $s0 >>>>>>>> org.jfree.data.time.Week.compareTo : i0 = $s1 - $i2
org.jfree.data.time.Week.compareTo : i0 = $s1 - $i2 >>>>>>>> org.jfree.data.time.Week.compareTo : if i0 != 0
org.jfree.data.time.Week.compareTo : if i0 != 0 >>>>>>>> org.jfree.data.time.Week.compareTo : $b3 = r0.<org.jfree.data.time.Week: byte week>
org.jfree.data.time.Week.compareTo : $b3 = r0.<org.jfree.data.time.Week: byte week> >>>>>>>> org.jfree.data.time.Week.compareTo : $i4 = virtualinvoke r2.<org.jfree.data.time.Week: int getWeek()>()
org.jfree.data.time.Week.compareTo : $i4 = virtualinvoke r2.<org.jfree.data.time.Week: int getWeek()>() >>>>>>>> org.jfree.data.time.Week.getWeek : $b0 = r0.<org.jfree.data.time.Week: byte week>
org.jfree.data.time.Week.getWeek : $b0 = r0.<org.jfree.data.time.Week: byte week> >>>>>>>> org.jfree.data.time.Week.getWeek : return $b0
org.jfree.data.time.Week.getWeek : return $b0 >>>>>>>> org.jfree.data.time.Week.compareTo : i0 = $b3 - $i4
org.jfree.data.time.Week.compareTo : i0 = $b3 - $i4 >>>>>>>> org.jfree.data.time.Week.compareTo : goto [?= return i0]
org.jfree.data.time.Week.compareTo : goto [?= return i0] >>>>>>>> org.jfree.data.time.Week.compareTo : return i0
org.jfree.data.time.Week.compareTo : return i0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : $r4 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows>
org.jfree.data.DefaultKeyedValues2D.removeValue : $r4 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0)
org.jfree.data.DefaultKeyedValues2D.removeValue : $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : r3 = (org.jfree.data.DefaultKeyedValues) $r5
org.jfree.data.DefaultKeyedValues2D.removeValue : r3 = (org.jfree.data.DefaultKeyedValues) $r5 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : i1 = 0
org.jfree.data.DefaultKeyedValues2D.removeValue : i1 = 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : i2 = virtualinvoke r3.<org.jfree.data.DefaultKeyedValues: int getItemCount()>()
org.jfree.data.DefaultKeyedValues2D.removeValue : i2 = virtualinvoke r3.<org.jfree.data.DefaultKeyedValues: int getItemCount()>() >>>>>>>> org.jfree.data.DefaultKeyedValues.getItemCount : $r1 = r0.<org.jfree.data.DefaultKeyedValues: java.util.HashMap indexMap>
org.jfree.data.DefaultKeyedValues.getItemCount : $r1 = r0.<org.jfree.data.DefaultKeyedValues: java.util.HashMap indexMap> >>>>>>>> org.jfree.data.DefaultKeyedValues.getItemCount : $i0 = virtualinvoke $r1.<java.util.HashMap: int size()>()
org.jfree.data.DefaultKeyedValues.getItemCount : $i0 = virtualinvoke $r1.<java.util.HashMap: int size()>() >>>>>>>> org.jfree.data.DefaultKeyedValues.getItemCount : return $i0
org.jfree.data.DefaultKeyedValues.getItemCount : return $i0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : if i1 >= i2
org.jfree.data.DefaultKeyedValues2D.removeValue : if i1 >= i2 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : $r6 = virtualinvoke r3.<org.jfree.data.DefaultKeyedValues: java.lang.Number getValue(int)>(i1)
org.jfree.data.DefaultKeyedValues2D.removeValue : $r6 = virtualinvoke r3.<org.jfree.data.DefaultKeyedValues: java.lang.Number getValue(int)>(i1) >>>>>>>> org.jfree.data.DefaultKeyedValues.getValue : $r1 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList values>
org.jfree.data.DefaultKeyedValues.getValue : $r1 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList values> >>>>>>>> org.jfree.data.DefaultKeyedValues.getValue : $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0)
org.jfree.data.DefaultKeyedValues.getValue : $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.data.DefaultKeyedValues.getValue : $r3 = (java.lang.Number) $r2
org.jfree.data.DefaultKeyedValues.getValue : $r3 = (java.lang.Number) $r2 >>>>>>>> org.jfree.data.DefaultKeyedValues.getValue : return $r3
org.jfree.data.DefaultKeyedValues.getValue : return $r3 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : if $r6 == null
org.jfree.data.DefaultKeyedValues2D.removeValue : if $r6 == null >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : i1 = i1 + 1
org.jfree.data.DefaultKeyedValues2D.removeValue : i1 = i1 + 1 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : goto [?= (branch)]
org.jfree.data.DefaultKeyedValues2D.removeValue : goto [?= (branch)] >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : if z0 == 0
org.jfree.data.DefaultKeyedValues2D.removeValue : if z0 == 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : $r7 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys>
org.jfree.data.DefaultKeyedValues2D.removeValue : $r7 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>(i0)
org.jfree.data.DefaultKeyedValues2D.removeValue : interfaceinvoke $r7.<java.util.List: java.lang.Object remove(int)>(i0) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : $r9 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows>
org.jfree.data.DefaultKeyedValues2D.removeValue : $r9 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : interfaceinvoke $r9.<java.util.List: java.lang.Object remove(int)>(i0)
org.jfree.data.DefaultKeyedValues2D.removeValue : interfaceinvoke $r9.<java.util.List: java.lang.Object remove(int)>(i0) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : z1 = 1
org.jfree.data.DefaultKeyedValues2D.removeValue : z1 = 1 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : i4 = 0
org.jfree.data.DefaultKeyedValues2D.removeValue : i4 = 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : $r11 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows>
org.jfree.data.DefaultKeyedValues2D.removeValue : $r11 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : i5 = interfaceinvoke $r11.<java.util.List: int size()>()
org.jfree.data.DefaultKeyedValues2D.removeValue : i5 = interfaceinvoke $r11.<java.util.List: int size()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : if i4 >= i5
org.jfree.data.DefaultKeyedValues2D.removeValue : if i4 >= i5 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : if z1 == 0
org.jfree.data.DefaultKeyedValues2D.removeValue : if z1 == 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : i6 = 0
org.jfree.data.DefaultKeyedValues2D.removeValue : i6 = 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : $r16 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows>
org.jfree.data.DefaultKeyedValues2D.removeValue : $r16 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : i7 = interfaceinvoke $r16.<java.util.List: int size()>()
org.jfree.data.DefaultKeyedValues2D.removeValue : i7 = interfaceinvoke $r16.<java.util.List: int size()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : if i6 >= i7
org.jfree.data.DefaultKeyedValues2D.removeValue : if i6 >= i7 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : $r20 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys>
org.jfree.data.DefaultKeyedValues2D.removeValue : $r20 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : interfaceinvoke $r20.<java.util.List: boolean remove(java.lang.Object)>(r2)
org.jfree.data.DefaultKeyedValues2D.removeValue : interfaceinvoke $r20.<java.util.List: boolean remove(java.lang.Object)>(r2) >>>>>>>> org.jfree.data.time.TimeTableXYDataset.remove : if z0 == 0
org.jfree.data.time.TimeTableXYDataset.remove : if z0 == 0 >>>>>>>> org.jfree.data.time.TimeTableXYDataset.getDomainLowerBound : d0 = #NaN
org.jfree.data.time.TimeTableXYDataset.getDomainLowerBound : d0 = #NaN >>>>>>>> org.jfree.data.time.TimeTableXYDataset.getDomainLowerBound : r1 = virtualinvoke r0.<org.jfree.data.time.TimeTableXYDataset: org.jfree.data.Range getDomainBounds(boolean)>(z0)
org.jfree.data.time.TimeTableXYDataset.getDomainLowerBound : r1 = virtualinvoke r0.<org.jfree.data.time.TimeTableXYDataset: org.jfree.data.Range getDomainBounds(boolean)>(z0) >>>>>>>> org.jfree.data.time.TimeTableXYDataset.getDomainBounds : $r4 = r0.<org.jfree.data.time.TimeTableXYDataset: org.jfree.data.DefaultKeyedValues2D values>
org.jfree.data.time.TimeTableXYDataset.getDomainBounds : $r4 = r0.<org.jfree.data.time.TimeTableXYDataset: org.jfree.data.DefaultKeyedValues2D values> >>>>>>>> org.jfree.data.time.TimeTableXYDataset.getDomainBounds : r1 = virtualinvoke $r4.<org.jfree.data.DefaultKeyedValues2D: java.util.List getRowKeys()>()
org.jfree.data.time.TimeTableXYDataset.getDomainBounds : r1 = virtualinvoke $r4.<org.jfree.data.DefaultKeyedValues2D: java.util.List getRowKeys()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowKeys : $r1 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys>
org.jfree.data.DefaultKeyedValues2D.getRowKeys : $r1 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowKeys : $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1)
org.jfree.data.DefaultKeyedValues2D.getRowKeys : $r2 = staticinvoke <java.util.Collections: java.util.List unmodifiableList(java.util.List)>($r1) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowKeys : return $r2
org.jfree.data.DefaultKeyedValues2D.getRowKeys : return $r2 >>>>>>>> org.jfree.data.time.TimeTableXYDataset.getDomainBounds : $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>()
org.jfree.data.time.TimeTableXYDataset.getDomainBounds : $z1 = interfaceinvoke r1.<java.util.List: boolean isEmpty()>() >>>>>>>> org.jfree.data.time.TimeTableXYDataset.getDomainBounds : if $z1 == 0
org.jfree.data.time.TimeTableXYDataset.getDomainBounds : if $z1 == 0 >>>>>>>> org.jfree.data.time.TimeTableXYDataset.getDomainBounds : return null
org.jfree.data.time.TimeTableXYDataset.getDomainBounds : return null >>>>>>>> org.jfree.data.time.TimeTableXYDataset.getDomainLowerBound : if r1 == null
org.jfree.data.time.TimeTableXYDataset.getDomainLowerBound : if r1 == null >>>>>>>> org.jfree.data.time.TimeTableXYDataset.getDomainLowerBound : return d0
org.jfree.data.time.TimeTableXYDataset.getDomainLowerBound : return d0 >>>>>>>> org.jfree.data.time.TimeTableXYDataset.getItemCount : $r1 = r0.<org.jfree.data.time.TimeTableXYDataset: org.jfree.data.DefaultKeyedValues2D values>
org.jfree.data.time.TimeTableXYDataset.getItemCount : $r1 = r0.<org.jfree.data.time.TimeTableXYDataset: org.jfree.data.DefaultKeyedValues2D values> >>>>>>>> org.jfree.data.time.TimeTableXYDataset.getItemCount : $i0 = virtualinvoke $r1.<org.jfree.data.DefaultKeyedValues2D: int getRowCount()>()
org.jfree.data.time.TimeTableXYDataset.getItemCount : $i0 = virtualinvoke $r1.<org.jfree.data.DefaultKeyedValues2D: int getRowCount()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowCount : $r1 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys>
org.jfree.data.DefaultKeyedValues2D.getRowCount : $r1 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.jfree.data.DefaultKeyedValues2D.getRowCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowCount : return $i0
org.jfree.data.DefaultKeyedValues2D.getRowCount : return $i0 >>>>>>>> org.jfree.data.time.TimeTableXYDataset.getItemCount : return $i0
org.jfree.data.time.TimeTableXYDataset.getItemCount : return $i0 >>>>>>>> org.jfree.data.time.Month.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Month: long getFirstMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Month.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Month: long getFirstMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Month.getFirstMillisecond : $i0 = r0.<org.jfree.data.time.Month: int year>
org.jfree.data.time.Month.getFirstMillisecond : $i0 = r0.<org.jfree.data.time.Month: int year> >>>>>>>> org.jfree.data.time.Month.getFirstMillisecond : $i1 = r0.<org.jfree.data.time.Month: int month>
org.jfree.data.time.Month.getFirstMillisecond : $i1 = r0.<org.jfree.data.time.Month: int month> >>>>>>>> org.jfree.data.time.Month.getFirstMillisecond : $i2 = $i1 - 1
org.jfree.data.time.Month.getFirstMillisecond : $i2 = $i1 - 1 >>>>>>>> org.jfree.data.time.Month.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($i0, $i2, 1, 0, 0, 0)
org.jfree.data.time.Month.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($i0, $i2, 1, 0, 0, 0) >>>>>>>> org.jfree.data.time.Month.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0)
org.jfree.data.time.Month.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0) >>>>>>>> org.jfree.data.time.Month.getFirstMillisecond : $l3 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Month.getFirstMillisecond : $l3 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Month.getFirstMillisecond : return $l3
org.jfree.data.time.Month.getFirstMillisecond : return $l3 >>>>>>>> org.jfree.data.time.Month.peg : r0.<org.jfree.data.time.Month: long firstMillisecond> = $l0
org.jfree.data.time.Month.peg : r0.<org.jfree.data.time.Month: long firstMillisecond> = $l0 >>>>>>>> org.jfree.data.time.Month.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Month: long getLastMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Month.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Month: long getLastMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : $i1 = r0.<org.jfree.data.time.Month: int month>
org.jfree.data.time.Month.getLastMillisecond : $i1 = r0.<org.jfree.data.time.Month: int month> >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : $i2 = r0.<org.jfree.data.time.Month: int year>
org.jfree.data.time.Month.getLastMillisecond : $i2 = r0.<org.jfree.data.time.Month: int year> >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : i0 = staticinvoke <org.jfree.date.SerialDate: int lastDayOfMonth(int,int)>($i1, $i2)
org.jfree.data.time.Month.getLastMillisecond : i0 = staticinvoke <org.jfree.date.SerialDate: int lastDayOfMonth(int,int)>($i1, $i2) >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : $i3 = r0.<org.jfree.data.time.Month: int year>
org.jfree.data.time.Month.getLastMillisecond : $i3 = r0.<org.jfree.data.time.Month: int year> >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : $i4 = r0.<org.jfree.data.time.Month: int month>
org.jfree.data.time.Month.getLastMillisecond : $i4 = r0.<org.jfree.data.time.Month: int month> >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : $i5 = $i4 - 1
org.jfree.data.time.Month.getLastMillisecond : $i5 = $i4 - 1 >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($i3, $i5, i0, 23, 59, 59)
org.jfree.data.time.Month.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($i3, $i5, i0, 23, 59, 59) >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999)
org.jfree.data.time.Month.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999) >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : $l6 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Month.getLastMillisecond : $l6 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : return $l6
org.jfree.data.time.Month.getLastMillisecond : return $l6 >>>>>>>> org.jfree.data.time.Month.peg : r0.<org.jfree.data.time.Month: long lastMillisecond> = $l1
org.jfree.data.time.Month.peg : r0.<org.jfree.data.time.Month: long lastMillisecond> = $l1 >>>>>>>> org.jfree.data.time.TimeTableXYDataset.add : $r3 = new java.lang.Double
org.jfree.data.time.TimeTableXYDataset.add : $r3 = new java.lang.Double >>>>>>>> org.jfree.data.time.TimeTableXYDataset.add : specialinvoke $r3.<java.lang.Double: void <init>(double)>(d0)
org.jfree.data.time.TimeTableXYDataset.add : specialinvoke $r3.<java.lang.Double: void <init>(double)>(d0) >>>>>>>> org.jfree.data.time.TimeTableXYDataset.add : virtualinvoke r0.<org.jfree.data.time.TimeTableXYDataset: void add(org.jfree.data.time.TimePeriod,java.lang.Number,java.lang.Comparable,boolean)>(r1, $r3, r2, 1)
org.jfree.data.time.TimeTableXYDataset.add : virtualinvoke r0.<org.jfree.data.time.TimeTableXYDataset: void add(org.jfree.data.time.TimePeriod,java.lang.Number,java.lang.Comparable,boolean)>(r1, $r3, r2, 1) >>>>>>>> org.jfree.data.time.TimeTableXYDataset.add : $z1 = r1 instanceof org.jfree.data.time.RegularTimePeriod
org.jfree.data.time.TimeTableXYDataset.add : $z1 = r1 instanceof org.jfree.data.time.RegularTimePeriod >>>>>>>> org.jfree.data.time.TimeTableXYDataset.add : if $z1 == 0
org.jfree.data.time.TimeTableXYDataset.add : if $z1 == 0 >>>>>>>> org.jfree.data.time.TimeTableXYDataset.add : r4 = (org.jfree.data.time.RegularTimePeriod) r1
org.jfree.data.time.TimeTableXYDataset.add : r4 = (org.jfree.data.time.RegularTimePeriod) r1 >>>>>>>> org.jfree.data.time.TimeTableXYDataset.add : $r5 = r0.<org.jfree.data.time.TimeTableXYDataset: java.util.Calendar workingCalendar>
org.jfree.data.time.TimeTableXYDataset.add : $r5 = r0.<org.jfree.data.time.TimeTableXYDataset: java.util.Calendar workingCalendar> >>>>>>>> org.jfree.data.time.TimeTableXYDataset.add : virtualinvoke r4.<org.jfree.data.time.RegularTimePeriod: void peg(java.util.Calendar)>($r5)
org.jfree.data.time.TimeTableXYDataset.add : virtualinvoke r4.<org.jfree.data.time.RegularTimePeriod: void peg(java.util.Calendar)>($r5) >>>>>>>> org.jfree.data.time.TimeTableXYDataset.add : $r6 = r0.<org.jfree.data.time.TimeTableXYDataset: org.jfree.data.DefaultKeyedValues2D values>
org.jfree.data.time.TimeTableXYDataset.add : $r6 = r0.<org.jfree.data.time.TimeTableXYDataset: org.jfree.data.DefaultKeyedValues2D values> >>>>>>>> org.jfree.data.time.TimeTableXYDataset.add : virtualinvoke $r6.<org.jfree.data.DefaultKeyedValues2D: void addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)>(r2, r1, r3)
org.jfree.data.time.TimeTableXYDataset.add : virtualinvoke $r6.<org.jfree.data.DefaultKeyedValues2D: void addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)>(r2, r1, r3) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.addValue : virtualinvoke r0.<org.jfree.data.DefaultKeyedValues2D: void setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)>(r1, r2, r3)
org.jfree.data.DefaultKeyedValues2D.addValue : virtualinvoke r0.<org.jfree.data.DefaultKeyedValues2D: void setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)>(r1, r2, r3) >>>>>>>> org.jfree.data.time.TimeTableXYDataset.add : if z0 == 0
org.jfree.data.time.TimeTableXYDataset.add : if z0 == 0 >>>>>>>> org.jfree.data.time.TimeTableXYDataset.add : virtualinvoke r0.<org.jfree.data.time.TimeTableXYDataset: void fireDatasetChanged()>()
org.jfree.data.time.TimeTableXYDataset.add : virtualinvoke r0.<org.jfree.data.time.TimeTableXYDataset: void fireDatasetChanged()>() >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : $r1 = new org.jfree.data.general.DatasetChangeEvent
org.jfree.data.general.AbstractDataset.fireDatasetChanged : $r1 = new org.jfree.data.general.DatasetChangeEvent >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : specialinvoke $r1.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, r0)
org.jfree.data.general.AbstractDataset.fireDatasetChanged : specialinvoke $r1.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, r0) >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : virtualinvoke r0.<org.jfree.data.general.AbstractDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>($r1)
org.jfree.data.general.AbstractDataset.fireDatasetChanged : virtualinvoke r0.<org.jfree.data.general.AbstractDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>($r1) >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : $r3 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList>
org.jfree.data.general.AbstractDataset.notifyListeners : $r3 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.data.general.AbstractDataset.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : $i1 = lengthof r2
org.jfree.data.general.AbstractDataset.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : i0 = $i1 - 2
org.jfree.data.general.AbstractDataset.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : if i0 < 0
org.jfree.data.general.AbstractDataset.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(0, r1, z0)
org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void setDomainAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(0, r1, z0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : if i0 != 0
org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : if i0 != 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : if r1 != null
org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : if r1 != null >>>>>>>> org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList domainAxisLocations>
org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList domainAxisLocations> >>>>>>>> org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : virtualinvoke $r3.<org.jfree.util.ObjectList: void set(int,java.lang.Object)>(i0, r1)
org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : virtualinvoke $r3.<org.jfree.util.ObjectList: void set(int,java.lang.Object)>(i0, r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : if z0 == 0
org.jfree.chart.plot.CategoryPlot.setDomainAxisLocation : if z0 == 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(0, r1, z0)
org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void setRangeAxisLocation(int,org.jfree.chart.axis.AxisLocation,boolean)>(0, r1, z0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : if i0 != 0
org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : if i0 != 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : if r1 != null
org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : if r1 != null >>>>>>>> org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxisLocations>
org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxisLocations> >>>>>>>> org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : virtualinvoke $r3.<org.jfree.util.ObjectList: void set(int,java.lang.Object)>(i0, r1)
org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : virtualinvoke $r3.<org.jfree.util.ObjectList: void set(int,java.lang.Object)>(i0, r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : if z0 == 0
org.jfree.chart.plot.CategoryPlot.setRangeAxisLocation : if z0 == 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : $r1 = new java.util.ArrayList
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : $r1 = new java.util.ArrayList >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(1)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : r2 = $r1
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : r2 = $r1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : $r3 = new java.lang.Integer
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : $r3 = new java.lang.Integer >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i1)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void mapDatasetToDomainAxes(int,java.util.List)>(i0, r2)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxis : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void mapDatasetToDomainAxes(int,java.util.List)>(i0, r2) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : if i0 >= 0
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : if i0 >= 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : specialinvoke r0.<org.jfree.chart.plot.CategoryPlot: void checkAxisIndices(java.util.List)>(r1)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : specialinvoke r0.<org.jfree.chart.plot.CategoryPlot: void checkAxisIndices(java.util.List)>(r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if r1 != null
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if r1 != null >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : i0 = interfaceinvoke r1.<java.util.List: int size()>()
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : i0 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if i0 != 0
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if i0 != 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : $r5 = new java.util.HashSet
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : $r5 = new java.util.HashSet >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : specialinvoke $r5.<java.util.HashSet: void <init>()>()
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : specialinvoke $r5.<java.util.HashSet: void <init>()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : r2 = $r5
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : r2 = $r5 >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : i1 = 0
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : i1 = 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if i1 >= i0
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if i1 >= i0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1)
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : r3 = interfaceinvoke r1.<java.util.List: java.lang.Object get(int)>(i1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : $z0 = r3 instanceof java.lang.Integer
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : $z0 = r3 instanceof java.lang.Integer >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if $z0 != 0
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if $z0 != 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : $z1 = virtualinvoke r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r3)
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : $z1 = virtualinvoke r2.<java.util.HashSet: boolean contains(java.lang.Object)>(r3) >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if $z1 == 0
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : if $z1 == 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : virtualinvoke r2.<java.util.HashSet: boolean add(java.lang.Object)>(r3)
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : virtualinvoke r2.<java.util.HashSet: boolean add(java.lang.Object)>(r3) >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : i1 = i1 + 1
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : i1 = i1 + 1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.checkAxisIndices : goto [?= (branch)]
org.jfree.chart.plot.CategoryPlot.checkAxisIndices : goto [?= (branch)] >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r4 = new java.lang.Integer
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r4 = new java.lang.Integer >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : r2 = $r4
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : r2 = $r4 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToDomainAxesMap>
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToDomainAxesMap> >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r6 = new java.util.ArrayList
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r6 = new java.util.ArrayList >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>(r1)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>(r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : virtualinvoke $r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : virtualinvoke $r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r8 = new org.jfree.data.general.DatasetChangeEvent
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r8 = new org.jfree.data.general.DatasetChangeEvent >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r9 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(i0)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : $r9 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.getDataset : r1 = null
org.jfree.chart.plot.CategoryPlot.getDataset : r1 = null >>>>>>>> org.jfree.chart.plot.CategoryPlot.getDataset : $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList datasets>
org.jfree.chart.plot.CategoryPlot.getDataset : $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList datasets> >>>>>>>> org.jfree.chart.plot.CategoryPlot.getDataset : $i1 = virtualinvoke $r2.<org.jfree.util.ObjectList: int size()>()
org.jfree.chart.plot.CategoryPlot.getDataset : $i1 = virtualinvoke $r2.<org.jfree.util.ObjectList: int size()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.getDataset : if $i1 <= i0
org.jfree.chart.plot.CategoryPlot.getDataset : if $i1 <= i0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.getDataset : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList datasets>
org.jfree.chart.plot.CategoryPlot.getDataset : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList datasets> >>>>>>>> org.jfree.chart.plot.CategoryPlot.getDataset : $r4 = virtualinvoke $r3.<org.jfree.util.ObjectList: java.lang.Object get(int)>(i0)
org.jfree.chart.plot.CategoryPlot.getDataset : $r4 = virtualinvoke $r3.<org.jfree.util.ObjectList: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.getDataset : r1 = (org.jfree.data.category.CategoryDataset) $r4
org.jfree.chart.plot.CategoryPlot.getDataset : r1 = (org.jfree.data.category.CategoryDataset) $r4 >>>>>>>> org.jfree.chart.plot.CategoryPlot.getDataset : return r1
org.jfree.chart.plot.CategoryPlot.getDataset : return r1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : specialinvoke $r8.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, $r9)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : specialinvoke $r8.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, $r9) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>($r8)
org.jfree.chart.plot.CategoryPlot.mapDatasetToDomainAxes : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>($r8) >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes>
org.jfree.chart.plot.CategoryPlot.datasetChanged : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes> >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : i0 = virtualinvoke $r3.<org.jfree.util.ObjectList: int size()>()
org.jfree.chart.plot.CategoryPlot.datasetChanged : i0 = virtualinvoke $r3.<org.jfree.util.ObjectList: int size()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : i1 = 0
org.jfree.chart.plot.CategoryPlot.datasetChanged : i1 = 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : if i1 >= i0
org.jfree.chart.plot.CategoryPlot.datasetChanged : if i1 >= i0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : $r4 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.Plot getParent()>()
org.jfree.chart.plot.CategoryPlot.datasetChanged : $r4 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.Plot getParent()>() >>>>>>>> org.jfree.chart.plot.Plot.getParent : $r1 = r0.<org.jfree.chart.plot.Plot: org.jfree.chart.plot.Plot parent>
org.jfree.chart.plot.Plot.getParent : $r1 = r0.<org.jfree.chart.plot.Plot: org.jfree.chart.plot.Plot parent> >>>>>>>> org.jfree.chart.plot.Plot.getParent : return $r1
org.jfree.chart.plot.Plot.getParent : return $r1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : if $r4 == null
org.jfree.chart.plot.CategoryPlot.datasetChanged : if $r4 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : $r6 = new org.jfree.chart.event.PlotChangeEvent
org.jfree.chart.plot.CategoryPlot.datasetChanged : $r6 = new org.jfree.chart.event.PlotChangeEvent >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : specialinvoke $r6.<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>(r0)
org.jfree.chart.plot.CategoryPlot.datasetChanged : specialinvoke $r6.<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>(r0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : r7 = $r6
org.jfree.chart.plot.CategoryPlot.datasetChanged : r7 = $r6 >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : $r8 = <org.jfree.chart.event.ChartChangeEventType: org.jfree.chart.event.ChartChangeEventType DATASET_UPDATED>
org.jfree.chart.plot.CategoryPlot.datasetChanged : $r8 = <org.jfree.chart.event.ChartChangeEventType: org.jfree.chart.event.ChartChangeEventType DATASET_UPDATED> >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : virtualinvoke r7.<org.jfree.chart.event.PlotChangeEvent: void setType(org.jfree.chart.event.ChartChangeEventType)>($r8)
org.jfree.chart.plot.CategoryPlot.datasetChanged : virtualinvoke r7.<org.jfree.chart.event.PlotChangeEvent: void setType(org.jfree.chart.event.ChartChangeEventType)>($r8) >>>>>>>> org.jfree.chart.event.ChartChangeEvent.setType : r0.<org.jfree.chart.event.ChartChangeEvent: org.jfree.chart.event.ChartChangeEventType type> = r1
org.jfree.chart.event.ChartChangeEvent.setType : r0.<org.jfree.chart.event.ChartChangeEvent: org.jfree.chart.event.ChartChangeEventType type> = r1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void notifyListeners(org.jfree.chart.event.PlotChangeEvent)>(r7)
org.jfree.chart.plot.CategoryPlot.datasetChanged : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void notifyListeners(org.jfree.chart.event.PlotChangeEvent)>(r7) >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : $z0 = r0.<org.jfree.chart.plot.Plot: boolean notify>
org.jfree.chart.plot.Plot.notifyListeners : $z0 = r0.<org.jfree.chart.plot.Plot: boolean notify> >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : if $z0 != 0
org.jfree.chart.plot.Plot.notifyListeners : if $z0 != 0 >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : $r3 = r0.<org.jfree.chart.plot.Plot: javax.swing.event.EventListenerList listenerList>
org.jfree.chart.plot.Plot.notifyListeners : $r3 = r0.<org.jfree.chart.plot.Plot: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.chart.plot.Plot.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : $i1 = lengthof r2
org.jfree.chart.plot.Plot.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : i0 = $i1 - 2
org.jfree.chart.plot.Plot.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : if i0 < 0
org.jfree.chart.plot.Plot.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.chart.axis.Axis.setPlot : r0.<org.jfree.chart.axis.Axis: org.jfree.chart.plot.Plot plot> = r1
org.jfree.chart.axis.Axis.setPlot : r0.<org.jfree.chart.axis.Axis: org.jfree.chart.plot.Plot plot> = r1 >>>>>>>> org.jfree.chart.axis.Axis.setPlot : virtualinvoke r0.<org.jfree.chart.axis.Axis: void configure()>()
org.jfree.chart.axis.Axis.setPlot : virtualinvoke r0.<org.jfree.chart.axis.Axis: void configure()>() >>>>>>>> org.jfree.chart.axis.Axis.addChangeListener : $r2 = r0.<org.jfree.chart.axis.Axis: javax.swing.event.EventListenerList listenerList>
org.jfree.chart.axis.Axis.addChangeListener : $r2 = r0.<org.jfree.chart.axis.Axis: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.chart.axis.Axis.addChangeListener : virtualinvoke $r2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "org/jfree/chart/event/AxisChangeListener", r1)
org.jfree.chart.axis.Axis.addChangeListener : virtualinvoke $r2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "org/jfree/chart/event/AxisChangeListener", r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : $r1 = new java.util.ArrayList
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : $r1 = new java.util.ArrayList >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(1)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : specialinvoke $r1.<java.util.ArrayList: void <init>(int)>(1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : r2 = $r1
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : r2 = $r1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : $r3 = new java.lang.Integer
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : $r3 = new java.lang.Integer >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i1)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : specialinvoke $r3.<java.lang.Integer: void <init>(int)>(i1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : interfaceinvoke r2.<java.util.List: boolean add(java.lang.Object)>($r3) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void mapDatasetToRangeAxes(int,java.util.List)>(i0, r2)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxis : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void mapDatasetToRangeAxes(int,java.util.List)>(i0, r2) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : if i0 >= 0
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : if i0 >= 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : specialinvoke r0.<org.jfree.chart.plot.CategoryPlot: void checkAxisIndices(java.util.List)>(r1)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : specialinvoke r0.<org.jfree.chart.plot.CategoryPlot: void checkAxisIndices(java.util.List)>(r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r4 = new java.lang.Integer
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r4 = new java.lang.Integer >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : specialinvoke $r4.<java.lang.Integer: void <init>(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : r2 = $r4
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : r2 = $r4 >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToRangeAxesMap>
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: java.util.TreeMap datasetToRangeAxesMap> >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r6 = new java.util.ArrayList
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r6 = new java.util.ArrayList >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>(r1)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : specialinvoke $r6.<java.util.ArrayList: void <init>(java.util.Collection)>(r1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : virtualinvoke $r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : virtualinvoke $r5.<java.util.TreeMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r2, $r6) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r8 = new org.jfree.data.general.DatasetChangeEvent
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r8 = new org.jfree.data.general.DatasetChangeEvent >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r9 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(i0)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : $r9 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.data.category.CategoryDataset getDataset(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : specialinvoke $r8.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, $r9)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : specialinvoke $r8.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, $r9) >>>>>>>> org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>($r8)
org.jfree.chart.plot.CategoryPlot.mapDatasetToRangeAxes : virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: void datasetChanged(org.jfree.data.general.DatasetChangeEvent)>($r8) >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : r2 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis(int)>(i1)
org.jfree.chart.plot.CategoryPlot.datasetChanged : r2 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.axis.ValueAxis getRangeAxis(int)>(i1) >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : r1 = null
org.jfree.chart.plot.CategoryPlot.getRangeAxis : r1 = null >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : $r4 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes>
org.jfree.chart.plot.CategoryPlot.getRangeAxis : $r4 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes> >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : $i1 = virtualinvoke $r4.<org.jfree.util.ObjectList: int size()>()
org.jfree.chart.plot.CategoryPlot.getRangeAxis : $i1 = virtualinvoke $r4.<org.jfree.util.ObjectList: int size()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : if i0 >= $i1
org.jfree.chart.plot.CategoryPlot.getRangeAxis : if i0 >= $i1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes>
org.jfree.chart.plot.CategoryPlot.getRangeAxis : $r5 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes> >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : $r6 = virtualinvoke $r5.<org.jfree.util.ObjectList: java.lang.Object get(int)>(i0)
org.jfree.chart.plot.CategoryPlot.getRangeAxis : $r6 = virtualinvoke $r5.<org.jfree.util.ObjectList: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : r1 = (org.jfree.chart.axis.ValueAxis) $r6
org.jfree.chart.plot.CategoryPlot.getRangeAxis : r1 = (org.jfree.chart.axis.ValueAxis) $r6 >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : if r1 != null
org.jfree.chart.plot.CategoryPlot.getRangeAxis : if r1 != null >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : r2 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.Plot getParent()>()
org.jfree.chart.plot.CategoryPlot.getRangeAxis : r2 = virtualinvoke r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.chart.plot.Plot getParent()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : $z0 = r2 instanceof org.jfree.chart.plot.CategoryPlot
org.jfree.chart.plot.CategoryPlot.getRangeAxis : $z0 = r2 instanceof org.jfree.chart.plot.CategoryPlot >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : if $z0 == 0
org.jfree.chart.plot.CategoryPlot.getRangeAxis : if $z0 == 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.getRangeAxis : return r1
org.jfree.chart.plot.CategoryPlot.getRangeAxis : return r1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : if r2 == null
org.jfree.chart.plot.CategoryPlot.datasetChanged : if r2 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : i1 = i1 + 1
org.jfree.chart.plot.CategoryPlot.datasetChanged : i1 = i1 + 1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.datasetChanged : goto [?= (branch)]
org.jfree.chart.plot.CategoryPlot.datasetChanged : goto [?= (branch)] >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : i0 = 0
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : i0 = 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList domainAxes>
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList domainAxes> >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : $i1 = virtualinvoke $r2.<org.jfree.util.ObjectList: int size()>()
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : $i1 = virtualinvoke $r2.<org.jfree.util.ObjectList: int size()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : if i0 >= $i1
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : if i0 >= $i1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList domainAxes>
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList domainAxes> >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : $r4 = virtualinvoke $r3.<org.jfree.util.ObjectList: java.lang.Object get(int)>(i0)
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : $r4 = virtualinvoke $r3.<org.jfree.util.ObjectList: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : r1 = (org.jfree.chart.axis.CategoryAxis) $r4
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : r1 = (org.jfree.chart.axis.CategoryAxis) $r4 >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : if r1 == null
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : if r1 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : virtualinvoke r1.<org.jfree.chart.axis.CategoryAxis: void configure()>()
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : virtualinvoke r1.<org.jfree.chart.axis.CategoryAxis: void configure()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : i0 = i0 + 1
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : i0 = i0 + 1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureDomainAxes : goto [?= $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList domainAxes>]
org.jfree.chart.plot.CategoryPlot.configureDomainAxes : goto [?= $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList domainAxes>] >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : i0 = 0
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : i0 = 0 >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes>
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes> >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : $i1 = virtualinvoke $r2.<org.jfree.util.ObjectList: int size()>()
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : $i1 = virtualinvoke $r2.<org.jfree.util.ObjectList: int size()>() >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : if i0 >= $i1
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : if i0 >= $i1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes>
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : $r3 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes> >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : $r4 = virtualinvoke $r3.<org.jfree.util.ObjectList: java.lang.Object get(int)>(i0)
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : $r4 = virtualinvoke $r3.<org.jfree.util.ObjectList: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : r1 = (org.jfree.chart.axis.ValueAxis) $r4
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : r1 = (org.jfree.chart.axis.ValueAxis) $r4 >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : if r1 == null
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : if r1 == null >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : i0 = i0 + 1
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : i0 = i0 + 1 >>>>>>>> org.jfree.chart.plot.CategoryPlot.configureRangeAxes : goto [?= $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes>]
org.jfree.chart.plot.CategoryPlot.configureRangeAxes : goto [?= $r2 = r0.<org.jfree.chart.plot.CategoryPlot: org.jfree.util.ObjectList rangeAxes>] >>>>>>>> org.jfree.data.time.Year.compareTo : $z0 = r1 instanceof org.jfree.data.time.Year
org.jfree.data.time.Year.compareTo : $z0 = r1 instanceof org.jfree.data.time.Year >>>>>>>> org.jfree.data.time.Year.compareTo : if $z0 == 0
org.jfree.data.time.Year.compareTo : if $z0 == 0 >>>>>>>> org.jfree.data.time.Year.compareTo : $z1 = r1 instanceof org.jfree.data.time.RegularTimePeriod
org.jfree.data.time.Year.compareTo : $z1 = r1 instanceof org.jfree.data.time.RegularTimePeriod >>>>>>>> org.jfree.data.time.Year.compareTo : if $z1 == 0
org.jfree.data.time.Year.compareTo : if $z1 == 0 >>>>>>>> org.jfree.data.time.Year.compareTo : i0 = 1
org.jfree.data.time.Year.compareTo : i0 = 1 >>>>>>>> org.jfree.data.time.Year.compareTo : return i0
org.jfree.data.time.Year.compareTo : return i0 >>>>>>>> org.jfree.data.time.Year.toString : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.toString : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.toString : $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($s0)
org.jfree.data.time.Year.toString : $r1 = staticinvoke <java.lang.Integer: java.lang.String toString(int)>($s0) >>>>>>>> org.jfree.data.time.Year.toString : return $r1
org.jfree.data.time.Year.toString : return $r1 >>>>>>>> org.jfree.chart.axis.TickUnits.clone : $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>()
org.jfree.chart.axis.TickUnits.clone : $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.jfree.chart.axis.TickUnits.clone : r1 = (org.jfree.chart.axis.TickUnits) $r3
org.jfree.chart.axis.TickUnits.clone : r1 = (org.jfree.chart.axis.TickUnits) $r3 >>>>>>>> org.jfree.chart.axis.TickUnits.clone : $r2 = new java.util.ArrayList
org.jfree.chart.axis.TickUnits.clone : $r2 = new java.util.ArrayList >>>>>>>> org.jfree.chart.axis.TickUnits.clone : $r4 = r0.<org.jfree.chart.axis.TickUnits: java.util.List tickUnits>
org.jfree.chart.axis.TickUnits.clone : $r4 = r0.<org.jfree.chart.axis.TickUnits: java.util.List tickUnits> >>>>>>>> org.jfree.chart.axis.TickUnits.clone : specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r4)
org.jfree.chart.axis.TickUnits.clone : specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r4) >>>>>>>> org.jfree.chart.axis.TickUnits.clone : r1.<org.jfree.chart.axis.TickUnits: java.util.List tickUnits> = $r2
org.jfree.chart.axis.TickUnits.clone : r1.<org.jfree.chart.axis.TickUnits: java.util.List tickUnits> = $r2 >>>>>>>> org.jfree.chart.axis.TickUnits.clone : return r1
org.jfree.chart.axis.TickUnits.clone : return r1 >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter : $r0 = <org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.chart.renderer.xy.XYBarPainter defaultBarPainter>
org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter : $r0 = <org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.chart.renderer.xy.XYBarPainter defaultBarPainter> >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter : return $r0
org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter : return $r0 >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible : $z0 = <org.jfree.chart.renderer.xy.XYBarRenderer: boolean defaultShadowsVisible>
org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible : $z0 = <org.jfree.chart.renderer.xy.XYBarRenderer: boolean defaultShadowsVisible> >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible : return $z0
org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible : return $z0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseLegendShape : r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape baseLegendShape> = r1
org.jfree.chart.renderer.AbstractRenderer.setBaseLegendShape : r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape baseLegendShape> = r1 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseLegendShape : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>()
org.jfree.chart.renderer.AbstractRenderer.setBaseLegendShape : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>() >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : $r1 = new org.jfree.chart.event.RendererChangeEvent
org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : $r1 = new org.jfree.chart.event.RendererChangeEvent >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : specialinvoke $r1.<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>(r0)
org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : specialinvoke $r1.<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>(r0) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>($r1)
org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>($r1) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : $r3 = r0.<org.jfree.chart.renderer.AbstractRenderer: javax.swing.event.EventListenerList listenerList>
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : $r3 = r0.<org.jfree.chart.renderer.AbstractRenderer: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : $i1 = lengthof r2
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : i0 = $i1 - 2
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : if i0 < 0
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter : $r0 = <org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter defaultBarPainter>
org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter : $r0 = <org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter defaultBarPainter> >>>>>>>> org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter : return $r0
org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter : return $r0 >>>>>>>> org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible : $z0 = <org.jfree.chart.renderer.category.BarRenderer: boolean defaultShadowsVisible>
org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible : $z0 = <org.jfree.chart.renderer.category.BarRenderer: boolean defaultShadowsVisible> >>>>>>>> org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible : return $z0
org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible : return $z0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)>(r1, 1)
org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)>(r1, 1) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "position")
org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "position") >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : r0.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition basePositiveItemLabelPosition> = r1
org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : r0.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition basePositiveItemLabelPosition> = r1 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : if z0 == 0
org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : if z0 == 0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>()
org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>() >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)>(r1, 1)
org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)>(r1, 1) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "position")
org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "position") >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : r0.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition baseNegativeItemLabelPosition> = r1
org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : r0.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition baseNegativeItemLabelPosition> = r1 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : if z0 == 0
org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : if z0 == 0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>()
org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>() >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getItemLabelFont : $r1 = r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font itemLabelFont>
org.jfree.chart.renderer.AbstractRenderer.getItemLabelFont : $r1 = r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font itemLabelFont> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getItemLabelFont : return $r1
org.jfree.chart.renderer.AbstractRenderer.getItemLabelFont : return $r1 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getItemLabelAnchorOffset : $d0 = r0.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>
org.jfree.chart.renderer.AbstractRenderer.getItemLabelAnchorOffset : $d0 = r0.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getItemLabelAnchorOffset : return $d0
org.jfree.chart.renderer.AbstractRenderer.getItemLabelAnchorOffset : return $d0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getBaseLegendShape : $r1 = r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape baseLegendShape>
org.jfree.chart.renderer.AbstractRenderer.getBaseLegendShape : $r1 = r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape baseLegendShape> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getBaseLegendShape : return $r1
org.jfree.chart.renderer.AbstractRenderer.getBaseLegendShape : return $r1 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setShape : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void setShape(java.awt.Shape,boolean)>(r1, 1)
org.jfree.chart.renderer.AbstractRenderer.setShape : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void setShape(java.awt.Shape,boolean)>(r1, 1) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setShape : r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape shape> = r1
org.jfree.chart.renderer.AbstractRenderer.setShape : r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape shape> = r1 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setShape : if z0 == 0
org.jfree.chart.renderer.AbstractRenderer.setShape : if z0 == 0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setShape : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>()
org.jfree.chart.renderer.AbstractRenderer.setShape : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>() >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "bar")
org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "bar") >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar : r0.<org.jfree.chart.renderer.xy.XYBarRenderer: java.awt.Shape legendBar> = r1
org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar : r0.<org.jfree.chart.renderer.xy.XYBarRenderer: java.awt.Shape legendBar> = r1 >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar : virtualinvoke r0.<org.jfree.chart.renderer.xy.XYBarRenderer: void fireChangeEvent()>()
org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar : virtualinvoke r0.<org.jfree.chart.renderer.xy.XYBarRenderer: void fireChangeEvent()>() >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.getRowIndex : $r2 = r0.<org.jfree.data.category.DefaultCategoryDataset: org.jfree.data.DefaultKeyedValues2D data>
org.jfree.data.category.DefaultCategoryDataset.getRowIndex : $r2 = r0.<org.jfree.data.category.DefaultCategoryDataset: org.jfree.data.DefaultKeyedValues2D data> >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.getRowIndex : $i0 = virtualinvoke $r2.<org.jfree.data.DefaultKeyedValues2D: int getRowIndex(java.lang.Comparable)>(r1)
org.jfree.data.category.DefaultCategoryDataset.getRowIndex : $i0 = virtualinvoke $r2.<org.jfree.data.DefaultKeyedValues2D: int getRowIndex(java.lang.Comparable)>(r1) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : $r3 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys>
org.jfree.data.DefaultKeyedValues2D.getRowIndex : $r3 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : $i1 = interfaceinvoke $r3.<java.util.List: int indexOf(java.lang.Object)>(r1)
org.jfree.data.DefaultKeyedValues2D.getRowIndex : $i1 = interfaceinvoke $r3.<java.util.List: int indexOf(java.lang.Object)>(r1) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : return $i1
org.jfree.data.DefaultKeyedValues2D.getRowIndex : return $i1 >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.getRowIndex : return $i0
org.jfree.data.category.DefaultCategoryDataset.getRowIndex : return $i0 >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.getColumnIndex : $r2 = r0.<org.jfree.data.category.DefaultCategoryDataset: org.jfree.data.DefaultKeyedValues2D data>
org.jfree.data.category.DefaultCategoryDataset.getColumnIndex : $r2 = r0.<org.jfree.data.category.DefaultCategoryDataset: org.jfree.data.DefaultKeyedValues2D data> >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.getColumnIndex : $i0 = virtualinvoke $r2.<org.jfree.data.DefaultKeyedValues2D: int getColumnIndex(java.lang.Comparable)>(r1)
org.jfree.data.category.DefaultCategoryDataset.getColumnIndex : $i0 = virtualinvoke $r2.<org.jfree.data.DefaultKeyedValues2D: int getColumnIndex(java.lang.Comparable)>(r1) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getColumnIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "key")
org.jfree.data.DefaultKeyedValues2D.getColumnIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "key") >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getColumnIndex : $r2 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys>
org.jfree.data.DefaultKeyedValues2D.getColumnIndex : $r2 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getColumnIndex : $i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>(r1)
org.jfree.data.DefaultKeyedValues2D.getColumnIndex : $i0 = interfaceinvoke $r2.<java.util.List: int indexOf(java.lang.Object)>(r1) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getColumnIndex : return $i0
org.jfree.data.DefaultKeyedValues2D.getColumnIndex : return $i0 >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.getColumnIndex : return $i0
org.jfree.data.category.DefaultCategoryDataset.getColumnIndex : return $i0 >>>>>>>> org.jfree.chart.entity.ChartEntity.setToolTipText : r0.<org.jfree.chart.entity.ChartEntity: java.lang.String toolTipText> = r1
org.jfree.chart.entity.ChartEntity.setToolTipText : r0.<org.jfree.chart.entity.ChartEntity: java.lang.String toolTipText> = r1 >>>>>>>> org.jfree.chart.axis.TickUnits.equals : if r1 != r0
org.jfree.chart.axis.TickUnits.equals : if r1 != r0 >>>>>>>> org.jfree.chart.axis.TickUnits.equals : $z0 = r1 instanceof org.jfree.chart.axis.TickUnits
org.jfree.chart.axis.TickUnits.equals : $z0 = r1 instanceof org.jfree.chart.axis.TickUnits >>>>>>>> org.jfree.chart.axis.TickUnits.equals : if $z0 != 0
org.jfree.chart.axis.TickUnits.equals : if $z0 != 0 >>>>>>>> org.jfree.chart.axis.TickUnits.equals : return 0
org.jfree.chart.axis.TickUnits.equals : return 0 >>>>>>>> org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : $d4 = staticinvoke <java.lang.Math: double log(double)>(d0)
org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : $d4 = staticinvoke <java.lang.Math: double log(double)>(d0) >>>>>>>> org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : $d1 = <org.jfree.chart.axis.StandardTickUnitSource: double LOG_10_VALUE>
org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : $d1 = <org.jfree.chart.axis.StandardTickUnitSource: double LOG_10_VALUE> >>>>>>>> org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : d2 = $d4 / $d1
org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : d2 = $d4 / $d1 >>>>>>>> org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : d3 = staticinvoke <java.lang.Math: double ceil(double)>(d2)
org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : d3 = staticinvoke <java.lang.Math: double ceil(double)>(d2) >>>>>>>> org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : $r1 = new org.jfree.chart.axis.NumberTickUnit
org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : $r1 = new org.jfree.chart.axis.NumberTickUnit >>>>>>>> org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : $d5 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, d3)
org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : $d5 = staticinvoke <java.lang.Math: double pow(double,double)>(10.0, d3) >>>>>>>> org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : $r2 = new java.text.DecimalFormat
org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : $r2 = new java.text.DecimalFormat >>>>>>>> org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : specialinvoke $r2.<java.text.DecimalFormat: void <init>(java.lang.String)>("0.0E0")
org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : specialinvoke $r2.<java.text.DecimalFormat: void <init>(java.lang.String)>("0.0E0") >>>>>>>> org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : specialinvoke $r1.<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>($d5, $r2)
org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : specialinvoke $r1.<org.jfree.chart.axis.NumberTickUnit: void <init>(double,java.text.NumberFormat)>($d5, $r2) >>>>>>>> org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : return $r1
org.jfree.chart.axis.StandardTickUnitSource.getCeilingTickUnit : return $r1 >>>>>>>> org.jfree.chart.axis.TickUnits.add : if r1 != null
org.jfree.chart.axis.TickUnits.add : if r1 != null >>>>>>>> org.jfree.chart.axis.TickUnits.add : $r3 = r0.<org.jfree.chart.axis.TickUnits: java.util.List tickUnits>
org.jfree.chart.axis.TickUnits.add : $r3 = r0.<org.jfree.chart.axis.TickUnits: java.util.List tickUnits> >>>>>>>> org.jfree.chart.axis.TickUnits.add : interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1)
org.jfree.chart.axis.TickUnits.add : interfaceinvoke $r3.<java.util.List: boolean add(java.lang.Object)>(r1) >>>>>>>> org.jfree.chart.axis.TickUnits.add : $r4 = r0.<org.jfree.chart.axis.TickUnits: java.util.List tickUnits>
org.jfree.chart.axis.TickUnits.add : $r4 = r0.<org.jfree.chart.axis.TickUnits: java.util.List tickUnits> >>>>>>>> org.jfree.chart.axis.TickUnits.add : staticinvoke <java.util.Collections: void sort(java.util.List)>($r4)
org.jfree.chart.axis.TickUnits.add : staticinvoke <java.util.Collections: void sort(java.util.List)>($r4) >>>>>>>> org.jfree.data.time.Month.compareTo : $z0 = r1 instanceof org.jfree.data.time.Month
org.jfree.data.time.Month.compareTo : $z0 = r1 instanceof org.jfree.data.time.Month >>>>>>>> org.jfree.data.time.Month.compareTo : if $z0 == 0
org.jfree.data.time.Month.compareTo : if $z0 == 0 >>>>>>>> org.jfree.data.time.Month.compareTo : $z1 = r1 instanceof org.jfree.data.time.RegularTimePeriod
org.jfree.data.time.Month.compareTo : $z1 = r1 instanceof org.jfree.data.time.RegularTimePeriod >>>>>>>> org.jfree.data.time.Month.compareTo : if $z1 == 0
org.jfree.data.time.Month.compareTo : if $z1 == 0 >>>>>>>> org.jfree.data.time.Month.compareTo : i0 = 0
org.jfree.data.time.Month.compareTo : i0 = 0 >>>>>>>> org.jfree.data.time.Month.compareTo : goto [?= return i0]
org.jfree.data.time.Month.compareTo : goto [?= return i0] >>>>>>>> org.jfree.data.time.Month.compareTo : return i0
org.jfree.data.time.Month.compareTo : return i0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : $r5 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows>
org.jfree.data.DefaultKeyedValues2D.setValue : $r5 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0)
org.jfree.data.DefaultKeyedValues2D.setValue : $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : r4 = (org.jfree.data.DefaultKeyedValues) $r6
org.jfree.data.DefaultKeyedValues2D.setValue : r4 = (org.jfree.data.DefaultKeyedValues) $r6 >>>>>>>> org.jfree.chart.axis.NumberTickUnit.hashCode : i0 = specialinvoke r0.<org.jfree.chart.axis.TickUnit: int hashCode()>()
org.jfree.chart.axis.NumberTickUnit.hashCode : i0 = specialinvoke r0.<org.jfree.chart.axis.TickUnit: int hashCode()>() >>>>>>>> org.jfree.chart.axis.TickUnit.hashCode : $d0 = r0.<org.jfree.chart.axis.TickUnit: double size>
org.jfree.chart.axis.TickUnit.hashCode : $d0 = r0.<org.jfree.chart.axis.TickUnit: double size> >>>>>>>> org.jfree.chart.axis.TickUnit.hashCode : $b1 = $d0 cmpl 0.0
org.jfree.chart.axis.TickUnit.hashCode : $b1 = $d0 cmpl 0.0 >>>>>>>> org.jfree.chart.axis.TickUnit.hashCode : if $b1 == 0
org.jfree.chart.axis.TickUnit.hashCode : if $b1 == 0 >>>>>>>> org.jfree.chart.axis.TickUnit.hashCode : $d1 = r0.<org.jfree.chart.axis.TickUnit: double size>
org.jfree.chart.axis.TickUnit.hashCode : $d1 = r0.<org.jfree.chart.axis.TickUnit: double size> >>>>>>>> org.jfree.chart.axis.TickUnit.hashCode : $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1)
org.jfree.chart.axis.TickUnit.hashCode : $l2 = staticinvoke <java.lang.Double: long doubleToLongBits(double)>($d1) >>>>>>>> org.jfree.chart.axis.TickUnit.hashCode : goto [?= l0 = $l2]
org.jfree.chart.axis.TickUnit.hashCode : goto [?= l0 = $l2] >>>>>>>> org.jfree.chart.axis.TickUnit.hashCode : l0 = $l2
org.jfree.chart.axis.TickUnit.hashCode : l0 = $l2 >>>>>>>> org.jfree.chart.axis.TickUnit.hashCode : $l3 = l0 >>> 32
org.jfree.chart.axis.TickUnit.hashCode : $l3 = l0 >>> 32 >>>>>>>> org.jfree.chart.axis.TickUnit.hashCode : $l4 = l0 ^ $l3
org.jfree.chart.axis.TickUnit.hashCode : $l4 = l0 ^ $l3 >>>>>>>> org.jfree.chart.axis.TickUnit.hashCode : $i5 = (int) $l4
org.jfree.chart.axis.TickUnit.hashCode : $i5 = (int) $l4 >>>>>>>> org.jfree.chart.axis.TickUnit.hashCode : return $i5
org.jfree.chart.axis.TickUnit.hashCode : return $i5 >>>>>>>> org.jfree.chart.axis.NumberTickUnit.hashCode : $i1 = 29 * i0
org.jfree.chart.axis.NumberTickUnit.hashCode : $i1 = 29 * i0 >>>>>>>> org.jfree.chart.axis.NumberTickUnit.hashCode : $r1 = r0.<org.jfree.chart.axis.NumberTickUnit: java.text.NumberFormat formatter>
org.jfree.chart.axis.NumberTickUnit.hashCode : $r1 = r0.<org.jfree.chart.axis.NumberTickUnit: java.text.NumberFormat formatter> >>>>>>>> org.jfree.chart.axis.NumberTickUnit.hashCode : if $r1 == null
org.jfree.chart.axis.NumberTickUnit.hashCode : if $r1 == null >>>>>>>> org.jfree.chart.axis.NumberTickUnit.hashCode : $r2 = r0.<org.jfree.chart.axis.NumberTickUnit: java.text.NumberFormat formatter>
org.jfree.chart.axis.NumberTickUnit.hashCode : $r2 = r0.<org.jfree.chart.axis.NumberTickUnit: java.text.NumberFormat formatter> >>>>>>>> org.jfree.chart.axis.NumberTickUnit.hashCode : $i2 = virtualinvoke $r2.<java.text.NumberFormat: int hashCode()>()
org.jfree.chart.axis.NumberTickUnit.hashCode : $i2 = virtualinvoke $r2.<java.text.NumberFormat: int hashCode()>() >>>>>>>> org.jfree.chart.axis.NumberTickUnit.hashCode : goto [?= i3 = $i1 + $i2]
org.jfree.chart.axis.NumberTickUnit.hashCode : goto [?= i3 = $i1 + $i2] >>>>>>>> org.jfree.chart.axis.NumberTickUnit.hashCode : i3 = $i1 + $i2
org.jfree.chart.axis.NumberTickUnit.hashCode : i3 = $i1 + $i2 >>>>>>>> org.jfree.chart.axis.NumberTickUnit.hashCode : return i3
org.jfree.chart.axis.NumberTickUnit.hashCode : return i3 >>>>>>>> org.jfree.chart.axis.NumberTickUnit.equals : if r1 != r0
org.jfree.chart.axis.NumberTickUnit.equals : if r1 != r0 >>>>>>>> org.jfree.chart.axis.NumberTickUnit.equals : $z0 = r1 instanceof org.jfree.chart.axis.NumberTickUnit
org.jfree.chart.axis.NumberTickUnit.equals : $z0 = r1 instanceof org.jfree.chart.axis.NumberTickUnit >>>>>>>> org.jfree.chart.axis.NumberTickUnit.equals : if $z0 != 0
org.jfree.chart.axis.NumberTickUnit.equals : if $z0 != 0 >>>>>>>> org.jfree.chart.axis.NumberTickUnit.equals : return 0
org.jfree.chart.axis.NumberTickUnit.equals : return 0 >>>>>>>> org.jfree.data.time.Month.previous : $i0 = r0.<org.jfree.data.time.Month: int month>
org.jfree.data.time.Month.previous : $i0 = r0.<org.jfree.data.time.Month: int month> >>>>>>>> org.jfree.data.time.Month.previous : if $i0 == 1
org.jfree.data.time.Month.previous : if $i0 == 1 >>>>>>>> org.jfree.data.time.Month.previous : $i4 = r0.<org.jfree.data.time.Month: int year>
org.jfree.data.time.Month.previous : $i4 = r0.<org.jfree.data.time.Month: int year> >>>>>>>> org.jfree.data.time.Month.previous : if $i4 <= 1900
org.jfree.data.time.Month.previous : if $i4 <= 1900 >>>>>>>> org.jfree.data.time.Month.previous : r1 = null
org.jfree.data.time.Month.previous : r1 = null >>>>>>>> org.jfree.data.time.Month.previous : return r1
org.jfree.data.time.Month.previous : return r1 >>>>>>>> org.jfree.data.time.Month.getSerialIndex : $i0 = r0.<org.jfree.data.time.Month: int year>
org.jfree.data.time.Month.getSerialIndex : $i0 = r0.<org.jfree.data.time.Month: int year> >>>>>>>> org.jfree.data.time.Month.getSerialIndex : $l1 = (long) $i0
org.jfree.data.time.Month.getSerialIndex : $l1 = (long) $i0 >>>>>>>> org.jfree.data.time.Month.getSerialIndex : $l2 = $l1 * 12L
org.jfree.data.time.Month.getSerialIndex : $l2 = $l1 * 12L >>>>>>>> org.jfree.data.time.Month.getSerialIndex : $i3 = r0.<org.jfree.data.time.Month: int month>
org.jfree.data.time.Month.getSerialIndex : $i3 = r0.<org.jfree.data.time.Month: int month> >>>>>>>> org.jfree.data.time.Month.getSerialIndex : $l4 = (long) $i3
org.jfree.data.time.Month.getSerialIndex : $l4 = (long) $i3 >>>>>>>> org.jfree.data.time.Month.getSerialIndex : $l5 = $l2 + $l4
org.jfree.data.time.Month.getSerialIndex : $l5 = $l2 + $l4 >>>>>>>> org.jfree.data.time.Month.getSerialIndex : return $l5
org.jfree.data.time.Month.getSerialIndex : return $l5 >>>>>>>> org.jfree.data.time.Month.getYear : $r1 = new org.jfree.data.time.Year
org.jfree.data.time.Month.getYear : $r1 = new org.jfree.data.time.Year >>>>>>>> org.jfree.data.time.Month.getYear : $i0 = r0.<org.jfree.data.time.Month: int year>
org.jfree.data.time.Month.getYear : $i0 = r0.<org.jfree.data.time.Month: int year> >>>>>>>> org.jfree.data.time.Month.getYear : specialinvoke $r1.<org.jfree.data.time.Year: void <init>(int)>($i0)
org.jfree.data.time.Month.getYear : specialinvoke $r1.<org.jfree.data.time.Year: void <init>(int)>($i0) >>>>>>>> org.jfree.data.time.Month.getYear : return $r1
org.jfree.data.time.Month.getYear : return $r1 >>>>>>>> org.jfree.data.time.TimeTableXYDataset.remove : virtualinvoke r0.<org.jfree.data.time.TimeTableXYDataset: void remove(org.jfree.data.time.TimePeriod,java.lang.Comparable,boolean)>(r1, r2, 1)
org.jfree.data.time.TimeTableXYDataset.remove : virtualinvoke r0.<org.jfree.data.time.TimeTableXYDataset: void remove(org.jfree.data.time.TimePeriod,java.lang.Comparable,boolean)>(r1, r2, 1) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : z0 = 0
org.jfree.data.DefaultKeyedValues2D.removeValue : z0 = 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : $r12 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows>
org.jfree.data.DefaultKeyedValues2D.removeValue : $r12 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i4)
org.jfree.data.DefaultKeyedValues2D.removeValue : $r13 = interfaceinvoke $r12.<java.util.List: java.lang.Object get(int)>(i4) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : r14 = (org.jfree.data.DefaultKeyedValues) $r13
org.jfree.data.DefaultKeyedValues2D.removeValue : r14 = (org.jfree.data.DefaultKeyedValues) $r13 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : i3 = virtualinvoke r14.<org.jfree.data.DefaultKeyedValues: int getIndex(java.lang.Comparable)>(r2)
org.jfree.data.DefaultKeyedValues2D.removeValue : i3 = virtualinvoke r14.<org.jfree.data.DefaultKeyedValues: int getIndex(java.lang.Comparable)>(r2) >>>>>>>> org.jfree.data.DefaultKeyedValues.getIndex : $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>()
org.jfree.data.DefaultKeyedValues.getIndex : $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>() >>>>>>>> org.jfree.data.DefaultKeyedValues.getIndex : return $i0
org.jfree.data.DefaultKeyedValues.getIndex : return $i0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : if i3 < 0
org.jfree.data.DefaultKeyedValues2D.removeValue : if i3 < 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : $r15 = virtualinvoke r14.<org.jfree.data.DefaultKeyedValues: java.lang.Number getValue(int)>(i3)
org.jfree.data.DefaultKeyedValues2D.removeValue : $r15 = virtualinvoke r14.<org.jfree.data.DefaultKeyedValues: java.lang.Number getValue(int)>(i3) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : if $r15 == null
org.jfree.data.DefaultKeyedValues2D.removeValue : if $r15 == null >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : i4 = i4 + 1
org.jfree.data.DefaultKeyedValues2D.removeValue : i4 = i4 + 1 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : $r17 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows>
org.jfree.data.DefaultKeyedValues2D.removeValue : $r17 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(i6)
org.jfree.data.DefaultKeyedValues2D.removeValue : $r18 = interfaceinvoke $r17.<java.util.List: java.lang.Object get(int)>(i6) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : r19 = (org.jfree.data.DefaultKeyedValues) $r18
org.jfree.data.DefaultKeyedValues2D.removeValue : r19 = (org.jfree.data.DefaultKeyedValues) $r18 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : i8 = virtualinvoke r19.<org.jfree.data.DefaultKeyedValues: int getIndex(java.lang.Comparable)>(r2)
org.jfree.data.DefaultKeyedValues2D.removeValue : i8 = virtualinvoke r19.<org.jfree.data.DefaultKeyedValues: int getIndex(java.lang.Comparable)>(r2) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : if i8 < 0
org.jfree.data.DefaultKeyedValues2D.removeValue : if i8 < 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : virtualinvoke r19.<org.jfree.data.DefaultKeyedValues: void removeValue(int)>(i8)
org.jfree.data.DefaultKeyedValues2D.removeValue : virtualinvoke r19.<org.jfree.data.DefaultKeyedValues: void removeValue(int)>(i8) >>>>>>>> org.jfree.data.DefaultKeyedValues.removeValue : $r1 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList keys>
org.jfree.data.DefaultKeyedValues.removeValue : $r1 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList keys> >>>>>>>> org.jfree.data.DefaultKeyedValues.removeValue : virtualinvoke $r1.<java.util.ArrayList: java.lang.Object remove(int)>(i0)
org.jfree.data.DefaultKeyedValues.removeValue : virtualinvoke $r1.<java.util.ArrayList: java.lang.Object remove(int)>(i0) >>>>>>>> org.jfree.data.DefaultKeyedValues.removeValue : $r3 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList values>
org.jfree.data.DefaultKeyedValues.removeValue : $r3 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList values> >>>>>>>> org.jfree.data.DefaultKeyedValues.removeValue : virtualinvoke $r3.<java.util.ArrayList: java.lang.Object remove(int)>(i0)
org.jfree.data.DefaultKeyedValues.removeValue : virtualinvoke $r3.<java.util.ArrayList: java.lang.Object remove(int)>(i0) >>>>>>>> org.jfree.data.DefaultKeyedValues.removeValue : specialinvoke r0.<org.jfree.data.DefaultKeyedValues: void rebuildIndex()>()
org.jfree.data.DefaultKeyedValues.removeValue : specialinvoke r0.<org.jfree.data.DefaultKeyedValues: void rebuildIndex()>() >>>>>>>> org.jfree.data.DefaultKeyedValues.rebuildIndex : $r3 = r0.<org.jfree.data.DefaultKeyedValues: java.util.HashMap indexMap>
org.jfree.data.DefaultKeyedValues.rebuildIndex : $r3 = r0.<org.jfree.data.DefaultKeyedValues: java.util.HashMap indexMap> >>>>>>>> org.jfree.data.DefaultKeyedValues.rebuildIndex : virtualinvoke $r3.<java.util.HashMap: void clear()>()
org.jfree.data.DefaultKeyedValues.rebuildIndex : virtualinvoke $r3.<java.util.HashMap: void clear()>() >>>>>>>> org.jfree.data.DefaultKeyedValues.rebuildIndex : i0 = 0
org.jfree.data.DefaultKeyedValues.rebuildIndex : i0 = 0 >>>>>>>> org.jfree.data.DefaultKeyedValues.rebuildIndex : $r4 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList keys>
org.jfree.data.DefaultKeyedValues.rebuildIndex : $r4 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList keys> >>>>>>>> org.jfree.data.DefaultKeyedValues.rebuildIndex : $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>()
org.jfree.data.DefaultKeyedValues.rebuildIndex : $i1 = virtualinvoke $r4.<java.util.ArrayList: int size()>() >>>>>>>> org.jfree.data.DefaultKeyedValues.rebuildIndex : if i0 >= $i1
org.jfree.data.DefaultKeyedValues.rebuildIndex : if i0 >= $i1 >>>>>>>> org.jfree.data.DefaultKeyedValues.rebuildIndex : $r5 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList keys>
org.jfree.data.DefaultKeyedValues.rebuildIndex : $r5 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList keys> >>>>>>>> org.jfree.data.DefaultKeyedValues.rebuildIndex : r1 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i0)
org.jfree.data.DefaultKeyedValues.rebuildIndex : r1 = virtualinvoke $r5.<java.util.ArrayList: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.data.DefaultKeyedValues.rebuildIndex : $r6 = r0.<org.jfree.data.DefaultKeyedValues: java.util.HashMap indexMap>
org.jfree.data.DefaultKeyedValues.rebuildIndex : $r6 = r0.<org.jfree.data.DefaultKeyedValues: java.util.HashMap indexMap> >>>>>>>> org.jfree.data.DefaultKeyedValues.rebuildIndex : $r2 = new java.lang.Integer
org.jfree.data.DefaultKeyedValues.rebuildIndex : $r2 = new java.lang.Integer >>>>>>>> org.jfree.data.DefaultKeyedValues.rebuildIndex : specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i0)
org.jfree.data.DefaultKeyedValues.rebuildIndex : specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i0) >>>>>>>> org.jfree.data.DefaultKeyedValues.rebuildIndex : virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2)
org.jfree.data.DefaultKeyedValues.rebuildIndex : virtualinvoke $r6.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r2) >>>>>>>> org.jfree.data.DefaultKeyedValues.rebuildIndex : i0 = i0 + 1
org.jfree.data.DefaultKeyedValues.rebuildIndex : i0 = i0 + 1 >>>>>>>> org.jfree.data.DefaultKeyedValues.rebuildIndex : goto [?= $r4 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList keys>]
org.jfree.data.DefaultKeyedValues.rebuildIndex : goto [?= $r4 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList keys>] >>>>>>>> org.jfree.data.DefaultKeyedValues2D.removeValue : i6 = i6 + 1
org.jfree.data.DefaultKeyedValues2D.removeValue : i6 = i6 + 1 >>>>>>>> org.jfree.data.time.TimeTableXYDataset.remove : virtualinvoke r0.<org.jfree.data.time.TimeTableXYDataset: void fireDatasetChanged()>()
org.jfree.data.time.TimeTableXYDataset.remove : virtualinvoke r0.<org.jfree.data.time.TimeTableXYDataset: void fireDatasetChanged()>() >>>>>>>> org.jfree.data.time.TimeTableXYDataset.getStartXValue : $r2 = r0.<org.jfree.data.time.TimeTableXYDataset: org.jfree.data.DefaultKeyedValues2D values>
org.jfree.data.time.TimeTableXYDataset.getStartXValue : $r2 = r0.<org.jfree.data.time.TimeTableXYDataset: org.jfree.data.DefaultKeyedValues2D values> >>>>>>>> org.jfree.data.time.TimeTableXYDataset.getStartXValue : $r3 = virtualinvoke $r2.<org.jfree.data.DefaultKeyedValues2D: java.lang.Comparable getRowKey(int)>(i1)
org.jfree.data.time.TimeTableXYDataset.getStartXValue : $r3 = virtualinvoke $r2.<org.jfree.data.DefaultKeyedValues2D: java.lang.Comparable getRowKey(int)>(i1) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowKey : $r1 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys>
org.jfree.data.DefaultKeyedValues2D.getRowKey : $r1 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowKey : $r2 = interfaceinvoke $r1.<java.util.List: java.lang.Object get(int)>(i0)
