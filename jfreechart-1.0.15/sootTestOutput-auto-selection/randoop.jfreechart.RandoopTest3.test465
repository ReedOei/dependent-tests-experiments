org.jfree.data.time.TimeSeriesCollection.getItemCount : $r1 = virtualinvoke r0.<org.jfree.data.time.TimeSeriesCollection: org.jfree.data.time.TimeSeries getSeries(int)>(i0) >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : if i0 < 0
org.jfree.data.time.TimeSeriesCollection.getSeries : if i0 < 0 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : $i1 = virtualinvoke r0.<org.jfree.data.time.TimeSeriesCollection: int getSeriesCount()>()
org.jfree.data.time.TimeSeriesCollection.getSeries : $i1 = virtualinvoke r0.<org.jfree.data.time.TimeSeriesCollection: int getSeriesCount()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeriesCount : $r1 = r0.<org.jfree.data.time.TimeSeriesCollection: java.util.List data>
org.jfree.data.time.TimeSeriesCollection.getSeriesCount : $r1 = r0.<org.jfree.data.time.TimeSeriesCollection: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeriesCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.jfree.data.time.TimeSeriesCollection.getSeriesCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeriesCount : return $i0
org.jfree.data.time.TimeSeriesCollection.getSeriesCount : return $i0 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : if i0 < $i1
org.jfree.data.time.TimeSeriesCollection.getSeries : if i0 < $i1 >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : $r2 = new java.lang.IllegalArgumentException
org.jfree.data.time.TimeSeriesCollection.getSeries : $r2 = new java.lang.IllegalArgumentException >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : $r1 = new java.lang.StringBuilder
org.jfree.data.time.TimeSeriesCollection.getSeries : $r1 = new java.lang.StringBuilder >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>()
org.jfree.data.time.TimeSeriesCollection.getSeries : specialinvoke $r1.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The \'series\' argument is out of bounds (")
org.jfree.data.time.TimeSeriesCollection.getSeries : $r3 = virtualinvoke $r1.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("The \'series\' argument is out of bounds (") >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0)
org.jfree.data.time.TimeSeriesCollection.getSeries : $r4 = virtualinvoke $r3.<java.lang.StringBuilder: java.lang.StringBuilder append(int)>(i0) >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").")
org.jfree.data.time.TimeSeriesCollection.getSeries : $r5 = virtualinvoke $r4.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(").") >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>()
org.jfree.data.time.TimeSeriesCollection.getSeries : $r6 = virtualinvoke $r5.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6)
org.jfree.data.time.TimeSeriesCollection.getSeries : specialinvoke $r2.<java.lang.IllegalArgumentException: void <init>(java.lang.String)>($r6) >>>>>>>> org.jfree.data.time.TimeSeriesCollection.getSeries : throw $r2
