org.jfree.chart.util.ParamChecks.nullNotPermitted : if r0 != null >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseLegendShape : r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape baseLegendShape> = r1
org.jfree.chart.renderer.AbstractRenderer.setBaseLegendShape : r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape baseLegendShape> = r1 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseLegendShape : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>()
org.jfree.chart.renderer.AbstractRenderer.setBaseLegendShape : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>() >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : $r1 = new org.jfree.chart.event.RendererChangeEvent
org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : $r1 = new org.jfree.chart.event.RendererChangeEvent >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : specialinvoke $r1.<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>(r0)
org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : specialinvoke $r1.<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>(r0) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>($r1)
org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>($r1) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : $r3 = r0.<org.jfree.chart.renderer.AbstractRenderer: javax.swing.event.EventListenerList listenerList>
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : $r3 = r0.<org.jfree.chart.renderer.AbstractRenderer: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : $i1 = lengthof r2
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : i0 = $i1 - 2
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : if i0 < 0
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter : $r0 = <org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter defaultBarPainter>
org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter : $r0 = <org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter defaultBarPainter> >>>>>>>> org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter : return $r0
org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter : return $r0 >>>>>>>> org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible : $z0 = <org.jfree.chart.renderer.category.BarRenderer: boolean defaultShadowsVisible>
org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible : $z0 = <org.jfree.chart.renderer.category.BarRenderer: boolean defaultShadowsVisible> >>>>>>>> org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible : return $z0
org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible : return $z0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : $r3 = r0.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.util.BooleanList seriesVisibleList>
org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : $r3 = r0.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.util.BooleanList seriesVisibleList> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : virtualinvoke $r3.<org.jfree.util.BooleanList: void setBoolean(int,java.lang.Boolean)>(i0, r1)
org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : virtualinvoke $r3.<org.jfree.util.BooleanList: void setBoolean(int,java.lang.Boolean)>(i0, r1) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : if z0 == 0
org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : if z0 == 0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : $r4 = new org.jfree.chart.event.RendererChangeEvent
org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : $r4 = new org.jfree.chart.event.RendererChangeEvent >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : specialinvoke $r4.<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object,boolean)>(r0, 1)
org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : specialinvoke $r4.<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object,boolean)>(r0, 1) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : r2 = $r4
org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : r2 = $r4 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>(r2)
org.jfree.chart.renderer.AbstractRenderer.setSeriesVisible : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>(r2) >>>>>>>> org.jfree.chart.StandardChartTheme.getLegendItemPaint : $r1 = r0.<org.jfree.chart.StandardChartTheme: java.awt.Paint legendItemPaint>
org.jfree.chart.StandardChartTheme.getLegendItemPaint : $r1 = r0.<org.jfree.chart.StandardChartTheme: java.awt.Paint legendItemPaint> >>>>>>>> org.jfree.chart.StandardChartTheme.getLegendItemPaint : return $r1
org.jfree.chart.StandardChartTheme.getLegendItemPaint : return $r1 >>>>>>>> org.jfree.chart.StandardChartTheme.getSubtitlePaint : $r1 = r0.<org.jfree.chart.StandardChartTheme: java.awt.Paint subtitlePaint>
org.jfree.chart.StandardChartTheme.getSubtitlePaint : $r1 = r0.<org.jfree.chart.StandardChartTheme: java.awt.Paint subtitlePaint> >>>>>>>> org.jfree.chart.StandardChartTheme.getSubtitlePaint : return $r1
org.jfree.chart.StandardChartTheme.getSubtitlePaint : return $r1 >>>>>>>> org.jfree.chart.StandardChartTheme.getTickLabelPaint : $r1 = r0.<org.jfree.chart.StandardChartTheme: java.awt.Paint tickLabelPaint>
org.jfree.chart.StandardChartTheme.getTickLabelPaint : $r1 = r0.<org.jfree.chart.StandardChartTheme: java.awt.Paint tickLabelPaint> >>>>>>>> org.jfree.chart.StandardChartTheme.getTickLabelPaint : return $r1
org.jfree.chart.StandardChartTheme.getTickLabelPaint : return $r1 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseLegendTextPaint : r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint baseLegendTextPaint> = r1
org.jfree.chart.renderer.AbstractRenderer.setBaseLegendTextPaint : r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Paint baseLegendTextPaint> = r1 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseLegendTextPaint : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>()
org.jfree.chart.renderer.AbstractRenderer.setBaseLegendTextPaint : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>() >>>>>>>> org.jfree.chart.util.ResourceBundleWrapper.getBundle : $r1 = <org.jfree.chart.util.ResourceBundleWrapper: java.net.URLClassLoader noCodeBaseClassLoader>
org.jfree.chart.util.ResourceBundleWrapper.getBundle : $r1 = <org.jfree.chart.util.ResourceBundleWrapper: java.net.URLClassLoader noCodeBaseClassLoader> >>>>>>>> org.jfree.chart.util.ResourceBundleWrapper.getBundle : if $r1 == null
org.jfree.chart.util.ResourceBundleWrapper.getBundle : if $r1 == null >>>>>>>> org.jfree.chart.util.ResourceBundleWrapper.getBundle : $r5 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>(r0)
org.jfree.chart.util.ResourceBundleWrapper.getBundle : $r5 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>(r0) >>>>>>>> org.jfree.chart.util.ResourceBundleWrapper.getBundle : return $r5
org.jfree.chart.util.ResourceBundleWrapper.getBundle : return $r5 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getRowCount : $r1 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys>
org.jfree.data.category.DefaultIntervalCategoryDataset.getRowCount : $r1 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getRowCount : $i0 = lengthof $r1
org.jfree.data.category.DefaultIntervalCategoryDataset.getRowCount : $i0 = lengthof $r1 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getRowCount : return $i0
org.jfree.data.category.DefaultIntervalCategoryDataset.getRowCount : return $i0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "seriesKeys")
org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "seriesKeys") >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : $i0 = lengthof r1
org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : $i0 = lengthof r1 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : $i1 = virtualinvoke r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesCount()>()
org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : $i1 = virtualinvoke r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesCount()>() >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : i0 = 0
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : i0 = 0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : $r1 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData>
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : $r1 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : if $r1 == null
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : if $r1 == null >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : $r2 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData>
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : $r2 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : i0 = lengthof $r2
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : i0 = lengthof $r2 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : return i0
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : return i0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : if $i0 == $i1
org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : if $i0 == $i1 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> = r1
org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> = r1 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : virtualinvoke r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: void fireDatasetChanged()>()
org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : virtualinvoke r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: void fireDatasetChanged()>() >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : $r1 = new org.jfree.data.general.DatasetChangeEvent
org.jfree.data.general.AbstractDataset.fireDatasetChanged : $r1 = new org.jfree.data.general.DatasetChangeEvent >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : specialinvoke $r1.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, r0)
org.jfree.data.general.AbstractDataset.fireDatasetChanged : specialinvoke $r1.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, r0) >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : virtualinvoke r0.<org.jfree.data.general.AbstractDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>($r1)
org.jfree.data.general.AbstractDataset.fireDatasetChanged : virtualinvoke r0.<org.jfree.data.general.AbstractDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>($r1) >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : $r3 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList>
org.jfree.data.general.AbstractDataset.notifyListeners : $r3 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.data.general.AbstractDataset.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : $i1 = lengthof r2
org.jfree.data.general.AbstractDataset.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : i0 = $i1 - 2
org.jfree.data.general.AbstractDataset.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : if i0 < 0
org.jfree.data.general.AbstractDataset.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r2 = specialinvoke r0.<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>()
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r2 = specialinvoke r0.<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>() >>>>>>>> org.jfree.data.general.AbstractDataset.clone : $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>()
org.jfree.data.general.AbstractDataset.clone : $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.jfree.data.general.AbstractDataset.clone : r1 = (org.jfree.data.general.AbstractDataset) $r3
org.jfree.data.general.AbstractDataset.clone : r1 = (org.jfree.data.general.AbstractDataset) $r3 >>>>>>>> org.jfree.data.general.AbstractDataset.clone : $r2 = new javax.swing.event.EventListenerList
org.jfree.data.general.AbstractDataset.clone : $r2 = new javax.swing.event.EventListenerList >>>>>>>> org.jfree.data.general.AbstractDataset.clone : specialinvoke $r2.<javax.swing.event.EventListenerList: void <init>()>()
org.jfree.data.general.AbstractDataset.clone : specialinvoke $r2.<javax.swing.event.EventListenerList: void <init>()>() >>>>>>>> org.jfree.data.general.AbstractDataset.clone : r1.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList> = $r2
org.jfree.data.general.AbstractDataset.clone : r1.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList> = $r2 >>>>>>>> org.jfree.data.general.AbstractDataset.clone : return r1
org.jfree.data.general.AbstractDataset.clone : return r1 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1 = (org.jfree.data.category.DefaultIntervalCategoryDataset) $r2
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1 = (org.jfree.data.category.DefaultIntervalCategoryDataset) $r2 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r3 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys>
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r3 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>()
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r5 = (java.lang.Comparable[]) $r4
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r5 = (java.lang.Comparable[]) $r4 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r6 = (java.lang.Comparable[]) $r5
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r6 = (java.lang.Comparable[]) $r5 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys> = $r6
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys> = $r6 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r7 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys>
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r7 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>()
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r9 = (java.lang.Comparable[]) $r8
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r9 = (java.lang.Comparable[]) $r8 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r10 = (java.lang.Comparable[]) $r9
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r10 = (java.lang.Comparable[]) $r9 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> = $r10
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> = $r10 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r11 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData>
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r11 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r12 = staticinvoke <org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] clone(java.lang.Number[][])>($r11)
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r12 = staticinvoke <org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] clone(java.lang.Number[][])>($r11) >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "array")
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "array") >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $i1 = lengthof r0
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $i1 = lengthof r0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1 = newarray (java.lang.Number[])[$i1]
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1 = newarray (java.lang.Number[])[$i1] >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : i0 = 0
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : i0 = 0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $i2 = lengthof r0
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $i2 = lengthof r0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : if i0 >= $i2
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : if i0 >= $i2 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : return r1
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : return r1 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData> = $r12
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData> = $r12 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r13 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] endData>
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r13 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] endData> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r14 = staticinvoke <org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] clone(java.lang.Number[][])>($r13)
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r14 = staticinvoke <org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] clone(java.lang.Number[][])>($r13) >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] endData> = $r14
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] endData> = $r14 >>>>>>>> org.jfree.chart.renderer.category.IntervalBarRenderer.findRangeBounds : $r2 = virtualinvoke r0.<org.jfree.chart.renderer.category.IntervalBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>(r1, 1)
org.jfree.chart.renderer.category.IntervalBarRenderer.findRangeBounds : $r2 = virtualinvoke r0.<org.jfree.chart.renderer.category.IntervalBarRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>(r1, 1) >>>>>>>> org.jfree.chart.renderer.category.BarRenderer.findRangeBounds : if r1 != null
org.jfree.chart.renderer.category.BarRenderer.findRangeBounds : if r1 != null >>>>>>>> org.jfree.chart.renderer.category.BarRenderer.findRangeBounds : r2 = specialinvoke r0.<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>(r1, z0)
org.jfree.chart.renderer.category.BarRenderer.findRangeBounds : r2 = specialinvoke r0.<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>(r1, z0) >>>>>>>> org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : if r1 != null
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : if r1 != null >>>>>>>> org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : $z1 = virtualinvoke r0.<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean getDataBoundsIncludesVisibleSeriesOnly()>()
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : $z1 = virtualinvoke r0.<org.jfree.chart.renderer.category.AbstractCategoryItemRenderer: boolean getDataBoundsIncludesVisibleSeriesOnly()>() >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly : $z0 = r0.<org.jfree.chart.renderer.AbstractRenderer: boolean dataBoundsIncludesVisibleSeriesOnly>
org.jfree.chart.renderer.AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly : $z0 = r0.<org.jfree.chart.renderer.AbstractRenderer: boolean dataBoundsIncludesVisibleSeriesOnly> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly : return $z0
org.jfree.chart.renderer.AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly : return $z0 >>>>>>>> org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : if $z1 == 0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : if $z1 == 0 >>>>>>>> org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : $r3 = new java.util.ArrayList
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : $r3 = new java.util.ArrayList >>>>>>>> org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : specialinvoke $r3.<java.util.ArrayList: void <init>()>()
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : specialinvoke $r3.<java.util.ArrayList: void <init>()>() >>>>>>>> org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : r2 = $r3
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : r2 = $r3 >>>>>>>> org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : i0 = interfaceinvoke r1.<org.jfree.data.category.CategoryDataset: int getRowCount()>()
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : i0 = interfaceinvoke r1.<org.jfree.data.category.CategoryDataset: int getRowCount()>() >>>>>>>> org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : i1 = 0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : i1 = 0 >>>>>>>> org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : if i1 >= i0
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : if i1 >= i0 >>>>>>>> org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : $r5 = staticinvoke <org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)>(r1, r2, z0)
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : $r5 = staticinvoke <org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)>(r1, r2, z0) >>>>>>>> org.jfree.data.general.DatasetUtilities.findRangeBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "dataset")
org.jfree.data.general.DatasetUtilities.findRangeBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "dataset") >>>>>>>> org.jfree.data.general.DatasetUtilities.findRangeBounds : n0 = null
org.jfree.data.general.DatasetUtilities.findRangeBounds : n0 = null >>>>>>>> org.jfree.data.general.DatasetUtilities.findRangeBounds : $z1 = r0 instanceof org.jfree.data.category.CategoryRangeInfo
org.jfree.data.general.DatasetUtilities.findRangeBounds : $z1 = r0 instanceof org.jfree.data.category.CategoryRangeInfo >>>>>>>> org.jfree.data.general.DatasetUtilities.findRangeBounds : if $z1 == 0
org.jfree.data.general.DatasetUtilities.findRangeBounds : if $z1 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.findRangeBounds : r3 = staticinvoke <org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)>(r0, r1, z0)
org.jfree.data.general.DatasetUtilities.findRangeBounds : r3 = staticinvoke <org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateToFindRangeBounds(org.jfree.data.category.CategoryDataset,java.util.List,boolean)>(r0, r1, z0) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "dataset")
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "dataset") >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "visibleSeriesKeys")
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "visibleSeriesKeys") >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : d0 = #Infinity
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : d0 = #Infinity >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : d1 = #-Infinity
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : d1 = #-Infinity >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : i0 = interfaceinvoke r0.<org.jfree.data.category.CategoryDataset: int getColumnCount()>()
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : i0 = interfaceinvoke r0.<org.jfree.data.category.CategoryDataset: int getColumnCount()>() >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnCount : $r1 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys>
org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnCount : $r1 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnCount : $i0 = lengthof $r1
org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnCount : $i0 = lengthof $r1 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnCount : return $i0
org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnCount : return $i0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : if z0 == 0
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : if z0 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : $z1 = r0 instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : $z1 = r0 instanceof org.jfree.data.statistics.BoxAndWhiskerCategoryDataset >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : if $z1 == 0
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : if $z1 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : $z3 = r0 instanceof org.jfree.data.category.IntervalCategoryDataset
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : $z3 = r0 instanceof org.jfree.data.category.IntervalCategoryDataset >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : if $z3 == 0
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : if $z3 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : r8 = (org.jfree.data.category.IntervalCategoryDataset) r0
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : r8 = (org.jfree.data.category.IntervalCategoryDataset) r0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : r9 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : r9 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : $z4 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>()
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : $z4 = interfaceinvoke r9.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : if $z4 == 0
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : if $z4 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : goto [?= $b12 = d0 cmpl #Infinity]
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : goto [?= $b12 = d0 cmpl #Infinity] >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : $b12 = d0 cmpl #Infinity
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : $b12 = d0 cmpl #Infinity >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : if $b12 != 0
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : if $b12 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : return null
org.jfree.data.general.DatasetUtilities.iterateToFindRangeBounds : return null >>>>>>>> org.jfree.data.general.DatasetUtilities.findRangeBounds : return r3
org.jfree.data.general.DatasetUtilities.findRangeBounds : return r3 >>>>>>>> org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : return $r5
org.jfree.chart.renderer.category.AbstractCategoryItemRenderer.findRangeBounds : return $r5 >>>>>>>> org.jfree.chart.renderer.category.BarRenderer.findRangeBounds : if r2 == null
org.jfree.chart.renderer.category.BarRenderer.findRangeBounds : if r2 == null >>>>>>>> org.jfree.chart.renderer.category.BarRenderer.findRangeBounds : return r2
org.jfree.chart.renderer.category.BarRenderer.findRangeBounds : return r2 >>>>>>>> org.jfree.chart.renderer.category.IntervalBarRenderer.findRangeBounds : return $r2
org.jfree.chart.renderer.category.IntervalBarRenderer.findRangeBounds : return $r2 >>>>>>>> org.jfree.data.general.AbstractSeriesDataset.indexOf : i0 = virtualinvoke r0.<org.jfree.data.general.AbstractSeriesDataset: int getSeriesCount()>()
org.jfree.data.general.AbstractSeriesDataset.indexOf : i0 = virtualinvoke r0.<org.jfree.data.general.AbstractSeriesDataset: int getSeriesCount()>() >>>>>>>> org.jfree.data.general.AbstractSeriesDataset.indexOf : i1 = 0
org.jfree.data.general.AbstractSeriesDataset.indexOf : i1 = 0 >>>>>>>> org.jfree.data.general.AbstractSeriesDataset.indexOf : if i1 >= i0
org.jfree.data.general.AbstractSeriesDataset.indexOf : if i1 >= i0 >>>>>>>> org.jfree.data.general.AbstractSeriesDataset.indexOf : return -1
