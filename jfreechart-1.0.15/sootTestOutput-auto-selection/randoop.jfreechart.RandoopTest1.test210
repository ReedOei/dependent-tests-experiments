org.jfree.chart.util.ParamChecks.nullNotPermitted : if r0 != null >>>>>>>> org.jfree.data.time.Day.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Day: long getFirstMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Day.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Day: long getFirstMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : $r2 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate>
org.jfree.data.time.Day.getFirstMillisecond : $r2 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate> >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : i0 = virtualinvoke $r2.<org.jfree.date.SerialDate: int getYYYY()>()
org.jfree.data.time.Day.getFirstMillisecond : i0 = virtualinvoke $r2.<org.jfree.date.SerialDate: int getYYYY()>() >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : $r3 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate>
org.jfree.data.time.Day.getFirstMillisecond : $r3 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate> >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : i1 = virtualinvoke $r3.<org.jfree.date.SerialDate: int getMonth()>()
org.jfree.data.time.Day.getFirstMillisecond : i1 = virtualinvoke $r3.<org.jfree.date.SerialDate: int getMonth()>() >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : $r4 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate>
org.jfree.data.time.Day.getFirstMillisecond : $r4 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate> >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : i2 = virtualinvoke $r4.<org.jfree.date.SerialDate: int getDayOfMonth()>()
org.jfree.data.time.Day.getFirstMillisecond : i2 = virtualinvoke $r4.<org.jfree.date.SerialDate: int getDayOfMonth()>() >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void clear()>()
org.jfree.data.time.Day.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void clear()>() >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : $i3 = i1 - 1
org.jfree.data.time.Day.getFirstMillisecond : $i3 = i1 - 1 >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(i0, $i3, i2, 0, 0, 0)
org.jfree.data.time.Day.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(i0, $i3, i2, 0, 0, 0) >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0)
org.jfree.data.time.Day.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0) >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : $l4 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Day.getFirstMillisecond : $l4 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : return $l4
org.jfree.data.time.Day.getFirstMillisecond : return $l4 >>>>>>>> org.jfree.data.time.Day.peg : r0.<org.jfree.data.time.Day: long firstMillisecond> = $l0
org.jfree.data.time.Day.peg : r0.<org.jfree.data.time.Day: long firstMillisecond> = $l0 >>>>>>>> org.jfree.data.time.Day.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Day: long getLastMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Day.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Day: long getLastMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : $r2 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate>
org.jfree.data.time.Day.getLastMillisecond : $r2 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate> >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : i0 = virtualinvoke $r2.<org.jfree.date.SerialDate: int getYYYY()>()
org.jfree.data.time.Day.getLastMillisecond : i0 = virtualinvoke $r2.<org.jfree.date.SerialDate: int getYYYY()>() >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : $r3 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate>
org.jfree.data.time.Day.getLastMillisecond : $r3 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate> >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : i1 = virtualinvoke $r3.<org.jfree.date.SerialDate: int getMonth()>()
org.jfree.data.time.Day.getLastMillisecond : i1 = virtualinvoke $r3.<org.jfree.date.SerialDate: int getMonth()>() >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : $r4 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate>
org.jfree.data.time.Day.getLastMillisecond : $r4 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate> >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : i2 = virtualinvoke $r4.<org.jfree.date.SerialDate: int getDayOfMonth()>()
org.jfree.data.time.Day.getLastMillisecond : i2 = virtualinvoke $r4.<org.jfree.date.SerialDate: int getDayOfMonth()>() >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void clear()>()
org.jfree.data.time.Day.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void clear()>() >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : $i3 = i1 - 1
org.jfree.data.time.Day.getLastMillisecond : $i3 = i1 - 1 >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(i0, $i3, i2, 23, 59, 59)
org.jfree.data.time.Day.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(i0, $i3, i2, 23, 59, 59) >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999)
org.jfree.data.time.Day.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999) >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : $l4 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Day.getLastMillisecond : $l4 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : return $l4
org.jfree.data.time.Day.getLastMillisecond : return $l4 >>>>>>>> org.jfree.data.time.Day.peg : r0.<org.jfree.data.time.Day: long lastMillisecond> = $l1
org.jfree.data.time.Day.peg : r0.<org.jfree.data.time.Day: long lastMillisecond> = $l1 >>>>>>>> org.jfree.data.time.RegularTimePeriod.downsize : $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/jfree/data/time/Year")
org.jfree.data.time.RegularTimePeriod.downsize : $z0 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/jfree/data/time/Year") >>>>>>>> org.jfree.data.time.RegularTimePeriod.downsize : if $z0 == 0
org.jfree.data.time.RegularTimePeriod.downsize : if $z0 == 0 >>>>>>>> org.jfree.data.time.RegularTimePeriod.downsize : $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/jfree/data/time/Quarter")
org.jfree.data.time.RegularTimePeriod.downsize : $z1 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/jfree/data/time/Quarter") >>>>>>>> org.jfree.data.time.RegularTimePeriod.downsize : if $z1 == 0
org.jfree.data.time.RegularTimePeriod.downsize : if $z1 == 0 >>>>>>>> org.jfree.data.time.RegularTimePeriod.downsize : $z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/jfree/data/time/Month")
org.jfree.data.time.RegularTimePeriod.downsize : $z2 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/jfree/data/time/Month") >>>>>>>> org.jfree.data.time.RegularTimePeriod.downsize : if $z2 == 0
org.jfree.data.time.RegularTimePeriod.downsize : if $z2 == 0 >>>>>>>> org.jfree.data.time.RegularTimePeriod.downsize : $z3 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/jfree/data/time/Day")
org.jfree.data.time.RegularTimePeriod.downsize : $z3 = virtualinvoke r0.<java.lang.Object: boolean equals(java.lang.Object)>(class "org/jfree/data/time/Day") >>>>>>>> org.jfree.data.time.RegularTimePeriod.downsize : if $z3 == 0
org.jfree.data.time.RegularTimePeriod.downsize : if $z3 == 0 >>>>>>>> org.jfree.data.time.RegularTimePeriod.downsize : return class "org/jfree/data/time/Hour"
org.jfree.data.time.RegularTimePeriod.downsize : return class "org/jfree/data/time/Hour" >>>>>>>> org.jfree.chart.axis.ValueAxis.setAutoRange : virtualinvoke r0.<org.jfree.chart.axis.ValueAxis: void setAutoRange(boolean,boolean)>(z0, 1)
org.jfree.chart.axis.ValueAxis.setAutoRange : virtualinvoke r0.<org.jfree.chart.axis.ValueAxis: void setAutoRange(boolean,boolean)>(z0, 1) >>>>>>>> org.jfree.chart.axis.ValueAxis.setAutoRange : $z2 = r0.<org.jfree.chart.axis.ValueAxis: boolean autoRange>
org.jfree.chart.axis.ValueAxis.setAutoRange : $z2 = r0.<org.jfree.chart.axis.ValueAxis: boolean autoRange> >>>>>>>> org.jfree.chart.axis.ValueAxis.setAutoRange : if $z2 == z0
org.jfree.chart.axis.ValueAxis.setAutoRange : if $z2 == z0 >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.addValue : $r4 = r0.<org.jfree.data.category.DefaultCategoryDataset: org.jfree.data.DefaultKeyedValues2D data>
org.jfree.data.category.DefaultCategoryDataset.addValue : $r4 = r0.<org.jfree.data.category.DefaultCategoryDataset: org.jfree.data.DefaultKeyedValues2D data> >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.addValue : virtualinvoke $r4.<org.jfree.data.DefaultKeyedValues2D: void addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)>(r1, r2, r3)
org.jfree.data.category.DefaultCategoryDataset.addValue : virtualinvoke $r4.<org.jfree.data.DefaultKeyedValues2D: void addValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)>(r1, r2, r3) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.addValue : virtualinvoke r0.<org.jfree.data.DefaultKeyedValues2D: void setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)>(r1, r2, r3)
org.jfree.data.DefaultKeyedValues2D.addValue : virtualinvoke r0.<org.jfree.data.DefaultKeyedValues2D: void setValue(java.lang.Number,java.lang.Comparable,java.lang.Comparable)>(r1, r2, r3) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : i0 = virtualinvoke r0.<org.jfree.data.DefaultKeyedValues2D: int getRowIndex(java.lang.Comparable)>(r2)
org.jfree.data.DefaultKeyedValues2D.setValue : i0 = virtualinvoke r0.<org.jfree.data.DefaultKeyedValues2D: int getRowIndex(java.lang.Comparable)>(r2) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "key")
org.jfree.data.DefaultKeyedValues2D.getRowIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "key") >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : $z0 = r0.<org.jfree.data.DefaultKeyedValues2D: boolean sortRowKeys>
org.jfree.data.DefaultKeyedValues2D.getRowIndex : $z0 = r0.<org.jfree.data.DefaultKeyedValues2D: boolean sortRowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : if $z0 == 0
org.jfree.data.DefaultKeyedValues2D.getRowIndex : if $z0 == 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : $r3 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys>
org.jfree.data.DefaultKeyedValues2D.getRowIndex : $r3 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : $i1 = interfaceinvoke $r3.<java.util.List: int indexOf(java.lang.Object)>(r1)
org.jfree.data.DefaultKeyedValues2D.getRowIndex : $i1 = interfaceinvoke $r3.<java.util.List: int indexOf(java.lang.Object)>(r1) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : return $i1
org.jfree.data.DefaultKeyedValues2D.getRowIndex : return $i1 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : if i0 < 0
org.jfree.data.DefaultKeyedValues2D.setValue : if i0 < 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : $r7 = new org.jfree.data.DefaultKeyedValues
org.jfree.data.DefaultKeyedValues2D.setValue : $r7 = new org.jfree.data.DefaultKeyedValues >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : specialinvoke $r7.<org.jfree.data.DefaultKeyedValues: void <init>()>()
org.jfree.data.DefaultKeyedValues2D.setValue : specialinvoke $r7.<org.jfree.data.DefaultKeyedValues: void <init>()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : r4 = $r7
org.jfree.data.DefaultKeyedValues2D.setValue : r4 = $r7 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : $z0 = r0.<org.jfree.data.DefaultKeyedValues2D: boolean sortRowKeys>
org.jfree.data.DefaultKeyedValues2D.setValue : $z0 = r0.<org.jfree.data.DefaultKeyedValues2D: boolean sortRowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : if $z0 == 0
org.jfree.data.DefaultKeyedValues2D.setValue : if $z0 == 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : $r10 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys>
org.jfree.data.DefaultKeyedValues2D.setValue : $r10 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r2)
org.jfree.data.DefaultKeyedValues2D.setValue : interfaceinvoke $r10.<java.util.List: boolean add(java.lang.Object)>(r2) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : $r11 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows>
org.jfree.data.DefaultKeyedValues2D.setValue : $r11 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r4)
org.jfree.data.DefaultKeyedValues2D.setValue : interfaceinvoke $r11.<java.util.List: boolean add(java.lang.Object)>(r4) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : virtualinvoke r4.<org.jfree.data.DefaultKeyedValues: void setValue(java.lang.Comparable,java.lang.Number)>(r3, r1)
org.jfree.data.DefaultKeyedValues2D.setValue : virtualinvoke r4.<org.jfree.data.DefaultKeyedValues: void setValue(java.lang.Comparable,java.lang.Number)>(r3, r1) >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "key")
org.jfree.data.DefaultKeyedValues.setValue : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "key") >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : i0 = virtualinvoke r0.<org.jfree.data.DefaultKeyedValues: int getIndex(java.lang.Comparable)>(r1)
org.jfree.data.DefaultKeyedValues.setValue : i0 = virtualinvoke r0.<org.jfree.data.DefaultKeyedValues: int getIndex(java.lang.Comparable)>(r1) >>>>>>>> org.jfree.data.DefaultKeyedValues.getIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "key")
org.jfree.data.DefaultKeyedValues.getIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "key") >>>>>>>> org.jfree.data.DefaultKeyedValues.getIndex : $r3 = r0.<org.jfree.data.DefaultKeyedValues: java.util.HashMap indexMap>
org.jfree.data.DefaultKeyedValues.getIndex : $r3 = r0.<org.jfree.data.DefaultKeyedValues: java.util.HashMap indexMap> >>>>>>>> org.jfree.data.DefaultKeyedValues.getIndex : $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1)
org.jfree.data.DefaultKeyedValues.getIndex : $r4 = virtualinvoke $r3.<java.util.HashMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.jfree.data.DefaultKeyedValues.getIndex : r2 = (java.lang.Integer) $r4
org.jfree.data.DefaultKeyedValues.getIndex : r2 = (java.lang.Integer) $r4 >>>>>>>> org.jfree.data.DefaultKeyedValues.getIndex : if r2 != null
org.jfree.data.DefaultKeyedValues.getIndex : if r2 != null >>>>>>>> org.jfree.data.DefaultKeyedValues.getIndex : return -1
org.jfree.data.DefaultKeyedValues.getIndex : return -1 >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : if i0 < 0
org.jfree.data.DefaultKeyedValues.setValue : if i0 < 0 >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : $r7 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList keys>
org.jfree.data.DefaultKeyedValues.setValue : $r7 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList keys> >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r1)
org.jfree.data.DefaultKeyedValues.setValue : virtualinvoke $r7.<java.util.ArrayList: boolean add(java.lang.Object)>(r1) >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : $r8 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList values>
org.jfree.data.DefaultKeyedValues.setValue : $r8 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList values> >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r2)
org.jfree.data.DefaultKeyedValues.setValue : virtualinvoke $r8.<java.util.ArrayList: boolean add(java.lang.Object)>(r2) >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : $r9 = r0.<org.jfree.data.DefaultKeyedValues: java.util.HashMap indexMap>
org.jfree.data.DefaultKeyedValues.setValue : $r9 = r0.<org.jfree.data.DefaultKeyedValues: java.util.HashMap indexMap> >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : $r10 = new java.lang.Integer
org.jfree.data.DefaultKeyedValues.setValue : $r10 = new java.lang.Integer >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : $r11 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList keys>
org.jfree.data.DefaultKeyedValues.setValue : $r11 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList keys> >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : $i1 = virtualinvoke $r11.<java.util.ArrayList: int size()>()
org.jfree.data.DefaultKeyedValues.setValue : $i1 = virtualinvoke $r11.<java.util.ArrayList: int size()>() >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : $i2 = $i1 - 1
org.jfree.data.DefaultKeyedValues.setValue : $i2 = $i1 - 1 >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : specialinvoke $r10.<java.lang.Integer: void <init>(int)>($i2)
org.jfree.data.DefaultKeyedValues.setValue : specialinvoke $r10.<java.lang.Integer: void <init>(int)>($i2) >>>>>>>> org.jfree.data.DefaultKeyedValues.setValue : virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r10)
org.jfree.data.DefaultKeyedValues.setValue : virtualinvoke $r9.<java.util.HashMap: java.lang.Object put(java.lang.Object,java.lang.Object)>(r1, $r10) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : $r12 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys>
org.jfree.data.DefaultKeyedValues2D.setValue : $r12 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : i1 = interfaceinvoke $r12.<java.util.List: int indexOf(java.lang.Object)>(r3)
org.jfree.data.DefaultKeyedValues2D.setValue : i1 = interfaceinvoke $r12.<java.util.List: int indexOf(java.lang.Object)>(r3) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : if i1 >= 0
org.jfree.data.DefaultKeyedValues2D.setValue : if i1 >= 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : $r13 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys>
org.jfree.data.DefaultKeyedValues2D.setValue : $r13 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.setValue : interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r3)
org.jfree.data.DefaultKeyedValues2D.setValue : interfaceinvoke $r13.<java.util.List: boolean add(java.lang.Object)>(r3) >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.addValue : virtualinvoke r0.<org.jfree.data.category.DefaultCategoryDataset: void fireDatasetChanged()>()
org.jfree.data.category.DefaultCategoryDataset.addValue : virtualinvoke r0.<org.jfree.data.category.DefaultCategoryDataset: void fireDatasetChanged()>() >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : $r1 = new org.jfree.data.general.DatasetChangeEvent
org.jfree.data.general.AbstractDataset.fireDatasetChanged : $r1 = new org.jfree.data.general.DatasetChangeEvent >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : specialinvoke $r1.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, r0)
org.jfree.data.general.AbstractDataset.fireDatasetChanged : specialinvoke $r1.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, r0) >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : virtualinvoke r0.<org.jfree.data.general.AbstractDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>($r1)
org.jfree.data.general.AbstractDataset.fireDatasetChanged : virtualinvoke r0.<org.jfree.data.general.AbstractDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>($r1) >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : $r3 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList>
org.jfree.data.general.AbstractDataset.notifyListeners : $r3 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.data.general.AbstractDataset.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : $i1 = lengthof r2
org.jfree.data.general.AbstractDataset.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : i0 = $i1 - 2
org.jfree.data.general.AbstractDataset.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : if i0 < 0
org.jfree.data.general.AbstractDataset.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $r1 = staticinvoke <org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>(r0, 1)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $r1 = staticinvoke <org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>(r0, 1) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d0 = #Infinity
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d0 = #Infinity >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d1 = #-Infinity
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d1 = #-Infinity >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i0 = interfaceinvoke r0.<org.jfree.data.category.CategoryDataset: int getRowCount()>()
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i0 = interfaceinvoke r0.<org.jfree.data.category.CategoryDataset: int getRowCount()>() >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.getRowCount : $r1 = r0.<org.jfree.data.category.DefaultCategoryDataset: org.jfree.data.DefaultKeyedValues2D data>
org.jfree.data.category.DefaultCategoryDataset.getRowCount : $r1 = r0.<org.jfree.data.category.DefaultCategoryDataset: org.jfree.data.DefaultKeyedValues2D data> >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.getRowCount : $i0 = virtualinvoke $r1.<org.jfree.data.DefaultKeyedValues2D: int getRowCount()>()
org.jfree.data.category.DefaultCategoryDataset.getRowCount : $i0 = virtualinvoke $r1.<org.jfree.data.DefaultKeyedValues2D: int getRowCount()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowCount : $r1 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys>
org.jfree.data.DefaultKeyedValues2D.getRowCount : $r1 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.jfree.data.DefaultKeyedValues2D.getRowCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowCount : return $i0
org.jfree.data.DefaultKeyedValues2D.getRowCount : return $i0 >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.getRowCount : return $i0
org.jfree.data.category.DefaultCategoryDataset.getRowCount : return $i0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i1 = interfaceinvoke r0.<org.jfree.data.category.CategoryDataset: int getColumnCount()>()
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i1 = interfaceinvoke r0.<org.jfree.data.category.CategoryDataset: int getColumnCount()>() >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.getColumnCount : $r1 = r0.<org.jfree.data.category.DefaultCategoryDataset: org.jfree.data.DefaultKeyedValues2D data>
org.jfree.data.category.DefaultCategoryDataset.getColumnCount : $r1 = r0.<org.jfree.data.category.DefaultCategoryDataset: org.jfree.data.DefaultKeyedValues2D data> >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.getColumnCount : $i0 = virtualinvoke $r1.<org.jfree.data.DefaultKeyedValues2D: int getColumnCount()>()
org.jfree.data.category.DefaultCategoryDataset.getColumnCount : $i0 = virtualinvoke $r1.<org.jfree.data.DefaultKeyedValues2D: int getColumnCount()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getColumnCount : $r1 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys>
org.jfree.data.DefaultKeyedValues2D.getColumnCount : $r1 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getColumnCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.jfree.data.DefaultKeyedValues2D.getColumnCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getColumnCount : return $i0
org.jfree.data.DefaultKeyedValues2D.getColumnCount : return $i0 >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.getColumnCount : return $i0
org.jfree.data.category.DefaultCategoryDataset.getColumnCount : return $i0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if z0 == 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if z0 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z1 = r0 instanceof org.jfree.data.category.IntervalCategoryDataset
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z1 = r0 instanceof org.jfree.data.category.IntervalCategoryDataset >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z1 == 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z1 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i4 = 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i4 = 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i4 >= i0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i4 >= i0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i5 = 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i5 = 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i5 >= i1
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if i5 >= i1 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : r5 = interfaceinvoke r0.<org.jfree.data.category.CategoryDataset: java.lang.Number getValue(int,int)>(i4, i5)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : r5 = interfaceinvoke r0.<org.jfree.data.category.CategoryDataset: java.lang.Number getValue(int,int)>(i4, i5) >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.getValue : $r1 = r0.<org.jfree.data.category.DefaultCategoryDataset: org.jfree.data.DefaultKeyedValues2D data>
org.jfree.data.category.DefaultCategoryDataset.getValue : $r1 = r0.<org.jfree.data.category.DefaultCategoryDataset: org.jfree.data.DefaultKeyedValues2D data> >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.getValue : $r2 = virtualinvoke $r1.<org.jfree.data.DefaultKeyedValues2D: java.lang.Number getValue(int,int)>(i0, i1)
org.jfree.data.category.DefaultCategoryDataset.getValue : $r2 = virtualinvoke $r1.<org.jfree.data.DefaultKeyedValues2D: java.lang.Number getValue(int,int)>(i0, i1) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getValue : r1 = null
org.jfree.data.DefaultKeyedValues2D.getValue : r1 = null >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getValue : $r4 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows>
org.jfree.data.DefaultKeyedValues2D.getValue : $r4 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getValue : $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0)
org.jfree.data.DefaultKeyedValues2D.getValue : $r5 = interfaceinvoke $r4.<java.util.List: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getValue : r2 = (org.jfree.data.DefaultKeyedValues) $r5
org.jfree.data.DefaultKeyedValues2D.getValue : r2 = (org.jfree.data.DefaultKeyedValues) $r5 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getValue : if r2 == null
org.jfree.data.DefaultKeyedValues2D.getValue : if r2 == null >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getValue : $r6 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys>
org.jfree.data.DefaultKeyedValues2D.getValue : $r6 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getValue : $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i1)
org.jfree.data.DefaultKeyedValues2D.getValue : $r7 = interfaceinvoke $r6.<java.util.List: java.lang.Object get(int)>(i1) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getValue : r3 = (java.lang.Comparable) $r7
org.jfree.data.DefaultKeyedValues2D.getValue : r3 = (java.lang.Comparable) $r7 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getValue : i2 = virtualinvoke r2.<org.jfree.data.DefaultKeyedValues: int getIndex(java.lang.Comparable)>(r3)
org.jfree.data.DefaultKeyedValues2D.getValue : i2 = virtualinvoke r2.<org.jfree.data.DefaultKeyedValues: int getIndex(java.lang.Comparable)>(r3) >>>>>>>> org.jfree.data.DefaultKeyedValues.getIndex : $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>()
org.jfree.data.DefaultKeyedValues.getIndex : $i0 = virtualinvoke r2.<java.lang.Integer: int intValue()>() >>>>>>>> org.jfree.data.DefaultKeyedValues.getIndex : return $i0
org.jfree.data.DefaultKeyedValues.getIndex : return $i0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getValue : if i2 < 0
org.jfree.data.DefaultKeyedValues2D.getValue : if i2 < 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getValue : r1 = virtualinvoke r2.<org.jfree.data.DefaultKeyedValues: java.lang.Number getValue(int)>(i2)
org.jfree.data.DefaultKeyedValues2D.getValue : r1 = virtualinvoke r2.<org.jfree.data.DefaultKeyedValues: java.lang.Number getValue(int)>(i2) >>>>>>>> org.jfree.data.DefaultKeyedValues.getValue : $r1 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList values>
org.jfree.data.DefaultKeyedValues.getValue : $r1 = r0.<org.jfree.data.DefaultKeyedValues: java.util.ArrayList values> >>>>>>>> org.jfree.data.DefaultKeyedValues.getValue : $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0)
org.jfree.data.DefaultKeyedValues.getValue : $r2 = virtualinvoke $r1.<java.util.ArrayList: java.lang.Object get(int)>(i0) >>>>>>>> org.jfree.data.DefaultKeyedValues.getValue : $r3 = (java.lang.Number) $r2
org.jfree.data.DefaultKeyedValues.getValue : $r3 = (java.lang.Number) $r2 >>>>>>>> org.jfree.data.DefaultKeyedValues.getValue : return $r3
org.jfree.data.DefaultKeyedValues.getValue : return $r3 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getValue : return r1
org.jfree.data.DefaultKeyedValues2D.getValue : return r1 >>>>>>>> org.jfree.data.category.DefaultCategoryDataset.getValue : return $r2
org.jfree.data.category.DefaultCategoryDataset.getValue : return $r2 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if r5 == null
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if r5 == null >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d8 = virtualinvoke r5.<java.lang.Number: double doubleValue()>()
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d8 = virtualinvoke r5.<java.lang.Number: double doubleValue()>() >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z5 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d8)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $z5 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d8) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z5 != 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $z5 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d8)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d0 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d8) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d8)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : d1 = staticinvoke <java.lang.Math: double max(double,double)>(d1, d8) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i5 = i5 + 1
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i5 = i5 + 1 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= (branch)]
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : goto [?= (branch)] >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i4 = i4 + 1
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : i4 = i4 + 1 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $b6 = d0 cmpl #Infinity
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $b6 = d0 cmpl #Infinity >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $b6 != 0
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : if $b6 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $r6 = new org.jfree.data.Range
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : $r6 = new org.jfree.data.Range >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : specialinvoke $r6.<org.jfree.data.Range: void <init>(double,double)>(d0, d1)
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : specialinvoke $r6.<org.jfree.data.Range: void <init>(double,double)>(d0, d1) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : return $r6
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : return $r6 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateRangeBounds : return $r1
org.jfree.data.general.DatasetUtilities.iterateRangeBounds : return $r1 >>>>>>>> org.jfree.data.Range.shift : $r1 = staticinvoke <org.jfree.data.Range: org.jfree.data.Range shift(org.jfree.data.Range,double,boolean)>(r0, d0, 0)
org.jfree.data.Range.shift : $r1 = staticinvoke <org.jfree.data.Range: org.jfree.data.Range shift(org.jfree.data.Range,double,boolean)>(r0, d0, 0) >>>>>>>> org.jfree.data.Range.shift : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "base")
org.jfree.data.Range.shift : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "base") >>>>>>>> org.jfree.data.Range.shift : if z0 == 0
org.jfree.data.Range.shift : if z0 == 0 >>>>>>>> org.jfree.data.Range.shift : $r2 = new org.jfree.data.Range
org.jfree.data.Range.shift : $r2 = new org.jfree.data.Range >>>>>>>> org.jfree.data.Range.shift : $d5 = virtualinvoke r0.<org.jfree.data.Range: double getLowerBound()>()
org.jfree.data.Range.shift : $d5 = virtualinvoke r0.<org.jfree.data.Range: double getLowerBound()>() >>>>>>>> org.jfree.data.Range.getLowerBound : $d0 = r0.<org.jfree.data.Range: double lower>
org.jfree.data.Range.getLowerBound : $d0 = r0.<org.jfree.data.Range: double lower> >>>>>>>> org.jfree.data.Range.getLowerBound : return $d0
org.jfree.data.Range.getLowerBound : return $d0 >>>>>>>> org.jfree.data.Range.shift : $d6 = staticinvoke <org.jfree.data.Range: double shiftWithNoZeroCrossing(double,double)>($d5, d0)
org.jfree.data.Range.shift : $d6 = staticinvoke <org.jfree.data.Range: double shiftWithNoZeroCrossing(double,double)>($d5, d0) >>>>>>>> org.jfree.data.Range.shiftWithNoZeroCrossing : $b0 = d0 cmpl 0.0
org.jfree.data.Range.shiftWithNoZeroCrossing : $b0 = d0 cmpl 0.0 >>>>>>>> org.jfree.data.Range.shiftWithNoZeroCrossing : if $b0 <= 0
org.jfree.data.Range.shiftWithNoZeroCrossing : if $b0 <= 0 >>>>>>>> org.jfree.data.Range.shiftWithNoZeroCrossing : $d2 = d0 + d1
org.jfree.data.Range.shiftWithNoZeroCrossing : $d2 = d0 + d1 >>>>>>>> org.jfree.data.Range.shiftWithNoZeroCrossing : $d3 = staticinvoke <java.lang.Math: double max(double,double)>($d2, 0.0)
org.jfree.data.Range.shiftWithNoZeroCrossing : $d3 = staticinvoke <java.lang.Math: double max(double,double)>($d2, 0.0) >>>>>>>> org.jfree.data.Range.shiftWithNoZeroCrossing : return $d3
org.jfree.data.Range.shiftWithNoZeroCrossing : return $d3 >>>>>>>> org.jfree.data.Range.shift : $d7 = virtualinvoke r0.<org.jfree.data.Range: double getUpperBound()>()
org.jfree.data.Range.shift : $d7 = virtualinvoke r0.<org.jfree.data.Range: double getUpperBound()>() >>>>>>>> org.jfree.data.Range.getUpperBound : $d0 = r0.<org.jfree.data.Range: double upper>
org.jfree.data.Range.getUpperBound : $d0 = r0.<org.jfree.data.Range: double upper> >>>>>>>> org.jfree.data.Range.getUpperBound : return $d0
org.jfree.data.Range.getUpperBound : return $d0 >>>>>>>> org.jfree.data.Range.shift : $d8 = staticinvoke <org.jfree.data.Range: double shiftWithNoZeroCrossing(double,double)>($d7, d0)
org.jfree.data.Range.shift : $d8 = staticinvoke <org.jfree.data.Range: double shiftWithNoZeroCrossing(double,double)>($d7, d0) >>>>>>>> org.jfree.data.Range.shift : specialinvoke $r2.<org.jfree.data.Range: void <init>(double,double)>($d6, $d8)
org.jfree.data.Range.shift : specialinvoke $r2.<org.jfree.data.Range: void <init>(double,double)>($d6, $d8) >>>>>>>> org.jfree.data.Range.shift : return $r2
org.jfree.data.Range.shift : return $r2 >>>>>>>> org.jfree.data.Range.shift : return $r1
org.jfree.data.Range.shift : return $r1 >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $d0 = virtualinvoke r1.<org.jfree.data.Range: double getUpperBound()>()
org.jfree.chart.axis.PeriodAxis.setRange : $d0 = virtualinvoke r1.<org.jfree.data.Range: double getUpperBound()>() >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : l0 = staticinvoke <java.lang.Math: long round(double)>($d0)
org.jfree.chart.axis.PeriodAxis.setRange : l0 = staticinvoke <java.lang.Math: long round(double)>($d0) >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $d1 = virtualinvoke r1.<org.jfree.data.Range: double getLowerBound()>()
org.jfree.chart.axis.PeriodAxis.setRange : $d1 = virtualinvoke r1.<org.jfree.data.Range: double getLowerBound()>() >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : l1 = staticinvoke <java.lang.Math: long round(double)>($d1)
org.jfree.chart.axis.PeriodAxis.setRange : l1 = staticinvoke <java.lang.Math: long round(double)>($d1) >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $r3 = r0.<org.jfree.chart.axis.PeriodAxis: java.lang.Class autoRangeTimePeriodClass>
org.jfree.chart.axis.PeriodAxis.setRange : $r3 = r0.<org.jfree.chart.axis.PeriodAxis: java.lang.Class autoRangeTimePeriodClass> >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $r2 = new java.util.Date
org.jfree.chart.axis.PeriodAxis.setRange : $r2 = new java.util.Date >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : specialinvoke $r2.<java.util.Date: void <init>(long)>(l1)
org.jfree.chart.axis.PeriodAxis.setRange : specialinvoke $r2.<java.util.Date: void <init>(long)>(l1) >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $r4 = r0.<org.jfree.chart.axis.PeriodAxis: java.util.TimeZone timeZone>
org.jfree.chart.axis.PeriodAxis.setRange : $r4 = r0.<org.jfree.chart.axis.PeriodAxis: java.util.TimeZone timeZone> >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $r5 = r0.<org.jfree.chart.axis.PeriodAxis: java.util.Locale locale>
org.jfree.chart.axis.PeriodAxis.setRange : $r5 = r0.<org.jfree.chart.axis.PeriodAxis: java.util.Locale locale> >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $r6 = specialinvoke r0.<org.jfree.chart.axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod createInstance(java.lang.Class,java.util.Date,java.util.TimeZone,java.util.Locale)>($r3, $r2, $r4, $r5)
org.jfree.chart.axis.PeriodAxis.setRange : $r6 = specialinvoke r0.<org.jfree.chart.axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod createInstance(java.lang.Class,java.util.Date,java.util.TimeZone,java.util.Locale)>($r3, $r2, $r4, $r5) >>>>>>>> org.jfree.chart.axis.PeriodAxis.createInstance : r5 = null
org.jfree.chart.axis.PeriodAxis.createInstance : r5 = null >>>>>>>> org.jfree.chart.axis.PeriodAxis.createInstance : $r8 = newarray (java.lang.Class)[3]
org.jfree.chart.axis.PeriodAxis.createInstance : $r8 = newarray (java.lang.Class)[3] >>>>>>>> org.jfree.chart.axis.PeriodAxis.createInstance : $r8[0] = class "java/util/Date"
org.jfree.chart.axis.PeriodAxis.createInstance : $r8[0] = class "java/util/Date" >>>>>>>> org.jfree.chart.axis.PeriodAxis.createInstance : $r8[1] = class "java/util/TimeZone"
org.jfree.chart.axis.PeriodAxis.createInstance : $r8[1] = class "java/util/TimeZone" >>>>>>>> org.jfree.chart.axis.PeriodAxis.createInstance : $r8[2] = class "java/util/Locale"
org.jfree.chart.axis.PeriodAxis.createInstance : $r8[2] = class "java/util/Locale" >>>>>>>> org.jfree.chart.axis.PeriodAxis.createInstance : r6 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r8)
org.jfree.chart.axis.PeriodAxis.createInstance : r6 = virtualinvoke r1.<java.lang.Class: java.lang.reflect.Constructor getDeclaredConstructor(java.lang.Class[])>($r8) >>>>>>>> org.jfree.chart.axis.PeriodAxis.createInstance : $r9 = newarray (java.lang.Object)[3]
org.jfree.chart.axis.PeriodAxis.createInstance : $r9 = newarray (java.lang.Object)[3] >>>>>>>> org.jfree.chart.axis.PeriodAxis.createInstance : $r9[0] = r2
org.jfree.chart.axis.PeriodAxis.createInstance : $r9[0] = r2 >>>>>>>> org.jfree.chart.axis.PeriodAxis.createInstance : $r9[1] = r3
org.jfree.chart.axis.PeriodAxis.createInstance : $r9[1] = r3 >>>>>>>> org.jfree.chart.axis.PeriodAxis.createInstance : $r9[2] = r4
org.jfree.chart.axis.PeriodAxis.createInstance : $r9[2] = r4 >>>>>>>> org.jfree.chart.axis.PeriodAxis.createInstance : $r10 = virtualinvoke r6.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9)
org.jfree.chart.axis.PeriodAxis.createInstance : $r10 = virtualinvoke r6.<java.lang.reflect.Constructor: java.lang.Object newInstance(java.lang.Object[])>($r9) >>>>>>>> org.jfree.chart.axis.PeriodAxis.createInstance : r5 = (org.jfree.data.time.RegularTimePeriod) $r10
org.jfree.chart.axis.PeriodAxis.createInstance : r5 = (org.jfree.data.time.RegularTimePeriod) $r10 >>>>>>>> org.jfree.chart.axis.PeriodAxis.createInstance : goto [?= return r5]
org.jfree.chart.axis.PeriodAxis.createInstance : goto [?= return r5] >>>>>>>> org.jfree.chart.axis.PeriodAxis.createInstance : return r5
org.jfree.chart.axis.PeriodAxis.createInstance : return r5 >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : r0.<org.jfree.chart.axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod first> = $r6
org.jfree.chart.axis.PeriodAxis.setRange : r0.<org.jfree.chart.axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod first> = $r6 >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $r7 = r0.<org.jfree.chart.axis.PeriodAxis: java.lang.Class autoRangeTimePeriodClass>
org.jfree.chart.axis.PeriodAxis.setRange : $r7 = r0.<org.jfree.chart.axis.PeriodAxis: java.lang.Class autoRangeTimePeriodClass> >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $r8 = new java.util.Date
org.jfree.chart.axis.PeriodAxis.setRange : $r8 = new java.util.Date >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : specialinvoke $r8.<java.util.Date: void <init>(long)>(l0)
org.jfree.chart.axis.PeriodAxis.setRange : specialinvoke $r8.<java.util.Date: void <init>(long)>(l0) >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $r9 = r0.<org.jfree.chart.axis.PeriodAxis: java.util.TimeZone timeZone>
org.jfree.chart.axis.PeriodAxis.setRange : $r9 = r0.<org.jfree.chart.axis.PeriodAxis: java.util.TimeZone timeZone> >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $r10 = r0.<org.jfree.chart.axis.PeriodAxis: java.util.Locale locale>
org.jfree.chart.axis.PeriodAxis.setRange : $r10 = r0.<org.jfree.chart.axis.PeriodAxis: java.util.Locale locale> >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $r11 = specialinvoke r0.<org.jfree.chart.axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod createInstance(java.lang.Class,java.util.Date,java.util.TimeZone,java.util.Locale)>($r7, $r8, $r9, $r10)
org.jfree.chart.axis.PeriodAxis.setRange : $r11 = specialinvoke r0.<org.jfree.chart.axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod createInstance(java.lang.Class,java.util.Date,java.util.TimeZone,java.util.Locale)>($r7, $r8, $r9, $r10) >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : r0.<org.jfree.chart.axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod last> = $r11
org.jfree.chart.axis.PeriodAxis.setRange : r0.<org.jfree.chart.axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod last> = $r11 >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $r12 = new org.jfree.data.Range
org.jfree.chart.axis.PeriodAxis.setRange : $r12 = new org.jfree.data.Range >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $r13 = r0.<org.jfree.chart.axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod first>
org.jfree.chart.axis.PeriodAxis.setRange : $r13 = r0.<org.jfree.chart.axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod first> >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $l2 = virtualinvoke $r13.<org.jfree.data.time.RegularTimePeriod: long getFirstMillisecond()>()
org.jfree.chart.axis.PeriodAxis.setRange : $l2 = virtualinvoke $r13.<org.jfree.data.time.RegularTimePeriod: long getFirstMillisecond()>() >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : $l0 = r0.<org.jfree.data.time.Day: long firstMillisecond>
org.jfree.data.time.Day.getFirstMillisecond : $l0 = r0.<org.jfree.data.time.Day: long firstMillisecond> >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : return $l0
org.jfree.data.time.Day.getFirstMillisecond : return $l0 >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $d2 = (double) $l2
org.jfree.chart.axis.PeriodAxis.setRange : $d2 = (double) $l2 >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $r14 = r0.<org.jfree.chart.axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod last>
org.jfree.chart.axis.PeriodAxis.setRange : $r14 = r0.<org.jfree.chart.axis.PeriodAxis: org.jfree.data.time.RegularTimePeriod last> >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $l3 = virtualinvoke $r14.<org.jfree.data.time.RegularTimePeriod: long getLastMillisecond()>()
org.jfree.chart.axis.PeriodAxis.setRange : $l3 = virtualinvoke $r14.<org.jfree.data.time.RegularTimePeriod: long getLastMillisecond()>() >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : $l0 = r0.<org.jfree.data.time.Day: long lastMillisecond>
org.jfree.data.time.Day.getLastMillisecond : $l0 = r0.<org.jfree.data.time.Day: long lastMillisecond> >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : return $l0
org.jfree.data.time.Day.getLastMillisecond : return $l0 >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $d3 = (double) $l3
org.jfree.chart.axis.PeriodAxis.setRange : $d3 = (double) $l3 >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : $d4 = $d3 + 1.0
org.jfree.chart.axis.PeriodAxis.setRange : $d4 = $d3 + 1.0 >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : specialinvoke $r12.<org.jfree.data.Range: void <init>(double,double)>($d2, $d4)
org.jfree.chart.axis.PeriodAxis.setRange : specialinvoke $r12.<org.jfree.data.Range: void <init>(double,double)>($d2, $d4) >>>>>>>> org.jfree.chart.axis.PeriodAxis.setRange : specialinvoke r0.<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range,boolean,boolean)>($r12, z0, z1)
org.jfree.chart.axis.PeriodAxis.setRange : specialinvoke r0.<org.jfree.chart.axis.ValueAxis: void setRange(org.jfree.data.Range,boolean,boolean)>($r12, z0, z1) >>>>>>>> org.jfree.chart.axis.ValueAxis.setRange : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "range")
org.jfree.chart.axis.ValueAxis.setRange : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "range") >>>>>>>> org.jfree.chart.axis.ValueAxis.setRange : if z0 == 0
org.jfree.chart.axis.ValueAxis.setRange : if z0 == 0 >>>>>>>> org.jfree.chart.axis.ValueAxis.setRange : r0.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range> = r1
org.jfree.chart.axis.ValueAxis.setRange : r0.<org.jfree.chart.axis.ValueAxis: org.jfree.data.Range range> = r1 >>>>>>>> org.jfree.chart.axis.ValueAxis.setRange : if z1 == 0
org.jfree.chart.axis.ValueAxis.setRange : if z1 == 0 >>>>>>>> org.jfree.chart.axis.ValueAxis.setRange : $r2 = new org.jfree.chart.event.AxisChangeEvent
org.jfree.chart.axis.ValueAxis.setRange : $r2 = new org.jfree.chart.event.AxisChangeEvent >>>>>>>> org.jfree.chart.axis.ValueAxis.setRange : specialinvoke $r2.<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>(r0)
org.jfree.chart.axis.ValueAxis.setRange : specialinvoke $r2.<org.jfree.chart.event.AxisChangeEvent: void <init>(org.jfree.chart.axis.Axis)>(r0) >>>>>>>> org.jfree.chart.axis.ValueAxis.setRange : virtualinvoke r0.<org.jfree.chart.axis.ValueAxis: void notifyListeners(org.jfree.chart.event.AxisChangeEvent)>($r2)
org.jfree.chart.axis.ValueAxis.setRange : virtualinvoke r0.<org.jfree.chart.axis.ValueAxis: void notifyListeners(org.jfree.chart.event.AxisChangeEvent)>($r2) >>>>>>>> org.jfree.chart.axis.Axis.notifyListeners : $r3 = r0.<org.jfree.chart.axis.Axis: javax.swing.event.EventListenerList listenerList>
org.jfree.chart.axis.Axis.notifyListeners : $r3 = r0.<org.jfree.chart.axis.Axis: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.chart.axis.Axis.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.chart.axis.Axis.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.chart.axis.Axis.notifyListeners : $i1 = lengthof r2
org.jfree.chart.axis.Axis.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.chart.axis.Axis.notifyListeners : i0 = $i1 - 2
org.jfree.chart.axis.Axis.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.chart.axis.Axis.notifyListeners : if i0 < 0
org.jfree.chart.axis.Axis.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.data.time.DateRange.getUpperMillis : $l0 = r0.<org.jfree.data.time.DateRange: long upperDate>
org.jfree.data.time.DateRange.getUpperMillis : $l0 = r0.<org.jfree.data.time.DateRange: long upperDate> >>>>>>>> org.jfree.data.time.DateRange.getUpperMillis : return $l0
org.jfree.data.time.DateRange.getUpperMillis : return $l0 >>>>>>>> org.jfree.data.general.DatasetUtilities.isEmptyOrNull : if r0 != null
org.jfree.data.general.DatasetUtilities.isEmptyOrNull : if r0 != null >>>>>>>> org.jfree.data.general.DatasetUtilities.isEmptyOrNull : i0 = interfaceinvoke r0.<org.jfree.data.category.CategoryDataset: int getRowCount()>()
org.jfree.data.general.DatasetUtilities.isEmptyOrNull : i0 = interfaceinvoke r0.<org.jfree.data.category.CategoryDataset: int getRowCount()>() >>>>>>>> org.jfree.data.general.DatasetUtilities.isEmptyOrNull : i1 = interfaceinvoke r0.<org.jfree.data.category.CategoryDataset: int getColumnCount()>()
org.jfree.data.general.DatasetUtilities.isEmptyOrNull : i1 = interfaceinvoke r0.<org.jfree.data.category.CategoryDataset: int getColumnCount()>() >>>>>>>> org.jfree.data.general.DatasetUtilities.isEmptyOrNull : if i0 == 0
org.jfree.data.general.DatasetUtilities.isEmptyOrNull : if i0 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.isEmptyOrNull : if i1 != 0
org.jfree.data.general.DatasetUtilities.isEmptyOrNull : if i1 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.isEmptyOrNull : i2 = 0
org.jfree.data.general.DatasetUtilities.isEmptyOrNull : i2 = 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.isEmptyOrNull : if i2 >= i0
org.jfree.data.general.DatasetUtilities.isEmptyOrNull : if i2 >= i0 >>>>>>>> org.jfree.data.general.DatasetUtilities.isEmptyOrNull : i3 = 0
org.jfree.data.general.DatasetUtilities.isEmptyOrNull : i3 = 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.isEmptyOrNull : if i3 >= i1
org.jfree.data.general.DatasetUtilities.isEmptyOrNull : if i3 >= i1 >>>>>>>> org.jfree.data.general.DatasetUtilities.isEmptyOrNull : $r1 = interfaceinvoke r0.<org.jfree.data.category.CategoryDataset: java.lang.Number getValue(int,int)>(i2, i3)
org.jfree.data.general.DatasetUtilities.isEmptyOrNull : $r1 = interfaceinvoke r0.<org.jfree.data.category.CategoryDataset: java.lang.Number getValue(int,int)>(i2, i3) >>>>>>>> org.jfree.data.general.DatasetUtilities.isEmptyOrNull : if $r1 == null
org.jfree.data.general.DatasetUtilities.isEmptyOrNull : if $r1 == null >>>>>>>> org.jfree.data.general.DatasetUtilities.isEmptyOrNull : return 0
org.jfree.data.general.DatasetUtilities.isEmptyOrNull : return 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds : $r1 = staticinvoke <org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>(r0, z0)
org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds : $r1 = staticinvoke <org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateRangeBounds(org.jfree.data.category.CategoryDataset,boolean)>(r0, z0) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds : return $r1
org.jfree.data.general.DatasetUtilities.iterateCategoryRangeBounds : return $r1 >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : if r0 != null
org.jfree.data.Range.combineIgnoringNaN : if r0 != null >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : if r1 != null
org.jfree.data.Range.combineIgnoringNaN : if r1 != null >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : $d2 = virtualinvoke r0.<org.jfree.data.Range: double getLowerBound()>()
org.jfree.data.Range.combineIgnoringNaN : $d2 = virtualinvoke r0.<org.jfree.data.Range: double getLowerBound()>() >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : $d3 = virtualinvoke r1.<org.jfree.data.Range: double getLowerBound()>()
org.jfree.data.Range.combineIgnoringNaN : $d3 = virtualinvoke r1.<org.jfree.data.Range: double getLowerBound()>() >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : d0 = staticinvoke <org.jfree.data.Range: double min(double,double)>($d2, $d3)
org.jfree.data.Range.combineIgnoringNaN : d0 = staticinvoke <org.jfree.data.Range: double min(double,double)>($d2, $d3) >>>>>>>> org.jfree.data.Range.min : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0)
org.jfree.data.Range.min : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0) >>>>>>>> org.jfree.data.Range.min : if $z0 == 0
org.jfree.data.Range.min : if $z0 == 0 >>>>>>>> org.jfree.data.Range.min : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1)
org.jfree.data.Range.min : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1) >>>>>>>> org.jfree.data.Range.min : if $z1 == 0
org.jfree.data.Range.min : if $z1 == 0 >>>>>>>> org.jfree.data.Range.min : $d2 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1)
org.jfree.data.Range.min : $d2 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1) >>>>>>>> org.jfree.data.Range.min : return $d2
org.jfree.data.Range.min : return $d2 >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : $d4 = virtualinvoke r0.<org.jfree.data.Range: double getUpperBound()>()
org.jfree.data.Range.combineIgnoringNaN : $d4 = virtualinvoke r0.<org.jfree.data.Range: double getUpperBound()>() >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : $d5 = virtualinvoke r1.<org.jfree.data.Range: double getUpperBound()>()
org.jfree.data.Range.combineIgnoringNaN : $d5 = virtualinvoke r1.<org.jfree.data.Range: double getUpperBound()>() >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : d1 = staticinvoke <org.jfree.data.Range: double max(double,double)>($d4, $d5)
org.jfree.data.Range.combineIgnoringNaN : d1 = staticinvoke <org.jfree.data.Range: double max(double,double)>($d4, $d5) >>>>>>>> org.jfree.data.Range.max : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0)
org.jfree.data.Range.max : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0) >>>>>>>> org.jfree.data.Range.max : if $z0 == 0
org.jfree.data.Range.max : if $z0 == 0 >>>>>>>> org.jfree.data.Range.max : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1)
org.jfree.data.Range.max : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1) >>>>>>>> org.jfree.data.Range.max : if $z1 == 0
org.jfree.data.Range.max : if $z1 == 0 >>>>>>>> org.jfree.data.Range.max : $d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1)
org.jfree.data.Range.max : $d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1) >>>>>>>> org.jfree.data.Range.max : return $d2
org.jfree.data.Range.max : return $d2 >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : $r2 = new org.jfree.data.Range
org.jfree.data.Range.combineIgnoringNaN : $r2 = new org.jfree.data.Range >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : specialinvoke $r2.<org.jfree.data.Range: void <init>(double,double)>(d0, d1)
org.jfree.data.Range.combineIgnoringNaN : specialinvoke $r2.<org.jfree.data.Range: void <init>(double,double)>(d0, d1) >>>>>>>> org.jfree.data.Range.combineIgnoringNaN : return $r2
