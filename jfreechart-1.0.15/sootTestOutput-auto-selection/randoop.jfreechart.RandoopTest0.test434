org.jfree.chart.util.ParamChecks.nullNotPermitted : if r0 != null >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter : $r0 = <org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.chart.renderer.xy.XYBarPainter defaultBarPainter>
org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter : $r0 = <org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.chart.renderer.xy.XYBarPainter defaultBarPainter> >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter : return $r0
org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter : return $r0 >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible : $z0 = <org.jfree.chart.renderer.xy.XYBarRenderer: boolean defaultShadowsVisible>
org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible : $z0 = <org.jfree.chart.renderer.xy.XYBarRenderer: boolean defaultShadowsVisible> >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible : return $z0
org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible : return $z0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseLegendShape : r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape baseLegendShape> = r1
org.jfree.chart.renderer.AbstractRenderer.setBaseLegendShape : r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape baseLegendShape> = r1 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseLegendShape : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>()
org.jfree.chart.renderer.AbstractRenderer.setBaseLegendShape : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>() >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : $r1 = new org.jfree.chart.event.RendererChangeEvent
org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : $r1 = new org.jfree.chart.event.RendererChangeEvent >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : specialinvoke $r1.<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>(r0)
org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : specialinvoke $r1.<org.jfree.chart.event.RendererChangeEvent: void <init>(java.lang.Object)>(r0) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>($r1)
org.jfree.chart.renderer.AbstractRenderer.fireChangeEvent : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void notifyListeners(org.jfree.chart.event.RendererChangeEvent)>($r1) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : $r3 = r0.<org.jfree.chart.renderer.AbstractRenderer: javax.swing.event.EventListenerList listenerList>
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : $r3 = r0.<org.jfree.chart.renderer.AbstractRenderer: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : $i1 = lengthof r2
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : i0 = $i1 - 2
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.notifyListeners : if i0 < 0
org.jfree.chart.renderer.AbstractRenderer.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter : $r0 = <org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter defaultBarPainter>
org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter : $r0 = <org.jfree.chart.renderer.category.BarRenderer: org.jfree.chart.renderer.category.BarPainter defaultBarPainter> >>>>>>>> org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter : return $r0
org.jfree.chart.renderer.category.BarRenderer.getDefaultBarPainter : return $r0 >>>>>>>> org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible : $z0 = <org.jfree.chart.renderer.category.BarRenderer: boolean defaultShadowsVisible>
org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible : $z0 = <org.jfree.chart.renderer.category.BarRenderer: boolean defaultShadowsVisible> >>>>>>>> org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible : return $z0
org.jfree.chart.renderer.category.BarRenderer.getDefaultShadowsVisible : return $z0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)>(r1, 1)
org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void setBasePositiveItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)>(r1, 1) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "position")
org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "position") >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : r0.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition basePositiveItemLabelPosition> = r1
org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : r0.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition basePositiveItemLabelPosition> = r1 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : if z0 == 0
org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : if z0 == 0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>()
org.jfree.chart.renderer.AbstractRenderer.setBasePositiveItemLabelPosition : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>() >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)>(r1, 1)
org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void setBaseNegativeItemLabelPosition(org.jfree.chart.labels.ItemLabelPosition,boolean)>(r1, 1) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "position")
org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "position") >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : r0.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition baseNegativeItemLabelPosition> = r1
org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : r0.<org.jfree.chart.renderer.AbstractRenderer: org.jfree.chart.labels.ItemLabelPosition baseNegativeItemLabelPosition> = r1 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : if z0 == 0
org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : if z0 == 0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>()
org.jfree.chart.renderer.AbstractRenderer.setBaseNegativeItemLabelPosition : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>() >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getItemLabelFont : $r1 = r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font itemLabelFont>
org.jfree.chart.renderer.AbstractRenderer.getItemLabelFont : $r1 = r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Font itemLabelFont> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getItemLabelFont : return $r1
org.jfree.chart.renderer.AbstractRenderer.getItemLabelFont : return $r1 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getItemLabelAnchorOffset : $d0 = r0.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset>
org.jfree.chart.renderer.AbstractRenderer.getItemLabelAnchorOffset : $d0 = r0.<org.jfree.chart.renderer.AbstractRenderer: double itemLabelAnchorOffset> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getItemLabelAnchorOffset : return $d0
org.jfree.chart.renderer.AbstractRenderer.getItemLabelAnchorOffset : return $d0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getBaseLegendShape : $r1 = r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape baseLegendShape>
org.jfree.chart.renderer.AbstractRenderer.getBaseLegendShape : $r1 = r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape baseLegendShape> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getBaseLegendShape : return $r1
org.jfree.chart.renderer.AbstractRenderer.getBaseLegendShape : return $r1 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setShape : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void setShape(java.awt.Shape,boolean)>(r1, 1)
org.jfree.chart.renderer.AbstractRenderer.setShape : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void setShape(java.awt.Shape,boolean)>(r1, 1) >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setShape : r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape shape> = r1
org.jfree.chart.renderer.AbstractRenderer.setShape : r0.<org.jfree.chart.renderer.AbstractRenderer: java.awt.Shape shape> = r1 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setShape : if z0 == 0
org.jfree.chart.renderer.AbstractRenderer.setShape : if z0 == 0 >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.setShape : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>()
org.jfree.chart.renderer.AbstractRenderer.setShape : virtualinvoke r0.<org.jfree.chart.renderer.AbstractRenderer: void fireChangeEvent()>() >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "bar")
org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "bar") >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar : r0.<org.jfree.chart.renderer.xy.XYBarRenderer: java.awt.Shape legendBar> = r1
org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar : r0.<org.jfree.chart.renderer.xy.XYBarRenderer: java.awt.Shape legendBar> = r1 >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar : virtualinvoke r0.<org.jfree.chart.renderer.xy.XYBarRenderer: void fireChangeEvent()>()
org.jfree.chart.renderer.xy.XYBarRenderer.setLegendBar : virtualinvoke r0.<org.jfree.chart.renderer.xy.XYBarRenderer: void fireChangeEvent()>() >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.setDrawBarOutline : r0.<org.jfree.chart.renderer.xy.XYBarRenderer: boolean drawBarOutline> = z0
org.jfree.chart.renderer.xy.XYBarRenderer.setDrawBarOutline : r0.<org.jfree.chart.renderer.xy.XYBarRenderer: boolean drawBarOutline> = z0 >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.setDrawBarOutline : virtualinvoke r0.<org.jfree.chart.renderer.xy.XYBarRenderer: void fireChangeEvent()>()
org.jfree.chart.renderer.xy.XYBarRenderer.setDrawBarOutline : virtualinvoke r0.<org.jfree.chart.renderer.xy.XYBarRenderer: void fireChangeEvent()>() >>>>>>>> org.jfree.data.general.AbstractDataset.addChangeListener : $r2 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList>
org.jfree.data.general.AbstractDataset.addChangeListener : $r2 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.data.general.AbstractDataset.addChangeListener : virtualinvoke $r2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "org/jfree/data/general/DatasetChangeListener", r1)
org.jfree.data.general.AbstractDataset.addChangeListener : virtualinvoke $r2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "org/jfree/data/general/DatasetChangeListener", r1) >>>>>>>> org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.findDomainBounds : if r1 != null
org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.findDomainBounds : if r1 != null >>>>>>>> org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.findDomainBounds : $z0 = r0.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: boolean centerBarAtStartValue>
org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.findDomainBounds : $z0 = r0.<org.jfree.chart.renderer.xy.ClusteredXYBarRenderer: boolean centerBarAtStartValue> >>>>>>>> org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.findDomainBounds : if $z0 == 0
org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.findDomainBounds : if $z0 == 0 >>>>>>>> org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.findDomainBounds : $r4 = specialinvoke r0.<org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>(r1)
org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.findDomainBounds : $r4 = specialinvoke r0.<org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset)>(r1) >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.findDomainBounds : $r2 = virtualinvoke r0.<org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>(r1, 1)
org.jfree.chart.renderer.xy.XYBarRenderer.findDomainBounds : $r2 = virtualinvoke r0.<org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,boolean)>(r1, 1) >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : if r1 != null
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : if r1 != null >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : $z1 = virtualinvoke r0.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean getDataBoundsIncludesVisibleSeriesOnly()>()
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : $z1 = virtualinvoke r0.<org.jfree.chart.renderer.xy.AbstractXYItemRenderer: boolean getDataBoundsIncludesVisibleSeriesOnly()>() >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly : $z0 = r0.<org.jfree.chart.renderer.AbstractRenderer: boolean dataBoundsIncludesVisibleSeriesOnly>
org.jfree.chart.renderer.AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly : $z0 = r0.<org.jfree.chart.renderer.AbstractRenderer: boolean dataBoundsIncludesVisibleSeriesOnly> >>>>>>>> org.jfree.chart.renderer.AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly : return $z0
org.jfree.chart.renderer.AbstractRenderer.getDataBoundsIncludesVisibleSeriesOnly : return $z0 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : if $z1 == 0
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : if $z1 == 0 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : $r3 = new java.util.ArrayList
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : $r3 = new java.util.ArrayList >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : specialinvoke $r3.<java.util.ArrayList: void <init>()>()
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : specialinvoke $r3.<java.util.ArrayList: void <init>()>() >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : r2 = $r3
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : r2 = $r3 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : i0 = interfaceinvoke r1.<org.jfree.data.xy.XYDataset: int getSeriesCount()>()
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : i0 = interfaceinvoke r1.<org.jfree.data.xy.XYDataset: int getSeriesCount()>() >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.getSeriesCount : $r1 = r0.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.DefaultKeyedValues2D values>
org.jfree.data.xy.CategoryTableXYDataset.getSeriesCount : $r1 = r0.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.DefaultKeyedValues2D values> >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.getSeriesCount : $i0 = virtualinvoke $r1.<org.jfree.data.DefaultKeyedValues2D: int getColumnCount()>()
org.jfree.data.xy.CategoryTableXYDataset.getSeriesCount : $i0 = virtualinvoke $r1.<org.jfree.data.DefaultKeyedValues2D: int getColumnCount()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getColumnCount : $r1 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys>
org.jfree.data.DefaultKeyedValues2D.getColumnCount : $r1 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getColumnCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.jfree.data.DefaultKeyedValues2D.getColumnCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getColumnCount : return $i0
org.jfree.data.DefaultKeyedValues2D.getColumnCount : return $i0 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.getSeriesCount : return $i0
org.jfree.data.xy.CategoryTableXYDataset.getSeriesCount : return $i0 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : i1 = 0
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : i1 = 0 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : if i1 >= i0
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : if i1 >= i0 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : $r5 = staticinvoke <org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)>(r1, r2, z0)
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : $r5 = staticinvoke <org.jfree.data.general.DatasetUtilities: org.jfree.data.Range findDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)>(r1, r2, z0) >>>>>>>> org.jfree.data.general.DatasetUtilities.findDomainBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "dataset")
org.jfree.data.general.DatasetUtilities.findDomainBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "dataset") >>>>>>>> org.jfree.data.general.DatasetUtilities.findDomainBounds : $z1 = r0 instanceof org.jfree.data.xy.XYDomainInfo
org.jfree.data.general.DatasetUtilities.findDomainBounds : $z1 = r0 instanceof org.jfree.data.xy.XYDomainInfo >>>>>>>> org.jfree.data.general.DatasetUtilities.findDomainBounds : if $z1 == 0
org.jfree.data.general.DatasetUtilities.findDomainBounds : if $z1 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.findDomainBounds : r3 = staticinvoke <org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)>(r0, r1, z0)
org.jfree.data.general.DatasetUtilities.findDomainBounds : r3 = staticinvoke <org.jfree.data.general.DatasetUtilities: org.jfree.data.Range iterateToFindDomainBounds(org.jfree.data.xy.XYDataset,java.util.List,boolean)>(r0, r1, z0) >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "dataset")
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "dataset") >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "visibleSeriesKeys")
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "visibleSeriesKeys") >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : d0 = #Infinity
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : d0 = #Infinity >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : d1 = #-Infinity
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : d1 = #-Infinity >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if z0 == 0
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if z0 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $z1 = r0 instanceof org.jfree.data.xy.IntervalXYDataset
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $z1 = r0 instanceof org.jfree.data.xy.IntervalXYDataset >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if $z1 == 0
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if $z1 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : r2 = (org.jfree.data.xy.IntervalXYDataset) r0
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : r2 = (org.jfree.data.xy.IntervalXYDataset) r0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>()
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : r3 = interfaceinvoke r1.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $z2 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if $z2 == 0
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if $z2 == 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : goto [?= $b6 = d0 cmpl #Infinity]
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : goto [?= $b6 = d0 cmpl #Infinity] >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $b6 = d0 cmpl #Infinity
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : $b6 = d0 cmpl #Infinity >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if $b6 != 0
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : if $b6 != 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : return null
org.jfree.data.general.DatasetUtilities.iterateToFindDomainBounds : return null >>>>>>>> org.jfree.data.general.DatasetUtilities.findDomainBounds : return r3
org.jfree.data.general.DatasetUtilities.findDomainBounds : return r3 >>>>>>>> org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : return $r5
org.jfree.chart.renderer.xy.AbstractXYItemRenderer.findDomainBounds : return $r5 >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.findDomainBounds : return $r2
org.jfree.chart.renderer.xy.XYBarRenderer.findDomainBounds : return $r2 >>>>>>>> org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.findDomainBounds : return $r4
org.jfree.chart.renderer.xy.ClusteredXYBarRenderer.findDomainBounds : return $r4 >>>>>>>> org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "dataset")
org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "dataset") >>>>>>>> org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : d1 = d0
org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : d1 = d0 >>>>>>>> org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : d2 = d0
org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : d2 = d0 >>>>>>>> org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : i0 = 0
org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : i0 = 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : $i3 = interfaceinvoke r0.<org.jfree.data.xy.TableXYDataset: int getItemCount()>()
org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : $i3 = interfaceinvoke r0.<org.jfree.data.xy.TableXYDataset: int getItemCount()>() >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.getItemCount : $r1 = r0.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.DefaultKeyedValues2D values>
org.jfree.data.xy.CategoryTableXYDataset.getItemCount : $r1 = r0.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.DefaultKeyedValues2D values> >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.getItemCount : $i0 = virtualinvoke $r1.<org.jfree.data.DefaultKeyedValues2D: int getRowCount()>()
org.jfree.data.xy.CategoryTableXYDataset.getItemCount : $i0 = virtualinvoke $r1.<org.jfree.data.DefaultKeyedValues2D: int getRowCount()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowCount : $r1 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys>
org.jfree.data.DefaultKeyedValues2D.getRowCount : $r1 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.jfree.data.DefaultKeyedValues2D.getRowCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowCount : return $i0
org.jfree.data.DefaultKeyedValues2D.getRowCount : return $i0 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.getItemCount : return $i0
org.jfree.data.xy.CategoryTableXYDataset.getItemCount : return $i0 >>>>>>>> org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : if i0 >= $i3
org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : if i0 >= $i3 >>>>>>>> org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : $b7 = d1 cmpg d2
org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : $b7 = d1 cmpg d2 >>>>>>>> org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : if $b7 > 0
org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : if $b7 > 0 >>>>>>>> org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : $r1 = new org.jfree.data.Range
org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : $r1 = new org.jfree.data.Range >>>>>>>> org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : specialinvoke $r1.<org.jfree.data.Range: void <init>(double,double)>(d1, d2)
org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : specialinvoke $r1.<org.jfree.data.Range: void <init>(double,double)>(d1, d2) >>>>>>>> org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : return $r1
org.jfree.data.general.DatasetUtilities.findStackedRangeBounds : return $r1 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : $r2 = specialinvoke r0.<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>()
org.jfree.data.xy.CategoryTableXYDataset.clone : $r2 = specialinvoke r0.<org.jfree.data.xy.AbstractIntervalXYDataset: java.lang.Object clone()>() >>>>>>>> org.jfree.data.general.AbstractDataset.clone : $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>()
org.jfree.data.general.AbstractDataset.clone : $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.jfree.data.general.AbstractDataset.clone : r1 = (org.jfree.data.general.AbstractDataset) $r3
org.jfree.data.general.AbstractDataset.clone : r1 = (org.jfree.data.general.AbstractDataset) $r3 >>>>>>>> org.jfree.data.general.AbstractDataset.clone : $r2 = new javax.swing.event.EventListenerList
org.jfree.data.general.AbstractDataset.clone : $r2 = new javax.swing.event.EventListenerList >>>>>>>> org.jfree.data.general.AbstractDataset.clone : specialinvoke $r2.<javax.swing.event.EventListenerList: void <init>()>()
org.jfree.data.general.AbstractDataset.clone : specialinvoke $r2.<javax.swing.event.EventListenerList: void <init>()>() >>>>>>>> org.jfree.data.general.AbstractDataset.clone : r1.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList> = $r2
org.jfree.data.general.AbstractDataset.clone : r1.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList> = $r2 >>>>>>>> org.jfree.data.general.AbstractDataset.clone : return r1
org.jfree.data.general.AbstractDataset.clone : return r1 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : r1 = (org.jfree.data.xy.CategoryTableXYDataset) $r2
org.jfree.data.xy.CategoryTableXYDataset.clone : r1 = (org.jfree.data.xy.CategoryTableXYDataset) $r2 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : $r3 = r0.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.DefaultKeyedValues2D values>
org.jfree.data.xy.CategoryTableXYDataset.clone : $r3 = r0.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.DefaultKeyedValues2D values> >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : $r4 = virtualinvoke $r3.<org.jfree.data.DefaultKeyedValues2D: java.lang.Object clone()>()
org.jfree.data.xy.CategoryTableXYDataset.clone : $r4 = virtualinvoke $r3.<org.jfree.data.DefaultKeyedValues2D: java.lang.Object clone()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.clone : $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>()
org.jfree.data.DefaultKeyedValues2D.clone : $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.clone : r1 = (org.jfree.data.DefaultKeyedValues2D) $r3
org.jfree.data.DefaultKeyedValues2D.clone : r1 = (org.jfree.data.DefaultKeyedValues2D) $r3 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.clone : $r2 = new java.util.ArrayList
org.jfree.data.DefaultKeyedValues2D.clone : $r2 = new java.util.ArrayList >>>>>>>> org.jfree.data.DefaultKeyedValues2D.clone : $r4 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys>
org.jfree.data.DefaultKeyedValues2D.clone : $r4 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.clone : specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r4)
org.jfree.data.DefaultKeyedValues2D.clone : specialinvoke $r2.<java.util.ArrayList: void <init>(java.util.Collection)>($r4) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.clone : r1.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys> = $r2
org.jfree.data.DefaultKeyedValues2D.clone : r1.<org.jfree.data.DefaultKeyedValues2D: java.util.List columnKeys> = $r2 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.clone : $r5 = new java.util.ArrayList
org.jfree.data.DefaultKeyedValues2D.clone : $r5 = new java.util.ArrayList >>>>>>>> org.jfree.data.DefaultKeyedValues2D.clone : $r6 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys>
org.jfree.data.DefaultKeyedValues2D.clone : $r6 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.clone : specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r6)
org.jfree.data.DefaultKeyedValues2D.clone : specialinvoke $r5.<java.util.ArrayList: void <init>(java.util.Collection)>($r6) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.clone : r1.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys> = $r5
org.jfree.data.DefaultKeyedValues2D.clone : r1.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys> = $r5 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.clone : $r7 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows>
org.jfree.data.DefaultKeyedValues2D.clone : $r7 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.clone : $r8 = staticinvoke <org.jfree.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>($r7)
org.jfree.data.DefaultKeyedValues2D.clone : $r8 = staticinvoke <org.jfree.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>($r7) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.clone : $r9 = (java.util.List) $r8
org.jfree.data.DefaultKeyedValues2D.clone : $r9 = (java.util.List) $r8 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.clone : r1.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows> = $r9
org.jfree.data.DefaultKeyedValues2D.clone : r1.<org.jfree.data.DefaultKeyedValues2D: java.util.List rows> = $r9 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.clone : return r1
org.jfree.data.DefaultKeyedValues2D.clone : return r1 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : $r5 = (org.jfree.data.DefaultKeyedValues2D) $r4
org.jfree.data.xy.CategoryTableXYDataset.clone : $r5 = (org.jfree.data.DefaultKeyedValues2D) $r4 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : r1.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.DefaultKeyedValues2D values> = $r5
org.jfree.data.xy.CategoryTableXYDataset.clone : r1.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.DefaultKeyedValues2D values> = $r5 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : $r6 = new org.jfree.data.xy.IntervalXYDelegate
org.jfree.data.xy.CategoryTableXYDataset.clone : $r6 = new org.jfree.data.xy.IntervalXYDelegate >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : specialinvoke $r6.<org.jfree.data.xy.IntervalXYDelegate: void <init>(org.jfree.data.xy.XYDataset)>(r1)
org.jfree.data.xy.CategoryTableXYDataset.clone : specialinvoke $r6.<org.jfree.data.xy.IntervalXYDelegate: void <init>(org.jfree.data.xy.XYDataset)>(r1) >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : r1.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.xy.IntervalXYDelegate intervalDelegate> = $r6
org.jfree.data.xy.CategoryTableXYDataset.clone : r1.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.xy.IntervalXYDelegate intervalDelegate> = $r6 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : $r7 = r1.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.xy.IntervalXYDelegate intervalDelegate>
org.jfree.data.xy.CategoryTableXYDataset.clone : $r7 = r1.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.xy.IntervalXYDelegate intervalDelegate> >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : $d0 = virtualinvoke r0.<org.jfree.data.xy.CategoryTableXYDataset: double getIntervalWidth()>()
org.jfree.data.xy.CategoryTableXYDataset.clone : $d0 = virtualinvoke r0.<org.jfree.data.xy.CategoryTableXYDataset: double getIntervalWidth()>() >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.getIntervalWidth : $r1 = r0.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.xy.IntervalXYDelegate intervalDelegate>
org.jfree.data.xy.CategoryTableXYDataset.getIntervalWidth : $r1 = r0.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.xy.IntervalXYDelegate intervalDelegate> >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.getIntervalWidth : $d0 = virtualinvoke $r1.<org.jfree.data.xy.IntervalXYDelegate: double getIntervalWidth()>()
org.jfree.data.xy.CategoryTableXYDataset.getIntervalWidth : $d0 = virtualinvoke $r1.<org.jfree.data.xy.IntervalXYDelegate: double getIntervalWidth()>() >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth : $z0 = virtualinvoke r0.<org.jfree.data.xy.IntervalXYDelegate: boolean isAutoWidth()>()
org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth : $z0 = virtualinvoke r0.<org.jfree.data.xy.IntervalXYDelegate: boolean isAutoWidth()>() >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.isAutoWidth : $z0 = r0.<org.jfree.data.xy.IntervalXYDelegate: boolean autoWidth>
org.jfree.data.xy.IntervalXYDelegate.isAutoWidth : $z0 = r0.<org.jfree.data.xy.IntervalXYDelegate: boolean autoWidth> >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.isAutoWidth : return $z0
org.jfree.data.xy.IntervalXYDelegate.isAutoWidth : return $z0 >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth : if $z0 == 0
org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth : if $z0 == 0 >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth : $d0 = r0.<org.jfree.data.xy.IntervalXYDelegate: double autoIntervalWidth>
org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth : $d0 = r0.<org.jfree.data.xy.IntervalXYDelegate: double autoIntervalWidth> >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth : $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0)
org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth : $z1 = staticinvoke <java.lang.Double: boolean isInfinite(double)>($d0) >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth : if $z1 != 0
org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth : if $z1 != 0 >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth : $d2 = r0.<org.jfree.data.xy.IntervalXYDelegate: double fixedIntervalWidth>
org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth : $d2 = r0.<org.jfree.data.xy.IntervalXYDelegate: double fixedIntervalWidth> >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth : return $d2
org.jfree.data.xy.IntervalXYDelegate.getIntervalWidth : return $d2 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.getIntervalWidth : return $d0
org.jfree.data.xy.CategoryTableXYDataset.getIntervalWidth : return $d0 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : virtualinvoke $r7.<org.jfree.data.xy.IntervalXYDelegate: void setFixedIntervalWidth(double)>($d0)
org.jfree.data.xy.CategoryTableXYDataset.clone : virtualinvoke $r7.<org.jfree.data.xy.IntervalXYDelegate: void setFixedIntervalWidth(double)>($d0) >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.setFixedIntervalWidth : $b0 = d0 cmpg 0.0
org.jfree.data.xy.IntervalXYDelegate.setFixedIntervalWidth : $b0 = d0 cmpg 0.0 >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.setFixedIntervalWidth : if $b0 >= 0
org.jfree.data.xy.IntervalXYDelegate.setFixedIntervalWidth : if $b0 >= 0 >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.setFixedIntervalWidth : r0.<org.jfree.data.xy.IntervalXYDelegate: double fixedIntervalWidth> = d0
org.jfree.data.xy.IntervalXYDelegate.setFixedIntervalWidth : r0.<org.jfree.data.xy.IntervalXYDelegate: double fixedIntervalWidth> = d0 >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.setFixedIntervalWidth : r0.<org.jfree.data.xy.IntervalXYDelegate: boolean autoWidth> = 0
org.jfree.data.xy.IntervalXYDelegate.setFixedIntervalWidth : r0.<org.jfree.data.xy.IntervalXYDelegate: boolean autoWidth> = 0 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : $r8 = r1.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.xy.IntervalXYDelegate intervalDelegate>
org.jfree.data.xy.CategoryTableXYDataset.clone : $r8 = r1.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.xy.IntervalXYDelegate intervalDelegate> >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : $z0 = virtualinvoke r0.<org.jfree.data.xy.CategoryTableXYDataset: boolean isAutoWidth()>()
org.jfree.data.xy.CategoryTableXYDataset.clone : $z0 = virtualinvoke r0.<org.jfree.data.xy.CategoryTableXYDataset: boolean isAutoWidth()>() >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.isAutoWidth : $r1 = r0.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.xy.IntervalXYDelegate intervalDelegate>
org.jfree.data.xy.CategoryTableXYDataset.isAutoWidth : $r1 = r0.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.xy.IntervalXYDelegate intervalDelegate> >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.isAutoWidth : $z0 = virtualinvoke $r1.<org.jfree.data.xy.IntervalXYDelegate: boolean isAutoWidth()>()
org.jfree.data.xy.CategoryTableXYDataset.isAutoWidth : $z0 = virtualinvoke $r1.<org.jfree.data.xy.IntervalXYDelegate: boolean isAutoWidth()>() >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.isAutoWidth : return $z0
org.jfree.data.xy.CategoryTableXYDataset.isAutoWidth : return $z0 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : virtualinvoke $r8.<org.jfree.data.xy.IntervalXYDelegate: void setAutoWidth(boolean)>($z0)
org.jfree.data.xy.CategoryTableXYDataset.clone : virtualinvoke $r8.<org.jfree.data.xy.IntervalXYDelegate: void setAutoWidth(boolean)>($z0) >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.setAutoWidth : r0.<org.jfree.data.xy.IntervalXYDelegate: boolean autoWidth> = z0
org.jfree.data.xy.IntervalXYDelegate.setAutoWidth : r0.<org.jfree.data.xy.IntervalXYDelegate: boolean autoWidth> = z0 >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.setAutoWidth : if z0 == 0
org.jfree.data.xy.IntervalXYDelegate.setAutoWidth : if z0 == 0 >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.setAutoWidth : $d0 = specialinvoke r0.<org.jfree.data.xy.IntervalXYDelegate: double recalculateInterval()>()
org.jfree.data.xy.IntervalXYDelegate.setAutoWidth : $d0 = specialinvoke r0.<org.jfree.data.xy.IntervalXYDelegate: double recalculateInterval()>() >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.recalculateInterval : d0 = #Infinity
org.jfree.data.xy.IntervalXYDelegate.recalculateInterval : d0 = #Infinity >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.recalculateInterval : $r1 = r0.<org.jfree.data.xy.IntervalXYDelegate: org.jfree.data.xy.XYDataset dataset>
org.jfree.data.xy.IntervalXYDelegate.recalculateInterval : $r1 = r0.<org.jfree.data.xy.IntervalXYDelegate: org.jfree.data.xy.XYDataset dataset> >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.recalculateInterval : i0 = interfaceinvoke $r1.<org.jfree.data.xy.XYDataset: int getSeriesCount()>()
org.jfree.data.xy.IntervalXYDelegate.recalculateInterval : i0 = interfaceinvoke $r1.<org.jfree.data.xy.XYDataset: int getSeriesCount()>() >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.recalculateInterval : i1 = 0
org.jfree.data.xy.IntervalXYDelegate.recalculateInterval : i1 = 0 >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.recalculateInterval : if i1 >= i0
org.jfree.data.xy.IntervalXYDelegate.recalculateInterval : if i1 >= i0 >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.recalculateInterval : return d0
org.jfree.data.xy.IntervalXYDelegate.recalculateInterval : return d0 >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.setAutoWidth : r0.<org.jfree.data.xy.IntervalXYDelegate: double autoIntervalWidth> = $d0
org.jfree.data.xy.IntervalXYDelegate.setAutoWidth : r0.<org.jfree.data.xy.IntervalXYDelegate: double autoIntervalWidth> = $d0 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : $r9 = r1.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.xy.IntervalXYDelegate intervalDelegate>
org.jfree.data.xy.CategoryTableXYDataset.clone : $r9 = r1.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.xy.IntervalXYDelegate intervalDelegate> >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : $d1 = virtualinvoke r0.<org.jfree.data.xy.CategoryTableXYDataset: double getIntervalPositionFactor()>()
org.jfree.data.xy.CategoryTableXYDataset.clone : $d1 = virtualinvoke r0.<org.jfree.data.xy.CategoryTableXYDataset: double getIntervalPositionFactor()>() >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.getIntervalPositionFactor : $r1 = r0.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.xy.IntervalXYDelegate intervalDelegate>
org.jfree.data.xy.CategoryTableXYDataset.getIntervalPositionFactor : $r1 = r0.<org.jfree.data.xy.CategoryTableXYDataset: org.jfree.data.xy.IntervalXYDelegate intervalDelegate> >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.getIntervalPositionFactor : $d0 = virtualinvoke $r1.<org.jfree.data.xy.IntervalXYDelegate: double getIntervalPositionFactor()>()
org.jfree.data.xy.CategoryTableXYDataset.getIntervalPositionFactor : $d0 = virtualinvoke $r1.<org.jfree.data.xy.IntervalXYDelegate: double getIntervalPositionFactor()>() >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.getIntervalPositionFactor : $d0 = r0.<org.jfree.data.xy.IntervalXYDelegate: double intervalPositionFactor>
org.jfree.data.xy.IntervalXYDelegate.getIntervalPositionFactor : $d0 = r0.<org.jfree.data.xy.IntervalXYDelegate: double intervalPositionFactor> >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.getIntervalPositionFactor : return $d0
org.jfree.data.xy.IntervalXYDelegate.getIntervalPositionFactor : return $d0 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.getIntervalPositionFactor : return $d0
org.jfree.data.xy.CategoryTableXYDataset.getIntervalPositionFactor : return $d0 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : virtualinvoke $r9.<org.jfree.data.xy.IntervalXYDelegate: void setIntervalPositionFactor(double)>($d1)
org.jfree.data.xy.CategoryTableXYDataset.clone : virtualinvoke $r9.<org.jfree.data.xy.IntervalXYDelegate: void setIntervalPositionFactor(double)>($d1) >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.setIntervalPositionFactor : $b0 = d0 cmpg 0.0
org.jfree.data.xy.IntervalXYDelegate.setIntervalPositionFactor : $b0 = d0 cmpg 0.0 >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.setIntervalPositionFactor : if $b0 < 0
org.jfree.data.xy.IntervalXYDelegate.setIntervalPositionFactor : if $b0 < 0 >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.setIntervalPositionFactor : $b1 = 1.0 cmpg d0
org.jfree.data.xy.IntervalXYDelegate.setIntervalPositionFactor : $b1 = 1.0 cmpg d0 >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.setIntervalPositionFactor : if $b1 >= 0
org.jfree.data.xy.IntervalXYDelegate.setIntervalPositionFactor : if $b1 >= 0 >>>>>>>> org.jfree.data.xy.IntervalXYDelegate.setIntervalPositionFactor : r0.<org.jfree.data.xy.IntervalXYDelegate: double intervalPositionFactor> = d0
org.jfree.data.xy.IntervalXYDelegate.setIntervalPositionFactor : r0.<org.jfree.data.xy.IntervalXYDelegate: double intervalPositionFactor> = d0 >>>>>>>> org.jfree.data.xy.CategoryTableXYDataset.clone : return r1
