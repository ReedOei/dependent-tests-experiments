org.jfree.chart.util.ParamChecks.nullNotPermitted : if r0 != null >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter : $r0 = <org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.chart.renderer.xy.XYBarPainter defaultBarPainter>
org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter : $r0 = <org.jfree.chart.renderer.xy.XYBarRenderer: org.jfree.chart.renderer.xy.XYBarPainter defaultBarPainter> >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter : return $r0
org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultBarPainter : return $r0 >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible : $z0 = <org.jfree.chart.renderer.xy.XYBarRenderer: boolean defaultShadowsVisible>
org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible : $z0 = <org.jfree.chart.renderer.xy.XYBarRenderer: boolean defaultShadowsVisible> >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible : return $z0
org.jfree.chart.renderer.xy.XYBarRenderer.getDefaultShadowsVisible : return $z0 >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getLegendBar : $r1 = r0.<org.jfree.chart.renderer.xy.XYBarRenderer: java.awt.Shape legendBar>
org.jfree.chart.renderer.xy.XYBarRenderer.getLegendBar : $r1 = r0.<org.jfree.chart.renderer.xy.XYBarRenderer: java.awt.Shape legendBar> >>>>>>>> org.jfree.chart.renderer.xy.XYBarRenderer.getLegendBar : return $r1
org.jfree.chart.renderer.xy.XYBarRenderer.getLegendBar : return $r1 >>>>>>>> org.jfree.chart.util.ResourceBundleWrapper.getBundle : $r1 = <org.jfree.chart.util.ResourceBundleWrapper: java.net.URLClassLoader noCodeBaseClassLoader>
org.jfree.chart.util.ResourceBundleWrapper.getBundle : $r1 = <org.jfree.chart.util.ResourceBundleWrapper: java.net.URLClassLoader noCodeBaseClassLoader> >>>>>>>> org.jfree.chart.util.ResourceBundleWrapper.getBundle : if $r1 == null
org.jfree.chart.util.ResourceBundleWrapper.getBundle : if $r1 == null >>>>>>>> org.jfree.chart.util.ResourceBundleWrapper.getBundle : $r5 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>(r0)
org.jfree.chart.util.ResourceBundleWrapper.getBundle : $r5 = staticinvoke <java.util.ResourceBundle: java.util.ResourceBundle getBundle(java.lang.String)>(r0) >>>>>>>> org.jfree.chart.util.ResourceBundleWrapper.getBundle : return $r5
org.jfree.chart.util.ResourceBundleWrapper.getBundle : return $r5 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getRowCount : $r1 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys>
org.jfree.data.category.DefaultIntervalCategoryDataset.getRowCount : $r1 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getRowCount : $i0 = lengthof $r1
org.jfree.data.category.DefaultIntervalCategoryDataset.getRowCount : $i0 = lengthof $r1 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getRowCount : return $i0
org.jfree.data.category.DefaultIntervalCategoryDataset.getRowCount : return $i0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "seriesKeys")
org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "seriesKeys") >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : $i0 = lengthof r1
org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : $i0 = lengthof r1 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : $i1 = virtualinvoke r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesCount()>()
org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : $i1 = virtualinvoke r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesCount()>() >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : i0 = 0
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : i0 = 0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : $r1 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData>
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : $r1 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : if $r1 == null
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : if $r1 == null >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : $r2 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData>
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : $r2 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : i0 = lengthof $r2
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : i0 = lengthof $r2 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : return i0
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesCount : return i0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : if $i0 == $i1
org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : if $i0 == $i1 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> = r1
org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> = r1 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : virtualinvoke r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: void fireDatasetChanged()>()
org.jfree.data.category.DefaultIntervalCategoryDataset.setSeriesKeys : virtualinvoke r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: void fireDatasetChanged()>() >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : $r1 = new org.jfree.data.general.DatasetChangeEvent
org.jfree.data.general.AbstractDataset.fireDatasetChanged : $r1 = new org.jfree.data.general.DatasetChangeEvent >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : specialinvoke $r1.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, r0)
org.jfree.data.general.AbstractDataset.fireDatasetChanged : specialinvoke $r1.<org.jfree.data.general.DatasetChangeEvent: void <init>(java.lang.Object,org.jfree.data.general.Dataset)>(r0, r0) >>>>>>>> org.jfree.data.general.AbstractDataset.fireDatasetChanged : virtualinvoke r0.<org.jfree.data.general.AbstractDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>($r1)
org.jfree.data.general.AbstractDataset.fireDatasetChanged : virtualinvoke r0.<org.jfree.data.general.AbstractDataset: void notifyListeners(org.jfree.data.general.DatasetChangeEvent)>($r1) >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : $r3 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList>
org.jfree.data.general.AbstractDataset.notifyListeners : $r3 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.data.general.AbstractDataset.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : $i1 = lengthof r2
org.jfree.data.general.AbstractDataset.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : i0 = $i1 - 2
org.jfree.data.general.AbstractDataset.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.data.general.AbstractDataset.notifyListeners : if i0 < 0
org.jfree.data.general.AbstractDataset.notifyListeners : if i0 < 0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r2 = specialinvoke r0.<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>()
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r2 = specialinvoke r0.<org.jfree.data.general.AbstractSeriesDataset: java.lang.Object clone()>() >>>>>>>> org.jfree.data.general.AbstractDataset.clone : $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>()
org.jfree.data.general.AbstractDataset.clone : $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.jfree.data.general.AbstractDataset.clone : r1 = (org.jfree.data.general.AbstractDataset) $r3
org.jfree.data.general.AbstractDataset.clone : r1 = (org.jfree.data.general.AbstractDataset) $r3 >>>>>>>> org.jfree.data.general.AbstractDataset.clone : $r2 = new javax.swing.event.EventListenerList
org.jfree.data.general.AbstractDataset.clone : $r2 = new javax.swing.event.EventListenerList >>>>>>>> org.jfree.data.general.AbstractDataset.clone : specialinvoke $r2.<javax.swing.event.EventListenerList: void <init>()>()
org.jfree.data.general.AbstractDataset.clone : specialinvoke $r2.<javax.swing.event.EventListenerList: void <init>()>() >>>>>>>> org.jfree.data.general.AbstractDataset.clone : r1.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList> = $r2
org.jfree.data.general.AbstractDataset.clone : r1.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList> = $r2 >>>>>>>> org.jfree.data.general.AbstractDataset.clone : return r1
org.jfree.data.general.AbstractDataset.clone : return r1 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1 = (org.jfree.data.category.DefaultIntervalCategoryDataset) $r2
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1 = (org.jfree.data.category.DefaultIntervalCategoryDataset) $r2 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r3 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys>
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r3 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>()
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r4 = virtualinvoke $r3.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r5 = (java.lang.Comparable[]) $r4
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r5 = (java.lang.Comparable[]) $r4 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r6 = (java.lang.Comparable[]) $r5
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r6 = (java.lang.Comparable[]) $r5 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys> = $r6
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys> = $r6 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r7 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys>
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r7 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>()
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r8 = virtualinvoke $r7.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r9 = (java.lang.Comparable[]) $r8
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r9 = (java.lang.Comparable[]) $r8 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r10 = (java.lang.Comparable[]) $r9
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r10 = (java.lang.Comparable[]) $r9 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> = $r10
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> = $r10 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r11 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData>
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r11 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r12 = staticinvoke <org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] clone(java.lang.Number[][])>($r11)
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r12 = staticinvoke <org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] clone(java.lang.Number[][])>($r11) >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "array")
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r0, "array") >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $i1 = lengthof r0
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $i1 = lengthof r0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1 = newarray (java.lang.Number[])[$i1]
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1 = newarray (java.lang.Number[])[$i1] >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : i0 = 0
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : i0 = 0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $i2 = lengthof r0
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $i2 = lengthof r0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : if i0 >= $i2
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : if i0 >= $i2 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : return r1
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : return r1 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData> = $r12
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] startData> = $r12 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r13 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] endData>
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r13 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] endData> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r14 = staticinvoke <org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] clone(java.lang.Number[][])>($r13)
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : $r14 = staticinvoke <org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] clone(java.lang.Number[][])>($r13) >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] endData> = $r14
org.jfree.data.category.DefaultIntervalCategoryDataset.clone : r1.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Number[][] endData> = $r14 >>>>>>>> org.jfree.data.time.Day.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Day: long getFirstMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Day.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Day: long getFirstMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : $r2 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate>
org.jfree.data.time.Day.getFirstMillisecond : $r2 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate> >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : i0 = virtualinvoke $r2.<org.jfree.date.SerialDate: int getYYYY()>()
org.jfree.data.time.Day.getFirstMillisecond : i0 = virtualinvoke $r2.<org.jfree.date.SerialDate: int getYYYY()>() >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : $r3 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate>
org.jfree.data.time.Day.getFirstMillisecond : $r3 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate> >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : i1 = virtualinvoke $r3.<org.jfree.date.SerialDate: int getMonth()>()
org.jfree.data.time.Day.getFirstMillisecond : i1 = virtualinvoke $r3.<org.jfree.date.SerialDate: int getMonth()>() >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : $r4 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate>
org.jfree.data.time.Day.getFirstMillisecond : $r4 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate> >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : i2 = virtualinvoke $r4.<org.jfree.date.SerialDate: int getDayOfMonth()>()
org.jfree.data.time.Day.getFirstMillisecond : i2 = virtualinvoke $r4.<org.jfree.date.SerialDate: int getDayOfMonth()>() >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void clear()>()
org.jfree.data.time.Day.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void clear()>() >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : $i3 = i1 - 1
org.jfree.data.time.Day.getFirstMillisecond : $i3 = i1 - 1 >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(i0, $i3, i2, 0, 0, 0)
org.jfree.data.time.Day.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(i0, $i3, i2, 0, 0, 0) >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0)
org.jfree.data.time.Day.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0) >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : $l4 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Day.getFirstMillisecond : $l4 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Day.getFirstMillisecond : return $l4
org.jfree.data.time.Day.getFirstMillisecond : return $l4 >>>>>>>> org.jfree.data.time.Day.peg : r0.<org.jfree.data.time.Day: long firstMillisecond> = $l0
org.jfree.data.time.Day.peg : r0.<org.jfree.data.time.Day: long firstMillisecond> = $l0 >>>>>>>> org.jfree.data.time.Day.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Day: long getLastMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Day.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Day: long getLastMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : $r2 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate>
org.jfree.data.time.Day.getLastMillisecond : $r2 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate> >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : i0 = virtualinvoke $r2.<org.jfree.date.SerialDate: int getYYYY()>()
org.jfree.data.time.Day.getLastMillisecond : i0 = virtualinvoke $r2.<org.jfree.date.SerialDate: int getYYYY()>() >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : $r3 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate>
org.jfree.data.time.Day.getLastMillisecond : $r3 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate> >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : i1 = virtualinvoke $r3.<org.jfree.date.SerialDate: int getMonth()>()
org.jfree.data.time.Day.getLastMillisecond : i1 = virtualinvoke $r3.<org.jfree.date.SerialDate: int getMonth()>() >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : $r4 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate>
org.jfree.data.time.Day.getLastMillisecond : $r4 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate> >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : i2 = virtualinvoke $r4.<org.jfree.date.SerialDate: int getDayOfMonth()>()
org.jfree.data.time.Day.getLastMillisecond : i2 = virtualinvoke $r4.<org.jfree.date.SerialDate: int getDayOfMonth()>() >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void clear()>()
org.jfree.data.time.Day.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void clear()>() >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : $i3 = i1 - 1
org.jfree.data.time.Day.getLastMillisecond : $i3 = i1 - 1 >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(i0, $i3, i2, 23, 59, 59)
org.jfree.data.time.Day.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(i0, $i3, i2, 23, 59, 59) >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999)
org.jfree.data.time.Day.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999) >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : $l4 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Day.getLastMillisecond : $l4 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Day.getLastMillisecond : return $l4
org.jfree.data.time.Day.getLastMillisecond : return $l4 >>>>>>>> org.jfree.data.time.Day.peg : r0.<org.jfree.data.time.Day: long lastMillisecond> = $l1
org.jfree.data.time.Day.peg : r0.<org.jfree.data.time.Day: long lastMillisecond> = $l1 >>>>>>>> org.jfree.data.time.Second.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Second: long getFirstMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Second.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Second: long getFirstMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Second.getFirstMillisecond : $r2 = r0.<org.jfree.data.time.Second: org.jfree.data.time.Day day>
org.jfree.data.time.Second.getFirstMillisecond : $r2 = r0.<org.jfree.data.time.Second: org.jfree.data.time.Day day> >>>>>>>> org.jfree.data.time.Second.getFirstMillisecond : i0 = virtualinvoke $r2.<org.jfree.data.time.Day: int getYear()>()
org.jfree.data.time.Second.getFirstMillisecond : i0 = virtualinvoke $r2.<org.jfree.data.time.Day: int getYear()>() >>>>>>>> org.jfree.data.time.Day.getYear : $r1 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate>
org.jfree.data.time.Day.getYear : $r1 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate> >>>>>>>> org.jfree.data.time.Day.getYear : $i0 = virtualinvoke $r1.<org.jfree.date.SerialDate: int getYYYY()>()
org.jfree.data.time.Day.getYear : $i0 = virtualinvoke $r1.<org.jfree.date.SerialDate: int getYYYY()>() >>>>>>>> org.jfree.data.time.Day.getYear : return $i0
org.jfree.data.time.Day.getYear : return $i0 >>>>>>>> org.jfree.data.time.Second.getFirstMillisecond : $r3 = r0.<org.jfree.data.time.Second: org.jfree.data.time.Day day>
org.jfree.data.time.Second.getFirstMillisecond : $r3 = r0.<org.jfree.data.time.Second: org.jfree.data.time.Day day> >>>>>>>> org.jfree.data.time.Second.getFirstMillisecond : $i3 = virtualinvoke $r3.<org.jfree.data.time.Day: int getMonth()>()
org.jfree.data.time.Second.getFirstMillisecond : $i3 = virtualinvoke $r3.<org.jfree.data.time.Day: int getMonth()>() >>>>>>>> org.jfree.data.time.Day.getMonth : $r1 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate>
org.jfree.data.time.Day.getMonth : $r1 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate> >>>>>>>> org.jfree.data.time.Day.getMonth : $i0 = virtualinvoke $r1.<org.jfree.date.SerialDate: int getMonth()>()
org.jfree.data.time.Day.getMonth : $i0 = virtualinvoke $r1.<org.jfree.date.SerialDate: int getMonth()>() >>>>>>>> org.jfree.data.time.Day.getMonth : return $i0
org.jfree.data.time.Day.getMonth : return $i0 >>>>>>>> org.jfree.data.time.Second.getFirstMillisecond : i1 = $i3 - 1
org.jfree.data.time.Second.getFirstMillisecond : i1 = $i3 - 1 >>>>>>>> org.jfree.data.time.Second.getFirstMillisecond : $r4 = r0.<org.jfree.data.time.Second: org.jfree.data.time.Day day>
org.jfree.data.time.Second.getFirstMillisecond : $r4 = r0.<org.jfree.data.time.Second: org.jfree.data.time.Day day> >>>>>>>> org.jfree.data.time.Second.getFirstMillisecond : i2 = virtualinvoke $r4.<org.jfree.data.time.Day: int getDayOfMonth()>()
org.jfree.data.time.Second.getFirstMillisecond : i2 = virtualinvoke $r4.<org.jfree.data.time.Day: int getDayOfMonth()>() >>>>>>>> org.jfree.data.time.Day.getDayOfMonth : $r1 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate>
org.jfree.data.time.Day.getDayOfMonth : $r1 = r0.<org.jfree.data.time.Day: org.jfree.date.SerialDate serialDate> >>>>>>>> org.jfree.data.time.Day.getDayOfMonth : $i0 = virtualinvoke $r1.<org.jfree.date.SerialDate: int getDayOfMonth()>()
org.jfree.data.time.Day.getDayOfMonth : $i0 = virtualinvoke $r1.<org.jfree.date.SerialDate: int getDayOfMonth()>() >>>>>>>> org.jfree.data.time.Day.getDayOfMonth : return $i0
org.jfree.data.time.Day.getDayOfMonth : return $i0 >>>>>>>> org.jfree.data.time.Second.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void clear()>()
org.jfree.data.time.Second.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void clear()>() >>>>>>>> org.jfree.data.time.Second.getFirstMillisecond : $b4 = r0.<org.jfree.data.time.Second: byte hour>
org.jfree.data.time.Second.getFirstMillisecond : $b4 = r0.<org.jfree.data.time.Second: byte hour> >>>>>>>> org.jfree.data.time.Second.getFirstMillisecond : $b5 = r0.<org.jfree.data.time.Second: byte minute>
org.jfree.data.time.Second.getFirstMillisecond : $b5 = r0.<org.jfree.data.time.Second: byte minute> >>>>>>>> org.jfree.data.time.Second.getFirstMillisecond : $b6 = r0.<org.jfree.data.time.Second: byte second>
org.jfree.data.time.Second.getFirstMillisecond : $b6 = r0.<org.jfree.data.time.Second: byte second> >>>>>>>> org.jfree.data.time.Second.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(i0, i1, i2, $b4, $b5, $b6)
org.jfree.data.time.Second.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>(i0, i1, i2, $b4, $b5, $b6) >>>>>>>> org.jfree.data.time.Second.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0)
org.jfree.data.time.Second.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0) >>>>>>>> org.jfree.data.time.Second.getFirstMillisecond : $l7 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Second.getFirstMillisecond : $l7 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Second.getFirstMillisecond : return $l7
org.jfree.data.time.Second.getFirstMillisecond : return $l7 >>>>>>>> org.jfree.data.time.Second.peg : r0.<org.jfree.data.time.Second: long firstMillisecond> = $l0
org.jfree.data.time.Second.peg : r0.<org.jfree.data.time.Second: long firstMillisecond> = $l0 >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemCount : if i0 >= 0
org.jfree.data.time.TimeSeries.setMaximumItemCount : if i0 >= 0 >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemCount : r0.<org.jfree.data.time.TimeSeries: int maximumItemCount> = i0
org.jfree.data.time.TimeSeries.setMaximumItemCount : r0.<org.jfree.data.time.TimeSeries: int maximumItemCount> = i0 >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemCount : $r2 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.setMaximumItemCount : $r2 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemCount : i1 = interfaceinvoke $r2.<java.util.List: int size()>()
org.jfree.data.time.TimeSeries.setMaximumItemCount : i1 = interfaceinvoke $r2.<java.util.List: int size()>() >>>>>>>> org.jfree.data.time.TimeSeries.setMaximumItemCount : if i1 <= i0
org.jfree.data.time.TimeSeries.setMaximumItemCount : if i1 <= i0 >>>>>>>> org.jfree.data.general.Series.getNotify : $z0 = r0.<org.jfree.data.general.Series: boolean notify>
org.jfree.data.general.Series.getNotify : $z0 = r0.<org.jfree.data.general.Series: boolean notify> >>>>>>>> org.jfree.data.general.Series.getNotify : return $z0
org.jfree.data.general.Series.getNotify : return $z0 >>>>>>>> org.jfree.data.time.TimeSeries.getMaxY : $d0 = r0.<org.jfree.data.time.TimeSeries: double maxY>
org.jfree.data.time.TimeSeries.getMaxY : $d0 = r0.<org.jfree.data.time.TimeSeries: double maxY> >>>>>>>> org.jfree.data.time.TimeSeries.getMaxY : return $d0
org.jfree.data.time.TimeSeries.getMaxY : return $d0 >>>>>>>> org.jfree.data.time.TimeSeries.clone : $r2 = specialinvoke r0.<org.jfree.data.general.Series: java.lang.Object clone()>()
org.jfree.data.time.TimeSeries.clone : $r2 = specialinvoke r0.<org.jfree.data.general.Series: java.lang.Object clone()>() >>>>>>>> org.jfree.data.general.Series.clone : $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>()
org.jfree.data.general.Series.clone : $r3 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>() >>>>>>>> org.jfree.data.general.Series.clone : r1 = (org.jfree.data.general.Series) $r3
org.jfree.data.general.Series.clone : r1 = (org.jfree.data.general.Series) $r3 >>>>>>>> org.jfree.data.general.Series.clone : $r2 = new javax.swing.event.EventListenerList
org.jfree.data.general.Series.clone : $r2 = new javax.swing.event.EventListenerList >>>>>>>> org.jfree.data.general.Series.clone : specialinvoke $r2.<javax.swing.event.EventListenerList: void <init>()>()
org.jfree.data.general.Series.clone : specialinvoke $r2.<javax.swing.event.EventListenerList: void <init>()>() >>>>>>>> org.jfree.data.general.Series.clone : r1.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners> = $r2
org.jfree.data.general.Series.clone : r1.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners> = $r2 >>>>>>>> org.jfree.data.general.Series.clone : $r4 = new java.beans.PropertyChangeSupport
org.jfree.data.general.Series.clone : $r4 = new java.beans.PropertyChangeSupport >>>>>>>> org.jfree.data.general.Series.clone : specialinvoke $r4.<java.beans.PropertyChangeSupport: void <init>(java.lang.Object)>(r1)
org.jfree.data.general.Series.clone : specialinvoke $r4.<java.beans.PropertyChangeSupport: void <init>(java.lang.Object)>(r1) >>>>>>>> org.jfree.data.general.Series.clone : r1.<org.jfree.data.general.Series: java.beans.PropertyChangeSupport propertyChangeSupport> = $r4
org.jfree.data.general.Series.clone : r1.<org.jfree.data.general.Series: java.beans.PropertyChangeSupport propertyChangeSupport> = $r4 >>>>>>>> org.jfree.data.general.Series.clone : $r5 = new java.beans.VetoableChangeSupport
org.jfree.data.general.Series.clone : $r5 = new java.beans.VetoableChangeSupport >>>>>>>> org.jfree.data.general.Series.clone : specialinvoke $r5.<java.beans.VetoableChangeSupport: void <init>(java.lang.Object)>(r1)
org.jfree.data.general.Series.clone : specialinvoke $r5.<java.beans.VetoableChangeSupport: void <init>(java.lang.Object)>(r1) >>>>>>>> org.jfree.data.general.Series.clone : r1.<org.jfree.data.general.Series: java.beans.VetoableChangeSupport vetoableChangeSupport> = $r5
org.jfree.data.general.Series.clone : r1.<org.jfree.data.general.Series: java.beans.VetoableChangeSupport vetoableChangeSupport> = $r5 >>>>>>>> org.jfree.data.general.Series.clone : return r1
org.jfree.data.general.Series.clone : return r1 >>>>>>>> org.jfree.data.time.TimeSeries.clone : r1 = (org.jfree.data.time.TimeSeries) $r2
org.jfree.data.time.TimeSeries.clone : r1 = (org.jfree.data.time.TimeSeries) $r2 >>>>>>>> org.jfree.data.time.TimeSeries.clone : $r3 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.clone : $r3 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.clone : $r4 = staticinvoke <org.jfree.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>($r3)
org.jfree.data.time.TimeSeries.clone : $r4 = staticinvoke <org.jfree.util.ObjectUtilities: java.util.Collection deepClone(java.util.Collection)>($r3) >>>>>>>> org.jfree.data.time.TimeSeries.clone : $r5 = (java.util.List) $r4
org.jfree.data.time.TimeSeries.clone : $r5 = (java.util.List) $r4 >>>>>>>> org.jfree.data.time.TimeSeries.clone : r1.<org.jfree.data.time.TimeSeries: java.util.List data> = $r5
org.jfree.data.time.TimeSeries.clone : r1.<org.jfree.data.time.TimeSeries: java.util.List data> = $r5 >>>>>>>> org.jfree.data.time.TimeSeries.clone : return r1
org.jfree.data.time.TimeSeries.clone : return r1 >>>>>>>> org.jfree.data.time.Year.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Year: long getFirstMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Year.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Year: long getFirstMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getFirstMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 0, 1, 0, 0, 0)
org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 0, 1, 0, 0, 0) >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0)
org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0) >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Year.getFirstMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Year.getFirstMillisecond : return $l1
org.jfree.data.time.Year.getFirstMillisecond : return $l1 >>>>>>>> org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long firstMillisecond> = $l0
org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long firstMillisecond> = $l0 >>>>>>>> org.jfree.data.time.Year.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Year: long getLastMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Year.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Year: long getLastMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getLastMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 11, 31, 23, 59, 59)
org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($s0, 11, 31, 23, 59, 59) >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999)
org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999) >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Year.getLastMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Year.getLastMillisecond : return $l1
org.jfree.data.time.Year.getLastMillisecond : return $l1 >>>>>>>> org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long lastMillisecond> = $l1
org.jfree.data.time.Year.peg : r0.<org.jfree.data.time.Year: long lastMillisecond> = $l1 >>>>>>>> org.jfree.data.time.Year.getYear : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getYear : $s0 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.getYear : return $s0
org.jfree.data.time.Year.getYear : return $s0 >>>>>>>> org.jfree.data.time.Month.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Month: long getFirstMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Month.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Month: long getFirstMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Month.getFirstMillisecond : $i0 = r0.<org.jfree.data.time.Month: int year>
org.jfree.data.time.Month.getFirstMillisecond : $i0 = r0.<org.jfree.data.time.Month: int year> >>>>>>>> org.jfree.data.time.Month.getFirstMillisecond : $i1 = r0.<org.jfree.data.time.Month: int month>
org.jfree.data.time.Month.getFirstMillisecond : $i1 = r0.<org.jfree.data.time.Month: int month> >>>>>>>> org.jfree.data.time.Month.getFirstMillisecond : $i2 = $i1 - 1
org.jfree.data.time.Month.getFirstMillisecond : $i2 = $i1 - 1 >>>>>>>> org.jfree.data.time.Month.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($i0, $i2, 1, 0, 0, 0)
org.jfree.data.time.Month.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($i0, $i2, 1, 0, 0, 0) >>>>>>>> org.jfree.data.time.Month.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0)
org.jfree.data.time.Month.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0) >>>>>>>> org.jfree.data.time.Month.getFirstMillisecond : $l3 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Month.getFirstMillisecond : $l3 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Month.getFirstMillisecond : return $l3
org.jfree.data.time.Month.getFirstMillisecond : return $l3 >>>>>>>> org.jfree.data.time.Month.peg : r0.<org.jfree.data.time.Month: long firstMillisecond> = $l0
org.jfree.data.time.Month.peg : r0.<org.jfree.data.time.Month: long firstMillisecond> = $l0 >>>>>>>> org.jfree.data.time.Month.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Month: long getLastMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Month.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Month: long getLastMillisecond(java.util.Calendar)>(r1) >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : $i1 = r0.<org.jfree.data.time.Month: int month>
org.jfree.data.time.Month.getLastMillisecond : $i1 = r0.<org.jfree.data.time.Month: int month> >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : $i2 = r0.<org.jfree.data.time.Month: int year>
org.jfree.data.time.Month.getLastMillisecond : $i2 = r0.<org.jfree.data.time.Month: int year> >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : i0 = staticinvoke <org.jfree.date.SerialDate: int lastDayOfMonth(int,int)>($i1, $i2)
org.jfree.data.time.Month.getLastMillisecond : i0 = staticinvoke <org.jfree.date.SerialDate: int lastDayOfMonth(int,int)>($i1, $i2) >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : $i3 = r0.<org.jfree.data.time.Month: int year>
org.jfree.data.time.Month.getLastMillisecond : $i3 = r0.<org.jfree.data.time.Month: int year> >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : $i4 = r0.<org.jfree.data.time.Month: int month>
org.jfree.data.time.Month.getLastMillisecond : $i4 = r0.<org.jfree.data.time.Month: int month> >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : $i5 = $i4 - 1
org.jfree.data.time.Month.getLastMillisecond : $i5 = $i4 - 1 >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($i3, $i5, i0, 23, 59, 59)
org.jfree.data.time.Month.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int,int,int,int,int)>($i3, $i5, i0, 23, 59, 59) >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999)
org.jfree.data.time.Month.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999) >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : $l6 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Month.getLastMillisecond : $l6 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>() >>>>>>>> org.jfree.data.time.Month.getLastMillisecond : return $l6
org.jfree.data.time.Month.getLastMillisecond : return $l6 >>>>>>>> org.jfree.data.time.Month.peg : r0.<org.jfree.data.time.Month: long lastMillisecond> = $l1
org.jfree.data.time.Month.peg : r0.<org.jfree.data.time.Month: long lastMillisecond> = $l1 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "start")
org.jfree.data.time.TimeSeries.createCopy : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "start") >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r2, "end")
org.jfree.data.time.TimeSeries.createCopy : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r2, "end") >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : $i2 = virtualinvoke r1.<org.jfree.data.time.RegularTimePeriod: int compareTo(java.lang.Object)>(r2)
org.jfree.data.time.TimeSeries.createCopy : $i2 = virtualinvoke r1.<org.jfree.data.time.RegularTimePeriod: int compareTo(java.lang.Object)>(r2) >>>>>>>> org.jfree.data.time.Year.compareTo : $z0 = r1 instanceof org.jfree.data.time.Year
org.jfree.data.time.Year.compareTo : $z0 = r1 instanceof org.jfree.data.time.Year >>>>>>>> org.jfree.data.time.Year.compareTo : if $z0 == 0
org.jfree.data.time.Year.compareTo : if $z0 == 0 >>>>>>>> org.jfree.data.time.Year.compareTo : r2 = (org.jfree.data.time.Year) r1
org.jfree.data.time.Year.compareTo : r2 = (org.jfree.data.time.Year) r1 >>>>>>>> org.jfree.data.time.Year.compareTo : $s1 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.compareTo : $s1 = r0.<org.jfree.data.time.Year: short year> >>>>>>>> org.jfree.data.time.Year.compareTo : $i2 = virtualinvoke r2.<org.jfree.data.time.Year: int getYear()>()
org.jfree.data.time.Year.compareTo : $i2 = virtualinvoke r2.<org.jfree.data.time.Year: int getYear()>() >>>>>>>> org.jfree.data.time.Year.compareTo : i0 = $s1 - $i2
org.jfree.data.time.Year.compareTo : i0 = $s1 - $i2 >>>>>>>> org.jfree.data.time.Year.compareTo : goto [?= return i0]
org.jfree.data.time.Year.compareTo : goto [?= return i0] >>>>>>>> org.jfree.data.time.Year.compareTo : return i0
org.jfree.data.time.Year.compareTo : return i0 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : if $i2 <= 0
org.jfree.data.time.TimeSeries.createCopy : if $i2 <= 0 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : z0 = 0
org.jfree.data.time.TimeSeries.createCopy : z0 = 0 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : i0 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getIndex(org.jfree.data.time.RegularTimePeriod)>(r1)
org.jfree.data.time.TimeSeries.createCopy : i0 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getIndex(org.jfree.data.time.RegularTimePeriod)>(r1) >>>>>>>> org.jfree.data.time.TimeSeries.getIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "period")
org.jfree.data.time.TimeSeries.getIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "period") >>>>>>>> org.jfree.data.time.TimeSeries.getIndex : $r3 = new org.jfree.data.time.TimeSeriesDataItem
org.jfree.data.time.TimeSeries.getIndex : $r3 = new org.jfree.data.time.TimeSeriesDataItem >>>>>>>> org.jfree.data.time.TimeSeries.getIndex : specialinvoke $r3.<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,double)>(r1, -2.147483648E9)
org.jfree.data.time.TimeSeries.getIndex : specialinvoke $r3.<org.jfree.data.time.TimeSeriesDataItem: void <init>(org.jfree.data.time.RegularTimePeriod,double)>(r1, -2.147483648E9) >>>>>>>> org.jfree.data.time.TimeSeries.getIndex : r2 = $r3
org.jfree.data.time.TimeSeries.getIndex : r2 = $r3 >>>>>>>> org.jfree.data.time.TimeSeries.getIndex : $r4 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.getIndex : $r4 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.getIndex : $i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>($r4, r2)
org.jfree.data.time.TimeSeries.getIndex : $i0 = staticinvoke <java.util.Collections: int binarySearch(java.util.List,java.lang.Object)>($r4, r2) >>>>>>>> org.jfree.data.time.TimeSeries.getIndex : return $i0
org.jfree.data.time.TimeSeries.getIndex : return $i0 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : if i0 >= 0
org.jfree.data.time.TimeSeries.createCopy : if i0 >= 0 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : $i3 = i0 + 1
org.jfree.data.time.TimeSeries.createCopy : $i3 = i0 + 1 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : i0 = neg $i3
org.jfree.data.time.TimeSeries.createCopy : i0 = neg $i3 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : $r5 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.createCopy : $r5 = r0.<org.jfree.data.time.TimeSeries: java.util.List data> >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : $i4 = interfaceinvoke $r5.<java.util.List: int size()>()
org.jfree.data.time.TimeSeries.createCopy : $i4 = interfaceinvoke $r5.<java.util.List: int size()>() >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : if i0 != $i4
org.jfree.data.time.TimeSeries.createCopy : if i0 != $i4 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : z0 = 1
org.jfree.data.time.TimeSeries.createCopy : z0 = 1 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : i1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getIndex(org.jfree.data.time.RegularTimePeriod)>(r2)
org.jfree.data.time.TimeSeries.createCopy : i1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getIndex(org.jfree.data.time.RegularTimePeriod)>(r2) >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : if i1 >= 0
org.jfree.data.time.TimeSeries.createCopy : if i1 >= 0 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : $i5 = i1 + 1
org.jfree.data.time.TimeSeries.createCopy : $i5 = i1 + 1 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : i6 = neg $i5
org.jfree.data.time.TimeSeries.createCopy : i6 = neg $i5 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : i1 = i6 - 1
org.jfree.data.time.TimeSeries.createCopy : i1 = i6 - 1 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : if i1 < 0
org.jfree.data.time.TimeSeries.createCopy : if i1 < 0 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : if z0 == 0
org.jfree.data.time.TimeSeries.createCopy : if z0 == 0 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : $r6 = specialinvoke r0.<org.jfree.data.general.Series: java.lang.Object clone()>()
org.jfree.data.time.TimeSeries.createCopy : $r6 = specialinvoke r0.<org.jfree.data.general.Series: java.lang.Object clone()>() >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : r3 = (org.jfree.data.time.TimeSeries) $r6
org.jfree.data.time.TimeSeries.createCopy : r3 = (org.jfree.data.time.TimeSeries) $r6 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : $r7 = new java.util.ArrayList
org.jfree.data.time.TimeSeries.createCopy : $r7 = new java.util.ArrayList >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : specialinvoke $r7.<java.util.ArrayList: void <init>()>()
org.jfree.data.time.TimeSeries.createCopy : specialinvoke $r7.<java.util.ArrayList: void <init>()>() >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : r3.<org.jfree.data.time.TimeSeries: java.util.List data> = $r7
org.jfree.data.time.TimeSeries.createCopy : r3.<org.jfree.data.time.TimeSeries: java.util.List data> = $r7 >>>>>>>> org.jfree.data.time.TimeSeries.createCopy : return r3
org.jfree.data.time.TimeSeries.createCopy : return r3 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getRowIndex : $i0 = virtualinvoke r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesIndex(java.lang.Comparable)>(r1)
org.jfree.data.category.DefaultIntervalCategoryDataset.getRowIndex : $i0 = virtualinvoke r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getSeriesIndex(java.lang.Comparable)>(r1) >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex : i0 = -1
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex : i0 = -1 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex : i1 = 0
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex : i1 = 0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex : $r2 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys>
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex : $r2 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] seriesKeys> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex : $i2 = lengthof $r2
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex : $i2 = lengthof $r2 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex : if i1 >= $i2
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex : if i1 >= $i2 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex : return i0
org.jfree.data.category.DefaultIntervalCategoryDataset.getSeriesIndex : return i0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getRowIndex : return $i0
org.jfree.data.category.DefaultIntervalCategoryDataset.getRowIndex : return $i0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "columnKey")
org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "columnKey") >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnIndex : $i0 = virtualinvoke r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getCategoryIndex(java.lang.Comparable)>(r1)
org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnIndex : $i0 = virtualinvoke r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: int getCategoryIndex(java.lang.Comparable)>(r1) >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex : i0 = -1
org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex : i0 = -1 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex : i1 = 0
org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex : i1 = 0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex : $r2 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys>
org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex : $r2 = r0.<org.jfree.data.category.DefaultIntervalCategoryDataset: java.lang.Comparable[] categoryKeys> >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex : $i2 = lengthof $r2
org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex : $i2 = lengthof $r2 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex : if i1 >= $i2
org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex : if i1 >= $i2 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex : return i0
org.jfree.data.category.DefaultIntervalCategoryDataset.getCategoryIndex : return i0 >>>>>>>> org.jfree.data.category.DefaultIntervalCategoryDataset.getColumnIndex : return $i0
