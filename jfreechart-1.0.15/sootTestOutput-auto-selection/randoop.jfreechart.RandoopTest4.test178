org.jfree.data.general.WaferMapDataset.getChipValue : $r1 = new java.lang.Integer >>>>>>>> org.jfree.data.general.WaferMapDataset.getChipValue : specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0)
org.jfree.data.general.WaferMapDataset.getChipValue : specialinvoke $r1.<java.lang.Integer: void <init>(int)>(i0) >>>>>>>> org.jfree.data.general.WaferMapDataset.getChipValue : $r2 = new java.lang.Integer
org.jfree.data.general.WaferMapDataset.getChipValue : $r2 = new java.lang.Integer >>>>>>>> org.jfree.data.general.WaferMapDataset.getChipValue : specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i1)
org.jfree.data.general.WaferMapDataset.getChipValue : specialinvoke $r2.<java.lang.Integer: void <init>(int)>(i1) >>>>>>>> org.jfree.data.general.WaferMapDataset.getChipValue : $r3 = virtualinvoke r0.<org.jfree.data.general.WaferMapDataset: java.lang.Number getChipValue(java.lang.Comparable,java.lang.Comparable)>($r1, $r2)
org.jfree.data.general.WaferMapDataset.getChipValue : $r3 = virtualinvoke r0.<org.jfree.data.general.WaferMapDataset: java.lang.Number getChipValue(java.lang.Comparable,java.lang.Comparable)>($r1, $r2) >>>>>>>> org.jfree.data.general.WaferMapDataset.getChipValue : $r3 = r0.<org.jfree.data.general.WaferMapDataset: org.jfree.data.DefaultKeyedValues2D data>
org.jfree.data.general.WaferMapDataset.getChipValue : $r3 = r0.<org.jfree.data.general.WaferMapDataset: org.jfree.data.DefaultKeyedValues2D data> >>>>>>>> org.jfree.data.general.WaferMapDataset.getChipValue : i0 = virtualinvoke $r3.<org.jfree.data.DefaultKeyedValues2D: int getRowIndex(java.lang.Comparable)>(r1)
org.jfree.data.general.WaferMapDataset.getChipValue : i0 = virtualinvoke $r3.<org.jfree.data.DefaultKeyedValues2D: int getRowIndex(java.lang.Comparable)>(r1) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "key")
org.jfree.data.DefaultKeyedValues2D.getRowIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "key") >>>>>>>> org.jfree.chart.util.ParamChecks.nullNotPermitted : if r0 != null
org.jfree.chart.util.ParamChecks.nullNotPermitted : if r0 != null >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : $z0 = r0.<org.jfree.data.DefaultKeyedValues2D: boolean sortRowKeys>
org.jfree.data.DefaultKeyedValues2D.getRowIndex : $z0 = r0.<org.jfree.data.DefaultKeyedValues2D: boolean sortRowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : if $z0 == 0
org.jfree.data.DefaultKeyedValues2D.getRowIndex : if $z0 == 0 >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : $r3 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys>
org.jfree.data.DefaultKeyedValues2D.getRowIndex : $r3 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : $i1 = interfaceinvoke $r3.<java.util.List: int indexOf(java.lang.Object)>(r1)
org.jfree.data.DefaultKeyedValues2D.getRowIndex : $i1 = interfaceinvoke $r3.<java.util.List: int indexOf(java.lang.Object)>(r1) >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowIndex : return $i1
org.jfree.data.DefaultKeyedValues2D.getRowIndex : return $i1 >>>>>>>> org.jfree.data.general.WaferMapDataset.getChipValue : if i0 >= 0
org.jfree.data.general.WaferMapDataset.getChipValue : if i0 >= 0 >>>>>>>> org.jfree.data.general.WaferMapDataset.getChipValue : return null
org.jfree.data.general.WaferMapDataset.getChipValue : return null >>>>>>>> org.jfree.data.general.WaferMapDataset.getChipValue : return $r3
org.jfree.data.general.WaferMapDataset.getChipValue : return $r3 >>>>>>>> org.jfree.data.general.AbstractDataset.addChangeListener : $r2 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList>
org.jfree.data.general.AbstractDataset.addChangeListener : $r2 = r0.<org.jfree.data.general.AbstractDataset: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.data.general.AbstractDataset.addChangeListener : virtualinvoke $r2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "org/jfree/data/general/DatasetChangeListener", r1)
org.jfree.data.general.AbstractDataset.addChangeListener : virtualinvoke $r2.<javax.swing.event.EventListenerList: void add(java.lang.Class,java.util.EventListener)>(class "org/jfree/data/general/DatasetChangeListener", r1) >>>>>>>> org.jfree.data.general.DatasetGroup.equals : if r1 != r0
org.jfree.data.general.DatasetGroup.equals : if r1 != r0 >>>>>>>> org.jfree.data.general.DatasetGroup.equals : $z0 = r1 instanceof org.jfree.data.general.DatasetGroup
org.jfree.data.general.DatasetGroup.equals : $z0 = r1 instanceof org.jfree.data.general.DatasetGroup >>>>>>>> org.jfree.data.general.DatasetGroup.equals : if $z0 != 0
org.jfree.data.general.DatasetGroup.equals : if $z0 != 0 >>>>>>>> org.jfree.data.general.DatasetGroup.equals : return 0
org.jfree.data.general.DatasetGroup.equals : return 0 >>>>>>>> org.jfree.chart.plot.WaferMapPlot.setRenderer : $r2 = r0.<org.jfree.chart.plot.WaferMapPlot: org.jfree.chart.renderer.WaferMapRenderer renderer>
org.jfree.chart.plot.WaferMapPlot.setRenderer : $r2 = r0.<org.jfree.chart.plot.WaferMapPlot: org.jfree.chart.renderer.WaferMapRenderer renderer> >>>>>>>> org.jfree.chart.plot.WaferMapPlot.setRenderer : if $r2 == null
org.jfree.chart.plot.WaferMapPlot.setRenderer : if $r2 == null >>>>>>>> org.jfree.chart.plot.WaferMapPlot.setRenderer : r0.<org.jfree.chart.plot.WaferMapPlot: org.jfree.chart.renderer.WaferMapRenderer renderer> = r1
org.jfree.chart.plot.WaferMapPlot.setRenderer : r0.<org.jfree.chart.plot.WaferMapPlot: org.jfree.chart.renderer.WaferMapRenderer renderer> = r1 >>>>>>>> org.jfree.chart.plot.WaferMapPlot.setRenderer : if r1 == null
org.jfree.chart.plot.WaferMapPlot.setRenderer : if r1 == null >>>>>>>> org.jfree.chart.plot.WaferMapPlot.setRenderer : virtualinvoke r1.<org.jfree.chart.renderer.WaferMapRenderer: void setPlot(org.jfree.chart.plot.WaferMapPlot)>(r0)
org.jfree.chart.plot.WaferMapPlot.setRenderer : virtualinvoke r1.<org.jfree.chart.renderer.WaferMapRenderer: void setPlot(org.jfree.chart.plot.WaferMapPlot)>(r0) >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.setPlot : r0.<org.jfree.chart.renderer.WaferMapRenderer: org.jfree.chart.plot.WaferMapPlot plot> = r1
org.jfree.chart.renderer.WaferMapRenderer.setPlot : r0.<org.jfree.chart.renderer.WaferMapRenderer: org.jfree.chart.plot.WaferMapPlot plot> = r1 >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.setPlot : specialinvoke r0.<org.jfree.chart.renderer.WaferMapRenderer: void makePaintIndex()>()
org.jfree.chart.renderer.WaferMapRenderer.setPlot : specialinvoke r0.<org.jfree.chart.renderer.WaferMapRenderer: void makePaintIndex()>() >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : $r7 = r0.<org.jfree.chart.renderer.WaferMapRenderer: org.jfree.chart.plot.WaferMapPlot plot>
org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : $r7 = r0.<org.jfree.chart.renderer.WaferMapRenderer: org.jfree.chart.plot.WaferMapPlot plot> >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : if $r7 != null
org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : if $r7 != null >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : $r8 = r0.<org.jfree.chart.renderer.WaferMapRenderer: org.jfree.chart.plot.WaferMapPlot plot>
org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : $r8 = r0.<org.jfree.chart.renderer.WaferMapRenderer: org.jfree.chart.plot.WaferMapPlot plot> >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : r1 = virtualinvoke $r8.<org.jfree.chart.plot.WaferMapPlot: org.jfree.data.general.WaferMapDataset getDataset()>()
org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : r1 = virtualinvoke $r8.<org.jfree.chart.plot.WaferMapPlot: org.jfree.data.general.WaferMapDataset getDataset()>() >>>>>>>> org.jfree.chart.plot.WaferMapPlot.getDataset : $r1 = r0.<org.jfree.chart.plot.WaferMapPlot: org.jfree.data.general.WaferMapDataset dataset>
org.jfree.chart.plot.WaferMapPlot.getDataset : $r1 = r0.<org.jfree.chart.plot.WaferMapPlot: org.jfree.data.general.WaferMapDataset dataset> >>>>>>>> org.jfree.chart.plot.WaferMapPlot.getDataset : return $r1
org.jfree.chart.plot.WaferMapPlot.getDataset : return $r1 >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : r2 = virtualinvoke r1.<org.jfree.data.general.WaferMapDataset: java.lang.Number getMinValue()>()
org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : r2 = virtualinvoke r1.<org.jfree.data.general.WaferMapDataset: java.lang.Number getMinValue()>() >>>>>>>> org.jfree.data.general.WaferMapDataset.getMinValue : $r1 = r0.<org.jfree.data.general.WaferMapDataset: java.lang.Double minValue>
org.jfree.data.general.WaferMapDataset.getMinValue : $r1 = r0.<org.jfree.data.general.WaferMapDataset: java.lang.Double minValue> >>>>>>>> org.jfree.data.general.WaferMapDataset.getMinValue : return $r1
org.jfree.data.general.WaferMapDataset.getMinValue : return $r1 >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : r3 = virtualinvoke r1.<org.jfree.data.general.WaferMapDataset: java.lang.Number getMaxValue()>()
org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : r3 = virtualinvoke r1.<org.jfree.data.general.WaferMapDataset: java.lang.Number getMaxValue()>() >>>>>>>> org.jfree.data.general.WaferMapDataset.getMaxValue : $r1 = r0.<org.jfree.data.general.WaferMapDataset: java.lang.Double maxValue>
org.jfree.data.general.WaferMapDataset.getMaxValue : $r1 = r0.<org.jfree.data.general.WaferMapDataset: java.lang.Double maxValue> >>>>>>>> org.jfree.data.general.WaferMapDataset.getMaxValue : return $r1
org.jfree.data.general.WaferMapDataset.getMaxValue : return $r1 >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : r4 = virtualinvoke r1.<org.jfree.data.general.WaferMapDataset: java.util.Set getUniqueValues()>()
org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : r4 = virtualinvoke r1.<org.jfree.data.general.WaferMapDataset: java.util.Set getUniqueValues()>() >>>>>>>> org.jfree.data.general.WaferMapDataset.getUniqueValues : $r1 = new java.util.TreeSet
org.jfree.data.general.WaferMapDataset.getUniqueValues : $r1 = new java.util.TreeSet >>>>>>>> org.jfree.data.general.WaferMapDataset.getUniqueValues : specialinvoke $r1.<java.util.TreeSet: void <init>()>()
org.jfree.data.general.WaferMapDataset.getUniqueValues : specialinvoke $r1.<java.util.TreeSet: void <init>()>() >>>>>>>> org.jfree.data.general.WaferMapDataset.getUniqueValues : r2 = $r1
org.jfree.data.general.WaferMapDataset.getUniqueValues : r2 = $r1 >>>>>>>> org.jfree.data.general.WaferMapDataset.getUniqueValues : i0 = 0
org.jfree.data.general.WaferMapDataset.getUniqueValues : i0 = 0 >>>>>>>> org.jfree.data.general.WaferMapDataset.getUniqueValues : $r4 = r0.<org.jfree.data.general.WaferMapDataset: org.jfree.data.DefaultKeyedValues2D data>
org.jfree.data.general.WaferMapDataset.getUniqueValues : $r4 = r0.<org.jfree.data.general.WaferMapDataset: org.jfree.data.DefaultKeyedValues2D data> >>>>>>>> org.jfree.data.general.WaferMapDataset.getUniqueValues : $i2 = virtualinvoke $r4.<org.jfree.data.DefaultKeyedValues2D: int getRowCount()>()
org.jfree.data.general.WaferMapDataset.getUniqueValues : $i2 = virtualinvoke $r4.<org.jfree.data.DefaultKeyedValues2D: int getRowCount()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowCount : $r1 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys>
org.jfree.data.DefaultKeyedValues2D.getRowCount : $r1 = r0.<org.jfree.data.DefaultKeyedValues2D: java.util.List rowKeys> >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>()
org.jfree.data.DefaultKeyedValues2D.getRowCount : $i0 = interfaceinvoke $r1.<java.util.List: int size()>() >>>>>>>> org.jfree.data.DefaultKeyedValues2D.getRowCount : return $i0
org.jfree.data.DefaultKeyedValues2D.getRowCount : return $i0 >>>>>>>> org.jfree.data.general.WaferMapDataset.getUniqueValues : if i0 >= $i2
org.jfree.data.general.WaferMapDataset.getUniqueValues : if i0 >= $i2 >>>>>>>> org.jfree.data.general.WaferMapDataset.getUniqueValues : return r2
org.jfree.data.general.WaferMapDataset.getUniqueValues : return r2 >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : $i2 = interfaceinvoke r4.<java.util.Set: int size()>()
org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : $i2 = interfaceinvoke r4.<java.util.Set: int size()>() >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : $i3 = r0.<org.jfree.chart.renderer.WaferMapRenderer: int paintLimit>
org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : $i3 = r0.<org.jfree.chart.renderer.WaferMapRenderer: int paintLimit> >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : if $i2 > $i3
org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : if $i2 > $i3 >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : i0 = 0
org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : i0 = 0 >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>()
org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : r5 = interfaceinvoke r4.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>()
org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : $z0 = interfaceinvoke r5.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : if $z0 == 0
org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : if $z0 == 0 >>>>>>>> org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : goto [?= return]
org.jfree.chart.renderer.WaferMapRenderer.makePaintIndex : goto [?= return] >>>>>>>> org.jfree.chart.plot.WaferMapPlot.setRenderer : virtualinvoke r0.<org.jfree.chart.plot.WaferMapPlot: void fireChangeEvent()>()
org.jfree.chart.plot.WaferMapPlot.setRenderer : virtualinvoke r0.<org.jfree.chart.plot.WaferMapPlot: void fireChangeEvent()>() >>>>>>>> org.jfree.chart.plot.Plot.fireChangeEvent : $r1 = new org.jfree.chart.event.PlotChangeEvent
org.jfree.chart.plot.Plot.fireChangeEvent : $r1 = new org.jfree.chart.event.PlotChangeEvent >>>>>>>> org.jfree.chart.plot.Plot.fireChangeEvent : specialinvoke $r1.<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>(r0)
org.jfree.chart.plot.Plot.fireChangeEvent : specialinvoke $r1.<org.jfree.chart.event.PlotChangeEvent: void <init>(org.jfree.chart.plot.Plot)>(r0) >>>>>>>> org.jfree.chart.plot.Plot.fireChangeEvent : virtualinvoke r0.<org.jfree.chart.plot.Plot: void notifyListeners(org.jfree.chart.event.PlotChangeEvent)>($r1)
org.jfree.chart.plot.Plot.fireChangeEvent : virtualinvoke r0.<org.jfree.chart.plot.Plot: void notifyListeners(org.jfree.chart.event.PlotChangeEvent)>($r1) >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : $z0 = r0.<org.jfree.chart.plot.Plot: boolean notify>
org.jfree.chart.plot.Plot.notifyListeners : $z0 = r0.<org.jfree.chart.plot.Plot: boolean notify> >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : if $z0 != 0
org.jfree.chart.plot.Plot.notifyListeners : if $z0 != 0 >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : $r3 = r0.<org.jfree.chart.plot.Plot: javax.swing.event.EventListenerList listenerList>
org.jfree.chart.plot.Plot.notifyListeners : $r3 = r0.<org.jfree.chart.plot.Plot: javax.swing.event.EventListenerList listenerList> >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>()
org.jfree.chart.plot.Plot.notifyListeners : r2 = virtualinvoke $r3.<javax.swing.event.EventListenerList: java.lang.Object[] getListenerList()>() >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : $i1 = lengthof r2
org.jfree.chart.plot.Plot.notifyListeners : $i1 = lengthof r2 >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : i0 = $i1 - 2
org.jfree.chart.plot.Plot.notifyListeners : i0 = $i1 - 2 >>>>>>>> org.jfree.chart.plot.Plot.notifyListeners : if i0 < 0
