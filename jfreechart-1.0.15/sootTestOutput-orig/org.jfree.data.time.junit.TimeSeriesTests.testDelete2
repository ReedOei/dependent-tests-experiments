org.jfree.data.time.Year.getFirstMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Year.getFirstMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 0)
org.jfree.data.time.Year.getFirstMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.getLastMillisecond : virtualinvoke r1.<java.util.Calendar: void set(int,int)>(14, 999)
org.jfree.data.time.Year.getLastMillisecond : $l1 = virtualinvoke r1.<java.util.Calendar: long getTimeInMillis()>()
org.jfree.data.time.Year.getLastMillisecond : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.TimeSeries.removeAgedItems : $i2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.removeAgedItems : $r2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.RegularTimePeriod getTimePeriod(int)>(0)
org.jfree.data.time.TimeSeries.removeAgedItems : $i1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.removeAgedItems : if z1 == 0 goto return
org.jfree.data.time.TimeSeries.removeAgedItems : z1 = 0
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d1 = r0.<org.jfree.data.time.TimeSeries: double minY>
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : r2 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number getValue()>()
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $r3 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number getValue()>()
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : $d3 = r0.<org.jfree.data.time.TimeSeries: double maxY>
org.jfree.data.time.TimeSeries.updateBoundsForAddedItem : d0 = virtualinvoke r2.<java.lang.Number: double doubleValue()>()
org.jfree.data.time.TimeSeries.getIndex : $r4 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.getIndex : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "period")
org.jfree.data.time.TimeSeries.getIndex : $r3 = new org.jfree.data.time.TimeSeriesDataItem
org.jfree.data.time.TimeSeriesDataItem.compareTo : goto [?= return i0]
org.jfree.data.time.TimeSeriesDataItem.compareTo : return i0
org.jfree.data.time.TimeSeriesDataItem.compareTo : r2 = (org.jfree.data.time.TimeSeriesDataItem) r1
org.jfree.data.time.TimeSeriesDataItem.compareTo : $z0 = r1 instanceof org.jfree.data.time.TimeSeriesDataItem
org.jfree.data.time.TimeSeriesDataItem.compareTo : $r3 = virtualinvoke r0.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>()
org.jfree.data.time.Year.compareTo : goto [?= return i0]
org.jfree.data.time.Year.compareTo : return i0
org.jfree.data.time.Year.compareTo : $s1 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.Year.compareTo : r2 = (org.jfree.data.time.Year) r1
org.jfree.data.time.Year.compareTo : $z0 = r1 instanceof org.jfree.data.time.Year
org.jfree.data.time.TimeSeries.findBoundsByIteration : $r4 = interfaceinvoke r1.<java.util.Iterator: java.lang.Object next()>()
org.jfree.data.time.TimeSeries.findBoundsByIteration : r0.<org.jfree.data.time.TimeSeries: double minY> = #NaN
org.jfree.data.time.TimeSeries.findBoundsByIteration : goto [?= staticinvoke <edu.washington.cs.dt.impact.util.Tracer: void trace(java.lang.String,java.lang.String)>("$z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()", "org.jfree.data.time.TimeSeries.findBoundsByIteration")]
org.jfree.data.time.TimeSeries.findBoundsByIteration : $z0 = interfaceinvoke r1.<java.util.Iterator: boolean hasNext()>()
org.jfree.data.time.TimeSeries.findBoundsByIteration : specialinvoke r0.<org.jfree.data.time.TimeSeries: void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)>(r2)
org.jfree.data.time.TimeSeries.findBoundsByIteration : $r3 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.findBoundsByIteration : r0.<org.jfree.data.time.TimeSeries: double maxY> = #NaN
org.jfree.data.time.TimeSeriesDataItem.getPeriod : $r1 = r0.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod period>
org.jfree.data.time.TimeSeries.getTimePeriod : $r1 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: org.jfree.data.time.TimeSeriesDataItem getRawDataItem(int)>(i0)
org.jfree.data.time.TimeSeries.add : if z4 == 0 goto return
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void fireSeriesChanged()>()
org.jfree.data.time.TimeSeries.add : $r8 = virtualinvoke r7.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>()
org.jfree.data.time.TimeSeries.add : $r2 = new org.jfree.data.time.TimeSeriesDataItem
org.jfree.data.time.TimeSeries.add : specialinvoke r0.<org.jfree.data.time.TimeSeries: void updateBoundsForAddedItem(org.jfree.data.time.TimeSeriesDataItem)>(r7)
org.jfree.data.time.TimeSeries.add : i0 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.add : staticinvoke <org.jfree.chart.util.ParamChecks: void nullNotPermitted(java.lang.Object,java.lang.String)>(r1, "item")
org.jfree.data.time.TimeSeries.add : $r10 = r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass>
org.jfree.data.time.TimeSeries.add : if i0 != 0 goto $i2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.add : $r27 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.RegularTimePeriod,java.lang.Number,boolean)>(r1, r2, 1)
org.jfree.data.time.TimeSeries.add : $r3 = new org.jfree.data.time.TimeSeriesDataItem
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem,boolean)>(r3, z0)
org.jfree.data.time.TimeSeries.add : $r6 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Object clone()>()
org.jfree.data.time.TimeSeries.add : z4 = 1
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void removeAgedItems(boolean)>(0)
org.jfree.data.time.TimeSeries.add : z2 = 0
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.TimeSeriesDataItem,boolean)>(r4, z0)
org.jfree.data.time.TimeSeries.add : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void add(org.jfree.data.time.RegularTimePeriod,double,boolean)>(r1, d0, 1)
org.jfree.data.time.TimeSeries.add : $r25 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.add : if z0 == 0 goto return
org.jfree.data.time.TimeSeries.add : $r26 = virtualinvoke r7.<org.jfree.data.time.TimeSeriesDataItem: org.jfree.data.time.RegularTimePeriod getPeriod()>()
org.jfree.data.time.TimeSeries.add : $r9 = r0.<org.jfree.data.time.TimeSeries: java.lang.Class timePeriodClass>
org.jfree.data.time.TimeSeries.add : $i2 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.TimeSeries.add : $i7 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getItemCount()>()
org.jfree.data.time.Year.getSerialIndex : $s0 = r0.<org.jfree.data.time.Year: short year>
org.jfree.data.time.TimeSeries.getItemCount : $r1 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.getValue : if i0 < 0 goto return null
org.jfree.data.time.TimeSeries.getValue : return null
org.jfree.data.time.TimeSeries.getValue : i0 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getIndex(org.jfree.data.time.RegularTimePeriod)>(r1)
org.jfree.data.time.TimeSeriesDataItem.clone : goto [?= return r1]
org.jfree.data.time.TimeSeriesDataItem.clone : r1 = null
org.jfree.data.time.TimeSeriesDataItem.clone : return r1
org.jfree.data.time.TimeSeriesDataItem.clone : r1 = specialinvoke r0.<java.lang.Object: java.lang.Object clone()>()
org.jfree.data.general.Series.addChangeListener : $r2 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners>
org.jfree.data.general.Series.fireSeriesChanged : $z0 = r0.<org.jfree.data.general.Series: boolean notify>
org.jfree.data.general.Series.fireSeriesChanged : $r1 = new org.jfree.data.general.SeriesChangeEvent
org.jfree.data.time.Year.peg : $l1 = virtualinvoke r0.<org.jfree.data.time.Year: long getLastMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.Year.peg : $l0 = virtualinvoke r0.<org.jfree.data.time.Year: long getFirstMillisecond(java.util.Calendar)>(r1)
org.jfree.data.time.TimeSeries.getRawDataItem : $r1 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.chart.util.ParamChecks.nullNotPermitted : $r3 = new java.lang.IllegalArgumentException
org.jfree.chart.util.ParamChecks.nullNotPermitted : if r0 != null goto return
org.jfree.data.time.TimeSeriesDataItem.getValue : $r1 = r0.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number value>
org.jfree.data.time.TimeSeries.maxIgnoreNaN : return d1
org.jfree.data.time.TimeSeries.maxIgnoreNaN : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0)
org.jfree.data.time.TimeSeries.maxIgnoreNaN : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1)
org.jfree.data.time.TimeSeries.maxIgnoreNaN : $d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1)
org.jfree.data.time.TimeSeries.updateBoundsForRemovedItem : $d1 = r0.<org.jfree.data.time.TimeSeries: double minY>
org.jfree.data.time.TimeSeries.updateBoundsForRemovedItem : if r2 == null goto return
org.jfree.data.time.TimeSeries.updateBoundsForRemovedItem : r2 = virtualinvoke r1.<org.jfree.data.time.TimeSeriesDataItem: java.lang.Number getValue()>()
org.jfree.data.time.TimeSeries.updateBoundsForRemovedItem : specialinvoke r0.<org.jfree.data.time.TimeSeries: void findBoundsByIteration()>()
org.jfree.data.time.TimeSeries.updateBoundsForRemovedItem : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0)
org.jfree.data.time.TimeSeries.updateBoundsForRemovedItem : d0 = virtualinvoke r2.<java.lang.Number: double doubleValue()>()
org.jfree.data.time.TimeSeries.delete : virtualinvoke r0.<org.jfree.data.time.TimeSeries: void fireSeriesChanged()>()
org.jfree.data.time.TimeSeries.delete : $r5 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.delete : if i0 < 0 goto return
org.jfree.data.time.TimeSeries.delete : i0 = virtualinvoke r0.<org.jfree.data.time.TimeSeries: int getIndex(org.jfree.data.time.RegularTimePeriod)>(r1)
org.jfree.data.time.TimeSeries.delete : $r3 = r0.<org.jfree.data.time.TimeSeries: java.util.List data>
org.jfree.data.time.TimeSeries.delete : specialinvoke r0.<org.jfree.data.time.TimeSeries: void updateBoundsForRemovedItem(org.jfree.data.time.TimeSeriesDataItem)>(r2)
org.jfree.data.time.TimeSeries.minIgnoreNaN : return d1
org.jfree.data.time.TimeSeries.minIgnoreNaN : $d2 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1)
org.jfree.data.time.TimeSeries.minIgnoreNaN : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0)
org.jfree.data.time.TimeSeries.minIgnoreNaN : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1)
org.jfree.data.general.Series.notifyListeners : $r4 = r2[i0]
org.jfree.data.general.Series.notifyListeners : $r3 = r0.<org.jfree.data.general.Series: javax.swing.event.EventListenerList listeners>
org.jfree.data.general.Series.notifyListeners : $i2 = i0 + 1
org.jfree.data.general.Series.notifyListeners : $i1 = lengthof r2
org.jfree.data.time.Year.getYear : $s0 = r0.<org.jfree.data.time.Year: short year>
