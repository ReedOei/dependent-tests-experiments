org.jfree.data.Range.getUpperBound : $d0 = r0.<org.jfree.data.Range: double upper>
org.jfree.data.Range.max : return d1
org.jfree.data.Range.max : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0)
org.jfree.data.Range.max : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1)
org.jfree.data.Range.max : $d2 = staticinvoke <java.lang.Math: double max(double,double)>(d0, d1)
org.jfree.data.Range.equals : $d2 = r0.<org.jfree.data.Range: double upper>
org.jfree.data.Range.equals : $z0 = r1 instanceof org.jfree.data.Range
org.jfree.data.Range.equals : $d0 = r0.<org.jfree.data.Range: double lower>
org.jfree.data.Range.equals : return 1
org.jfree.data.Range.equals : r2 = (org.jfree.data.Range) r1
org.jfree.data.Range.combineIgnoringNaN : $r2 = new org.jfree.data.Range
org.jfree.data.Range.combineIgnoringNaN : $d2 = virtualinvoke r0.<org.jfree.data.Range: double getLowerBound()>()
org.jfree.data.Range.combineIgnoringNaN : if r1 != null goto $d2 = virtualinvoke r0.<org.jfree.data.Range: double getLowerBound()>()
org.jfree.data.Range.combineIgnoringNaN : $d4 = virtualinvoke r0.<org.jfree.data.Range: double getUpperBound()>()
org.jfree.data.Range.combineIgnoringNaN : return r1
org.jfree.data.Range.combineIgnoringNaN : return r0
org.jfree.data.Range.combineIgnoringNaN : if r0 != null goto (branch)
org.jfree.data.Range.getLowerBound : $d0 = r0.<org.jfree.data.Range: double lower>
org.jfree.data.Range.min : return d0
org.jfree.data.Range.min : $d2 = staticinvoke <java.lang.Math: double min(double,double)>(d0, d1)
org.jfree.data.Range.min : $z0 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d0)
org.jfree.data.Range.min : $z1 = staticinvoke <java.lang.Double: boolean isNaN(double)>(d1)
