org.apache.ambari.server.checks.LZOCheck.perform : $r7 = r0.<org.apache.ambari.server.checks.LZOCheck: org.apache.ambari.server.configuration.Configuration config> >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : $r8 = virtualinvoke $r7.<org.apache.ambari.server.configuration.Configuration: java.lang.Boolean getGplLicenseAccepted()>()
org.apache.ambari.server.checks.LZOCheck.perform : $r8 = virtualinvoke $r7.<org.apache.ambari.server.configuration.Configuration: java.lang.Boolean getGplLicenseAccepted()>() >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>()
org.apache.ambari.server.checks.LZOCheck.perform : $z0 = virtualinvoke $r8.<java.lang.Boolean: boolean booleanValue()>() >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : if $z0 == 0
org.apache.ambari.server.checks.LZOCheck.perform : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : return
org.apache.ambari.server.checks.LZOCheck.perform : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : $r9 = new java.util.ArrayList
org.apache.ambari.server.checks.LZOCheck.perform : $r9 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : specialinvoke $r9.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.checks.LZOCheck.perform : specialinvoke $r9.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : r4 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus WARNING>
org.apache.ambari.server.checks.LZOCheck.perform : r4 = <org.apache.ambari.server.state.stack.PrereqCheckStatus: org.apache.ambari.server.state.stack.PrereqCheckStatus WARNING> >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : r5 = virtualinvoke r0.<org.apache.ambari.server.checks.LZOCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "core-site", "io.compression.codecs")
org.apache.ambari.server.checks.LZOCheck.perform : r5 = virtualinvoke r0.<org.apache.ambari.server.checks.LZOCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "core-site", "io.compression.codecs") >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : if r5 == null
org.apache.ambari.server.checks.LZOCheck.perform : if r5 == null >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : $z4 = virtualinvoke r5.<java.lang.String: boolean contains(java.lang.CharSequence)>("com.hadoop.compression.lzo.LzoCodec")
org.apache.ambari.server.checks.LZOCheck.perform : if r5 == null >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : r6 = virtualinvoke r0.<org.apache.ambari.server.checks.LZOCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "core-site", "io.compression.codec.lzo.class")
org.apache.ambari.server.checks.LZOCheck.perform : r6 = virtualinvoke r0.<org.apache.ambari.server.checks.LZOCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "core-site", "io.compression.codec.lzo.class") >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : $r14 = "com.hadoop.compression.lzo.LzoCodec"
org.apache.ambari.server.checks.LZOCheck.perform : $r14 = "com.hadoop.compression.lzo.LzoCodec" >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : $z6 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r6)
org.apache.ambari.server.checks.LZOCheck.perform : $z6 = virtualinvoke $r14.<java.lang.String: boolean equals(java.lang.Object)>(r6) >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : if $z6 == 0
org.apache.ambari.server.checks.LZOCheck.perform : if $z6 == 0 >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : $r12 = virtualinvoke r0.<org.apache.ambari.server.checks.LZOCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("io.compression.codec.lzo.class", r1, r2)
org.apache.ambari.server.checks.LZOCheck.perform : if $z6 == 0 >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : $z1 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.checks.LZOCheck.perform : $z1 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : if $z1 != 0
org.apache.ambari.server.checks.LZOCheck.perform : if $z1 != 0 >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : $r10 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>($r9, "You have LZO codec enabled in the core-site config of your cluster. You have to accept GPL license during ambari-server setup to have LZO installed automatically. If any hosts require LZO, it should be installed before starting the upgrade. Consult Ambari documentation for instructions on how to do this.")
org.apache.ambari.server.checks.LZOCheck.perform : if $z1 != 0 >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : return
org.apache.ambari.server.checks.LZOCheck.perform : $r10 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,java.lang.String)>($r9, "You have LZO codec enabled in the core-site config of your cluster. You have to accept GPL license during ambari-server setup to have LZO installed automatically. If any hosts require LZO, it should be installed before starting the upgrade. Consult Ambari documentation for instructions on how to do this.") >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r10)
org.apache.ambari.server.checks.LZOCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setFailReason(java.lang.String)>($r10) >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : $r11 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>()
org.apache.ambari.server.checks.LZOCheck.perform : $r11 = virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: java.util.LinkedHashSet getFailedOn()>() >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : virtualinvoke $r11.<java.util.LinkedHashSet: boolean add(java.lang.Object)>("LZO")
org.apache.ambari.server.checks.LZOCheck.perform : virtualinvoke $r11.<java.util.LinkedHashSet: boolean add(java.lang.Object)>("LZO") >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>(r4)
org.apache.ambari.server.checks.LZOCheck.perform : virtualinvoke r1.<org.apache.ambari.server.state.stack.PrerequisiteCheck: void setStatus(org.apache.ambari.server.state.stack.PrereqCheckStatus)>(r4) >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : return
org.apache.ambari.server.checks.LZOCheck.perform : $r12 = virtualinvoke r0.<org.apache.ambari.server.checks.LZOCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("io.compression.codec.lzo.class", r1, r2) >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r12)
org.apache.ambari.server.checks.LZOCheck.perform : interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r12) >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : $z1 = interfaceinvoke $r9.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.checks.LZOCheck.perform : $z4 = virtualinvoke r5.<java.lang.String: boolean contains(java.lang.CharSequence)>("com.hadoop.compression.lzo.LzoCodec") >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : if $z4 == 0
org.apache.ambari.server.checks.LZOCheck.perform : if $z4 == 0 >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : $r13 = virtualinvoke r0.<org.apache.ambari.server.checks.LZOCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("io.compression.codecs", r1, r2)
org.apache.ambari.server.checks.LZOCheck.perform : if $z4 == 0 >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : r6 = virtualinvoke r0.<org.apache.ambari.server.checks.LZOCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "core-site", "io.compression.codec.lzo.class")
org.apache.ambari.server.checks.LZOCheck.perform : $r13 = virtualinvoke r0.<org.apache.ambari.server.checks.LZOCheck: java.lang.String getFailReason(java.lang.String,org.apache.ambari.server.state.stack.PrerequisiteCheck,org.apache.ambari.server.controller.PrereqCheckRequest)>("io.compression.codecs", r1, r2) >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r13)
org.apache.ambari.server.checks.LZOCheck.perform : interfaceinvoke $r9.<java.util.List: boolean add(java.lang.Object)>($r13) >>>>>>>> org.apache.ambari.server.checks.LZOCheck.perform : r6 = virtualinvoke r0.<org.apache.ambari.server.checks.LZOCheck: java.lang.String getProperty(org.apache.ambari.server.controller.PrereqCheckRequest,java.lang.String,java.lang.String)>(r2, "core-site", "io.compression.codec.lzo.class")
