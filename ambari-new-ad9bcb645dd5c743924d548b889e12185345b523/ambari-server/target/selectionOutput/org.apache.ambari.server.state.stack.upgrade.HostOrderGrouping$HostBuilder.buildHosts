org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z0 = staticinvoke <org.apache.commons.collections.CollectionUtils: boolean isEmpty(java.util.Collection)>(r2) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z0 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r84 = staticinvoke <java.util.Collections: java.util.List emptyList()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r3 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.Cluster getCluster()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r3 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.Cluster getCluster()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r16 = new java.util.ArrayList
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r16 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r16.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r16.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r5 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.actionmanager.HostRoleCommandFactory getHostRoleCommandFactory()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r5 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.actionmanager.HostRoleCommandFactory getHostRoleCommandFactory()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r6 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder: org.apache.ambari.server.metadata.RoleCommandOrder getRoleCommandOrderForUpgrade(org.apache.ambari.server.state.Cluster)>(r3)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r6 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder: org.apache.ambari.server.metadata.RoleCommandOrder getRoleCommandOrderForUpgrade(org.apache.ambari.server.state.Cluster)>(r3) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r7 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r7 = interfaceinvoke r2.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z16 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z16 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z16 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z16 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r17 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z16 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : return $r16
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r17 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r8 = (java.lang.String) $r17
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r8 = (java.lang.String) $r17 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r18 = new java.util.ArrayList
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r18 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r18.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r18.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r19 = new java.util.HashMap
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r19 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r19.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r19.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r20 = new java.util.HashMap
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r20 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r20.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r20.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r20)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r19.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>(r8, $r20) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r22 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts(java.lang.String)>(r8)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r22 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: java.util.List getServiceComponentHosts(java.lang.String)>(r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r90 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r90 = interfaceinvoke $r22.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z17 = interfaceinvoke r90.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z17 = interfaceinvoke r90.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z17 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z17 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r64 = interfaceinvoke r90.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z17 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z1 = interfaceinvoke $r18.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z1 = interfaceinvoke $r18.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z1 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z11 = interfaceinvoke $r20.<java.util.Map: boolean isEmpty()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r96 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.stageplanner.RoleGraphFactory getRoleGraphFactory()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r96 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.stageplanner.RoleGraphFactory getRoleGraphFactory()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r97 = interfaceinvoke r96.<org.apache.ambari.server.stageplanner.RoleGraphFactory: org.apache.ambari.server.stageplanner.RoleGraph createNew(org.apache.ambari.server.metadata.RoleCommandOrder)>(r6)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r97 = interfaceinvoke r96.<org.apache.ambari.server.stageplanner.RoleGraphFactory: org.apache.ambari.server.stageplanner.RoleGraph createNew(org.apache.ambari.server.metadata.RoleCommandOrder)>(r6) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r98 = virtualinvoke r97.<org.apache.ambari.server.stageplanner.RoleGraph: java.util.List getOrderedHostRoleCommands(java.util.Map)>($r19)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r98 = virtualinvoke r97.<org.apache.ambari.server.stageplanner.RoleGraph: java.util.List getOrderedHostRoleCommands(java.util.Map)>($r19) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r23 = new java.util.ArrayList
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r23 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r23.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r23.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : i3 = 1
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : i3 = 1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r100 = interfaceinvoke r98.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r100 = interfaceinvoke r98.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z18 = interfaceinvoke r100.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z18 = interfaceinvoke r100.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z18 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z18 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r43 = interfaceinvoke r100.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z18 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r24 = new org.apache.ambari.server.state.stack.upgrade.ManualTask
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r24 = new org.apache.ambari.server.state.stack.upgrade.ManualTask >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r24.<org.apache.ambari.server.state.stack.upgrade.ManualTask: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r24.<org.apache.ambari.server.state.stack.upgrade.ManualTask: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r25 = newarray (java.lang.Object)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r25 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r25[0] = r8
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r25[0] = r8 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r111 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Please acknowledge that host %s has been prepared.", $r25)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r111 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Please acknowledge that host %s has been prepared.", $r25) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r26 = $r24.<org.apache.ambari.server.state.stack.upgrade.ManualTask: java.util.List messages>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r26 = $r24.<org.apache.ambari.server.state.stack.upgrade.ManualTask: java.util.List messages> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>(r111)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r26.<java.util.List: boolean add(java.lang.Object)>(r111) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r27 = new com.google.gson.JsonObject
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r27 = new com.google.gson.JsonObject >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r27.<com.google.gson.JsonObject: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r27.<com.google.gson.JsonObject: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r28 = <org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType: org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType HOST_UPGRADE>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r28 = <org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType: org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType HOST_UPGRADE> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r29 = virtualinvoke $r28.<org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType: java.lang.String toString()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r29 = virtualinvoke $r28.<org.apache.ambari.server.state.stack.upgrade.HostOrderItem$HostOrderActionType: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : virtualinvoke $r27.<com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.String)>("type", $r29)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : virtualinvoke $r27.<com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.String)>("type", $r29) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : virtualinvoke $r27.<com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.String)>("host", r8)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : virtualinvoke $r27.<com.google.gson.JsonObject: void addProperty(java.lang.String,java.lang.String)>("host", r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r30 = virtualinvoke $r27.<com.google.gson.JsonObject: java.lang.String toString()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r30 = virtualinvoke $r27.<com.google.gson.JsonObject: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r24.<org.apache.ambari.server.state.stack.upgrade.ManualTask: java.lang.String structuredOut> = $r30
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r24.<org.apache.ambari.server.state.stack.upgrade.ManualTask: java.lang.String structuredOut> = $r30 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z3 = interfaceinvoke $r18.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z3 = interfaceinvoke $r18.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z3 != 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z3 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r36 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z3 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r31 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r31 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r34 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type SERVER_SIDE_ACTION>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r34 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type SERVER_SIDE_ACTION> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r32 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r32 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r33 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r33 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r35 = staticinvoke <java.util.Collections: java.util.Set emptySet()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r35 = staticinvoke <java.util.Collections: java.util.Set emptySet()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r33.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task)>(null, null, $r35, $r24)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r33.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task)>(null, null, $r35, $r24) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r32[0] = $r33
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r32[0] = $r33 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r31.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r34, "Manual Confirmation", $r32)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r31.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r34, "Manual Confirmation", $r32) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r31)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r31) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r16.<java.util.List: boolean addAll(java.util.Collection)>($r23)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r16.<java.util.List: boolean addAll(java.util.Collection)>($r23) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z16 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z16 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z16 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r36 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r38 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type STOP>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r38 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type STOP> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r37 = newarray (java.lang.Object)[1]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r37 = newarray (java.lang.Object)[1] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r37[0] = r8
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r37[0] = r8 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r39 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Stop on %s", $r37)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r39 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Stop on %s", $r37) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $i0 = interfaceinvoke $r18.<java.util.List: int size()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $i0 = interfaceinvoke $r18.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r40 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[$i0]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r40 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[$i0] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r41 = interfaceinvoke $r18.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r40)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r41 = interfaceinvoke $r18.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r40) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r42 = (org.apache.ambari.server.state.stack.upgrade.TaskWrapper[]) $r41
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r42 = (org.apache.ambari.server.state.stack.upgrade.TaskWrapper[]) $r41 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r36.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r38, $r39, $r42)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r36.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r38, $r39, $r42) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r36)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r16.<java.util.List: boolean add(java.lang.Object)>($r36) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r31 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r43 = interfaceinvoke r100.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r101 = (java.util.Map) $r43
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r101 = (java.util.Map) $r43 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r44 = interfaceinvoke r101.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r44 = interfaceinvoke r101.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r102 = (java.util.List) $r44
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r102 = (java.util.List) $r44 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r45 = newarray (java.lang.Object)[2]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r45 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r45[0] = r8
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r45[0] = r8 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $i1 = i3
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $i1 = i3 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : i3 = i3 + 1
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : i3 = i3 + 1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r46 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r45[1] = $r46
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r45[1] = $r46 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r103 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Starting components on %s (phase %d)", $r45)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r103 = staticinvoke <java.lang.String: java.lang.String format(java.lang.String,java.lang.Object[])>("Starting components on %s (phase %d)", $r45) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r47 = new java.util.ArrayList
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r47 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r47.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r47.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r104 = interfaceinvoke r102.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r104 = interfaceinvoke r102.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z7 = interfaceinvoke r104.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z7 = interfaceinvoke r104.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z7 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z7 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r53 = interfaceinvoke r104.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z7 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z8 = interfaceinvoke $r47.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z8 = interfaceinvoke $r47.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z8 != 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z8 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r48 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z8 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z18 = interfaceinvoke r100.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z18 = interfaceinvoke r100.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z18 = interfaceinvoke r100.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r48 = new org.apache.ambari.server.state.stack.upgrade.StageWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r49 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type RESTART>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r49 = <org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type: org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type RESTART> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $i2 = interfaceinvoke $r47.<java.util.List: int size()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $i2 = interfaceinvoke $r47.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r50 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[$i2]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r50 = newarray (org.apache.ambari.server.state.stack.upgrade.TaskWrapper)[$i2] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r51 = interfaceinvoke $r47.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r50)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r51 = interfaceinvoke $r47.<java.util.List: java.lang.Object[] toArray(java.lang.Object[])>($r50) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r52 = (org.apache.ambari.server.state.stack.upgrade.TaskWrapper[]) $r51
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r52 = (org.apache.ambari.server.state.stack.upgrade.TaskWrapper[]) $r51 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r48.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r49, r103, $r52)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r48.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: void <init>(org.apache.ambari.server.state.stack.upgrade.StageWrapper$Type,java.lang.String,org.apache.ambari.server.state.stack.upgrade.TaskWrapper[])>($r49, r103, $r52) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r48)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r23.<java.util.List: boolean add(java.lang.Object)>($r48) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z18 = interfaceinvoke r100.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r53 = interfaceinvoke r104.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r13 = (org.apache.ambari.server.actionmanager.HostRoleCommand) $r53
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r13 = (org.apache.ambari.server.actionmanager.HostRoleCommand) $r53 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r54 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getRepositoryVersion()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r54 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getRepositoryVersion()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r14 = virtualinvoke $r54.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.StackId getStackId()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r14 = virtualinvoke $r54.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: org.apache.ambari.server.state.StackId getStackId()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r55 = virtualinvoke r13.<org.apache.ambari.server.actionmanager.HostRoleCommand: org.apache.ambari.server.Role getRole()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r55 = virtualinvoke r13.<org.apache.ambari.server.actionmanager.HostRoleCommand: org.apache.ambari.server.Role getRole()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r15 = virtualinvoke $r55.<org.apache.ambari.server.Role: java.lang.String name()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r15 = virtualinvoke $r55.<org.apache.ambari.server.Role: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r105 = null
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r105 = null >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r106 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.api.services.AmbariMetaInfo getAmbariMetaInfo()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r105 = null >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r85 := @caughtexception
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r86 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r87 = newarray (java.lang.Object)[3]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r87 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r87[0] = r15
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r87[0] = r15 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r88 = virtualinvoke r14.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r88 = virtualinvoke r14.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r87[1] = $r88
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r87[1] = $r88 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r89 = virtualinvoke r14.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r89 = virtualinvoke r14.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r87[2] = $r89
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r87[2] = $r89 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r86.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object[])>("Unable to lookup service by component {} for stack {}-{}", $r87)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r86.<org.slf4j.Logger: void error(java.lang.String,java.lang.Object[])>("Unable to lookup service by component {} for stack {}-{}", $r87) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r58 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r58 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r59 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r8)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r59 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r60 = new org.apache.ambari.server.state.stack.upgrade.RestartTask
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r60 = new org.apache.ambari.server.state.stack.upgrade.RestartTask >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r60.<org.apache.ambari.server.state.stack.upgrade.RestartTask: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r60.<org.apache.ambari.server.state.stack.upgrade.RestartTask: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r58.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task)>(r105, r15, $r59, $r60)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r58.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task)>(r105, r15, $r59, $r60) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r47.<java.util.List: boolean add(java.lang.Object)>($r58)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r47.<java.util.List: boolean add(java.lang.Object)>($r58) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z7 = interfaceinvoke r104.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z7 = interfaceinvoke r104.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z7 = interfaceinvoke r104.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r106 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.api.services.AmbariMetaInfo getAmbariMetaInfo()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r56 = virtualinvoke r14.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r106 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.api.services.AmbariMetaInfo getAmbariMetaInfo()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r85 := @caughtexception
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r56 = virtualinvoke r14.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r57 = virtualinvoke r14.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r56 = virtualinvoke r14.<org.apache.ambari.server.state.StackId: java.lang.String getStackName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r85 := @caughtexception
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r57 = virtualinvoke r14.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r105 = virtualinvoke r106.<org.apache.ambari.server.api.services.AmbariMetaInfo: java.lang.String getComponentToService(java.lang.String,java.lang.String,java.lang.String)>($r56, $r57, r15)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r57 = virtualinvoke r14.<org.apache.ambari.server.state.StackId: java.lang.String getStackVersion()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r85 := @caughtexception
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r105 = virtualinvoke r106.<org.apache.ambari.server.api.services.AmbariMetaInfo: java.lang.String getComponentToService(java.lang.String,java.lang.String,java.lang.String)>($r56, $r57, r15) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $r58 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r105 = virtualinvoke r106.<org.apache.ambari.server.api.services.AmbariMetaInfo: java.lang.String getComponentToService(java.lang.String,java.lang.String,java.lang.String)>($r56, $r57, r15) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r85 := @caughtexception
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $r58 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r58 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z11 = interfaceinvoke $r20.<java.util.Map: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z11 == 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z11 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r61 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping: org.slf4j.Logger access$100()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z11 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r96 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.stageplanner.RoleGraphFactory getRoleGraphFactory()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r61 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r62 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r62 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r63 = virtualinvoke $r62.<org.apache.ambari.server.state.stack.upgrade.Direction: java.lang.String getText(boolean)>(0)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r63 = virtualinvoke $r62.<org.apache.ambari.server.state.stack.upgrade.Direction: java.lang.String getText(boolean)>(0) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r61.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("There were no {} commands generated for {}", $r63, r8)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r61.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("There were no {} commands generated for {}", $r63, r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z16 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z16 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z16 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r64 = interfaceinvoke r90.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r91 = (org.apache.ambari.server.state.ServiceComponentHost) $r64
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r91 = (org.apache.ambari.server.state.ServiceComponentHost) $r64 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z12 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder: boolean isVersionAdvertised(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.ServiceComponentHost)>(r1, r91)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z12 = specialinvoke r0.<org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder: boolean isVersionAdvertised(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.ServiceComponentHost)>(r1, r91) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z12 != 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z12 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z17 = interfaceinvoke r90.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z12 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r65 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.stack.MasterHostResolver getResolver()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r65 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.stack.MasterHostResolver getResolver()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r66 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r66 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r67 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r67 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r92 = virtualinvoke $r65.<org.apache.ambari.server.stack.MasterHostResolver: org.apache.ambari.server.stack.HostsType getMasterAndHosts(java.lang.String,java.lang.String)>($r66, $r67)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r92 = virtualinvoke $r65.<org.apache.ambari.server.stack.MasterHostResolver: org.apache.ambari.server.stack.HostsType getMasterAndHosts(java.lang.String,java.lang.String)>($r66, $r67) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if null == r92
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if null == r92 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r77 = r92.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if null == r92 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z13 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: boolean isClientComponent()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z13 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: boolean isClientComponent()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z13 != 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z13 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r72 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z13 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r68 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r68 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r94 = staticinvoke <org.apache.ambari.server.Role: org.apache.ambari.server.Role valueOf(java.lang.String)>($r68)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r94 = staticinvoke <org.apache.ambari.server.Role: org.apache.ambari.server.Role valueOf(java.lang.String)>($r68) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r69 = <org.apache.ambari.server.RoleCommand: org.apache.ambari.server.RoleCommand START>
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r69 = <org.apache.ambari.server.RoleCommand: org.apache.ambari.server.RoleCommand START> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r95 = interfaceinvoke r5.<org.apache.ambari.server.actionmanager.HostRoleCommandFactory: org.apache.ambari.server.actionmanager.HostRoleCommand create(java.lang.String,org.apache.ambari.server.Role,org.apache.ambari.server.state.ServiceComponentHostEvent,org.apache.ambari.server.RoleCommand)>(r8, r94, null, $r69)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r95 = interfaceinvoke r5.<org.apache.ambari.server.actionmanager.HostRoleCommandFactory: org.apache.ambari.server.actionmanager.HostRoleCommand create(java.lang.String,org.apache.ambari.server.Role,org.apache.ambari.server.state.ServiceComponentHostEvent,org.apache.ambari.server.RoleCommand)>(r8, r94, null, $r69) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r70 = virtualinvoke r94.<org.apache.ambari.server.Role: java.lang.String name()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r70 = virtualinvoke r94.<org.apache.ambari.server.Role: java.lang.String name()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r70, r95)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r20.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r70, r95) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z17 = interfaceinvoke r90.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z17 = interfaceinvoke r90.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z17 = interfaceinvoke r90.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r72 = new org.apache.ambari.server.state.stack.upgrade.TaskWrapper >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r73 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r73 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r74 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r74 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r75 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r8)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r75 = staticinvoke <java.util.Collections: java.util.Set singleton(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r76 = new org.apache.ambari.server.state.stack.upgrade.StopTask
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r76 = new org.apache.ambari.server.state.stack.upgrade.StopTask >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r76.<org.apache.ambari.server.state.stack.upgrade.StopTask: void <init>()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r76.<org.apache.ambari.server.state.stack.upgrade.StopTask: void <init>()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r72.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task)>($r73, $r74, $r75, $r76)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : specialinvoke $r72.<org.apache.ambari.server.state.stack.upgrade.TaskWrapper: void <init>(java.lang.String,java.lang.String,java.util.Set,org.apache.ambari.server.state.stack.upgrade.Task)>($r73, $r74, $r75, $r76) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r72)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r18.<java.util.List: boolean add(java.lang.Object)>($r72) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r68 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r77 = r92.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z15 = virtualinvoke $r77.<java.util.LinkedHashSet: boolean contains(java.lang.Object)>(r8)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z15 = virtualinvoke $r77.<java.util.LinkedHashSet: boolean contains(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z15 != 0
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z15 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r78 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : if $z15 != 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z13 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: boolean isClientComponent()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r78 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r93 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion(java.lang.String)>($r78)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : r93 = virtualinvoke r1.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.orm.entities.RepositoryVersionEntity getTargetRepositoryVersion(java.lang.String)>($r78) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r79 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping: org.slf4j.Logger access$100()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r79 = staticinvoke <org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping: org.slf4j.Logger access$100()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r80 = newarray (java.lang.Object)[4]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r80 = newarray (java.lang.Object)[4] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r80[0] = r8
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r80[0] = r8 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r81 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r81 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r80[1] = $r81
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r80[1] = $r81 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r82 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r82 = interfaceinvoke r91.<org.apache.ambari.server.state.ServiceComponentHost: java.lang.String getServiceComponentName()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r80[2] = $r82
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r80[2] = $r82 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r83 = virtualinvoke r93.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String getVersion()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r83 = virtualinvoke r93.<org.apache.ambari.server.orm.entities.RepositoryVersionEntity: java.lang.String getVersion()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r80[3] = $r83
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r80[3] = $r83 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r79.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Host {} could not be orchestrated. Either there are no components for {}/{} or the target version {} is already current.", $r80)
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : interfaceinvoke $r79.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Host {} could not be orchestrated. Either there are no components for {}/{} or the target version {} is already current.", $r80) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z17 = interfaceinvoke r90.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z17 = interfaceinvoke r90.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z17 = interfaceinvoke r90.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : goto [?= $z17 = interfaceinvoke r90.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $z17 = interfaceinvoke r90.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : $r84 = staticinvoke <java.util.Collections: java.util.List emptyList()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.HostOrderGrouping$HostBuilder.buildHosts : return $r84
