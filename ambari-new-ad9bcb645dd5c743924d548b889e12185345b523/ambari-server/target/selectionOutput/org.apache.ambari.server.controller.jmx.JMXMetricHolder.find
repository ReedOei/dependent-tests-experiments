org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : r2 = staticinvoke <org.apache.ambari.server.controller.jmx.JMXMetricHolder$JmxPattern: org.apache.ambari.server.controller.jmx.JMXMetricHolder$JmxPattern parse(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r3 = r0.<org.apache.ambari.server.controller.jmx.JMXMetricHolder: java.util.List beans>
org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r3 = r0.<org.apache.ambari.server.controller.jmx.JMXMetricHolder: java.util.List beans> >>>>>>>> org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r4 = interfaceinvoke $r3.<java.util.List: java.util.stream.Stream stream()>()
org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r4 = interfaceinvoke $r3.<java.util.List: java.util.stream.Stream stream()>() >>>>>>>> org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : virtualinvoke r2.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r6 = dynamicinvoke "apply" <java.util.function.Function (org.apache.ambari.server.controller.jmx.JMXMetricHolder$JmxPattern)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Ljava/lang/Object;)Ljava/lang/Object;", handle: <org.apache.ambari.server.controller.jmx.JMXMetricHolder$JmxPattern: java.util.Optional extract(java.util.Map)>, class "(Ljava/util/Map;)Ljava/util/Optional;")
org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r6 = dynamicinvoke "apply" <java.util.function.Function (org.apache.ambari.server.controller.jmx.JMXMetricHolder$JmxPattern)>(r2) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Ljava/lang/Object;)Ljava/lang/Object;", handle: <org.apache.ambari.server.controller.jmx.JMXMetricHolder$JmxPattern: java.util.Optional extract(java.util.Map)>, class "(Ljava/util/Map;)Ljava/util/Optional;") >>>>>>>> org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r7 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r6)
org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r7 = interfaceinvoke $r4.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r6) >>>>>>>> org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r8 = dynamicinvoke "test" <java.util.function.Predicate ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Ljava/lang/Object;)Z", handle: <java.util.Optional: boolean isPresent()>, class "(Ljava/util/Optional;)Z")
org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r8 = dynamicinvoke "test" <java.util.function.Predicate ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Ljava/lang/Object;)Z", handle: <java.util.Optional: boolean isPresent()>, class "(Ljava/util/Optional;)Z") >>>>>>>> org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r8)
org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r9 = interfaceinvoke $r7.<java.util.stream.Stream: java.util.stream.Stream filter(java.util.function.Predicate)>($r8) >>>>>>>> org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r10 = dynamicinvoke "apply" <java.util.function.Function ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Ljava/lang/Object;)Ljava/lang/Object;", handle: <java.util.Optional: java.lang.Object get()>, class "(Ljava/util/Optional;)Ljava/lang/Object;")
org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r10 = dynamicinvoke "apply" <java.util.function.Function ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Ljava/lang/Object;)Ljava/lang/Object;", handle: <java.util.Optional: java.lang.Object get()>, class "(Ljava/util/Optional;)Ljava/lang/Object;") >>>>>>>> org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r11 = interfaceinvoke $r9.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r10)
org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r11 = interfaceinvoke $r9.<java.util.stream.Stream: java.util.stream.Stream map(java.util.function.Function)>($r10) >>>>>>>> org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r12 = interfaceinvoke $r11.<java.util.stream.Stream: java.util.Optional findFirst()>()
org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : $r12 = interfaceinvoke $r11.<java.util.stream.Stream: java.util.Optional findFirst()>() >>>>>>>> org.apache.ambari.server.controller.jmx.JMXMetricHolder.find : return $r12
