org.apache.ambari.server.resources.ResourceManager.getResource : $r5 = r0.<org.apache.ambari.server.resources.ResourceManager: org.apache.ambari.server.configuration.Configuration configs> >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r6 = virtualinvoke $r5.<org.apache.ambari.server.configuration.Configuration: java.util.Map getConfigsMap()>()
org.apache.ambari.server.resources.ResourceManager.getResource : $r6 = virtualinvoke $r5.<org.apache.ambari.server.configuration.Configuration: java.util.Map getConfigsMap()>() >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR>
org.apache.ambari.server.resources.ResourceManager.getResource : $r7 = <org.apache.ambari.server.configuration.Configuration: org.apache.ambari.server.configuration.Configuration$ConfigurationProperty RESOURCES_DIR> >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r8 = virtualinvoke $r7.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>()
org.apache.ambari.server.resources.ResourceManager.getResource : $r8 = virtualinvoke $r7.<org.apache.ambari.server.configuration.Configuration$ConfigurationProperty: java.lang.String getKey()>() >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r9 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8)
org.apache.ambari.server.resources.ResourceManager.getResource : $r9 = interfaceinvoke $r6.<java.util.Map: java.lang.Object get(java.lang.Object)>($r8) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : r2 = (java.lang.String) $r9
org.apache.ambari.server.resources.ResourceManager.getResource : r2 = (java.lang.String) $r9 >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r10 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.resources.ResourceManager.getResource : $r10 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : r3 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("/", $r10)
org.apache.ambari.server.resources.ResourceManager.getResource : r3 = virtualinvoke r1.<java.lang.String: java.lang.String replace(java.lang.CharSequence,java.lang.CharSequence)>("/", $r10) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r11 = new java.io.File
org.apache.ambari.server.resources.ResourceManager.getResource : $r11 = new java.io.File >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r12 = new java.lang.StringBuilder
org.apache.ambari.server.resources.ResourceManager.getResource : $r12 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.resources.ResourceManager.getResource : specialinvoke $r12.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.resources.ResourceManager.getResource : $r13 = virtualinvoke $r12.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r14 = <java.io.File: java.lang.String separator>
org.apache.ambari.server.resources.ResourceManager.getResource : $r14 = <java.io.File: java.lang.String separator> >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14)
org.apache.ambari.server.resources.ResourceManager.getResource : $r15 = virtualinvoke $r13.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>($r14) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3)
org.apache.ambari.server.resources.ResourceManager.getResource : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r3) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.resources.ResourceManager.getResource : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r17)
org.apache.ambari.server.resources.ResourceManager.getResource : specialinvoke $r11.<java.io.File: void <init>(java.lang.String)>($r17) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r18 = <org.apache.ambari.server.resources.ResourceManager: org.slf4j.Logger LOG>
org.apache.ambari.server.resources.ResourceManager.getResource : $r18 = <org.apache.ambari.server.resources.ResourceManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $z0 = interfaceinvoke $r18.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.ambari.server.resources.ResourceManager.getResource : $z0 = interfaceinvoke $r18.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : if $z0 == 0
org.apache.ambari.server.resources.ResourceManager.getResource : if $z0 == 0 >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r20 = <org.apache.ambari.server.resources.ResourceManager: org.slf4j.Logger LOG>
org.apache.ambari.server.resources.ResourceManager.getResource : if $z0 == 0 >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : return $r11
org.apache.ambari.server.resources.ResourceManager.getResource : $r20 = <org.apache.ambari.server.resources.ResourceManager: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r19 = newarray (java.lang.Object)[3]
org.apache.ambari.server.resources.ResourceManager.getResource : $r19 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r19[0] = r2
org.apache.ambari.server.resources.ResourceManager.getResource : $r19[0] = r2 >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r19[1] = r3
org.apache.ambari.server.resources.ResourceManager.getResource : $r19[1] = r3 >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $z1 = virtualinvoke $r11.<java.io.File: boolean exists()>()
org.apache.ambari.server.resources.ResourceManager.getResource : $z1 = virtualinvoke $r11.<java.io.File: boolean exists()>() >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1)
org.apache.ambari.server.resources.ResourceManager.getResource : $r21 = staticinvoke <java.lang.Boolean: java.lang.Boolean valueOf(boolean)>($z1) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : $r19[2] = $r21
org.apache.ambari.server.resources.ResourceManager.getResource : $r19[2] = $r21 >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : interfaceinvoke $r20.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Resource requested from ResourceManager, resourceDir={}, resourcePath={}, fileExists={}", $r19)
org.apache.ambari.server.resources.ResourceManager.getResource : interfaceinvoke $r20.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Resource requested from ResourceManager, resourceDir={}, resourcePath={}, fileExists={}", $r19) >>>>>>>> org.apache.ambari.server.resources.ResourceManager.getResource : return $r11
