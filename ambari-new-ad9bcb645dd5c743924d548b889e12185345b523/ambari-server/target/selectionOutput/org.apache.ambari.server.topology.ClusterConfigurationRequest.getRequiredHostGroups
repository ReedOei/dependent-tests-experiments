org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : $r2 = new java.util.HashSet >>>>>>>> org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : specialinvoke $r2.<java.util.HashSet: void <init>()>()
org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : specialinvoke $r2.<java.util.HashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : $r3 = r0.<org.apache.ambari.server.topology.ClusterConfigurationRequest: org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor configurationProcessor>
org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : $r3 = r0.<org.apache.ambari.server.topology.ClusterConfigurationRequest: org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor configurationProcessor> >>>>>>>> org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : $r4 = virtualinvoke $r3.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor: java.util.Collection getRequiredHostGroups()>()
org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : $r4 = virtualinvoke $r3.<org.apache.ambari.server.controller.internal.BlueprintConfigurationProcessor: java.util.Collection getRequiredHostGroups()>() >>>>>>>> org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : interfaceinvoke $r2.<java.util.Collection: boolean addAll(java.util.Collection)>($r4)
org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : interfaceinvoke $r2.<java.util.Collection: boolean addAll(java.util.Collection)>($r4) >>>>>>>> org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : $z1 = r0.<org.apache.ambari.server.topology.ClusterConfigurationRequest: boolean configureSecurity>
org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : $z1 = r0.<org.apache.ambari.server.topology.ClusterConfigurationRequest: boolean configureSecurity> >>>>>>>> org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : if $z1 == 0
org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : $r5 = specialinvoke r0.<org.apache.ambari.server.topology.ClusterConfigurationRequest: java.util.Collection getRequiredHostgroupsForKerberosConfiguration()>()
org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : if $z1 == 0 >>>>>>>> org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : return $r2
org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : $r5 = specialinvoke r0.<org.apache.ambari.server.topology.ClusterConfigurationRequest: java.util.Collection getRequiredHostgroupsForKerberosConfiguration()>() >>>>>>>> org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : interfaceinvoke $r2.<java.util.Collection: boolean addAll(java.util.Collection)>($r5)
org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : interfaceinvoke $r2.<java.util.Collection: boolean addAll(java.util.Collection)>($r5) >>>>>>>> org.apache.ambari.server.topology.ClusterConfigurationRequest.getRequiredHostGroups : return $r2
