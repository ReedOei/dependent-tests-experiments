org.apache.ambari.server.state.UpgradeHelper.createSequence : r3 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.Cluster getCluster()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r4 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.stack.MasterHostResolver getResolver()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r4 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.stack.MasterHostResolver getResolver()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r5 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: java.util.Map getTasks()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r5 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: java.util.Map getTasks()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r17 = new java.util.ArrayList
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r17 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r17.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r17.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r125 = null
org.apache.ambari.server.state.UpgradeHelper.createSequence : r125 = null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r18 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r18 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r19 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: java.util.List getGroups(org.apache.ambari.server.state.stack.upgrade.Direction)>($r18)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r19 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: java.util.List getGroups(org.apache.ambari.server.state.stack.upgrade.Direction)>($r18) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r126 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r126 = interfaceinvoke $r19.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z31 = interfaceinvoke r126.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z31 = interfaceinvoke r126.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z31 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z31 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r35 = interfaceinvoke r126.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z31 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r20 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r20 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z0 = interfaceinvoke $r20.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z0 = interfaceinvoke $r20.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z0 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r145 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r151 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r151 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : z36 = 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : z36 = 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z37 = interfaceinvoke r151.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z37 = interfaceinvoke r151.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z37 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z37 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r21 = interfaceinvoke r151.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z37 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : return $r17
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r21 = interfaceinvoke r151.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r152 = (org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder) $r21
org.apache.ambari.server.state.UpgradeHelper.createSequence : r152 = (org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder) $r21 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r23 = class "Lorg/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping;"
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r23 = class "Lorg/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping;" >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r22 = r152.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.Class groupClass>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r22 = r152.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.Class groupClass> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z1 = virtualinvoke $r23.<java.lang.Object: boolean equals(java.lang.Object)>($r22)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z1 = virtualinvoke $r23.<java.lang.Object: boolean equals(java.lang.Object)>($r22) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z1 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if z36 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z38 = staticinvoke <org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean access$000(org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder)>(r152)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z38 = staticinvoke <org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean access$000(org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder)>(r152) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : z36 = z36 | $z38
org.apache.ambari.server.state.UpgradeHelper.createSequence : z36 = z36 | $z38 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z37 = interfaceinvoke r151.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z37 = interfaceinvoke r151.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z37 = interfaceinvoke r151.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if z36 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke r151.<java.util.Iterator: void remove()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if z36 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z38 = staticinvoke <org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean access$000(org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder)>(r152)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke r151.<java.util.Iterator: void remove()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z38 = staticinvoke <org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean access$000(org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder)>(r152)
org.apache.ambari.server.state.UpgradeHelper.createSequence : r145 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z2 = interfaceinvoke r145.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z2 = interfaceinvoke r145.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z2 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r24 = interfaceinvoke r145.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r151 = interfaceinvoke $r17.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r24 = interfaceinvoke r145.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r146 = (org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder) $r24
org.apache.ambari.server.state.UpgradeHelper.createSequence : r146 = (org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder) $r24 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r26 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r26 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r25 = r146.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.String name>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r25 = r146.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r26.<org.slf4j.Logger: void debug(java.lang.String)>($r25)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r26.<org.slf4j.Logger: void debug(java.lang.String)>($r25) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : i4 = 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : i4 = 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r27 = r146.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.util.List items>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r27 = r146.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.util.List items> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r147 = interfaceinvoke $r27.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r147 = interfaceinvoke $r27.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z3 = interfaceinvoke r147.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z3 = interfaceinvoke r147.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z3 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z3 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r28 = interfaceinvoke r147.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z3 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z2 = interfaceinvoke r145.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z2 = interfaceinvoke r145.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z2 = interfaceinvoke r145.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r28 = interfaceinvoke r147.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r148 = (org.apache.ambari.server.state.stack.upgrade.StageWrapper) $r28
org.apache.ambari.server.state.UpgradeHelper.createSequence : r148 = (org.apache.ambari.server.state.stack.upgrade.StageWrapper) $r28 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r29 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r29 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $i0 = i4
org.apache.ambari.server.state.UpgradeHelper.createSequence : $i0 = i4 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : i4 = i4 + 1
org.apache.ambari.server.state.UpgradeHelper.createSequence : i4 = i4 + 1 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r30 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i0) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r29.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("  Stage {}", $r30)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r29.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object)>("  Stage {}", $r30) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : i5 = 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : i5 = 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r31 = virtualinvoke r148.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: java.util.List getTasks()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r31 = virtualinvoke r148.<org.apache.ambari.server.state.stack.upgrade.StageWrapper: java.util.List getTasks()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r149 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r149 = interfaceinvoke $r31.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z4 = interfaceinvoke r149.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z4 = interfaceinvoke r149.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z4 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z4 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r32 = interfaceinvoke r149.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z4 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z3 = interfaceinvoke r147.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z3 = interfaceinvoke r147.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z3 = interfaceinvoke r147.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r32 = interfaceinvoke r149.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r150 = (org.apache.ambari.server.state.stack.upgrade.TaskWrapper) $r32
org.apache.ambari.server.state.UpgradeHelper.createSequence : r150 = (org.apache.ambari.server.state.stack.upgrade.TaskWrapper) $r32 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r33 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r33 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $i1 = i5
org.apache.ambari.server.state.UpgradeHelper.createSequence : $i1 = i5 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : i5 = i5 + 1
org.apache.ambari.server.state.UpgradeHelper.createSequence : i5 = i5 + 1 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r34 = staticinvoke <java.lang.Integer: java.lang.Integer valueOf(int)>($i1) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r33.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("    Task {} {}", $r34, r150)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r33.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object,java.lang.Object)>("    Task {} {}", $r34, r150) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z4 = interfaceinvoke r149.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z4 = interfaceinvoke r149.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z4 = interfaceinvoke r149.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r35 = interfaceinvoke r126.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r127 = (org.apache.ambari.server.state.stack.upgrade.Grouping) $r35
org.apache.ambari.server.state.UpgradeHelper.createSequence : r127 = (org.apache.ambari.server.state.stack.upgrade.Grouping) $r35 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r36 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.UpgradeScope scope>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r36 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.UpgradeScope scope> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z5 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: boolean isScoped(org.apache.ambari.server.state.stack.upgrade.UpgradeScope)>($r36)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z5 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: boolean isScoped(org.apache.ambari.server.state.stack.upgrade.UpgradeScope)>($r36) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z5 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z5 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z31 = interfaceinvoke r126.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z5 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r37 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.Condition condition>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r37 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.Condition condition> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if null == $r37
org.apache.ambari.server.state.UpgradeHelper.createSequence : if null == $r37 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r122 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.Condition condition>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if null == $r37 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38 = new org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38 = new org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r39 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.lang.String name>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r39 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.lang.String name> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.String name> = $r39
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.String name> = $r39 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r40 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.lang.String title>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r40 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.lang.String title> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.String title> = $r40
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.String title> = $r40 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r41 = virtualinvoke r127.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r41 = virtualinvoke r127.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.Class groupClass> = $r41
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.Class groupClass> = $r41 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z6 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean skippable>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z6 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean skippable> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean skippable> = $z6
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean skippable> = $z6 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z7 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean supportsAutoSkipOnFailure>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z7 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean supportsAutoSkipOnFailure> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean supportsAutoSkipOnFailure> = $z7
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean supportsAutoSkipOnFailure> = $z7 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z8 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean allowRetry>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z8 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean allowRetry> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean allowRetry> = $z8
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean allowRetry> = $z8 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z9 = virtualinvoke r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean isProcessingGroup()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z9 = virtualinvoke r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean isProcessingGroup()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : staticinvoke <org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean access$002(org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder,boolean)>($r38, $z9)
org.apache.ambari.server.state.UpgradeHelper.createSequence : staticinvoke <org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean access$002(org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder,boolean)>($r38, $z9) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r42 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r42 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z10 = virtualinvoke $r42.<org.apache.ambari.server.state.stack.upgrade.Direction: boolean isDowngrade()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z10 = virtualinvoke $r42.<org.apache.ambari.server.state.stack.upgrade.Direction: boolean isDowngrade()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z10 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z10 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean skippable> = 1
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z10 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r129 = null
org.apache.ambari.server.state.UpgradeHelper.createSequence : r129 = null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z11 = r127 instanceof org.apache.ambari.server.state.stack.upgrade.UpgradeFunction
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z11 = r127 instanceof org.apache.ambari.server.state.stack.upgrade.UpgradeFunction >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z11 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z11 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r121 = (org.apache.ambari.server.state.stack.upgrade.UpgradeFunction) r127
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z11 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r43 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r43 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r44 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType NON_ROLLING>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r44 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType NON_ROLLING> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r43 != $r44
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r43 != $r44 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean performServiceCheck> = 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r43 != $r44 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r130 = virtualinvoke r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder getBuilder()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r130 = virtualinvoke r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder getBuilder()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r131 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List services>
org.apache.ambari.server.state.UpgradeHelper.createSequence : r131 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List services> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r45 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r45 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r46 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r46 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r45 != $r46
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r45 != $r46 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r119 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r45 != $r46 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r133 = interfaceinvoke r131.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r133 = interfaceinvoke r131.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z32 = interfaceinvoke r133.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z32 = interfaceinvoke r133.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z32 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z32 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r50 = interfaceinvoke r133.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z32 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r144 = virtualinvoke r130.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: java.util.List build(org.apache.ambari.server.state.UpgradeContext)>(r2)
org.apache.ambari.server.state.UpgradeHelper.createSequence : r144 = virtualinvoke r130.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: java.util.List build(org.apache.ambari.server.state.UpgradeContext)>(r2) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z12 = staticinvoke <org.apache.commons.collections.CollectionUtils: boolean isNotEmpty(java.util.Collection)>(r144)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z12 = staticinvoke <org.apache.commons.collections.CollectionUtils: boolean isNotEmpty(java.util.Collection)>(r144) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z12 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z12 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.util.List items> = r144
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z12 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z31 = interfaceinvoke r126.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z31 = interfaceinvoke r126.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z31 = interfaceinvoke r126.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.util.List items> = r144 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke r0.<org.apache.ambari.server.state.UpgradeHelper: void postProcess(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder)>(r2, $r38)
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke r0.<org.apache.ambari.server.state.UpgradeHelper: void postProcess(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder)>(r2, $r38) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r47 = class "Lorg/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping;"
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r47 = class "Lorg/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping;" >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z13 = virtualinvoke $r47.<java.lang.Class: boolean isInstance(java.lang.Object)>(r127)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z13 = virtualinvoke $r47.<java.lang.Class: boolean isInstance(java.lang.Object)>(r127) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z13 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z13 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if null == r125
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z13 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r38)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r38) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r125 = $r38
org.apache.ambari.server.state.UpgradeHelper.createSequence : r125 = $r38 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z31 = interfaceinvoke r126.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : if null == r125 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r49 = class "Lorg/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping;"
org.apache.ambari.server.state.UpgradeHelper.createSequence : if null == r125 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r38)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r38) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= r125 = $r38]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= r125 = $r38] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r125 = $r38
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r49 = class "Lorg/apache/ambari/server/state/stack/upgrade/ServiceCheckGrouping;" >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r48 = r125.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.Class groupClass>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r48 = r125.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: java.lang.Class groupClass> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z14 = virtualinvoke $r49.<java.lang.Object: boolean equals(java.lang.Object)>($r48)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z14 = virtualinvoke $r49.<java.lang.Object: boolean equals(java.lang.Object)>($r48) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z14 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z14 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke r0.<org.apache.ambari.server.state.UpgradeHelper: void mergeServiceChecks(org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder,org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder)>($r38, r125)
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z14 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r17.<java.util.List: boolean add(java.lang.Object)>($r38)
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke r0.<org.apache.ambari.server.state.UpgradeHelper: void mergeServiceChecks(org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder,org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder)>($r38, r125) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= r125 = $r38]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= r125 = $r38] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r125 = $r38
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r50 = interfaceinvoke r133.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r134 = (org.apache.ambari.server.state.stack.UpgradePack$OrderService) $r50
org.apache.ambari.server.state.UpgradeHelper.createSequence : r134 = (org.apache.ambari.server.state.stack.UpgradePack$OrderService) $r50 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r51 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r51 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z15 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: boolean isServiceSupported(java.lang.String)>($r51)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z15 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: boolean isServiceSupported(java.lang.String)>($r51) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z15 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z15 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z32 = interfaceinvoke r133.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z15 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r52 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r52 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r53 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r53 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r52 != $r53
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r52 != $r53 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r118 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r52 != $r53 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r54 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.util.List components>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r54 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.util.List components> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r7 = interfaceinvoke $r54.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r7 = interfaceinvoke $r54.<java.util.List: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z33 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z33 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z33 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z33 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r55 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z33 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z32 = interfaceinvoke r133.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z32 = interfaceinvoke r133.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z32 = interfaceinvoke r133.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r55 = interfaceinvoke r7.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r8 = (java.lang.String) $r55
org.apache.ambari.server.state.UpgradeHelper.createSequence : r8 = (java.lang.String) $r55 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r56 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r56 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r57 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r57 = <org.apache.ambari.server.state.stack.upgrade.UpgradeType: org.apache.ambari.server.state.stack.upgrade.UpgradeType ROLLING> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r56 != $r57
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r56 != $r57 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r115 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r56 != $r57 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r58 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r58 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r9 = virtualinvoke r4.<org.apache.ambari.server.stack.MasterHostResolver: org.apache.ambari.server.stack.HostsType getMasterAndHosts(java.lang.String,java.lang.String)>($r58, r8)
org.apache.ambari.server.state.UpgradeHelper.createSequence : r9 = virtualinvoke r4.<org.apache.ambari.server.stack.MasterHostResolver: org.apache.ambari.server.stack.HostsType getMasterAndHosts(java.lang.String,java.lang.String)>($r58, r8) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if null != r9
org.apache.ambari.server.state.UpgradeHelper.createSequence : if null != r9 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z33 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : if null != r9 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r59 = r9.<org.apache.ambari.server.stack.HostsType: java.util.List unhealthy>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r59 = r9.<org.apache.ambari.server.stack.HostsType: java.util.List unhealthy> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z16 = interfaceinvoke $r59.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z16 = interfaceinvoke $r59.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z16 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z16 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r114 = r9.<org.apache.ambari.server.stack.HostsType: java.util.List unhealthy>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z16 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r60 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r60 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r10 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Service getService(java.lang.String)>($r60)
org.apache.ambari.server.state.UpgradeHelper.createSequence : r10 = interfaceinvoke r3.<org.apache.ambari.server.state.Cluster: org.apache.ambari.server.state.Service getService(java.lang.String)>($r60) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if null != r129
org.apache.ambari.server.state.UpgradeHelper.createSequence : if null != r129 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r110 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if null != r129 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r61 = <org.apache.ambari.server.state.stack.upgrade.Task$Type: org.apache.ambari.server.state.stack.upgrade.Task$Type STOP>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r61 = <org.apache.ambari.server.state.stack.upgrade.Task$Type: org.apache.ambari.server.state.stack.upgrade.Task$Type STOP> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if r129 != $r61
org.apache.ambari.server.state.UpgradeHelper.createSequence : if r129 != $r61 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r106 = new org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent
org.apache.ambari.server.state.UpgradeHelper.createSequence : if r129 != $r61 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r62 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r62 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z17 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r62)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z17 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r62) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z17 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z17 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r99 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z17 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r63 = new org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r63 = new org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r63.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r63.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r135 = $r63
org.apache.ambari.server.state.UpgradeHelper.createSequence : r135 = $r63 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r63.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name> = r8
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r63.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name> = r8 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r64 = new java.util.ArrayList
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r64 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r64.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r64.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r63.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks> = $r64
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r63.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks> = $r64 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r65 = <org.apache.ambari.server.state.stack.upgrade.Task$Type: org.apache.ambari.server.state.stack.upgrade.Task$Type START>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r65 = <org.apache.ambari.server.state.stack.upgrade.Task$Type: org.apache.ambari.server.state.stack.upgrade.Task$Type START> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if r129 != $r65
org.apache.ambari.server.state.UpgradeHelper.createSequence : if r129 != $r65 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r98 = $r63.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if r129 != $r65 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r66 = <org.apache.ambari.server.state.stack.upgrade.Task$Type: org.apache.ambari.server.state.stack.upgrade.Task$Type RESTART>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r66 = <org.apache.ambari.server.state.stack.upgrade.Task$Type: org.apache.ambari.server.state.stack.upgrade.Task$Type RESTART> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if r129 != $r66
org.apache.ambari.server.state.UpgradeHelper.createSequence : if r129 != $r66 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r96 = $r63.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if r129 != $r66 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if r135 != null
org.apache.ambari.server.state.UpgradeHelper.createSequence : if r135 != null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r93 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if r135 != null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r67 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r67 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke r0.<org.apache.ambari.server.state.UpgradeHelper: void setDisplayNames(org.apache.ambari.server.state.UpgradeContext,java.lang.String,java.lang.String)>(r2, $r67, r8)
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke r0.<org.apache.ambari.server.state.UpgradeHelper: void setDisplayNames(org.apache.ambari.server.state.UpgradeContext,java.lang.String,java.lang.String)>(r2, $r67, r8) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r68 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r68 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z18 = virtualinvoke $r68.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("HDFS")
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z18 = virtualinvoke $r68.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("HDFS") >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z18 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z18 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z20 = virtualinvoke r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NAMENODE")
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z18 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r69 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r69 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z19 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z19 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r130.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, r9, $r69, $z19, r135, null)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r130.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, r9, $r69, $z19, r135, null) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z33 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z33 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z33 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z20 = virtualinvoke r8.<java.lang.String: boolean equalsIgnoreCase(java.lang.String)>("NAMENODE") >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z20 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z20 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r70 = <org.apache.ambari.server.state.UpgradeHelper$1: int[] $SwitchMap$org$apache$ambari$server$state$stack$upgrade$UpgradeType>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z20 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r69 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r70 = <org.apache.ambari.server.state.UpgradeHelper$1: int[] $SwitchMap$org$apache$ambari$server$state$stack$upgrade$UpgradeType> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r71 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r71 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $i2 = virtualinvoke $r71.<org.apache.ambari.server.state.stack.upgrade.UpgradeType: int ordinal()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $i2 = virtualinvoke $r71.<org.apache.ambari.server.state.stack.upgrade.UpgradeType: int ordinal()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $i3 = $r70[$i2]
org.apache.ambari.server.state.UpgradeHelper.createSequence : $i3 = $r70[$i2] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : lookupswitch($i3) {     case 1:
org.apache.ambari.server.state.UpgradeHelper.createSequence : lookupswitch($i3) {     case 1: >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r84 = r9.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts>
org.apache.ambari.server.state.UpgradeHelper.createSequence : lookupswitch($i3) {     case 1: >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : z34 = virtualinvoke r4.<org.apache.ambari.server.stack.MasterHostResolver: boolean isNameNodeHA()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : lookupswitch($i3) {     case 1: >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z33 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : z34 = virtualinvoke r4.<org.apache.ambari.server.stack.MasterHostResolver: boolean isNameNodeHA()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if z34 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if z34 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r72 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String master>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if z34 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r143 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r143 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z35 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z35 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r130.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, r9, $r143, $z35, r135, null)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r130.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, r9, $r143, $z35, r135, null) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r72 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String master> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r72 == null
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r72 == null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r73 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r72 == null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r143 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r73 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r73 == null
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r73 == null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r74 = new org.apache.ambari.server.stack.HostsType
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r73 == null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r143 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r74 = new org.apache.ambari.server.stack.HostsType >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r74.<org.apache.ambari.server.stack.HostsType: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r74.<org.apache.ambari.server.stack.HostsType: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r75 = new java.util.LinkedHashSet
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r75 = new java.util.LinkedHashSet >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r75.<java.util.LinkedHashSet: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r75.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r76 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String master>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r76 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String master> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke $r75.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r76)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke $r75.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r76) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r74.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> = $r75
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r74.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> = $r75 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r77 = new java.util.HashMap
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r77 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r77.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r77.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r77.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("desired_namenode_role", "active")
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r77.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("desired_namenode_role", "active") >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r78 = new org.apache.ambari.server.stack.HostsType
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r78 = new org.apache.ambari.server.stack.HostsType >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r78.<org.apache.ambari.server.stack.HostsType: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r78.<org.apache.ambari.server.stack.HostsType: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r79 = new java.util.LinkedHashSet
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r79 = new java.util.LinkedHashSet >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r79.<java.util.LinkedHashSet: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r79.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r80 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r80 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke $r79.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r80)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke $r79.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r80) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r78.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> = $r79
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r78.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> = $r79 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r81 = new java.util.HashMap
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r81 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r81.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r81.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r81.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("desired_namenode_role", "standby")
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r81.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>("desired_namenode_role", "standby") >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r82 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r82 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z21 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z21 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r130.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, $r74, $r82, $z21, r135, $r77)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r130.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, $r74, $r82, $z21, r135, $r77) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r83 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r83 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z22 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z22 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r130.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, $r78, $r83, $z22, r135, $r81)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r130.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, $r78, $r83, $z22, r135, $r81) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r84 = r9.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z23 = virtualinvoke $r84.<java.util.LinkedHashSet: boolean isEmpty()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z23 = virtualinvoke $r84.<java.util.LinkedHashSet: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z23 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z23 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r85 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String master>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z23 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r137 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r137 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r138 = newarray (java.lang.Object)[3]
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r138 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r139 = r9.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r139 = r9.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r140 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,char)>($r139, 44)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r140 = staticinvoke <org.apache.commons.lang.StringUtils: java.lang.String join(java.util.Collection,char)>($r139, 44) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r138[0] = $r140
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r138[0] = $r140 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r141 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String master>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r141 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String master> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r138[1] = $r141
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r138[1] = $r141 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r142 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r142 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r138[2] = $r142
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r138[2] = $r142 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r137.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Could not orchestrate NameNode.  Hosts could not be resolved: hosts={}, active={}, standby={}", $r138)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r137.<org.slf4j.Logger: void warn(java.lang.String,java.lang.Object[])>("Could not orchestrate NameNode.  Hosts could not be resolved: hosts={}, active={}, standby={}", $r138) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r85 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String master> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r85 == null
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r85 == null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r86 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r85 == null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r137 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r86 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r86 == null
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r86 == null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r87 = new java.util.LinkedHashSet
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $r86 == null >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r137 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r87 = new java.util.LinkedHashSet >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r87.<java.util.LinkedHashSet: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r87.<java.util.LinkedHashSet: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r88 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r88 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String secondary> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke $r87.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r88)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke $r87.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r88) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r89 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String master>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r89 = r9.<org.apache.ambari.server.stack.HostsType: java.lang.String master> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke $r87.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r89)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke $r87.<java.util.LinkedHashSet: boolean add(java.lang.Object)>($r89) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> = $r87
org.apache.ambari.server.state.UpgradeHelper.createSequence : r9.<org.apache.ambari.server.stack.HostsType: java.util.LinkedHashSet hosts> = $r87 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r90 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r90 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z24 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z24 = interfaceinvoke r10.<org.apache.ambari.server.state.Service: boolean isClientOnlyService()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r130.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, r9, $r90, $z24, r135, null)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r130.<org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder: void add(org.apache.ambari.server.state.UpgradeContext,org.apache.ambari.server.stack.HostsType,java.lang.String,boolean,org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent,java.util.Map)>(r2, r9, $r90, $z24, r135, null) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r93 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r91 = newarray (java.lang.Object)[2]
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r91 = newarray (java.lang.Object)[2] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r92 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r92 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r91[0] = $r92
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r91[0] = $r92 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r91[1] = r8
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r91[1] = r8 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r94 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("Couldn\'t create a processing component for service {0} and component {1}.", $r91)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r94 = staticinvoke <java.text.MessageFormat: java.lang.String format(java.lang.String,java.lang.Object[])>("Couldn\'t create a processing component for service {0} and component {1}.", $r91) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r93.<org.slf4j.Logger: void error(java.lang.String)>($r94)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r93.<org.slf4j.Logger: void error(java.lang.String)>($r94) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z33 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z33 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z33 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r96 = $r63.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r95 = new org.apache.ambari.server.state.stack.upgrade.RestartTask
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r95 = new org.apache.ambari.server.state.stack.upgrade.RestartTask >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r95.<org.apache.ambari.server.state.stack.upgrade.RestartTask: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r95.<org.apache.ambari.server.state.stack.upgrade.RestartTask: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r96.<java.util.List: boolean add(java.lang.Object)>($r95)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r96.<java.util.List: boolean add(java.lang.Object)>($r95) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if r135 != null
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r98 = $r63.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r97 = new org.apache.ambari.server.state.stack.upgrade.StartTask
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r97 = new org.apache.ambari.server.state.stack.upgrade.StartTask >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r97.<org.apache.ambari.server.state.stack.upgrade.StartTask: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r97.<org.apache.ambari.server.state.stack.upgrade.StartTask: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r98.<java.util.List: boolean add(java.lang.Object)>($r97)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r98.<java.util.List: boolean add(java.lang.Object)>($r97) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r66 = <org.apache.ambari.server.state.stack.upgrade.Task$Type: org.apache.ambari.server.state.stack.upgrade.Task$Type RESTART>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r99 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r100 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r99)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r100 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r99) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r101 = (java.util.Map) $r100
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r101 = (java.util.Map) $r100 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z25 = interfaceinvoke $r101.<java.util.Map: boolean containsKey(java.lang.Object)>(r8)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z25 = interfaceinvoke $r101.<java.util.Map: boolean containsKey(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z25 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z25 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r102 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z25 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r63 = new org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r102 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r103 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r102)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r103 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r102) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r104 = (java.util.Map) $r103
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r104 = (java.util.Map) $r103 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r105 = interfaceinvoke $r104.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r105 = interfaceinvoke $r104.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r135 = (org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent) $r105
org.apache.ambari.server.state.UpgradeHelper.createSequence : r135 = (org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent) $r105 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if r135 != null
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r106 = new org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r106.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r106.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r135 = $r106
org.apache.ambari.server.state.UpgradeHelper.createSequence : r135 = $r106 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r106.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name> = r8
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r106.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.lang.String name> = r8 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r107 = new java.util.ArrayList
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r107 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r107.<java.util.ArrayList: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r107.<java.util.ArrayList: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r106.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks> = $r107
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r106.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks> = $r107 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r109 = $r106.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r109 = $r106.<org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent: java.util.List tasks> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r108 = new org.apache.ambari.server.state.stack.upgrade.StopTask
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r108 = new org.apache.ambari.server.state.stack.upgrade.StopTask >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r108.<org.apache.ambari.server.state.stack.upgrade.StopTask: void <init>()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r108.<org.apache.ambari.server.state.stack.upgrade.StopTask: void <init>()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r109.<java.util.List: boolean add(java.lang.Object)>($r108)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r109.<java.util.List: boolean add(java.lang.Object)>($r108) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if r135 != null
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r110 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r111 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r110)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r111 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r110) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r112 = (java.util.Map) $r111
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r112 = (java.util.Map) $r111 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r113 = interfaceinvoke $r112.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r113 = interfaceinvoke $r112.<java.util.Map: java.lang.Object get(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r135 = (org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent) $r113
org.apache.ambari.server.state.UpgradeHelper.createSequence : r135 = (org.apache.ambari.server.state.stack.UpgradePack$ProcessingComponent) $r113 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if r135 != null
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r114 = r9.<org.apache.ambari.server.stack.HostsType: java.util.List unhealthy> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: void addUnhealthy(java.util.List)>($r114)
org.apache.ambari.server.state.UpgradeHelper.createSequence : virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: void addUnhealthy(java.util.List)>($r114) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r60 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z33 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z33 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r115 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r116 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r115)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r116 = interfaceinvoke r5.<java.util.Map: java.lang.Object get(java.lang.Object)>($r115) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r117 = (java.util.Map) $r116
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r117 = (java.util.Map) $r116 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z26 = interfaceinvoke $r117.<java.util.Map: boolean containsKey(java.lang.Object)>(r8)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z26 = interfaceinvoke $r117.<java.util.Map: boolean containsKey(java.lang.Object)>(r8) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z26 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z26 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z33 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z26 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r58 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z33 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z33 = interfaceinvoke r7.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r118 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z27 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r118)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z27 = interfaceinvoke r5.<java.util.Map: boolean containsKey(java.lang.Object)>($r118) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z27 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z27 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z32 = interfaceinvoke r133.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z27 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r54 = r134.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.util.List components>
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z32 = interfaceinvoke r133.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z32 = interfaceinvoke r133.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z32 = interfaceinvoke r133.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z32 = interfaceinvoke r133.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r119 = virtualinvoke r2.<org.apache.ambari.server.state.UpgradeContext: org.apache.ambari.server.state.stack.upgrade.Direction getDirection()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z28 = virtualinvoke $r119.<org.apache.ambari.server.state.stack.upgrade.Direction: boolean isDowngrade()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z28 = virtualinvoke $r119.<org.apache.ambari.server.state.stack.upgrade.Direction: boolean isDowngrade()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z28 == 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z28 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z29 = interfaceinvoke r131.<java.util.List: boolean isEmpty()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z28 == 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r133 = interfaceinvoke r131.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z29 = interfaceinvoke r131.<java.util.List: boolean isEmpty()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z29 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z29 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r120 = new java.util.ArrayList
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z29 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r133 = interfaceinvoke r131.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r120 = new java.util.ArrayList >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r120.<java.util.ArrayList: void <init>(java.util.Collection)>(r131)
org.apache.ambari.server.state.UpgradeHelper.createSequence : specialinvoke $r120.<java.util.ArrayList: void <init>(java.util.Collection)>(r131) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : staticinvoke <java.util.Collections: void reverse(java.util.List)>($r120)
org.apache.ambari.server.state.UpgradeHelper.createSequence : staticinvoke <java.util.Collections: void reverse(java.util.List)>($r120) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r131 = $r120
org.apache.ambari.server.state.UpgradeHelper.createSequence : r131 = $r120 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r133 = interfaceinvoke r131.<java.util.List: java.util.Iterator iterator()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: boolean performServiceCheck> = 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r130 = virtualinvoke r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.StageWrapperBuilder getBuilder()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r121 = (org.apache.ambari.server.state.stack.upgrade.UpgradeFunction) r127 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r129 = interfaceinvoke $r121.<org.apache.ambari.server.state.stack.upgrade.UpgradeFunction: org.apache.ambari.server.state.stack.upgrade.Task$Type getFunction()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : r129 = interfaceinvoke $r121.<org.apache.ambari.server.state.stack.upgrade.UpgradeFunction: org.apache.ambari.server.state.stack.upgrade.Task$Type getFunction()>() >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r43 = virtualinvoke r1.<org.apache.ambari.server.state.stack.UpgradePack: org.apache.ambari.server.state.stack.upgrade.UpgradeType getType()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38.<org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder: boolean skippable> = 1 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : r129 = null
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r122 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.Condition condition> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z30 = virtualinvoke $r122.<org.apache.ambari.server.state.stack.upgrade.Condition: boolean isSatisfied(org.apache.ambari.server.state.UpgradeContext)>(r2)
org.apache.ambari.server.state.UpgradeHelper.createSequence : $z30 = virtualinvoke $r122.<org.apache.ambari.server.state.stack.upgrade.Condition: boolean isSatisfied(org.apache.ambari.server.state.UpgradeContext)>(r2) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z30 != 0
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z30 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r124 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG>
org.apache.ambari.server.state.UpgradeHelper.createSequence : if $z30 != 0 >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r38 = new org.apache.ambari.server.state.UpgradeHelper$UpgradeGroupHolder
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r124 = <org.apache.ambari.server.state.UpgradeHelper: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $r123 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.Condition condition>
org.apache.ambari.server.state.UpgradeHelper.createSequence : $r123 = r127.<org.apache.ambari.server.state.stack.upgrade.Grouping: org.apache.ambari.server.state.stack.upgrade.Condition condition> >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r124.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Skipping {} while building upgrade orchestration due to {}", r127, $r123)
org.apache.ambari.server.state.UpgradeHelper.createSequence : interfaceinvoke $r124.<org.slf4j.Logger: void info(java.lang.String,java.lang.Object,java.lang.Object)>("Skipping {} while building upgrade orchestration due to {}", r127, $r123) >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z31 = interfaceinvoke r126.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z31 = interfaceinvoke r126.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z31 = interfaceinvoke r126.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.UpgradeHelper.createSequence : goto [?= $z31 = interfaceinvoke r126.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.UpgradeHelper.createSequence : $z31 = interfaceinvoke r126.<java.util.Iterator: boolean hasNext()>()
