org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r10 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.ExecutionId") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $r10 == null
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $r10 == null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r39 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.ExecutionId")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $r10 == null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r43 = null
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r43 = null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r2 = $r43
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r2 = $r43 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r11 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.BatchId")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r11 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.BatchId") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $r11 == null
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $r11 == null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r38 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.BatchId")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $r11 == null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r44 = null
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r44 = null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r3 = $r44
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r3 = $r44 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r12 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.ClusterName")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r12 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.ClusterName") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r4 = (java.lang.String) $r12
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r4 = (java.lang.String) $r12 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if r2 == null
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if r2 == null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $r44 != null
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if r2 == null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r13 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r13 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r14 = new java.lang.StringBuilder
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r14 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r14.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to retrieve persisted batch request, execution_id = ")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r15 = virtualinvoke $r14.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Unable to retrieve persisted batch request, execution_id = ") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r16 = virtualinvoke $r15.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", batch_id = ")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r17 = virtualinvoke $r16.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", batch_id = ") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r18 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r19 = virtualinvoke $r18.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r13.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>($r19)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r13.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>($r19) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : throw $r13
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $r44 != null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r13 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $r44 != null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r5 = specialinvoke r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: java.util.Map getTaskCountProperties(java.util.Map)>(r1)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r5 = specialinvoke r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: java.util.Map getTaskCountProperties(java.util.Map)>(r1) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r20 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager>
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r20 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager> >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l0 = virtualinvoke r2.<java.lang.Long: long longValue()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l0 = virtualinvoke r2.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l1 = virtualinvoke $r44.<java.lang.Long: long longValue()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l1 = virtualinvoke $r44.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r6 = virtualinvoke $r20.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: java.lang.Long executeBatchRequest(long,long,java.lang.String)>($l0, $l1, r4)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r6 = virtualinvoke $r20.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: java.lang.Long executeBatchRequest(long,long,java.lang.String)>($l0, $l1, r4) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if r6 == null
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if r6 == null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r21 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager>
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if r6 == null >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : return
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r21 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager> >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r8 = virtualinvoke $r21.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: org.apache.ambari.server.state.scheduler.BatchRequestResponse getBatchRequestResponse(java.lang.Long,java.lang.String)>(r6, r4)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r8 = virtualinvoke $r21.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: org.apache.ambari.server.state.scheduler.BatchRequestResponse getBatchRequestResponse(java.lang.Long,java.lang.String)>(r6, r4) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r22 = virtualinvoke r8.<org.apache.ambari.server.state.scheduler.BatchRequestResponse: java.lang.String getStatus()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r22 = virtualinvoke r8.<org.apache.ambari.server.state.scheduler.BatchRequestResponse: java.lang.String getStatus()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r7 = staticinvoke <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus valueOf(java.lang.String)>($r22)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r7 = staticinvoke <org.apache.ambari.server.actionmanager.HostRoleStatus: org.apache.ambari.server.actionmanager.HostRoleStatus valueOf(java.lang.String)>($r22) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r23 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager>
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r23 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager> >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l2 = virtualinvoke r2.<java.lang.Long: long longValue()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l2 = virtualinvoke r2.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l3 = virtualinvoke r3.<java.lang.Long: long longValue()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l3 = virtualinvoke r3.<java.lang.Long: long longValue()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : virtualinvoke $r23.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: void updateBatchRequest(long,long,java.lang.String,org.apache.ambari.server.state.scheduler.BatchRequestResponse,boolean)>($l2, $l3, r4, r8, 1)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : virtualinvoke $r23.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: void updateBatchRequest(long,long,java.lang.String,org.apache.ambari.server.state.scheduler.BatchRequestResponse,boolean)>($l2, $l3, r4, r8, 1) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l4 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: long statusCheckInterval>
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l4 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: long statusCheckInterval> >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : staticinvoke <java.lang.Thread: void sleep(long)>($l4)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $l4 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: long statusCheckInterval> >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r40 := @caughtexception
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r41 = <org.apache.ambari.server.state.scheduler.BatchRequestJob: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : interfaceinvoke $r41.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Job Thread interrupted", $r40)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : interfaceinvoke $r41.<org.slf4j.Logger: void error(java.lang.String,java.lang.Throwable)>("Job Thread interrupted", $r40) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r42 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r42 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r42.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String,java.lang.Throwable)>("Job Thread interrupted", $r40)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r42.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String,java.lang.Throwable)>("Job Thread interrupted", $r40) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : throw $r42
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : staticinvoke <java.lang.Thread: void sleep(long)>($l4) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : goto [?= $z0 = virtualinvoke r7.<org.apache.ambari.server.actionmanager.HostRoleStatus: boolean isCompletedState()>()]
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : staticinvoke <java.lang.Thread: void sleep(long)>($l4) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r40 := @caughtexception
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : goto [?= $z0 = virtualinvoke r7.<org.apache.ambari.server.actionmanager.HostRoleStatus: boolean isCompletedState()>()] >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $z0 = virtualinvoke r7.<org.apache.ambari.server.actionmanager.HostRoleStatus: boolean isCompletedState()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $z0 = virtualinvoke r7.<org.apache.ambari.server.actionmanager.HostRoleStatus: boolean isCompletedState()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $z0 == 0
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r46 = specialinvoke r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: java.util.Map addTaskCountToProperties(java.util.Map,java.util.Map,org.apache.ambari.server.state.scheduler.BatchRequestResponse)>(r1, r5, r8)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r21 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager>
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r46 = specialinvoke r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: java.util.Map addTaskCountToProperties(java.util.Map,java.util.Map,org.apache.ambari.server.state.scheduler.BatchRequestResponse)>(r1, r5, r8) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r24 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager>
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r24 = r0.<org.apache.ambari.server.state.scheduler.BatchRequestJob: org.apache.ambari.server.scheduler.ExecutionScheduleManager executionScheduleManager> >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $z1 = virtualinvoke $r24.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: boolean hasToleranceThresholdExceeded(java.lang.Long,java.lang.String,java.util.Map)>(r2, r4, r46)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $z1 = virtualinvoke $r24.<org.apache.ambari.server.scheduler.ExecutionScheduleManager: boolean hasToleranceThresholdExceeded(java.lang.Long,java.lang.String,java.util.Map)>(r2, r4, r46) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $z1 == 0
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r25 = new org.apache.ambari.server.AmbariException
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : return
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r25 = new org.apache.ambari.server.AmbariException >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r26 = new java.lang.StringBuilder
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r26 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r26.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r26.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Task failure tolerance limit exceeded, execution_id = ")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Task failure tolerance limit exceeded, execution_id = ") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", processed batch_id = ")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r29 = virtualinvoke $r28.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", processed batch_id = ") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r30 = virtualinvoke $r29.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", failed tasks = ")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r31 = virtualinvoke $r30.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", failed tasks = ") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r32 = interfaceinvoke r46.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.FailedTaskCount")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r32 = interfaceinvoke r46.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.FailedTaskCount") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r33 = virtualinvoke $r31.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r32) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", total tasks completed = ")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r34 = virtualinvoke $r33.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", total tasks completed = ") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r35 = interfaceinvoke r46.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.TotalTaskCount")
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r35 = interfaceinvoke r46.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.TotalTaskCount") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r36 = virtualinvoke $r34.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.Object)>($r35) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r37 = virtualinvoke $r36.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r25.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>($r37)
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : specialinvoke $r25.<org.apache.ambari.server.AmbariException: void <init>(java.lang.String)>($r37) >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : throw $r25
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r38 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.BatchId") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r44 = (java.lang.Long) $r38
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r44 = (java.lang.Long) $r38 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : goto [?= r3 = $r44]
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : goto [?= r3 = $r44] >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r3 = $r44
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r39 = interfaceinvoke r1.<java.util.Map: java.lang.Object get(java.lang.Object)>("BatchRequestJob.ExecutionId") >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r43 = (java.lang.Long) $r39
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : $r43 = (java.lang.Long) $r39 >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : goto [?= r2 = $r43]
org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : goto [?= r2 = $r43] >>>>>>>> org.apache.ambari.server.state.scheduler.BatchRequestJob.doWork : r2 = $r43
