org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : $r1 = r0.<org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState: java.util.concurrent.atomic.AtomicInteger collectorDownRefreshCounter> >>>>>>>> org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>()
org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : virtualinvoke $r1.<java.util.concurrent.atomic.AtomicInteger: int incrementAndGet()>() >>>>>>>> org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : $r2 = r0.<org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState: java.util.concurrent.atomic.AtomicInteger collectorDownRefreshCounter>
org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : $r2 = r0.<org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState: java.util.concurrent.atomic.AtomicInteger collectorDownRefreshCounter> >>>>>>>> org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : $i1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>()
org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : $i1 = virtualinvoke $r2.<java.util.concurrent.atomic.AtomicInteger: int get()>() >>>>>>>> org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : $i2 = <org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState: int collectorDownRefreshCounterLimit>
org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : $i2 = <org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState: int collectorDownRefreshCounterLimit> >>>>>>>> org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : if $i1 != $i2
org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : if $i1 != $i2 >>>>>>>> org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : $r3 = new java.util.concurrent.atomic.AtomicInteger
org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : if $i1 != $i2 >>>>>>>> org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : return 0
org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : $r3 = new java.util.concurrent.atomic.AtomicInteger >>>>>>>> org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0)
org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : specialinvoke $r3.<java.util.concurrent.atomic.AtomicInteger: void <init>(int)>(0) >>>>>>>> org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : r0.<org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState: java.util.concurrent.atomic.AtomicInteger collectorDownRefreshCounter> = $r3
org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : r0.<org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState: java.util.concurrent.atomic.AtomicInteger collectorDownRefreshCounter> = $r3 >>>>>>>> org.apache.ambari.server.controller.metrics.MetricsCollectorHAClusterState.testRefreshCounter : return 1
