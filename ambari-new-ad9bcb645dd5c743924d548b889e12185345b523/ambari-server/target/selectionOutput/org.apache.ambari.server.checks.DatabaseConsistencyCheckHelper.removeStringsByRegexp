org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : r2 = staticinvoke <java.util.regex.Pattern: java.util.regex.Pattern compile(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : r3 = interfaceinvoke r0.<java.util.Collection: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : if $z0 == 0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : if $z0 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : return
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : $r6 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : r4 = (java.lang.String) $r6
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : r4 = (java.lang.String) $r6 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : r5 = virtualinvoke r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r4)
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : r5 = virtualinvoke r2.<java.util.regex.Pattern: java.util.regex.Matcher matcher(java.lang.CharSequence)>(r4) >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : $z1 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : $z1 = virtualinvoke r5.<java.util.regex.Matcher: boolean find()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : if $z1 == 0
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : interfaceinvoke r3.<java.util.Iterator: void remove()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : if $z1 == 0 >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : interfaceinvoke r3.<java.util.Iterator: void remove()>() >>>>>>>> org.apache.ambari.server.checks.DatabaseConsistencyCheckHelper.removeStringsByRegexp : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
