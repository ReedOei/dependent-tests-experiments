org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $z0 = virtualinvoke r0.<org.apache.ambari.server.view.ViewURLStreamProvider: boolean isProxyCallAllowed(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : if $z0 != 0
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : if $z0 != 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r18 = <org.apache.ambari.server.view.ViewURLStreamProvider: org.slf4j.Logger LOG>
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : if $z0 != 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r8 = new java.util.HashMap
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r8 = new java.util.HashMap >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : specialinvoke $r8.<java.util.HashMap: void <init>()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : specialinvoke $r8.<java.util.HashMap: void <init>()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r9 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r9 = interfaceinvoke r3.<java.util.Map: java.util.Set entrySet()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : r6 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : r6 = interfaceinvoke $r9.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : if $z1 == 0
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : if $z1 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : if $z1 == 0 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r10 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.controller.internal.URLStreamProvider streamProvider>
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r10 = r0.<org.apache.ambari.server.view.ViewURLStreamProvider: org.apache.ambari.server.controller.internal.URLStreamProvider streamProvider> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r11 = virtualinvoke $r10.<org.apache.ambari.server.controller.internal.URLStreamProvider: java.net.HttpURLConnection processURL(java.lang.String,java.lang.String,byte[],java.util.Map)>(r1, r2, r4, $r8)
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r11 = virtualinvoke $r10.<org.apache.ambari.server.controller.internal.URLStreamProvider: java.net.HttpURLConnection processURL(java.lang.String,java.lang.String,byte[],java.util.Map)>(r1, r2, r4, $r8) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : return $r11
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r12 = interfaceinvoke r6.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : r7 = (java.util.Map$Entry) $r12
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : r7 = (java.util.Map$Entry) $r12 >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r13 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r13 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getKey()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r14 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r14 = interfaceinvoke r7.<java.util.Map$Entry: java.lang.Object getValue()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r15 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r14)
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r15 = staticinvoke <java.util.Collections: java.util.List singletonList(java.lang.Object)>($r14) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r15)
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : interfaceinvoke $r8.<java.util.Map: java.lang.Object put(java.lang.Object,java.lang.Object)>($r13, $r15) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : goto [?= $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $z1 = interfaceinvoke r6.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r18 = <org.apache.ambari.server.view.ViewURLStreamProvider: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r17 = new java.lang.StringBuilder
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r17 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : specialinvoke $r17.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Call to ")
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r19 = virtualinvoke $r17.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Call to ") >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r20 = virtualinvoke $r19.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not allowed. See ambari.properties proxy.allowed.hostports.")
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r21 = virtualinvoke $r20.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not allowed. See ambari.properties proxy.allowed.hostports.") >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r22 = virtualinvoke $r21.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : interfaceinvoke $r18.<org.slf4j.Logger: void warn(java.lang.String)>($r22)
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : interfaceinvoke $r18.<org.slf4j.Logger: void warn(java.lang.String)>($r22) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r23 = new java.io.IOException
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r23 = new java.io.IOException >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r24 = new java.lang.StringBuilder
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r24 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : specialinvoke $r24.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : specialinvoke $r24.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Call to ")
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Call to ") >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not allowed. See ambari.properties proxy.allowed.hostports.")
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(" is not allowed. See ambari.properties proxy.allowed.hostports.") >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r28)
org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : specialinvoke $r23.<java.io.IOException: void <init>(java.lang.String)>($r28) >>>>>>>> org.apache.ambari.server.view.ViewURLStreamProvider.getHttpURLConnection : throw $r23
