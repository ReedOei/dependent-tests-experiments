org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r8 = r0.<org.apache.ambari.server.checks.ServicesUpCheck: com.google.inject.Provider clustersProvider> >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r9 = interfaceinvoke $r8.<com.google.inject.Provider: java.lang.Object get()>()
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r9 = interfaceinvoke $r8.<com.google.inject.Provider: java.lang.Object get()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r10 = (org.apache.ambari.server.state.Clusters) $r9
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r10 = (org.apache.ambari.server.state.Clusters) $r9 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $l0 = virtualinvoke r3.<org.apache.ambari.server.orm.models.HostComponentSummary: long getHostId()>()
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $l0 = virtualinvoke r3.<org.apache.ambari.server.orm.models.HostComponentSummary: long getHostId()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0)
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r11 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>($l0) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r4 = interfaceinvoke $r10.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Host getHostById(java.lang.Long)>($r11)
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r4 = interfaceinvoke $r10.<org.apache.ambari.server.state.Clusters: org.apache.ambari.server.state.Host getHostById(java.lang.Long)>($r11) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $l1 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: long getClusterId()>()
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $l1 = interfaceinvoke r1.<org.apache.ambari.server.state.Cluster: long getClusterId()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r5 = interfaceinvoke r4.<org.apache.ambari.server.state.Host: org.apache.ambari.server.state.MaintenanceState getMaintenanceState(long)>($l1)
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r5 = interfaceinvoke r4.<org.apache.ambari.server.state.Host: org.apache.ambari.server.state.MaintenanceState getMaintenanceState(long)>($l1) >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r12 = <org.apache.ambari.server.state.MaintenanceState: org.apache.ambari.server.state.MaintenanceState ON>
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r12 = <org.apache.ambari.server.state.MaintenanceState: org.apache.ambari.server.state.MaintenanceState ON> >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : if r5 != $r12
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : if r5 != $r12 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $z0 = interfaceinvoke r2.<org.apache.ambari.server.state.ServiceComponent: boolean isMasterComponent()>()
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : if r5 != $r12 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r6 = virtualinvoke r3.<org.apache.ambari.server.orm.models.HostComponentSummary: org.apache.ambari.server.state.State getDesiredState()>()
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r6 = virtualinvoke r3.<org.apache.ambari.server.orm.models.HostComponentSummary: org.apache.ambari.server.state.State getDesiredState()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r7 = virtualinvoke r3.<org.apache.ambari.server.orm.models.HostComponentSummary: org.apache.ambari.server.state.State getCurrentState()>()
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r7 = virtualinvoke r3.<org.apache.ambari.server.orm.models.HostComponentSummary: org.apache.ambari.server.state.State getCurrentState()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r13 = <org.apache.ambari.server.checks.ServicesUpCheck$1: int[] $SwitchMap$org$apache$ambari$server$state$State>
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r13 = <org.apache.ambari.server.checks.ServicesUpCheck$1: int[] $SwitchMap$org$apache$ambari$server$state$State> >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $i2 = virtualinvoke r6.<org.apache.ambari.server.state.State: int ordinal()>()
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $i2 = virtualinvoke r6.<org.apache.ambari.server.state.State: int ordinal()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $i3 = $r13[$i2]
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $i3 = $r13[$i2] >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : lookupswitch($i3) {     case 1:
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : lookupswitch($i3) {     case 1: >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r14 = <org.apache.ambari.server.state.State: org.apache.ambari.server.state.State STARTED>
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : lookupswitch($i3) {     case 1: >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : return 0
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $r14 = <org.apache.ambari.server.state.State: org.apache.ambari.server.state.State STARTED> >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : if r7 == $r14
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : if r7 == $r14 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $z1 = 1
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : if r7 == $r14 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $z1 = 0
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $z1 = 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : return $z1
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $z1 = 1 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : goto [?= return $z1]
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : goto [?= return $z1] >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : return $z1
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : $z0 = interfaceinvoke r2.<org.apache.ambari.server.state.ServiceComponent: boolean isMasterComponent()>() >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : if $z0 != 0
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : if $z0 != 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : return 0
org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : if $z0 != 0 >>>>>>>> org.apache.ambari.server.checks.ServicesUpCheck.isConsideredDown : r6 = virtualinvoke r3.<org.apache.ambari.server.orm.models.HostComponentSummary: org.apache.ambari.server.state.State getDesiredState()>()
