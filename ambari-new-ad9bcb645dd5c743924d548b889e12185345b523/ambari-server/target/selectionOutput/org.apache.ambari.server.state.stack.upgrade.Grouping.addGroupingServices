org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : if r2 != null >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $r9 = r0.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List services>
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : if r2 != null >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $r4 = r0.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List services>
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $r4 = r0.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List services> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $i0 = interfaceinvoke $r4.<java.util.List: int size()>()
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $i0 = interfaceinvoke $r4.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : i2 = $i0 - 1
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : i2 = $i0 - 1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : if i2 < 0
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : if i2 < 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $r5 = r0.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List services>
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : if i2 < 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : return 0
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $r5 = r0.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List services> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i2)
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $r6 = interfaceinvoke $r5.<java.util.List: java.lang.Object get(int)>(i2) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : r3 = (org.apache.ambari.server.state.stack.UpgradePack$OrderService) $r6
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : r3 = (org.apache.ambari.server.state.stack.UpgradePack$OrderService) $r6 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $r7 = r3.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName>
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $r7 = r3.<org.apache.ambari.server.state.stack.UpgradePack$OrderService: java.lang.String serviceName> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r2)
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $z0 = virtualinvoke $r7.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : if $z0 == 0
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $r8 = r0.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List services>
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : i2 = i2 + -1
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : i2 = i2 + -1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : goto [?= (branch)]
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : goto [?= (branch)] >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : if i2 < 0
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $r8 = r0.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List services> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $i1 = i2 + 1
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $i1 = i2 + 1 >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : interfaceinvoke $r8.<java.util.List: boolean addAll(int,java.util.Collection)>($i1, r1)
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : interfaceinvoke $r8.<java.util.List: boolean addAll(int,java.util.Collection)>($i1, r1) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : return 1
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : $r9 = r0.<org.apache.ambari.server.state.stack.upgrade.Grouping: java.util.List services> >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : interfaceinvoke $r9.<java.util.List: boolean addAll(java.util.Collection)>(r1)
org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : interfaceinvoke $r9.<java.util.List: boolean addAll(java.util.Collection)>(r1) >>>>>>>> org.apache.ambari.server.state.stack.upgrade.Grouping.addGroupingServices : return 1
