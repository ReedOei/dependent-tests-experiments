org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r3 = virtualinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: org.apache.ambari.server.state.Host getHost(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r4 = virtualinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r2)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r4 = virtualinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: org.apache.ambari.server.state.Cluster getCluster(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r6 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap hostClusterMap>
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r6 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap hostClusterMap> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r7 = virtualinvoke $r6.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r8 = (java.util.Set) $r7
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r8 = (java.util.Set) $r7 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r29 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r29 = interfaceinvoke $r8.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z0 == 0
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r20 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : l0 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: long getClusterId()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : l0 = interfaceinvoke r4.<org.apache.ambari.server.state.Cluster: long getClusterId()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r9 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r9 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $z1 = interfaceinvoke $r9.<org.slf4j.Logger: boolean isDebugEnabled()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $z1 = interfaceinvoke $r9.<org.slf4j.Logger: boolean isDebugEnabled()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z1 == 0
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r18 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG>
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : virtualinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: void mapHostClusterEntities(java.lang.String,java.lang.Long)>(r1, $r10)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : virtualinvoke r0.<org.apache.ambari.server.state.cluster.ClustersImpl: void mapHostClusterEntities(java.lang.String,java.lang.Long)>(r1, $r10) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r11 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap hostClusterMap>
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r11 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap hostClusterMap> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r12 = virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r12 = virtualinvoke $r11.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r1) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r13 = (java.util.Set) $r12
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r13 = (java.util.Set) $r12 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>(r4)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : interfaceinvoke $r13.<java.util.Set: boolean add(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r14 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap clusterHostMap>
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r14 = r0.<org.apache.ambari.server.state.cluster.ClustersImpl: java.util.concurrent.ConcurrentHashMap clusterHostMap> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r15 = virtualinvoke $r14.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r15 = virtualinvoke $r14.<java.util.concurrent.ConcurrentHashMap: java.lang.Object get(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r16 = (java.util.Set) $r15
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r16 = (java.util.Set) $r15 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>(r3)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : interfaceinvoke $r16.<java.util.Set: boolean add(java.lang.Object)>(r3) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : return
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r18 = <org.apache.ambari.server.state.cluster.ClustersImpl: org.slf4j.Logger LOG> >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r17 = newarray (java.lang.Object)[3]
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r17 = newarray (java.lang.Object)[3] >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r17[0] = r1
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r17[0] = r1 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r17[1] = r2
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r17[1] = r2 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r19 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r17[2] = $r19
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r17[2] = $r19 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : interfaceinvoke $r18.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Mapping host {} to cluster {} (id={})", $r17)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : interfaceinvoke $r18.<org.slf4j.Logger: void debug(java.lang.String,java.lang.Object[])>("Mapping host {} to cluster {} (id={})", $r17) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r10 = staticinvoke <java.lang.Long: java.lang.Long valueOf(long)>(l0)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r20 = interfaceinvoke r29.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r5 = (org.apache.ambari.server.state.Cluster) $r20
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : r5 = (org.apache.ambari.server.state.Cluster) $r20 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r21 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.lang.String getClusterName()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r21 = interfaceinvoke r5.<org.apache.ambari.server.state.Cluster: java.lang.String getClusterName()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $z4 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r2)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $z4 = virtualinvoke $r21.<java.lang.String: boolean equals(java.lang.Object)>(r2) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z4 == 0
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z4 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r22 = new org.apache.ambari.server.DuplicateResourceException
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : if $z4 == 0 >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : goto [?= $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : goto [?= $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $z0 = interfaceinvoke r29.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r22 = new org.apache.ambari.server.DuplicateResourceException >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r23 = new java.lang.StringBuilder
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r23 = new java.lang.StringBuilder >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : specialinvoke $r23.<java.lang.StringBuilder: void <init>()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to create a host which already exists: clusterName=")
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r24 = virtualinvoke $r23.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>("Attempted to create a host which already exists: clusterName=") >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r25 = virtualinvoke $r24.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r2) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", hostName=")
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r26 = virtualinvoke $r25.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(", hostName=") >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r27 = virtualinvoke $r26.<java.lang.StringBuilder: java.lang.StringBuilder append(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>()
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : $r28 = virtualinvoke $r27.<java.lang.StringBuilder: java.lang.String toString()>() >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : specialinvoke $r22.<org.apache.ambari.server.DuplicateResourceException: void <init>(java.lang.String)>($r28)
org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : specialinvoke $r22.<org.apache.ambari.server.DuplicateResourceException: void <init>(java.lang.String)>($r28) >>>>>>>> org.apache.ambari.server.state.cluster.ClustersImpl.mapHostToCluster : throw $r22
