org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r3 = new org.springframework.expression.spel.support.StandardEvaluationContext >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : specialinvoke $r3.<org.springframework.expression.spel.support.StandardEvaluationContext: void <init>()>()
org.apache.ambari.server.state.alert.MetricSource$Value.eval : specialinvoke $r3.<org.springframework.expression.spel.support.StandardEvaluationContext: void <init>()>() >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : $i0 = interfaceinvoke r1.<java.util.List: int size()>()
org.apache.ambari.server.state.alert.MetricSource$Value.eval : $i0 = interfaceinvoke r1.<java.util.List: int size()>() >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r4 = staticinvoke <java.util.stream.IntStream: java.util.stream.IntStream range(int,int)>(0, $i0)
org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r4 = staticinvoke <java.util.stream.IntStream: java.util.stream.IntStream range(int,int)>(0, $i0) >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r5 = interfaceinvoke $r4.<java.util.stream.IntStream: java.util.stream.Stream boxed()>()
org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r5 = interfaceinvoke $r4.<java.util.stream.IntStream: java.util.stream.Stream boxed()>() >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r6 = dynamicinvoke "apply" <java.util.function.Function ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Ljava/lang/Object;)Ljava/lang/Object;", handle: <org.apache.ambari.server.state.alert.MetricSource$Value: java.lang.String lambda$eval$0(java.lang.Integer)>, class "(Ljava/lang/Integer;)Ljava/lang/String;")
org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r6 = dynamicinvoke "apply" <java.util.function.Function ()>() <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Ljava/lang/Object;)Ljava/lang/Object;", handle: <org.apache.ambari.server.state.alert.MetricSource$Value: java.lang.String lambda$eval$0(java.lang.Integer)>, class "(Ljava/lang/Integer;)Ljava/lang/String;") >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>()
org.apache.ambari.server.state.alert.MetricSource$Value.eval : virtualinvoke r1.<java.lang.Object: java.lang.Class getClass()>() >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r8 = dynamicinvoke "apply" <java.util.function.Function (java.util.List)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Ljava/lang/Object;)Ljava/lang/Object;", handle: <java.util.List: java.lang.Object get(int)>, class "(Ljava/lang/Integer;)Ljava/lang/Object;")
org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r8 = dynamicinvoke "apply" <java.util.function.Function (java.util.List)>(r1) <java.lang.invoke.LambdaMetafactory: java.lang.invoke.CallSite metafactory(java.lang.invoke.MethodHandles$Lookup,java.lang.String,java.lang.invoke.MethodType,java.lang.invoke.MethodType,java.lang.invoke.MethodHandle,java.lang.invoke.MethodType)>(class "(Ljava/lang/Object;)Ljava/lang/Object;", handle: <java.util.List: java.lang.Object get(int)>, class "(Ljava/lang/Integer;)Ljava/lang/Object;") >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r9 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r6, $r8)
org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r9 = staticinvoke <java.util.stream.Collectors: java.util.stream.Collector toMap(java.util.function.Function,java.util.function.Function)>($r6, $r8) >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r10 = interfaceinvoke $r5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r9)
org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r10 = interfaceinvoke $r5.<java.util.stream.Stream: java.lang.Object collect(java.util.stream.Collector)>($r9) >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r11 = (java.util.Map) $r10
org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r11 = (java.util.Map) $r10 >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : virtualinvoke $r3.<org.springframework.expression.spel.support.StandardEvaluationContext: void setVariables(java.util.Map)>($r11)
org.apache.ambari.server.state.alert.MetricSource$Value.eval : virtualinvoke $r3.<org.springframework.expression.spel.support.StandardEvaluationContext: void setVariables(java.util.Map)>($r11) >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r12 = new org.springframework.expression.spel.standard.SpelExpressionParser
org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r12 = new org.springframework.expression.spel.standard.SpelExpressionParser >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : specialinvoke $r12.<org.springframework.expression.spel.standard.SpelExpressionParser: void <init>()>()
org.apache.ambari.server.state.alert.MetricSource$Value.eval : specialinvoke $r12.<org.springframework.expression.spel.standard.SpelExpressionParser: void <init>()>() >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r13 = r0.<org.apache.ambari.server.state.alert.MetricSource$Value: java.lang.String value>
org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r13 = r0.<org.apache.ambari.server.state.alert.MetricSource$Value: java.lang.String value> >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("(\\{(\\d+)\\})", "#var$2")
org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r14 = virtualinvoke $r13.<java.lang.String: java.lang.String replaceAll(java.lang.String,java.lang.String)>("(\\{(\\d+)\\})", "#var$2") >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r15 = virtualinvoke $r12.<org.springframework.expression.spel.standard.SpelExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>($r14)
org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r15 = virtualinvoke $r12.<org.springframework.expression.spel.standard.SpelExpressionParser: org.springframework.expression.Expression parseExpression(java.lang.String)>($r14) >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r16 = interfaceinvoke $r15.<org.springframework.expression.Expression: java.lang.Object getValue(org.springframework.expression.EvaluationContext)>($r3)
org.apache.ambari.server.state.alert.MetricSource$Value.eval : $r16 = interfaceinvoke $r15.<org.springframework.expression.Expression: java.lang.Object getValue(org.springframework.expression.EvaluationContext)>($r3) >>>>>>>> org.apache.ambari.server.state.alert.MetricSource$Value.eval : return $r16
