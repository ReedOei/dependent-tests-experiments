org.apache.ambari.server.state.stack.OsFamily.find_family : r2 = specialinvoke r0.<org.apache.ambari.server.state.stack.OsFamily: java.util.Map parse_os(java.lang.String)>(r1) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : $r6 = r0.<org.apache.ambari.server.state.stack.OsFamily: java.util.Map osMap>
org.apache.ambari.server.state.stack.OsFamily.find_family : $r6 = r0.<org.apache.ambari.server.state.stack.OsFamily: java.util.Map osMap> >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>()
org.apache.ambari.server.state.stack.OsFamily.find_family : $r7 = interfaceinvoke $r6.<java.util.Map: java.util.Set keySet()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>()
org.apache.ambari.server.state.stack.OsFamily.find_family : r3 = interfaceinvoke $r7.<java.util.Set: java.util.Iterator iterator()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.OsFamily.find_family : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : if $z0 == 0
org.apache.ambari.server.state.stack.OsFamily.find_family : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>()
org.apache.ambari.server.state.stack.OsFamily.find_family : if $z0 == 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : return null
org.apache.ambari.server.state.stack.OsFamily.find_family : $r8 = interfaceinvoke r3.<java.util.Iterator: java.lang.Object next()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : r4 = (java.lang.String) $r8
org.apache.ambari.server.state.stack.OsFamily.find_family : r4 = (java.lang.String) $r8 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : $r9 = r0.<org.apache.ambari.server.state.stack.OsFamily: java.util.Map osMap>
org.apache.ambari.server.state.stack.OsFamily.find_family : $r9 = r0.<org.apache.ambari.server.state.stack.OsFamily: java.util.Map osMap> >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4)
org.apache.ambari.server.state.stack.OsFamily.find_family : $r10 = interfaceinvoke $r9.<java.util.Map: java.lang.Object get(java.lang.Object)>(r4) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : r5 = (org.apache.ambari.server.state.stack.JsonOsFamilyEntry) $r10
org.apache.ambari.server.state.stack.OsFamily.find_family : r5 = (org.apache.ambari.server.state.stack.JsonOsFamilyEntry) $r10 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : $r11 = virtualinvoke r5.<org.apache.ambari.server.state.stack.JsonOsFamilyEntry: java.util.Set getDistro()>()
org.apache.ambari.server.state.stack.OsFamily.find_family : $r11 = virtualinvoke r5.<org.apache.ambari.server.state.stack.JsonOsFamilyEntry: java.util.Set getDistro()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : $r12 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("distro")
org.apache.ambari.server.state.stack.OsFamily.find_family : $r12 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("distro") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : $z1 = interfaceinvoke $r11.<java.util.Set: boolean contains(java.lang.Object)>($r12)
org.apache.ambari.server.state.stack.OsFamily.find_family : $z1 = interfaceinvoke $r11.<java.util.Set: boolean contains(java.lang.Object)>($r12) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : if $z1 == 0
org.apache.ambari.server.state.stack.OsFamily.find_family : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : $r13 = virtualinvoke r5.<org.apache.ambari.server.state.stack.JsonOsFamilyEntry: java.util.Set getVersions()>()
org.apache.ambari.server.state.stack.OsFamily.find_family : if $z1 == 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
org.apache.ambari.server.state.stack.OsFamily.find_family : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()] >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()
org.apache.ambari.server.state.stack.OsFamily.find_family : $r13 = virtualinvoke r5.<org.apache.ambari.server.state.stack.JsonOsFamilyEntry: java.util.Set getVersions()>() >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : $r14 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("versions")
org.apache.ambari.server.state.stack.OsFamily.find_family : $r14 = interfaceinvoke r2.<java.util.Map: java.lang.Object get(java.lang.Object)>("versions") >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : $z2 = interfaceinvoke $r13.<java.util.Set: boolean contains(java.lang.Object)>($r14)
org.apache.ambari.server.state.stack.OsFamily.find_family : $z2 = interfaceinvoke $r13.<java.util.Set: boolean contains(java.lang.Object)>($r14) >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : if $z2 == 0
org.apache.ambari.server.state.stack.OsFamily.find_family : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : return r4
org.apache.ambari.server.state.stack.OsFamily.find_family : if $z2 == 0 >>>>>>>> org.apache.ambari.server.state.stack.OsFamily.find_family : goto [?= $z0 = interfaceinvoke r3.<java.util.Iterator: boolean hasNext()>()]
